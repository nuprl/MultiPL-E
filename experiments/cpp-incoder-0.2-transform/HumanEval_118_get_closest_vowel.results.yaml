language: cpp
name: HumanEval_118_get_closest_vowel
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.length();\n    int m\
    \ = word.length();\n    std::string vowels = \"aeiouAEIOU\";\n    std::string\
    \ vowels_rev = \"AEIOUaeiou\";\n    std::string vowels_rev2 = \"\";\n    std::string\
    \ vowels_rev3 = \"\";\n    std::string vowels_rev4 = \"\";\n    std::string vowels_rev5\
    \ = \"\";\n    std::string vowels_rev6 = \"\";\n    std::string vowels_rev7 =\
    \ \"\";\n    std::string vowels_rev8 = \"\";\n    std::string vowels_rev9 = \"\
    \";\n    std::string vowels_rev10 = \"\";\n    std::string vowels_rev11 = \"\"\
    ;\n    std::string vowels_rev12 = \"\";\n    std::string vowels_rev13 = \"\";\n\
    \    std::string vowels_rev14 = \"\";\n    std::string vowels_rev15 = \"\";\n\
    \    std::string vowels_rev16 = \"\";\n    std::string vowels_rev17 = \"\";\n\
    \    std::string vowels_rev18 = \"\";\n    std::string vowels_rev19 = \"\";\n\
    \    std::string vowels_rev20 = \"\";\n    std::string vowels_rev21 = \"\";\n\
    \    std::string vowels_rev22 = \"\";\n    std::string vowels_rev23 = \"\";\n\
    \    std::string vowels_rev24 = \"\";\n    std::string vowels_rev25 = \"\";\n\
    \    std::string vowels_rev26 = \"\";\n    std::string vowels_rev27 = \"\";\n\
    \    std::string vowels_rev28 = \"\";\n    std::string vowels_rev29 = \"\";\n\
    \    std::string vowels_rev30 = \"\";\n    std::string vowels_rev31 = \"\";\n\
    \    std::string vowels_rev32 = \"\";\n    std::string vowels_rev33 = \"\";\n\
    \    std::string vowels_rev34 = \"\";\n    std::string vowels_rev35 = \"\";\n\
    \    std::string vowels_rev36 = \"\";\n    std::string vowels_rev37 = \"\";\n\
    \    std::string vowels_rev38 = \"\";\n    std::string vowels_rev39 = \"\";\n\
    \    std::string vowels_rev40 = \"\";\n    std::string vowels_rev41 = \"\";\n\
    \    std::string vowels_rev42 = \"\";\n    std::string vowels_rev43 = \"\";\n\
    \    std::string vowels_rev44 = \"\";\n    std::string vowels_rev45 = \"\";\n\
    \    std::string vowels_rev46 = \"\";\n    std::string vowels_rev47 = \"\";\n\
    \    std::string vowels_rev48 = \"\";\n    std::string vowels_rev49 = \"\";\n\
    \    std::string vowels_rev50 = \"\";\n    std::string vowels_rev51 = \"\";\n\
    \    std::string vowels_rev52 = \"\";\n    std::string vowels_rev53 = \"\";\n\
    \    std::string vowels_rev54 = \"\";\n    std::string vowels_rev55 = \"\";\n\
    \    std::string vowels_rev56 = \"\";\n    std::string vowels_rev57 = \"\";\n\
    \    std::string vowels_rev58 = \"\";\n    std::string vowels_rev59 = \"\";\n\
    \    std::string \n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr9wkgkx6.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpr9wkgkx6.cpp:81:1: error: expected unqualified-id before '}' token\n }\n\
    \ ^\n/tmp/tmpr9wkgkx6.cpp: In function 'int main()':\n/tmp/tmpr9wkgkx6.cpp:83:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr9wkgkx6.cpp:2:\n/tmp/tmpr9wkgkx6.cpp:84:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.length();\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string vowels_reverse3\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse5 = \"aeiouAEIOU\";\n    std::string vowels_reverse6 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse7 = \"aeiouAEIOU\";\n    std::string vowels_reverse8\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse10 = \"aeiouAEIOU\";\n    std::string vowels_reverse11 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse12 = \"aeiouAEIOU\";\n    std::string vowels_reverse13\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse15 = \"aeiouAEIOU\";\n    std::string vowels_reverse16 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse17 = \"aeiouAEIOU\";\n    std::string vowels_reverse18\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse20 = \"aeiouAEIOU\";\n    std::string vowels_reverse21 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string vowels_reverse23\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse25 = \"aeiouAEIOU\";\n    std::string vowels_reverse26 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse27 = \"aeiouAEIOU\";\n    std::string vowels_reverse28\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse30 = \"aeiouAEIOU\";\n    std::string vowels_reverse31 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string vowels_reverse33\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse35 = \"aeiouAEIOU\";\n    std::string vowels_\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbftn_nmb.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpbftn_nmb.cpp:56:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpbftn_nmb.cpp: In function 'int main()':\n/tmp/tmpbftn_nmb.cpp:58:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbftn_nmb.cpp:2:\n/tmp/tmpbftn_nmb.cpp:59:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    std::string vowels_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end_end = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start_end_end_end_end_end = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end_end_end_end_end_end = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_end_end_end_end_\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxpgw7lpc.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpxpgw7lpc.cpp:30:17: error: redeclaration of 'std::string vowels_start_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_start_end_end_end_end_end_end_end_end_end = \"AEIOUaeiou\"\
    ;\n                 ^\n/tmp/tmpxpgw7lpc.cpp:29:17: error: 'std::string vowels_start_end_end_end_end_end_end_end_end_end'\
    \ previously declared here\n     std::string vowels_start_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpxpgw7lpc.cpp:32:17: error: redeclaration\
    \ of 'std::string vowels_start_end_end_end_end_end_end_end_end_end_end'\n    \
    \ std::string vowels_start_end_end_end_end_end_end_end_end_end_end = \"AEIOUaeiou\"\
    ;\n                 ^\n/tmp/tmpxpgw7lpc.cpp:31:17: error: 'std::string vowels_start_end_end_end_end_end_end_end_end_end_end'\
    \ previously declared here\n     std::string vowels_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpxpgw7lpc.cpp:35:17: error: redeclaration\
    \ of 'std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpxpgw7lpc.cpp:34:17: error: 'std::string\
    \ vowels_start_end_end_end_end_end_end_end_end_end_end_end_end' previously declared\
    \ here\n     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpxpgw7lpc.cpp:36:17: error: redeclaration\
    \ of 'std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpxpgw7lpc.cpp:34:17: error: 'std::string\
    \ vowels_start_end_end_end_end_end_end_end_end_end_end_end_end' previously declared\
    \ here\n     std::string vowels_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpxpgw7lpc.cpp:39:17: error: redeclaration\
    \ of 'std::string vowels_start_end_end_end_end_en"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    std::string vowels_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle_end = \"AEIOUaeiou\";\n    std::string vowels_middle_start = \"\
    AEIOUaeiou\";\n    std::string vowels_middle_start_end = \"AEIOUaeiou\";\n   \
    \ std::string vowels_middle_start_end_end = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end = \"\
    AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_end_end_end_end_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_end_end_end_end_end_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end = \"\
    AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyv7uco_b.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpyv7uco_b.cpp:36:17: error: redeclaration of 'std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:35:17: error: 'std::string\
    \ vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end' previously\
    \ declared here\n     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:37:17: error: redeclaration\
    \ of 'std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:35:17: error: 'std::string\
    \ vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end' previously\
    \ declared here\n     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:39:17: error: redeclaration\
    \ of 'std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:38:17: error: 'std::string\
    \ vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end' previously\
    \ declared here\n     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:40:17: error: redeclaration\
    \ of 'std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:38:17: error: 'std::string\
    \ vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end' previously\
    \ declared h"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse_back_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfad7gu81.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpfad7gu81.cpp:39:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpfad7gu81.cpp: In function 'int main()':\n/tmp/tmpfad7gu81.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfad7gu81.cpp:2:\n/tmp/tmpfad7gu81.cpp:42:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code goes here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse = \"\";\n    std::string vowels_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back = \"\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse = \"\"\
    ;\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp30efk3js.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp30efk3js.cpp:35:17: error: redeclaration of 'std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\n\
    \     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmp30efk3js.cpp:34:17: error: 'std::string\
    \ vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\
    \ previously declared here\n     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmp30efk3js.cpp:38:17: error: redeclaration\
    \ of 'std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\n\
    \     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmp30efk3js.cpp:37:17: error: 'std::string\
    \ vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\
    \ previously declared here\n     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmp30efk3js.cpp:39:17: error: redeclaration\
    \ of 'std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\n\
    \     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmp30efk3js.cpp:37:17: error: 'std::string\
    \ vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\
    \ previously declared here\n     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmp30efk3js"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reversed = vowels + vowels.substr(1, vowels.size());\n\
    \    std::string vowels_reversed_upper = vowels_reversed + vowels_reversed.substr(1,\
    \ vowels_reversed.size());\n    std::string vowels_reversed_lower = vowels_reversed\
    \ + vowels_reversed.substr(2, vowels_reversed.size());\n    std::string vowels_reversed_upper_lower\
    \ = vowels_reversed + vowels_reversed.substr(3, vowels_reversed.size());\n   \
    \ std::string vowels_reversed_lower_upper = vowels_reversed + vowels_reversed.substr(4,\
    \ vowels_reversed.size());\n    std::string vowels_reversed_upper_lower_lower\
    \ = vowels_reversed + vowels_reversed.substr(5, vowels_reversed.size());\n   \
    \ std::string vowels_reversed_lower_upper_lower = vowels_reversed + vowels_reversed.substr(6,\
    \ vowels_reversed.size());\n    std::string vowels_reversed_upper_lower_lower_upper\
    \ = vowels_reversed + vowels_reversed.substr(7, vowels_reversed.size());\n   \
    \ std::string vowels_reversed_lower_upper_lower_upper = vowels_reversed + vowels_reversed.substr(8,\
    \ vowels_reversed.size());\n    std::string vowels_reversed_upper_lower_lower_upper_lower\
    \ = vowels_reversed + vowels_reversed.substr(9, vowels_reversed.size());\n   \
    \ std::string vowels_reversed_lower_upper_lower_upper_lower_lower = vowels_reversed\
    \ + vowels_reversed.substr(10, vowels_reversed.size());\n    std::string vowels_reversed_upper_lower_lower_upper_lower_lower_upper\
    \ = vowels_reversed + vowels_reversed.substr(11, vowels_reversed.size());\n  \
    \  std::string vowels_reversed_lower_upper_lower_upper_lower_lower_upper_lower\
    \ = vowels_reversed + vowels_reversed.substr(12, vowels_reversed.size());\n  \
    \  std::string vowels_reversed_upper_lower_lower_upper_lower_lower_upper_lower_upper\
    \ = vowels_reversed + vowels_reversed.substr(13, vowels_reversed.size());\n  \
    \  std::string vowels_reversed_lower_upper_lower_upper_lower_lower_upper_lower_upper_lower\
    \ = vowels_reversed + vowels_reversed.substr(14, vowels_reversed.size());\n  \
    \  std::string vowels_reversed_upper_lower_lower_upper_lower_lower_upper_lower_upper_lower_upper\
    \ = vowels_reversed + vowels_reversed.substr(15, vowels_reversed.size());\n  \
    \  std::string vowels_reversed_lower_upper_lower_upper_lower_lower_upper_lower_upper_lower_upper\
    \ = vowels_reversed + vowels_reversed.substr(16, vowels_reversed.size\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppgax702i.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmppgax702i.cpp:36:1: error: expected ')' before '}' token\n }\n ^\n/tmp/tmppgax702i.cpp:36:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmppgax702i.cpp: In function\
    \ 'int main()':\n/tmp/tmppgax702i.cpp:38:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppgax702i.cpp:2:\n/tmp/tmppgax702i.cpp:39:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzu1kmx4a.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpzu1kmx4a.cpp:34:17: error: redeclaration of 'std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\n\
    \     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmpzu1kmx4a.cpp:33:17: error: 'std::string\
    \ vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\
    \ previously declared here\n     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmpzu1kmx4a.cpp:37:17: error: redeclaration\
    \ of 'std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\n\
    \     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmpzu1kmx4a.cpp:36:17: error: 'std::string\
    \ vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\
    \ previously declared here\n     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmpzu1kmx4a.cpp:40:17: error: redeclaration\
    \ of 'std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\n\
    \     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmpzu1kmx4a.cpp:39:17: error: 'std::string\
    \ vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\
    \ previously declared here\n     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse_back_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfad7gu81.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpfad7gu81.cpp:39:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpfad7gu81.cpp: In function 'int main()':\n/tmp/tmpfad7gu81.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfad7gu81.cpp:2:\n/tmp/tmpfad7gu81.cpp:42:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.length();\n    int m = vowels.length();\n    int vowel_counter\
    \ = 0;\n    int consonant_counter = 0;\n    int consonant_index = 0;\n    int\
    \ vowel_index = 0;\n    std::string vowel_word = \"\";\n    std::string consonant_word\
    \ = \"\";\n    for (int i = 0; i < n; i++) {\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_counter++;\n            if (vowel_counter == m) {\n   \
    \             vowel_word = word;\n                vowel_index = i;\n         \
    \       vowel_counter = 0;\n            }\n        }\n    }\n    for (int i =\
    \ n-1; i >= 0; i--) {\n        if (word[i] == vowels[vowel_index]) {\n       \
    \     vowel_counter++;\n            if (vowel_counter == m) {\n              \
    \  vowel_word = word;\n                vowel_index = i;\n                vowel_counter\
    \ = 0;\n            }\n        }\n    }\n    for (int i = 0; i < n; i++) {\n \
    \       if (word[i] == consonants[consonant_index]) {\n            consonant_counter++;\n\
    \            if (consonant_counter == m) {\n                consonant_word = word;\n\
    \                consonant_index = i;\n                consonant_counter = 0;\n\
    \            }\n        }\n    }\n    for (int i = n-1; i >= 0; i--) {\n     \
    \   if (word[i] == consonants[consonant_index]) {\n            consonant_counter++;\n\
    \            if (consonant_counter == m) {\n                consonant_word = word;\n\
    \                consonant_index = i;\n                consonant_counter = 0;\n\
    \            }\n        }\n    }\n    return vowel_word;\n}\nint main() {\n  \
    \  auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3jam8oa.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpb3jam8oa.cpp:48:24: error: 'consonants' was not declared in this scope\n\
    \         if (word[i] == consonants[consonant_index]) {\n                    \
    \    ^\n/tmp/tmpb3jam8oa.cpp:58:24: error: 'consonants' was not declared in this\
    \ scope\n         if (word[i] == consonants[consonant_index]) {\n            \
    \            ^\n/tmp/tmpb3jam8oa.cpp: In function 'int main()':\n/tmp/tmpb3jam8oa.cpp:70:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3jam8oa.cpp:2:\n/tmp/tmpb3jam8oa.cpp:71:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reversed = vowels.substr(0, vowels.size() - 1);\n  \
    \  std::string vowels_reversed_upper = vowels_reversed.toupper();\n    std::string\
    \ vowels_reversed_lower = vowels_reversed.tolower();\n    std::string vowels_upper\
    \ = vowels.toupper();\n    std::string vowels_lower = vowels.tolower();\n    std::string\
    \ vowels_reversed_upper_reversed = vowels_reversed_upper.substr(0, vowels_reversed_upper.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed = vowels_reversed_lower.substr(0,\
    \ vowels_reversed_lower.size() - 1);\n    std::string vowels_lower_reversed =\
    \ vowels_lower.substr(0, vowels_lower.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed\
    \ = vowels_reversed_upper_reversed.substr(0, vowels_reversed_upper_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed = vowels_reversed_lower_reversed.substr(0,\
    \ vowels_reversed_lower_reversed.size() - 1);\n    std::string vowels_lower_reversed_reversed\
    \ = vowels_lower_reversed.substr(0, vowels_lower_reversed.size() - 1);\n    std::string\
    \ vowels_reversed_upper_reversed_reversed_reversed = vowels_reversed_upper_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_lower_reversed_reversed_reversed = vowels_lower_reversed_reversed.substr(0,\
    \ vowels_lower_reversed_reversed.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_lower_reversed_reversed_reversed_reversed = vowels_lower_reversed_reversed_reversed.substr(0,\
    \ vowels_lower_reversed_reversed_reversed.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reverse\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpspmzbkm5.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpspmzbkm5.cpp:20:57: error: 'std::string' has no member named 'toupper'\n\
    \     std::string vowels_reversed_upper = vowels_reversed.toupper();\n       \
    \                                                  ^\n/tmp/tmpspmzbkm5.cpp:21:57:\
    \ error: 'std::string' has no member named 'tolower'\n     std::string vowels_reversed_lower\
    \ = vowels_reversed.tolower();\n                                             \
    \            ^\n/tmp/tmpspmzbkm5.cpp:22:39: error: 'std::string' has no member\
    \ named 'toupper'\n     std::string vowels_upper = vowels.toupper();\n       \
    \                                ^\n/tmp/tmpspmzbkm5.cpp:23:39: error: 'std::string'\
    \ has no member named 'tolower'\n     std::string vowels_lower = vowels.tolower();\n\
    \                                       ^\n/tmp/tmpspmzbkm5.cpp:36:86: error:\
    \ 'vowels_reversed_upper_reversed_reversed_reversed_reverse' was not declared\
    \ in this scope\n     std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reverse\n               \
    \                                                                       ^\n/tmp/tmpspmzbkm5.cpp:37:1:\
    \ error: expected ',' or ';' before '}' token\n }\n ^\n/tmp/tmpspmzbkm5.cpp: In\
    \ function 'int main()':\n/tmp/tmpspmzbkm5.cpp:39:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpspmzbkm5.cpp:2:\n/tmp/tmpspmzbkm5.cpp:40:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = vowels;\n    vowels_reverse.resize(vowels_reverse.size()\
    \ - 1, vowels_reverse.at(0));\n    std::string vowels_reverse2 = vowels_reverse;\n\
    \    vowels_reverse2.resize(vowels_reverse2.size() - 1, vowels_reverse2.at(0));\n\
    \    std::string vowels_reverse3 = vowels_reverse2;\n    vowels_reverse3.resize(vowels_reverse3.size()\
    \ - 1, vowels_reverse3.at(0));\n    std::string vowels_reverse4 = vowels_reverse3;\n\
    \    vowels_reverse4.resize(vowels_reverse4.size() - 1, vowels_reverse4.at(0));\n\
    \    std::string vowels_reverse5 = vowels_reverse4;\n    vowels_reverse5.resize(vowels_reverse5.size()\
    \ - 1, vowels_reverse5.at(0));\n    std::string vowels_reverse6 = vowels_reverse5;\n\
    \    vowels_reverse6.resize(vowels_reverse6.size() - 1, vowels_reverse6.at(0));\n\
    \    std::string vowels_reverse7 = vowels_reverse6;\n    vowels_reverse7.resize(vowels_reverse7.size()\
    \ - 1, vowels_reverse7.at(0));\n    std::string vowels_reverse8 = vowels_reverse7;\n\
    \    vowels_reverse8.resize(vowels_reverse8.size() - 1, vowels_reverse8.at(0));\n\
    \    std::string vowels_reverse9 = vowels_reverse8;\n    vowels_reverse9.resize(vowels_reverse9.size()\
    \ - 1, vowels_reverse9.at(0));\n    std::string vowels_reverse10 = vowels_reverse9;\n\
    \    vowels_reverse10.resize(vowels_reverse10.size() - 1, vowels_reverse10.at(0));\n\
    \    std::string vowels_reverse11 = vowels_reverse10;\n    vowels_reverse11.resize(vowels_reverse11.size()\
    \ - 1, vowels_reverse11.at(0));\n    std::string vowels_reverse12 = vowels_reverse11;\n\
    \    vowels_reverse12.resize(vowels_reverse12.size() - 1, vowels_reverse12.at(0));\n\
    \    std::string vowels_reverse13 = vowels_reverse12;\n    vowels_reverse13.resize(vowels_reverse13.size()\
    \ - 1, vowels_reverse13.at(0));\n    std::string vowels_reverse14 = vowels_reverse13;\n\
    \    vowels_reverse14.resize(vowels_reverse14.size() - 1, vowels_reverse14.at(0));\n\
    \    std::string vowels_reverse15 = vowels_reverse14;\n    vowels_reverse15.resize(vowels_reverse15.size()\
    \ - 1, vowels_reverse15.at(0));\n    std::string vowels_reverse16 = vowels_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo2rzxcli.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpo2rzxcli.cpp:49:36: error: 'vowels_' was not declared in this scope\n\
    \     std::string vowels_reverse16 = vowels_\n                               \
    \     ^\n/tmp/tmpo2rzxcli.cpp:50:1: error: expected ',' or ';' before '}' token\n\
    \ }\n ^\n/tmp/tmpo2rzxcli.cpp: In function 'int main()':\n/tmp/tmpo2rzxcli.cpp:52:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo2rzxcli.cpp:2:\n/tmp/tmpo2rzxcli.cpp:53:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2kp7kw.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp9o2kp7kw.cpp:26:17: error: redeclaration of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:25:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously declared\
    \ here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:28:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:29:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:30:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse_back_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfad7gu81.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpfad7gu81.cpp:39:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpfad7gu81.cpp: In function 'int main()':\n/tmp/tmpfad7gu81.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfad7gu81.cpp:2:\n/tmp/tmpfad7gu81.cpp:42:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_lower = \"AEIOUaeiou\";\n    std::string vowels_upper\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper2 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_upper3 = \"AEIOUAEIOU\";\n    std::string vowels_upper4 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_upper5 = \"AEIOUAEIOU\";\n    std::string vowels_upper6\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper7 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_upper8 = \"AEIOUAEIOU\";\n    std::string vowels_upper9 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_upper10 = \"AEIOUAEIOU\";\n    std::string vowels_upper11\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper12 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_upper13 = \"AEIOUAEIOU\";\n    std::string vowels_upper14 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_upper15 = \"AEIOUAEIOU\";\n    std::string vowels_upper16\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper17 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_upper18 = \"AEIOUAEIOU\";\n    std::string vowels_upper19 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_upper20 = \"AEIOUAEIOU\";\n    std::string vowels_upper21\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper22 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_upper23 = \"AEIOUAEIOU\";\n    std::string vowels_upper24 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_upper25 = \"AEIOUAEIOU\";\n    std::string vowels_upper26\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper27 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_upper28 = \"AEIOUAEIOU\";\n    std::string vowels_upper29 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_upper30 = \"AEIOUAEIOU\";\n    std::string vowels_upper31\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_upper32 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_upper33 = \"\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptxnw9rdr.cpp:52:34: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_upper33 = \"\n                        \
    \          ^\n/tmp/tmptxnw9rdr.cpp:52:5: error: missing terminating \" character\n\
    \     std::string vowels_upper33 = \"\n     ^\n/tmp/tmptxnw9rdr.cpp: In function\
    \ 'std::string get_closest_vowel(std::string)':\n/tmp/tmptxnw9rdr.cpp:53:1: error:\
    \ expected primary-expression before '}' token\n }\n ^\n/tmp/tmptxnw9rdr.cpp:53:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmptxnw9rdr.cpp: In function\
    \ 'int main()':\n/tmp/tmptxnw9rdr.cpp:55:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptxnw9rdr.cpp:2:\n/tmp/tmptxnw9rdr.cpp:56:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code goes here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    int vowel_counter = 0;\n    int vowel_counter2\
    \ = 0;\n    int consonant_counter = 0;\n    int consonant_counter2 = 0;\n    int\
    \ consonant_counter3 = 0;\n    int consonant_counter4 = 0;\n    int consonant_counter5\
    \ = 0;\n    int consonant_counter6 = 0;\n    int consonant_counter7 = 0;\n   \
    \ int consonant_counter8 = 0;\n    int consonant_counter9 = 0;\n    int consonant_counter10\
    \ = 0;\n    int consonant_counter11 = 0;\n    int consonant_counter12 = 0;\n \
    \   int consonant_counter13 = 0;\n    int consonant_counter14 = 0;\n    int consonant_counter15\
    \ = 0;\n    int consonant_counter16 = 0;\n    int consonant_counter17 = 0;\n \
    \   int consonant_counter18 = 0;\n    int consonant_counter19 = 0;\n    int consonant_counter20\
    \ = 0;\n    int consonant_counter21 = 0;\n    int consonant_counter22 = 0;\n \
    \   int consonant_counter23 = 0;\n    int consonant_counter24 = 0;\n    int consonant_counter25\
    \ = 0;\n    int consonant_counter26 = 0;\n    int consonant_counter27 = 0;\n \
    \   int consonant_counter28 = 0;\n    int consonant_counter29 = 0;\n    int consonant_counter30\
    \ = 0;\n    int consonant_counter31 = 0;\n    int consonant_counter32 = 0;\n \
    \   int consonant_counter33 = 0;\n    int consonant_counter34 = 0;\n    int consonant_counter35\
    \ = 0;\n    int consonant_counter36 = 0;\n    int consonant_counter37 = 0;\n \
    \   int consonant_counter38 = 0;\n    int consonant_counter39 = 0;\n    int consonant_counter40\
    \ = 0;\n    int consonant_counter41 = 0;\n    int consonant_counter42 = 0;\n \
    \   int consonant_counter43 = 0;\n    int consonant_counter44 = 0;\n    int consonant_counter45\
    \ = 0;\n    int consonant_counter46 = 0;\n    int consonant_counter47 = 0;\n \
    \   int consonant_counter48 = 0;\n    int consonant_counter49 = 0;\n    int consonant_counter50\
    \ = 0;\n    int consonant_counter51 = 0;\n    int consonant_counter52 = 0;\n \
    \   int consonant_counter53 = 0;\n    int consonant_counter54 = 0;\n    int consonant_counter55\
    \ = 0;\n    int consonant_counter56 = 0;\n    int consonant_counter57 = 0;\n \
    \   int consonant_counter58 = 0;\n    int consonant_counter59 = 0;\n    int consonant_counter60\
    \ = 0;\n    int consonant_counter61 = 0;\n\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph4gxpghx.cpp: In function 'int main()':\n/tmp/tmph4gxpghx.cpp:86:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph4gxpghx.cpp:2:\n/tmp/tmph4gxpghx.cpp:87:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp453g29t3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse_back_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfad7gu81.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpfad7gu81.cpp:39:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpfad7gu81.cpp: In function 'int main()':\n/tmp/tmpfad7gu81.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfad7gu81.cpp:2:\n/tmp/tmpfad7gu81.cpp:42:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp453g29t3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp453g29t3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.size();\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    int vowels_size = vowels.size();\n    \n    for(int\
    \ i = n-1; i >= 0; i--) {\n        if(word[i] == word[i+1]) {\n            if((word[i]\
    \ >= 'a' && word[i] <= 'z') || (word[i] >= 'A' && word[i] <= 'Z')) {\n       \
    \         for(int j = i; j >= 0; j--) {\n                    if(word[j] == word[j+1])\
    \ {\n                        if((word[j] >= 'a' && word[j] <= 'z') || (word[j]\
    \ >= 'A' && word[j] <= 'Z')) {\n                            if(j-i+1 >= vowels_size)\
    \ {\n                                return \"\";\n                          \
    \  }\n                            else {\n                                return\
    \ word[i+1-vowels_size];\n                            }\n                    \
    \    }\n                    }\n                }\n            }\n        }\n \
    \   }\n    return \"\";\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplor1m475.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int vowels_size = vowels.size();\n    int vowels_index = 0;\n    int vowels_index_end\
    \ = 0;\n    int vowels_index_start = 0;\n    int vowels_index_start_end = 0;\n\
    \    int vowels_index_start_end_end = 0;\n    int vowels_index_start_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end = 0;\n    int vowels_index_start_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end = 0;\n    int vowels_index_start_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end = 0;\n    int\
    \ vowels_index_start_end_end_end_end_end_end_end_end_end = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n    int vowels_index_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = 0;\n\n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplbtb7rf2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string vowels_reverse3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string vowels_reverse8\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string vowels_reverse13\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string vowels_reverse18\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string vowels_reverse23\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string vowels_reverse28\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string vowels_reverse33\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi6b9aj3o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    std::string vowels_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start2 = \"AEIOUaeiou\";\n    std::string vowels_end2 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle2 = \"AEIOUaeiou\";\n    std::string vowels_start3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle3 = \"AEIOUaeiou\";\n    std::string vowels_start4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end4 = \"AEIOUaeiou\";\n    std::string vowels_middle4\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start5 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end5 = \"AEIOUaeiou\";\n    std::string vowels_middle5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start6 = \"AEIOUaeiou\";\n    std::string vowels_end6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle6 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start7 = \"AEIOUaeiou\";\n    std::string vowels_end7 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle7 = \"AEIOUaeiou\";\n    std::string vowels_start8\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle8 = \"AEIOUaeiou\";\n    std::string vowels_start9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end9 = \"AEIOUaeiou\";\n    std::string vowels_middle9\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start10 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end10 = \"AEIOUaeiou\";\n    std::string vowels_middle10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start11 = \"AEIOUaeiou\";\n    std::string vowels_end11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle11 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start12 = \"AEIOUaeiou\";\n    std::string vowels_end12 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle12 = \"AEIOUaeiou\";\n\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprrnawc4x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    std::string vowels_begin\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_begin2 = \"AEIOUaeiou\";\n    std::string vowels_end2 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle2 = \"AEIOUaeiou\";\n    std::string vowels_begin3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle3 = \"AEIOUaeiou\";\n    std::string vowels_begin4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end4 = \"AEIOUaeiou\";\n    std::string vowels_middle4\
    \ = \"AEIOUaeiou\";\n    std::string vowels_begin5 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end5 = \"AEIOUaeiou\";\n    std::string vowels_middle5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_begin6 = \"AEIOUaeiou\";\n    std::string vowels_end6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle6 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_begin7 = \"AEIOUaeiou\";\n    std::string vowels_end7 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle7 = \"AEIOUaeiou\";\n    std::string vowels_begin8\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle8 = \"AEIOUaeiou\";\n    std::string vowels_begin9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end9 = \"AEIOUaeiou\";\n    std::string vowels_middle9\
    \ = \"AEIOUaeiou\";\n    std::string vowels_begin10 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end10 = \"AEIOUaeiou\";\n    std::string vowels_middle10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_begin11 = \"AEIOUaeiou\";\n    std::string vowels_end11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle11 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_begin12 = \"AEIOUaeiou\";\n    std::string vowels_end12 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle12 = \"AEIOUaeiou\";\n\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpalk8qzrg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_rev = \"AEIOUaeiou\";\n    std::reverse(vowels.begin(),\
    \ vowels.end());\n    std::reverse(vowels_rev.begin(), vowels_rev.end());\n  \
    \  std::string vowels_rev2 = \"\";\n    std::string vowels_rev3 = \"\";\n    std::string\
    \ vowels_rev4 = \"\";\n    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6\
    \ = \"\";\n    std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 =\
    \ \"\";\n    std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\
    \";\n    std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\"\
    ;\n    std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n\
    \    std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n\
    \    std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n\
    \    std::string vowels_rev19 = \"\";\n    std::string vowels_rev20 = \"\";\n\
    \    std::string vowels_rev21 = \"\";\n    std::string vowels_rev22 = \"\";\n\
    \    std::string vowels_rev23 = \"\";\n    std::string vowels_rev24 = \"\";\n\
    \    std::string vowels_rev25 = \"\";\n    std::string vowels_rev26 = \"\";\n\
    \    std::string vowels_rev27 = \"\";\n    std::string vowels_rev28 = \"\";\n\
    \    std::string vowels_rev29 = \"\";\n    std::string vowels_rev30 = \"\";\n\
    \    std::string vowels_rev31 = \"\";\n    std::string vowels_rev32 = \"\";\n\
    \    std::string vowels_rev33 = \"\";\n    std::string vowels_rev34 = \"\";\n\
    \    std::string vowels_rev35 = \"\";\n    std::string vowels_rev36 = \"\";\n\
    \    std::string vowels_rev37 = \"\";\n    std::string vowels_rev38 = \"\";\n\
    \    std::string vowels_rev39 = \"\";\n    std::string vowels_rev40 = \"\";\n\
    \    std::string vowels_rev41 = \"\";\n    std::string vowels_rev42 = \"\";\n\
    \    std::string vowels_rev43 = \"\";\n    std::string vowels_rev44 = \"\";\n\
    \    std::string vowels_rev45 = \"\";\n    std::string vowels_rev46 = \"\";\n\
    \    std::string vowels_rev47 = \"\";\n    std::string vowels_rev48 = \"\";\n\
    \    std::string vowels_rev49 = \"\";\n    std::string vowels_rev50 = \"\";\n\
    \    std::string vowels_rev51 = \"\";\n    std::string vowels_rev52 = \"\";\n\
    \    std::string vowels_rev53 = \"\";\n    std::string vowels_rev54 = \"\";\n\
    \    std::string vowels_rev55 = \"\";\n    std::string vowels_rev56 = \"\";\n\
    \    std::string vowels_rev57 = \"\";\n    std::string vowels_\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppt79_awm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse9 = \"aeiouAEIOU\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"aeiouAEIOU\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse14 = \"aeiouAEIOU\";\n    std::string vowels_reverse15 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse18 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse19 = \"aeiouAEIOU\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"aeiouAEIOU\";\n    std::string vowels_reverse22\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse23 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse24 = \"aeiouAEIOU\";\n    std::string vowels_reverse25 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse28 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse29 = \"aeiouAEIOU\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"aeiouAEIOU\";\n    std::string vowels_reverse32\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse33 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse34 = \"aeiouAEIOU\";\n    std::string vowels_reverse35 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpve24ofzq.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpve24ofzq.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n \
    \                from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpve24ofzq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected prima"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzu1kmx4a.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpzu1kmx4a.cpp:34:17: error: redeclaration of 'std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\n\
    \     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmpzu1kmx4a.cpp:33:17: error: 'std::string\
    \ vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\
    \ previously declared here\n     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmpzu1kmx4a.cpp:37:17: error: redeclaration\
    \ of 'std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\n\
    \     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmpzu1kmx4a.cpp:36:17: error: 'std::string\
    \ vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\
    \ previously declared here\n     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmpzu1kmx4a.cpp:40:17: error: redeclaration\
    \ of 'std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\n\
    \     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n                 ^\n/tmp/tmpzu1kmx4a.cpp:39:17: error: 'std::string\
    \ vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back'\
    \ previously declared here\n     std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse2 = vowels_reverse.substr(0, vowels_reverse.size()\
    \ - 1);\n    std::string vowels_reverse3 = vowels_reverse2.substr(0, vowels_reverse2.size()\
    \ - 1);\n    std::string vowels_reverse4 = vowels_reverse3.substr(0, vowels_reverse3.size()\
    \ - 1);\n    std::string vowels_reverse5 = vowels_reverse4.substr(0, vowels_reverse4.size()\
    \ - 1);\n    std::string vowels_reverse6 = vowels_reverse5.substr(0, vowels_reverse5.size()\
    \ - 1);\n    std::string vowels_reverse7 = vowels_reverse6.substr(0, vowels_reverse6.size()\
    \ - 1);\n    std::string vowels_reverse8 = vowels_reverse7.substr(0, vowels_reverse7.size()\
    \ - 1);\n    std::string vowels_reverse9 = vowels_reverse8.substr(0, vowels_reverse8.size()\
    \ - 1);\n    std::string vowels_reverse10 = vowels_reverse9.substr(0, vowels_reverse9.size()\
    \ - 1);\n    std::string vowels_reverse11 = vowels_reverse10.substr(0, vowels_reverse10.size()\
    \ - 1);\n    std::string vowels_reverse12 = vowels_reverse11.substr(0, vowels_reverse11.size()\
    \ - 1);\n    std::string vowels_reverse13 = vowels_reverse12.substr(0, vowels_reverse12.size()\
    \ - 1);\n    std::string vowels_reverse14 = vowels_reverse13.substr(0, vowels_reverse13.size()\
    \ - 1);\n    std::string vowels_reverse15 = vowels_reverse14.substr(0, vowels_reverse14.size()\
    \ - 1);\n    std::string vowels_reverse16 = vowels_reverse15.substr(0, vowels_reverse15.size()\
    \ - 1);\n    std::string vowels_reverse17 = vowels_reverse16.substr(0, vowels_reverse16.size()\
    \ - 1);\n    std::string vowels_reverse18 = vowels_reverse17.substr(0, vowels_reverse17.size()\
    \ - 1);\n    std::string vowels_reverse19 = vowels_reverse18.substr(0, vowels_reverse18.size()\
    \ - 1);\n    std::string vowels_reverse20 = vowels_reverse19.substr(0, vowels_reverse19.size()\
    \ - 1);\n    std::string vowels_reverse21 = vowels_reverse20.substr(0, vowels_reverse20.size()\
    \ - 1);\n    std::string vowels_reverse22 = vowels_reverse21.substr(0, vowels_reverse21.size()\
    \ - 1);\n    std::string vowels_reverse23 = vowels_reverse22.substr(0, vowels_reverse22.size()\
    \ - 1);\n    std::string vowels_reverse24 = vowels_reverse23.substr(0, vowels_reverse23.size()\
    \ - 1);\n    std::string vowels_reverse25 = vowels_reverse24.substr(0, vowels_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzczp49fg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = vowels;\n    std::reverse(vowels_reverse.begin(),\
    \ vowels_reverse.end());\n    std::string vowels_reverse2 = vowels;\n    std::reverse(vowels_reverse2.begin(),\
    \ vowels_reverse2.end());\n    std::string vowels_reverse3 = vowels;\n    std::reverse(vowels_reverse3.begin(),\
    \ vowels_reverse3.end());\n    std::string vowels_reverse4 = vowels;\n    std::reverse(vowels_reverse4.begin(),\
    \ vowels_reverse4.end());\n    std::string vowels_reverse5 = vowels;\n    std::reverse(vowels_reverse5.begin(),\
    \ vowels_reverse5.end());\n    std::string vowels_reverse6 = vowels;\n    std::reverse(vowels_reverse6.begin(),\
    \ vowels_reverse6.end());\n    std::string vowels_reverse7 = vowels;\n    std::reverse(vowels_reverse7.begin(),\
    \ vowels_reverse7.end());\n    std::string vowels_reverse8 = vowels;\n    std::reverse(vowels_reverse8.begin(),\
    \ vowels_reverse8.end());\n    std::string vowels_reverse9 = vowels;\n    std::reverse(vowels_reverse9.begin(),\
    \ vowels_reverse9.end());\n    std::string vowels_reverse10 = vowels;\n    std::reverse(vowels_reverse10.begin(),\
    \ vowels_reverse10.end());\n    std::string vowels_reverse11 = vowels;\n    std::reverse(vowels_reverse11.begin(),\
    \ vowels_reverse11.end());\n    std::string vowels_reverse12 = vowels;\n    std::reverse(vowels_reverse12.begin(),\
    \ vowels_reverse12.end());\n    std::string vowels_reverse13 = vowels;\n    std::reverse(vowels_reverse13.begin(),\
    \ vowels_reverse13.end());\n    std::string vowels_reverse14 = vowels;\n    std::reverse(vowels_reverse14.begin(),\
    \ vowels_reverse14.end());\n    std::string vowels_reverse15 = vowels;\n    std::reverse(vowels_reverse15.begin(),\
    \ vowels_reverse15.end());\n    std::string vowels_reverse16 = vowels;\n    std::reverse(vowels_reverse16.begin(),\
    \ vowels_reverse16.end());\n    std::string vowels_reverse17 = vowels;\n    std::reverse(vowels_reverse17.begin(),\
    \ vowels_reverse17.end());\n    std::string vowels_reverse18 = vowels;\n    std::reverse(vowels_reverse18.begin(),\
    \ vowels_reverse18.end());\n    std::string vowels_reverse19 = vowels;\n    std::reverse(vowels_reverse19.begin(),\
    \ vowels_reverse19.end());\n    std::string vowels_reverse20 = vowels;\n    std::reverse(vowels_reverse20.begin(),\
    \ vowels_reverse20.end());\n    std::string vowels_reverse21 = vowels;\n    std::reverse(vowel\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr_wf3qf9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = vowels + vowels.substr(1, vowels.size() -\
    \ 1);\n    std::string vowels_reverse2 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse3 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse4 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse5 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse6 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse7 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse8 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse9 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse10 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse11 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse12 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse13 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse14 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse15 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse16 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse17 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse18 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse19 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse20 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse21 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse22 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse23 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse24 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse25 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse26 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse27 = vowels + vowels.substr(1, vowels.size()\
    \ - 1);\n    std::string vowels_reverse28 = vowels + vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse29 = vowels + \n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7y5fta9y.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjibk8gbc.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpjibk8gbc.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n \
    \                from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjibk8gbc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected prima"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"aeiouAEIOU\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcjwt8ehh.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpcjwt8ehh.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n \
    \                from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcjwt8ehh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected prima"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reversed = vowels.rbegin() + vowels.size();\n    std::string\
    \ vowels_reversed_reversed = vowels_reversed + vowels_reversed;\n    std::string\
    \ vowels_reversed_reversed_reversed = vowels_reversed_reversed + vowels_reversed_reversed;\n\
    \    std::string vowels_reversed_reversed_reversed_reversed = vowels_reversed_reversed_reversed\
    \ + vowels_reversed_reversed_reversed;\n    std::string vowels_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed + vowels_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed + vowels_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ + vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed;\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkulqpjs0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    std::string vowels_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle_end = \"AEIOUaeiou\";\n    std::string vowels_middle_start = \"\
    AEIOUaeiou\";\n    std::string vowels_middle_start_end = \"AEIOUaeiou\";\n   \
    \ std::string vowels_middle_start_end_end = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end = \"\
    AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_end_end_end_end_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_end_end_end_end_end_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end = \"\
    AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyv7uco_b.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpyv7uco_b.cpp:36:17: error: redeclaration of 'std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:35:17: error: 'std::string\
    \ vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end' previously\
    \ declared here\n     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:37:17: error: redeclaration\
    \ of 'std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:35:17: error: 'std::string\
    \ vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end' previously\
    \ declared here\n     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:39:17: error: redeclaration\
    \ of 'std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:38:17: error: 'std::string\
    \ vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end' previously\
    \ declared here\n     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:40:17: error: redeclaration\
    \ of 'std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end'\n\
    \     std::string vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmpyv7uco_b.cpp:38:17: error: 'std::string\
    \ vowels_middle_start_end_end_end_end_end_end_end_end_end_end_end_end_end' previously\
    \ declared h"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reversed = vowels.substr(0, vowels.size() - 1);\n  \
    \  std::string vowels_reversed_reversed = vowels_reversed.substr(0, vowels_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed = vowels_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed.size() - 1);\n    std::string vowels_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed =\
    \ vowels_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed.size() - 1);\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ \n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl61w14s3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int len = word.length();\n    int vowel_count = 0;\n    for (int i = len\
    \ - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_count++;\n        }\n    }\n    if (vowel_count <= 1) {\n\
    \        return \"\";\n    }\n    int vowel_pos = len - vowel_count + 1;\n   \
    \ int consonant_pos = len - vowel_count;\n    int consonant_count = 0;\n    for\
    \ (int i = consonant_pos; i >= 0; i--) {\n        if (word[i] == word[consonant_pos])\
    \ {\n            consonant_count++;\n        }\n    }\n    if (consonant_count\
    \ <= 1) {\n        return \"\";\n    }\n    int consonant_pos = consonant_pos\
    \ - consonant_count + 1;\n    int vowel_pos = vowel_pos - vowel_count + 1;\n \
    \   int vowel_count = 0;\n    for (int i = vowel_pos; i >= 0; i--) {\n       \
    \ if (vowels.find(word[i]) != std::string::npos) {\n            vowel_count++;\n\
    \        }\n    }\n    if (vowel_count <= 1) {\n        return \"\";\n    }\n\
    \    int vowel_pos = vowel_pos - vowel_count + 1;\n    int consonant_pos = consonant_pos\
    \ - consonant_count + 1;\n    int vowel_count = 0;\n    for (int i = consonant_pos;\
    \ i >= 0; i--) {\n        if (word[i] == word[consonant_pos]) {\n            consonant_count++;\n\
    \        }\n    }\n    if (consonant_count <= 1) {\n        return \"\";\n   \
    \ }\n    int consonant_pos = consonant_pos - consonant_count + 1;\n    int vowel_pos\
    \ = vowel_pos - vowel_count + 1;\n    int vowel_count = 0;\n    for (int i = vowel_pos;\
    \ i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n \
    \           vowel_count++;\n        }\n    }\n    if (vowel_count <= 1) {\n  \
    \      return \"\";\n    }\n    int vowel_pos = vowel_pos - vowel_count + 1;\n\
    \    int consonant_pos = consonant_pos - consonant_count + 1;\n    int vowel_count\
    \ = 0;\n    for (int i = consonant_pos; i >= 0; i--) {\n        if (word[i] ==\
    \ word[consonant_pos]) {\n            consonant_count++;\n        }\n    }\n \
    \   if (consonant_count <= 1) {\n        return \"\";\n    }\n    int consonant_pos\
    \ = consonant_pos - consonant_count + 1;\n    int vowel_pos = vowel_pos - vowel_count\
    \ + 1;\n    int vowel_count = 0;\n    for (int i = vowel_pos; i >= 0; \n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp564zl0nc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.size();\n    int vowel_pos = -1;\n    int vowel_len = vowels.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (word[i] == vowels[vowel_pos])\
    \ {\n            vowel_pos = i;\n        }\n    }\n    if (vowel_pos == -1) {\n\
    \        return \"\";\n    }\n    int vowel_start = vowel_pos + 1;\n    int vowel_end\
    \ = vowel_pos + 1;\n    for (int i = vowel_pos + 1; i < vowel_len; i++) {\n  \
    \      if (word[i] == vowels[i]) {\n            vowel_end = i;\n        }\n  \
    \  }\n    if (vowel_start == vowel_end) {\n        return \"\";\n    }\n    int\
    \ vowel_mid = (vowel_start + vowel_end) / 2;\n    int vowel_mid2 = vowel_mid -\
    \ 1;\n    int vowel_mid3 = vowel_mid + 1;\n    int vowel_mid4 = vowel_mid * 2;\n\
    \    int vowel_mid5 = vowel_mid * 3;\n    int vowel_mid6 = vowel_mid * 4;\n  \
    \  int vowel_mid7 = vowel_mid * 5;\n    int vowel_mid8 = vowel_mid * 6;\n    int\
    \ vowel_mid9 = vowel_mid * 7;\n    int vowel_mid10 = vowel_mid * 8;\n    int vowel_mid11\
    \ = vowel_mid * 9;\n    int vowel_mid12 = vowel_mid * 10;\n    int vowel_mid13\
    \ = vowel_mid * 11;\n    int vowel_mid14 = vowel_mid * 12;\n    int vowel_mid15\
    \ = vowel_mid * 13;\n    int vowel_mid16 = vowel_mid * 14;\n    int vowel_mid17\
    \ = vowel_mid * 15;\n    int vowel_mid18 = vowel_mid * 16;\n    int vowel_mid19\
    \ = vowel_mid * 17;\n    int vowel_mid20 = vowel_mid * 18;\n    int vowel_mid21\
    \ = vowel_mid * 19;\n    int vowel_mid22 = vowel_mid * 20;\n    int vowel_mid23\
    \ = vowel_mid * 21;\n    int vowel_mid24 = vowel_mid * 22;\n    int vowel_mid25\
    \ = vowel_mid * 23;\n    int vowel_mid26 = vowel_mid * 24;\n    int vowel_mid27\
    \ = vowel_mid * 25;\n    int vowel_mid28 = vowel_mid * 26;\n    int vowel_mid29\
    \ = vowel_mid * 27;\n    int vowel_mid30 = vowel_mid * 28;\n    int vowel_mid31\
    \ = vowel_mid * 29;\n    int vowel_mid32 = vowel_mid \n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxrdbw_yo.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.size();\n    int vowel_pos = -1;\n    int vowel_pos_right\
    \ = -1;\n    int vowel_pos_left = -1;\n    for (int i = 0; i < n; i++) {\n   \
    \     if (vowels.find(word[i]) != std::string::npos) {\n            vowel_pos\
    \ = i;\n            break;\n        }\n    }\n    for (int i = n-1; i >= 0; i--)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            vowel_pos_right\
    \ = i;\n            break;\n        }\n    }\n    for (int i = 0; i < n; i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            vowel_pos_left\
    \ = i;\n            break;\n        }\n    }\n    if (vowel_pos == -1) {\n   \
    \     return \"\";\n    }\n    int vowel_pos_right = vowel_pos_right + 1;\n  \
    \  int vowel_pos_left = vowel_pos_left + 1;\n    int vowel_pos_center = (vowel_pos_right\
    \ + vowel_pos_left) / 2;\n    if (vowel_pos_center == vowel_pos) {\n        return\
    \ word;\n    }\n    if (vowel_pos_center < vowel_pos) {\n        return word.substr(0,\
    \ vowel_pos_center);\n    }\n    return word.substr(vowel_pos_center - 1, 1);\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpd27f97rv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string vowels_reverse3\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse5 = \"aeiouAEIOU\";\n    std::string vowels_reverse6 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse7 = \"aeiouAEIOU\";\n    std::string vowels_reverse8\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse10 = \"aeiouAEIOU\";\n    std::string vowels_reverse11 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse12 = \"aeiouAEIOU\";\n    std::string vowels_reverse13\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse15 = \"aeiouAEIOU\";\n    std::string vowels_reverse16 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse17 = \"aeiouAEIOU\";\n    std::string vowels_reverse18\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse20 = \"aeiouAEIOU\";\n    std::string vowels_reverse21 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string vowels_reverse23\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse25 = \"aeiouAEIOU\";\n    std::string vowels_reverse26 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse27 = \"aeiouAEIOU\";\n    std::string vowels_reverse28\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse30 = \"aeiouAEIOU\";\n    std::string vowels_reverse31 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string vowels_reverse33\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse35 = \"aeiouAEIOU\";\n    std::string vowels_reverse\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmdtr8nlc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper = \"AEIOUAEIOU\";\n    std::string vowels_lower\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper2 = \"AEIOUAEIOUaeiou\";\n  \
    \  std::string vowels_lower2 = \"aeiouaeiouaeiou\";\n    std::string vowels_upper3\
    \ = \"AEIOUAEIOUaeiouaeiou\";\n    std::string vowels_lower3 = \"aeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_upper4 = \"AEIOUAEIOUaeiouaeiouaeiou\";\n    std::string\
    \ vowels_lower4 = \"aeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper5\
    \ = \"AEIOUAEIOUaeiouaeiouaeiouaeiou\";\n    std::string vowels_lower5 = \"aeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_upper6 = \"AEIOUAEIOUaeiouaeiouaeiouaeiouaeiou\";\n\
    \    std::string vowels_lower6 = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n  \
    \  std::string vowels_upper7 = \"AEIOUAEIOUaeiouaeiouaeiouaeiouaeiouaeiou\";\n\
    \    std::string vowels_lower7 = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_upper8 = \"AEIOUAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_lower8 = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_upper9 = \"AEIOUAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_lower9 = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_upper10 = \"AEIOUAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_lower10 = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_upper11 = \"AEIOUAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_lower11\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp__ro8bug.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.size();\n    int vowel_pos = -1;\n    int cons_pos = -1;\n\
    \    int vowel_len = vowels.size();\n    int cons_len = consonants.size();\n \
    \   int i = 0;\n    int j = 0;\n    std::string vowel_word = \"\";\n    std::string\
    \ cons_word = \"\";\n    while (i < n) {\n        if (word[i] == consonants[j])\
    \ {\n            cons_pos = j;\n            j++;\n        }\n        else if (word[i]\
    \ == vowels[j]) {\n            vowel_pos = j;\n            j++;\n        }\n \
    \       else if (word[i] == consonants[j] && word[i + 1] == vowels[j]) {\n   \
    \         cons_pos = j;\n            vowel_pos = j;\n            j++;\n      \
    \  }\n        else if (word[i] == vowels[j] && word[i + 1] == consonants[j]) {\n\
    \            vowel_pos = j;\n            cons_pos = j;\n            j++;\n   \
    \     }\n        else if (word[i] == consonants[j] && word[i + 1] == vowels[j])\
    \ {\n            cons_pos = j;\n            vowel_pos = j;\n            j++;\n\
    \        }\n        else if (word[i] == vowels[j] && word[i + 1] == consonants[j])\
    \ {\n            vowel_pos = j;\n            cons_pos = j;\n            j++;\n\
    \        }\n        else if (word[i] == consonants[j] && word[i + 1] == vowels[j])\
    \ {\n            cons_pos = j;\n            vowel_pos = j;\n            j++;\n\
    \        }\n        else if (word[i] == vowels[j] && word[i + 1] == consonants[j])\
    \ {\n            vowel_pos = j;\n            cons_pos = j;\n            j++;\n\
    \        }\n        else if (word[i] == consonants[j] && word[i + 1] == vowels[j])\
    \ {\n            cons_pos = j;\n            vowel_pos = j;\n            j++;\n\
    \        }\n        else if (word[i] == vowels[j] && word[i + 1] == consonants[j])\
    \ {\n            vowel_pos = j;\n            cons_pos = j;\n            j++;\n\
    \        }\n        else if (word[i] == consonants[j] && word[i + 1] == vowels[j])\
    \ {\n            cons_pos = j;\n            vowel_pos = j;\n            j++;\n\
    \        }\n        else if (word[i] == vowels[j] && word[i + 1] == consonants[j])\
    \ {\n            vowel_pos = j;\n            cons_pos = j;\n            j++;\n\
    \        }\n        else if (word[i] == consonants[j] && word[i + 1] == vowels[j])\
    \ {\n            cons_pos = j;\n            vowel_pos = j;\n            j++;\n\
    \        }\n        else if (word[i] == vowels[j] && word[i + 1] == consonants[j])\
    \ {\n            vowel_pos = j;\n            cons_pos = \n}\nint main() {\n  \
    \  auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmzggityl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp453g29t3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reversed = vowels.substr(0, vowels.size() - 1);\n  \
    \  std::string vowels_reversed_reversed = vowels_reversed.substr(0, vowels_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed = vowels_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed.size() - 1);\n    std::string vowels_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed =\
    \ vowels_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed.size() - 1);\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ \n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb1j9x00d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.length();\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_end = \"AEIOUaeiou\";\n   \
    \ std::string vowels_begin = \"aeiouAEIOU\";\n    std::string vowels_begin2 =\
    \ \"AEIOUaeiou\";\n    std::string vowels_begin3 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_begin4 = \"aeiouAEIOU\";\n    std::string vowels_begin5 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_begin6 = \"aeiouAEIOU\";\n    std::string vowels_begin7\
    \ = \"aeiouAEIOU\";\n    std::string vowels_begin8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_begin9 = \"aeiouAEIOU\";\n    std::string vowels_begin10 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_begin11 = \"aeiouAEIOU\";\n    std::string vowels_begin12\
    \ = \"aeiouAEIOU\";\n    std::string vowels_begin13 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_begin14 = \"aeiouAEIOU\";\n    std::string vowels_begin15 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_begin16 = \"aeiouAEIOU\";\n    std::string vowels_begin17\
    \ = \"aeiouAEIOU\";\n    std::string vowels_begin18 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_begin19 = \"aeiouAEIOU\";\n    std::string vowels_begin20 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_begin21 = \"aeiouAEIOU\";\n    std::string vowels_begin22\
    \ = \"aeiouAEIOU\";\n    std::string vowels_begin23 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_begin24 = \"aeiouAEIOU\";\n    std::string vowels_begin25 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_begin26 = \"aeiouAEIOU\";\n    std::string vowels_begin27\
    \ = \"aeiouAEIOU\";\n    std::string vowels_begin28 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_begin29 = \"aeiouAEIOU\";\n    std::string vowels_begin30 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_begin31 = \"aeiouAEIOU\";\n    std::string vowels_begin32\
    \ = \"aeiouAEIOU\";\n    std::string vowels_begin33 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_begin34 = \"aeiouAEIOU\";\n    std::string vowels_begin\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp548ftk54.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"aeiouAEIOU\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcjwt8ehh.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpcjwt8ehh.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n \
    \                from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcjwt8ehh.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected prima"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.size();\n    int m = vowels.size();\n    int vowel_index =\
    \ 0;\n    int consonant_index = 0;\n    int vowel_distance = 0;\n    int consonant_distance\
    \ = 0;\n    std::string vowel_found = \"\";\n    std::string consonant_found =\
    \ \"\";\n    std::string vowel_found2 = \"\";\n    std::string consonant_found2\
    \ = \"\";\n    for (int i = 0; i < n; i++) {\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_distance++;\n            vowel_index++;\n        }\n  \
    \      if (word[i] == vowels[vowel_index]) {\n            vowel_distance++;\n\
    \            vowel_index++;\n        }\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_distance++;\n            vowel_index++;\n        }\n  \
    \      if (word[i] == vowels[vowel_index]) {\n            vowel_distance++;\n\
    \            vowel_index++;\n        }\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_distance++;\n            vowel_index++;\n        }\n  \
    \      if (word[i] == vowels[vowel_index]) {\n            vowel_distance++;\n\
    \            vowel_index++;\n        }\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_distance++;\n            vowel_index++;\n        }\n  \
    \      if (word[i] == vowels[vowel_index]) {\n            vowel_distance++;\n\
    \            vowel_index++;\n        }\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_distance++;\n            vowel_index++;\n        }\n  \
    \      if (word[i] == vowels[vowel_index]) {\n            vowel_distance++;\n\
    \            vowel_index++;\n        }\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_distance++;\n            vowel_index++;\n        }\n  \
    \      if (word[i] == vowels[vowel_index]) {\n            vowel_distance++;\n\
    \            vowel_index++;\n        }\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_distance++;\n            vowel_index++;\n        }\n  \
    \      if (word[i] == vowels[vowel_index]) {\n            vowel_distance++;\n\
    \            vowel_index++;\n        }\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_distance++;\n            vowel_index++;\n        }\n  \
    \      if (word[i] == vowels[vowel_index]) {\n            vowel_distance++;\n\
    \            vowel_index++;\n        }\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_distance++;\n            vowel_index++;\n        }\n  \
    \      if (word[i] == vowels[vowel_index]) {\n            vowel_distance++;\n\
    \            vowel_index++;\n        }\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_distance++;\n            vowel_index++;\n        }\n  \
    \      if (word[i] == vowels[vowel_index]) {\n\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmy7bwdsk.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse2 = vowels_reverse.substr(0, vowels_reverse.size()\
    \ - 1);\n    std::string vowels_reverse3 = vowels_reverse2.substr(0, vowels_reverse2.size()\
    \ - 1);\n    std::string vowels_reverse4 = vowels_reverse3.substr(0, vowels_reverse3.size()\
    \ - 1);\n    std::string vowels_reverse5 = vowels_reverse4.substr(0, vowels_reverse4.size()\
    \ - 1);\n    std::string vowels_reverse6 = vowels_reverse5.substr(0, vowels_reverse5.size()\
    \ - 1);\n    std::string vowels_reverse7 = vowels_reverse6.substr(0, vowels_reverse6.size()\
    \ - 1);\n    std::string vowels_reverse8 = vowels_reverse7.substr(0, vowels_reverse7.size()\
    \ - 1);\n    std::string vowels_reverse9 = vowels_reverse8.substr(0, vowels_reverse8.size()\
    \ - 1);\n    std::string vowels_reverse10 = vowels_reverse9.substr(0, vowels_reverse9.size()\
    \ - 1);\n    std::string vowels_reverse11 = vowels_reverse10.substr(0, vowels_reverse10.size()\
    \ - 1);\n    std::string vowels_reverse12 = vowels_reverse11.substr(0, vowels_reverse11.size()\
    \ - 1);\n    std::string vowels_reverse13 = vowels_reverse12.substr(0, vowels_reverse12.size()\
    \ - 1);\n    std::string vowels_reverse14 = vowels_reverse13.substr(0, vowels_reverse13.size()\
    \ - 1);\n    std::string vowels_reverse15 = vowels_reverse14.substr(0, vowels_reverse14.size()\
    \ - 1);\n    std::string vowels_reverse16 = vowels_reverse15.substr(0, vowels_reverse15.size()\
    \ - 1);\n    std::string vowels_reverse17 = vowels_reverse16.substr(0, vowels_reverse16.size()\
    \ - 1);\n    std::string vowels_reverse18 = vowels_reverse17.substr(0, vowels_reverse17.size()\
    \ - 1);\n    std::string vowels_reverse19 = vowels_reverse18.substr(0, vowels_reverse18.size()\
    \ - 1);\n    std::string vowels_reverse20 = vowels_reverse19.substr(0, vowels_reverse19.size()\
    \ - 1);\n    std::string vowels_reverse21 = vowels_reverse20.substr(0, vowels_reverse20.size()\
    \ - 1);\n    std::string vowels_reverse22 = vowels_reverse21.substr(0, vowels_reverse21.size()\
    \ - 1);\n    std::string vowels_reverse23 = vowels_reverse22.substr(0, vowels_reverse22.size()\
    \ - 1);\n    std::string vowels_reverse24 = vowels_reverse23.substr(0, vowels_reverse23.size()\
    \ - 1);\n    std::string vowels_reverse25 = vowels_reverse24.substr(0, vowels_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzczp49fg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse_reverse = vowels_reverse.substr(0, vowels_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse = vowels_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse = vowels_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse.size() - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0, vowels_reverse_reverse_reverse_reverse_reverse_reverse.size()\
    \ - 1);\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n    std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse.substr(0,\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse.size() - 1);\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = vowels_reverse_reverse_reverse_reverse_re\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8szjgp0_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper = \"AEIOUAEIOU\";\n    std::string vowels_lower\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper_lower = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper_lower_lower = \"aeiouaeiouaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower = \"AEIOUaeiouAEIOUaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower_lower = \"aeiouaeiouaeiouaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower_lower_lower = \"AEIOUaeiouAEIOUaeiouaeiouaeiou\"\
    ;\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower = \"aeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower = \"\
    AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower = \"\
    aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa2s6os50.cpp:35:98: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\n              \
    \                                                                            \
    \        ^\n/tmp/tmpa2s6os50.cpp:35:5: error: missing terminating \" character\n\
    \     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\n     ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa2s6os50.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__f"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = vowels;\n    std::reverse(vowels_reverse.begin(),\
    \ vowels_reverse.end());\n    std::string vowels_reverse2 = vowels;\n    std::reverse(vowels_reverse2.begin(),\
    \ vowels_reverse2.end());\n    std::string vowels_reverse3 = vowels;\n    std::reverse(vowels_reverse3.begin(),\
    \ vowels_reverse3.end());\n    std::string vowels_reverse4 = vowels;\n    std::reverse(vowels_reverse4.begin(),\
    \ vowels_reverse4.end());\n    std::string vowels_reverse5 = vowels;\n    std::reverse(vowels_reverse5.begin(),\
    \ vowels_reverse5.end());\n    std::string vowels_reverse6 = vowels;\n    std::reverse(vowels_reverse6.begin(),\
    \ vowels_reverse6.end());\n    std::string vowels_reverse7 = vowels;\n    std::reverse(vowels_reverse7.begin(),\
    \ vowels_reverse7.end());\n    std::string vowels_reverse8 = vowels;\n    std::reverse(vowels_reverse8.begin(),\
    \ vowels_reverse8.end());\n    std::string vowels_reverse9 = vowels;\n    std::reverse(vowels_reverse9.begin(),\
    \ vowels_reverse9.end());\n    std::string vowels_reverse10 = vowels;\n    std::reverse(vowels_reverse10.begin(),\
    \ vowels_reverse10.end());\n    std::string vowels_reverse11 = vowels;\n    std::reverse(vowels_reverse11.begin(),\
    \ vowels_reverse11.end());\n    std::string vowels_reverse12 = vowels;\n    std::reverse(vowels_reverse12.begin(),\
    \ vowels_reverse12.end());\n    std::string vowels_reverse13 = vowels;\n    std::reverse(vowels_reverse13.begin(),\
    \ vowels_reverse13.end());\n    std::string vowels_reverse14 = vowels;\n    std::reverse(vowels_reverse14.begin(),\
    \ vowels_reverse14.end());\n    std::string vowels_reverse15 = vowels;\n    std::reverse(vowels_reverse15.begin(),\
    \ vowels_reverse15.end());\n    std::string vowels_reverse16 = vowels;\n    std::reverse(vowels_reverse16.begin(),\
    \ vowels_reverse16.end());\n    std::string vowels_reverse17 = vowels;\n    std::reverse(vowels_reverse17.begin(),\
    \ vowels_reverse17.end());\n    std::string vowels_reverse18 = vowels;\n    std::reverse(vowels_reverse18.begin(),\
    \ vowels_reverse18.end());\n    std::string vowels_reverse19 = vowels;\n    std::reverse(vowels_reverse19.begin(),\
    \ vowels_reverse19.end());\n    std::string vowels_reverse20 = vowels;\n    std::reverse(vowels_reverse20.begin(),\
    \ vowels_reverse20.end());\n    std::string vowels_reverse21 = vowels;\n    std::reverse(vowel\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr_wf3qf9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse = \"\";\n    std::string vowels_reverse_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse = \"\";\n    std::string\
    \ vowels_reverse_reverse_back_reverse_back = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_re\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpefrqqeb8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse_back_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfad7gu81.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpfad7gu81.cpp:39:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpfad7gu81.cpp: In function 'int main()':\n/tmp/tmpfad7gu81.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfad7gu81.cpp:2:\n/tmp/tmpfad7gu81.cpp:42:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int len = word.length();\n    int vowel_count = 0;\n    int consonant_count\
    \ = 0;\n    std::string vowel_found = \"\";\n    for (int i = 0; i < len; i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            vowel_count++;\n\
    \        }\n        if (word[i] == word[len - i - 1]) {\n            consonant_count++;\n\
    \        }\n    }\n    if (vowel_count > consonant_count) {\n        vowel_found\
    \ = vowels.substr(vowel_count - 1, 1);\n    }\n    return vowel_found;\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvqstwt3h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2kp7kw.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp9o2kp7kw.cpp:26:17: error: redeclaration of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:25:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously declared\
    \ here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:28:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:29:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:30:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string vowels_reverse3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string vowels_reverse8\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string vowels_reverse13\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string vowels_reverse18\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string vowels_reverse23\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string vowels_reverse28\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string vowels_reverse33\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprxsyahjv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_reverse_back_reverse = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse =\
    \ \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_re\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7a86kttq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed = vowels.substr(0,\
    \ vowels.size() - 1);\n    std::string vowels_reversed_upper = vowels_reversed.toUpper();\n\
    \    std::string vowels_reversed_lower = vowels_reversed.toLower();\n    std::string\
    \ vowels_reversed_upper_reversed = vowels_reversed_upper.substr(0, vowels_reversed_upper.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed = vowels_reversed_lower.substr(0,\
    \ vowels_reversed_lower.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed\
    \ = vowels_reversed_upper_reversed.substr(0, vowels_reversed_upper_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed = vowels_reversed_lower_reversed.substr(0,\
    \ vowels_reversed_lower_reversed.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed = vowels_reversed_lower_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed.size() -\
    \ 1);\n    std::string vowels_reverse\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwqzo6udr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2kp7kw.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp9o2kp7kw.cpp:26:17: error: redeclaration of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:25:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously declared\
    \ here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:28:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:29:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:30:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int len = word.length();\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int count = 0;\n    std::string vowel_found =\
    \ \"\";\n    for (int i = len - 1; i >= 0; i--) {\n        if (vowels.find(word[i])\
    \ != std::string::npos) {\n            count++;\n            if (count == 1) {\n\
    \                vowel_found = word[i];\n            }\n        }\n    }\n   \
    \ return vowel_found;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4m3kyiyq.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.size();\n    int vowel_counter = 0;\n    int consonant_counter\
    \ = 0;\n    std::string vowel_found = \"\";\n    std::string consonant_found =\
    \ \"\";\n    for (int i = 0; i < n; i++) {\n        if (word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n          \
    \  vowel_counter++;\n        }\n        if (word[i] == word[n-1]) {\n        \
    \    consonant_counter++;\n        }\n    }\n    if (vowel_counter == 0 && consonant_counter\
    \ == 0) {\n        return \"\";\n    }\n    for (int i = 0; i < n; i++) {\n  \
    \      if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o'\
    \ || word[i] == 'u') {\n            if (vowel_counter == consonant_counter) {\n\
    \                vowel_found = word[i];\n            }\n        }\n        if\
    \ (word[i] == word[n-1]) {\n            if (vowel_counter == consonant_counter)\
    \ {\n                consonant_found = word[i];\n            }\n        }\n  \
    \  }\n    if (vowel_counter == consonant_counter) {\n        return vowel_found;\n\
    \    }\n    return consonant_found;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpooj_28vd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse = vowels.substr(0,\
    \ vowels.size() - 1);\n    std::string vowels_reverse2 = vowels.substr(vowels.size()\
    \ - 1, vowels.size());\n    std::string vowels_reverse3 = vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse4 = vowels.substr(vowels.size() - 1, vowels.size());\n\
    \    std::string vowels_reverse5 = vowels.substr(0, vowels.size() - 1);\n    std::string\
    \ vowels_reverse6 = vowels.substr(vowels.size() - 1, vowels.size());\n    std::string\
    \ vowels_reverse7 = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse8\
    \ = vowels.substr(vowels.size() - 1, vowels.size());\n    std::string vowels_reverse9\
    \ = vowels.substr(0, vowels.size() - 1);\n    std::string vowels_reverse10 = vowels.substr(vowels.size()\
    \ - 1, vowels.size());\n    std::string vowels_reverse11 = vowels.substr(0, vowels.size()\
    \ - 1);\n    std::string vowels_reverse12 = vowels.substr(vowels.size() - 1, vowels.size());\n\
    \    std::string vowels_reverse13 = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse14 = vowels.substr(vowels.size() - 1, vowels.size());\n\
    \    std::string vowels_reverse15 = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse16 = vowels.substr(vowels.size() - 1, vowels.size());\n\
    \    std::string vowels_reverse17 = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse18 = vowels.substr(vowels.size() - 1, vowels.size());\n\
    \    std::string vowels_reverse19 = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse20 = vowels.substr(vowels.size() - 1, vowels.size());\n\
    \    std::string vowels_reverse21 = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse22 = vowels.substr(vowels.size() - 1, vowels.size());\n\
    \    std::string vowels_reverse23 = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse24 = vowels.substr(vowels.size() - 1, vowels.size());\n\
    \    std::string vowels_reverse25 = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse26 = vowels.substr(vowels.size() - 1, vowels.size());\n\
    \    std::string vowels_reverse27 = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse28 = vowels.substr(vowels.size() - 1, vowels.size());\n\
    \    std::string vowels_reverse29 = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse30 = vowels.substr(vowels.size() - 1, vowels.size\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg92gfbaz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_lower = \"AEIOUaeiou\";\n    std::string vowels_upper\
    \ = \"AEIOUaeiou\";\n    std::string vowels_upper2 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_upper3 = \"AEIOUaeiou\";\n    std::string vowels_upper4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper5 = \"AEIOUaeiou\";\n    std::string vowels_upper6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_upper7 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_upper8 = \"AEIOUaeiou\";\n    std::string vowels_upper9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper10 = \"AEIOUaeiou\";\n    std::string vowels_upper11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_upper12 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_upper13 = \"AEIOUaeiou\";\n    std::string vowels_upper14 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper15 = \"AEIOUaeiou\";\n    std::string vowels_upper16\
    \ = \"AEIOUaeiou\";\n    std::string vowels_upper17 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_upper18 = \"AEIOUaeiou\";\n    std::string vowels_upper19 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper20 = \"AEIOUaeiou\";\n    std::string vowels_upper21\
    \ = \"AEIOUaeiou\";\n    std::string vowels_upper22 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_upper23 = \"AEIOUaeiou\";\n    std::string vowels_upper24 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper25 = \"AEIOUaeiou\";\n    std::string vowels_upper26\
    \ = \"AEIOUaeiou\";\n    std::string vowels_upper27 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_upper28 = \"AEIOUaeiou\";\n    std::string vowels_upper29 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper30 = \"AEIOUaeiou\";\n    std::string vowels_upper31\
    \ = \"AEIOUaeiou\";\n    std::string vowels_upper32 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_upper33 = \"AEIOUaeiou\";\n    std::string vowels_upper34 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper35 = \"AEIOUae\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_qbl_fnx.cpp:54:34: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_upper35 = \"AEIOUae\n                 \
    \                 ^\n/tmp/tmp_qbl_fnx.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_upper35 = \"AEIOUae\n     ^\nIn file included\
    \ from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n \
    \                from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_qbl_fnx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2kp7kw.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp9o2kp7kw.cpp:26:17: error: redeclaration of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:25:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously declared\
    \ here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:28:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:29:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:30:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.length();\n    int vowel_count\
    \ = 0;\n    for (int i = n - 1; i >= 0; i--) {\n        if (word[i] == 'a' ||\
    \ word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u' || word[i]\
    \ == 'y') {\n            vowel_count++;\n        }\n    }\n    if (vowel_count\
    \ > 0) {\n        int vowel_pos = 0;\n        for (int i = n - 1; i >= 0; i--)\
    \ {\n            if (word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' || word[i] == 'y') {\n                vowel_pos = i;\n\
    \                break;\n            }\n        }\n        int vowel_right = vowel_pos\
    \ + 1;\n        int vowel_left = vowel_pos - 1;\n        int vowel_mid = vowel_pos\
    \ + 1;\n        int vowel_mid2 = vowel_pos + 1;\n        if (vowel_right < vowel_mid)\
    \ {\n            vowel_mid = vowel_right;\n        }\n        if (vowel_left >\
    \ vowel_mid) {\n            vowel_mid = vowel_left;\n        }\n        if (vowel_mid\
    \ < vowel_mid2) {\n            vowel_mid2 = vowel_mid;\n        }\n        if\
    \ (vowel_mid > vowel_mid2) {\n            vowel_mid2 = vowel_mid;\n        }\n\
    \        if (word[vowel_mid] == 'a' || word[vowel_mid] == 'e' || word[vowel_mid]\
    \ == 'i' || word[vowel_mid] == 'o' || word[vowel_mid] == 'u' || word[vowel_mid]\
    \ == 'y') {\n            return word[vowel_mid];\n        }\n        if (word[vowel_mid]\
    \ == 'A' || word[vowel_mid] == 'E' || word[vowel_mid] == 'I' || word[vowel_mid]\
    \ == 'O' || word[vowel_mid] == 'U' || word[vowel_mid] == 'Y') {\n            return\
    \ word[vowel_mid];\n        }\n        if (word[vowel_mid] == 'a' || word[vowel_mid]\
    \ == 'e' || word[vowel_mid] == 'i' || word[vowel_mid] == 'o' || word[vowel_mid]\
    \ == 'u' || word[vowel_mid] == 'y') {\n            return word[vowel_mid];\n \
    \       }\n        if (word[vowel_mid] == 'A' || word[vowel_mid] == 'E' || word[vowel_mid]\
    \ == 'I' || word[vowel_mid] == 'O' || word[vowel_mid] == 'U' || word[vowel_mid]\
    \ == 'Y') {\n            return word[vowel_mid];\n        }\n        if (word[vowel_mid]\
    \ == 'a' || word[vowel_mid] == 'e' || word\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpem_h5fwc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse3 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse4 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse5\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse6 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse7 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse8\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse9 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse10 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse11\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse12 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse13 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse14\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse15 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse18 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse19 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse20\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse21 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse22 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse23\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse24 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse25 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse26\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse27 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse28 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse29\
    \ = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse30 = \"aeiouAEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"aeiouAEIOUaeiou\";\n    std::string vowels_reverse32\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1_jngp2t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp453g29t3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper = \"AEIOUAEIOU\";\n    std::string vowels_lower\
    \ = \"\";\n    std::string vowels_upper2 = \"\";\n    std::string vowels_lower2\
    \ = \"\";\n    std::string vowels_upper3 = \"\";\n    std::string vowels_lower3\
    \ = \"\";\n    std::string vowels_upper4 = \"\";\n    std::string vowels_lower4\
    \ = \"\";\n    std::string vowels_upper5 = \"\";\n    std::string vowels_lower5\
    \ = \"\";\n    std::string vowels_upper6 = \"\";\n    std::string vowels_lower6\
    \ = \"\";\n    std::string vowels_upper7 = \"\";\n    std::string vowels_lower7\
    \ = \"\";\n    std::string vowels_upper8 = \"\";\n    std::string vowels_lower8\
    \ = \"\";\n    std::string vowels_upper9 = \"\";\n    std::string vowels_lower9\
    \ = \"\";\n    std::string vowels_upper10 = \"\";\n    std::string vowels_lower10\
    \ = \"\";\n    std::string vowels_upper11 = \"\";\n    std::string vowels_lower11\
    \ = \"\";\n    std::string vowels_upper12 = \"\";\n    std::string vowels_lower12\
    \ = \"\";\n    std::string vowels_upper13 = \"\";\n    std::string vowels_lower13\
    \ = \"\";\n    std::string vowels_upper14 = \"\";\n    std::string vowels_lower14\
    \ = \"\";\n    std::string vowels_upper15 = \"\";\n    std::string vowels_lower15\
    \ = \"\";\n    std::string vowels_upper16 = \"\";\n    std::string vowels_lower16\
    \ = \"\";\n    std::string vowels_upper17 = \"\";\n    std::string vowels_lower17\
    \ = \"\";\n    std::string vowels_upper18 = \"\";\n    std::string vowels_lower18\
    \ = \"\";\n    std::string vowels_upper19 = \"\";\n    std::string vowels_lower19\
    \ = \"\";\n    std::string vowels_upper20 = \"\";\n    std::string vowels_lower20\
    \ = \"\";\n    std::string vowels_upper21 = \"\";\n    std::string vowels_lower21\
    \ = \"\";\n    std::string vowels_upper22 = \"\";\n    std::string vowels_lower22\
    \ = \"\";\n    std::string vowels_upper23 = \"\";\n    std::string vowels_lower23\
    \ = \"\";\n    std::string vowels_upper24 = \"\";\n    std::string vowels_lower24\
    \ = \"\";\n    std::string vowels_upper25 = \"\";\n    std::string vowels_lower25\
    \ = \"\";\n    std::string vowels_upper26 = \"\";\n    std::string vowels_lower26\
    \ = \"\";\n    std::string vowels_upper27 = \"\";\n    std::string vowels_lower27\
    \ = \"\";\n    std::string vowels_upper28 = \"\";\n    std::string vowels_lower28\
    \ = \"\";\n    std::string vowels_upper29 = \"\";\n    std::string vowels_lower29\
    \ = \"\";\n    std::string vowels_upper30 = \"\";\n    std::string vowels_lower30\
    \ = \"\";\n    std::string vowels_upper31 = \"\";\n    std::string vowels_\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzht50arn.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_rev = \"AEIOUaeiou\";\n    for (size_t i = 0; i < vowels.size();\
    \ i++) {\n        vowels_rev[vowels.find(vowels[i])] = vowels[i];\n    }\n   \
    \ std::string vowels_rev_rev = \"AEIOUaeiou\";\n    for (size_t i = 0; i < vowels_rev.size();\
    \ i++) {\n        vowels_rev_rev[vowels_rev.find(vowels_rev[i])] = vowels_rev[i];\n\
    \    }\n    std::string vowels_rev_rev_rev = \"AEIOUaeiou\";\n    for (size_t\
    \ i = 0; i < vowels_rev_rev.size(); i++) {\n        vowels_rev_rev_rev[vowels_rev_rev.find(vowels_rev_rev[i])]\
    \ = vowels_rev_rev[i];\n    }\n    std::string vowels_rev_rev_rev_rev = \"AEIOUaeiou\"\
    ;\n    for (size_t i = 0; i < vowels_rev_rev_rev.size(); i++) {\n        vowels_rev_rev_rev_rev[vowels_rev_rev_rev.find(vowels_rev_rev_rev[i])]\
    \ = vowels_rev_rev_rev[i];\n    }\n    std::string vowels_rev_rev_rev_rev_rev\
    \ = \"AEIOUaeiou\";\n    for (size_t i = 0; i < vowels_rev_rev_rev_rev.size();\
    \ i++) {\n        vowels_rev_rev_rev_rev_rev[vowels_rev_rev_rev_rev.find(vowels_rev_rev_rev_rev[i])]\
    \ = vowels_rev_rev_rev_rev[i];\n    }\n    std::string vowels_rev_rev_rev_rev_rev_rev\
    \ = \"AEIOUaeiou\";\n    for (size_t i = 0; i < vowels_rev_rev_rev_rev_rev.size();\
    \ i++) {\n        vowels_rev_rev_rev_rev_rev_rev[vowels_rev_rev_rev_rev_rev.find(vowels_rev_rev_rev_rev_rev[i])]\
    \ = vowels_rev_rev_rev_rev_rev[i];\n    }\n    std::string vowels_rev_rev_rev_rev_rev_rev_rev\
    \ = \"AEIOUaeiou\";\n    for (size_t i = 0; i < vowels_rev_rev_rev_rev_rev_rev.size();\
    \ i++) {\n        vowels_rev_rev_rev_rev_rev_rev_rev[vowels_rev_rev_rev_rev_rev_rev_rev.find(vowels_rev_rev_rev_rev_rev_rev_rev[i])]\
    \ = vowels_rev_rev_rev_rev_rev_rev_rev[i];\n    }\n    std::string vowels_rev_rev_rev_rev_rev_rev_rev_rev\
    \ = \"AEIOUaeiou\";\n    for (size_t i = 0; i < vowels_rev_rev_rev\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmptq2_aycp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2kp7kw.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp9o2kp7kw.cpp:26:17: error: redeclaration of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:25:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously declared\
    \ here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:28:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:29:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:30:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reversed = vowels.substr(0, vowels.size() - 1);\n  \
    \  std::string vowels_reversed_upper = vowels_reversed.toupper();\n    std::string\
    \ vowels_reversed_lower = vowels_reversed.tolower();\n    std::string vowels_reversed_upper_lower\
    \ = vowels_reversed_upper.tolower() + vowels_reversed_lower.tolower();\n    std::string\
    \ vowels_reversed_upper_lower_lower = vowels_reversed_upper_lower + vowels_reversed_lower.toupper();\n\
    \    std::string vowels_reversed_upper_lower_lower_lower = vowels_reversed_upper_lower_lower\
    \ + vowels_reversed_lower.toupper();\n    std::string vowels_reversed_upper_lower_lower_lower_lower\
    \ = vowels_reversed_upper_lower_lower_lower + vowels_reversed_lower.toupper();\n\
    \    std::string vowels_reversed_upper_lower_lower_lower_lower_lower = vowels_reversed_upper_lower_lower_lower_lower\
    \ + vowels_reversed_lower.toupper();\n    std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed_upper_lower_lower_lower_lower_lower + vowels_reversed_lower.toupper();\n\
    \    std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed_upper_lower_lower_lower_lower_lower_lower + vowels_reversed_lower.toupper();\n\
    \    std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower + vowels_reversed_lower.toupper();\n\
    \    std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ + vowels_reversed_lower.toupper();\n    std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ + vowels_reversed_lower.toupper();\n    std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ + vowels_reversed_lower.toupper();\n    std::string vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = vowels_reversed_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ + vowels_reversed_lower.toupper();\n    std::string vowels_reversed_upper_lower_lower_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpt2exocm9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.size();\n    std::string res = \"\";\n    int i = 0;\n   \
    \ int j = 0;\n    while (i < n) {\n        if (word[i] == word[j]) {\n       \
    \     i += 1;\n            j += 1;\n        }\n        else if (word[i] == word[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (word[i]\
    \ == word[j]) {\n            i += 1;\n            j += 1;\n        }\n       \
    \ else if (word[i] == word[j]) {\n            i += 1;\n            j += 1;\n \
    \       }\n        else if (word[i] == word[j]) {\n            i += 1;\n     \
    \       j += 1;\n        }\n        else if (word[i] == word[j]) {\n         \
    \   i += 1;\n            j += 1;\n        }\n        else if (word[i] == word[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (word[i]\
    \ == word[j]) {\n            i += 1;\n            j += 1;\n        }\n       \
    \ else if (word[i] == word[j]) {\n            i += 1;\n            j += 1;\n \
    \       }\n        else if (word[i] == word[j]) {\n            i += 1;\n     \
    \       j += 1;\n        }\n        else if (word[i] == word[j]) {\n         \
    \   i += 1;\n            j += 1;\n        }\n        else if (word[i] == word[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (word[i]\
    \ == word[j]) {\n            i += 1;\n            j += 1;\n        }\n       \
    \ else if (word[i] == word[j]) {\n            i += 1;\n            j += 1;\n \
    \       }\n        else if (word[i] == word[j]) {\n            i += 1;\n     \
    \       j += 1;\n        }\n        else if (word[i] == word[j]) {\n         \
    \   i += 1;\n            j += 1;\n        }\n        else if (word[i] == word[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (word[i]\
    \ == word[j]) {\n            i += 1;\n            j += 1;\n        }\n       \
    \ else if (word[i] == word[j]) {\n            i += 1;\n            j += 1;\n \
    \       }\n        else if (word[i] == word[j]) {\n            i += 1;\n     \
    \       j += 1;\n        }\n        else if (word[i] == word[j]) {\n         \
    \   i += 1;\n            j += 1;\n        }\n        else if (word[i] == word[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (word[i]\
    \ == word[j]) {\n            i += 1;\n            j += 1;\n        }\n       \
    \ else if (word[i] == word[j]) {\n            i += 1;\n            j += 1;\n \
    \       }\n        else if (word[i] == word[j]) {\n            i += 1;\n     \
    \       j += 1;\n        }\n        else if (word[i] == word[j]) {\n         \
    \   i += 1;\n            j += 1;\n        }\n        else if (word[i] == word[j])\
    \ {\n            i += 1;\n            j += 1;\n        }\n        else if (word[i]\
    \ == word[j]) {\n            i += 1;\n            j += 1;\n        }\n       \
    \ else if (word[i] == \n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpf4xdhdbc.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code goes here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed = vowels.substr(0,\
    \ vowels.size() - 1);\n    std::string vowels_reversed_upper = vowels_reversed.toupper();\n\
    \    std::string vowels_reversed_lower = vowels_reversed.tolower();\n    std::string\
    \ vowels_reversed_upper_reversed = vowels_reversed_upper.substr(0, vowels_reversed_upper.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed = vowels_reversed_lower.substr(0,\
    \ vowels_reversed_lower.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed\
    \ = vowels_reversed_upper_reversed.substr(0, vowels_reversed_upper_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed = vowels_reversed_lower_reversed.substr(0,\
    \ vowels_reversed_lower_reversed.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed = vowels_reversed_lower_reversed_reversed.substr(0,\
    \ vowels_reversed_lower_reversed_reversed.size() - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed_reversed_reversed_reversed.size() -\
    \ 1);\n    std::string vowels_\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp38ystn6_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    std::string vowels_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end = \"AEIOUaeiou\";\n    std::string vowels_start_middle = \"\
    AEIOUaeiou\";\n    std::string vowels_end_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end_middle = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end_middle_end = \"AEIOUaeiou\";\n\
    \    std::string vowels_start_middle_end_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_middle_end_middle_end = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end_middle_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end_middle_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_middle_end_\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp35iqqeka.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2kp7kw.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp9o2kp7kw.cpp:26:17: error: redeclaration of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:25:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously declared\
    \ here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:28:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:29:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:30:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp453g29t3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse6 = \"aeiouAEIOU\";\n    std::string vowels_reverse7\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse9 = \"aeiouAEIOU\";\n    std::string vowels_reverse10 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse11 = \"aeiouAEIOU\";\n    std::string vowels_reverse12\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse13 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse14 = \"aeiouAEIOU\";\n    std::string vowels_reverse15 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse16 = \"aeiouAEIOU\";\n    std::string vowels_reverse17\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse18 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse19 = \"aeiouAEIOU\";\n    std::string vowels_reverse20 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse21 = \"aeiouAEIOU\";\n    std::string vowels_reverse22\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse23 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse24 = \"aeiouAEIOU\";\n    std::string vowels_reverse25 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse26 = \"aeiouAEIOU\";\n    std::string vowels_reverse27\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse28 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse29 = \"aeiouAEIOU\";\n    std::string vowels_reverse30 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse31 = \"aeiouAEIOU\";\n    std::string vowels_reverse32\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse33 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse34 = \"aeiouAEIOU\";\n    std::string vowels_reverse35 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse36 = \"aeiouAE\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppj1rvrdj.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"aeiouAE\n               \
    \                     ^\n/tmp/tmppj1rvrdj.cpp:54:5: error: missing terminating\
    \ \" character\n     std::string vowels_reverse36 = \"aeiouAE\n     ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppj1rvrdj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected p"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    std::string vowels_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start2 = \"AEIOUaeiou\";\n    std::string vowels_end2 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle2 = \"AEIOUaeiou\";\n    std::string vowels_start3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle3 = \"AEIOUaeiou\";\n    std::string vowels_start4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end4 = \"AEIOUaeiou\";\n    std::string vowels_middle4\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start5 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end5 = \"AEIOUaeiou\";\n    std::string vowels_middle5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start6 = \"AEIOUaeiou\";\n    std::string vowels_end6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle6 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start7 = \"AEIOUaeiou\";\n    std::string vowels_end7 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle7 = \"AEIOUaeiou\";\n    std::string vowels_start8\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle8 = \"AEIOUaeiou\";\n    std::string vowels_start9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end9 = \"AEIOUaeiou\";\n    std::string vowels_middle9\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start10 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end10 = \"AEIOUaeiou\";\n    std::string vowels_middle10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start11 = \"AEIOUaeiou\";\n    std::string vowels_end11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle11 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start12 = \"AEIOUaeiou\";\n    std::string vowels_end12 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle12 = \"AEIOUaeiou\";\n\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprrnawc4x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse6 = \"aeiouAEIOU\";\n    std::string vowels_reverse7\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse9 = \"aeiouAEIOU\";\n    std::string vowels_reverse10 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse11 = \"aeiouAEIOU\";\n    std::string vowels_reverse12\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse13 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse14 = \"aeiouAEIOU\";\n    std::string vowels_reverse15 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse16 = \"aeiouAEIOU\";\n    std::string vowels_reverse17\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse18 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse19 = \"aeiouAEIOU\";\n    std::string vowels_reverse20 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse21 = \"aeiouAEIOU\";\n    std::string vowels_reverse22\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse23 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse24 = \"aeiouAEIOU\";\n    std::string vowels_reverse25 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse26 = \"aeiouAEIOU\";\n    std::string vowels_reverse27\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse28 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse29 = \"aeiouAEIOU\";\n    std::string vowels_reverse30 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse31 = \"aeiouAEIOU\";\n    std::string vowels_reverse32\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse33 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse34 = \"aeiouAEIOU\";\n    std::string vowels_reverse35 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse36 = \"aeiouAE\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1bre3i3n.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"aeiouAE\n               \
    \                     ^\n/tmp/tmp1bre3i3n.cpp:54:5: error: missing terminating\
    \ \" character\n     std::string vowels_reverse36 = \"aeiouAE\n     ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1bre3i3n.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected p"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string vowels_reverse3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string vowels_reverse8\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string vowels_reverse13\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string vowels_reverse18\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string vowels_reverse23\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string vowels_reverse28\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string vowels_reverse33\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_reverse\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi6b9aj3o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code goes here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_lower = \"aeiouaeiou\";\n \
    \   std::string vowels_upper = \"AEIOUAEIOU\";\n    std::string vowels_upper2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_lower2 = \"aeiouaeiou\";\n    std::string\
    \ vowels_upper3 = \"AEIOUAEIOU\";\n    std::string vowels_lower3 = \"aeiouaeiou\"\
    ;\n    std::string vowels_upper4 = \"AEIOUAEIOU\";\n    std::string vowels_lower4\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper5 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower5 = \"aeiouaeiou\";\n    std::string vowels_upper6 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower6 = \"aeiouaeiou\";\n    std::string vowels_upper7\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower7 = \"aeiouaeiou\";\n    std::string\
    \ vowels_upper8 = \"AEIOUAEIOU\";\n    std::string vowels_lower8 = \"aeiouaeiou\"\
    ;\n    std::string vowels_upper9 = \"AEIOUAEIOU\";\n    std::string vowels_lower9\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper10 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower10 = \"aeiouaeiou\";\n    std::string vowels_upper11 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower11 = \"aeiouaeiou\";\n    std::string vowels_upper12\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower12 = \"aeiouaeiou\";\n    std::string\
    \ vowels_upper13 = \"AEIOUAEIOU\";\n    std::string vowels_lower13 = \"aeiouaeiou\"\
    ;\n    std::string vowels_upper14 = \"AEIOUAEIOU\";\n    std::string vowels_lower14\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper15 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower15 = \"aeiouaeiou\";\n    std::string vowels_upper16 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower16 = \"aeiouaeiou\";\n    std::string vowels_upper17\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower17 = \"aeiouaeiou\";\n    std::string\
    \ vowels_upper18 = \"AEIOUAEIOU\";\n    std::string vowels_lower18 = \"\n}\nint\
    \ main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwas1dz3a.cpp:55:34: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_lower18 = \"\n                        \
    \          ^\n/tmp/tmpwas1dz3a.cpp:55:5: error: missing terminating \" character\n\
    \     std::string vowels_lower18 = \"\n     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwas1dz3a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression be"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_rev = \"AEIOUaeiou\";\n    std::string vowels_rev2 =\
    \ \"\";\n    std::string vowels_rev3 = \"\";\n    std::string vowels_rev4 = \"\
    \";\n    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6 = \"\";\n\
    \    std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 = \"\";\n  \
    \  std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\";\n   \
    \ std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\";\n   \
    \ std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n   \
    \ std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n   \
    \ std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n   \
    \ std::string vowels_rev19 = \"\";\n    std::string vowels_rev20 = \"\";\n   \
    \ std::string vowels_rev21 = \"\";\n    std::string vowels_rev22 = \"\";\n   \
    \ std::string vowels_rev23 = \"\";\n    std::string vowels_rev24 = \"\";\n   \
    \ std::string vowels_rev25 = \"\";\n    std::string vowels_rev26 = \"\";\n   \
    \ std::string vowels_rev27 = \"\";\n    std::string vowels_rev28 = \"\";\n   \
    \ std::string vowels_rev29 = \"\";\n    std::string vowels_rev30 = \"\";\n   \
    \ std::string vowels_rev31 = \"\";\n    std::string vowels_rev32 = \"\";\n   \
    \ std::string vowels_rev33 = \"\";\n    std::string vowels_rev34 = \"\";\n   \
    \ std::string vowels_rev35 = \"\";\n    std::string vowels_rev36 = \"\";\n   \
    \ std::string vowels_rev37 = \"\";\n    std::string vowels_rev38 = \"\";\n   \
    \ std::string vowels_rev39 = \"\";\n    std::string vowels_rev40 = \"\";\n   \
    \ std::string vowels_rev41 = \"\";\n    std::string vowels_rev42 = \"\";\n   \
    \ std::string vowels_rev43 = \"\";\n    std::string vowels_rev44 = \"\";\n   \
    \ std::string vowels_rev45 = \"\";\n    std::string vowels_rev46 = \"\";\n   \
    \ std::string vowels_rev47 = \"\";\n    std::string vowels_rev48 = \"\";\n   \
    \ std::string vowels_rev49 = \"\";\n    std::string vowels_rev50 = \"\";\n   \
    \ std::string vowels_rev51 = \"\";\n    std::string vowels_rev52 = \"\";\n   \
    \ std::string vowels_rev53 = \"\";\n    std::string vowels_rev54 = \"\";\n   \
    \ std::string vowels_rev55 = \"\";\n    std::string vowels_rev56 = \"\";\n   \
    \ std::string vowels_rev57 = \"\";\n    std::string vowels_rev58 = \"\";\n   \
    \ std::string vowels_rev59 = \"\";\n    std::string vowels_rev60 = \"\";\n   \
    \ std::string vowels_rev6\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbfz2_xl_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reversed = vowels.substr(0, vowels.size() - 1) + vowels.substr(1,\
    \ vowels.size() - 1);\n    std::string vowels_reversed_upper = vowels_reversed.toupper();\n\
    \    std::string vowels_reversed_lower = vowels_reversed.tolower();\n    std::string\
    \ vowels_reversed_upper_reversed = vowels_reversed_upper.substr(0, vowels_reversed_upper.size()\
    \ - 1) + vowels_reversed_upper.substr(1, vowels_reversed_upper.size() - 1);\n\
    \    std::string vowels_reversed_lower_reversed = vowels_reversed_lower.substr(0,\
    \ vowels_reversed_lower.size() - 1) + vowels_reversed_lower.substr(1, vowels_reversed_lower.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed = vowels_reversed_upper_reversed.substr(0,\
    \ vowels_reversed_upper_reversed.size() - 1) + vowels_reversed_upper_reversed.substr(1,\
    \ vowels_reversed_upper_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed\
    \ = vowels_reversed_lower_reversed.substr(0, vowels_reversed_lower_reversed.size()\
    \ - 1) + vowels_reversed_lower_reversed.substr(1, vowels_reversed_lower_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed = vowels_reversed_upper_reversed_reversed.substr(0,\
    \ vowels_reversed_upper_reversed_reversed.size() - 1) + vowels_reversed_upper_reversed_reversed.substr(1,\
    \ vowels_reversed_upper_reversed_reversed.size() - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed.size()\
    \ - 1) + vowels_reversed_lower_reversed_reversed.substr(1, vowels_reversed_lower_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_upper_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_upper_reversed_reversed_reversed.substr(0, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_upper_reversed_reversed_reversed.substr(1, vowels_reversed_upper_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_lower_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_lower_reversed_reversed_reversed.substr(0, vowels_reversed_lower_reversed_reversed_reversed.size()\
    \ - 1) + vowels_reversed_lower_reversed_reversed_reversed.substr(\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpfogadl1_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp453g29t3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int len = word.length();\n    int\
    \ vowel_count = 0;\n    int consonant_count = 0;\n    for(int i = len-1; i >=\
    \ 0; i--) {\n        if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' ||\
    \ word[i] == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' || word[i]\
    \ == 'I' || word[i] == 'O' || word[i] == 'U') {\n            vowel_count++;\n\
    \        }\n        else {\n            consonant_count++;\n        }\n    }\n\
    \    if(vowel_count > consonant_count) {\n        return \"\";\n    }\n    else\
    \ if(vowel_count == consonant_count) {\n        return word;\n    }\n    else\
    \ {\n        int vowel_start = -1;\n        int vowel_end = -1;\n        int consonant_start\
    \ = -1;\n        int consonant_end = -1;\n        for(int i = len-1; i >= 0; i--)\
    \ {\n            if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i]\
    \ == 'o' || word[i] == 'u' || word[i] == 'A' || word[i] == 'E' || word[i] == 'I'\
    \ || word[i] == 'O' || word[i] == 'U') {\n                vowel_start = i;\n \
    \           }\n            else {\n                consonant_start = i;\n    \
    \        }\n        }\n        for(int i = len-1; i >= 0; i--) {\n           \
    \ if(word[i] == 'a' || word[i] == 'e' || word[i] == 'i' || word[i] == 'o' || word[i]\
    \ == 'u' || word[i] == 'A' || word[i] == 'E' || word[i] == 'I' || word[i] == 'O'\
    \ || word[i] == 'U') {\n                vowel_end = i;\n            }\n      \
    \      else {\n                consonant_end = i;\n            }\n        }\n\
    \        if(vowel_start == -1 || vowel_end == -1) {\n            return \"\";\n\
    \        }\n        else if(vowel_start > consonant_start) {\n            return\
    \ word.substr(0, vowel_start);\n        }\n        else {\n            return\
    \ word.substr(0, consonant_end);\n        }\n    }\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5n9wau3h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2kp7kw.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp9o2kp7kw.cpp:26:17: error: redeclaration of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:25:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously declared\
    \ here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:28:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:29:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:30:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    std::string vowels_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start2 = \"AEIOUaeiou\";\n    std::string vowels_end2 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle2 = \"AEIOUaeiou\";\n    std::string vowels_start3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle3 = \"AEIOUaeiou\";\n    std::string vowels_start4 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end4 = \"AEIOUaeiou\";\n    std::string vowels_middle4\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start5 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end5 = \"AEIOUaeiou\";\n    std::string vowels_middle5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start6 = \"AEIOUaeiou\";\n    std::string vowels_end6\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle6 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start7 = \"AEIOUaeiou\";\n    std::string vowels_end7 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle7 = \"AEIOUaeiou\";\n    std::string vowels_start8\
    \ = \"AEIOUaeiou\";\n    std::string vowels_end8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle8 = \"AEIOUaeiou\";\n    std::string vowels_start9 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end9 = \"AEIOUaeiou\";\n    std::string vowels_middle9\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start10 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_end10 = \"AEIOUaeiou\";\n    std::string vowels_middle10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start11 = \"AEIOUaeiou\";\n    std::string vowels_end11\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle11 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start12 = \"AEIOUaeiou\";\n    std::string vowels_end12 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_middle12 = \"AEIOUaeiou\";\n\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmprrnawc4x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int len = word.size();\n    int start = 0;\n    int end = len - 1;\n  \
    \  while (start < end) {\n        int mid = (start + end) / 2;\n        if (word[mid]\
    \ >= 'A' && word[mid] <= 'Z') {\n            start = mid + 1;\n        } else\
    \ if (word[mid] >= 'a' && word[mid] <= 'z') {\n            end = mid - 1;\n  \
    \      } else {\n            start = mid + 1;\n            end = mid - 1;\n  \
    \      }\n    }\n    int mid = start + (end - start) / 2;\n    if (word[mid] >=\
    \ 'A' && word[mid] <= 'Z') {\n        return word[mid];\n    } else if (word[mid]\
    \ >= 'a' && word[mid] <= 'z') {\n        return word[mid];\n    } else {\n   \
    \     return \"\";\n    }\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7d5ord4o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reversed = vowels + vowels.substr(1, vowels.size());\n\
    \    std::string vowels_reversed_upper = vowels_reversed + vowels_reversed.substr(1,\
    \ vowels_reversed.size());\n    std::string vowels_reversed_lower = vowels_reversed\
    \ + vowels_reversed.substr(0, vowels_reversed.size());\n    std::string vowels_reversed_lower_upper\
    \ = vowels_reversed_lower + vowels_reversed_lower.substr(1, vowels_reversed_lower.size());\n\
    \    std::string vowels_reversed_lower_upper_lower = vowels_reversed_lower_upper\
    \ + vowels_reversed_lower_upper.substr(1, vowels_reversed_lower_upper.size());\n\
    \    std::string vowels_reversed_lower_upper_lower_upper = vowels_reversed_lower_upper_lower\
    \ + vowels_reversed_lower_upper_lower.substr(1, vowels_reversed_lower_upper_lower.size());\n\
    \    std::string vowels_reversed_lower_upper_lower_upper_lower = vowels_reversed_lower_upper_lower_upper\
    \ + vowels_reversed_lower_upper_lower_upper.substr(1, vowels_reversed_lower_upper_lower_upper.size());\n\
    \    std::string vowels_reversed_lower_upper_lower_upper_lower_upper = vowels_reversed_lower_upper_lower_upper_lower_upper\
    \ + vowels_reversed_lower_upper_lower_upper_lower_upper.substr(1, vowels_reversed_lower_upper_lower_upper_lower_upper.size());\n\
    \    std::string vowels_reversed_lower_upper_lower_upper_lower_upper_lower = vowels_reversed_lower_upper_lower_upper_lower_upper_lower\
    \ + vowels_reversed_lower_upper_lower_upper_lower_upper_lower.substr(1, vowels_reversed_lower_upper_lower_upper_lower_upper_lower.size());\n\
    \    std::string vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper\
    \ = vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper + vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper.substr(1,\
    \ vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper.size());\n \
    \   std::string vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper_lower\
    \ = vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\
    \ + vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper_lower.substr(1,\
    \ vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper_lower.size());\n\
    \    std::string vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\
    \ = vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper_lower_upper\
    \ + vowels_reversed_lower_upper_lower_upper_lower_upper_lower_upper_lower.substr(1,\
    \ vowels_reversed_lower_upper_lower_upper_\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpl5wl8rr0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = vowels.substr(0, vowels.size() - 1);\n   \
    \ std::string vowels_reverse2 = vowels_reverse.substr(0, vowels_reverse.size()\
    \ - 1);\n    std::string vowels_reverse3 = vowels_reverse2.substr(0, vowels_reverse2.size()\
    \ - 1);\n    std::string vowels_reverse4 = vowels_reverse3.substr(0, vowels_reverse3.size()\
    \ - 1);\n    std::string vowels_reverse5 = vowels_reverse4.substr(0, vowels_reverse4.size()\
    \ - 1);\n    std::string vowels_reverse6 = vowels_reverse5.substr(0, vowels_reverse5.size()\
    \ - 1);\n    std::string vowels_reverse7 = vowels_reverse6.substr(0, vowels_reverse6.size()\
    \ - 1);\n    std::string vowels_reverse8 = vowels_reverse7.substr(0, vowels_reverse7.size()\
    \ - 1);\n    std::string vowels_reverse9 = vowels_reverse8.substr(0, vowels_reverse8.size()\
    \ - 1);\n    std::string vowels_reverse10 = vowels_reverse9.substr(0, vowels_reverse9.size()\
    \ - 1);\n    std::string vowels_reverse11 = vowels_reverse10.substr(0, vowels_reverse10.size()\
    \ - 1);\n    std::string vowels_reverse12 = vowels_reverse11.substr(0, vowels_reverse11.size()\
    \ - 1);\n    std::string vowels_reverse13 = vowels_reverse12.substr(0, vowels_reverse12.size()\
    \ - 1);\n    std::string vowels_reverse14 = vowels_reverse13.substr(0, vowels_reverse13.size()\
    \ - 1);\n    std::string vowels_reverse15 = vowels_reverse14.substr(0, vowels_reverse14.size()\
    \ - 1);\n    std::string vowels_reverse16 = vowels_reverse15.substr(0, vowels_reverse15.size()\
    \ - 1);\n    std::string vowels_reverse17 = vowels_reverse16.substr(0, vowels_reverse16.size()\
    \ - 1);\n    std::string vowels_reverse18 = vowels_reverse17.substr(0, vowels_reverse17.size()\
    \ - 1);\n    std::string vowels_reverse19 = vowels_reverse18.substr(0, vowels_reverse18.size()\
    \ - 1);\n    std::string vowels_reverse20 = vowels_reverse19.substr(0, vowels_reverse19.size()\
    \ - 1);\n    std::string vowels_reverse21 = vowels_reverse20.substr(0, vowels_reverse20.size()\
    \ - 1);\n    std::string vowels_reverse22 = vowels_reverse21.substr(0, vowels_reverse21.size()\
    \ - 1);\n    std::string vowels_reverse23 = vowels_reverse22.substr(0, vowels_reverse22.size()\
    \ - 1);\n    std::string vowels_reverse24 = vowels_reverse23.substr(0, vowels_reverse23.size()\
    \ - 1);\n    std::string vowels_reverse25 = vowels_reverse24.substr(0, vowels_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzczp49fg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2kp7kw.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp9o2kp7kw.cpp:26:17: error: redeclaration of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:25:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously declared\
    \ here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:28:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:29:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:30:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.size();\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string vowels_reverse3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string vowels_reverse8\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string vowels_reverse13\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string vowels_reverse18\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string vowels_reverse23\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string vowels_reverse28\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string vowels_reverse33\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsaw4g6lt.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_rev = \"AEIOUaeiou\";\n   \
    \ std::string vowels_rev2 = \"\";\n    std::string vowels_rev3 = \"\";\n    std::string\
    \ vowels_rev4 = \"\";\n    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6\
    \ = \"\";\n    std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 =\
    \ \"\";\n    std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\
    \";\n    std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\"\
    ;\n    std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n\
    \    std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n\
    \    std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n\
    \    std::string vowels_rev19 = \"\";\n    std::string vowels_rev20 = \"\";\n\
    \    std::string vowels_rev21 = \"\";\n    std::string vowels_rev22 = \"\";\n\
    \    std::string vowels_rev23 = \"\";\n    std::string vowels_rev24 = \"\";\n\
    \    std::string vowels_rev25 = \"\";\n    std::string vowels_rev26 = \"\";\n\
    \    std::string vowels_rev27 = \"\";\n    std::string vowels_rev28 = \"\";\n\
    \    std::string vowels_rev29 = \"\";\n    std::string vowels_rev30 = \"\";\n\
    \    std::string vowels_rev31 = \"\";\n    std::string vowels_rev32 = \"\";\n\
    \    std::string vowels_rev33 = \"\";\n    std::string vowels_rev34 = \"\";\n\
    \    std::string vowels_rev35 = \"\";\n    std::string vowels_rev36 = \"\";\n\
    \    std::string vowels_rev37 = \"\";\n    std::string vowels_rev38 = \"\";\n\
    \    std::string vowels_rev39 = \"\";\n    std::string vowels_rev40 = \"\";\n\
    \    std::string vowels_rev41 = \"\";\n    std::string vowels_rev42 = \"\";\n\
    \    std::string vowels_rev43 = \"\";\n    std::string vowels_rev44 = \"\";\n\
    \    std::string vowels_rev45 = \"\";\n    std::string vowels_rev46 = \"\";\n\
    \    std::string vowels_rev47 = \"\";\n    std::string vowels_rev48 = \"\";\n\
    \    std::string vowels_rev49 = \"\";\n    std::string vowels_rev50 = \"\";\n\
    \    std::string vowels_rev51 = \"\";\n    std::string vowels_rev52 = \"\";\n\
    \    std::string vowels_rev53 = \"\";\n    std::string vowels_rev54 = \"\";\n\
    \    std::string vowels_rev55 = \"\";\n    std::string vowels_rev56 = \"\";\n\
    \    std::string vowels_rev57 = \"\";\n    std::string vowels_rev58 = \"\";\n\
    \    std::string vowels_rev59 = \"\";\n    std::string vowels_rev60 = \"\";\n\
    \    \n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpp4na0kta.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse6 = \"aeiouAEIOU\";\n    std::string vowels_reverse7\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse9 = \"aeiouAEIOU\";\n    std::string vowels_reverse10 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse11 = \"aeiouAEIOU\";\n    std::string vowels_reverse12\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse13 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse14 = \"aeiouAEIOU\";\n    std::string vowels_reverse15 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse16 = \"aeiouAEIOU\";\n    std::string vowels_reverse17\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse18 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse19 = \"aeiouAEIOU\";\n    std::string vowels_reverse20 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse21 = \"aeiouAEIOU\";\n    std::string vowels_reverse22\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse23 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse24 = \"aeiouAEIOU\";\n    std::string vowels_reverse25 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse26 = \"aeiouAEIOU\";\n    std::string vowels_reverse27\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse28 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse29 = \"aeiouAEIOU\";\n    std::string vowels_reverse30 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse31 = \"aeiouAEIOU\";\n    std::string vowels_reverse32\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse33 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse34 = \"aeiouAEIOU\";\n    std::string vowels_reverse35 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse36 = \"aeiouAE\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8sboheka.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"aeiouAE\n               \
    \                     ^\n/tmp/tmp8sboheka.cpp:54:5: error: missing terminating\
    \ \" character\n     std::string vowels_reverse36 = \"aeiouAE\n     ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp8sboheka.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected p"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper = \"AEIOUAEIOU\";\n    std::string vowels_lower\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper2 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower2 = \"aeiouaeiou\";\n    std::string vowels_upper3 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower3 = \"aeiouaeiou\";\n    std::string vowels_upper4\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower4 = \"aeiouaeiou\";\n    std::string\
    \ vowels_upper5 = \"AEIOUAEIOU\";\n    std::string vowels_lower5 = \"aeiouaeiou\"\
    ;\n    std::string vowels_upper6 = \"AEIOUAEIOU\";\n    std::string vowels_lower6\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper7 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower7 = \"aeiouaeiou\";\n    std::string vowels_upper8 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower8 = \"aeiouaeiou\";\n    std::string vowels_upper9\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower9 = \"aeiouaeiou\";\n    std::string\
    \ vowels_upper10 = \"AEIOUAEIOU\";\n    std::string vowels_lower10 = \"aeiouaeiou\"\
    ;\n    std::string vowels_upper11 = \"AEIOUAEIOU\";\n    std::string vowels_lower11\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper12 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower12 = \"aeiouaeiou\";\n    std::string vowels_upper13 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower13 = \"aeiouaeiou\";\n    std::string vowels_upper14\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower14 = \"aeiouaeiou\";\n    std::string\
    \ vowels_upper15 = \"AEIOUAEIOU\";\n    std::string vowels_lower15 = \"aeiouaeiou\"\
    ;\n    std::string vowels_upper16 = \"AEIOUAEIOU\";\n    std::string vowels_lower16\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper17 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower17 = \"aeiouaeiou\";\n    std::string vowels_upper18 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower18 = \"aeiouaeiou\";\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2bk5ib2b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse3 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse4 = \"aeiouAEIOU\";\n    std::string vowels_reverse5 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse6 = \"aeiouAEIOU\";\n    std::string vowels_reverse7\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse8 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse9 = \"aeiouAEIOU\";\n    std::string vowels_reverse10 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse11 = \"aeiouAEIOU\";\n    std::string vowels_reverse12\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse13 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse14 = \"aeiouAEIOU\";\n    std::string vowels_reverse15 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse16 = \"aeiouAEIOU\";\n    std::string vowels_reverse17\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse18 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse19 = \"aeiouAEIOU\";\n    std::string vowels_reverse20 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse21 = \"aeiouAEIOU\";\n    std::string vowels_reverse22\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse23 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse24 = \"aeiouAEIOU\";\n    std::string vowels_reverse25 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse26 = \"aeiouAEIOU\";\n    std::string vowels_reverse27\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse28 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse29 = \"aeiouAEIOU\";\n    std::string vowels_reverse30 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse31 = \"aeiouAEIOU\";\n    std::string vowels_reverse32\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse33 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse34 = \"aeiouAEIOU\";\n    std::string vowels_reverse35 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse36 = \"aeiouAE\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppj1rvrdj.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"aeiouAE\n               \
    \                     ^\n/tmp/tmppj1rvrdj.cpp:54:5: error: missing terminating\
    \ \" character\n     std::string vowels_reverse36 = \"aeiouAE\n     ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppj1rvrdj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected p"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2kp7kw.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp9o2kp7kw.cpp:26:17: error: redeclaration of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:25:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously declared\
    \ here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:28:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:29:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:30:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_lower = \"aeiou\";\n    std::string vowels_upper = \"\
    AEIOUAEIOU\";\n    std::string vowels_upper2 = \"AEIOU\";\n    std::string vowels_lower2\
    \ = \"aeiou\";\n    std::string vowels_upper3 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower3 = \"aeiou\";\n    std::string vowels_upper4 = \"AEIOUAEIOU\";\n\
    \    std::string vowels_lower4 = \"aeiou\";\n    std::string vowels_upper5 = \"\
    AEIOUAEIOU\";\n    std::string vowels_lower5 = \"AEIOU\";\n    std::string vowels_upper6\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower6 = \"AEIOU\";\n    std::string\
    \ vowels_upper7 = \"AEIOUAEIOU\";\n    std::string vowels_lower7 = \"AEIOU\";\n\
    \    std::string vowels_upper8 = \"AEIOUAEIOU\";\n    std::string vowels_lower8\
    \ = \"AEIOU\";\n    std::string vowels_upper9 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower9 = \"AEIOU\";\n    std::string vowels_upper10 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower10 = \"AEIOU\";\n    std::string vowels_upper11\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower11 = \"AEIOU\";\n    std::string\
    \ vowels_upper12 = \"AEIOUAEIOU\";\n    std::string vowels_lower12 = \"AEIOU\"\
    ;\n    std::string vowels_upper13 = \"AEIOUAEIOU\";\n    std::string vowels_lower13\
    \ = \"AEIOU\";\n    std::string vowels_upper14 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower14 = \"AEIOU\";\n    std::string vowels_upper15 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower15 = \"AEIOU\";\n    std::string vowels_upper16\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower16 = \"AEIOU\";\n    std::string\
    \ vowels_upper17 = \"AEIOUAEIOU\";\n    std::string vowels_lower17 = \"AEIOU\"\
    ;\n    std::string vowels_upper18 = \"AEIOUAEIOU\";\n    std::string vowels_lower18\
    \ = \"AEIOU\";\n    std::string vowels_upper19 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower19 = \"AEIO\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpao6m5xez.cpp:56:34: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_lower19 = \"AEIO\n                    \
    \              ^\n/tmp/tmpao6m5xez.cpp:56:5: error: missing terminating \" character\n\
    \     std::string vowels_lower19 = \"AEIO\n     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpao6m5xez.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expre"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.size();\n    int m = vowels.size();\n    int vowel_index =\
    \ 0;\n    int vowel_pos = 0;\n    int consonant_pos = 0;\n    int consonant_index\
    \ = 0;\n    int consonant_count = 0;\n    int vowel_count = 0;\n    int vowel_count_index\
    \ = 0;\n    std::string vowel_met_condition = \"\";\n    std::string consonant_met_condition\
    \ = \"\";\n    for (int i = 0; i < n; i++) {\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_met_condition = word[i];\n            vowel_pos++;\n  \
    \          vowel_count++;\n            vowel_count_index++;\n        }\n    }\n\
    \    for (int i = 0; i < m; i++) {\n        if (word[i] == vowels[vowel_count_index])\
    \ {\n            vowel_met_condition = word[i];\n            vowel_pos++;\n  \
    \          vowel_count++;\n            vowel_count_index++;\n        }\n    }\n\
    \    for (int i = n - 1; i >= 0; i--) {\n        if (word[i] == vowels[vowel_index])\
    \ {\n            vowel_met_condition = word[i];\n            vowel_pos++;\n  \
    \          vowel_count++;\n            vowel_count_index++;\n        }\n    }\n\
    \    for (int i = m - 1; i >= 0; i--) {\n        if (word[i] == vowels[vowel_count_index])\
    \ {\n            vowel_met_condition = word[i];\n            vowel_pos++;\n  \
    \          vowel_count++;\n            vowel_count_index++;\n        }\n    }\n\
    \    for (int i = n - 1; i >= 0; i--) {\n        if (word[i] == vowels[vowel_count_index])\
    \ {\n            vowel_met_condition = word[i];\n            vowel_pos++;\n  \
    \          vowel_count++;\n            vowel_count_index++;\n        }\n    }\n\
    \    for (int i = m - 1; i >= 0; i--) {\n        if (word[i] == vowels[vowel_count_index])\
    \ {\n            vowel_met_condition = word[i];\n            vowel_pos++;\n  \
    \          vowel_count++;\n            vowel_count_index++;\n        }\n    }\n\
    \    for (int i = n - 1; i >= 0; i--) {\n        if (word[i] == vowels[vowel_count_index])\
    \ {\n            vowel_met_condition = word[i];\n            vowel_pos++;\n  \
    \          vowel_count++;\n            vowel_count_index++;\n        }\n    }\n\
    \    for (int i = m - 1; i >= 0; i--) {\n        if (word[i] == vowels[vowel_count_index])\
    \ {\n            vowel_met_condition = word[i];\n            vowel_pos++;\n  \
    \          vowel_count++;\n            vowel_count_index++;\n        }\n    }\n\
    \    for (int i = n - 1; i >= 0; i--) {\n        if (word[i] == vowels[vowel_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7prt76i8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end = \"AEIOUaeiou\";\n    std::string vowels_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_start_end = \"AEIOUaeiou\";\n    std::string vowels_middle_end = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start_end_middle = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle_start_end = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_middle = \"AEIOUaeiou\"\
    ;\n    std::string vowels_start_end_middle_start_end = \"AEIOUaeiou\";\n    std::string\
    \ vowels_middle_start_end_middle_end = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_middle_start_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_end_middle_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_middle_start_end_middle_end_middle\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_end_middle_start_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_middle_start_end_middle_start_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_end_middle_start_end_middle_start_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_end\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_start_end_middle_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5c2rwn8p.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    int n = word.size();\n    int m = vowels.size();\n\
    \    int count = 0;\n    std::string ans = \"\";\n    for (int i = n - 1; i >=\
    \ 0; i--) {\n        if (word[i] == vowels[count]) {\n            count++;\n \
    \           if (count == m) {\n                ans = word[i];\n            }\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7qh5d_6s.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int len = word.length();\n    int vowels_len = vowels.length();\n    int\
    \ vowels_count = 0;\n    int consonants_count = len - 1;\n    int consonants_count_left\
    \ = len - 1;\n    int consonants_count_right = len - 1;\n    int consonants_count_left_right\
    \ = len - 1;\n    int consonants_count_left_right_left = len - 1;\n    int consonants_count_left_right_left_right\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left = len - 1;\n\
    \    int consonants_count_left_right_left_right_left_right = len - 1;\n    int\
    \ consonants_count_left_right_left_right_left_right_left = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right_left_right\
    \ = len - 1;\n    int consonants_count_left_right_left_right_left_right_\n}\n\
    int main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj1mz1eyp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse = vowels;\n    vowels_reverse.resize(vowels_reverse.size()\
    \ - 1);\n    std::string vowels_reverse2 = vowels;\n    vowels_reverse2.resize(vowels_reverse2.size()\
    \ - 1);\n    std::string vowels_reverse3 = vowels;\n    vowels_reverse3.resize(vowels_reverse3.size()\
    \ - 1);\n    std::string vowels_reverse4 = vowels;\n    vowels_reverse4.resize(vowels_reverse4.size()\
    \ - 1);\n    std::string vowels_reverse5 = vowels;\n    vowels_reverse5.resize(vowels_reverse5.size()\
    \ - 1);\n    std::string vowels_reverse6 = vowels;\n    vowels_reverse6.resize(vowels_reverse6.size()\
    \ - 1);\n    std::string vowels_reverse7 = vowels;\n    vowels_reverse7.resize(vowels_reverse7.size()\
    \ - 1);\n    std::string vowels_reverse8 = vowels;\n    vowels_reverse8.resize(vowels_reverse8.size()\
    \ - 1);\n    std::string vowels_reverse9 = vowels;\n    vowels_reverse9.resize(vowels_reverse9.size()\
    \ - 1);\n    std::string vowels_reverse10 = vowels;\n    vowels_reverse10.resize(vowels_reverse10.size()\
    \ - 1);\n    std::string vowels_reverse11 = vowels;\n    vowels_reverse11.resize(vowels_reverse11.size()\
    \ - 1);\n    std::string vowels_reverse12 = vowels;\n    vowels_reverse12.resize(vowels_reverse12.size()\
    \ - 1);\n    std::string vowels_reverse13 = vowels;\n    vowels_reverse13.resize(vowels_reverse13.size()\
    \ - 1);\n    std::string vowels_reverse14 = vowels;\n    vowels_reverse14.resize(vowels_reverse14.size()\
    \ - 1);\n    std::string vowels_reverse15 = vowels;\n    vowels_reverse15.resize(vowels_reverse15.size()\
    \ - 1);\n    std::string vowels_reverse16 = vowels;\n    vowels_reverse16.resize(vowels_reverse16.size()\
    \ - 1);\n    std::string vowels_reverse17 = vowels;\n    vowels_reverse17.resize(vowels_reverse17.size()\
    \ - 1);\n    std::string vowels_reverse18 = vowels;\n    vowels_reverse18.resize(vowels_reverse18.size()\
    \ - 1);\n    std::string vowels_reverse19 = vowels;\n    vowels_reverse19.resize(vowels_reverse19.size()\
    \ - 1);\n    std::string vowels_reverse20 = vowels;\n    vowels_reverse20.resize(vowels_reverse20.size()\
    \ - 1);\n    std::string vowels_reverse21 = vowels;\n    vowel\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvi65bvg2.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp453g29t3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.size();\n    int vowel_count\
    \ = 0;\n    std::string vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < n; i++)\
    \ {\n        if (vowels.find(word[i]) != std::string::npos) {\n            vowel_count++;\n\
    \        }\n    }\n    if (vowel_count <= 1) {\n        return \"\";\n    }\n\
    \    int vowel_start = n - vowel_count;\n    int vowel_end = n - 1;\n    for (int\
    \ i = vowel_start; i < vowel_end; i++) {\n        if (word[i] == 'a' || word[i]\
    \ == 'e' || word[i] == 'i' || word[i] == 'o' || word[i] == 'u') {\n          \
    \  return word[i];\n        }\n    }\n    return \"\";\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3i47_tb4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.length();\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string vowels_reverse3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string vowels_reverse8\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string vowels_reverse13\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string vowels_reverse18\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string vowels_reverse23\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string vowels_reverse28\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string vowels_reverse33\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi9as3jq1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_reverse_back_reverse_back_reverse = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp453g29t3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse_back_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfad7gu81.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpfad7gu81.cpp:39:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpfad7gu81.cpp: In function 'int main()':\n/tmp/tmpfad7gu81.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfad7gu81.cpp:2:\n/tmp/tmpfad7gu81.cpp:42:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"\";\n    std::string vowels_reverse_back = \"\";\n    std::string vowels_back\
    \ = \"\";\n    std::string vowels_back_reverse = \"\";\n    std::string vowels_back_back\
    \ = \"\";\n    std::string vowels_back_back_reverse = \"\";\n    std::string vowels_back_back_reverse_back\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse = \"\";\n   \
    \ std::string vowels_back_back_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_back_back_reverse_back_reverse_back_reverse = \"\";\n    std::string\
    \ vowels_back_back_reverse_back_reverse_back_reverse_back = \"\";\n    std::string\
    \ vowels_back_back_reverse_back_reverse_back_reverse_back_reverse = \"\";\n  \
    \  std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"\";\n    std::string vowels_back_back_reverse_back_reverse_back_reverse_\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgith5kw_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_rev = \"AEIOUaeiou\";\n    for (size_t i = 0; i < word.length();\
    \ i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n         \
    \   vowels_rev = word[i];\n            break;\n        }\n    }\n    std::string\
    \ vowels_rev_rev = \"AEIOUaeiou\";\n    for (size_t i = word.length() - 1; i >=\
    \ 0; i--) {\n        if (vowels_rev.find(word[i]) != std::string::npos) {\n  \
    \          vowels_rev_rev = word[i];\n            break;\n        }\n    }\n \
    \   std::string vowels_rev_rev_rev = \"AEIOUaeiou\";\n    for (size_t i = word.length()\
    \ - 2; i >= 0; i--) {\n        if (vowels_rev_rev.find(word[i]) != std::string::npos)\
    \ {\n            vowels_rev_rev_rev = word[i];\n            break;\n        }\n\
    \    }\n    std::string vowels_rev_rev_rev_rev = \"AEIOUaeiou\";\n    for (size_t\
    \ i = word.length() - 3; i >= 0; i--) {\n        if (vowels_rev_rev_rev.find(word[i])\
    \ != std::string::npos) {\n            vowels_rev_rev_rev_rev = word[i];\n   \
    \         break;\n        }\n    }\n    std::string vowels_rev_rev_rev_rev_rev\
    \ = \"AEIOUaeiou\";\n    for (size_t i = word.length() - 4; i >= 0; i--) {\n \
    \       if (vowels_rev_rev_rev_rev.find(word[i]) != std::string::npos) {\n   \
    \         vowels_rev_rev_rev_rev_rev = word[i];\n            break;\n        }\n\
    \    }\n    std::string vowels_rev_rev_rev_rev_rev_rev = \"AEIOUaeiou\";\n   \
    \ for (size_t i = word.length() - 5; i >= 0; i--) {\n        if (vowels_rev_rev_rev_rev_rev_rev.find(word[i])\
    \ != std::string::npos) {\n            vowels_rev_rev_rev_rev_rev_rev = word[i];\n\
    \            break;\n        }\n    }\n    std::string vowels_rev_rev_rev_rev_rev_rev_rev\
    \ = \"AEIOUaeiou\";\n    for (size_t i = word.length() - 6; i >= 0; i--) {\n \
    \       if (vowels_rev_rev_rev_rev_rev_rev_rev.find(word[i]) != std::string::npos)\
    \ {\n            vowels_rev_rev_rev_rev_rev_rev_rev = word[i];\n            break;\n\
    \        }\n    }\n    std::string vowels_rev_rev_rev_rev_rev_rev_rev_rev = \"\
    AEIOUaeiou\";\n    for (size_t i = word.length() - 7; i >= \n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg9yac72h.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse2 = \"aeiouAEIOU\";\n    std::string vowels_reverse3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse5 = \"aeiouAEIOU\";\n    std::string vowels_reverse6 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse7 = \"aeiouAEIOU\";\n    std::string vowels_reverse8\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse9 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string vowels_reverse13\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse14 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse15 = \"aeiouAEIOU\";\n    std::string vowels_reverse16 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse17 = \"aeiouAEIOU\";\n    std::string vowels_reverse18\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse19 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse22 = \"aeiouAEIOU\";\n    std::string vowels_reverse23\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse24 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse25 = \"aeiouAEIOU\";\n    std::string vowels_reverse26 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse27 = \"aeiouAEIOU\";\n    std::string vowels_reverse28\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse29 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31 = \"aeiouAEIOU\"\
    ;\n    std::string vowels_reverse32 = \"aeiouAEIOU\";\n    std::string vowels_reverse33\
    \ = \"aeiouAEIOU\";\n    std::string vowels_reverse34 = \"aeiouAEIOU\";\n    std::string\
    \ vowels_reverse35 = \"aeiouAEIOU\";\n    std::string vowels_reverse\n}\nint main()\
    \ {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpx5ktaqz8.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_rev = \"AEIOUaeiou\";\n    std::string vowels_rev2 =\
    \ \"\";\n    std::string vowels_rev3 = \"\";\n    std::string vowels_rev4 = \"\
    \";\n    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6 = \"\";\n\
    \    std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 = \"\";\n  \
    \  std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\";\n   \
    \ std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\";\n   \
    \ std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n   \
    \ std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n   \
    \ std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n   \
    \ std::string vowels_rev19 = \"\";\n    std::string vowels_rev20 = \"\";\n   \
    \ std::string vowels_rev21 = \"\";\n    std::string vowels_rev22 = \"\";\n   \
    \ std::string vowels_rev23 = \"\";\n    std::string vowels_rev24 = \"\";\n   \
    \ std::string vowels_rev25 = \"\";\n    std::string vowels_rev26 = \"\";\n   \
    \ std::string vowels_rev27 = \"\";\n    std::string vowels_rev28 = \"\";\n   \
    \ std::string vowels_rev29 = \"\";\n    std::string vowels_rev30 = \"\";\n   \
    \ std::string vowels_rev31 = \"\";\n    std::string vowels_rev32 = \"\";\n   \
    \ std::string vowels_rev33 = \"\";\n    std::string vowels_rev34 = \"\";\n   \
    \ std::string vowels_rev35 = \"\";\n    std::string vowels_rev36 = \"\";\n   \
    \ std::string vowels_rev37 = \"\";\n    std::string vowels_rev38 = \"\";\n   \
    \ std::string vowels_rev39 = \"\";\n    std::string vowels_rev40 = \"\";\n   \
    \ std::string vowels_rev41 = \"\";\n    std::string vowels_rev42 = \"\";\n   \
    \ std::string vowels_rev43 = \"\";\n    std::string vowels_rev44 = \"\";\n   \
    \ std::string vowels_rev45 = \"\";\n    std::string vowels_rev46 = \"\";\n   \
    \ std::string vowels_rev47 = \"\";\n    std::string vowels_rev48 = \"\";\n   \
    \ std::string vowels_rev49 = \"\";\n    std::string vowels_rev50 = \"\";\n   \
    \ std::string vowels_rev51 = \"\";\n    std::string vowels_rev52 = \"\";\n   \
    \ std::string vowels_rev53 = \"\";\n    std::string vowels_rev54 = \"\";\n   \
    \ std::string vowels_rev55 = \"\";\n    std::string vowels_rev56 = \"\";\n   \
    \ std::string vowels_rev57 = \"\";\n    std::string vowels_rev58 = \"\";\n   \
    \ std::string vowels_rev59 = \"\";\n    std::string vowels_rev60 = \"\";\n   \
    \ std::string vowels_rev6\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbfz2_xl_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse = \"\";\n    std::string vowels_reverse_reverse_vowels\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse = \"\";\n   \
    \ std::string vowels_reverse_reverse_vowels_reverse_vowels = \"\";\n    std::string\
    \ vowels_reverse_reverse_vowels_reverse_vowels_reverse = \"\";\n    std::string\
    \ vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels = \"\";\n    std::string\
    \ vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse = \"\";\n\
    \    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse_vowels_reverse\
    \ = \"\";\n    std::string vowels_reverse_reverse_vowels_reverse_vowels_reverse_vowel\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpccj7ygl1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_rev = \"AEIOUaeiou\";\n    std::string vowels_rev2 =\
    \ \"\";\n    std::string vowels_rev3 = \"\";\n    std::string vowels_rev4 = \"\
    \";\n    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6 = \"\";\n\
    \    std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 = \"\";\n  \
    \  std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\";\n   \
    \ std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\";\n   \
    \ std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n   \
    \ std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n   \
    \ std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n   \
    \ std::string vowels_rev19 = \"\";\n    std::string vowels_rev20 = \"\";\n   \
    \ std::string vowels_rev21 = \"\";\n    std::string vowels_rev22 = \"\";\n   \
    \ std::string vowels_rev23 = \"\";\n    std::string vowels_rev24 = \"\";\n   \
    \ std::string vowels_rev25 = \"\";\n    std::string vowels_rev26 = \"\";\n   \
    \ std::string vowels_rev27 = \"\";\n    std::string vowels_rev28 = \"\";\n   \
    \ std::string vowels_rev29 = \"\";\n    std::string vowels_rev30 = \"\";\n   \
    \ std::string vowels_rev31 = \"\";\n    std::string vowels_rev32 = \"\";\n   \
    \ std::string vowels_rev33 = \"\";\n    std::string vowels_rev34 = \"\";\n   \
    \ std::string vowels_rev35 = \"\";\n    std::string vowels_rev36 = \"\";\n   \
    \ std::string vowels_rev37 = \"\";\n    std::string vowels_rev38 = \"\";\n   \
    \ std::string vowels_rev39 = \"\";\n    std::string vowels_rev40 = \"\";\n   \
    \ std::string vowels_rev41 = \"\";\n    std::string vowels_rev42 = \"\";\n   \
    \ std::string vowels_rev43 = \"\";\n    std::string vowels_rev44 = \"\";\n   \
    \ std::string vowels_rev45 = \"\";\n    std::string vowels_rev46 = \"\";\n   \
    \ std::string vowels_rev47 = \"\";\n    std::string vowels_rev48 = \"\";\n   \
    \ std::string vowels_rev49 = \"\";\n    std::string vowels_rev50 = \"\";\n   \
    \ std::string vowels_rev51 = \"\";\n    std::string vowels_rev52 = \"\";\n   \
    \ std::string vowels_rev53 = \"\";\n    std::string vowels_rev54 = \"\";\n   \
    \ std::string vowels_rev55 = \"\";\n    std::string vowels_rev56 = \"\";\n   \
    \ std::string vowels_rev57 = \"\";\n    std::string vowels_rev58 = \"\";\n   \
    \ std::string vowels_rev59 = \"\";\n    std::string vowels_rev60 = \"\";\n   \
    \ std::string vowels_rev6\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbfz2_xl_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reversed = vowels.substr(0, vowels.size() - 1);\n  \
    \  std::string vowels_reversed_reversed = vowels_reversed.substr(0, vowels_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed = vowels_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed.size() - 1);\n    std::string vowels_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed =\
    \ vowels_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed.size() - 1);\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ \n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb1j9x00d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_end = \"AEIOUaeiouy\";\n    std::string vowels_start\
    \ = \"AEIOUaeiou\";\n    std::string vowels_start_end = \"AEIOUaeiouy\";\n   \
    \ std::string vowels_start_end_start = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start = \"AEIOUaeiouy\"\
    ;\n    std::string vowels_start_end_start_end_start_end = \"AEIOUaeiouy\";\n \
    \   std::string vowels_start_end_start_end_start_end_start = \"AEIOUaeiouy\";\n\
    \    std::string vowels_start_end_start_end_start_end_start_end = \"AEIOUaeiouy\"\
    ;\n    std::string vowels_start_end_start_end_start_end_start_end_start = \"AEIOUaeiouy\"\
    ;\n    std::string vowels_start_end_start_end_start_end_start_end_start_end =\
    \ \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start_end\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start\
    \ = \"AEIOUaeiouy\";\n    std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start\
    \ = \"AEIOUaeiou\n}\nint main() {\n    auto candidate = get_closest_vowel;\n \
    \   assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpktpucu49.cpp:40:112: warning: missing terminating \" character\
    \ [enabled by default]\n     std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start\
    \ = \"AEIOUaeiou\n                                                           \
    \                                                     ^\n/tmp/tmpktpucu49.cpp:40:5:\
    \ error: missing terminating \" character\n     std::string vowels_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start_end_start\
    \ = \"AEIOUaeiou\n     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpktpucu49.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"aeiouAEIOU\";\n    std::string vowels_upper = \"AEIOUaeiou\";\n \
    \   std::string vowels_lower = vowels_upper.substr(0, 1);\n    std::string vowels_upper2\
    \ = vowels_upper.substr(1, 1);\n    std::string vowels_lower2 = vowels_lower.substr(0,\
    \ 1);\n    std::string vowels_lower3 = vowels_lower.substr(1, 1);\n    std::string\
    \ vowels_upper3 = vowels_upper.substr(2, 1);\n    std::string vowels_lower4 =\
    \ vowels_lower.substr(2, 1);\n    std::string vowels_upper4 = vowels_upper.substr(3,\
    \ 1);\n    std::string vowels_lower5 = vowels_lower.substr(3, 1);\n    std::string\
    \ vowels_upper5 = vowels_upper.substr(4, 1);\n    std::string vowels_lower6 =\
    \ vowels_lower.substr(4, 1);\n    std::string vowels_upper6 = vowels_upper.substr(5,\
    \ 1);\n    std::string vowels_lower7 = vowels_lower.substr(5, 1);\n    std::string\
    \ vowels_upper7 = vowels_upper.substr(6, 1);\n    std::string vowels_lower8 =\
    \ vowels_lower.substr(6, 1);\n    std::string vowels_upper8 = vowels_upper.substr(7,\
    \ 1);\n    std::string vowels_lower9 = vowels_lower.substr(7, 1);\n    std::string\
    \ vowels_upper9 = vowels_upper.substr(8, 1);\n    std::string vowels_lower10 =\
    \ vowels_lower.substr(8, 1);\n    std::string vowels_upper10 = vowels_upper.substr(9,\
    \ 1);\n    std::string vowels_lower11 = vowels_lower.substr(9, 1);\n    std::string\
    \ vowels_upper11 = vowels_upper.substr(10, 1);\n    std::string vowels_lower12\
    \ = vowels_lower.substr(10, 1);\n    std::string vowels_upper12 = vowels_upper.substr(11,\
    \ 1);\n    std::string vowels_lower13 = vowels_lower.substr(11, 1);\n    std::string\
    \ vowels_upper13 = vowels_upper.substr(12, 1);\n    std::string vowels_lower14\
    \ = vowels_lower.substr(12, 1);\n    std::string vowels_upper14 = vowels_upper.substr(13,\
    \ 1);\n    std::string vowels_lower15 = vowels_lower.substr(13, 1);\n    std::string\
    \ vowels_upper15 = vowels_upper.substr(14, 1);\n    std::string vowels_lower16\
    \ = vowels_lower.substr(14, 1);\n    std::string vowels_upper16 = vowels_upper.substr(15,\
    \ 1);\n    std::string vowels_lower17 = vowels_lower.substr(15, 1);\n    std::string\
    \ vowels_upper17 = vowels_upper.substr(16, 1);\n    std::string vowels_lower18\
    \ = vowels_lower.\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm6r9h69k.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse_back_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfad7gu81.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpfad7gu81.cpp:39:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpfad7gu81.cpp: In function 'int main()':\n/tmp/tmpfad7gu81.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfad7gu81.cpp:2:\n/tmp/tmpfad7gu81.cpp:42:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Write your code here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reversed = vowels.substr(0,\
    \ vowels.size() - 1);\n    std::string vowels_reversed_upper = vowels_reversed.toUpper();\n\
    \    std::string vowels_reversed_lower = vowels_reversed.toLower();\n    std::string\
    \ vowels_upper = vowels.toUpper();\n    std::string vowels_lower = vowels.toLower();\n\
    \    std::string vowels_upper_reversed = vowels_upper.substr(0, vowels_upper.size()\
    \ - 1);\n    std::string vowels_lower_reversed = vowels_lower.substr(0, vowels_lower.size()\
    \ - 1);\n    std::string vowels_upper_reversed_lower = vowels_upper_reversed.toLower();\n\
    \    std::string vowels_lower_reversed_upper = vowels_lower_reversed.toUpper();\n\
    \    std::string vowels_upper_reversed_lower = vowels_upper_reversed.toLower();\n\
    \    std::string vowels_lower_reversed_upper = vowels_lower_reversed.toUpper();\n\
    \    std::string vowels_upper_reversed_lower = vowels_upper_reversed.toLower();\n\
    \    std::string vowels_lower_reversed_upper = vowels_lower_reversed.toUpper();\n\
    \    std::string vowels_upper_reversed_lower = vowels_upper_reversed.toLower();\n\
    \    std::string vowels_lower_reversed_upper = vowels_lower_reversed.toUpper();\n\
    \    std::string vowels_upper_reversed_lower = vowels_upper_reversed.toLower();\n\
    \    std::string vowels_lower_reversed_upper = vowels_lower_reversed.toUpper();\n\
    \    std::string vowels_upper_reversed_lower = vowels_upper_reversed.toLower();\n\
    \    std::string vowels_lower_reversed_upper = vowels_lower_reversed.toUpper();\n\
    \    std::string vowels_upper_reversed_lower = vowels_upper_reversed.toLower();\n\
    \    std::string vowels_lower_reversed_upper = vowels_lower_reversed.toUpper();\n\
    \    std::string vowels_upper_reversed_lower = vowels_upper_reversed.toLower();\n\
    \    std::string vowels_lower_reversed_upper = vowels_lower_reversed.toUpper();\n\
    \    std::string vowels_upper_reversed_lower = vowels_upper_reversed.toLower();\n\
    \    std::string vowels_lower_reversed_upper = vowels_lower_reversed.toUpper();\n\
    \    std::string vowels_upper_reversed_lower = vowels_upper_reversed.toLower();\n\
    \    std::string vowels_lower_reversed_upper = vowels_lower_reversed.toUpper();\n\
    \    std::string vowel\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplbygee2g.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse_back_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfad7gu81.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpfad7gu81.cpp:39:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpfad7gu81.cpp: In function 'int main()':\n/tmp/tmpfad7gu81.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfad7gu81.cpp:2:\n/tmp/tmpfad7gu81.cpp:42:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.size();\n    int vowel_counter = 0;\n    for (int i = 0; i\
    \ < n; i++) {\n        if (vowels.find(word[i]) != std::string::npos) {\n    \
    \        vowel_counter++;\n        }\n    }\n    if (vowel_counter > 1) {\n  \
    \      return \"\";\n    }\n    int vowel_counter2 = 0;\n    for (int i = n -\
    \ 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos) {\n\
    \            vowel_counter2++;\n        }\n    }\n    if (vowel_counter2 > 1)\
    \ {\n        return \"\";\n    }\n    int vowel_counter3 = 0;\n    for (int i\
    \ = n - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_counter3++;\n        }\n    }\n    if (vowel_counter3 >\
    \ 1) {\n        return \"\";\n    }\n    int vowel_counter4 = 0;\n    for (int\
    \ i = n - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_counter4++;\n        }\n    }\n    if (vowel_counter4 >\
    \ 1) {\n        return \"\";\n    }\n    int vowel_counter5 = 0;\n    for (int\
    \ i = n - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_counter5++;\n        }\n    }\n    if (vowel_counter5 >\
    \ 1) {\n        return \"\";\n    }\n    int vowel_counter6 = 0;\n    for (int\
    \ i = n - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_counter6++;\n        }\n    }\n    if (vowel_counter6 >\
    \ 1) {\n        return \"\";\n    }\n    int vowel_counter7 = 0;\n    for (int\
    \ i = n - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_counter7++;\n        }\n    }\n    if (vowel_counter7 >\
    \ 1) {\n        return \"\";\n    }\n    int vowel_counter8 = 0;\n    for (int\
    \ i = n - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_counter8++;\n        }\n    }\n    if (vowel_counter8 >\
    \ 1) {\n        return \"\";\n    }\n    int vowel_counter9 = 0;\n    for (int\
    \ i = n - 1; i >= 0; i--) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_counter9++;\n        }\n    }\n    if (vowel_counter9 >\
    \ 1) {\n        return \"\";\n    }\n    int vowel_counter10 = 0;\n    for (int\
    \ i = n - 1; i >= 0; i--) {\n        if (vowels.find(\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnxke5gz9.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reversed = vowels.substr(0, vowels.size() - 1);\n  \
    \  std::string vowels_reversed_reversed = vowels_reversed.substr(0, vowels_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed = vowels_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed.size() - 1);\n    std::string vowels_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed =\
    \ vowels_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed.substr(0, vowels_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed.size() - 1);\n\
    \    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.size()\
    \ - 1);\n    std::string vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = vowels_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed.substr(0,\
    \ \n}\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpb1j9x00d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798685
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    int n = word.size();\n    std::string vowel_found = \"\";\n    for (int\
    \ i = 0; i < n; i++) {\n        if (vowels.find(word[i]) != std::string::npos)\
    \ {\n            vowel_found = word[i];\n            break;\n        }\n    }\n\
    \    return vowel_found;\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ycc06q3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper = \"AEIOUAEIOU\";\n    std::string vowels_lower\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper_lower = \"AEIOUaeiouAEIOU\"\
    ;\n    std::string vowels_upper_lower_lower = \"aeiouaeiouaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower = \"AEIOUaeiouAEIOUaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower_lower = \"aeiouaeiouaeiouaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower_lower_lower = \"AEIOUaeiouAEIOUaeiouaeiouaeiou\"\
    ;\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower = \"aeiouaeiouaeiouaeiouaeiouaeiou\"\
    ;\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower = \"\
    AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower = \"\
    aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"aeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\";\n    std::string\
    \ vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa2s6os50.cpp:35:98: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\n              \
    \                                                                            \
    \        ^\n/tmp/tmpa2s6os50.cpp:35:5: error: missing terminating \" character\n\
    \     std::string vowels_upper_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower_lower\
    \ = \"AEIOUaeiouAEIOUaeiouaeiouaeiouaeiouaeiouaeiouaeiouaeiou\n     ^\nIn file\
    \ included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa2s6os50.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__f"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    // Your code goes here\n    std::string\
    \ vowels = \"AEIOUaeiou\";\n    std::string vowels_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse2 = \"AEIOUaeiou\";\n    std::string vowels_reverse3\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse4 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse5 = \"AEIOUaeiou\";\n    std::string vowels_reverse6 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse7 = \"AEIOUaeiou\";\n    std::string vowels_reverse8\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse9 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse10 = \"AEIOUaeiou\";\n    std::string vowels_reverse11 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse12 = \"AEIOUaeiou\";\n    std::string vowels_reverse13\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse14 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse15 = \"AEIOUaeiou\";\n    std::string vowels_reverse16 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse17 = \"AEIOUaeiou\";\n    std::string vowels_reverse18\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse19 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse20 = \"AEIOUaeiou\";\n    std::string vowels_reverse21 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse22 = \"AEIOUaeiou\";\n    std::string vowels_reverse23\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse24 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse25 = \"AEIOUaeiou\";\n    std::string vowels_reverse26 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse27 = \"AEIOUaeiou\";\n    std::string vowels_reverse28\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse29 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse30 = \"AEIOUaeiou\";\n    std::string vowels_reverse31 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse32 = \"AEIOUaeiou\";\n    std::string vowels_reverse33\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse34 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse35 = \"AEIOUaeiou\";\n    std::string vowels_\n}\nint main() {\n\
    \    auto candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) ==\
    \ (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpapzd4jw7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_upper = \"AEIOUAEIOU\";\n    std::string vowels_lower\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper2 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower2 = \"aeiouaeiou\";\n    std::string vowels_upper3 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower3 = \"aeiouaeiou\";\n    std::string vowels_upper4\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower4 = \"aeiouaeiou\";\n    std::string\
    \ vowels_upper5 = \"AEIOUAEIOU\";\n    std::string vowels_lower5 = \"aeiouaeiou\"\
    ;\n    std::string vowels_upper6 = \"AEIOUAEIOU\";\n    std::string vowels_lower6\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper7 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower7 = \"aeiouaeiou\";\n    std::string vowels_upper8 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower8 = \"aeiouaeiou\";\n    std::string vowels_upper9\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower9 = \"aeiouaeiou\";\n    std::string\
    \ vowels_upper10 = \"AEIOUAEIOU\";\n    std::string vowels_lower10 = \"aeiouaeiou\"\
    ;\n    std::string vowels_upper11 = \"AEIOUAEIOU\";\n    std::string vowels_lower11\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper12 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower12 = \"aeiouaeiou\";\n    std::string vowels_upper13 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower13 = \"aeiouaeiou\";\n    std::string vowels_upper14\
    \ = \"AEIOUAEIOU\";\n    std::string vowels_lower14 = \"aeiouaeiou\";\n    std::string\
    \ vowels_upper15 = \"AEIOUAEIOU\";\n    std::string vowels_lower15 = \"aeiouaeiou\"\
    ;\n    std::string vowels_upper16 = \"AEIOUAEIOU\";\n    std::string vowels_lower16\
    \ = \"aeiouaeiou\";\n    std::string vowels_upper17 = \"AEIOUAEIOU\";\n    std::string\
    \ vowels_lower17 = \"aeiouaeiou\";\n    std::string vowels_upper18 = \"AEIOUAEIOU\"\
    ;\n    std::string vowels_lower18 = \"aeiouaeiou\";\n}\nint main() {\n    auto\
    \ candidate = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"\
    ));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"easy\"\
    )) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2bk5ib2b.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse_back_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfad7gu81.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpfad7gu81.cpp:39:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpfad7gu81.cpp: In function 'int main()':\n/tmp/tmpfad7gu81.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfad7gu81.cpp:2:\n/tmp/tmpfad7gu81.cpp:42:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_rev = \"AEIOUaeiou\";\n    std::string vowels_rev2 =\
    \ \"\";\n    std::string vowels_rev3 = \"\";\n    std::string vowels_rev4 = \"\
    \";\n    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6 = \"\";\n\
    \    std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 = \"\";\n  \
    \  std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\";\n   \
    \ std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\";\n   \
    \ std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n   \
    \ std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n   \
    \ std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n   \
    \ std::string vowels_rev19 = \"\";\n    std::string vowels_rev20 = \"\";\n   \
    \ std::string vowels_rev21 = \"\";\n    std::string vowels_rev22 = \"\";\n   \
    \ std::string vowels_rev23 = \"\";\n    std::string vowels_rev24 = \"\";\n   \
    \ std::string vowels_rev25 = \"\";\n    std::string vowels_rev26 = \"\";\n   \
    \ std::string vowels_rev27 = \"\";\n    std::string vowels_rev28 = \"\";\n   \
    \ std::string vowels_rev29 = \"\";\n    std::string vowels_rev30 = \"\";\n   \
    \ std::string vowels_rev31 = \"\";\n    std::string vowels_rev32 = \"\";\n   \
    \ std::string vowels_rev33 = \"\";\n    std::string vowels_rev34 = \"\";\n   \
    \ std::string vowels_rev35 = \"\";\n    std::string vowels_rev36 = \"\";\n   \
    \ std::string vowels_rev37 = \"\";\n    std::string vowels_rev38 = \"\";\n   \
    \ std::string vowels_rev39 = \"\";\n    std::string vowels_rev40 = \"\";\n   \
    \ std::string vowels_rev41 = \"\";\n    std::string vowels_rev42 = \"\";\n   \
    \ std::string vowels_rev43 = \"\";\n    std::string vowels_rev44 = \"\";\n   \
    \ std::string vowels_rev45 = \"\";\n    std::string vowels_rev46 = \"\";\n   \
    \ std::string vowels_rev47 = \"\";\n    std::string vowels_rev48 = \"\";\n   \
    \ std::string vowels_rev49 = \"\";\n    std::string vowels_rev50 = \"\";\n   \
    \ std::string vowels_rev51 = \"\";\n    std::string vowels_rev52 = \"\";\n   \
    \ std::string vowels_rev53 = \"\";\n    std::string vowels_rev54 = \"\";\n   \
    \ std::string vowels_rev55 = \"\";\n    std::string vowels_rev56 = \"\";\n   \
    \ std::string vowels_rev57 = \"\";\n    std::string vowels_rev58 = \"\";\n   \
    \ std::string vowels_rev59 = \"\";\n    std::string vowels_rev60 = \"\";\n   \
    \ std::string vowels_rev6\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbfz2_xl_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back = \"AEIOUaeiou\";\n \
    \   std::string vowels_reverse_back_reverse = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse_back_reverse_back = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back_reverse_back\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfad7gu81.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmpfad7gu81.cpp:39:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpfad7gu81.cpp: In function 'int main()':\n/tmp/tmpfad7gu81.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = get_closest_vowel;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfad7gu81.cpp:2:\n/tmp/tmpfad7gu81.cpp:42:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    int n = word.size();\n    int vowel_counter\
    \ = 0;\n    std::string vowels = \"aeiouAEIOU\";\n    for (int i = 0; i < n; i++)\
    \ {\n        if (word[i] == vowels[vowel_counter]) {\n            vowel_counter++;\n\
    \        }\n    }\n    if (vowel_counter == 0) return \"\";\n    int vowel_counter2\
    \ = 0;\n    std::string vowels2 = \"aeiouAEIOU\";\n    for (int i = n-1; i >=\
    \ 0; i--) {\n        if (word[i] == vowels2[vowel_counter2]) {\n            vowel_counter2++;\n\
    \        }\n    }\n    if (vowel_counter2 == 0) return \"\";\n    int vowel_counter3\
    \ = 0;\n    std::string vowels3 = \"aeiouAEIOU\";\n    for (int i = n-2; i >=\
    \ 0; i--) {\n        if (word[i] == vowels3[vowel_counter3]) {\n            vowel_counter3++;\n\
    \        }\n    }\n    if (vowel_counter3 == 0) return \"\";\n    int vowel_counter4\
    \ = 0;\n    std::string vowels4 = \"aeiouAEIOU\";\n    for (int i = n-3; i >=\
    \ 0; i--) {\n        if (word[i] == vowels4[vowel_counter4]) {\n            vowel_counter4++;\n\
    \        }\n    }\n    if (vowel_counter4 == 0) return \"\";\n    int vowel_counter5\
    \ = 0;\n    std::string vowels5 = \"aeiouAEIOU\";\n    for (int i = n-4; i >=\
    \ 0; i--) {\n        if (word[i] == vowels5[vowel_counter5]) {\n            vowel_counter5++;\n\
    \        }\n    }\n    if (vowel_counter5 == 0) return \"\";\n    int vowel_counter6\
    \ = 0;\n    std::string vowels6 = \"aeiouAEIOU\";\n    for (int i = n-5; i >=\
    \ 0; i--) {\n        if (word[i] == vowels6[vowel_counter6]) {\n            vowel_counter6++;\n\
    \        }\n    }\n    if (vowel_counter6 == 0) return \"\";\n    int vowel_counter7\
    \ = 0;\n    std::string vowels7 = \"aeiouAEIOU\";\n    for (int i = n-6; i >=\
    \ 0; i--) {\n        if (word[i] == vowels7[vowel_counter7]) {\n            vowel_counter7++;\n\
    \        }\n    }\n    if (vowel_counter7 == 0) return \"\";\n    int vowel_counter8\
    \ = 0;\n    std::string vowels8 = \"aeiouAEIOU\";\n    for (int i = n-7; i >=\
    \ 0; i--) {\n        if (word[i] == vowels8[vowel_counter8]) {\n            vowel_counter8++;\n\
    \        }\n    }\n    if (vowel_counter8 == 0) return \"\";\n    int vowel_counter9\
    \ = 0;\n    std::string vowels9 = \"aeiouAEIO\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp287_xw4m.cpp:84:27: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels9 = \"aeiouAEIO\n                      \
    \     ^\n/tmp/tmp287_xw4m.cpp:84:5: error: missing terminating \" character\n\
    \     std::string vowels9 = \"aeiouAEIO\n     ^\nIn file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp287_xw4m.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression befor"
  stdout: ''
  timestamp: 1659798687
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_rev = \"AEIOUaeiou\";\n    std::string vowels_rev2 =\
    \ \"\";\n    std::string vowels_rev3 = \"\";\n    std::string vowels_rev4 = \"\
    \";\n    std::string vowels_rev5 = \"\";\n    std::string vowels_rev6 = \"\";\n\
    \    std::string vowels_rev7 = \"\";\n    std::string vowels_rev8 = \"\";\n  \
    \  std::string vowels_rev9 = \"\";\n    std::string vowels_rev10 = \"\";\n   \
    \ std::string vowels_rev11 = \"\";\n    std::string vowels_rev12 = \"\";\n   \
    \ std::string vowels_rev13 = \"\";\n    std::string vowels_rev14 = \"\";\n   \
    \ std::string vowels_rev15 = \"\";\n    std::string vowels_rev16 = \"\";\n   \
    \ std::string vowels_rev17 = \"\";\n    std::string vowels_rev18 = \"\";\n   \
    \ std::string vowels_rev19 = \"\";\n    std::string vowels_rev20 = \"\";\n   \
    \ std::string vowels_rev21 = \"\";\n    std::string vowels_rev22 = \"\";\n   \
    \ std::string vowels_rev23 = \"\";\n    std::string vowels_rev24 = \"\";\n   \
    \ std::string vowels_rev25 = \"\";\n    std::string vowels_rev26 = \"\";\n   \
    \ std::string vowels_rev27 = \"\";\n    std::string vowels_rev28 = \"\";\n   \
    \ std::string vowels_rev29 = \"\";\n    std::string vowels_rev30 = \"\";\n   \
    \ std::string vowels_rev31 = \"\";\n    std::string vowels_rev32 = \"\";\n   \
    \ std::string vowels_rev33 = \"\";\n    std::string vowels_rev34 = \"\";\n   \
    \ std::string vowels_rev35 = \"\";\n    std::string vowels_rev36 = \"\";\n   \
    \ std::string vowels_rev37 = \"\";\n    std::string vowels_rev38 = \"\";\n   \
    \ std::string vowels_rev39 = \"\";\n    std::string vowels_rev40 = \"\";\n   \
    \ std::string vowels_rev41 = \"\";\n    std::string vowels_rev42 = \"\";\n   \
    \ std::string vowels_rev43 = \"\";\n    std::string vowels_rev44 = \"\";\n   \
    \ std::string vowels_rev45 = \"\";\n    std::string vowels_rev46 = \"\";\n   \
    \ std::string vowels_rev47 = \"\";\n    std::string vowels_rev48 = \"\";\n   \
    \ std::string vowels_rev49 = \"\";\n    std::string vowels_rev50 = \"\";\n   \
    \ std::string vowels_rev51 = \"\";\n    std::string vowels_rev52 = \"\";\n   \
    \ std::string vowels_rev53 = \"\";\n    std::string vowels_rev54 = \"\";\n   \
    \ std::string vowels_rev55 = \"\";\n    std::string vowels_rev56 = \"\";\n   \
    \ std::string vowels_rev57 = \"\";\n    std::string vowels_rev58 = \"\";\n   \
    \ std::string vowels_rev59 = \"\";\n    std::string vowels_rev60 = \"\";\n   \
    \ std::string vowels_rev6\n}\nint main() {\n    auto candidate = get_closest_vowel;\n\
    \    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"full\"\
    )) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbfz2_xl_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659798686
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse = \"AEIOUaeiou\";\n\
    \    std::string vowels_reverse_reverse_reverse_reverse_reverse = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse = \"\
    AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\n\
    }\nint main() {\n    auto candidate = get_closest_vowel;\n    assert(candidate((\"\
    yogurt\")) == (\"u\"));\n    assert(candidate((\"full\")) == (\"u\"));\n    assert(candidate((\"\
    easy\")) == (\"\"));\n    assert(candidate((\"eAsy\")) == (\"\"));\n    assert(candidate((\"\
    ali\")) == (\"\"));\n    assert(candidate((\"bad\")) == (\"a\"));\n    assert(candidate((\"\
    most\")) == (\"o\"));\n    assert(candidate((\"ab\")) == (\"\"));\n    assert(candidate((\"\
    ba\")) == (\"\"));\n    assert(candidate((\"quick\")) == (\"\"));\n    assert(candidate((\"\
    anime\")) == (\"i\"));\n    assert(candidate((\"Asia\")) == (\"\"));\n    assert(candidate((\"\
    Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9o2kp7kw.cpp: In function 'std::string get_closest_vowel(std::string)':\n\
    /tmp/tmp9o2kp7kw.cpp:26:17: error: redeclaration of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:25:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously declared\
    \ here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:28:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:29:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:30:17: error: redeclaration\
    \ of 'std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse'\n\
    \     std::string vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse\
    \ = \"AEIOUaeiou\";\n                 ^\n/tmp/tmp9o2kp7kw.cpp:27:17: error: 'std::string\
    \ vowels_reverse_reverse_reverse_reverse_reverse_reverse_reverse_reverse' previously\
    \ declared here\n     std::s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a word.\
    \ Your task is to find the closest vowel that stands between \n// two consonants\
    \ from the right side of the word (case sensitive).\n// Vowels in the beginning\
    \ and ending doesn't count. Return empty string if you didn't\n// find any vowel\
    \ met the above condition. \n// You may assume that the given string contains\
    \ English letter only.\n// Example:\n// >>> get_closest_vowel((\"yogurt\"))\n\
    // (\"u\")\n// >>> get_closest_vowel((\"FULL\"))\n// (\"U\")\n// >>> get_closest_vowel((\"\
    quick\"))\n// (\"\")\n// >>> get_closest_vowel((\"ab\"))\n// (\"\")\nstd::string\
    \ get_closest_vowel(std::string word) {\n    std::string vowels = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse = \"AEIOUaeiou\";\n    std::string vowels_reverse2\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse3 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse4 = \"AEIOUaeiou\";\n    std::string vowels_reverse5 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse6 = \"AEIOUaeiou\";\n    std::string vowels_reverse7\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse8 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse9 = \"AEIOUaeiou\";\n    std::string vowels_reverse10 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse11 = \"AEIOUaeiou\";\n    std::string vowels_reverse12\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse13 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse14 = \"AEIOUaeiou\";\n    std::string vowels_reverse15 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse16 = \"AEIOUaeiou\";\n    std::string vowels_reverse17\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse18 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse19 = \"AEIOUaeiou\";\n    std::string vowels_reverse20 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse21 = \"AEIOUaeiou\";\n    std::string vowels_reverse22\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse23 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse24 = \"AEIOUaeiou\";\n    std::string vowels_reverse25 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse26 = \"AEIOUaeiou\";\n    std::string vowels_reverse27\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse28 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse29 = \"AEIOUaeiou\";\n    std::string vowels_reverse30 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse31 = \"AEIOUaeiou\";\n    std::string vowels_reverse32\
    \ = \"AEIOUaeiou\";\n    std::string vowels_reverse33 = \"AEIOUaeiou\";\n    std::string\
    \ vowels_reverse34 = \"AEIOUaeiou\";\n    std::string vowels_reverse35 = \"AEIOUaeiou\"\
    ;\n    std::string vowels_reverse36 = \"AEIOU\n}\nint main() {\n    auto candidate\
    \ = get_closest_vowel;\n    assert(candidate((\"yogurt\")) == (\"u\"));\n    assert(candidate((\"\
    full\")) == (\"u\"));\n    assert(candidate((\"easy\")) == (\"\"));\n    assert(candidate((\"\
    eAsy\")) == (\"\"));\n    assert(candidate((\"ali\")) == (\"\"));\n    assert(candidate((\"\
    bad\")) == (\"a\"));\n    assert(candidate((\"most\")) == (\"o\"));\n    assert(candidate((\"\
    ab\")) == (\"\"));\n    assert(candidate((\"ba\")) == (\"\"));\n    assert(candidate((\"\
    quick\")) == (\"\"));\n    assert(candidate((\"anime\")) == (\"i\"));\n    assert(candidate((\"\
    Asia\")) == (\"\"));\n    assert(candidate((\"Above\")) == (\"o\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa81zo_l2.cpp:54:36: warning: missing terminating \" character [enabled\
    \ by default]\n     std::string vowels_reverse36 = \"AEIOU\n                 \
    \                   ^\n/tmp/tmpa81zo_l2.cpp:54:5: error: missing terminating \"\
    \ character\n     std::string vowels_reverse36 = \"AEIOU\n     ^\n/tmp/tmpa81zo_l2.cpp:\
    \ In function 'std::string get_closest_vowel(std::string)':\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmpa81zo_l2.cpp:55:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmpa81zo_l2.cpp: In function\
    \ 'int main()':\n/tmp/tmpa81zo_l2.cpp:57:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = get_closest_vowel;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa81zo_l2.cpp:2:\n/tmp/tmpa81zo_l2.cpp:58:32: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"yogurt\"\
    )) == (\"u\"));\n                                ^\n"
  stdout: ''
