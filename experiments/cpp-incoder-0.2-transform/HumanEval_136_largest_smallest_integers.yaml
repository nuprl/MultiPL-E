name: HumanEval_136_largest_smallest_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns\
  \ a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is\
  \ the smallest\n// of positive integers in a list.\n// If there is no negative or\
  \ positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n\
  // std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n\
  // >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>>\
  \ largest_smallest_integers(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
  \ (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2,\
  \ (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9,\
  \ 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0})))\
  \ == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6})))\
  \ == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6,\
  \ (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3,\
  \ (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6,\
  \ (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n\
  }\n"
completions: ["    long max_val = std::numeric_limits<long>::min();\n    long min_val\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            max_val = i;\n        } else if (i > 0){\n            min_val\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n          \
    \  if (largest == std::nullopt) {\n                largest = i;\n            }\
    \ else {\n                largest = std::nullopt;\n            }\n        } else\
    \ if (i > largest) {\n            largest = i;\n        }\n        if (i < 0)\
    \ {\n            if (smallest == std::nullopt) {\n                smallest = i;\n\
    \            } else {\n                smallest = std::nullopt;\n            }\n\
    \        } else if (i > smallest) {\n            smallest = i;\n        }\n  \
    \  }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_val = std::numeric_limits<long>::max();\n    long min_val = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > max_val) {\n            max_val = i;\n        }\n      \
    \  if (i < min_val) {\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\
    \ else if (smallest > i) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (long i : lst) {\n        if (largest < i)\
    \ {\n            largest = i;\n        }\n        if (smallest > i) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (smallest == lst.end()) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::move(largest)), std::optional<long>(std::move(smallest)));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_list = lst;\n\
    \    std::sort(sorted_list.begin(), sorted_list.end());\n    if (sorted_list.empty())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[0] == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto min_pos = std::min_element(sorted_list.begin(),\
    \ sorted_list.end());\n    auto max_neg = std::max_element(sorted_list.begin(),\
    \ sorted_list.end());\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    // Write your code here\n    long\
    \ largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    std::vector<long> sorted_list = lst;\n    std::sort(sorted_list.begin(), sorted_list.end());\n\
    \    if (sorted_list.size() == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_list.size() == 1)\
    \ {\n        return std::make_tuple(std::optional<long>(sorted_list[0]), std::optional<long>(std::nullopt));\n\
    \    }\n    long largest_negative = sorted_list[0];\n    long smallest_positive\
    \ = sorted_list[0];\n    for (long i = 1; i < sorted_list.size(); i++) {\n   \
    \     if (sorted_list[i] < smallest_positive) {\n            smallest_positive\
    \ = sorted_list[i];\n        }\n        if (sorted_list[i] > largest_negative)\
    \ {\n            largest_negative = sorted_list[i];\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(smallest_positive));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else if (i > largest) {\n            largest = std::max(largest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::nullopt;\n    long smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n          \
    \  if (largest == std::nullopt) {\n                largest = i;\n            }\
    \ else {\n                largest = std::nullopt;\n            }\n        } else\
    \ if (i > largest) {\n            if (smallest == std::nullopt) {\n          \
    \      smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));"]
stop_tokens:
- "\n}"
