name: HumanEval_136_largest_smallest_integers
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function that returns\
  \ a tuple (a, b), where 'a' is\n// the largest of negative integers, and 'b' is\
  \ the smallest\n// of positive integers in a list.\n// If there is no negative or\
  \ positive integers, return them as None.\n// Examples:\n// >>> largest_smallest_integers((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7})))\n// std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1))\n// >>> largest_smallest_integers((std::vector<long>()))\n\
  // std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt))\n\
  // >>> largest_smallest_integers((std::vector<long>({(long)0})))\n// std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt))\nstd::tuple<std::optional<long>, std::optional<long>>\
  \ largest_smallest_integers(std::vector<long> lst) {\n"
tests: "}\nint main() {\n    auto candidate = largest_smallest_integers;\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)4, (long)1, (long)3, (long)5, (long)7}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)2, (long)4,\
  \ (long)1, (long)3, (long)5, (long)7, (long)0}))) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(1)));\n    assert(candidate((std::vector<long>({(long)1, (long)3,\
  \ (long)2, (long)4, (long)5, (long)6, (long)-2}))) == std::make_tuple(-2, 1));\n\
  \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)3, (long)6, (long)2,\
  \ (long)7, (long)-7}))) == std::make_tuple(-7, 2));\n    assert(candidate((std::vector<long>({(long)7,\
  \ (long)3, (long)8, (long)4, (long)9, (long)2, (long)5, (long)-9}))) == std::make_tuple(-9,\
  \ 2));\n    assert(candidate((std::vector<long>())) == std::make_tuple(std::optional<long>(std::nullopt),\
  \ std::optional<long>(std::nullopt)));\n    assert(candidate((std::vector<long>({(long)0})))\
  \ == std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6})))\
  \ == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-1, (long)-3, (long)-5, (long)-6,\
  \ (long)0}))) == std::make_tuple(std::optional<long>(-1), std::optional<long>(std::nullopt)));\n\
  \    assert(candidate((std::vector<long>({(long)-6, (long)-4, (long)-4, (long)-3,\
  \ (long)1}))) == std::make_tuple(-3, 1));\n    assert(candidate((std::vector<long>({(long)-6,\
  \ (long)-4, (long)-4, (long)-3, (long)-100, (long)1}))) == std::make_tuple(-3, 1));\n\
  }\n"
completions: ["    long max_val = std::numeric_limits<long>::min();\n    long min_val\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            max_val = i;\n        } else if (i > 0){\n            min_val\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n          \
    \  if (largest == std::nullopt) {\n                largest = i;\n            }\
    \ else {\n                largest = std::nullopt;\n            }\n        } else\
    \ if (i > largest) {\n            largest = i;\n        }\n        if (i < 0)\
    \ {\n            if (smallest == std::nullopt) {\n                smallest = i;\n\
    \            } else {\n                smallest = std::nullopt;\n            }\n\
    \        } else if (i > smallest) {\n            smallest = i;\n        }\n  \
    \  }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_val = std::numeric_limits<long>::max();\n    long min_val = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > max_val) {\n            max_val = i;\n        }\n      \
    \  if (i < min_val) {\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\
    \ else if (smallest > i) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (long i : lst) {\n        if (largest < i)\
    \ {\n            largest = i;\n        }\n        if (smallest > i) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (smallest == lst.end()) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::move(largest)), std::optional<long>(std::move(smallest)));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_list = lst;\n\
    \    std::sort(sorted_list.begin(), sorted_list.end());\n    if (sorted_list.empty())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_list[0] == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto min_pos = std::min_element(sorted_list.begin(),\
    \ sorted_list.end());\n    auto max_neg = std::max_element(sorted_list.begin(),\
    \ sorted_list.end());\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    // Write your code here\n    long\
    \ largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    std::vector<long> sorted_list = lst;\n    std::sort(sorted_list.begin(), sorted_list.end());\n\
    \    if (sorted_list.size() == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_list.size() == 1)\
    \ {\n        return std::make_tuple(std::optional<long>(sorted_list[0]), std::optional<long>(std::nullopt));\n\
    \    }\n    long largest_negative = sorted_list[0];\n    long smallest_positive\
    \ = sorted_list[0];\n    for (long i = 1; i < sorted_list.size(); i++) {\n   \
    \     if (sorted_list[i] < smallest_positive) {\n            smallest_positive\
    \ = sorted_list[i];\n        }\n        if (sorted_list[i] > largest_negative)\
    \ {\n            largest_negative = sorted_list[i];\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(smallest_positive));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else if (i > largest) {\n            largest = std::max(largest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::nullopt;\n    long smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n          \
    \  if (largest == std::nullopt) {\n                largest = i;\n            }\
    \ else {\n                largest = std::nullopt;\n            }\n        } else\
    \ if (i > largest) {\n            if (smallest == std::nullopt) {\n          \
    \      smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n \
    \           if (largest == std::nullopt) {\n                largest = i;\n   \
    \         } else {\n                largest = std::nullopt;\n            }\n \
    \       } else if (i > largest) {\n            largest = i;\n        }\n     \
    \   if (i < 0) {\n            if (smallest == std::nullopt) {\n              \
    \  smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        } else if (i > smallest) {\n            smallest = i;\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (largest == std::nullopt) {\n                largest = i;\n            }\
    \ else {\n                largest = std::nullopt;\n            }\n        } else\
    \ {\n            if (smallest == std::nullopt) {\n                smallest = i;\n\
    \            } else {\n                smallest = std::nullopt;\n            }\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto it = std::max_element(lst.begin(),\
    \ lst.end());\n    if (it == lst.end())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto it2 = std::min_element(lst.begin(),\
    \ lst.end());\n    if (it2 == lst.end())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    return std::make_tuple(std::optional<long>(std::move(it)),\
    \ std::optional<long>(std::move(it2)));", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n    auto\
    \ smallest = std::min_element(lst.begin(), lst.end());\n    if (largest == lst.end())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (smallest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (*largest < *smallest) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::move(largest)), std::optional<long>(std::move(smallest)));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest = i;\n        } else if\
    \ (i > largest) {\n            largest = i;\n        }\n        if (i < 0) {\n\
    \            smallest = i;\n        } else if (i > smallest) {\n            smallest\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.size() == 0) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    auto min_val = std::numeric_limits<long>::min();\n    auto max_val\
    \ = std::numeric_limits<long>::max();\n    for (auto i : lst) {\n        if (i\
    \ < min_val) {\n            min_val = i;\n        } else if (i > max_val) {\n\
    \            max_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(min_val),\
    \ std::optional<long>(max_val));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < a) {\n            a = i;\n        } else if (i > b) {\n       \
    \     b = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (largest < i) {\n    \
    \        largest = i;\n        }\n        if (smallest > i) {\n            smallest\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_val = std::numeric_limits<long>::max();\n\
    \    long min_val = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0)\n\
    \            min_val = i;\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (smallest == lst.end()) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (auto\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = std::max(max_negative, i);\n        } else\
    \ {\n            min_positive = std::min(min_positive, i);\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(max_negative), std::optional<long>(min_positive));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = std::max<long>(largest,\
    \ i);\n        } else {\n            smallest = std::min<long>(smallest, i);\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (largest == std::nullopt) {\n                largest = i;\n            }\
    \ else {\n                largest = std::nullopt;\n            }\n        } else\
    \ {\n            if (smallest == std::nullopt) {\n                smallest = i;\n\
    \            } else {\n                smallest = std::nullopt;\n            }\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest == std::nullopt) {\n\
    \                largest = i;\n            }\n        } else if (i > largest)\
    \ {\n            if (smallest == std::nullopt) {\n                smallest = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < i) {\n\
    \                largest_negative = i;\n            }\n        } else {\n    \
    \        if (largest_positive > i) {\n                largest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (long i : lst) {\n        if (i <\
    \ 0) {\n            if (largest == std::nullopt) {\n                largest =\
    \ i;\n            } else {\n                largest = std::nullopt;\n        \
    \    }\n        } else {\n            if (smallest == std::nullopt) {\n      \
    \          smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_lst = lst;\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.empty())\
    \ return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    long max_val = sorted_lst[0];\n    long min_val = sorted_lst[0];\n    for\
    \ (long i = 1; i < sorted_lst.size(); i++) {\n        if (sorted_lst[i] > max_val)\
    \ {\n            max_val = sorted_lst[i];\n        } else if (sorted_lst[i] <\
    \ min_val) {\n            min_val = sorted_lst[i];\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    std::vector<long> neg;\n    std::vector<long> pos;\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            neg.push_back(i);\n        } else {\n \
    \           pos.push_back(i);\n        }\n    }\n    if (neg.empty() && pos.empty())\
    \ {\n        return std::make_tuple(std::nullopt, std::nullopt);\n    }\n    if\
    \ (neg.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    if (pos.empty()) {\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    }\n    long largest = *std::max_element(neg.begin(), neg.end());\n    long\
    \ smallest = *std::min_element(pos.begin(), pos.end());\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < 0)\n  \
    \              largest_negative = i;\n        } else {\n            if (largest_positive\
    \ > 0)\n                largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Write your code here\n   \
    \ long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest == std::nullopt) {\n\
    \                largest = i;\n            } else {\n                largest =\
    \ std::nullopt;\n            }\n        } else if (i > largest) {\n          \
    \  largest = i;\n        }\n        if (i < 0) {\n            if (smallest ==\
    \ std::nullopt) {\n                smallest = i;\n            } else {\n     \
    \           smallest = std::nullopt;\n            }\n        } else if (i > smallest)\
    \ {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < a) {\n            a = i;\n        }\n        if (i > b) {\n   \
    \         b = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0)\
    \ {\n            b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = std::max(max_val, i);\n     \
    \   } else if (i > 0){\n            min_val = std::min(min_val, i);\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    if (lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            if (largest < 0)\n                largest\
    \ = i;\n        } else if (i > 0)\n            smallest = i;\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n          \
    \  if (largest == std::nullopt) {\n                largest = i;\n            }\
    \ else {\n                largest = std::nullopt;\n            }\n        } else\
    \ {\n            if (smallest == std::nullopt) {\n                smallest = i;\n\
    \            } else {\n                smallest = std::nullopt;\n            }\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (long i : lst) {\n        if (i <\
    \ 0) {\n            if (largest == std::nullopt) {\n                largest =\
    \ i;\n            } else {\n                largest = std::nullopt;\n        \
    \    }\n        } else if (i > largest) {\n            if (smallest == std::nullopt)\
    \ {\n                smallest = i;\n            } else {\n                smallest\
    \ = std::nullopt;\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (smallest == lst.end()) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::move(largest)), std::optional<long>(std::move(smallest)));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0) {\n            largest_positive = i;\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0)\n            b = std::min(b, i);\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else {\n            b = std::min(b, i);\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    if (lst.empty())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    long largest_negative = std::numeric_limits<long>::min();\n    long\
    \ largest_positive = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            if (largest_negative < i) {\n         \
    \       largest_negative = i;\n            }\n        } else {\n            if\
    \ (largest_positive > i) {\n                largest_positive = i;\n          \
    \  }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (auto i : lst) {\n        if (largest\
    \ < i) {\n            largest = i;\n        } else if (smallest > i) {\n     \
    \       smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = std::max<long>(largest, i);\n\
    \        } else if (i > largest) {\n            smallest = std::min<long>(smallest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long smallest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (largest_negative\
    \ < i) {\n                largest_negative = i;\n            }\n        } else\
    \ {\n            if (smallest_positive > i) {\n                smallest_positive\
    \ = i;\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    // Write your code here\n  \
    \  long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::nullopt;\n    long smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (largest < i) {\n            largest = i;\n        }\n        if (smallest\
    \ > i) {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            max_val = std::max(max_val, i);\n     \
    \   } else if (i > 0)\n            min_val = std::min(min_val, i);\n    }\n  \
    \  return std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::max();\n \
    \   long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_lst = std::sort(lst.begin(),\
    \ lst.end());\n    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (sorted_lst.front() < 0) return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    if (sorted_lst.back() >= 0) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    return std::make_tuple(std::optional<long>(sorted_lst.back()),\
    \ std::optional<long>(sorted_lst.front()));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (largest == std::nullopt) {\n                largest =\
    \ i;\n            } else {\n                largest = std::nullopt;\n        \
    \    }\n        } else {\n            if (smallest == std::nullopt) {\n      \
    \          smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            smallest = std::min(smallest,\
    \ i);\n        } else if (i > largest) {\n            largest = i;\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long max_val = std::numeric_limits<long>::max();\n    long min_val = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > max_val) {\n            max_val = i;\n        }\n      \
    \  if (i < min_val) {\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) min_val = std::numeric_limits<long>::max();\n        else\
    \ if (i > 0) max_val = std::numeric_limits<long>::min();\n        else max_val\
    \ = i;\n    }\n    return std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest == std::nullopt) {\n\
    \                largest = i;\n            } else {\n                largest =\
    \ std::nullopt;\n            }\n        } else if (i > largest) {\n          \
    \  smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_lst(lst);\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.size()\
    \ == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_lst.front() < 0) {\n        sorted_lst.front() = std::nullopt;\n\
    \    }\n    if (sorted_lst.back() > 0) {\n        sorted_lst.back() = std::nullopt;\n\
    \    }\n    return std::make_tuple(std::optional<long>(sorted_lst.front()), std::optional<long>(sorted_lst.back()));",
  "    long max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0){\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    // Write your code here\n    long largest\
    \ = std::nullopt;\n    long smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (largest < i) {\n            largest = i;\n        }\n        if (smallest\
    \ > i) {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n \
    \           largest = std::nullopt;\n        } else {\n            if (largest\
    \ == std::nullopt) {\n                largest = i;\n            } else {\n   \
    \             if (i < smallest) {\n                    smallest = i;\n       \
    \         }\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (long i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ {\n            min_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    // Write your code here\n    long\
    \ largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = std::max<long>(largest, i);\n\
    \        } else if (i > 0) {\n            smallest = std::min<long>(smallest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long val : lst)\
    \ {\n        if (val < 0) {\n            max_val = std::max(max_val, val);\n \
    \       } else if (val > 0) {\n            min_val = std::min(min_val, val);\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    // Write your code here\n    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n          \
    \  if (largest == std::nullopt) {\n                largest = i;\n            }\
    \ else {\n                largest = std::nullopt;\n            }\n        } else\
    \ if (i > largest) {\n            largest = i;\n        }\n        if (i < 0)\
    \ {\n            if (smallest == std::nullopt) {\n                smallest = i;\n\
    \            } else {\n                smallest = std::nullopt;\n            }\n\
    \        } else if (i > smallest) {\n            smallest = i;\n        }\n  \
    \  }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long smallest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > smallest_positive) {\n            smallest_positive = i;\n \
    \       }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (largest < 0)\n                largest = i;\n        }\
    \ else if (i > 0)\n            smallest = i;\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (long i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0)\n\
    \            min_val = i;\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    // Write your code here\n    long largest\
    \ = std::nullopt;\n    long smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            if (largest == std::nullopt) {\n          \
    \      largest = i;\n            } else {\n                largest = std::nullopt;\n\
    \            }\n        } else {\n            if (smallest == std::nullopt) {\n\
    \                smallest = i;\n            } else {\n                smallest\
    \ = std::nullopt;\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long smallest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (largest_negative\
    \ < 0)\n                largest_negative = i;\n        } else {\n            if\
    \ (smallest_positive > 0)\n                smallest_positive = i;\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(smallest_positive));",
  "    long largest_negative = std::numeric_limits<long>::min();\n    long largest_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            largest_negative = i;\n        } else if (i > largest_positive)\
    \ {\n            largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Write your code here\n   \
    \ long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = std::max<long>(largest,\
    \ i);\n        } else if (i > 0)\n            smallest = std::min<long>(smallest,\
    \ i);\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest == std::nullopt) {\n\
    \                largest = i;\n            } else {\n                largest =\
    \ std::nullopt;\n            }\n        } else {\n            if (smallest ==\
    \ std::nullopt) {\n                smallest = i;\n            } else {\n     \
    \           smallest = std::nullopt;\n            }\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (auto\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (largest < i) {\n    \
    \        largest = i;\n        }\n        if (smallest > i) {\n            smallest\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = 0, b = 0, c = 0, d = 0;\n    for (long i = 0; i < lst.size(); i++)\
    \ {\n        if (lst[i] < 0) {\n            if (a < 0)\n                a = lst[i];\n\
    \        } else if (lst[i] > 0) {\n            if (b < 0)\n                b =\
    \ lst[i];\n        } else {\n            if (c < 0)\n                c = lst[i];\n\
    \            if (d < 0)\n                d = lst[i];\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    long\
    \ largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long i\
    \ : lst) {\n        if (i < 0) {\n            largest = i;\n        } else if\
    \ (i > largest) {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (largest_negative\
    \ < i) {\n                largest_negative = i;\n            }\n        } else\
    \ if (i > largest_positive) {\n            largest_positive = i;\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (long i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = i;\n        } else\
    \ if (i > 0)\n            min_positive = i;\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    long largest_negative_integer = std::numeric_limits<long>::min();\n\
    \    long smallest_positive_integer = std::numeric_limits<long>::max();\n    for\
    \ (long i : lst) {\n        if (i < 0) {\n            largest_negative_integer\
    \ = i;\n        } else if (i > smallest_positive_integer) {\n            smallest_positive_integer\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative_integer),\
    \ std::optional<long>(smallest_positive_integer));", "    // Your code here\n\
    \    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    std::vector<long> sorted_lst(lst);\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.size()\
    \ == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_lst.front() < 0) {\n        sorted_lst.front() = std::nullopt;\n\
    \    }\n    if (sorted_lst.back() > 0) {\n        sorted_lst.back() = std::nullopt;\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (smallest == lst.end()) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::move(largest)), std::optional<long>(std::move(smallest)));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::nullopt;\n\
    \        } else if (i > a) {\n            b = std::nullopt;\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(a), std::optional<long>(b));",
  "    long largest_negative = std::numeric_limits<long>::max();\n    long smallest_positive\
    \ = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n        if (i\
    \ < 0) {\n            if (largest_negative < 0)\n                largest_negative\
    \ = i;\n        } else {\n            if (smallest_positive > 0)\n           \
    \     smallest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    // Write your code here\n  \
    \  long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = std::max<long>(largest,\
    \ i);\n        } else {\n            smallest = std::min<long>(smallest, i);\n\
    \        }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    std::vector<long> sorted_lst = lst;\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.size()\
    \ == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_lst.size() == 1) {\n        return std::make_tuple(std::optional<long>(sorted_lst[0]),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_lst[0] < sorted_lst[1])\
    \ {\n        return std::make_tuple(std::optional<long>(sorted_lst[0]), std::optional<long>(sorted_lst[1]));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    if (lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (smallest == lst.end())\n      \
    \  return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    return std::make_tuple(std::optional<long>(std::move(largest)), std::optional<long>(std::move(smallest)));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest = std::numeric_limits<long>::max();\n \
    \   long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            smallest = std::min(smallest, i);\n   \
    \     } else if (i > largest) {\n            largest = i;\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = std::numeric_limits<long>::max();\n    long b = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            a = std::max(a, i);\n\
    \        } else if (i > 0)\n            b = std::min(b, i);\n    }\n    return\
    \ std::make_tuple(std::optional<long>(a), std::optional<long>(b));", "    // Write\
    \ your code here\n    long largest = std::nullopt;\n    long smallest = std::nullopt;\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (largest < i) {\n    \
    \        largest = i;\n        }\n        if (smallest > i) {\n            smallest\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    if (lst.empty()) {\n        return\
    \ std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    auto largest = std::max_element(lst.begin(), lst.end());\n    auto\
    \ smallest = std::min_element(lst.begin(), lst.end());\n    if (largest == lst.end())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (smallest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (*largest < *smallest) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::move(largest)), std::optional<long>(std::move(smallest)));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n \
    \           if (largest == std::nullopt) {\n                largest = i;\n   \
    \         } else {\n                largest = std::nullopt;\n            }\n \
    \       } else if (i > largest) {\n            if (smallest == std::nullopt) {\n\
    \                smallest = i;\n            } else {\n                smallest\
    \ = std::nullopt;\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = 0, b = 0, c = 0;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (a < 0)\n                a\
    \ = i;\n        } else {\n            if (b < 0)\n                b = i;\n   \
    \     }\n    }\n    if (a < 0)\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    if (b < 0)\n        return std::make_tuple(std::nullopt, std::nullopt);\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (c < 0)\n    \
    \            c = i;\n        } else {\n            if (c < 0)\n              \
    \  c = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (smallest == lst.end()) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest == std::nullopt) {\n\
    \                largest = i;\n            } else {\n                largest =\
    \ std::nullopt;\n            }\n        } else if (i > largest) {\n          \
    \  if (smallest == std::nullopt) {\n                smallest = i;\n          \
    \  } else {\n                smallest = std::nullopt;\n            }\n       \
    \ }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n          \
    \  if (largest == std::nullopt) {\n                largest = i;\n            }\
    \ else {\n                largest = std::nullopt;\n            }\n        } else\
    \ if (i > largest) {\n            if (smallest == std::nullopt) {\n          \
    \      smallest = i;\n            } else {\n                smallest = std::nullopt;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for(long i : lst) {\n        if(i<0) {\n            largest_negative = i;\n\
    \        }\n        if(i>0) {\n            largest_positive = i;\n        }\n\
    \    }\n    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    // Your code here\n    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (long i : lst) {\n        if (largest\
    \ < i) {\n            largest = i;\n        }\n        if (smallest > i) {\n \
    \           smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (long i : lst) {\n        if (i < 0) {\n \
    \           if (largest == std::nullopt) {\n                largest = i;\n   \
    \         } else {\n                largest = std::nullopt;\n            }\n \
    \       } else if (i > largest) {\n            if (smallest == std::nullopt) {\n\
    \                smallest = i;\n            } else {\n                smallest\
    \ = std::nullopt;\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long smallest_positive = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > smallest_positive) {\n            smallest_positive = i;\n \
    \       }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (long i : lst) {\n        if (i <\
    \ 0) {\n            if (largest < 0)\n                largest = i;\n        }\
    \ else {\n            if (smallest > 0)\n                smallest = i;\n     \
    \   }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    if (lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long a = 0, b = 0, c = 0;\n    for (long i : lst) {\n        if (i < 0) {\n\
    \            a = i;\n        } else if (i > 0){\n            b = i;\n        }\
    \ else {\n            c = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            largest = std::max<long>(largest, i);\n\
    \        } else {\n            smallest = std::min<long>(smallest, i);\n     \
    \   }\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    std::vector<long> sorted_lst = std::sort(lst.begin(), lst.end());\n    if (lst.empty())\
    \ {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_lst.front() < 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(sorted_lst.front()));\n    }\n    if (sorted_lst.back()\
    \ > 0) {\n        return std::make_tuple(std::optional<long>(sorted_lst.back()),\
    \ std::optional<long>(std::nullopt));\n    }\n    return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0) {\n            largest_positive = i;\n     \
    \   }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Write your code here\n   \
    \ long largest_negative = std::numeric_limits<long>::max();\n    long smallest_positive\
    \ = std::numeric_limits<long>::min();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            if (largest_negative < i) {\n                largest_negative\
    \ = i;\n            }\n        } else if (i > smallest_positive) {\n         \
    \   smallest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (auto i : lst) {\n        if (i <\
    \ 0) {\n            if (largest == std::nullopt) {\n                largest =\
    \ i;\n            } else {\n                largest = std::nullopt;\n        \
    \    }\n        } else if (i > largest) {\n            if (smallest == std::nullopt)\
    \ {\n                smallest = i;\n            } else {\n                smallest\
    \ = std::nullopt;\n            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = 0, b = 0, c = 0, d = 0;\n  \
    \  for (auto i : lst) {\n        if (i < 0) {\n            if (a < 0)\n      \
    \          a = i;\n        } else {\n            if (b < 0)\n                b\
    \ = i;\n        }\n    }\n    for (auto i : lst) {\n        if (i >= 0) {\n  \
    \          if (c < 0)\n                c = i;\n        } else {\n            if\
    \ (d < 0)\n                d = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (auto i : lst) {\n        if (i < 0) {\n          \
    \  if (largest < std::nullopt) {\n                largest = std::nullopt;\n  \
    \          }\n        } else {\n            if (smallest > std::nullopt) {\n \
    \               smallest = std::nullopt;\n            }\n        }\n        if\
    \ (largest < i) {\n            largest = i;\n        }\n        if (smallest >\
    \ i) {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < smallest) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::numeric_limits<long>::min();\n\
    \    long smallest = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = std::nullopt;\n        } else\
    \ {\n            smallest = std::nullopt;\n        }\n        if (largest < i)\
    \ {\n            largest = i;\n        }\n        if (smallest > i) {\n      \
    \      smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (auto i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0)\n\
    \            min_val = i;\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > 0) {\n            largest_positive = i;\n        }\n    }\n\
    \    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(largest_positive));",
  "    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto it = std::max_element(lst.begin(),\
    \ lst.end());\n    auto it_neg = std::find_if(lst.begin(), lst.end(), [](long\
    \ x) { return x < 0; });\n    auto it_pos = std::find_if(lst.begin(), lst.end(),\
    \ [](long x) { return x > 0; });\n    if (it == lst.end() || it_neg == lst.end()\
    \ || it_pos == lst.end()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (*it < 0) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(*it));\n    if (*it_neg < 0) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(*it_neg));\n    if (*it_pos < 0) return std::make_tuple(std::optional<long>(*it_neg),\
    \ std::optional<long>(std::nullopt));\n    return std::make_tuple(std::optional<long>(*it_neg),\
    \ std::optional<long>(*it_pos));", "    // Your code here\n    long largest =\
    \ std::nullopt;\n    long smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (largest < i) {\n            largest = i;\n        }\n        if (smallest\
    \ > i) {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::nullopt;\n    long smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long smallest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > smallest_positive) {\n            smallest_positive = i;\n \
    \       }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (long i : lst) {\n        if (largest\
    \ < i) {\n            largest = i;\n        }\n        if (smallest > i) {\n \
    \           smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest = std::nullopt;\n    long\
    \ smallest = std::nullopt;\n    for (long i : lst) {\n        if (largest < i)\
    \ {\n            largest = i;\n        } else if (smallest > i) {\n          \
    \  smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else if (i > 0)\n\
    \            b = std::min(b, i);\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    std::vector<long> negatives;\n    std::vector<long>\
    \ positives;\n    for (auto i : lst) {\n        if (i < 0) {\n            negatives.push_back(i);\n\
    \        } else {\n            positives.push_back(i);\n        }\n    }\n   \
    \ if (negatives.size() == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (positives.size() == 0) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    long largest_negative = std::max(negatives.front(), negatives.back());\n\
    \    long smallest_positive = std::min(positives.front(), positives.back());\n\
    \    return std::make_tuple(std::optional<long>(largest_negative), std::optional<long>(smallest_positive));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\
    \ else if (smallest > i) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::nullopt;\n    long smallest\
    \ = std::nullopt;\n    for (long i : lst) {\n        if (largest < i) {\n    \
    \        largest = i;\n        }\n        if (smallest > i) {\n            smallest\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::max();\n    long largest_positive = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > 0){\n            largest_positive = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Write your code here\n   \
    \ long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest_negative\
    \ = std::numeric_limits<long>::min();\n    long largest_positive = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest_negative\
    \ = i;\n        } else if (i > largest_positive) {\n            largest_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    // Write your code here\n   \
    \ long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\
    \ else if (smallest > i) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Write your code here\n    long largest = std::numeric_limits<long>::max();\n\
    \    long smallest = std::numeric_limits<long>::min();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            largest = i;\n        } else if (i > largest)\
    \ {\n            largest = i;\n        }\n        if (i < 0) {\n            smallest\
    \ = i;\n        } else if (i > smallest) {\n            smallest = i;\n      \
    \  }\n    }\n    return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest = std::numeric_limits<long>::max();\n    long smallest = std::numeric_limits<long>::min();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            largest = std::max<long>(largest,\
    \ i);\n        } else if (i > 0) {\n            smallest = std::min<long>(smallest,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::nullopt;\n    long smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (i < 0) {\n            if (largest == std::nullopt) {\n          \
    \      largest = i;\n            }\n        } else if (i > largest) {\n      \
    \      largest = i;\n        }\n        if (i < 0) {\n            if (smallest\
    \ == std::nullopt) {\n                smallest = i;\n            }\n        }\
    \ else if (i > smallest) {\n            smallest = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    long largest_negative_integer = std::numeric_limits<long>::min();\n    long\
    \ largest_positive_integer = std::numeric_limits<long>::max();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative_integer <\
    \ 0)\n                largest_negative_integer = i;\n        } else {\n      \
    \      if (largest_positive_integer > 0)\n                largest_positive_integer\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative_integer),\
    \ std::optional<long>(largest_positive_integer));", "    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // Your code here\n    \n    // Your code here\n    \n    // Your code\
    \ here\n    \n    // Your code here\n    \n    // Your code here\n    \n    //\
    \ Your code here\n    \n    // Your code here\n    \n    // Your code here\n \
    \   \n    // ", "    if (lst.empty())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end())\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    if (smallest == lst.end())\n      \
    \  return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest = i;\n        } else if\
    \ (i > largest) {\n            largest = i;\n        }\n        if (i < 0) {\n\
    \            smallest = i;\n        } else if (i > smallest) {\n            smallest\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_val = std::numeric_limits<long>::min();\n\
    \    long min_val = std::numeric_limits<long>::max();\n    for (long i : lst)\
    \ {\n        if (i < 0) {\n            max_val = i;\n        } else if (i > 0){\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    std::vector<long> sorted_lst;\n    sorted_lst.insert(sorted_lst.end(), lst.begin(),\
    \ lst.end());\n    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.size()\
    \ == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_lst.size() == 1) {\n        return std::make_tuple(std::optional<long>(sorted_lst[0]),\
    \ std::optional<long>(std::nullopt));\n    }\n    long largest_negative = sorted_lst[0];\n\
    \    long smallest_positive = sorted_lst[1];\n    for (size_t i = 2; i < sorted_lst.size();\
    \ ++i) {\n        if (sorted_lst[i] < smallest_positive) {\n            smallest_positive\
    \ = sorted_lst[i];\n        }\n        if (sorted_lst[i] > largest_negative) {\n\
    \            largest_negative = sorted_lst[i];\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    // Write your code here\n  \
    \  long max_negative = std::numeric_limits<long>::min();\n    long min_positive\
    \ = std::numeric_limits<long>::max();\n    for (long i : lst) {\n        if (i\
    \ < 0) {\n            max_negative = i;\n        } else {\n            min_positive\
    \ = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_negative),\
    \ std::optional<long>(min_positive));", "    // Write your code here\n    long\
    \ max_val = std::numeric_limits<long>::min();\n    long min_val = std::numeric_limits<long>::max();\n\
    \    for (auto i : lst) {\n        if (i < 0) {\n            max_val = i;\n  \
    \      } else if (i > 0) {\n            min_val = i;\n        }\n    }\n    return\
    \ std::make_tuple(std::optional<long>(max_val), std::optional<long>(min_val));",
  "    std::vector<long> sorted_list = lst;\n    std::sort(sorted_list.begin(), sorted_list.end());\n\
    \    long max_val = sorted_list[0];\n    long min_val = sorted_list[0];\n    for\
    \ (long i : sorted_list) {\n        if (i < 0) {\n            max_val = i;\n \
    \       } else if (i > max_val) {\n            max_val = i;\n        }\n     \
    \   if (i < 0) {\n            min_val = i;\n        } else if (i > min_val) {\n\
    \            min_val = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(max_val),\
    \ std::optional<long>(min_val));", "    // Your code here\n    long largest =\
    \ std::numeric_limits<long>::min();\n    long smallest = std::numeric_limits<long>::max();\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            largest = i;\n  \
    \      } else if (i > largest) {\n            largest = i;\n        }\n      \
    \  if (i < 0) {\n            smallest = i;\n        } else if (i > smallest) {\n\
    \            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long max_negative = std::numeric_limits<long>::min();\n\
    \    long min_positive = std::numeric_limits<long>::max();\n    for (auto i :\
    \ lst) {\n        if (i < 0) {\n            max_negative = std::max(max_negative,\
    \ i);\n        } else if (i > 0)\n            min_positive = std::min(min_positive,\
    \ i);\n    }\n    return std::make_tuple(std::optional<long>(max_negative), std::optional<long>(min_positive));",
  "    // Write your code here\n    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long largest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long largest = std::nullopt;\n\
    \    long smallest = std::nullopt;\n    for (long i : lst) {\n        if (largest\
    \ < i) {\n            largest = i;\n        }\n        if (smallest > i) {\n \
    \           smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = i;\n      \
    \  } else if (i > largest_positive) {\n            largest_positive = i;\n   \
    \     }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (auto i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    long largest_negative = std::numeric_limits<long>::min();\n\
    \    long largest_positive = std::numeric_limits<long>::max();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative < 0)\n  \
    \              largest_negative = i;\n        } else {\n            if (largest_positive\
    \ > 0)\n                largest_positive = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(largest_positive));", "    std::vector<long> sorted_lst(lst);\n\
    \    std::sort(sorted_lst.begin(), sorted_lst.end());\n    if (sorted_lst.size()\
    \ == 0) {\n        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    if (sorted_lst.size() == 1) {\n        return std::make_tuple(std::optional<long>(sorted_lst[0]),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (sorted_lst[0] < sorted_lst[1])\
    \ {\n        return std::make_tuple(std::optional<long>(sorted_lst[0]), std::optional<long>(sorted_lst[1]));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    if (lst.empty()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    auto largest = std::max_element(lst.begin(),\
    \ lst.end());\n    auto smallest = std::min_element(lst.begin(), lst.end());\n\
    \    if (largest == lst.end()) {\n        return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    }\n    if (smallest == lst.end()) {\n\
    \        return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));\n\
    \    }\n    return std::make_tuple(std::optional<long>(std::move(largest)), std::optional<long>(std::move(smallest)));",
  "    if (lst.empty()) return std::make_tuple(std::optional<long>(std::nullopt),\
    \ std::optional<long>(std::nullopt));\n    long largest = *std::max_element(lst.begin(),\
    \ lst.end());\n    long smallest = *std::min_element(lst.begin(), lst.end());\n\
    \    return std::make_tuple(std::optional<long>(std::nullopt), std::optional<long>(std::nullopt));",
  "    long largest = std::nullopt;\n    long smallest = std::nullopt;\n    for (long\
    \ i : lst) {\n        if (largest < i) {\n            largest = i;\n        }\n\
    \        if (smallest > i) {\n            smallest = i;\n        }\n    }\n  \
    \  return std::make_tuple(std::optional<long>(largest), std::optional<long>(smallest));",
  "    // Your code here\n    long largest = std::nullopt;\n    long smallest = std::nullopt;\n\
    \    for (long i : lst) {\n        if (i < 0) {\n            if (largest == std::nullopt)\
    \ {\n                largest = i;\n            } else {\n                largest\
    \ = std::nullopt;\n            }\n        } else if (i > largest) {\n        \
    \    largest = i;\n        }\n        if (i < 0) {\n            if (smallest ==\
    \ std::nullopt) {\n                smallest = i;\n            } else {\n     \
    \           smallest = std::nullopt;\n            }\n        } else if (i > smallest)\
    \ {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long a = std::numeric_limits<long>::max();\n\
    \    long b = std::numeric_limits<long>::min();\n    for (long i : lst) {\n  \
    \      if (i < 0) {\n            a = std::max(a, i);\n        } else {\n     \
    \       b = std::min(b, i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(a),\
    \ std::optional<long>(b));", "    // Write your code here\n    long largest =\
    \ std::nullopt;\n    long smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (largest < i) {\n            largest = i;\n        }\n        if (smallest\
    \ > i) {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    // Write your code here\n    long largest\
    \ = std::nullopt;\n    long smallest = std::nullopt;\n    for (long i : lst) {\n\
    \        if (largest < i) {\n            largest = i;\n        }\n        if (smallest\
    \ > i) {\n            smallest = i;\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest),\
    \ std::optional<long>(smallest));", "    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long smallest_positive = std::numeric_limits<long>::min();\n    for (auto\
    \ i : lst) {\n        if (i < 0) {\n            largest_negative = std::max<long>(largest_negative,\
    \ i);\n        } else {\n            smallest_positive = std::min<long>(smallest_positive,\
    \ i);\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));", "    long largest_negative = std::numeric_limits<long>::max();\n\
    \    long smallest_positive = std::numeric_limits<long>::min();\n    for (long\
    \ i : lst) {\n        if (i < 0) {\n            if (largest_negative > i) {\n\
    \                largest_negative = i;\n            }\n        } else {\n    \
    \        if (smallest_positive < i) {\n                smallest_positive = i;\n\
    \            }\n        }\n    }\n    return std::make_tuple(std::optional<long>(largest_negative),\
    \ std::optional<long>(smallest_positive));"]
stop_tokens:
- "\n}"
