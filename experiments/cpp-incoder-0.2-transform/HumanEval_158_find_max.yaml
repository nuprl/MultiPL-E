name: HumanEval_158_find_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a list of strings.\n// The list contains different words. Return the word with\
  \ maximum number\n// of unique characters. If multiple strings have maximum number\
  \ of unique\n// characters, return the one which comes first in lexicographical\
  \ order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>>\
  \ find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"\
  bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string>\
  \ words) {\n"
tests: "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
  cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
  footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) ==\
  \ (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
  nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"\
  this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"})))\
  \ == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
completions: ["    // Your code here\n    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    // Your code here\n    std::string max;\n  \
    \  int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string maxWord = \"\";\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            count += (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    std::string max = \"\";\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n  \
    \              count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;", "    int n = words.size();\n\
    \    int max_count = 0;\n    std::string max_word = \"\";\n    for (int i = 0;\
    \ i < n; i++) {\n        int count = 0;\n        for (int j = 0; j < n; j++) {\n\
    \            if (i == j) continue;\n            if (words[i] == words[j]) {\n\
    \                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = words[i];\n      \
    \  }\n    }\n    return max_word;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string maxWord = words[0];\n  \
    \  int maxCount = 0;\n    for (auto word : words) {\n        int count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            maxCount = count;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;", "    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (char c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Your code here\n    std::string maxWord = \"\";\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    std::string max = \"\";\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        auto count = std::count_if(word.begin(),\
    \ word.end(), [&](char c) {\n            return std::tolower(c) == std::tolower(max);\n\
    \        });\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         if (std::count(word.begin(), word.end(), c) > 0) {\n               \
    \ count++;\n            }\n        }\n        if (count > maxCount) {\n      \
    \      maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    int max = 0;\n    std::string maxWord = \"\";\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (char c : word) {\n   \
    \         count += 1;\n        }\n        if (count > max) {\n            max\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    // Write your code here\n    std::string max = \"\";\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            if (std::count(max.begin(), max.end(), c) == 0) {\n   \
    \             max = std::to_string(maxCount) + c;\n                count++;\n\
    \            }\n        }\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            max = word;\n        }\n    }\n    return max;", "   \
    \ std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n \
    \       auto count = std::count_if(word.begin(), word.end(), [](char c) {\n  \
    \          return std::isalpha(c);\n        });\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count_if(word.begin(), word.end(),\
    \ [&](char c) {\n            return std::isalpha(c);\n        });\n        if\
    \ (count > max_count) {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;"]
stop_tokens:
- "\n}"
