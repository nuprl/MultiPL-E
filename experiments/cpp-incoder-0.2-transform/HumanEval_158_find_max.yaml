name: HumanEval_158_find_max
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a list of strings.\n// The list contains different words. Return the word with\
  \ maximum number\n// of unique characters. If multiple strings have maximum number\
  \ of unique\n// characters, return the one which comes first in lexicographical\
  \ order.\n// >>> find_max((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  of\", (std::string)\"string\"})))\n// (\"string\")\n// >>> find_max((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"enam\", (std::string)\"game\"})))\n// (\"enam\")\n// >>>\
  \ find_max((std::vector<std::string>({(std::string)\"aaaaaaa\", (std::string)\"\
  bb\", (std::string)\"cc\"})))\n// (\"aaaaaaa\")\nstd::string find_max(std::vector<std::string>\
  \ words) {\n"
tests: "}\nint main() {\n    auto candidate = find_max;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  name\", (std::string)\"of\", (std::string)\"string\"}))) == (\"string\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"name\", (std::string)\"\
  enam\", (std::string)\"game\"}))) == (\"enam\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aaaaaaa\", (std::string)\"bb\", (std::string)\"cc\"}))) == (\"aaaaaaa\"));\n   \
  \ assert(candidate((std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
  cba\"}))) == (\"abc\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"this\", (std::string)\"game\", (std::string)\"of\", (std::string)\"\
  footbott\"}))) == (\"footbott\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"gonna\", (std::string)\"rock\"}))) ==\
  \ (\"gonna\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  we\", (std::string)\"are\", (std::string)\"a\", (std::string)\"mad\", (std::string)\"\
  nation\"}))) == (\"nation\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  this\", (std::string)\"is\", (std::string)\"a\", (std::string)\"prrk\"}))) == (\"\
  this\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"b\"})))\
  \ == (\"b\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  play\", (std::string)\"play\", (std::string)\"play\"}))) == (\"play\"));\n}\n"
completions: ["    // Your code here\n    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    // Your code here\n    std::string max;\n  \
    \  int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string maxWord = \"\";\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            count += (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    std::string max = \"\";\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n  \
    \              count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max = word;\n         \
    \   max_count = count;\n        }\n    }\n    return max;", "    int n = words.size();\n\
    \    int max_count = 0;\n    std::string max_word = \"\";\n    for (int i = 0;\
    \ i < n; i++) {\n        int count = 0;\n        for (int j = 0; j < n; j++) {\n\
    \            if (i == j) continue;\n            if (words[i] == words[j]) {\n\
    \                count++;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = words[i];\n      \
    \  }\n    }\n    return max_word;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string maxWord = words[0];\n  \
    \  int maxCount = 0;\n    for (auto word : words) {\n        int count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            maxCount = count;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;", "    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            count += 1;\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (char c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Your code here\n    std::string maxWord = \"\";\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    std::string max = \"\";\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        auto count = std::count_if(word.begin(),\
    \ word.end(), [&](char c) {\n            return std::tolower(c) == std::tolower(max);\n\
    \        });\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         if (std::count(word.begin(), word.end(), c) > 0) {\n               \
    \ count++;\n            }\n        }\n        if (count > maxCount) {\n      \
    \      maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    int max = 0;\n    std::string maxWord = \"\";\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (char c : word) {\n   \
    \         count += 1;\n        }\n        if (count > max) {\n            max\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    // Write your code here\n    std::string max = \"\";\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            if (std::count(max.begin(), max.end(), c) == 0) {\n   \
    \             max = std::to_string(maxCount) + c;\n                count++;\n\
    \            }\n        }\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            max = word;\n        }\n    }\n    return max;", "   \
    \ std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n \
    \       auto count = std::count_if(word.begin(), word.end(), [](char c) {\n  \
    \          return std::isalpha(c);\n        });\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count_if(word.begin(), word.end(),\
    \ [&](char c) {\n            return std::isalpha(c);\n        });\n        if\
    \ (count > max_count) {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string max;\n    int maxCount =\
    \ 0;\n    for (auto word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > max_count) {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    std::string max = \"\";\n\
    \    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string maxWord = \"\";\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += (c == 'a' || c == 'e' || c ==\
    \ 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    // Your code here\n    std::string max = \"\";\n \
    \   int maxCount = 0;\n    for (auto &i : words) {\n        int count = 0;\n \
    \       for (auto &j : i) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            max = i;\n            maxCount = count;\n       \
    \ }\n    }\n    return max;", "    std::string max;\n    int maxCount = 0;\n \
    \   for (auto word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        auto count =\
    \ std::count_if(word.begin(), word.end(), [](char c) {\n            return std::isalpha(c);\n\
    \        });\n        if (count > max_count) {\n            max = word;\n    \
    \        max_count = count;\n        }\n    }\n    return max;", "    int n =\
    \ words.size();\n    int max_count = 0;\n    std::string max_word = words[0];\n\
    \    for (int i = 1; i < n; i++) {\n        int count = 0;\n        for (auto\
    \ &w : words) {\n            if (w == words[i]) {\n                count++;\n\
    \            }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max_word = words[i];\n        }\n    }\n    return max_word;",
  "    std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        auto count = std::count_if(word.begin(), word.end(), [](char c) {\n \
    \           return std::tolower(c) != 'a';\n        });\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string max;\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max = word;\n        }\n    }\n    return max;", "    //\
    \ Your code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words) {\n        auto count = std::count(word.begin(), word.end(), 'a');\n\
    \        if(count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string maxWord = \"\"\
    ;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            maxCount = count;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;", "    //\
    \ Write your code here\n    std::string max = \"\";\n    int maxCount = 0;\n \
    \   for (auto word : words) {\n        int count = 0;\n        for (auto c : word)\
    \ {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n          \
    \      count++;\n            }\n        }\n        if (count > maxCount) {\n \
    \           maxCount = count;\n            max = word;\n        }\n    }\n   \
    \ return max;", "    std::string max;\n    int maxCount = 0;\n    for (auto word\
    \ : words) {\n        int count = 0;\n        for (auto c : word) {\n        \
    \    count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    // Your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for (auto word : words) {\n\
    \        int count = 0;\n        for (auto c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Your code here\n    std::string max;\n    int maxCount =\
    \ 0;\n    for (auto &i : words) {\n        int count = 0;\n        for (auto &j\
    \ : i) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = i;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            max = word;\n        }\n    }\n  \
    \  return max;", "    std::string maxWord = \"\";\n    int maxCount = 0;\n   \
    \ for (auto word : words) {\n        int count = 0;\n        for (auto c : word)\
    \ {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n        \
    \        count++;\n            }\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  max = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Your code here\n    std::string max = \"\";\n    int maxCount = 0;\n   \
    \ for (auto word : words) {\n        int count = 0;\n        for (auto c : word)\
    \ {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n          \
    \      count++;\n            }\n        }\n        if (count > maxCount) {\n \
    \           max = word;\n            maxCount = count;\n        }\n    }\n   \
    \ return max;", "    int n = words.size();\n    std::string max;\n    int max_count\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for\
    \ (int j = 0; j < n; j++) {\n            if (words[j].size() > words[i].size())\
    \ {\n                count += words[j].size() - words[i].size();\n           \
    \ } else {\n                count += words[i].size() - words[j].size();\n    \
    \        }\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = words[i];\n        }\n    }\n    return max;", " \
    \   // Write your code here\n    std::string max;\n    int maxCount = 0;\n   \
    \ for (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    std::string max;\n    int maxCount = 0;\n    for (auto word\
    \ : words) {\n        int count = 0;\n        for (auto c : word) {\n        \
    \    count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n  \
    \      }\n        if (count > maxCount) {\n            max = word;\n         \
    \   maxCount = count;\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        auto count =\
    \ std::count(word.begin(), word.end(), 'a');\n        if (count > max_count) {\n\
    \            max = word;\n            max_count = count;\n        }\n    }\n \
    \   return max;", "    // Write your code here\n    std::string max = \"\";\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > count) {\n                count = std::count(word.begin(), word.end(),\
    \ c);\n                max = c;\n            }\n        }\n        if (count >\
    \ maxCount) {\n            maxCount = count;\n            max = word;\n      \
    \  }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word: words) {\n        int count = 0;\n\
    \        for (auto &c: word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    int n = words.size();\n \
    \   int max_count = 0;\n    std::string max_word = words[0];\n    for (int i =\
    \ 1; i < n; i++) {\n        int count = 0;\n        for (int j = 0; j < i; j++)\
    \ {\n            count += words[j].size();\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = words[i];\n      \
    \  }\n    }\n    return max_word;", "    // Your code here\n    std::string max\
    \ = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n        auto\
    \ count = std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max = word;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     if (std::count(word.begin(), word.end(), c) > 0) {\n                count++;\n\
    \            }\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max = word;\n \
    \           max_count = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n   \
    \ for (auto word : words) {\n        int count = 0;\n        for (auto c : word)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         maxCount = count;\n            maxWord = word;\n        }\n    }\n \
    \   return maxWord;", "    // Your code here\n    int max = 0;\n    int index\
    \ = 0;\n    std::string maxWord = \"\";\n    std::string currentWord = \"\";\n\
    \    std::string currentWord2 = \"\";\n    std::string currentWord3 = \"\";\n\
    \    std::string currentWord4 = \"\";\n    std::string currentWord5 = \"\";\n\
    \    std::string currentWord6 = \"\";\n    std::string currentWord7 = \"\";\n\
    \    std::string currentWord8 = \"\";\n    std::string currentWord9 = \"\";\n\
    \    std::string currentWord10 = \"\";\n    std::string currentWord11 = \"\";\n\
    \    std::string currentWord12 = \"\";\n    std::string currentWord13 = \"\";\n\
    \    std::string currentWord14 = \"\";\n    std::string currentWord15 = \"\";\n\
    \    std::string currentWord16 = \"\";\n    std::string currentWord17 = \"\";\n\
    \    std::string currentWord18 = \"\";\n    std::string currentWord19 = \"\";\n\
    \    std::string currentWord20 = \"\";\n    std::string currentWord21 = \"\";\n\
    \    std::string currentWord22 = \"\";\n    std::string currentWord23 = \"\";\n\
    \    std::string currentWord24 = \"\";\n    std::string currentWord25 = \"\";\n\
    \    std::string currentWord26 = \"\";\n    std::string currentWord27 = \"\";\n\
    \    std::string currentWord28 = \"\";\n    std::string currentWord29 = \"\";\n\
    \    std::string currentWord30 = \"\";\n    std::string currentWord31 = \"\";\n\
    \    std::string currentWord32 = \"\";\n    std::string currentWord33 = \"\";\n\
    \    std::string currentWord34 = \"\";\n    std::string currentWord35 = \"\";\n\
    \    std::string currentWord36 = \"\";\n    std::string currentWord37 = \"\";\n\
    \    std::string currentWord38 = \"\";\n    std::string currentWord39 = \"\";\n\
    \    std::string currentWord40 = \"\";\n    std::string currentWord41 = \"\";\n\
    \    std::string currentWord42 = \"\";\n    std::string currentWord43 = \"\";\n\
    \    std::string currentWord44 = \"\";\n    std::string currentWord45 = \"\";\n\
    \    std::string currentWord46 = \"\";\n    std::string currentWord47 = \"\";\n\
    \    std::string currentWord48 = \"\";\n    std::string currentWord49 = \"\";\n\
    \    std::string currentWord50 = \"\";\n    std::string currentWord51 = \"\";\n\
    \    std::string currentWord52 = \"\";\n    std::string currentWord53 = \"\";\n\
    \    std::string currentWord54 = \"\";\n    std::string currentWord55 = \"\";\n\
    \    std::string currentWord56 = \"\";\n    std::string currentWord57 = \"\";\n\
    \    std::string currentWord58 = \"\";\n    std::string currentWord59 = \"\";\n\
    \    std::string currentWord60 = \"\";\n    std::string currentWord61 = \"\";\n\
    \    std::string currentWord62 = \"\";\n    std::string currentWord63 = \"\";\n\
    \    std::string currentWord64 = \"\";\n    std::string currentWord65 = \"\";\n\
    \    std::string currentWord66 = \"\";\n    std::string currentWord67 = \"\";\n\
    \    std::string currentWord68 = \"\";\n    std::string currentWord69", "    std::map<char,\
    \ int> m;\n    for (auto &w : words) {\n        for (auto &c : w) {\n        \
    \    m[c]++;\n        }\n    }\n    for (auto &p : m) {\n        if (p.second\
    \ > 1) {\n            return p.first;\n        }\n    }\n    return words[0];",
  "    int max = 0;\n    std::string maxWord = \"\";\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > max) {\n            max = count;\n   \
    \         maxWord = word;\n        }\n    }\n    return maxWord;", "    int max\
    \ = 0;\n    std::string maxWord = \"\";\n    for (auto &word : words) {\n    \
    \    int count = 0;\n        for (auto &c : word) {\n            count += (c ==\
    \ 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if\
    \ (count > max) {\n            max = count;\n            maxWord = word;\n   \
    \     }\n    }\n    return maxWord;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    int\
    \ max_count = 0, max_index = 0;\n    std::string max_word;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n \
    \       }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_index = word.size();\n            max_word = word;\n        }\n\
    \    }\n    return max_word;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for(auto &word: words){\n        int count = 0;\n\
    \        for(auto &c: word){\n            if(c == 'a'){\n                count++;\n\
    \            }\n        }\n        if(count > maxCount){\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > max_count) {\n            max_count = count;\n           \
    \ max = word;\n        }\n    }\n    return max;", "    // Your code here\n  \
    \  std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Write\
    \ your code here\n    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &i : words) {\n        auto count = std::count(i.begin(), i.end(), 'a');\n\
    \        if (count > max_count) {\n            max_count = count;\n          \
    \  max = i;\n        }\n    }\n    return max;", "    std::map<int, std::string>\
    \ m;\n    for (auto &w : words) {\n        auto it = m.find(w.size());\n     \
    \   if (it == m.end()) {\n            it = m.emplace(w.size(), w).first;\n   \
    \     }\n    }\n    return m[m.rbegin()->first];", "    // Your code here\n  \
    \  std::string max;\n    int maxCount = 0;\n    for (auto &word : words) {\n \
    \       int count = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > max_count) {\n            max_count = count;\n           \
    \ max = word;\n        }\n    }\n    return max;", "    std::map<char, int> m;\n\
    \    for (auto &w : words) {\n        for (auto &c : w) {\n            m[c]++;\n\
    \        }\n    }\n    for (auto &c : m) {\n        if (m[c] == 1) {\n       \
    \     return c;\n        }\n    }\n    return words[0];", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        auto count =\
    \ std::count(word.begin(), word.end(), 'a');\n        if (count > max_count) {\n\
    \            max = word;\n            max_count = count;\n        }\n    }\n \
    \   return max;", "    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        auto count = std::count_if(word.begin(), word.end(),\
    \ [&](char c) {\n            return std::tolower(c) != 'a';\n        });\n   \
    \     if (count > maxCount) {\n            max = word;\n            maxCount =\
    \ count;\n        }\n    }\n    return max;", "    std::string max = \"\";\n \
    \   int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max_count) {\n            max_count = count;\n            max = word;\n\
    \        }\n    }\n    return max;", "    int max_count = 0, max_index = 0;\n\
    \    for (size_t i = 0; i < words.size(); i++) {\n        int count = 0;\n   \
    \     for (size_t j = 0; j < words[i].size(); j++) {\n            if (words[i][j]\
    \ == words[i][j]) {\n                count++;\n            }\n        }\n    \
    \    if (count > max_count) {\n            max_count = count;\n            max_index\
    \ = i;\n        }\n    }\n    return words[max_index];", "    // Write your code\
    \ here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = 0;\n        for (auto c : word) {\n   \
    \         count += 1;\n        }\n        if (count > maxCount) {\n          \
    \  maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    // Your code here\n    std::string max;\n    int maxCount =\
    \ 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           if (std::count(word.begin(), word.end(), c) > 0) {\n             \
    \   count++;\n            }\n        }\n        if (count > maxCount) {\n    \
    \        max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    std::string maxWord = \"\";\n    int maxCount = 0;\n    for (auto\
    \ word : words) {\n        int count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    // Your code here\n  \
    \  std::string max;\n    int maxCount = 0;\n    for (auto word : words) {\n  \
    \      int count = 0;\n        for (auto c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;", "    std::map<char,\
    \ int> m;\n    for (auto &word : words) {\n        for (auto &c : word) {\n  \
    \          m[c]++;\n        }\n    }\n    for (auto &c : m) {\n        if (m[c]\
    \ > 1) {\n            return words[m.find(c)->second];\n        }\n    }\n   \
    \ return words[0];", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > max_count) {\n       \
    \     max_count = count;\n            max = word;\n        }\n    }\n    return\
    \ max;", "    std::string max;\n    int maxCount = 0;\n    for (auto word : words)\
    \ {\n        int count = std::count(word.begin(), word.end(), 'a');\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string maxWord = \"\";\n    int\
    \ maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n     \
    \   for (auto c : word) {\n            count += 1;\n        }\n        if (count\
    \ > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    int max_count = 0;\n    std::string\
    \ max_word = \"\";\n    for (auto &word : words) {\n        int count = 0;\n \
    \       for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max_count) {\n            max_count = count;\n            max_word\
    \ = word;\n        }\n    }\n    return max_word;", "    // Write your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for (auto word : words) {\n\
    \        int count = 0;\n        for (auto c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            max = word;\n       \
    \     maxCount = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for(auto &word:\
    \ words) {\n        std::sort(word.begin(), word.end());\n        std::unique_copy(word.begin(),\
    \ word.end(), std::back_inserter(max));\n        maxCount = std::count(max.begin(),\
    \ max.end(), ' ');\n    }\n    if(maxCount > 1) {\n        std::sort(max.begin(),\
    \ max.end());\n    }\n    return max;", "    std::string maxWord = \"\";\n   \
    \ int maxCount = 0;\n    for (auto word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            maxCount = count;\n\
    \            maxWord = word;\n        }\n    }\n    return maxWord;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += (c == 'a' || c ==\
    \ 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    std::map<char, int> m;\n    for (auto &word : words) {\n\
    \        for (auto &c : word) {\n            m[c]++;\n        }\n    }\n    for\
    \ (auto &p : m) {\n        if (p.second > 1) {\n            return words[m.begin()->first];\n\
    \        }\n    }\n    return words[0];", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    int max = 0;\n    std::string\
    \ maxWord = \"\";\n    for (auto word : words) {\n        int count = 0;\n   \
    \     for (auto c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > count) {\n                count = std::count(word.begin(), word.end(),\
    \ c);\n            }\n        }\n        if (count > max) {\n            max =\
    \ count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    // Your code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            maxCount = count;\n            maxWord = word;\n        }\n    }\n\
    \    return maxWord;", "    // Your code here\n    std::string maxWord = \"\"\
    ;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > count) {\n                count = std::count(word.begin(), word.end(),\
    \ c);\n            }\n        }\n        if (count > maxCount) {\n           \
    \ maxCount = count;\n            maxWord = word;\n        }\n    }\n    return\
    \ maxWord;", "    std::map<char, int> m;\n    for (auto &word : words) {\n   \
    \     for (auto &c : word) {\n            m[c] += 1;\n        }\n    }\n    for\
    \ (auto &p : m) {\n        if (p.second > 1) {\n            return p.first;\n\
    \        }\n    }\n    return words[0];", "    std::string max = \"\";\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            if (std::count(max.begin(), max.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = word;\n  \
    \      }\n    }\n    return max;", "    std::string max;\n    int max_count =\
    \ 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max = word;\n        }\n    }\n\
    \    return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &w : words) {\n        auto count = std::count(w.begin(), w.end(), 'a');\n\
    \        if (count > max_count) {\n            max = w;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string maxWord = \"\"\
    ;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            if (std::count(word.begin(), word.end(),\
    \ c) > 0) {\n                count++;\n            }\n        }\n        if (count\
    \ > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    int max = 0;\n    std::string maxWord\
    \ = \"\";\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max) {\n            max = count;\n  \
    \          maxWord = word;\n        }\n    }\n    return maxWord;", "    std::string\
    \ max;\n    int max_count = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > max_count) {\n            max_count = count;\n           \
    \ max = word;\n        }\n    }\n    return max;", "    std::string max;\n   \
    \ int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += (c == 'a' || c == 'e' ||\
    \ c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string maxWord = \"\";\n \
    \   int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max;\n    int max_count = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > max_count) {\n            max_count\
    \ = count;\n            max = word;\n        }\n    }\n    return max;", "   \
    \ std::string max;\n    int maxCount = 0;\n    for (auto word : words) {\n   \
    \     int count = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = word;\n  \
    \      }\n    }\n    return max;", "    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    // Your code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        auto count = std::count_if(word.begin(),\
    \ word.end(), [&](char c) {\n            return std::tolower(c) != 'a';\n    \
    \    });\n        if (count > maxCount) {\n            maxCount = count;\n   \
    \         maxWord = word;\n        }\n    }\n    return maxWord;", "    // Write\
    \ your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        std::set<char> chars;\n        for (char c : word) {\n \
    \           chars.insert(c);\n        }\n        int count = chars.size();\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    int max_count = 0;\n \
    \   std::string max_word;\n    for (auto word : words) {\n        int count =\
    \ 0;\n        for (char c : word) {\n            count += (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_word = word;\n        }\n\
    \    }\n    return max_word;", "    std::map<char, int> m;\n    for (auto &w :\
    \ words) {\n        for (auto &c : w) {\n            m[c]++;\n        }\n    }\n\
    \    for (auto &p : m) {\n        if (p.second > 1) {\n            return p.first;\n\
    \        }\n    }\n    return words[0];", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    std::string max;\n   \
    \ int max_count = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max = word;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            count += 1;\n        }\n  \
    \      if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &word : words) {\n        int count\
    \ = 0;\n        for (auto &c : word) {\n            count += 1;\n        }\n \
    \       if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            maxCount = count;\n \
    \           maxWord = word;\n        }\n    }\n    return maxWord;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        auto count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string maxWord = \"\"\
    ;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto &w : words) {\n        int count\
    \ = 0;\n        for (auto &c : w) {\n            count += 1;\n        }\n    \
    \    if (count > maxCount) {\n            max = w;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::string max = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u');\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    std::string max = \"\";\n    int max_count = 0;\n    for (auto &word : words)\
    \ {\n        auto count = std::count(word.begin(), word.end(), 'a');\n       \
    \ if (count > max_count) {\n            max_count = count;\n            max =\
    \ word;\n        }\n    }\n    return max;", "    std::map<char, int> m;\n   \
    \ for (auto &w : words) {\n        std::map<char, int>::iterator it = m.find(w[0]);\n\
    \        if (it == m.end()) {\n            m[w[0]] = 1;\n        } else {\n  \
    \          it->second++;\n        }\n    }\n    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &it : m) {\n        if (it.second > max_count) {\n     \
    \       max = it.first;\n            max_count = it.second;\n        }\n    }\n\
    \    return max;", "    // Your code here\n    std::string max;\n    int maxCount\
    \ = 0;\n    for (auto &word : words) {\n        int count = 0;\n        for (auto\
    \ &c : word) {\n            count += 1;\n        }\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    // Write your code here\n    std::string maxWord = \"\"\
    ;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count = 0;\n\
    \        for (auto c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            maxCount = count;\n            maxWord = word;\n\
    \        }\n    }\n    return maxWord;", "    int max = 0;\n    int index = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += 1;\n        }\n        if (count > max) {\n\
    \            max = count;\n            index = words.size() - 1;\n        }\n\
    \    }\n    return words[index];", "    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ std::count(word.begin(), word.end(), c);\n        }\n        if (count > max_count)\
    \ {\n            max = word;\n            max_count = count;\n        }\n    }\n\
    \    return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count_if(word.begin(), word.end(),\
    \ [](char c) {\n            return std::isalpha(c);\n        });\n        if (count\
    \ > max_count) {\n            max = word;\n            max_count = count;\n  \
    \      }\n    }\n    return max;", "    // Write your code here\n    std::string\
    \ max;\n    std::string maxCount;\n    int maxCountCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCountCount) {\n         \
    \   maxCount = word;\n            maxCountCount = count;\n        }\n    }\n \
    \   return maxCount;", "    // Your code here\n    std::string max = \"\";\n \
    \   int maxCount = 0;\n    for (auto &i : words) {\n        auto count = std::count(i.begin(),\
    \ i.end(), 'a');\n        if (count > maxCount) {\n            max = i;\n    \
    \        maxCount = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max;\n    int maxCount = 0;\n    for (auto &i : words)\
    \ {\n        auto it = std::find(i.begin(), i.end(), 'a');\n        if (it !=\
    \ i.end()) {\n            maxCount = std::max(maxCount, std::count(i.begin(),\
    \ it, 'a'));\n        }\n    }\n    if (maxCount > 1) {\n        max = words[std::distance(words.begin(),\
    \ std::max_element(words.begin(), words.end(), [](std::string a, std::string b)\
    \ { return a.size() < b.size(); }))];\n    }\n    return max;", "    std::string\
    \ max = \"\";\n    int max_count = 0;\n    for (auto &word : words) {\n      \
    \  auto count = std::count(word.begin(), word.end(), 'a');\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = word;\n  \
    \      }\n    }\n    return max;", "    // Your code here\n    int max = 0;\n\
    \    int max_index = 0;\n    int count = 0;\n    std::string maxWord = \"\";\n\
    \    for (int i = 0; i < words.size(); i++) {\n        std::string word = words[i];\n\
    \        for (int j = 0; j < word.length(); j++) {\n            count++;\n   \
    \         if (count > max) {\n                max = count;\n                max_index\
    \ = i;\n                maxWord = word;\n            }\n        }\n    }\n   \
    \ return maxWord;", "    int n = words.size();\n    int max = 0;\n    int max_index\
    \ = 0;\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for\
    \ (int j = 0; j < n; j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            if (words[i].size() > words[j].size()) {\n       \
    \         count = words[i].size() - words[j].size();\n            } else {\n \
    \               count = words[j].size() - words[i].size();\n            }\n  \
    \          if (count > max) {\n                max = count;\n                max_index\
    \ = i;\n            }\n        }\n    }\n    return words[max_index];", "    //\
    \ Your code here\n    std::string maxWord = \"\";\n    int maxCount = 0;\n   \
    \ for (auto word : words) {\n        int count = 0;\n        for (auto c : word)\
    \ {\n            count += 1;\n        }\n        if (count > maxCount) {\n   \
    \         maxCount = count;\n            maxWord = word;\n        }\n    }\n \
    \   return maxWord;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n\
    \        }\n        if (count > max_count) {\n            max = word;\n      \
    \      max_count = count;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word: words)\
    \ {\n        auto count = std::count(word.begin(), word.end(), 'a');\n       \
    \ if (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    std::map<char, int> m;\n    for (auto\
    \ &w : words) {\n        for (auto &c : w) {\n            m[c]++;\n        }\n\
    \    }\n    std::string max;\n    for (auto &c : m) {\n        if (m[c] > 1) {\n\
    \            max = c;\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &word : words) {\n        auto count =\
    \ std::count(word.begin(), word.end(), 'a');\n        if (count > max_count) {\n\
    \            max = word;\n            max_count = count;\n        }\n    }\n \
    \   return max;", "    std::string max;\n    int max_count = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > max_count) {\n            max_count = count;\n  \
    \          max = word;\n        }\n    }\n    return max;", "    // Your code\
    \ here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n \
    \       }\n        if (count > maxCount) {\n            max = word;\n        \
    \    maxCount = count;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Write your code here\n    std::string max = \"\";\n    int maxCount = 0;\n\
    \    for (auto &word : words) {\n        int count = 0;\n        for (auto &c\
    \ : word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > maxCount) {\n            max =\
    \ word;\n            maxCount = count;\n        }\n    }\n    return max;", " \
    \   std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max = word;\n        }\n    }\n    return max;", "    // Write your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        auto count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n       \
    \ int count = 0;\n        for (auto &c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            maxCount = count;\n \
    \           maxWord = word;\n        }\n    }\n    return maxWord;", "    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            count += 1;\n        }\n  \
    \      if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n    \
    \    for (auto &c : word) {\n            count += tolower(c) - 'a';\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = word;\n  \
    \      }\n    }\n    return max;", "    std::string max;\n    int max_count =\
    \ 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max = word;\n        }\n    }\n    return max;", "    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n        int\
    \ count = 0;\n        for (auto c : word) {\n            count += (c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n        if (count\
    \ > maxCount) {\n            max = word;\n            maxCount = count;\n    \
    \    }\n    }\n    return max;", "    std::string maxWord = \"\";\n    int maxCount\
    \ = 0;\n    for (auto word : words) {\n        int count = 0;\n        for (auto\
    \ c : word) {\n            if (std::count(word.begin(), word.end(), c) > 0) {\n\
    \                count++;\n            }\n        }\n        if (count > maxCount)\
    \ {\n            maxCount = count;\n            maxWord = word;\n        }\n \
    \   }\n    return maxWord;", "    std::map<char, int> m;\n    for (auto &word\
    \ : words) {\n        for (auto &c : word) {\n            m[c] += 1;\n       \
    \ }\n    }\n    std::string max;\n    for (auto &c : m) {\n        if (m[c] >\
    \ m[max]) {\n            max = c;\n        }\n    }\n    return max;", "    //\
    \ Your code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for\
    \ (auto &w : words) {\n        int count = 0;\n        for (auto &c : w) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = w;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    std::string maxWord = words[0];\n    int maxCount = 0;\n    for (auto word\
    \ : words) {\n        int count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    std::string max;\n   \
    \ int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            ++count;\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = word;\n  \
    \      }\n    }\n    return max;", "    // Your code here\n    std::string max\
    \ = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n        auto\
    \ count = std::count(word.begin(), word.end(), 'a');\n        if (count > maxCount)\
    \ {\n            max = word;\n            maxCount = count;\n        }\n    }\n\
    \    return max;", "    int max = 0;\n    std::string maxWord = \"\";\n    for\
    \ (auto word : words) {\n        int uniqueChars = 0;\n        for (auto c : word)\
    \ {\n            uniqueChars += std::count(word.begin(), word.end(), c);\n   \
    \     }\n        if (uniqueChars > max) {\n            max = uniqueChars;\n  \
    \          maxWord = word;\n        }\n    }\n    return maxWord;", "    // Your\
    \ code here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word\
    \ : words) {\n        int count = 0;\n        for (auto &c : word) {\n       \
    \     count += 1;\n        }\n        if (count > maxCount) {\n            max\
    \ = word;\n            maxCount = count;\n        }\n    }\n    return max;",
  "    // Your code here\n    std::string max = \"\";\n    int maxCount = 0;\n   \
    \ for (auto word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;", "    // Write your code\
    \ here\n    std::string max;\n    int maxCount = 0;\n    for (auto &word : words)\
    \ {\n        std::unordered_map<char, int> charCount;\n        for (char c : word)\
    \ {\n            charCount[c]++;\n        }\n        int count = charCount.size();\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for (auto word : words) {\n        int count\
    \ = 0;\n        for (auto c : word) {\n            count += 1;\n        }\n  \
    \      if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    // Your code here\n    std::string\
    \ max;\n    int maxCount = 0;\n    for(auto &word: words) {\n        std::unordered_map<char,\
    \ int> charCount;\n        for(char c: word) {\n            charCount[c]++;\n\
    \        }\n        for(auto &c: charCount) {\n            if(c[1] > maxCount)\
    \ {\n                max = word;\n                maxCount = c[1];\n         \
    \   }\n        }\n    }\n    return max;", "    std::map<int, std::string> m;\n\
    \    for (auto &word : words) {\n        auto it = m.find(word.length());\n  \
    \      if (it != m.end()) {\n            auto &s = it->second;\n            s\
    \ += word;\n            m[word.length()] = s;\n        } else {\n            m[word.length()]\
    \ = word;\n        }\n    }\n    auto it = m.begin();\n    std::string max;\n\
    \    for (auto &s : m) {\n        if (s.second > max) {\n            max = s.second;\n\
    \        }\n    }\n    return it->second;", "    // Your code here\n    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto &word : words) {\n   \
    \     int count = 0;\n        for (auto &c : word) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            maxCount = count;\n \
    \           maxWord = word;\n        }\n    }\n    return maxWord;", "    int\
    \ max_count = 0;\n    std::string max_word;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ 1;\n        }\n        if (count > max_count) {\n            max_count = count;\n\
    \            max_word = word;\n        }\n    }\n    return max_word;", "    //\
    \ Write your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    // Your code here\n    std::string max;\n    int maxCount = 0;\n\
    \    for (auto word : words) {\n        int count = 0;\n        for (auto c :\
    \ word) {\n            count += 1;\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    std::string max = \"\";\n    int max_count = 0;\n    for\
    \ (auto &word : words) {\n        int count = 0;\n        for (auto &c : word)\
    \ {\n            if (std::count(max.begin(), max.end(), c) > 0) {\n          \
    \      count++;\n            }\n        }\n        if (count > max_count) {\n\
    \            max_count = count;\n            max = word;\n        }\n    }\n \
    \   return max;", "    std::string maxWord = \"\";\n    int maxCount = 0;\n  \
    \  for (auto &word : words) {\n        int count = 0;\n        for (auto &c :\
    \ word) {\n            count += (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u');\n        }\n        if (count > maxCount) {\n            maxCount\
    \ = count;\n            maxWord = word;\n        }\n    }\n    return maxWord;",
  "    std::string max;\n    int max_count = 0;\n    for (auto &word : words) {\n\
    \        int count = 0;\n        for (auto &c : word) {\n            count +=\
    \ (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u');\n        }\n   \
    \     if (count > max_count) {\n            max_count = count;\n            max\
    \ = word;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n   \
    \     for (auto &c : word) {\n            count += 1;\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = word;\n  \
    \      }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > maxCount) {\n            max = word;\n            maxCount = count;\n\
    \        }\n    }\n    return max;", "    // Your code here\n    std::string max;\n\
    \    int maxCount = 0;\n    for (auto &word: words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > maxCount) {\n            max = word;\n\
    \            maxCount = count;\n        }\n    }\n    return max;", "    // Your\
    \ code here\n    std::string max = \"\";\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    maxCount = count;\n            max = word;\n        }\n    }\n    return\
    \ max;", "    std::string max;\n    int max_count = 0;\n    for (auto &word :\
    \ words) {\n        auto count = std::count(word.begin(), word.end(), 'a');\n\
    \        if (count > max_count) {\n            max = word;\n            max_count\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &w : words) {\n        int count = 0;\n      \
    \  for (auto &c : w) {\n            count += 1;\n        }\n        if (count\
    \ > max_count) {\n            max = w;\n            max_count = count;\n     \
    \   }\n    }\n    return max;", "    std::string max = \"\";\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max = word;\n        }\n    }\n    return max;", "    //\
    \ Write your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        auto count = std::count(word.begin(), word.end(),\
    \ 'a');\n        if (count > maxCount) {\n            max = word;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;", "    // Your code here\n\
    \    std::string max;\n    int maxCount = 0;\n    for (auto word : words) {\n\
    \        int count = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > count) {\n                count = std::count(word.begin(),\
    \ word.end(), c);\n            }\n        }\n        if (count > maxCount) {\n\
    \            max = word;\n            maxCount = count;\n        }\n    }\n  \
    \  return max;", "    int n = words.size();\n    int max_count = 0;\n    int max_index\
    \ = -1;\n    for (int i = 0; i < n; i++) {\n        int count = 0;\n        for\
    \ (int j = 0; j < n; j++) {\n            if (i == j) {\n                continue;\n\
    \            }\n            if (words[i].size() > words[j].size()) {\n       \
    \         count += 1;\n            }\n        }\n        if (count > max_count)\
    \ {\n            max_count = count;\n            max_index = i;\n        }\n \
    \   }\n    return words[max_index];", "    std::string max;\n    int max_count\
    \ = 0;\n    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    int\
    \ max_count = 0;\n    std::string max_word = \"\";\n    for (auto &word : words)\
    \ {\n        int count = 0;\n        for (auto &c : word) {\n            count\
    \ += 1;\n        }\n        if (count > max_count) {\n            max_count =\
    \ count;\n            max_word = word;\n        }\n    }\n    return max_word;",
  "    // Your code here\n    std::string max;\n    int maxCount = 0;\n    for (auto\
    \ &word : words) {\n        int count = 0;\n        for (auto &c : word) {\n \
    \           count += 1;\n        }\n        if (count > maxCount) {\n        \
    \    max = word;\n            maxCount = count;\n        }\n    }\n    return\
    \ max;", "    std::string max;\n    int maxCount = 0;\n    for (auto word : words)\
    \ {\n        int count = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            max = word;\n            maxCount\
    \ = count;\n        }\n    }\n    return max;", "    std::string max;\n    int\
    \ max_count = 0;\n    for (auto &w : words) {\n        auto count = std::count(w.begin(),\
    \ w.end(), 'a');\n        if (count > max_count) {\n            max = w;\n   \
    \         max_count = count;\n        }\n    }\n    return max;", "    int max\
    \ = 0;\n    std::string maxWord = \"\";\n    for (auto word : words) {\n     \
    \   int count = 0;\n        for (auto c : word) {\n            count += 1;\n \
    \       }\n        if (count > max) {\n            max = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    // Your code here\n  \
    \  std::string max = \"\";\n    int maxCount = 0;\n    for (auto &i : words) {\n\
    \        int count = 0;\n        for (auto &j : i) {\n            count += 1;\n\
    \        }\n        if (count > maxCount) {\n            max = i;\n          \
    \  maxCount = count;\n        }\n    }\n    return max;", "    std::string max;\n\
    \    int max_count = 0;\n    for (auto &w : words) {\n        int count = 0;\n\
    \        for (auto &c : w) {\n            count += 1;\n        }\n        if (count\
    \ > max_count) {\n            max_count = count;\n            max = w;\n     \
    \   }\n    }\n    return max;", "    std::string max;\n    int max_count = 0;\n\
    \    for (auto &word : words) {\n        auto count = std::count(word.begin(),\
    \ word.end(), 'a');\n        if (count > max_count) {\n            max = word;\n\
    \            max_count = count;\n        }\n    }\n    return max;", "    std::string\
    \ maxWord = \"\";\n    int maxCount = 0;\n    for (auto word : words) {\n    \
    \    int count = 0;\n        for (auto c : word) {\n            if (std::count(word.begin(),\
    \ word.end(), c) > 0) {\n                count++;\n            }\n        }\n\
    \        if (count > maxCount) {\n            maxCount = count;\n            maxWord\
    \ = word;\n        }\n    }\n    return maxWord;", "    std::string max;\n   \
    \ int max_count = 0;\n    for (auto &word : words) {\n        int count = 0;\n\
    \        for (auto &c : word) {\n            count += 1;\n        }\n        if\
    \ (count > max_count) {\n            max = word;\n            max_count = count;\n\
    \        }\n    }\n    return max;"]
stop_tokens:
- "\n}"
