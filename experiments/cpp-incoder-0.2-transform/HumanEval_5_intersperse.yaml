name: HumanEval_5_intersperse
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Insert a number 'delimeter'\
  \ between every two consecutive elements of input list `numbers'\n// >>> intersperse((std::vector<long>()),\
  \ (4))\n// (std::vector<long>())\n// >>> intersperse((std::vector<long>({(long)1,\
  \ (long)2, (long)3})), (4))\n// (std::vector<long>({(long)1, (long)4, (long)2, (long)4,\
  \ (long)3}))\nstd::vector<long> intersperse(std::vector<long> numbers, long delimeter)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = intersperse;\n    assert(candidate((std::vector<long>()),\
  \ (7)) == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)6, (long)3, (long)2})), (8)) == (std::vector<long>({(long)5, (long)8, (long)6,\
  \ (long)8, (long)3, (long)8, (long)2})));\n    assert(candidate((std::vector<long>({(long)2,\
  \ (long)2, (long)2})), (2)) == (std::vector<long>({(long)2, (long)2, (long)2, (long)2,\
  \ (long)2})));\n}\n"
completions: ["    std::vector<long> result;\n    long temp = 0;\n    for (long i\
    \ = 0; i < numbers.size(); i++) {\n        temp = temp + numbers[i];\n       \
    \ if (i != numbers.size() - 1) {\n            result.push_back(temp);\n      \
    \      temp = 0;\n        }\n    }\n    if (temp != 0) {\n        result.push_back(temp);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for (auto &number\
    \ : numbers) {\n        result.push_back(number);\n        result.push_back(delimeter);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    for (long i =\
    \ 0; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n     \
    \   if (i != numbers.size() - 1) {\n            result.push_back(delimeter);\n\
    \        }\n    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1, j = numbers.size(); i <= j; i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long last = 0;\n    for (long i = 0; i < numbers.size(); i++) {\n\
    \        if (i != 0) {\n            result.push_back(last);\n        }\n     \
    \   last = numbers[i];\n        result.push_back(last);\n    }\n    if (result.size()\
    \ % 2 != 0) {\n        result.push_back(last);\n    }\n    return result;", " \
    \   std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (long\
    \ i = 1; i < numbers.size(); i++) {\n        result.push_back(delimeter);\n  \
    \      result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(numbers[0]);\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers.front());\n\
    \    for (long i = numbers.size(); i > 0; i -= 2) {\n        result.push_back(delimeter);\n\
    \        result.push_back(numbers.at(i));\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(numbers[0]);\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n\
    \        result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(numbers[0]);\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        result.push_back(numbers[i]);\n        result.push_back(delimeter);\n\
    \        result.push_back(numbers[i]);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    long size = numbers.size();\n    long i = 0;\n    while (i < size)\
    \ {\n        result.push_back(numbers[i]);\n        i += 1;\n        if (i < size)\
    \ {\n            result.push_back(delimeter);\n        }\n    }\n    return result;",
  "    std::vector<long> result;\n    result.push_back(numbers[0]);\n    for (size_t\
    \ i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n \
    \       result.push_back(delimeter);\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(numbers[0]);\n    for (long i = 1, n = numbers.size();\
    \ i < n; ++i) {\n        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n    }\n    return result;", "    std::vector<long>\
    \ result;\n    result.push_back(numbers[0]);\n    for (long i = 1; i < numbers.size();\
    \ i++) {\n        result.push_back(delimeter);\n        result.push_back(numbers[i]);\n\
    \    }\n    return result;", "    std::vector<long> result;\n    result.push_back(numbers[0]);\n\
    \    for (long i = 1; i < numbers.size(); i++) {\n        result.push_back(numbers[i]);\n\
    \        result.push_back(delimeter);\n    }\n    return result;"]
stop_tokens:
- "\n}"
