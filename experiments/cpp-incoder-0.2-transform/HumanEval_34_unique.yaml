name: HumanEval_34_unique
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return sorted unique elements\
  \ in a list\n// >>> unique((std::vector<long>({(long)5, (long)3, (long)5, (long)2,\
  \ (long)3, (long)3, (long)9, (long)0, (long)123})))\n// (std::vector<long>({(long)0,\
  \ (long)2, (long)3, (long)5, (long)9, (long)123}))\nstd::vector<long> unique(std::vector<long>\
  \ l) {\n"
tests: "}\nint main() {\n    auto candidate = unique;\n    assert(candidate((std::vector<long>({(long)5,\
  \ (long)3, (long)5, (long)2, (long)3, (long)3, (long)9, (long)0, (long)123}))) ==\
  \ (std::vector<long>({(long)0, (long)2, (long)3, (long)5, (long)9, (long)123})));\n\
  }\n"
completions: ["    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for(auto\
    \ it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() || it != u.begin())\
    \ {\n            u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty()\
    \ || *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto i = l.begin(); i != l.end(); ++i) {\n        u.push_back(*i);\n\
    \    }\n    return u;", "    std::vector<long> u;\n    for(auto i : l) {\n   \
    \     auto it = std::find(u.begin(), u.end(), i);\n        if(it != u.end()) {\n\
    \            u.erase(it);\n        } else {\n            u.push_back(i);\n   \
    \     }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty()\
    \ || *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.size() == 0\
    \ || u[u.size() - 1] != *it) {\n            u.push_back(*it);\n        }\n   \
    \ }\n    return u;", "    std::vector<long> u;\n    for(long i = 0; i < l.size();\
    \ i++) {\n        for(long j = i + 1; j < l.size(); j++) {\n            if(l[i]\
    \ < l[j]) {\n                std::swap(l[i], l[j]);\n            }\n        }\n\
    \        u.push_back(l[i]);\n    }\n    return u;", "    std::vector<long> u;\n\
    \    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty()\
    \ || *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty() ||\
    \ it != u.end() && *it != *(u+1))\n            u.push_back(*it);\n    }\n    return\
    \ u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n    for\
    \ (long i : l) {\n        if (u.size() == 0 || i != u[u.size() - 1]) {\n     \
    \       u.push_back(i);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (auto it = l.begin(); it !=\
    \ l.end(); ++it) {\n        if (u.empty() || *it != *u.back()) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for (auto it = l.begin(); it !=\
    \ l.end(); ++it) {\n        if (u.empty() || *it != *u.back()) {\n           \
    \ u.push_back(*it);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto i = l.begin(); i != l.end();\
    \ ++i) {\n        if(u.empty() || (*i) != (*u.back())) {\n            u.push_back(*i);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(long i = 0; i < l.size(); ++i) {\n        if(l[i] != i) {\n\
    \            u.push_back(l[i]);\n        }\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        u.push_back(*it);\n    }\n    return u;", "    std::vector<long>\
    \ u;\n    std::sort(l.begin(), l.end());\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(u.empty() || *it != *u.back()) {\n            u.push_back(*it);\n\
    \        }\n    }\n    return u;", "    std::vector<long> u;\n    std::sort(l.begin(),\
    \ l.end());\n    for(auto it = l.begin(); it != l.end(); ++it) {\n        if(u.empty()\
    \ || *it != *u.back()) {\n            u.push_back(*it);\n        }\n    }\n  \
    \  return u;", "    std::vector<long> u;\n    std::sort(l.begin(), l.end());\n\
    \    for (auto it = l.begin(); it != l.end(); ++it) {\n        if (it != l.begin())\
    \ {\n            if (*it != *std::prev(it)) {\n                u.push_back(*it);\n\
    \            }\n        }\n    }\n    return u;"]
stop_tokens:
- "\n}"
