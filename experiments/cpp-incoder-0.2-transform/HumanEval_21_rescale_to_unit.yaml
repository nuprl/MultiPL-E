name: HumanEval_21_rescale_to_unit
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given list of numbers (of\
  \ at least two elements), apply a linear transform to that list,\n// such that the\
  \ smallest number will become 0 and the largest will become 1\n// >>> rescale_to_unit((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0, (float)4.0, (float)5.0})))\n// (std::vector<float>({(float)0.0,\
  \ (float)0.25, (float)0.5, (float)0.75, (float)1.0}))\nstd::vector<float> rescale_to_unit(std::vector<float>\
  \ numbers) {\n"
tests: "}\nint main() {\n    auto candidate = rescale_to_unit;\n    assert(candidate((std::vector<float>({(float)2.0,\
  \ (float)49.9}))) == (std::vector<float>({(float)0.0, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)100.0,\
  \ (float)49.9}))) == (std::vector<float>({(float)1.0, (float)0.0})));\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (std::vector<float>({(float)0.0,\
  \ (float)0.25, (float)0.5, (float)0.75, (float)1.0})));\n    assert(candidate((std::vector<float>({(float)2.0,\
  \ (float)1.0, (float)5.0, (float)3.0, (float)4.0}))) == (std::vector<float>({(float)0.25,\
  \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n    assert(candidate((std::vector<float>({(float)12.0,\
  \ (float)11.0, (float)15.0, (float)13.0, (float)14.0}))) == (std::vector<float>({(float)0.25,\
  \ (float)0.0, (float)1.0, (float)0.5, (float)0.75})));\n}\n"
completions: ["    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ - min_number);\n        rescaled_numbers.push_back(number / max_number);\n \
    \   }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (float number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(number - smallest_number);\n    }\n    rescaled_numbers.push_back(1.0f\
    \ - largest_number);\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.size());\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (auto\
    \ number : numbers) {\n        min_number = std::min(min_number, number);\n  \
    \      max_number = std::max(max_number, number);\n    }\n    float scale = max_number\
    \ - min_number;\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ result;\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        if (number < min) min = number;\n        if (number\
    \ > max) max = number;\n    }\n    float scale = (max - min) / (numbers.size()\
    \ - 1);\n    for (auto number : numbers) {\n        result.push_back(number *\
    \ scale);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n   \
    \ std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (float number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * scale);\n \
    \   }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ new_numbers;\n    new_numbers.reserve(numbers.size());\n    float min_number\
    \ = numbers[0];\n    float max_number = numbers[0];\n    for (float number : numbers)\
    \ {\n        min_number = std::min(min_number, number);\n        max_number =\
    \ std::max(max_number, number);\n    }\n    for (float number : numbers) {\n \
    \       new_numbers.push_back(number - min_number);\n        new_numbers.push_back(number\
    \ / max_number);\n    }\n    return new_numbers;", "    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = numbers[0];\n    float max_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        min_number = std::min(min_number, number);\n\
    \        max_number = std::max(max_number, number);\n    }\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(number - min_number);\n   \
    \ }\n    rescaled_numbers.push_back(max_number - min_number);\n    return rescaled_numbers;",
  "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = max - min;\n    std::vector<float> result;\n    for (auto n\
    \ : numbers) {\n        result.push_back((n - min) / scale);\n    }\n    return\
    \ result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.front());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ result;\n    float smallest_number = numbers[0];\n    float largest_number =\
    \ numbers[0];\n    for (auto number : numbers) {\n        if (number < smallest_number)\
    \ {\n            smallest_number = number;\n        }\n        if (number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    float scale =\
    \ 1.0f / (largest_number - smallest_number);\n    for (auto number : numbers)\
    \ {\n        result.push_back(smallest_number + (number * scale));\n    }\n  \
    \  return result;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (auto number : numbers) {\n        min_number = std::min(min_number,\
    \ number);\n        max_number = std::max(max_number, number);\n        rescaled_numbers.push_back(number\
    \ * (max_number - min_number) / (max_number + min_number));\n    }\n    return\
    \ rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : numbers) {\n \
    \       rescaled_numbers.push_back(std::min(std::max(number, min_number), max_number));\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.size());\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ new_numbers;\n    new_numbers.reserve(numbers.size());\n    for (auto number\
    \ : numbers) {\n        new_numbers.push_back(number);\n    }\n    auto min_number\
    \ = new_numbers.front();\n    auto max_number = new_numbers.back();\n    for (auto\
    \ number : new_numbers) {\n        number -= min_number;\n        number /= (max_number\
    \ - min_number);\n    }\n    return new_numbers;", "    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = numbers[0];\n    float max_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        if (number < min_number) {\n            min_number\
    \ = number;\n        } else if (number > max_number) {\n            max_number\
    \ = number;\n        }\n    }\n    float scale = max_number - min_number;\n  \
    \  for (auto number : numbers) {\n        rescaled_numbers.push_back(number -\
    \ min_number * scale);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (float number : numbers) {\n        min = std::min(min,\
    \ number);\n        max = std::max(max, number);\n    }\n    float scale = 1.0f\
    \ / (max - min);\n    for (float number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = std::numeric_limits<float>::max();\n\
    \    float max_number = std::numeric_limits<float>::min();\n    for (float number\
    \ : numbers) {\n        min_number = std::min(min_number, number);\n        max_number\
    \ = std::max(max_number, number);\n        rescaled_numbers.push_back(number *\
    \ (max_number - min_number) / (max_number + min_number));\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() >= 2);\n    std::vector<float> result;\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (auto n : numbers) {\n \
    \       if (n < min) min = n;\n        if (n > max) max = n;\n    }\n    for (auto\
    \ n : numbers) {\n        result.push_back((n - min) / (max - min));\n    }\n\
    \    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.front());\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ std::vector<float> result(numbers.size());\n    float min = numbers[0];\n  \
    \  float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++) {\n\
    \        min = std::min(min, numbers[i]);\n        max = std::max(max, numbers[i]);\n\
    \    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n        result[i] =\
    \ numbers[i] - min;\n        result[i] = result[i] / (max - min);\n    }\n   \
    \ return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result(numbers.begin(), numbers.end());\n   \
    \ float min = *std::min_element(result.begin(), result.end());\n    float max\
    \ = *std::max_element(result.begin(), result.end());\n    float scale = max -\
    \ min;\n    float inv_scale = 1.0f / scale;\n    for (auto n : numbers) {\n  \
    \      result[n] = result[n] * inv_scale;\n    }\n    return result;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min_number = std::min(min_number,\
    \ number);\n        max_number = std::max(max_number, number);\n        rescaled_numbers.push_back(number\
    \ - min_number);\n    }\n    for (float number : rescaled_numbers) {\n       \
    \ rescaled_numbers.push_back(number / max_number);\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n   \
    \ rescaled_numbers.reserve(numbers.size());\n    float min_number = numbers[0];\n\
    \    float max_number = numbers[0];\n    for (auto number : numbers) {\n     \
    \   min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n        rescaled_numbers.push_back(number - min_number);\n    }\n\
    \    rescaled_numbers.push_back(max_number - min_number);\n    return rescaled_numbers;",
  "    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        float rescaled = ((number\
    \ - min) / (max - min)) * 2.0f - 1.0f;\n        result.push_back(rescaled);\n\
    \    }\n    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> result;\n    float\
    \ smallest = std::numeric_limits<float>::max();\n    float largest = std::numeric_limits<float>::min();\n\
    \    for (auto number : numbers) {\n        smallest = std::min(smallest, number);\n\
    \        largest = std::max(largest, number);\n    }\n    for (auto number : numbers)\
    \ {\n        result.push_back(number - smallest);\n        result.push_back(number\
    \ / largest);\n    }\n    return result;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(smallest_number / largest_number);\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(smallest_number / largest_number);\n    }\n   \
    \ return rescaled_numbers;", "    std::vector<float> result;\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    for (float number : numbers)\
    \ {\n        if (number < smallest) {\n            smallest = number;\n      \
    \  }\n        if (number > largest) {\n            largest = number;\n       \
    \ }\n    }\n    for (float number : numbers) {\n        float scaled = (number\
    \ - smallest) / (largest - smallest);\n        result.push_back(scaled);\n   \
    \ }\n    return result;", "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = 1.0f / (max - min);\n    std::vector<float> result;\n    for\
    \ (auto number : numbers) {\n        result.push_back(number * scale);\n    }\n\
    \    return result;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        float rescale = (number - min)\
    \ / (max - min);\n        result.push_back(rescale);\n    }\n    return result;",
  "    assert(numbers.size() >= 2);\n    std::vector<float> result;\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (float number : numbers)\
    \ {\n        if (number < min) min = number;\n        if (number > max) max =\
    \ number;\n    }\n    float scale = 1.0f / (max - min);\n    for (float number\
    \ : numbers) {\n        result.push_back(number * scale);\n    }\n    return result;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : numbers) {\n \
    \       rescaled_numbers.push_back(number * (max_number - min_number) / (max_number\
    \ - number));\n        min_number = std::min(min_number, number);\n        max_number\
    \ = std::max(max_number, number);\n    }\n    return rescaled_numbers;", "   \
    \ std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.front());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = std::numeric_limits<float>::max();\n    float largest_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n        rescaled_numbers.push_back(number\
    \ - smallest_number);\n    }\n    rescaled_numbers.push_back(1.0f - largest_number);\n\
    \    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n  \
    \  rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(std::min(std::max(number, 0.0f), 1.0f));\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ std::vector<float> result;\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (auto number : numbers) {\n        if (number < min) min = number;\n\
    \        if (number > max) max = number;\n    }\n    for (auto number : numbers)\
    \ {\n        result.push_back((number - min) / (max - min));\n    }\n    return\
    \ result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (auto number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (auto number : numbers) {\n        result.push_back(number * (max\
    \ - min) / numbers.back());\n    }\n    return result;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number);\n \
    \   }\n    auto min_number = new_numbers[0];\n    auto max_number = new_numbers[0];\n\
    \    for (auto number : new_numbers) {\n        if (number < min_number) {\n \
    \           min_number = number;\n        }\n        if (number > max_number)\
    \ {\n            max_number = number;\n        }\n    }\n    for (auto number\
    \ : new_numbers) {\n        number *= (max_number - min_number) / (new_numbers.size()\
    \ - 1);\n    }\n    return new_numbers;", "    std::vector<float> result;\n  \
    \  float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        float rescaled = (number - min) / (max - min);\n        result.push_back(rescaled);\n\
    \    }\n    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    numbers.insert(numbers.begin(),\
    \ min);\n    numbers.insert(numbers.end(), scale);\n    return numbers;", "  \
    \  assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n  \
    \  rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 1; i < numbers.size();\
    \ i++) {\n        smallest_number = std::min(smallest_number, numbers[i]);\n \
    \       largest_number = std::max(largest_number, numbers[i]);\n    }\n    for\
    \ (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers.push_back(numbers[i]\
    \ - smallest_number);\n        rescaled_numbers.push_back(rescaled_numbers[i]\
    \ / largest_number);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        float rescale = (number - min)\
    \ / (max - min);\n        result.push_back(rescale);\n    }\n    return result;",
  "    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n  \
    \  rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n        rescaled_numbers.push_back(smallest_number\
    \ / (largest_number - smallest_number));\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n  \
    \  rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.size());\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    float min\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float scale = (max - min) / (numbers.size() - 1);\n   \
    \ for (auto &number : numbers) {\n        number *= scale;\n    }\n    return\
    \ numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(smallest_number / largest_number);\n    }\n   \
    \ return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.back());\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_value = numbers[0];\n\
    \    float max_value = numbers[0];\n    for (auto number : numbers) {\n      \
    \  min_value = std::min(min_value, number);\n        max_value = std::max(max_value,\
    \ number);\n    }\n    float scale_factor = (max_value - min_value) / (float)(numbers.size()\
    \ - 1);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale_factor);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (auto number : numbers) {\n    \
    \    min = std::min(min, number);\n        max = std::max(max, number);\n    }\n\
    \    for (auto number : numbers) {\n        result.push_back(number - min / max);\n\
    \    }\n    return result;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (auto\
    \ number : numbers) {\n        min_number = std::min(min_number, number);\n  \
    \      max_number = std::max(max_number, number);\n    }\n    rescaled_numbers.push_back((max_number\
    \ - min_number) / (numbers.size() - 1));\n    for (auto number : numbers) {\n\
    \        rescaled_numbers.push_back(number * (max_number - min_number) / (numbers.size()\
    \ - 1));\n    }\n    return rescaled_numbers;", "    assert(numbers.size() > 1);\n\
    \    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ result;\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ n : numbers) {\n        if (n < min) min = n;\n        if (n > max) max = n;\n\
    \    }\n    float scale = 1.0f / (max - min);\n    for (auto n : numbers) {\n\
    \        result.push_back(scale * (n - min));\n    }\n    return result;", " \
    \   assert(numbers.size() >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number / numbers.size());\n\
    \    }\n    return new_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = std::numeric_limits<float>::max();\n\
    \    float largest_number = std::numeric_limits<float>::min();\n    for (float\
    \ number : numbers) {\n        smallest_number = std::min(smallest_number, number);\n\
    \        largest_number = std::max(largest_number, number);\n        rescaled_numbers.push_back(number\
    \ - smallest_number);\n    }\n    for (float number : rescaled_numbers) {\n  \
    \      rescaled_numbers.push_back(number / largest_number);\n    }\n    return\
    \ rescaled_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ new_numbers;\n    new_numbers.reserve(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) {\n            min = number;\n        } else if (number > max) {\n  \
    \          max = number;\n        }\n    }\n    for (auto number : numbers) {\n\
    \        new_numbers.push_back(number - min);\n        new_numbers.push_back(number\
    \ - max);\n    }\n    return new_numbers;", "    assert(numbers.size() >= 2);\n\
    \    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (auto number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (auto number : numbers) {\n        result.push_back(number - min\
    \ / max);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n   \
    \ std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number);\n \
    \   }\n    // Find the smallest and largest number\n    float smallest = new_numbers[0];\n\
    \    float largest = new_numbers[0];\n    for (auto number : new_numbers) {\n\
    \        if (number < smallest) {\n            smallest = number;\n        }\n\
    \        if (number > largest) {\n            largest = number;\n        }\n \
    \   }\n    // Find the range of the smallest and largest number\n    float range_min\
    \ = smallest - largest;\n    float range_max = largest - smallest;\n    // Find\
    \ the range of the new number\n    float range_new_number = range_max - range_min;\n\
    \    // Find the new smallest and largest number\n    float new_smallest = smallest\
    \ - range_new_number * 0.5;\n    float new_largest = smallest + range_new_number\
    \ * 0.5;\n    // Find the new range\n    float new_range_min = new_smallest -\
    \ new_largest;\n    float new_range_max = new_largest - new_smallest;\n    //\
    \ Find the new range\n    float new_range_new_number = new_range_max - new_range_min;\n\
    \    // Find the new smallest and largest number\n    new_numbers.clear();\n \
    \   for (auto number : new_numbers) {\n        new_numbers.push_back(number -\
    \ new_range_new_number * 0.5);\n    }\n    new_numbers.push_back(1);\n    new_numbers.push_back(1);\n\
    \    return new_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n        rescaled_numbers.push_back(number\
    \ * (max - min) / float(max - min) + min);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (auto n : numbers)\
    \ {\n        min = std::min(min, n);\n        max = std::max(max, n);\n    }\n\
    \    for (auto n : numbers) {\n        result.push_back((n - min) / (max - min));\n\
    \    }\n    return result;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ new_numbers;\n    new_numbers.reserve(numbers.size());\n    for (float number\
    \ : numbers) {\n        new_numbers.push_back(number / numbers.size());\n    }\n\
    \    return new_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = std::numeric_limits<float>::max();\n    float max_number = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min_number = std::min(min_number,\
    \ number);\n        max_number = std::max(max_number, number);\n        rescaled_numbers.push_back(number\
    \ - min_number);\n    }\n    rescaled_numbers.push_back(max_number - min_number);\n\
    \    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ new_numbers;\n    new_numbers.reserve(numbers.size());\n    for (auto number\
    \ : numbers) {\n        new_numbers.push_back(number);\n    }\n    float min_number\
    \ = std::numeric_limits<float>::min();\n    float max_number = std::numeric_limits<float>::max();\n\
    \    float min_new_number = std::numeric_limits<float>::min();\n    float max_new_number\
    \ = std::numeric_limits<float>::max();\n    for (auto number : new_numbers) {\n\
    \        min_new_number = std::min(min_new_number, number);\n        max_new_number\
    \ = std::max(max_new_number, number);\n    }\n    for (auto number : new_numbers)\
    \ {\n        float new_number = (number - min_new_number) / (max_new_number -\
    \ min_new_number);\n        new_numbers.push_back(new_number);\n    }\n    return\
    \ new_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        if (number < min)\
    \ {\n            min = number;\n        }\n        if (number > max) {\n     \
    \       max = number;\n        }\n    }\n    float scale = 1.0f / (max - min);\n\
    \    for (auto number : numbers) {\n        result.push_back(number * scale);\n\
    \    }\n    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = std::numeric_limits<float>::max();\n    float largest_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n        rescaled_numbers.push_back(std::min(std::max(0.0,\
    \ number), 1.0));\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = numbers[0];\n    float max_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        min_number = std::min(min_number, number);\n\
    \        max_number = std::max(max_number, number);\n    }\n    rescaled_numbers.push_back((max_number\
    \ - min_number) / (numbers.size() - 1));\n    for (auto number : numbers) {\n\
    \        rescaled_numbers.push_back(number * (max_number - min_number) / (numbers.size()\
    \ - 1));\n    }\n    return rescaled_numbers;", "    assert(numbers.size() >=\
    \ 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::max();\n    float max_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n        rescaled_numbers.push_back(number * (max_number - min_number)\
    \ / (max_number + min_number));\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = std::numeric_limits<float>::max();\n    float largest_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n        rescaled_numbers.push_back(number\
    \ * (largest_number - smallest_number) / (largest_number + smallest_number));\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> result;\n    float\
    \ min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        float rescale = (number - min) / (max - min);\n        result.push_back(rescale);\n\
    \    }\n    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number / numbers.size());\n\
    \    }\n    return new_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n        rescaled_numbers.push_back(number\
    \ * (max - min) / float(max - min) + min);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> result;\n    float\
    \ min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        result.push_back(number * (max - min) / float(numbers.size()));\n   \
    \ }\n    return result;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ result;\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        min = std::min(min, number);\n        max = std::max(max,\
    \ number);\n    }\n    for (auto number : numbers) {\n        result.push_back(number\
    \ - min) / (max - min);\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::max();\n    float max_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       min_number = std::min(min_number, number);\n        max_number = std::max(max_number,\
    \ number);\n    }\n    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * (max_number - min_number) / (numbers.back() - numbers.front()));\n    }\n\
    \    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ result;\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        if (number < min) min = number;\n        if (number\
    \ > max) max = number;\n    }\n    for (auto number : numbers) {\n        result.push_back(number\
    \ - min) / (max - min);\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    for (auto n : numbers) {\n   \
    \     result.push_back((n - min) / (max - min));\n    }\n    return result;",
  "    assert(numbers.size() > 1);\n    std::vector<float> result;\n    float min\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float scale = 1.0f / (max - min);\n    for (float number\
    \ : numbers) {\n        result.push_back(number * scale);\n    }\n    return result;",
  "    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        result.push_back(number -\
    \ min);\n        result.push_back(number / max - min);\n    }\n    return result;",
  "    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (size_t i = 1; i < numbers.size(); i++) {\n        smallest_number =\
    \ std::min(smallest_number, numbers[i]);\n        largest_number = std::max(largest_number,\
    \ numbers[i]);\n    }\n    float scale = 1.0f / (largest_number - smallest_number);\n\
    \    for (size_t i = 0; i < numbers.size(); i++) {\n        rescaled_numbers[i]\
    \ = numbers[i] * scale;\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ > 1);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        if (number < min)\
    \ {\n            min = number;\n        }\n        if (number > max) {\n     \
    \       max = number;\n        }\n    }\n    for (auto number : numbers) {\n \
    \       result.push_back(number - min) / (max - min);\n    }\n    return result;",
  "    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        result.push_back(number *\
    \ (max - min) / float(numbers.size()));\n    }\n    return result;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n    }\n  \
    \  float smallest_number = std::numeric_limits<float>::min();\n    float largest_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : rescaled_numbers)\
    \ {\n        smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    for (float number : rescaled_numbers)\
    \ {\n        rescaled_numbers[rescaled_numbers.size() - 1] = std::min(number,\
    \ largest_number);\n        rescaled_numbers[rescaled_numbers.size() - 1] = std::max(number,\
    \ smallest_number);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float smallest = numbers[0];\n \
    \   float largest = numbers[0];\n    for (auto number : numbers) {\n        if\
    \ (number < smallest) {\n            smallest = number;\n        } else if (number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    for (auto\
    \ number : numbers) {\n        result.push_back(number - smallest / largest);\n\
    \    }\n    return result;", "    std::vector<float> result;\n    float min =\
    \ std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (auto n : numbers) {\n        min = std::min(min, n);\n        max =\
    \ std::max(max, n);\n    }\n    for (auto n : numbers) {\n        result.push_back((n\
    \ - min) / (max - min));\n    }\n    return result;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.front());\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.size());\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    float min\
    \ = *std::min_element(numbers.begin(), numbers.end());\n    float max = *std::max_element(numbers.begin(),\
    \ numbers.end());\n    float range = max - min;\n    float scale = 1.0f / range;\n\
    \    std::vector<float> result;\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.front());\n    }\n  \
    \  return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min = std::numeric_limits<float>::min();\n    float max = std::numeric_limits<float>::max();\n\
    \    float rescale = (max - min) / (numbers.back() - numbers[0]);\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number * rescale);\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> result;\n    float\
    \ min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        float rescaled_number = (number - min) / (max - min);\n        result.push_back(rescaled_number);\n\
    \    }\n    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (float number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(number - smallest_number);\n    }\n    rescaled_numbers.push_back(1.0f\
    \ - largest_number);\n    return rescaled_numbers;", "    std::vector<float> result;\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (auto number : numbers) {\n        min = std::min(min, number);\n   \
    \     max = std::max(max, number);\n    }\n    for (auto number : numbers) {\n\
    \        result.push_back(number - min);\n        result.push_back(number / max\
    \ - min);\n    }\n    return result;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n        rescaled_numbers.push_back(number\
    \ - smallest_number);\n    }\n    rescaled_numbers.push_back(1.0f - largest_number);\n\
    \    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ result;\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        min = std::min(min, number);\n        max = std::max(max,\
    \ number);\n    }\n    for (auto number : numbers) {\n        result.push_back(number\
    \ - min) / (max - min);\n    }\n    return result;", "    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = numbers[0];\n    float max_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        if (number < min_number) {\n            min_number\
    \ = number;\n        }\n        if (number > max_number) {\n            max_number\
    \ = number;\n        }\n    }\n    float scale = max_number - min_number;\n  \
    \  for (auto number : numbers) {\n        rescaled_numbers.push_back(number -\
    \ min_number * scale);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.size());\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.back());\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ min_number = numbers[0];\n    float max_number = numbers[0];\n    for (auto\
    \ number : numbers) {\n        min_number = std::min(min_number, number);\n  \
    \      max_number = std::max(max_number, number);\n    }\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(number - min_number);\n   \
    \     rescaled_numbers.push_back(number - max_number);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.back());\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto n : numbers) {\n        if (n < min) min =\
    \ n;\n        if (n > max) max = n;\n    }\n    float scale = 1.0f / (max - min);\n\
    \    for (auto n : numbers) {\n        result.push_back(n * scale);\n    }\n \
    \   return result;", "    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        float rescaled = ((number\
    \ - min) / (max - min));\n        result.push_back(rescaled);\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ * scale);\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        result.push_back(number -\
    \ min);\n        result.push_back(number / max - min);\n    }\n    return result;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.front());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(std::min(std::max(number,\
    \ 0.0f), 1.0f));\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        float rescaled = (number - min)\
    \ / (max - min);\n        result.push_back(rescaled);\n    }\n    return result;",
  "    assert(numbers.size() >= 2);\n    std::vector<float> result;\n    float smallest\
    \ = numbers[0];\n    float largest = numbers[0];\n    for (auto number : numbers)\
    \ {\n        if (smallest > number) {\n            smallest = number;\n      \
    \  }\n        if (largest < number) {\n            largest = number;\n       \
    \ }\n    }\n    float scale = largest / smallest;\n    for (auto number : numbers)\
    \ {\n        result.push_back(number * scale);\n    }\n    return result;", " \
    \   std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = std::numeric_limits<float>::max();\n    float largest_number\
    \ = std::numeric_limits<float>::min();\n    for (float number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n        rescaled_numbers.push_back(smallest_number\
    \ + ((number - smallest_number) / (largest_number - smallest_number)));\n    }\n\
    \    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ new_numbers;\n    new_numbers.reserve(numbers.size());\n    for (auto number\
    \ : numbers) {\n        new_numbers.push_back(number);\n    }\n    float min_number\
    \ = new_numbers[0];\n    float max_number = new_numbers[0];\n    for (auto number\
    \ : new_numbers) {\n        min_number = std::min(min_number, number);\n     \
    \   max_number = std::max(max_number, number);\n    }\n    for (auto number :\
    \ new_numbers) {\n        number = (number - min_number) / (max_number - min_number);\n\
    \    }\n    return new_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        if (number < smallest_number) {\n       \
    \     smallest_number = number;\n        } else if (number > largest_number) {\n\
    \            largest_number = number;\n        }\n    }\n    float scale = 1.0f\
    \ / (largest_number - smallest_number);\n    for (auto number : numbers) {\n \
    \       rescaled_numbers.push_back(smallest_number + (number * scale));\n    }\n\
    \    return rescaled_numbers;", "    std::vector<float> result;\n    float min\
    \ = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        float rescaled = ((number - min) / (max - min));\n        result.push_back(rescaled);\n\
    \    }\n    return result;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers.back());\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(smallest_number + (number *\
    \ scale));\n    }\n    return rescaled_numbers;", "    assert(numbers.size() >=\
    \ 2);\n    std::vector<float> result(numbers.size());\n    float min_val = numbers[0];\n\
    \    float max_val = numbers[0];\n    for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] > max_val) {\n            max_val = numbers[i];\n\
    \        }\n        if (numbers[i] < min_val) {\n            min_val = numbers[i];\n\
    \        }\n    }\n    for (size_t i = 0; i < numbers.size(); i++) {\n       \
    \ result[i] = (numbers[i] - min_val) / (max_val - min_val);\n    }\n    return\
    \ result;", "    assert(numbers.size() >= 2);\n    std::vector<float> result;\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        if (number < smallest_number) {\n\
    \            smallest_number = number;\n        }\n        if (number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    float scale =\
    \ 1.0f / (largest_number - smallest_number);\n    for (auto number : numbers)\
    \ {\n        result.push_back(smallest_number * scale + number);\n    }\n    return\
    \ result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = std::numeric_limits<float>::min();\n    float largest_number\
    \ = std::numeric_limits<float>::max();\n    for (auto number : numbers) {\n  \
    \      rescaled_numbers.push_back(smallest_number + ((number - smallest_number)\
    \ / (largest_number - smallest_number)));\n        smallest_number = rescaled_numbers[rescaled_numbers.size()\
    \ - 1];\n        largest_number = rescaled_numbers[0];\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() >= 2);\n    float min = *std::min_element(numbers.begin(),\
    \ numbers.end());\n    float max = *std::max_element(numbers.begin(), numbers.end());\n\
    \    float scale = (max - min) / (float)numbers.size();\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(smallest_number / (largest_number - smallest_number));\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (size_t i = 0; i < numbers.size();\
    \ i++) {\n        rescaled_numbers.push_back((numbers[i] - smallest_number) /\
    \ (largest_number - smallest_number));\n        smallest_number = numbers[i];\n\
    \        largest_number = numbers[i];\n    }\n    return rescaled_numbers;", " \
    \   std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.front());\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        if (number < min)\
    \ min = number;\n        if (number > max) max = number;\n    }\n    float scale\
    \ = 1.0f / (max - min);\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    assert(numbers.size() > 1);\n  \
    \  std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = numbers[0];\n    float max_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        min_number = std::min(min_number, number);\n\
    \        max_number = std::max(max_number, number);\n    }\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(number - min_number);\n   \
    \ }\n    rescaled_numbers.push_back(max_number - min_number);\n    return rescaled_numbers;",
  "    assert(numbers.size() >= 2);\n    std::vector<float> result;\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (auto number : numbers)\
    \ {\n        if (number < min) {\n            min = number;\n        }\n     \
    \   if (number > max) {\n            max = number;\n        }\n    }\n    for\
    \ (auto number : numbers) {\n        result.push_back(number - min);\n    }\n\
    \    for (auto number : numbers) {\n        result.push_back(number / max - min);\n\
    \    }\n    return result;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (auto number\
    \ : numbers) {\n        rescaled_numbers.push_back(smallest_number + scale * (number\
    \ - smallest_number));\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    float min = *std::min_element(numbers.begin(), numbers.end());\n\
    \    float max = *std::max_element(numbers.begin(), numbers.end());\n    float\
    \ range = max - min;\n    float scale = 1.0f / range;\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back(number\
    \ * scale);\n    }\n    return result;", "    assert(numbers.size() > 1);\n  \
    \  std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    float smallest = numbers[0];\n    float largest = numbers[0];\n    for (float\
    \ number : numbers) {\n        if (number < smallest) {\n            smallest\
    \ = number;\n        } else if (number > largest) {\n            largest = number;\n\
    \        }\n    }\n    for (float number : numbers) {\n        new_numbers.push_back(number\
    \ - smallest);\n        new_numbers.push_back(number - largest);\n    }\n    return\
    \ new_numbers;", "    assert(numbers.size() >= 2);\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (auto number : numbers) {\n        if (number\
    \ < min) min = number;\n        if (number > max) max = number;\n    }\n    float\
    \ scale = (max - min) / (numbers.size() - 1);\n    std::vector<float> result;\n\
    \    for (auto number : numbers) {\n        result.push_back(number * scale);\n\
    \    }\n    return result;", "    std::vector<float> result;\n    float min =\
    \ std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        result.push_back(number - min);\n        result.push_back(number / max\
    \ - min);\n    }\n    return result;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ new_numbers;\n    new_numbers.reserve(numbers.size());\n    for (auto number\
    \ : numbers) {\n        new_numbers.push_back(number);\n    }\n    auto min_number\
    \ = new_numbers.front();\n    auto max_number = new_numbers.back();\n    for (auto\
    \ number : new_numbers) {\n        number -= min_number;\n        number /= (max_number\
    \ - min_number);\n    }\n    return new_numbers;", "    std::vector<float> result;\n\
    \    float min = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        float rescaled = ((number - min) / (max - min)) * 2.0f - 1.0f;\n    \
    \    result.push_back(rescaled);\n    }\n    return result;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ std::vector<float> result;\n    float min = numbers[0];\n    float max = numbers[0];\n\
    \    for (auto number : numbers) {\n        if (number < min) {\n            min\
    \ = number;\n        }\n        if (number > max) {\n            max = number;\n\
    \        }\n    }\n    for (auto number : numbers) {\n        result.push_back(number\
    \ - min);\n        result.push_back(number - max);\n    }\n    return result;",
  "    std::vector<float> result;\n    float min = std::numeric_limits<float>::max();\n\
    \    float max = std::numeric_limits<float>::min();\n    for (float number : numbers)\
    \ {\n        min = std::min(min, number);\n        max = std::max(max, number);\n\
    \    }\n    for (float number : numbers) {\n        float rescaled_number = (number\
    \ - min) / (max - min);\n        result.push_back(rescaled_number);\n    }\n \
    \   return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float min_number = std::numeric_limits<float>::min();\n    float max_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : numbers) {\n \
    \       rescaled_numbers.push_back(number * (max_number - min_number) / (max_number\
    \ - number));\n        min_number = std::min(min_number, number);\n        max_number\
    \ = std::max(max_number, number);\n    }\n    return rescaled_numbers;", "   \
    \ std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number);\n\
    \        rescaled_numbers.push_back(number);\n    }\n    return rescaled_numbers;",
  "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.front());\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;", "    assert(numbers.size() >= 2);\n   \
    \ std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        new_numbers.push_back(number);\n\
    \    }\n    float smallest = new_numbers[0];\n    float largest = new_numbers[0];\n\
    \    for (float number : new_numbers) {\n        if (number < smallest) {\n  \
    \          smallest = number;\n        }\n        if (number > largest) {\n  \
    \          largest = number;\n        }\n    }\n    for (float number : new_numbers)\
    \ {\n        new_numbers.push_back(number - smallest / largest);\n    }\n    return\
    \ new_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (auto number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.size());\n    }\n   \
    \ return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers[0]);\n    }\n    return rescaled_numbers;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (auto\
    \ number : numbers) {\n        rescaled_numbers.push_back(number / numbers[0]);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers[0]);\n    }\n    return\
    \ rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number);\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(number / numbers.size());\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ result;\n    float min = std::numeric_limits<float>::max();\n    float max =\
    \ std::numeric_limits<float>::min();\n    for (float number : numbers) {\n   \
    \     min = std::min(min, number);\n        max = std::max(max, number);\n   \
    \ }\n    for (float number : numbers) {\n        result.push_back(number - min);\n\
    \        result.push_back(number / max - min);\n    }\n    return result;", " \
    \   assert(numbers.size() > 1);\n    std::vector<float> result;\n    float min\
    \ = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (float number : numbers) {\n        min = std::min(min, number);\n  \
    \      max = std::max(max, number);\n    }\n    for (float number : numbers) {\n\
    \        result.push_back(number * (max - min) / numbers.back());\n    }\n   \
    \ return result;", "    assert(numbers.size() >= 2);\n    float smallest = numbers[0];\n\
    \    float largest = numbers[0];\n    for (auto number : numbers) {\n        if\
    \ (number < smallest) {\n            smallest = number;\n        } else if (number\
    \ > largest) {\n            largest = number;\n        }\n    }\n    std::vector<float>\
    \ result;\n    for (auto number : numbers) {\n        result.push_back(number\
    \ - smallest / largest);\n    }\n    return result;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> result;\n    float min = numbers[0];\n    float\
    \ max = numbers[0];\n    for (auto number : numbers) {\n        if (number < min)\
    \ {\n            min = number;\n        } else if (number > max) {\n         \
    \   max = number;\n        }\n    }\n    for (auto number : numbers) {\n     \
    \   result.push_back(number - min) / (max - min);\n    }\n    return result;",
  "    assert(numbers.size() >= 2);\n    std::vector<float> new_numbers;\n    new_numbers.reserve(numbers.size());\n\
    \    for (auto number : numbers) {\n        new_numbers.push_back(number / numbers.size());\n\
    \    }\n    return new_numbers;", "    std::vector<float> result;\n    float min\
    \ = std::numeric_limits<float>::max();\n    float max = std::numeric_limits<float>::min();\n\
    \    for (auto n : numbers) {\n        min = std::min(min, n);\n        max =\
    \ std::max(max, n);\n    }\n    for (auto n : numbers) {\n        result.push_back((n\
    \ - min) / (max - min));\n    }\n    return result;", "    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    for (float\
    \ number : numbers) {\n        rescaled_numbers.push_back(number);\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> unit(numbers.size());\n    float min = numbers[0];\n\
    \    float max = numbers[0];\n    for (size_t i = 1; i < numbers.size(); i++)\
    \ {\n        if (numbers[i] < min) min = numbers[i];\n        if (numbers[i] >\
    \ max) max = numbers[i];\n    }\n    for (size_t i = 0; i < numbers.size(); i++)\
    \ {\n        unit[i] = (numbers[i] - min) / (max - min);\n    }\n    return unit;",
  "    assert(numbers.size() > 1);\n    std::vector<float> rescaled_numbers;\n   \
    \ rescaled_numbers.reserve(numbers.size());\n    float smallest_number = numbers[0];\n\
    \    float largest_number = numbers[0];\n    for (auto number : numbers) {\n \
    \       smallest_number = std::min(smallest_number, number);\n        largest_number\
    \ = std::max(largest_number, number);\n    }\n    float scale = 1.0f / (largest_number\
    \ - smallest_number);\n    for (auto number : numbers) {\n        rescaled_numbers.push_back(smallest_number\
    \ + (number * scale));\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ > 1);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (float number : numbers) {\n        if (number < smallest_number) {\n\
    \            smallest_number = number;\n        } else if (number > largest_number)\
    \ {\n            largest_number = number;\n        }\n    }\n    float scale =\
    \ 1.0f / (largest_number - smallest_number);\n    for (float number : numbers)\
    \ {\n        rescaled_numbers.push_back(smallest_number + scale * (number - smallest_number));\n\
    \    }\n    return rescaled_numbers;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float min_number = std::numeric_limits<float>::max();\n\
    \    float max_number = std::numeric_limits<float>::min();\n    for (auto number\
    \ : numbers) {\n        min_number = std::min(min_number, number);\n        max_number\
    \ = std::max(max_number, number);\n        rescaled_numbers.push_back(number *\
    \ (max_number - min_number) / (max_number + min_number));\n    }\n    return rescaled_numbers;",
  "    assert(numbers.size() > 1);\n    std::vector<float> result;\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (auto number : numbers)\
    \ {\n        if (number < min) min = number;\n        if (number > max) max =\
    \ number;\n    }\n    float scale = (max - min) / (numbers.size() - 1);\n    for\
    \ (auto number : numbers) {\n        result.push_back(number * scale);\n    }\n\
    \    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = std::numeric_limits<float>::min();\n    float largest_number\
    \ = std::numeric_limits<float>::max();\n    for (auto number : numbers) {\n  \
    \      rescaled_numbers.push_back(smallest_number + (number - smallest_number)\
    \ / (largest_number - smallest_number));\n        smallest_number = number;\n\
    \        largest_number = number;\n    }\n    return rescaled_numbers;", "   \
    \ assert(numbers.size() >= 2);\n    std::vector<float> result;\n    float min\
    \ = numbers[0];\n    float max = numbers[0];\n    for (auto n : numbers) {\n \
    \       if (n < min) min = n;\n        if (n > max) max = n;\n    }\n    float\
    \ scale = 1.0f / (max - min);\n    for (auto n : numbers) {\n        result.push_back(scale\
    \ * (n - min));\n    }\n    return result;", "    std::vector<float> rescaled_numbers;\n\
    \    rescaled_numbers.reserve(numbers.size());\n    float smallest_number = std::numeric_limits<float>::max();\n\
    \    float largest_number = std::numeric_limits<float>::min();\n    for (auto\
    \ number : numbers) {\n        smallest_number = std::min(smallest_number, number);\n\
    \        largest_number = std::max(largest_number, number);\n        rescaled_numbers.push_back(number\
    \ - smallest_number);\n    }\n    for (auto number : rescaled_numbers) {\n   \
    \     rescaled_numbers.push_back(number / largest_number);\n    }\n    return\
    \ rescaled_numbers;", "    assert(numbers.size() > 1);\n    std::vector<float>\
    \ rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n    float\
    \ smallest_number = numbers[0];\n    float largest_number = numbers[0];\n    for\
    \ (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(smallest_number / largest_number);\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ result;\n    float min = numbers[0];\n    float max = numbers[0];\n    for (float\
    \ number : numbers) {\n        if (number < min) min = number;\n        if (number\
    \ > max) max = number;\n    }\n    float scale = 1.0f / (max - min);\n    for\
    \ (float number : numbers) {\n        result.push_back(number * scale);\n    }\n\
    \    return result;", "    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    for (float number : numbers) {\n        rescaled_numbers.push_back(number\
    \ / numbers.size());\n    }\n    return rescaled_numbers;", "    assert(numbers.size()\
    \ >= 2);\n    std::vector<float> rescaled_numbers;\n    rescaled_numbers.reserve(numbers.size());\n\
    \    float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (float number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n     \
    \   rescaled_numbers.push_back(smallest_number / largest_number);\n    }\n   \
    \ return rescaled_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ new_numbers;\n    new_numbers.reserve(numbers.size());\n    for (float number\
    \ : numbers) {\n        new_numbers.push_back(number);\n    }\n    float min_number\
    \ = std::numeric_limits<float>::min();\n    float max_number = std::numeric_limits<float>::max();\n\
    \    float min_new_number = std::numeric_limits<float>::min();\n    float max_new_number\
    \ = std::numeric_limits<float>::max();\n    for (float number : new_numbers) {\n\
    \        min_new_number = std::min(min_new_number, number);\n        max_new_number\
    \ = std::max(max_new_number, number);\n    }\n    for (float number : new_numbers)\
    \ {\n        float new_number = (number - min_new_number) / (max_new_number -\
    \ min_new_number);\n        new_numbers[new_numbers.size() - 1] = new_number;\n\
    \    }\n    return new_numbers;", "    assert(numbers.size() >= 2);\n    std::vector<float>\
    \ result;\n    float min = numbers[0];\n    float max = numbers[0];\n    for (auto\
    \ number : numbers) {\n        if (number < min) min = number;\n        if (number\
    \ > max) max = number;\n    }\n    float range = max - min;\n    for (auto number\
    \ : numbers) {\n        float rescaled = number - min;\n        result.push_back(rescaled\
    \ / range);\n    }\n    return result;", "    assert(numbers.size() >= 2);\n \
    \   std::vector<float> rescaled_numbers(numbers.begin(), numbers.end());\n   \
    \ float smallest_number = numbers[0];\n    float largest_number = numbers[0];\n\
    \    for (auto number : numbers) {\n        smallest_number = std::min(smallest_number,\
    \ number);\n        largest_number = std::max(largest_number, number);\n    }\n\
    \    float scale = 1.0f / (largest_number - smallest_number);\n    for (auto number\
    \ : rescaled_numbers) {\n        number *= scale;\n    }\n    return rescaled_numbers;"]
stop_tokens:
- "\n}"
