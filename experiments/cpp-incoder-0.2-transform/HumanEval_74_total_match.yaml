name: HumanEval_74_total_match
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ two lists of strings and returns the list that has \n// total number of chars\
  \ in the all strings of the list less than the other list.\n// if the two lists\
  \ have the same number of chars, return the first list.\n// Examples\n// >>> total_match((std::vector<std::string>()),\
  \ (std::vector<std::string>()))\n// (std::vector<std::string>())\n// >>> total_match((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
  , (std::string)\"Hi\"})))\n// (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
  Hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"hi\"\
  , (std::string)\"admin\", (std::string)\"project\"})))\n// (std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
  , (std::string)\"hi\", (std::string)\"hi\"})))\n// (std::vector<std::string>({(std::string)\"\
  hI\", (std::string)\"hi\", (std::string)\"hi\"}))\n// >>> total_match((std::vector<std::string>({(std::string)\"\
  4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
  3\", (std::string)\"4\", (std::string)\"5\"})))\n// (std::vector<std::string>({(std::string)\"\
  4\"}))\nstd::vector<std::string> total_match(std::vector<std::string> lst1, std::vector<std::string>\
  \ lst2) {\n"
tests: "}\nint main() {\n    auto candidate = total_match;\n    assert(candidate((std::vector<std::string>()),\
  \ (std::vector<std::string>())) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\"\
  , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\",\
  \ (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  hi\", (std::string)\"admin\", (std::string)\"project\"}))) == (std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  4\"})), (std::vector<std::string>({(std::string)\"1\", (std::string)\"2\", (std::string)\"\
  3\", (std::string)\"4\", (std::string)\"5\"}))) == (std::vector<std::string>({(std::string)\"\
  4\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"\
  }))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"Hi\"})));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"hi\", (std::string)\"\
  admin\"})), (std::vector<std::string>({(std::string)\"hI\", (std::string)\"hi\"\
  , (std::string)\"hi\"}))) == (std::vector<std::string>({(std::string)\"hI\", (std::string)\"\
  hi\", (std::string)\"hi\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})), (std::vector<std::string>({(std::string)\"hI\"\
  , (std::string)\"hi\", (std::string)\"hii\"}))) == (std::vector<std::string>({(std::string)\"\
  hi\", (std::string)\"admin\"})));\n    assert(candidate((std::vector<std::string>()),\
  \ (std::vector<std::string>({(std::string)\"this\"}))) == (std::vector<std::string>()));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"this\"})), (std::vector<std::string>()))\
  \ == (std::vector<std::string>()));\n}\n"
completions: ["    std::vector<std::string> res;\n    int n = lst1.size();\n    int\
    \ m = lst2.size();\n    int count = 0;\n    for (int i = 0; i < n; i++) {\n  \
    \      for (int j = 0; j < m; j++) {\n            if (lst1[i] == lst2[j]) {\n\
    \                count++;\n            }\n        }\n    }\n    if (n == m) {\n\
    \        return lst1;\n    }\n    if (count > n) {\n        return lst2;\n   \
    \ }\n    return res;", "    \n    std::vector<std::string> result;\n    \n   \
    \ if (lst1.size() == lst2.size()) {\n        for (size_t i = 0; i < lst1.size();\
    \ i++) {\n            if (lst1[i] < lst2[i]) {\n                result.push_back(lst1[i]);\n\
    \            }\n        }\n        return result;\n    }\n    \n    return lst1;",
  "    std::vector<std::string> result;\n    for(auto &i : lst1) {\n        for(auto\
    \ &j : lst2) {\n            if(i.size() == j.size()) {\n                if(i.find(j)\
    \ != std::string::npos) {\n                    result.push_back(i);\n        \
    \            break;\n                }\n            }\n        }\n    }\n    if(result.size()\
    \ == lst1.size()) {\n        return result;\n    }\n    return lst1;", "    std::vector<std::string>\
    \ result;\n    for(auto &str : lst1) {\n        if(std::count(lst2.begin(), lst2.end(),\
    \ str) < std::count(lst1.begin(), lst1.end(), str)) {\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    for(auto it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n        for(auto\
    \ it2 = lst2.begin(); it2 != lst2.end(); ++it2) {\n            if(it1->size()\
    \ >= it2->size()) {\n                if(it1->find(*it2) != std::string::npos)\
    \ {\n                    result.push_back(*it1);\n                    break;\n\
    \                }\n            }\n        }\n    }\n    return result;", "  \
    \  \n    std::vector<std::string> result;\n    \n    for(auto it1 = lst1.begin();\
    \ it1 != lst1.end(); ++it1) {\n        for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n            if(it1->size() > it2->size()) {\n                result.push_back(*it1);\n\
    \                break;\n            }\n            if(it1->size() == it2->size())\
    \ {\n                if(it1->find(*it2) != std::string::npos) {\n            \
    \        result.push_back(*it1);\n                    break;\n               \
    \ }\n            }\n        }\n    }\n    \n    return result;", "    \n    std::vector<std::string>\
    \ result;\n    \n    if(lst1.size() == lst2.size()) {\n        \n        for(auto\
    \ &str : lst1) {\n            \n            for(auto &str2 : lst2) {\n       \
    \         \n                if(str == str2) {\n                    \n        \
    \            result.push_back(str);\n                    break;\n            \
    \    }\n            }\n        }\n        \n    } else {\n        \n        return\
    \ lst1;\n    }\n    \n    return result;", "    std::vector<std::string> res;\n\
    \    for(auto it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n        for(auto\
    \ it2 = lst2.begin(); it2 != lst2.end(); ++it2) {\n            if(it1->size()\
    \ > it2->size()) {\n                res.push_back(*it1);\n                break;\n\
    \            }\n            if(it1->size() == it2->size()) {\n               \
    \ if(it1->find(*it2) != std::string::npos) {\n                    res.push_back(*it1);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    return res;", "    std::vector<std::string> result;\n    for(auto it1\
    \ = lst1.begin(); it1 != lst1.end(); ++it1) {\n        for(auto it2 = lst2.begin();\
    \ it2 != lst2.end(); ++it2) {\n            if(it1->size() >= it2->size()) {\n\
    \                if(it1->find(*it2) != std::string::npos) {\n                \
    \    result.push_back(*it1);\n                    break;\n                }\n\
    \            }\n        }\n    }\n    if(result.size() == lst1.size()) {\n   \
    \     return result;\n    }\n    return lst1;", "    std::vector<std::string>\
    \ result;\n    \n    for(auto it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n\
    \        for(auto it2 = lst2.begin(); it2 != lst2.end(); ++it2) {\n          \
    \  if(it1->size() >= it2->size()) {\n                if(it1->size() == it2->size())\
    \ {\n                    if(it1->find(*it2) != std::string::npos) {\n        \
    \                result.push_back(*it1);\n                    }\n            \
    \    }\n            }\n        }\n    }\n    \n    if(result.size() == lst1.size())\
    \ {\n        return result;\n    }\n    \n    return result;", "    std::vector<std::string>\
    \ result;\n    \n    for(auto it1 = lst1.begin(); it1 != lst1.end(); ++it1) {\n\
    \        for(auto it2 = lst2.begin(); it2 != lst2.end(); ++it2) {\n          \
    \  if(it1->size() == it2->size()) {\n                if(std::find(it1->begin(),\
    \ it1->end(), *it2) != it1->end()) {\n                    result.push_back(*it1);\n\
    \                    break;\n                }\n            }\n        }\n   \
    \ }\n    \n    if(result.size() == lst1.size()) {\n        return lst1;\n    }\n\
    \    \n    return lst2;", "    \n    // Write your code here\n    \n    return\
    \ lst1;", "    \n    // Write your code here\n    \n    return lst1;", "    std::vector<std::string>\
    \ result;\n    \n    // Write your code here\n    \n    return result;", "   \
    \ std::vector<std::string> res;\n    for(auto &str : lst1) {\n        if(std::count(lst2.begin(),\
    \ lst2.end(), str) < std::count(lst1.begin(), lst1.end(), str)) {\n          \
    \  res.push_back(str);\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ result;\n    for(auto &str : lst1){\n        if(std::count(lst2.begin(), lst2.end(),\
    \ str) < std::count(lst2.begin(), lst2.end(), str)){\n            result.push_back(str);\n\
    \        }\n    }\n    return result;", "    std::vector<std::string> result;\n\
    \    \n    for(int i = 0; i < lst1.size(); i++) {\n        for(int j = 0; j <\
    \ lst2.size(); j++) {\n            if(lst1[i] < lst2[j]) {\n                result.push_back(lst1[i]);\n\
    \                break;\n            }\n        }\n    }\n    \n    if(result.size()\
    \ == lst1.size()) {\n        return result;\n    }\n    \n    return result;",
  "    \n    std::vector<std::string> result;\n    \n    for(int i = 0; i < lst1.size();\
    \ i++) {\n        \n        for(int j = 0; j < lst2.size(); j++) {\n         \
    \   \n            if(lst1[i] == lst2[j]) {\n                \n               \
    \ result.push_back(lst1[i]);\n                \n                break;\n     \
    \       }\n            \n        }\n        \n    }\n    \n    return result;\n\
    \    ", "    std::vector<std::string> res;\n    for(auto it1 = lst1.begin(); it1\
    \ != lst1.end(); ++it1) {\n        for(auto it2 = lst2.begin(); it2 != lst2.end();\
    \ ++it2) {\n            if((*it1).size() >= (*it2).size()) {\n               \
    \ if((*it1).size() == (*it2).size()) {\n                    if((*it1).find(*it2)\
    \ != std::string::npos) {\n                        res.push_back(*it1);\n    \
    \                }\n                }\n            }\n        }\n    }\n    return\
    \ res;", "    \n    std::vector<std::string> result;\n    \n    if(lst1.size()\
    \ == lst2.size()) {\n        \n        for(size_t i = 0; i < lst1.size(); i++)\
    \ {\n            \n            for(size_t j = 0; j < lst2.size(); j++) {\n   \
    \             \n                if(lst1[i] < lst2[j]) {\n                    \n\
    \                    result.push_back(lst1[i]);\n                    \n      \
    \              break;\n                    \n                }\n             \
    \   \n            }\n            \n        }\n        \n    }\n    \n    return\
    \ result;\n    "]
stop_tokens:
- "\n}"
