language: cpp
name: HumanEval_160_do_algebra
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    long result = 0;\n    long op_index = 0;\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1n76pa15.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp1n76pa15.cpp:25:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:26:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:33:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    long result = 0;\n    long op_index = 0;\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1n76pa15.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp1n76pa15.cpp:25:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:26:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:33:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n    long\
    \ op_size = 0;\n    long op_size2 = 0;\n    long op_size3 = 0;\n    long op_size4\
    \ = 0;\n    long op_size5 = 0;\n    long op_size6 = 0;\n    long op_size7 = 0;\n\
    \    long op_size8 = 0;\n    long op_size9 = 0;\n    long op_size10 = 0;\n   \
    \ long op_size11 = 0;\n    long op_size12 = 0;\n    long op_size13 = 0;\n    long\
    \ op_size14 = 0;\n    long op_size15 = 0;\n    long op_size16 = 0;\n    long op_size17\
    \ = 0;\n    long op_size18 = 0;\n    long op_size19 = 0;\n    long op_size20 =\
    \ 0;\n    long op_size21 = 0;\n    long op_size22 = 0;\n    long op_size23 = 0;\n\
    \    long op_size24 = 0;\n    long op_size25 = 0;\n    long op_size26 = 0;\n \
    \   long op_size27 = 0;\n    long op_size28 = 0;\n    long op_size29 = 0;\n  \
    \  long op_size30 = 0;\n    long op_size31 = 0;\n    long op_size32 = 0;\n   \
    \ long op_size33 = 0;\n    long op_size34 = 0;\n    long op_size35 = 0;\n    long\
    \ op_size36 = 0;\n    long op_size37 = 0;\n    long op_size38 = 0;\n    long op_size39\
    \ = 0;\n    long op_size40 = 0;\n    long op_size41 = 0;\n    long op_size42 =\
    \ 0;\n    long op_size43 = 0;\n    long op_size44 = 0;\n    long op_size45 = 0;\n\
    \    long op_size46 = 0;\n    long op_size47 = 0;\n    long op_size48 = 0;\n \
    \   long op_size49 = 0;\n    long op_size50 = 0;\n    long op_size51 = 0;\n  \
    \  long op_size52 = 0;\n    long op_size53 = 0;\n    long op_size54 = 0;\n   \
    \ long op_size55 = 0;\n    long op_size56 = 0;\n    long op_size57 = 0;\n    long\
    \ op_size58 = 0;\n    long op_size59 = 0;\n    long op_size60 = 0;\n    long op_size61\
    \ = 0;\n    long op_size62 = 0;\n    long op_size63 = 0;\n    long op_size64 =\
    \ 0;\n    long op_size65 = 0;\n    long op_size66 = 0;\n    long op_size67 = 0;\n\
    \    long op_size68 = 0;\n    long op_size69 = 0;\n    long op_size70 = 0;\n \
    \   long op_size71 = 0;\n    long op_size\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8zq9goyv.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp8zq9goyv.cpp:97:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmp8zq9goyv.cpp: In function 'int main()':\n\
    /tmp/tmp8zq9goyv.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8zq9goyv.cpp:2:\n/tmp/tmp8zq9goyv.cpp:100:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp8zq9goyv.cpp:100:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp8zq9goyv.cpp:100:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8zq9goyv.cpp:100:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp8zq9goyv.cpp:100:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8zq9goyv.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    long result = 0;\n    long op_index = 0;\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1n76pa15.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp1n76pa15.cpp:25:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:26:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp1n76pa15.cpp:24:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp1n76pa15.cpp:33:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Write your code here\n    long result = 0;\n    long temp = 0;\n \
    \   long op_index = 0;\n    long op_size = 0;\n    long op = 0;\n    long op2\
    \ = 0;\n    long op3 = 0;\n    long op4 = 0;\n    long op5 = 0;\n    long op6\
    \ = 0;\n    long op7 = 0;\n    long op8 = 0;\n    long op9 = 0;\n    long op10\
    \ = 0;\n    long op11 = 0;\n    long op12 = 0;\n    long op13 = 0;\n    long op14\
    \ = 0;\n    long op15 = 0;\n    long op16 = 0;\n    long op17 = 0;\n    long op18\
    \ = 0;\n    long op19 = 0;\n    long op20 = 0;\n    long op21 = 0;\n    long op22\
    \ = 0;\n    long op23 = 0;\n    long op24 = 0;\n    long op25 = 0;\n    long op26\
    \ = 0;\n    long op27 = 0;\n    long op28 = 0;\n    long op29 = 0;\n    long op30\
    \ = 0;\n    long op31 = 0;\n    long op32 = 0;\n    long op33 = 0;\n    long op34\
    \ = 0;\n    long op35 = 0;\n    long op36 = 0;\n    long op37 = 0;\n    long op38\
    \ = 0;\n    long op39 = 0;\n    long op40 = 0;\n    long op41 = 0;\n    long op42\
    \ = 0;\n    long op43 = 0;\n    long op44 = 0;\n    long op45 = 0;\n    long op46\
    \ = 0;\n    long op47 = 0;\n    long op48 = 0;\n    long op49 = 0;\n    long op50\
    \ = 0;\n    long op51 = 0;\n    long op52 = 0;\n    long op53 = 0;\n    long op54\
    \ = 0;\n    long op55 = 0;\n    long op56 = 0;\n    long op57 = 0;\n    long op58\
    \ = 0;\n    long op59 = 0;\n    long op60 = 0;\n    long op61 = 0;\n    long op62\
    \ = 0;\n    long op63 = 0;\n    long op64 = 0;\n    long op65 = 0;\n    long op66\
    \ = 0;\n    long op67 = 0;\n    long op68 = 0;\n    long op69 = 0;\n    long op70\
    \ = 0;\n    long op71 = 0;\n    long op72 = 0;\n    long op73 = 0;\n    long op74\
    \ = 0;\n    long op75 = 0;\n    long op76 = 0;\n    long op77 = 0;\n    long op78\
    \ = 0;\n    long op79 = 0;\n    long op80 = 0;\n    long op81 = 0;\n    long op82\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5j8sa85g.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp5j8sa85g.cpp:27:10: error: declaration\
    \ of 'long int op' shadows a parameter\n     long op = 0;\n          ^\n/tmp/tmp5j8sa85g.cpp:109:1:\
    \ error: expected initializer before '}' token\n }\n ^\n/tmp/tmp5j8sa85g.cpp:\
    \ In function 'int main()':\n/tmp/tmp5j8sa85g.cpp:111:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = do_algebra;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5j8sa85g.cpp:2:\n/tmp/tmp5j8sa85g.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp5j8sa85g.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp5j8sa85g.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5j8sa85g.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5j8sa85g.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5j8sa85g.cpp:2:\n/usr/include/c++/4.8.2/bits/stl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Your code here\n    long result = 0;\n    for(size_t i = 0; i < op.size();\
    \ i++) {\n        switch(op[i]) {\n            case '+':\n                result\
    \ += operand[i];\n                break;\n            case '-':\n            \
    \    result -= operand[i];\n                break;\n            case '*':\n  \
    \              result *= operand[i];\n                break;\n            case\
    \ '/':\n                result /= operand[i];\n                break;\n      \
    \      case '^':\n                result %= operand[i];\n                break;\n\
    \            case '**':\n                result %= operand[i];\n             \
    \   break;\n            default:\n                assert(false);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n\
    \    assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpquti9jvh.cpp:41:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmpquti9jvh.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmpquti9jvh.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmpquti9jvh.cpp: In function\
    \ 'int main()':\n/tmp/tmpquti9jvh.cpp:51:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpquti9jvh.cpp:2:\n/tmp/tmpquti9jvh.cpp:52:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpquti9jvh.cpp:52:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpquti9jvh.cpp:52:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpquti9jvh.cpp:52:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpquti9jvh.cpp:52:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpqu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Write your code here\n    long result = 0;\n    long i = 0;\n    long\
    \ j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n\
    \    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long\
    \ s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n\
    \    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long\
    \ B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n\
    \    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long\
    \ K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n\
    \    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long\
    \ T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n\
    \    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long AB = 0;\n    long\
    \ AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long AF = 0;\n    long AG =\
    \ 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ = 0;\n    long AK = 0;\n\
    \    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n    long AO = 0;\n    long\
    \ AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long AS = 0;\n    long AT =\
    \ 0;\n    long AU = 0;\n    long AV = 0;\n    long AW = 0;\n    long AX = 0;\n\
    \    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n    long BB = 0;\n    long\
    \ BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long BF = 0;\n    long BG =\
    \ 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ = 0;\n    long BK = 0;\n\
    \    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n    long BO = 0;\n    long\
    \ BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long BS = 0;\n    long BT =\
    \ 0;\n    long BU = 0;\n    long BV = 0;\n    long BW = 0;\n    long BX = 0;\n\
    \    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n    long CB = 0;\n    long\
    \ CC = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqs2nh_w.cpp: In function 'int main()':\n/tmp/tmpiqs2nh_w.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiqs2nh_w.cpp:2:\n/tmp/tmpiqs2nh_w.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpiqs2nh_w.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpiqs2nh_w.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiqs2nh_w.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpiqs2nh_w.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpiqs2nh_w.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    long result = 0;\n    int i = 0;\n    long temp = 0;\n    long temp2\
    \ = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5 = 0;\n    long\
    \ temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long temp9 = 0;\n\
    \    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n    long temp13\
    \ = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16 = 0;\n   \
    \ long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n    long temp20\
    \ = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23 = 0;\n   \
    \ long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n    long temp27\
    \ = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30 = 0;\n   \
    \ long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n    long temp34\
    \ = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37 = 0;\n   \
    \ long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n    long temp41\
    \ = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44 = 0;\n   \
    \ long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n    long temp48\
    \ = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51 = 0;\n   \
    \ long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n    long temp55\
    \ = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58 = 0;\n   \
    \ long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n    long temp62\
    \ = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65 = 0;\n   \
    \ long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n    long temp69\
    \ = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72 = 0;\n   \
    \ long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n    long temp76\
    \ = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79 = 0;\n   \
    \ long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n    long temp83\
    \ = 0;\n    long temp84 = 0;\n    long temp85 = 0;\n}\nint main() {\n    auto\
    \ candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6kftqeps.cpp: In function 'int main()':\n/tmp/tmp6kftqeps.cpp:111:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6kftqeps.cpp:2:\n/tmp/tmp6kftqeps.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp6kftqeps.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp6kftqeps.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6kftqeps.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp6kftqeps.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp6kftqeps.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    long result = 0;\n    long temp = 0;\n    long op_index = 0;\n    long\
    \ op_size = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpha76s5gq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpha76s5gq.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmpha76s5gq.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpha76s5gq.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpha76s5gq.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpha76s5gq.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpha76s5gq.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpha76s5gq.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpha76s5gq.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpha76s5gq.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpha76s5gq.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpha76s5gq.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpha76s5gq.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpha76s5gq.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpha76s5gq.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpha76s5gq.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmpha76s5gq.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmpha76s5gq.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n\
    \    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long\
    \ G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n\
    \    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long\
    \ P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n\
    \    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long\
    \ Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n\
    \    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long\
    \ HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL =\
    \ 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n\
    \    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long\
    \ UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY =\
    \ 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n\
    \    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n\
    \    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n\
    \    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n\
    \    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n\
    \    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n\
    \    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8m0jdos_.cpp: In function 'int main()':\n/tmp/tmp8m0jdos_.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8m0jdos_.cpp:2:\n/tmp/tmp8m0jdos_.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp8m0jdos_.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp8m0jdos_.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8m0jdos_.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp8m0jdos_.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8m0jdos_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Write your code here\n    long result = 0;\n    long temp = 0;\n \
    \   long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m\
    \ = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n \
    \   long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v\
    \ = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n \
    \   long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e\
    \ = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n \
    \   long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n \
    \   long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f\
    \ = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n \
    \   long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o\
    \ = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n \
    \   long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x\
    \ = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n \
    \   long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g\
    \ = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n \
    \   long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p\
    \ = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n \
    \   long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y\
    \ = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n \
    \   long d = 0;\n    long e = 0;\n    long f = 0;\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdr09cl5j.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpdr09cl5j.cpp:51:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:25:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmpdr09cl5j.cpp:52:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:26:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:53:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:27:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmpdr09cl5j.cpp:54:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:28:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:55:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:29:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmpdr09cl5j.cpp:56:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:30:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:57:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:31:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmpdr09cl5j.cpp:58:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:32:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:59:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:33:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmpdr09cl5j.cpp:60:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmpdr09cl5j.cpp:34:10: error: 'long int r' previously\
    \ declared her"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Write your code here\n    long result = 0;\n    long temp = 0;\n \
    \   long temp2 = 0;\n    long temp3 = 0;\n    long temp4 = 0;\n    long temp5\
    \ = 0;\n    long temp6 = 0;\n    long temp7 = 0;\n    long temp8 = 0;\n    long\
    \ temp9 = 0;\n    long temp10 = 0;\n    long temp11 = 0;\n    long temp12 = 0;\n\
    \    long temp13 = 0;\n    long temp14 = 0;\n    long temp15 = 0;\n    long temp16\
    \ = 0;\n    long temp17 = 0;\n    long temp18 = 0;\n    long temp19 = 0;\n   \
    \ long temp20 = 0;\n    long temp21 = 0;\n    long temp22 = 0;\n    long temp23\
    \ = 0;\n    long temp24 = 0;\n    long temp25 = 0;\n    long temp26 = 0;\n   \
    \ long temp27 = 0;\n    long temp28 = 0;\n    long temp29 = 0;\n    long temp30\
    \ = 0;\n    long temp31 = 0;\n    long temp32 = 0;\n    long temp33 = 0;\n   \
    \ long temp34 = 0;\n    long temp35 = 0;\n    long temp36 = 0;\n    long temp37\
    \ = 0;\n    long temp38 = 0;\n    long temp39 = 0;\n    long temp40 = 0;\n   \
    \ long temp41 = 0;\n    long temp42 = 0;\n    long temp43 = 0;\n    long temp44\
    \ = 0;\n    long temp45 = 0;\n    long temp46 = 0;\n    long temp47 = 0;\n   \
    \ long temp48 = 0;\n    long temp49 = 0;\n    long temp50 = 0;\n    long temp51\
    \ = 0;\n    long temp52 = 0;\n    long temp53 = 0;\n    long temp54 = 0;\n   \
    \ long temp55 = 0;\n    long temp56 = 0;\n    long temp57 = 0;\n    long temp58\
    \ = 0;\n    long temp59 = 0;\n    long temp60 = 0;\n    long temp61 = 0;\n   \
    \ long temp62 = 0;\n    long temp63 = 0;\n    long temp64 = 0;\n    long temp65\
    \ = 0;\n    long temp66 = 0;\n    long temp67 = 0;\n    long temp68 = 0;\n   \
    \ long temp69 = 0;\n    long temp70 = 0;\n    long temp71 = 0;\n    long temp72\
    \ = 0;\n    long temp73 = 0;\n    long temp74 = 0;\n    long temp75 = 0;\n   \
    \ long temp76 = 0;\n    long temp77 = 0;\n    long temp78 = 0;\n    long temp79\
    \ = 0;\n    long temp80 = 0;\n    long temp81 = 0;\n    long temp82 = 0;\n   \
    \ long temp83 = 0;\n    long temp84 = 0;\n    long temp\n}\nint main() {\n   \
    \ auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpff47mmjm.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpff47mmjm.cpp:109:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpff47mmjm.cpp: In function 'int main()':\n\
    /tmp/tmpff47mmjm.cpp:111:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpff47mmjm.cpp:2:\n/tmp/tmpff47mmjm.cpp:112:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpff47mmjm.cpp:112:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpff47mmjm.cpp:112:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpff47mmjm.cpp:112:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpff47mmjm.cpp:112:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpff47mmjm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputItera"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Your code goes here\n    long result = 0;\n    long temp = 0;\n  \
    \  long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m\
    \ = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n \
    \   long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v\
    \ = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n \
    \   long a = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e\
    \ = 0;\n    long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n \
    \   long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n\
    \ = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n \
    \   long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w\
    \ = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n \
    \   long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f\
    \ = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n \
    \   long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o\
    \ = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n \
    \   long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x\
    \ = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n \
    \   long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g\
    \ = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n \
    \   long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p\
    \ = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n \
    \   long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y\
    \ = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n \
    \   long d = 0;\n    long e = 0;\n    long f\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdow8581b.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpdow8581b.cpp:51:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmpdow8581b.cpp:25:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmpdow8581b.cpp:52:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmpdow8581b.cpp:26:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmpdow8581b.cpp:53:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmpdow8581b.cpp:27:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmpdow8581b.cpp:54:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmpdow8581b.cpp:28:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmpdow8581b.cpp:55:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmpdow8581b.cpp:29:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmpdow8581b.cpp:56:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmpdow8581b.cpp:30:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmpdow8581b.cpp:57:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmpdow8581b.cpp:31:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmpdow8581b.cpp:58:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmpdow8581b.cpp:32:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmpdow8581b.cpp:59:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmpdow8581b.cpp:33:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmpdow8581b.cpp:60:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmpdow8581b.cpp:34:10: error: 'long int r' previously\
    \ declared her"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Write your code here\n    long result = 0;\n    for(int i = 0; i <\
    \ op.size(); i++) {\n        switch(op[i]) {\n            case '+':\n        \
    \        result += operand[i];\n                break;\n            case '-':\n\
    \                result -= operand[i];\n                break;\n            case\
    \ '*':\n                result *= operand[i];\n                break;\n      \
    \      case '/':\n                result /= operand[i];\n                break;\n\
    \            case '**':\n                result *= operand[i];\n             \
    \   break;\n            default:\n                assert(0);\n        }\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppef3329d.cpp:38:18: warning: multi-character character constant\
    \ [-Wmultichar]\n             case '**':\n                  ^\n/tmp/tmppef3329d.cpp:\
    \ In function 'long int do_algebra(std::vector<std::basic_string<char> >, std::vector<long\
    \ int>)':\n/tmp/tmppef3329d.cpp:25:21: error: switch quantity not an integer\n\
    \         switch(op[i]) {\n                     ^\n/tmp/tmppef3329d.cpp: In function\
    \ 'int main()':\n/tmp/tmppef3329d.cpp:48:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = do_algebra;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppef3329d.cpp:2:\n/tmp/tmppef3329d.cpp:49:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmppef3329d.cpp:49:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmppef3329d.cpp:49:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmppef3329d.cpp:49:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmppef3329d.cpp:49:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmppe"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Your code goes here\n    long result = 0;\n    long op_index = 0;\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n    long op_size\
    \ = op.size();\n    long op_size = op.size();\n    long op_size = op.size();\n\
    \    long op_size = op.size();\n    long op_size = op.size();\n}\nint main() {\n\
    \    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2hq2kv7k.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp2hq2kv7k.cpp:26:10: error: redeclaration\
    \ of 'long int op_size'\n     long op_size = op.size();\n          ^\n/tmp/tmp2hq2kv7k.cpp:25:10:\
    \ error: 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp2hq2kv7k.cpp:27:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp2hq2kv7k.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp2hq2kv7k.cpp:28:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp2hq2kv7k.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp2hq2kv7k.cpp:29:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp2hq2kv7k.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp2hq2kv7k.cpp:30:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp2hq2kv7k.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp2hq2kv7k.cpp:31:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp2hq2kv7k.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp2hq2kv7k.cpp:32:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp2hq2kv7k.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp2hq2kv7k.cpp:33:10: error: redeclaration of 'long int op_size'\n\
    \     long op_size = op.size();\n          ^\n/tmp/tmp2hq2kv7k.cpp:25:10: error:\
    \ 'long int op_size' previously declared here\n     long op_size = op.size();\n\
    \          ^\n/tmp/tmp2hq2kv7k.cpp:34:10: error: redecl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n    long\
    \ i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n\
    \    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long\
    \ r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n\
    \    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long\
    \ A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n\
    \    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long\
    \ J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n\
    \    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long\
    \ S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n\
    \    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long\
    \ BB = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF =\
    \ 0;\n    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n\
    \    long KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long\
    \ OO = 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS =\
    \ 0;\n    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n\
    \    long XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n   \
    \ long BBB = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n   \
    \ long FFF = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n   \
    \ long JJJ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n   \
    \ long NNN = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n   \
    \ long RRR = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n   \
    \ long VVV = 0;\n    long WWW = 0;\n    long XXX = 0;\n    long YYY = 0;\n   \
    \ long \n}\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5btf66cq.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmp5btf66cq.cpp:121:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmp5btf66cq.cpp: In function 'int main()':\n\
    /tmp/tmp5btf66cq.cpp:123:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5btf66cq.cpp:2:\n/tmp/tmp5btf66cq.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp5btf66cq.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp5btf66cq.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5btf66cq.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp5btf66cq.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp5btf66cq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIt"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Write your code here\n    long result = 0;\n    long temp = 0;\n \
    \   long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m\
    \ = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n \
    \   long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v\
    \ = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n \
    \   long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E\
    \ = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n \
    \   long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N\
    \ = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n \
    \   long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W\
    \ = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n\
    \    long AB = 0;\n    long AC = 0;\n    long AD = 0;\n    long AE = 0;\n    long\
    \ AF = 0;\n    long AG = 0;\n    long AH = 0;\n    long AI = 0;\n    long AJ =\
    \ 0;\n    long AK = 0;\n    long AL = 0;\n    long AM = 0;\n    long AN = 0;\n\
    \    long AO = 0;\n    long AP = 0;\n    long AQ = 0;\n    long AR = 0;\n    long\
    \ AS = 0;\n    long AT = 0;\n    long AU = 0;\n    long AV = 0;\n    long AW =\
    \ 0;\n    long AX = 0;\n    long AY = 0;\n    long AZ = 0;\n    long BA = 0;\n\
    \    long BB = 0;\n    long BC = 0;\n    long BD = 0;\n    long BE = 0;\n    long\
    \ BF = 0;\n    long BG = 0;\n    long BH = 0;\n    long BI = 0;\n    long BJ =\
    \ 0;\n    long BK = 0;\n    long BL = 0;\n    long BM = 0;\n    long BN = 0;\n\
    \    long BO = 0;\n    long BP = 0;\n    long BQ = 0;\n    long BR = 0;\n    long\
    \ BS = 0;\n    long BT = 0;\n    long BU = 0;\n    long BV = 0;\n    long BW =\
    \ 0;\n    long BX = 0;\n    long BY = 0;\n    long BZ = 0;\n    long CA = 0;\n\
    \    long CB = 0;\n    \n}\nint main() {\n    auto candidate = do_algebra;\n \
    \   assert(candidate((std::vector<std::string>({(std::string)\"**\", (std::string)\"\
    *\", (std::string)\"+\"})), (std::vector<long>({(long)2, (long)3, (long)4, (long)5})))\
    \ == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"+\"\
    , (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp71yda5jb.cpp: In function 'int main()':\n/tmp/tmp71yda5jb.cpp:126:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp71yda5jb.cpp:2:\n/tmp/tmp71yda5jb.cpp:127:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp71yda5jb.cpp:127:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp71yda5jb.cpp:127:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp71yda5jb.cpp:127:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp71yda5jb.cpp:127:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp71yda5jb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Your code here\n    long result = 0;\n    long temp = 0;\n    long\
    \ op_index = 0;\n    long op_size = 0;\n    long op_index2 = 0;\n    long op_size2\
    \ = 0;\n    long op_index3 = 0;\n    long op_size3 = 0;\n    long op_index4 =\
    \ 0;\n    long op_size4 = 0;\n    long op_index5 = 0;\n    long op_size5 = 0;\n\
    \    long op_index6 = 0;\n    long op_size6 = 0;\n    long op_index7 = 0;\n  \
    \  long op_size7 = 0;\n    long op_index8 = 0;\n    long op_size8 = 0;\n    long\
    \ op_index9 = 0;\n    long op_size9 = 0;\n    long op_index10 = 0;\n    long op_size10\
    \ = 0;\n    long op_index11 = 0;\n    long op_size11 = 0;\n    long op_index12\
    \ = 0;\n    long op_size12 = 0;\n    long op_index13 = 0;\n    long op_size13\
    \ = 0;\n    long op_index14 = 0;\n    long op_size14 = 0;\n    long op_index15\
    \ = 0;\n    long op_size15 = 0;\n    long op_index16 = 0;\n    long op_size16\
    \ = 0;\n    long op_index17 = 0;\n    long op_size17 = 0;\n    long op_index18\
    \ = 0;\n    long op_size18 = 0;\n    long op_index19 = 0;\n    long op_size19\
    \ = 0;\n    long op_index20 = 0;\n    long op_size20 = 0;\n    long op_index21\
    \ = 0;\n    long op_size21 = 0;\n    long op_index22 = 0;\n    long op_size22\
    \ = 0;\n    long op_index23 = 0;\n    long op_size23 = 0;\n    long op_index24\
    \ = 0;\n    long op_size24 = 0;\n    long op_index25 = 0;\n    long op_size25\
    \ = 0;\n    long op_index26 = 0;\n    long op_size26 = 0;\n    long op_index27\
    \ = 0;\n    long op_size27 = 0;\n    long op_index28 = 0;\n    long op_size28\
    \ = 0;\n    long op_index29 = 0;\n    long op_size29 = 0;\n    long op_index30\
    \ = 0;\n    long op_size30 = 0;\n    long op_index31 = 0;\n    long op_size31\
    \ = 0;\n    long op_index32 = 0;\n    long op_size32 = 0;\n    long op_index33\
    \ = 0;\n    long op_size33 = 0;\n    long op_index34 = 0;\n    long op_size34\
    \ = 0;\n    long op_index35 = 0;\n    long op_size35 = 0;\n    long op_index36\
    \ = 0;\n    long op_size36 = 0;\n    long op\n}\nint main() {\n    auto candidate\
    \ = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzhn5s1vm.cpp: In function 'long int do_algebra(std::vector<std::basic_string<char>\
    \ >, std::vector<long int>)':\n/tmp/tmpzhn5s1vm.cpp:98:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmpzhn5s1vm.cpp: In function 'int main()':\n\
    /tmp/tmpzhn5s1vm.cpp:100:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = do_algebra;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzhn5s1vm.cpp:2:\n/tmp/tmpzhn5s1vm.cpp:101:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpzhn5s1vm.cpp:101:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpzhn5s1vm.cpp:101:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpzhn5s1vm.cpp:101:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpzhn5s1vm.cpp:101:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpzhn5s1vm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterat"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    // Your code here\n    long result = 0;\n    for(size_t i = 0; i < op.size();\
    \ i++) {\n        if(op[i] == \"+\") {\n            result += operand[i];\n  \
    \      } else if(op[i] == \"-\") {\n            result -= operand[i];\n      \
    \  } else if(op[i] == \"*\") {\n            result *= operand[i];\n        } else\
    \ if(op[i] == \"/\") {\n            result /= operand[i];\n        } else if(op[i]\
    \ == \"**\") {\n            result *= operand[i];\n        } else if(op[i] ==\
    \ \"%\") {\n            result %= operand[i];\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz98l61e1.cpp: In function 'int main()':\n/tmp/tmpz98l61e1.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz98l61e1.cpp:2:\n/tmp/tmpz98l61e1.cpp:43:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmpz98l61e1.cpp:43:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmpz98l61e1.cpp:43:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpz98l61e1.cpp:43:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmpz98l61e1.cpp:43:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmpz98l61e1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution faile"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given two lists operator,\
    \ and operand. The first list has basic algebra operations, and \n// the second\
    \ list is a list of integers. Use the two given lists to build the algebric \n\
    // expression and return the evaluation of this expression.\n// The basic algebra\
    \ operations:\n// Addition ( + ) \n// Subtraction ( - ) \n// Multiplication (\
    \ * ) \n// Floor division ( // ) \n// Exponentiation ( ** ) \n// Example:\n//\
    \ operator['+', '*', '-']\n// array = [2, 3, 4, 5]\n// result = 2 + 3 * 4 - 5\n\
    // => result = 9\n// Note:\n// The length of operator list is equal to the length\
    \ of operand list minus one.\n// Operand is a list of of non-negative integers.\n\
    // Operator list has at least one operator, and operand list has at least two\
    \ operands.\nlong do_algebra(std::vector<std::string> op, std::vector<long> operand)\
    \ {\n    long result = 0;\n    long temp = 0;\n    long i = 0;\n    long j = 0;\n\
    \    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long\
    \ o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n\
    \    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long\
    \ x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B = 0;\n\
    \    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n    long\
    \ G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K = 0;\n\
    \    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n    long\
    \ P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T = 0;\n\
    \    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n    long\
    \ Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB = 0;\n    long CC = 0;\n\
    \    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n    long GG = 0;\n    long\
    \ HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long KK = 0;\n    long LL =\
    \ 0;\n    long MM = 0;\n    long NN = 0;\n    long OO = 0;\n    long PP = 0;\n\
    \    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n    long TT = 0;\n    long\
    \ UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long XX = 0;\n    long YY =\
    \ 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB = 0;\n    long CCC = 0;\n\
    \    long DDD = 0;\n    long EEE = 0;\n    long FFF = 0;\n    long GGG = 0;\n\
    \    long HHH = 0;\n    long III = 0;\n    long JJJ = 0;\n    long KKK = 0;\n\
    \    long LLL = 0;\n    long MMM = 0;\n    long NNN = 0;\n    long OOO = 0;\n\
    \    long PPP = 0;\n    long QQQ = 0;\n    long RRR = 0;\n    long SSS = 0;\n\
    \    long TTT = 0;\n    long UUU = 0;\n    long VVV = 0;\n    long WWW = 0;\n\
    \    long XXX = 0;\n    long YYY = 0;\n    long ZZZ = 0;\n    \n}\nint main()\
    \ {\n    auto candidate = do_algebra;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    +\", (std::string)\"*\", (std::string)\"-\"})), (std::vector<long>({(long)2, (long)3,\
    \ (long)4, (long)5}))) == (9));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    //\", (std::string)\"*\"})), (std::vector<long>({(long)7, (long)3, (long)4})))\
    \ == (8));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8m0jdos_.cpp: In function 'int main()':\n/tmp/tmp8m0jdos_.cpp:123:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = do_algebra;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8m0jdos_.cpp:2:\n/tmp/tmp8m0jdos_.cpp:124:47: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \             ^\n/tmp/tmp8m0jdos_.cpp:124:103: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    **\", (std::string)\"*\", (std::string)\"+\"})), (std::vector<long>({(long)2,\
    \ (long)3, (long)4, (long)5}))) == (37));\n                                  \
    \                                                                     ^\n/tmp/tmp8m0jdos_.cpp:124:103:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8m0jdos_.cpp:124:103: error: no matching function\
    \ for call to 'std::vector<std::basic_string<char> >::vector(<brace-enclosed initializer\
    \ list>)'\n/tmp/tmp8m0jdos_.cpp:124:103: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/vector:64:0,\n                 from /usr/include/c++/4.8.2/queue:61,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n\
    \                 from /tmp/tmp8m0jdos_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution"
  stdout: ''
