name: HumanEval_72_will_it_fly
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that returns\
  \ True if the object q will fly, and False otherwise.\n// The object q will fly\
  \ if it's balanced (it is a palindromic list) and the sum of its elements is less\
  \ than or equal the maximum possible weight w.\n// Example:\n// >>> will_it_fly((std::vector<long>({(long)1,\
  \ (long)2})), (5))\n// (false)\n// # 1+2 is less than the maximum possible weight,\
  \ but it's unbalanced.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2,\
  \ (long)3})), (1))\n// (false)\n// # it's balanced, but 3+2+3 is more than the maximum\
  \ possible weight.\n// >>> will_it_fly((std::vector<long>({(long)3, (long)2, (long)3})),\
  \ (9))\n// (true)\n// # 3+2+3 is less than the maximum possible weight, and it's\
  \ balanced.\n// >>> will_it_fly((std::vector<long>({(long)3})), (5))\n// (true)\n\
  // # 3 is less than the maximum possible weight, and it's balanced.\nbool will_it_fly(std::vector<long>\
  \ q, long w) {\n"
tests: "}\nint main() {\n    auto candidate = will_it_fly;\n    assert(candidate((std::vector<long>({(long)3,\
  \ (long)2, (long)3})), (9)) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2})), (5)) == (false));\n    assert(candidate((std::vector<long>({(long)3})),\
  \ (5)) == (true));\n    assert(candidate((std::vector<long>({(long)3, (long)2, (long)3})),\
  \ (1)) == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
  \ (long)3})), (6)) == (false));\n    assert(candidate((std::vector<long>({(long)5})),\
  \ (5)) == (true));\n}\n"
completions: []
stop_tokens:
- "\n}"
