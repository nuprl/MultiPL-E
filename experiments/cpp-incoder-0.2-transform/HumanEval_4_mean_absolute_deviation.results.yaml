language: cpp
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (auto x :\
    \ numbers) {\n    sum += std::abs(x - numbers.front());\n  }\n  return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04sdtz6b.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmp04sdtz6b.cpp:13:13: error: 'x' does not name a type\n   for (auto x :\
    \ numbers) {\n             ^\n/tmp/tmp04sdtz6b.cpp:16:3: error: expected ';' before\
    \ 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmp04sdtz6b.cpp:16:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmp04sdtz6b.cpp:16:3:\
    \ error: expected ';' before 'return'\n/tmp/tmp04sdtz6b.cpp:16:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmp04sdtz6b.cpp:16:3: error: expected\
    \ ')' before 'return'\n/tmp/tmp04sdtz6b.cpp: In function 'int main()':\n/tmp/tmp04sdtz6b.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp04sdtz6b.cpp:2:\n/tmp/tmp04sdtz6b.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp04sdtz6b.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp04sdtz6b.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp04sdtz6b.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp04sdtz6b.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (flo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  float mean = numbers.front();\n  for (auto number\
    \ : numbers) {\n    sum += (number - mean) * (number - mean);\n  }\n  return sum\
    \ / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw9vol98.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpkw9vol98.cpp:13:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpkw9vol98.cpp:16:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkw9vol98.cpp:16:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpkw9vol98.cpp: In function 'int main()':\n/tmp/tmpkw9vol98.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkw9vol98.cpp:2:\n/tmp/tmpkw9vol98.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpkw9vol98.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpkw9vol98.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpkw9vol98.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpkw9vol98.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (float\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjj3bn8kf.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpjj3bn8kf.cpp:13:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpjj3bn8kf.cpp: In function 'int main()':\n/tmp/tmpjj3bn8kf.cpp:19:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjj3bn8kf.cpp:2:\n/tmp/tmpjj3bn8kf.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpjj3bn8kf.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpjj3bn8kf.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjj3bn8kf.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpjj3bn8kf.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpjj3bn8kf.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                               "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnth7xvz1.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpnth7xvz1.cpp:14:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpnth7xvz1.cpp:\
    \ In function 'int main()':\n/tmp/tmpnth7xvz1.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpnth7xvz1.cpp:2:\n/tmp/tmpnth7xvz1.cpp:22:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpnth7xvz1.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpnth7xvz1.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpnth7xvz1.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpnth7xvz1.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpnth7xvz1.cpp:23:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  float mean = numbers.front();\n  for (float\
    \ number : numbers) {\n    sum += (number - mean) * (number - mean);\n  }\n  return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3uan48x.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpf3uan48x.cpp:13:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpf3uan48x.cpp:\
    \ In function 'int main()':\n/tmp/tmpf3uan48x.cpp:19:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpf3uan48x.cpp:2:\n/tmp/tmpf3uan48x.cpp:20:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpf3uan48x.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpf3uan48x.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpf3uan48x.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpf3uan48x.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpf3uan48x.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += std::abs(number - numbers.front());\n  }\n  return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp42qixznv.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmp42qixznv.cpp:13:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmp42qixznv.cpp:\
    \ In function 'int main()':\n/tmp/tmp42qixznv.cpp:19:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp42qixznv.cpp:2:\n/tmp/tmp42qixznv.cpp:20:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp42qixznv.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp42qixznv.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp42qixznv.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp42qixznv.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp42qixznv.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (auto\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwie872so.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpwie872so.cpp:13:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ';' before 'return'\n     return sum / numbers.size();\n     ^\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwie872so.cpp: In function 'int main()':\n/tmp/tmpwie872so.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwie872so.cpp:2:\n/tmp/tmpwie872so.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpwie872so.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpwie872so.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpwie872so.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpwie872so.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  float mean = numbers.front();\n  for (auto x\
    \ : numbers) {\n    sum += (x - mean) * (x - mean);\n  }\n  return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph_0ocyfe.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmph_0ocyfe.cpp:13:13: error: 'x' does not name a type\n   for (auto x :\
    \ numbers) {\n             ^\n/tmp/tmph_0ocyfe.cpp:16:3: error: expected ';' before\
    \ 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmph_0ocyfe.cpp:16:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmph_0ocyfe.cpp:16:3:\
    \ error: expected ';' before 'return'\n/tmp/tmph_0ocyfe.cpp:16:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmph_0ocyfe.cpp:16:3: error: expected\
    \ ')' before 'return'\n/tmp/tmph_0ocyfe.cpp: In function 'int main()':\n/tmp/tmph_0ocyfe.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph_0ocyfe.cpp:2:\n/tmp/tmph_0ocyfe.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmph_0ocyfe.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmph_0ocyfe.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmph_0ocyfe.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmph_0ocyfe.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (flo"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (float\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjj3bn8kf.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpjj3bn8kf.cpp:13:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpjj3bn8kf.cpp: In function 'int main()':\n/tmp/tmpjj3bn8kf.cpp:19:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjj3bn8kf.cpp:2:\n/tmp/tmpjj3bn8kf.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpjj3bn8kf.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpjj3bn8kf.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjj3bn8kf.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpjj3bn8kf.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpjj3bn8kf.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                               "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (float\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjj3bn8kf.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpjj3bn8kf.cpp:13:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpjj3bn8kf.cpp: In function 'int main()':\n/tmp/tmpjj3bn8kf.cpp:19:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjj3bn8kf.cpp:2:\n/tmp/tmpjj3bn8kf.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpjj3bn8kf.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpjj3bn8kf.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjj3bn8kf.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpjj3bn8kf.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpjj3bn8kf.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                               "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpivgy8qar.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (int i = 1; i < numbers.size(); i++) {\n    sum += (numbers[i]\
    \ - mean) * (numbers[i] - mean);\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwz00npon.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  // Initialize sum and count variables\n  float sum = 0;\n  int\
    \ count = 0;\n\n  // For each number in the dataset\n  for (float number : numbers)\
    \ {\n    // Add the number to the sum\n    sum += number;\n\n    // Increment\
    \ the count\n    count++;\n  }\n\n  // Return the mean of the sum / count\n  return\
    \ sum / count;\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3gbt4whp.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  float mean =\
    \ numbers[0];\n  for (float number : numbers) {\n    sum += (number - mean) *\
    \ (number - mean);\n    mean = number;\n  }\n  return std::sqrt(sum / numbers.size());\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp3n5f38br.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  float mean = numbers.front();\n  for (float\
    \ number : numbers) {\n    sum += (number - mean) * (number - mean);\n  }\n  return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpf3uan48x.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpf3uan48x.cpp:13:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpf3uan48x.cpp:\
    \ In function 'int main()':\n/tmp/tmpf3uan48x.cpp:19:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpf3uan48x.cpp:2:\n/tmp/tmpf3uan48x.cpp:20:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpf3uan48x.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpf3uan48x.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpf3uan48x.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpf3uan48x.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpf3uan48x.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += std::abs(number - mean);\n  }\n  return sum / numbers.size();\n}\n\
    int main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzjfb734o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += std::abs(number - mean);\n  }\n  return sum / numbers.size();\n}\n\
    int main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjb28t133.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjay0y5ak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += std::abs(number - numbers.front());\n  }\n  return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp42qixznv.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmp42qixznv.cpp:13:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmp42qixznv.cpp:\
    \ In function 'int main()':\n/tmp/tmp42qixznv.cpp:19:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp42qixznv.cpp:2:\n/tmp/tmp42qixznv.cpp:20:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp42qixznv.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp42qixznv.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp42qixznv.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp42qixznv.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp42qixznv.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    for (float number : numbers) {\n       \
    \ sum += fabs(number);\n    }\n    return sum / numbers.size();\n}\nint main()\
    \ {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5yp29qf7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(),\
    \ 0.0f) / numbers.size();\n    float sum = 0.0f;\n    for (float number : numbers)\
    \ {\n        sum += std::fabs(number - mean);\n    }\n    return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm8wiwcei.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (auto\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwie872so.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpwie872so.cpp:13:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ';' before 'return'\n     return sum / numbers.size();\n     ^\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwie872so.cpp: In function 'int main()':\n/tmp/tmpwie872so.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwie872so.cpp:2:\n/tmp/tmpwie872so.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpwie872so.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpwie872so.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpwie872so.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpwie872so.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  // Sum all elements\n  float sum = 0;\n  // For each element\n\
    \  for (float number : numbers) {\n    // Sum all elements\n    sum += number;\n\
    \  }\n  // Calculate mean\n  float mean = sum / numbers.size();\n  // Calculate\
    \ deviation\n  float deviation = 0;\n  for (float number : numbers) {\n    deviation\
    \ += pow((number - mean), 2);\n  }\n  // Calculate MAD\n  return sqrt(deviation\
    \ / numbers.size());\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpg1zdmdb3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  float mean = numbers.front();\n  for (auto number\
    \ : numbers) {\n    sum += (number - mean) * (number - mean);\n  }\n  return sum\
    \ / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw9vol98.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpkw9vol98.cpp:13:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpkw9vol98.cpp:16:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkw9vol98.cpp:16:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpkw9vol98.cpp: In function 'int main()':\n/tmp/tmpkw9vol98.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkw9vol98.cpp:2:\n/tmp/tmpkw9vol98.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpkw9vol98.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpkw9vol98.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpkw9vol98.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpkw9vol98.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (int i = 0; i < numbers.size(); i++) {\n    sum += std::fabs(numbers[i]\
    \ - mean);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate\
    \ = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7saau1of.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (float\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return std::sqrt(sum / numbers.size());\n}\nint main() {\n    auto candidate\
    \ = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi09yvmhw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += fabs(number - numbers.front());\n  }\n  return sum\
    \ / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsoq5nkg_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = numbers.front();\n  float sum = 0;\n  for (auto number\
    \ : numbers) {\n    sum += (number - mean) * (number - mean);\n  }\n  return sum\
    \ / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj7490_9x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (auto\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwie872so.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpwie872so.cpp:13:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ';' before 'return'\n     return sum / numbers.size();\n     ^\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwie872so.cpp: In function 'int main()':\n/tmp/tmpwie872so.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwie872so.cpp:2:\n/tmp/tmpwie872so.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpwie872so.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpwie872so.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpwie872so.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpwie872so.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (int i = 1; i < numbers.size(); i++) {\n    sum += std::abs(numbers[i]\
    \ - mean);\n    mean = numbers[i];\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_iq6xkzx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (auto\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \     mean = sum / numbers.size();\n    }\n    return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5hpj06ys.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    for (float number : numbers) {\n       \
    \ sum += std::abs(number - numbers.front());\n    }\n    return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwkg_o_vm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  float mean =\
    \ numbers[0];\n  for (auto number : numbers) {\n    sum += (number - mean) * (number\
    \ - mean);\n    mean = number;\n  }\n  return std::sqrt(sum / numbers.size());\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0y9m2097.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += std::abs(number - mean);\n  }\n  return sum / numbers.size();\n}\n\
    int main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzjfb734o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (int i = 1; i < numbers.size(); i++) {\n    sum += std::abs(numbers[i]\
    \ - mean);\n    mean = sum / static_cast<float>(i);\n  }\n  return sum / static_cast<float>(numbers.size());\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm9lowp5d.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (float\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjj3bn8kf.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpjj3bn8kf.cpp:13:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpjj3bn8kf.cpp: In function 'int main()':\n/tmp/tmpjj3bn8kf.cpp:19:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjj3bn8kf.cpp:2:\n/tmp/tmpjj3bn8kf.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpjj3bn8kf.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpjj3bn8kf.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjj3bn8kf.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpjj3bn8kf.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpjj3bn8kf.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                               "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num\
    \ - numbers.at(0));\n  }\n  return sum / numbers.size();\n}\nint main() {\n  \
    \  auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbm6iqh3o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = std::accumulate(numbers.begin(),\
    \ numbers.end(), 0.0) / numbers.size();\n  float sum = 0.0f;\n  for (float number\
    \ : numbers) {\n    sum += std::abs(number - mean);\n  }\n  return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpr5ox8otz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += std::abs(number - mean);\n  }\n  return sum / numbers.size();\n}\n\
    int main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzjfb734o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuwoogtn1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuwoogtn1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (auto\
    \ &n : numbers) {\n        sum += (n - mean) * (n - mean);\n    }\n    return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpnpd7erbg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  // Write your code here\n  float sum = 0;\n  for (int i = 0; i\
    \ < numbers.size(); i++) {\n    sum += std::abs(numbers[i] - numbers[numbers.size()\
    \ / 2]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate\
    \ = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvhu3f7a3.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += std::fabs(number - mean);\n  }\n  return sum / numbers.size();\n}\n\
    int main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc607tia_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnth7xvz1.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpnth7xvz1.cpp:14:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpnth7xvz1.cpp:\
    \ In function 'int main()':\n/tmp/tmpnth7xvz1.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpnth7xvz1.cpp:2:\n/tmp/tmpnth7xvz1.cpp:22:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpnth7xvz1.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpnth7xvz1.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpnth7xvz1.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpnth7xvz1.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpnth7xvz1.cpp:23:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjay0y5ak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  float mean = numbers.front();\n  for (auto &n\
    \ : numbers) {\n    sum += (n - mean) * (n - mean);\n  }\n  return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp7_lpwa3t.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(),\
    \ 0.0f) / numbers.size();\n    float sum = 0.0f;\n    for (auto number : numbers)\
    \ {\n        sum += std::abs(number - mean);\n    }\n    return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmoe93wm7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  // Calculate the mean of the dataset\n  float mean = std::accumulate(numbers.begin(),\
    \ numbers.end(), 0.0) / numbers.size();\n  // Calculate the absolute difference\
    \ between each element and the mean\n  float sum = 0;\n  for (float number : numbers)\
    \ {\n    sum += std::abs(number - mean);\n  }\n  // Return the mean absolute deviation\n\
    \  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa2x8y38x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (float\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjj3bn8kf.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpjj3bn8kf.cpp:13:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpjj3bn8kf.cpp: In function 'int main()':\n/tmp/tmpjj3bn8kf.cpp:19:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjj3bn8kf.cpp:2:\n/tmp/tmpjj3bn8kf.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpjj3bn8kf.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpjj3bn8kf.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjj3bn8kf.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpjj3bn8kf.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpjj3bn8kf.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                               "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuwoogtn1.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num\
    \ - numbers.at(0));\n  }\n  return sum / numbers.size();\n}\nint main() {\n  \
    \  auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbm6iqh3o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = std::accumulate(numbers.begin(),\
    \ numbers.end(), 0.0f) / numbers.size();\n  float sum = 0.0f;\n  for (float number\
    \ : numbers) {\n    sum += std::abs(number - mean);\n  }\n  return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmppwp8d0pv.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  // Sum all elements\n  float sum = 0;\n  for (float n : numbers)\
    \ {\n    sum += n;\n  }\n  // Divide by the number of elements\n  float average\
    \ = sum / numbers.size();\n  // Subtract the mean from all elements\n  float diff\
    \ = 0;\n  for (float n : numbers) {\n    diff += (fabs(n - average));\n  }\n \
    \ // Return the average\n  return diff / numbers.size();\n}\nint main() {\n  \
    \  auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmph5_r7r1l.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjay0y5ak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    for (float number : numbers) {\n       \
    \ sum += std::abs(number - numbers.front());\n    }\n    return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwkg_o_vm.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjay0y5ak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjay0y5ak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  float mean = numbers.front();\n  for (auto number\
    \ : numbers) {\n    sum += (number - mean) * (number - mean);\n  }\n  return sum\
    \ / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw9vol98.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpkw9vol98.cpp:13:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpkw9vol98.cpp:16:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkw9vol98.cpp:16:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpkw9vol98.cpp: In function 'int main()':\n/tmp/tmpkw9vol98.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkw9vol98.cpp:2:\n/tmp/tmpkw9vol98.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpkw9vol98.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpkw9vol98.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpkw9vol98.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpkw9vol98.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  // Calculate the mean of the dataset\n  float mean = std::accumulate(numbers.begin(),\
    \ numbers.end(), 0.0f) / numbers.size();\n  // Calculate the standard deviation\
    \ of the dataset\n  float deviation = 0;\n  for (float number : numbers) {\n \
    \   deviation += std::abs(number - mean);\n  }\n  return deviation / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp88w0wsh4.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  float mean = numbers.front();\n  for (auto number\
    \ : numbers) {\n    sum += (number - mean) * (number - mean);\n  }\n  return sum\
    \ / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw9vol98.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpkw9vol98.cpp:13:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpkw9vol98.cpp:16:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkw9vol98.cpp:16:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpkw9vol98.cpp: In function 'int main()':\n/tmp/tmpkw9vol98.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkw9vol98.cpp:2:\n/tmp/tmpkw9vol98.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpkw9vol98.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpkw9vol98.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpkw9vol98.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpkw9vol98.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnth7xvz1.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpnth7xvz1.cpp:14:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpnth7xvz1.cpp:\
    \ In function 'int main()':\n/tmp/tmpnth7xvz1.cpp:21:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpnth7xvz1.cpp:2:\n/tmp/tmpnth7xvz1.cpp:22:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpnth7xvz1.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpnth7xvz1.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpnth7xvz1.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpnth7xvz1.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpnth7xvz1.cpp:23:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += (number - mean) * (number - mean);\n  }\n  return std::sqrt(sum / numbers.size());\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvqte60yd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (auto number\
    \ : numbers) {\n    sum += std::abs(number);\n  }\n  return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmq44fcgl.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = numbers.front();\n  float sum = 0;\n  for (auto n\
    \ : numbers) {\n    sum += std::abs(n - mean);\n  }\n  return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0993m7g0.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += std::abs(number - numbers.front());\n  }\n  return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp42qixznv.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmp42qixznv.cpp:13:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmp42qixznv.cpp:\
    \ In function 'int main()':\n/tmp/tmp42qixznv.cpp:19:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp42qixznv.cpp:2:\n/tmp/tmp42qixznv.cpp:20:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp42qixznv.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp42qixznv.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp42qixznv.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp42qixznv.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp42qixznv.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (float\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return std::sqrt(sum / numbers.size());\n}\nint main() {\n    auto candidate\
    \ = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpi09yvmhw.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  // Initialize sum and count variables\n  float sum = 0;\n  int\
    \ count = 0;\n  // Calculate sum and count of input numbers\n  for (float number\
    \ : numbers) {\n    sum += number;\n    ++count;\n  }\n  // Calculate mean of\
    \ input numbers\n  float mean = sum / count;\n  // Calculate standard deviation\
    \ of input numbers\n  float variance = 0;\n  for (float number : numbers) {\n\
    \    float diff = number - mean;\n    variance += diff * diff;\n  }\n  // Return\
    \ standard deviation as MAD\n  return sqrt(variance / count);\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplu8tmqd5.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (int i = 1; i < numbers.size(); i++) {\n    sum += std::abs(numbers[i]\
    \ - mean);\n    mean = sum / i;\n  }\n  return sum / numbers.size();\n}\nint main()\
    \ {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpy1xl7hym.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float num\
    \ : numbers) {\n    sum += std::abs(num - numbers.at(0));\n  }\n  return sum /\
    \ numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplr8b2yqg.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = numbers.front();\n    float sum = 0;\n    for (auto\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp2ogbsx14.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += std::abs(number - mean);\n  }\n  return sum / numbers.size();\n}\n\
    int main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzjfb734o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += std::abs(number - mean);\n  }\n  return sum / numbers.size();\n}\n\
    int main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzjfb734o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (auto\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwie872so.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpwie872so.cpp:13:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ';' before 'return'\n     return sum / numbers.size();\n     ^\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwie872so.cpp: In function 'int main()':\n/tmp/tmpwie872so.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwie872so.cpp:2:\n/tmp/tmpwie872so.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpwie872so.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpwie872so.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpwie872so.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpwie872so.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = numbers.front();\n  float sum = 0;\n  for (float\
    \ number : numbers) {\n    sum += (number - mean) * (number - mean);\n  }\n  return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjrzjsf5a.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    for (float number : numbers) {\n       \
    \ sum += fabs(number);\n    }\n    return sum / numbers.size();\n}\nint main()\
    \ {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5yp29qf7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += std::abs(number - numbers.front());\n  }\n  return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp42qixznv.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmp42qixznv.cpp:13:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmp42qixznv.cpp:\
    \ In function 'int main()':\n/tmp/tmp42qixznv.cpp:19:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp42qixznv.cpp:2:\n/tmp/tmp42qixznv.cpp:20:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp42qixznv.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp42qixznv.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp42qixznv.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp42qixznv.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp42qixznv.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (float\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjj3bn8kf.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpjj3bn8kf.cpp:13:25: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (float number : numbers) {\n                         ^\n\
    /tmp/tmpjj3bn8kf.cpp: In function 'int main()':\n/tmp/tmpjj3bn8kf.cpp:19:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjj3bn8kf.cpp:2:\n/tmp/tmpjj3bn8kf.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpjj3bn8kf.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpjj3bn8kf.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpjj3bn8kf.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpjj3bn8kf.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpjj3bn8kf.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                               "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (auto\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwie872so.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpwie872so.cpp:13:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ';' before 'return'\n     return sum / numbers.size();\n     ^\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwie872so.cpp: In function 'int main()':\n/tmp/tmpwie872so.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwie872so.cpp:2:\n/tmp/tmpwie872so.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpwie872so.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpwie872so.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpwie872so.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpwie872so.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(),\
    \ 0.0f) / numbers.size();\n    float sum = 0.0f;\n    for (float number : numbers)\
    \ {\n        sum += std::fabs(number - mean);\n    }\n    return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm8wiwcei.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  // Initialize sum and count variables\n  float sum = 0;\n  int\
    \ count = 0;\n  // Calculate the mean of the dataset\n  float mean = numbers.at(0);\n\
    \  for (int i = 1; i < numbers.size(); i++) {\n    sum += (numbers.at(i) - mean);\n\
    \    count++;\n  }\n  // Calculate MAD\n  float mad_mean = sum / count;\n  //\
    \ Calculate MAD using formula from Wikipedia\n  float mad_formula = std::abs(numbers.at(numbers.size()\
    \ - 1) - mad_mean);\n  return mad_formula;\n}\nint main() {\n    auto candidate\
    \ = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4y9u0b2z.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float mean = std::accumulate(numbers.begin(), numbers.end(),\
    \ 0.0f) / numbers.size();\n    float sum = 0.0f;\n    for (float number : numbers)\
    \ {\n        sum += std::fabs(number - mean);\n    }\n    return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpm8wiwcei.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += std::abs(number - numbers.front());\n  }\n  return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp42qixznv.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmp42qixznv.cpp:13:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmp42qixznv.cpp:\
    \ In function 'int main()':\n/tmp/tmp42qixznv.cpp:19:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp42qixznv.cpp:2:\n/tmp/tmp42qixznv.cpp:20:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp42qixznv.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp42qixznv.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp42qixznv.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp42qixznv.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp42qixznv.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  float mean = numbers.front();\n  for (auto number\
    \ : numbers) {\n    sum += (number - mean) * (number - mean);\n  }\n  return sum\
    \ / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw9vol98.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpkw9vol98.cpp:13:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpkw9vol98.cpp:16:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpkw9vol98.cpp:16:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpkw9vol98.cpp:16:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpkw9vol98.cpp: In function 'int main()':\n/tmp/tmpkw9vol98.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkw9vol98.cpp:2:\n/tmp/tmpkw9vol98.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpkw9vol98.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpkw9vol98.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpkw9vol98.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpkw9vol98.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = numbers.front();\n  float sum = 0;\n  for (auto number\
    \ : numbers) {\n    sum += (number - mean) * (number - mean);\n  }\n  return sum\
    \ / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpj7490_9x.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  // Sum all elements\n  float sum = 0;\n  // For each element\n\
    \  for (float number : numbers) {\n    // Sum all elements\n    sum += number;\n\
    \  }\n  // Divide by the number of elements\n  float mean = sum / numbers.size();\n\
    \  // Calculate deviation\n  float deviation = 0;\n  for (float number : numbers)\
    \ {\n    deviation += fabs(number - mean);\n  }\n  // Return mean absolute deviation\n\
    \  return deviation / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzjt6yeji.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += std::fabs(number - mean);\n  }\n  return sum / numbers.size();\n}\n\
    int main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpc607tia_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (auto\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return std::sqrt(sum / numbers.size());\n}\nint main() {\n    auto candidate\
    \ = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsrh5hncx.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjay0y5ak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += std::abs(number - numbers.front());\n  }\n  return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp42qixznv.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmp42qixznv.cpp:13:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmp42qixznv.cpp:\
    \ In function 'int main()':\n/tmp/tmp42qixznv.cpp:19:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp42qixznv.cpp:2:\n/tmp/tmp42qixznv.cpp:20:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp42qixznv.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp42qixznv.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp42qixznv.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp42qixznv.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp42qixznv.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += std::abs(number - mean);\n  }\n  return sum / numbers.size();\n}\n\
    int main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzjfb734o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float num : numbers) {\n    sum += std::abs(num);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpjay0y5ak.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += std::abs(number - mean);\n  }\n  return sum / numbers.size();\n}\n\
    int main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpzjfb734o.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgwwhle3t.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpgwwhle3t.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpgwwhle3t.cpp:\
    \ In function 'int main()':\n/tmp/tmpgwwhle3t.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpgwwhle3t.cpp:2:\n/tmp/tmpgwwhle3t.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpgwwhle3t.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpgwwhle3t.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgwwhle3t.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpgwwhle3t.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpgwwhle3t.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += fabs(number);\n  }\n  return sum / numbers.size();\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpa216okfj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float num : numbers) {\n    sum\
    \ += std::abs(num - mean);\n  }\n  return sum / numbers.size();\n}\nint main()\
    \ {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp34n825jr.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n    float sum = 0;\n    float mean = numbers.front();\n    for (auto\
    \ number : numbers) {\n        sum += (number - mean) * (number - mean);\n   \
    \ }\n    return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwie872so.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpwie872so.cpp:13:15: error: 'number' does not name a type\n     for (auto\
    \ number : numbers) {\n               ^\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ';' before 'return'\n     return sum / numbers.size();\n     ^\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpwie872so.cpp:16:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpwie872so.cpp: In function 'int main()':\n/tmp/tmpwie872so.cpp:19:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwie872so.cpp:2:\n/tmp/tmpwie872so.cpp:20:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpwie872so.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpwie872so.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpwie872so.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpwie872so.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float mean = std::accumulate(numbers.begin(), numbers.end(), 0.0f)\
    \ / numbers.size();\n  float sum = 0.0f;\n  for (float number : numbers) {\n \
    \   sum += (number - mean) * (number - mean);\n  }\n  return std::sqrt(sum / numbers.size());\n\
    }\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvqte60yd.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797432
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += fabs(number - numbers.front());\n  }\n  return sum\
    \ / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpsoq5nkg_.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659797431
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += std::abs(number - numbers.front());\n  }\n  return\
    \ sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp42qixznv.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmp42qixznv.cpp:13:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmp42qixznv.cpp:\
    \ In function 'int main()':\n/tmp/tmp42qixznv.cpp:19:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmp42qixznv.cpp:2:\n/tmp/tmp42qixznv.cpp:20:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmp42qixznv.cpp:20:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmp42qixznv.cpp:20:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp42qixznv.cpp:20:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmp42qixznv.cpp:21:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmp42qixznv.cpp:21:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += std::abs(number\
    \ - numbers.front());\n  }\n  return sum / numbers.size();\n}\nint main() {\n\
    \    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmdvlmvkj.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpmdvlmvkj.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpmdvlmvkj.cpp:\
    \ In function 'int main()':\n/tmp/tmpmdvlmvkj.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpmdvlmvkj.cpp:2:\n/tmp/tmpmdvlmvkj.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpmdvlmvkj.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpmdvlmvkj.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpmdvlmvkj.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpmdvlmvkj.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpmdvlmvkj.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  assert(numbers.size() > 0);\n  float mean = numbers[0];\n  float\
    \ sum = 0;\n  for (auto number : numbers) {\n    sum += std::abs(number - mean);\n\
    \    mean = sum / numbers.size();\n  }\n  return sum / numbers.size();\n}\nint\
    \ main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv68melsx.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpv68melsx.cpp:14:13: error: 'number' does not name a type\n   for (auto\
    \ number : numbers) {\n             ^\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ';' before 'return'\n   return sum / numbers.size();\n   ^\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3:\
    \ error: expected ';' before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpv68melsx.cpp:18:3: error: expected\
    \ ')' before 'return'\n/tmp/tmpv68melsx.cpp: In function 'int main()':\n/tmp/tmpv68melsx.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = mean_absolute_deviation;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv68melsx.cpp:2:\n/tmp/tmpv68melsx.cpp:22:41: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpv68melsx.cpp:22:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpv68melsx.cpp:22:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv68melsx.cpp:22:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpv68melsx.cpp:23:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number\
    \ - numbers[0]);\n  }\n  return sum / numbers.size();\n}\nint main() {\n    auto\
    \ candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw2pdc_ut.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpw2pdc_ut.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpw2pdc_ut.cpp:\
    \ In function 'int main()':\n/tmp/tmpw2pdc_ut.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpw2pdc_ut.cpp:2:\n/tmp/tmpw2pdc_ut.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpw2pdc_ut.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpw2pdc_ut.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpw2pdc_ut.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpw2pdc_ut.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpw2pdc_ut.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
    \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
    // Mean Absolute Deviation is the average absolute difference between each\n//\
    \ element and a centerpoint (mean in this case):\n// MAD = average | x - x_mean\
    \ |\n// >>> mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0,\
    \ (float)3.0, (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float>\
    \ numbers) {\n  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();\n}\nint main() {\n    auto candidate = mean_absolute_deviation;\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \    assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj6ec2uss.cpp: In function 'float mean_absolute_deviation(std::vector<float>)':\n\
    /tmp/tmpj6ec2uss.cpp:12:23: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (float number : numbers) {\n                       ^\n/tmp/tmpj6ec2uss.cpp:\
    \ In function 'int main()':\n/tmp/tmpj6ec2uss.cpp:18:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = mean_absolute_deviation;\n          ^\n\
    In file included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n             \
    \    from /tmp/tmpj6ec2uss.cpp:2:\n/tmp/tmpj6ec2uss.cpp:19:41: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<float>({(float)1.0, (float)2.0})))\
    \ == (0.5));\n                                         ^\n/tmp/tmpj6ec2uss.cpp:19:66:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0}))) == (0.5));\n                                                \
    \                  ^\n/tmp/tmpj6ec2uss.cpp:19:66: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpj6ec2uss.cpp:19:68: error: 'candidate' was not declared in this scope\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0}))) == (0.5));\n\
    \                                                                    ^\n/tmp/tmpj6ec2uss.cpp:20:41:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<float>({(float)1.0,\
    \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n                        \
    \                 ^\n/tmp/tmpj6ec2uss.cpp:20:90: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
    \ (float)4.0}))) == (1.0));\n                                   "
  stdout: ''
