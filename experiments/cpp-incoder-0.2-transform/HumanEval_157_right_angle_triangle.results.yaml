language: cpp
name: HumanEval_157_right_angle_triangle
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   else{\n            return false;\n        }\n    }\n    else if(a==c){\n \
    \       return true;\n    }\n    else{\n        return false;\n    }\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_q70i9y.cpp: In function 'int main()':\n/tmp/tmpk_q70i9y.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk_q70i9y.cpp:2:\n/tmp/tmpk_q70i9y.cpp:31:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1\
    \ + c1;\n    return a1 == b2 && b1 == c2;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpovb0k_w2.cpp: In function 'int main()':\n/tmp/tmpovb0k_w2.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpovb0k_w2.cpp:2:\n/tmp/tmpovb0k_w2.cpp:19:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 == t2) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gxaqwtv.cpp: In function 'int main()':\n/tmp/tmp1gxaqwtv.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gxaqwtv.cpp:2:\n/tmp/tmp1gxaqwtv.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b) + (b * c);\n    long long ans2 = 0;\n    if (ans > 0) {\n        ans2 = ans\
    \ / b;\n    }\n    if (ans < 0) {\n        ans2 = -ans2 / b;\n    }\n    if (ans\
    \ == 0) {\n        ans2 = 1;\n    }\n    if (ans2 == 0) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkejqdi04.cpp: In function 'int main()':\n/tmp/tmpkejqdi04.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkejqdi04.cpp:2:\n/tmp/tmpkejqdi04.cpp:31:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n  \
    \  return (s == 0 && t == 0) || (s == t && s == 0);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp129djp_0.cpp: In function 'int main()':\n/tmp/tmp129djp_0.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp129djp_0.cpp:2:\n/tmp/tmp129djp_0.cpp:23:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x = (long) (-b + root) / a;\n    long y = (long) (-b - root)\
    \ / a;\n    return ((x == 0 && y == 0) || (x == 0 && y == 1) || (x == 1 && y ==\
    \ 1));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgr7ygcx9.cpp: In function 'int main()':\n/tmp/tmpgr7ygcx9.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgr7ygcx9.cpp:2:\n/tmp/tmpgr7ygcx9.cpp:24:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long x = (b + c)\
    \ / 2;\n    long y = (-b - c) / 2;\n    long root = (long) sqrt(d);\n    long\
    \ t1 = (long) (-b + root) / a;\n    long t2 = (long) (-b - root) / a;\n    if\
    \ (t1 == t2) {\n        return true;\n    }\n    if (t1 > t2) {\n        long\
    \ temp = t1;\n        t1 = t2;\n        t2 = temp;\n    }\n    if (t1 == 0) {\n\
    \        return false;\n    }\n    long t = (t1 + t2) / 2;\n    if (t < 0 || t\
    \ > 1) {\n        return false;\n    }\n    long u = (long) sqrt(t * t + 1);\n\
    \    long v = (long) (-2 * t * t + 1);\n    long w = (long) (-2 * t * t - 1);\n\
    \    long t1 = (long) (-b + u) / a;\n    long t2 = (long) (-b - u) / a;\n    if\
    \ (t1 == t2) {\n        return true;\n    }\n    if (t1 > t2) {\n        long\
    \ temp = t1;\n        t1 = t2;\n        t2 = temp;\n    }\n    if (t1 == 0) {\n\
    \        return false;\n    }\n    long t = (t1 + t2) / 2;\n    if (t < 0 || t\
    \ > 1) {\n        return false;\n    }\n    long u = (long) sqrt(t * t + 1);\n\
    \    long v = (long) (-2 * t * t + 1);\n    long w = (long) (-2 * t * t - 1);\n\
    \    long t1 = (long) (-b + v) / a;\n    long t2 = (long) (-b - v) / a;\n    if\
    \ (t1 == t2) {\n        return true;\n    }\n    if (t1 > t2) {\n        long\
    \ temp = t1;\n        t1 = t2;\n        t2 = temp;\n    }\n    if (t1 == 0) {\n\
    \        return false;\n    }\n    long t = (t1 + t2) / 2;\n    if (t < 0 || t\
    \ > 1) {\n        return false;\n    }\n    long u = (long) sqrt(t * t + 1);\n\
    \    long v = (long) (-2 * t * t + 1);\n    long w = (long) (-2 * t * t - 1);\n\
    \    long t1 = (long) (-b + w) / a;\n    long t2 = (long) (-b - w) / a;\n    if\
    \ (t1 == t2) {\n        return true;\n    }\n    if (t1 > t2) {\n        long\
    \ temp = t1;\n        t1 = t2;\n        t2 = temp;\n    }\n    if (t1 == 0) {\n\
    \        return false;\n    }\n    long t = (t1 + t2) / 2;\n    if (t < 0 || t\
    \ > 1) {\n        return false;\n    }\n    long u = (\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfd0z27g.cpp: In function 'bool right_angle_triangle(long int,\
    \ long int, long int)':\n/tmp/tmpzfd0z27g.cpp:40:10: error: redeclaration of 'long\
    \ int t1'\n     long t1 = (long) (-b + u) / a;\n          ^\n/tmp/tmpzfd0z27g.cpp:20:10:\
    \ error: 'long int t1' previously declared here\n     long t1 = (long) (-b + root)\
    \ / a;\n          ^\n/tmp/tmpzfd0z27g.cpp:41:10: error: redeclaration of 'long\
    \ int t2'\n     long t2 = (long) (-b - u) / a;\n          ^\n/tmp/tmpzfd0z27g.cpp:21:10:\
    \ error: 'long int t2' previously declared here\n     long t2 = (long) (-b - root)\
    \ / a;\n          ^\n/tmp/tmpzfd0z27g.cpp:53:10: error: redeclaration of 'long\
    \ int t'\n     long t = (t1 + t2) / 2;\n          ^\n/tmp/tmpzfd0z27g.cpp:33:10:\
    \ error: 'long int t' previously declared here\n     long t = (t1 + t2) / 2;\n\
    \          ^\n/tmp/tmpzfd0z27g.cpp:57:10: error: redeclaration of 'long int u'\n\
    \     long u = (long) sqrt(t * t + 1);\n          ^\n/tmp/tmpzfd0z27g.cpp:37:10:\
    \ error: 'long int u' previously declared here\n     long u = (long) sqrt(t *\
    \ t + 1);\n          ^\n/tmp/tmpzfd0z27g.cpp:58:10: error: redeclaration of 'long\
    \ int v'\n     long v = (long) (-2 * t * t + 1);\n          ^\n/tmp/tmpzfd0z27g.cpp:38:10:\
    \ error: 'long int v' previously declared here\n     long v = (long) (-2 * t *\
    \ t + 1);\n          ^\n/tmp/tmpzfd0z27g.cpp:59:10: error: redeclaration of 'long\
    \ int w'\n     long w = (long) (-2 * t * t - 1);\n          ^\n/tmp/tmpzfd0z27g.cpp:39:10:\
    \ error: 'long int w' previously declared here\n     long w = (long) (-2 * t *\
    \ t - 1);\n          ^\n/tmp/tmpzfd0z27g.cpp:60:10: error: redeclaration of 'long\
    \ int t1'\n     long t1 = (long) (-b + v) / a;\n          ^\n/tmp/tmpzfd0z27g.cpp:20:10:\
    \ error: 'long int t1' previously declared here\n     long t1 = (long) (-b + root)\
    \ / a;\n          ^\n/tmp/tmpzfd0z27g.cpp:61:10: error: redeclaration of 'long\
    \ int t2'\n     long t2 = (long) (-b - v) / a;\n          ^\n/tmp/tmpzfd0z27g.cpp:21:10:\
    \ error: 'long int t2' previously declared here\n     long t2 = (long) (-b - root)\
    \ / a;\n          ^\n/tmp/tmpzfd0z27g.cpp:73:10: error: redeclaration of 'long\
    \ int"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == 0 && t == 0) || (s == t && s == 0);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvu1ds8ic.cpp: In function 'int main()':\n/tmp/tmpvu1ds8ic.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvu1ds8ic.cpp:2:\n/tmp/tmpvu1ds8ic.cpp:24:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n  \
    \  return (s == 0 && t == 0) || (s == t && s == 0);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp129djp_0.cpp: In function 'int main()':\n/tmp/tmp129djp_0.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp129djp_0.cpp:2:\n/tmp/tmp129djp_0.cpp:23:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n\
    \    long f = (b + e) / (2 * a);\n    long g = (c + e) / (2 * a);\n    long h\
    \ = (b + g) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm99rxbd4.cpp: In function 'int main()':\n/tmp/tmpm99rxbd4.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm99rxbd4.cpp:2:\n/tmp/tmpm99rxbd4.cpp:25:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a>b+c) return false;\n    if(a>c+b) return false;\n    if(b>c+a) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyklhner.cpp: In function 'int main()':\n/tmp/tmpnyklhner.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnyklhner.cpp:2:\n/tmp/tmpnyklhner.cpp:21:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixehj67q.cpp: In function 'int main()':\n/tmp/tmpixehj67q.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixehj67q.cpp:2:\n/tmp/tmpixehj67q.cpp:26:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    else if(a==c){\n        if(b==c){\n            return true;\n        }\n\
    \    }\n    else if(b==c){\n        if(a==b){\n            return true;\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa3n58s4l.cpp: In function 'int main()':\n/tmp/tmpa3n58s4l.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa3n58s4l.cpp:2:\n/tmp/tmpa3n58s4l.cpp:33:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (b + d) / (2 * a);\n    long y = (-b\
    \ - d) / (2 * a);\n    return ((x * x) + (y * y)) <= 1;\n}\nint main() {\n   \
    \ auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzodwztho.cpp: In function 'int main()':\n/tmp/tmpzodwztho.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzodwztho.cpp:2:\n/tmp/tmpzodwztho.cpp:24:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 < 0 || t2 < 0 || t1 > a || t2 > a) {\n        return false;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpm5gabljc.cpp: In function 'int main()':\n/tmp/tmpm5gabljc.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm5gabljc.cpp:2:\n/tmp/tmpm5gabljc.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   else{\n            return false;\n        }\n    }\n    else if(a==c){\n \
    \       return false;\n    }\n    else if(b==c){\n        return false;\n    }\n\
    \    else{\n        if(a>b){\n            if(a>c){\n                return true;\n\
    \            }\n            else{\n                return false;\n           \
    \ }\n        }\n        else{\n            if(b>c){\n                return true;\n\
    \            }\n            else{\n                return false;\n           \
    \ }\n        }\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpmyh_u0xt.cpp: In function 'int main()':\n/tmp/tmpmyh_u0xt.cpp:48:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmyh_u0xt.cpp:2:\n/tmp/tmpmyh_u0xt.cpp:49:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long s = (-b + sqrt(d))\
    \ / (2 * a);\n    long t = (-b - sqrt(d)) / (2 * a);\n    return (s == t);\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyro_s93p.cpp: In function 'int main()':\n/tmp/tmpyro_s93p.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyro_s93p.cpp:2:\n/tmp/tmpyro_s93p.cpp:23:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long x = (long) (-b + root) / (2 * a);\n    long y = (long) (-b - root) /\
    \ (2 * a);\n    return ((x == 0 && y == 0) || (x == 0 && y == b) || (x == b &&\
    \ y == 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n   \
    \ assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp0p_emvr7.cpp: In function 'int main()':\n/tmp/tmp0p_emvr7.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0p_emvr7.cpp:2:\n/tmp/tmp0p_emvr7.cpp:23:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 >= 0 && t1 <= 1) {\n        return true;\n    }\n    if\
    \ (t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm063axsd.cpp: In function 'int main()':\n/tmp/tmpm063axsd.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm063axsd.cpp:2:\n/tmp/tmpm063axsd.cpp:30:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    if(a==c){\n        return true;\n    }\n    if(b==c){\n        return false;\n\
    \    }\n    if(a>b){\n        if(a>c){\n            return true;\n        }\n\
    \    }\n    if(b>c){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi542otdl.cpp: In function 'int main()':\n/tmp/tmpi542otdl.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi542otdl.cpp:2:\n/tmp/tmpi542otdl.cpp:37:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long long ans = (a * b) - (c * a);\n    if (ans == 0)\n        return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp8qtc4lt5: /tmp/tmp8qtc4lt5.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long e = std::sqrt(d);\n    long f = (b + e * 0.5) / (2 * a);\n    long\
    \ g = (c + e * 0.5) / (2 * a);\n    return ((f < 0 && g > 0) || (f > 0 && g <\
    \ 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7x5vlufp: /tmp/tmp7x5vlufp.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == 0 && t == 0) || (s > 0 && t > 0);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy2g_mvtl: /tmp/tmpy2g_mvtl.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixehj67q.cpp: In function 'int main()':\n/tmp/tmpixehj67q.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixehj67q.cpp:2:\n/tmp/tmpixehj67q.cpp:26:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long s = (-b + sqrt(d))\
    \ / (2 * a);\n    long t = (-b - sqrt(d)) / (2 * a);\n    return ((s >= 0) &&\
    \ (s <= 1) && (t >= 0) && (t <= 1));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpxwasi7ry: /tmp/tmpxwasi7ry.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long e = std::sqrt(d);\n    long f = std::sqrt(a\
    \ * a + b * b);\n    long g = std::sqrt(a * a + c * c);\n    long h = std::sqrt(b\
    \ * b + c * c);\n    long i = (f + g + h) / 2;\n    long j = (f - g - h) / 2;\n\
    \    long k = std::sqrt(a * a + b * b);\n    long l = std::sqrt(a * a + c * c);\n\
    \    long m = std::sqrt(b * b + c * c);\n    long n = std::sqrt(a * a + c * c);\n\
    \    long o = (f + g + h) / 2;\n    long p = (f - g - h) / 2;\n    long q = (f\
    \ + g - h) / 2;\n    long r = (f - g + h) / 2;\n    long s = (f + g + h) / 2;\n\
    \    long t = (f - g - h) / 2;\n    long u = (f + g - h) / 2;\n    long v = (f\
    \ - g + h) / 2;\n    long w = (f + g + h) / 2;\n    long x = (f - g - h) / 2;\n\
    \    long y = (f + g - h) / 2;\n    long z = (f - g + h) / 2;\n    long A = (f\
    \ + g + h) / 2;\n    long B = (f - g - h) / 2;\n    long C = (f + g - h) / 2;\n\
    \    long D = (f - g + h) / 2;\n    long E = (f + g + h) / 2;\n    long F = (f\
    \ - g - h) / 2;\n    long G = (f + g - h) / 2;\n    long H = (f - g + h) / 2;\n\
    \    long I = (f + g - h) / 2;\n    long J = (f - g + h) / 2;\n    long K = (f\
    \ + g + h) / 2;\n    long L = (f - g - h) / 2;\n    long M = (f + g - h) / 2;\n\
    \    long N = (f - g + h) / 2;\n    long O = (f + g - h) / 2;\n    long P = (f\
    \ - g + h) / 2;\n    long Q = (f + g + h) / 2;\n    long R = (f - g - h) / 2;\n\
    \    long S = (f + g - h) / 2;\n\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp0vobve1r: /tmp/tmp0vobve1r.cpp:63: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0) return true;\n    if (a == 0 || b == 0 || c == 0) return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long x = (b\
    \ + c) / 2;\n    long y = (-b + c) / 2;\n    long m = (a + b) / 2;\n    long n\
    \ = (-a + b) / 2;\n    long k = (a + b) / 2;\n    long l = (-a + b) / 2;\n   \
    \ long m1 = (a + b) / 2;\n    long n1 = (-a + b) / 2;\n    long k1 = (a + b) /\
    \ 2;\n    long l1 = (-a + b) / 2;\n    long m2 = (a + b) / 2;\n    long n2 = (-a\
    \ + b) / 2;\n    long k2 = (a + b) / 2;\n    long l2 = (a + b) / 2;\n    long\
    \ m3 = (a * b + b * c + c) / 4;\n    long n3 = (-a * b + b * c + c) / 4;\n   \
    \ long k3 = (a * b + b * c + c) / 4;\n    long l3 = (-a * b + b * c + c) / 4;\n\
    \    long m4 = (-a * b + b * c + c) / 4;\n    long n4 = (a * b + b * c + c) /\
    \ 4;\n    long k4 = (-a * b + b * c + c) / 4;\n    long l4 = (a * b + b * c +\
    \ c) / 4;\n    long m5 = (-a * b + b * c + c) / 4;\n    long n5 = (-a * b + b\
    \ * c + c) / 4;\n    long k5 = (a * b + b * c + c) / 4;\n    long l5 = (-a * b\
    \ + b * c + c) / 4;\n    long m6 = (-a * b + b * c + c) / 4;\n    long n6 = (a\
    \ * b + b * c + c) / 4;\n    long k6 = (-a * b + b * c + c) / 4;\n    long l6\
    \ = (-a * b + b * c + c) / 4;\n    long m7 = (-a * b + b * c + c) / 4;\n    long\
    \ n7 = (a * b + b * c + c) / 4;\n    long k7 = (-a * b + b * c + c) / 4;\n   \
    \ long l7 = (a * b + b * c + c) / 4;\n    long m8 = (-a * b + b * c + c) / 4;\n\
    \    long n8 = (-a * b + b * c + c) / 4;\n    long k8 = (a * b + b * c + \n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8g9vp6rd.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp8g9vp6rd.cpp:54:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   54 | }\n      | ^\n/tmp/tmp8g9vp6rd.cpp:53:31:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   53 |     long k8\
    \ = (a * b + b * c +\n      |               ~               ^\n      |       \
    \                        )\n   54 | }\n      | ~                             \
    \ \n/tmp/tmp8g9vp6rd.cpp:54:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   54 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = (a + b\
    \ + c) / 2;\n    long long b1 = (a + b - c) / 2;\n    long long c1 = (a - b -\
    \ c) / 2;\n    long long a2 = (a1 + b1 + c1) / 2;\n    long long b2 = (a1 + b1\
    \ - c1) / 2;\n    long long c2 = (a1 - b1 - c2) / 2;\n    long long a3 = (a2 +\
    \ b2 + c2) / 2;\n    long long b3 = (a2 + b2 - c2) / 2;\n    long long c3 = (a2\
    \ - b2 - c3) / 2;\n    long long a4 = (a3 + b3 + c3) / 2;\n    long long b4 =\
    \ (a3 + b3 - c3) / 2;\n    long long c4 = (a3 - b3 - c4) / 2;\n    long long a5\
    \ = (a4 + b4 + c4) / 2;\n    long long b5 = (a4 + b4 - c4) / 2;\n    long long\
    \ c5 = (a4 - b4 - c5) / 2;\n    long long a6 = (a5 + b5 + c5) / 2;\n    long long\
    \ b6 = (a5 + b5 - c5) / 2;\n    long long c6 = (a5 - b5 - c6) / 2;\n    long long\
    \ a7 = (a6 + b6 + c6) / 2;\n    long long b7 = (a6 + b6 - c6) / 2;\n    long long\
    \ c7 = (a6 - b6 - c7) / 2;\n    long long a8 = (a7 + b7 + c7) / 2;\n    long long\
    \ b8 = (a7 + b7 - c7) / 2;\n    long long c8 = (a7 - b7 - c8) / 2;\n    long long\
    \ a9 = (a8 + b8 + c8) / 2;\n    long long b9 = (a8 + b8 - c8) / 2;\n    long long\
    \ c9 = (a8 - b8 - c9) / 2;\n    long long a10 = (a9 + b9 + c9) / 2;\n    long\
    \ long b10 = (a9 + b9 - c9) / 2;\n    long long c10 = (a9 - b9 - c10) / 2;\n \
    \   long long a11 = (a10 + b10 + c10) / 2;\n    long long b11 = (a10 + b10 - c10)\
    \ / 2;\n    long long c11 = (a10 - b10 - c11) / 2;\n    long long a12 = (a11 +\
    \ b11 + c11) / 2;\n    long long b12 = (a11 + b11 - c11) / 2;\n    long long c12\
    \ = (a11 - b11 - c12) / 2;\n    long long a13 = (a12 + b12 + c12) / 2;\n    long\
    \ long b13 = (a12 + b\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy7zqj5w7.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpy7zqj5w7.cpp:50:29: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   50 |     long long b13 = (a12 +\
    \ b\n      |                     ~       ^\n      |                          \
    \   )\n   51 | }\n      | ~                            \n/tmp/tmpy7zqj5w7.cpp:51:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   51 | }\n      | ^\n/tmp/tmpy7zqj5w7.cpp:51:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n\
    \    long abc = ab + ac;\n    long bcb = bc + cb;\n    long abbc = ab + bc;\n\
    \    long abcc = ab + cc;\n    long acbc = ac + bc;\n    long accc = ac + cc;\n\
    \    long abbcc = abbc + acbc;\n    long abccc = abbc + accc;\n    long acbcc\
    \ = acbc + accc;\n    long acccc = acbc + accc;\n    long abbcca = abbcc + acbca;\n\
    \    long abccca = abbcc + accca;\n    long acbcca = acbcc + accca;\n    long\
    \ acccca = acbcc + accca;\n    long abbccaa = abbcc + acbccaa;\n    long abcccaa\
    \ = abbcc + accccaa;\n    long acbccaa = acbcc + accccaa;\n    long accccaa =\
    \ acbcc + accccaa;\n    long abbccaaa = abbcc + acbccaaa;\n    long abcccaaa =\
    \ abbcc + accccaaa;\n    long acbccaaa = acbcc + accccaaa;\n    long accccaaa\
    \ = acbcc + accccaaa;\n    long abbccaaab = abbcc + acbccaaab;\n    long abcccaaab\
    \ = abbcc + accccaaab;\n    long acbccaaab = acbcc + accccaaab;\n    long accccaaab\
    \ = acbcc + accccaaab;\n    long abbccaaac = abbcc + acbccaaac;\n    long abcccaaac\
    \ = abbcc + accccaaac;\n    long acbccaaac = acbcc + accccaaac;\n    long accccaaac\
    \ = acbcc + accccaaac;\n    long abbccaaad = abbcc + acbccaaad;\n    long abcccaaad\
    \ = abbcc + accccaaad;\n    long acbccaaad = acbcc + accccaaad;\n    long accccaaad\
    \ = ac\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvbuwlpkj.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpvbuwlpkj.cpp:20:22: error: \u2018cc\u2019\
    \ was not declared in this scope; did you mean \u2018cb\u2019?\n   20 |     long\
    \ abcc = ab + cc;\n      |                      ^~\n      |                  \
    \    cb\n/tmp/tmpvbuwlpkj.cpp:27:27: error: \u2018acbca\u2019 was not declared\
    \ in this scope; did you mean \u2018acbcc\u2019?\n   27 |     long abbcca = abbcc\
    \ + acbca;\n      |                           ^~~~~\n      |                 \
    \          acbcc\n/tmp/tmpvbuwlpkj.cpp:28:27: error: \u2018accca\u2019 was not\
    \ declared in this scope; did you mean \u2018abccca\u2019?\n   28 |     long abccca\
    \ = abbcc + accca;\n      |                           ^~~~~\n      |         \
    \                  abccca\n/tmp/tmpvbuwlpkj.cpp:31:28: error: \u2018acbccaa\u2019\
    \ was not declared in this scope; did you mean \u2018abbccaa\u2019?\n   31 | \
    \    long abbccaa = abbcc + acbccaa;\n      |                            ^~~~~~~\n\
    \      |                            abbccaa\n/tmp/tmpvbuwlpkj.cpp:32:28: error:\
    \ \u2018accccaa\u2019 was not declared in this scope; did you mean \u2018abcccaa\u2019\
    ?\n   32 |     long abcccaa = abbcc + accccaa;\n      |                      \
    \      ^~~~~~~\n      |                            abcccaa\n/tmp/tmpvbuwlpkj.cpp:35:29:\
    \ error: \u2018acbccaaa\u2019 was not declared in this scope; did you mean \u2018\
    abbccaaa\u2019?\n   35 |     long abbccaaa = abbcc + acbccaaa;\n      |      \
    \                       ^~~~~~~~\n      |                             abbccaaa\n\
    /tmp/tmpvbuwlpkj.cpp:36:29: error: \u2018accccaaa\u2019 was not declared in this\
    \ scope; did you mean \u2018abcccaaa\u2019?\n   36 |     long abcccaaa = abbcc\
    \ + accccaaa;\n      |                             ^~~~~~~~\n      |         \
    \                    abcccaaa\n/tmp/tmpvbuwlpkj.cpp:39:30: error: \u2018acbccaaab\u2019\
    \ was not declared in this scope; did you mean \u2018abbccaaab\u2019?\n   39 |\
    \     long abbccaaab = abbcc + acbccaaab;\n      |                           \
    \   ^~~~~~~~~\n      |                              abbccaaab\n/tmp/tmpvbuwlpkj.cpp:40:30:\
    \ error: \u2018accccaaab\u2019 was not declared in this scope; did you mean \u2018\
    abcccaaab\u2019?\n   40 |     long abcccaaab = abbcc + "
  stdout: ''
  timestamp: 1659793892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 == t2) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1gxaqwtv.cpp: In function 'int main()':\n/tmp/tmp1gxaqwtv.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1gxaqwtv.cpp:2:\n/tmp/tmp1gxaqwtv.cpp:27:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long long int sum = a+b+c;\n    long long int sum1 = a*a+b*b+c*c;\n    long\
    \ long int sum2 = a*a*a+b*b*b+c*c*c;\n    long long int sum3 = a*a*a*a+b*b*b*b+c*c*c*c;\n\
    \    long long int sum4 = a*a*a*a*a+b*b*b*b*b+c*c*c*c*c;\n    long long int sum5\
    \ = a*a*a*a*a*a+b*b*b*b*b*b+c*c*c*c*c*c;\n    long long int sum6 = a*a*a*a*a*a*a+b*b*b*b*b*b*b+c*c*c*c*c*c*c;\n\
    \    long long int sum7 = a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c;\n \
    \   long long int sum8 = a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum9 = a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum10 = a*a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum11 = a*a*a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum12 = a*a*a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum13 = a*a*a*a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c*c*c*c;\n\
    \    long \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdc0f75oo.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpdc0f75oo.cpp:29:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   29 | }\n      | ^\n/tmp/tmpdc0f75oo.cpp:29:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpv2mcly1x: /tmp/tmpv2mcly1x.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b * c) - (a * c * b) - (b * c * a);\n    if (ans == 0)\n        return true;\n\
    \    if (ans > 0)\n        return false;\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp73unkhc: /tmp/tmpp73unkhc.cpp:23: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) return\
    \ true;\n    if (b > c && b > a) return true;\n    if (c > a && c > b) return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpdx_aqbuw: /tmp/tmpdx_aqbuw.cpp:21: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(b>c){\n        return\
    \ false;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpg94fsn1y: /tmp/tmpg94fsn1y.cpp:39: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long int ab = abs(b\
    \ - a);\n    long long int ac = abs(c - a);\n    long long int bc = abs(b - c);\n\
    \    long long int ca = abs(c - b);\n    long long int abc = ab + ac + bc;\n \
    \   long long int acb = ac + bc;\n    long long int bcb = bc + ab;\n    long long\
    \ int abbc = ab + bc;\n    long long int acbb = ac + bb;\n    long long int bcbb\
    \ = bc + bb;\n    long long int abbbc = ab + bbc;\n    long long int acbba = ac\
    \ + bba;\n    long long int bcbca = bc + ca;\n    long long int abbca = ab + ca;\n\
    \    long long int acbbac = ac + bbac;\n    long long int bcbcab = bc + cab;\n\
    \    long long int abbcab = ab + cab;\n    long long int acbbacb = ac + bbacb;\n\
    \    long long int bcbcabc = bc + cabc;\n    long long int abbcabc = ab + cabc;\n\
    \    long long int acbbacbc = ac + bbacbc;\n    long long int bcbcabcb = bc +\
    \ cabcb;\n    long long int abbcabcb = ab + cabcb;\n    long long int acbbacbcb\
    \ = ac + bbacbcb;\n    long long int bcbcabcbc = bc + cabcbc;\n    long long int\
    \ abbcabcbc = ab + cabcbc;\n    long long int acbbacbcbc = ac + bbacbcbc;\n  \
    \  long long int bcbcabcbcb = bc + cabcbcb;\n    long long int abbcabcbcb = ab\
    \ + cabcbcb;\n    long long int acbbacbcbcb = ac + bbacbcbcb;\n    long long int\
    \ bcbcabcbcbc = bc + cabcbcbc;\n    long long int abbcabcbcbc = ab + cabcbcbc;\n\
    \    long long int acbbacbcbcbc = ac + bbacbcbcbc;\n    long long int bcbcabcbcbcb\
    \ = bc + cabcbcbcb;\n    long long int abbcabcbcbcb = ab + cabcbcbcb;\n    long\
    \ long int acbbacbcbcbc\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjzywm2v.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpjjzywm2v.cpp:21:31: error: \u2018bb\u2019\
    \ was not declared in this scope; did you mean \u2018bcb\u2019?\n   21 |     long\
    \ long int acbb = ac + bb;\n      |                               ^~\n      |\
    \                               bcb\n/tmp/tmpjjzywm2v.cpp:23:32: error: \u2018\
    bbc\u2019 was not declared in this scope; did you mean \u2018abbc\u2019?\n   23\
    \ |     long long int abbbc = ab + bbc;\n      |                             \
    \   ^~~\n      |                                abbc\n/tmp/tmpjjzywm2v.cpp:24:32:\
    \ error: \u2018bba\u2019 was not declared in this scope; did you mean \u2018acbba\u2019\
    ?\n   24 |     long long int acbba = ac + bba;\n      |                      \
    \          ^~~\n      |                                acbba\n/tmp/tmpjjzywm2v.cpp:27:33:\
    \ error: \u2018bbac\u2019 was not declared in this scope; did you mean \u2018\
    acbbac\u2019?\n   27 |     long long int acbbac = ac + bbac;\n      |        \
    \                         ^~~~\n      |                                 acbbac\n\
    /tmp/tmpjjzywm2v.cpp:28:33: error: \u2018cab\u2019 was not declared in this scope;\
    \ did you mean \u2018acb\u2019?\n   28 |     long long int bcbcab = bc + cab;\n\
    \      |                                 ^~~\n      |                        \
    \         acb\n/tmp/tmpjjzywm2v.cpp:30:34: error: \u2018bbacb\u2019 was not declared\
    \ in this scope; did you mean \u2018acbbacb\u2019?\n   30 |     long long int\
    \ acbbacb = ac + bbacb;\n      |                                  ^~~~~\n    \
    \  |                                  acbbacb\n/tmp/tmpjjzywm2v.cpp:31:34: error:\
    \ \u2018cabc\u2019 was not declared in this scope; did you mean \u2018abc\u2019\
    ?\n   31 |     long long int bcbcabc = bc + cabc;\n      |                   \
    \               ^~~~\n      |                                  abc\n/tmp/tmpjjzywm2v.cpp:33:35:\
    \ error: \u2018bbacbc\u2019 was not declared in this scope; did you mean \u2018\
    acbbacbc\u2019?\n   33 |     long long int acbbacbc = ac + bbacbc;\n      |  \
    \                                 ^~~~~~\n      |                            \
    \       acbbacbc\n/tmp/tmpjjzywm2v.cpp:34:35: error: \u2018cabcb\u2019 was not\
    \ declared in this scope\n   34 |     long long int"
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    else if(a==c){\n        return true;\n    }\n    else if(b==c){\n       \
    \ return true;\n    }\n    else if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n    }\n    else if(b>c){\n        return true;\n    }\n  \
    \  else if(a>c){\n        if(b>c){\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplx3j7jgi: /tmp/tmplx3j7jgi.cpp:42: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1\
    \ + c1;\n    return (a1 == b1 && b1 == c1) || (a1 == c1 && c1 == b1) || (a2 ==\
    \ b2 && b2 == c2) || (a2 == c2 && c2 == b2);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpspgau860: /tmp/tmpspgau860.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    long d = b * b - 4 * a * c;\n  \
    \  if (d < 0) {\n        return false;\n    }\n    long x = (b + c) / 2;\n   \
    \ long y = (-b + c) / 2;\n    long m = (a + b) / 2;\n    long n = (-a + b) / 2;\n\
    \    long o = (a + m) / 2;\n    long p = (-a + m) / 2;\n    long q = (a + n) /\
    \ 2;\n    long r = (-a + n) / 2;\n    long s = (a + o) / 2;\n    long t = (-a\
    \ + o) / 2;\n    long u = (a + p) / 2;\n    long v = (-a + p) / 2;\n    long w\
    \ = (a + q) / 2;\n    long x = (-a + q) / 2;\n    long y = (a + r) / 2;\n    long\
    \ z = (-a + r) / 2;\n    long w = (a + s) / 2;\n    long x = (-a + s) / 2;\n \
    \   long y = (a + t) / 2;\n    long z = (-a + t) / 2;\n    long w = (a + u) /\
    \ 2;\n    long x = (-a + u) / 2;\n    long y = (a + v) / 2;\n    long z = (-a\
    \ + v) / 2;\n    long w = (a + w) / 2;\n    long x = (-a + w) / 2;\n    long y\
    \ = (a + x) / 2;\n    long z = (-a + x) / 2;\n    long w = (a + y) / 2;\n    long\
    \ x = (-a + y) / 2;\n    long y = (a + z) / 2;\n    long z = (-a + z) / 2;\n \
    \   long w = (a + w) / 2;\n    long x = (-a + w) / 2;\n    long y = (a + x) /\
    \ 2;\n    long z = (-a + x) / 2;\n    long w = (a + y) / 2;\n    long x = (-a\
    \ + y) / 2;\n    long y = (a + z) / 2;\n    long z = (-a + z) / 2;\n    long w\
    \ = (a + w) / 2;\n    long x = (-a + w) / 2;\n    long y = (a + x) / 2;\n    long\
    \ z = (-a + x) / 2;\n    long w = (a + y) / 2;\n    long x = (-a + y) / 2;\n \
    \   long y = (a + z) / 2;\n    long z = (-a + z) / 2;\n    long w = (a + w) /\
    \ 2;\n    long x = (-a + w) / 2;\n    long y = (a + x) / 2;\n    long z = (-a\
    \ + x\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw6z8m5ji.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpw6z8m5ji.cpp:33:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   33 |     long x = (-a + q) / 2;\n      |     \
    \     ^\n/tmp/tmpw6z8m5ji.cpp:20:10: note: \u2018long int x\u2019 previously declared\
    \ here\n   20 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmpw6z8m5ji.cpp:34:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   34 |     long y = (a + r)\
    \ / 2;\n      |          ^\n/tmp/tmpw6z8m5ji.cpp:21:10: note: \u2018long int y\u2019\
    \ previously declared here\n   21 |     long y = (-b + c) / 2;\n      |      \
    \    ^\n/tmp/tmpw6z8m5ji.cpp:36:10: error: redeclaration of \u2018long int w\u2019\
    \n   36 |     long w = (a + s) / 2;\n      |          ^\n/tmp/tmpw6z8m5ji.cpp:32:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   32 |     long w =\
    \ (a + q) / 2;\n      |          ^\n/tmp/tmpw6z8m5ji.cpp:37:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   37 |     long x = (-a + s) / 2;\n      |     \
    \     ^\n/tmp/tmpw6z8m5ji.cpp:20:10: note: \u2018long int x\u2019 previously declared\
    \ here\n   20 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmpw6z8m5ji.cpp:38:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   38 |     long y = (a + t)\
    \ / 2;\n      |          ^\n/tmp/tmpw6z8m5ji.cpp:21:10: note: \u2018long int y\u2019\
    \ previously declared here\n   21 |     long y = (-b + c) / 2;\n      |      \
    \    ^\n/tmp/tmpw6z8m5ji.cpp:39:10: error: redeclaration of \u2018long int z\u2019\
    \n   39 |     long z = (-a + t) / 2;\n      |          ^\n/tmp/tmpw6z8m5ji.cpp:35:10:\
    \ note: \u2018long int z\u2019 previously declared here\n   35 |     long z =\
    \ (-a + r) / 2;\n      |          ^\n/tmp/tmpw6z8m5ji.cpp:40:10: error: redeclaration\
    \ of \u2018long int w\u2019\n   40 |     long w = (a + u) / 2;\n      |      \
    \    ^\n/tmp/tmpw6z8m5ji.cpp:32:10: note: \u2018long int w\u2019 previously declared\
    \ here\n   32 |     long w = (a + q) / 2;\n      |          ^\n/tmp/tmpw6z8m5ji.cpp:41:10:\
    \ error: redeclaration of \u2018long int x\u2019\n   41 |     long x = (-a + u)\
    \ / 2;\n      |          ^\n/tmp/tmpw6z8m5ji.cpp:20:10: note: \u2018long int x\u2019\
    \ previously declared here\n   20 |     long x = (b + c) / 2;\n      |       \
    \   ^\n/tmp"
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n\
    \    long f = std::sqrt(b * b - 4 * a * c);\n    if (e < f) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp74wf39kq: /tmp/tmp74wf39kq.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b - a;\n    long e = c - b;\n    long f = d - e;\n    if (f < 0)\n\
    \        return false;\n    if (f == 0)\n        return true;\n    long g = e\
    \ + d;\n    if (g == 0)\n        return false;\n    long h = a - b;\n    if (h\
    \ == 0)\n        return false;\n    long i = g + h;\n    if (i == 0)\n       \
    \ return false;\n    long j = e - d;\n    if (j == 0)\n        return false;\n\
    \    long k = a - c;\n    if (k == 0)\n        return false;\n    long l = b -\
    \ c;\n    if (l == 0)\n        return false;\n    long m = a + b;\n    if (m ==\
    \ 0)\n        return false;\n    long n = a + c;\n    if (n == 0)\n        return\
    \ false;\n    long o = b + c;\n    if (o == 0)\n        return false;\n    long\
    \ p = a + d;\n    if (p == 0)\n        return false;\n    long q = b + d;\n  \
    \  if (q == 0)\n        return false;\n    long r = c + d;\n    if (r == 0)\n\
    \        return false;\n    return true;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsebalirt: /tmp/tmpsebalirt.cpp:62: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / a;\n    long t2 = (-b - root) / a;\n \
    \   return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmph9qdg5wo: /tmp/tmph9qdg5wo.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = b1 + c1, b2 = a1\
    \ + c1;\n    long long ans = (a1 + b2 + c2) * (a2 + b1 + c1) * (b2 + a1 + c1);\n\
    \    long long ansa = a1 * a2 + b1 * b2 + c1 * c2;\n    long long ansb = a1 *\
    \ b2 + b1 * c2 + c1 * a2;\n    long long ansc = a1 * c2 + b1 * a2 + c1 * b2;\n\
    \    long long ansa1 = a1 * a1 + b1 * b1 + c1 * c1;\n    long long ansb1 = a1\
    \ * b1 + b1 * c1 + c1 * a1;\n    long long ansc1 = a1 * c1 + b1 * a1 + c1 * b1;\n\
    \    long long ansa2 = a1 * a2 + b1 * b2 + c1 * c2;\n    long long ansb2 = a1\
    \ * b2 + b1 * c2 + c1 * a2;\n    long long ansc2 = a1 * c2 + b1 * a2 + c1 * b2;\n\
    \    long long ansa3 = a1 * a1 + b1 * b1 + c1 * c1;\n    long long ansb3 = a1\
    \ * b1 + b1 * c1 + c1 * a1;\n    long long ansc3 = a1 * c1 + b1 * a1 + c1 * b1;\n\
    \    long long ansa4 = a1 * a2 + b1 * b2 + c1 * c2;\n    long long ansb4 = a1\
    \ * b2 + b1 * c2 + c1 * a2;\n    long long ansc4 = a1 * c2 + b1 * a2 + c1 * b2;\n\
    \    long long ansa5 = a1 * a1 + b1 * b1 + c1 * c1;\n    long long ansb5 = a1\
    \ * b1 + b1 * c1 + c1 * a1;\n    long long ansc5 = a1 * c1 + b1 * a1 + c1 * b1;\n\
    \    long long ansa6 = a1 * a2 + b1 * b2 + c1 * c2;\n    long long ansb6 = a1\
    \ * b2 + b1 * c2 + c1 * a2;\n    long long ansc6 = a1 * c2 + b1 * a2 + c1 * b2;\n\
    \    long long ansa7 = a1 * a1 + b1 * b1 + c1 * c1;\n    long long ansb7 = a1\
    \ * b1 + b1 * c1 + c1 * a1;\n    long long ansc7 = a1 * c1 + b1 * a1 + c1 * b1;\n\
    \    long long ansa8 = a1 * a2 + b1 * b2 + c1 * c2;\n\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp4ahhsnp9: /tmp/tmp4ahhsnp9.cpp:45: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    long d = b * b - 4 * a * c;\n  \
    \  if (d < 0) {\n        return false;\n    }\n    long x = (b + c) / 2;\n   \
    \ long y = (-b - c) / 2;\n    return ((x * x) + (y * y)) <= 0;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpl3dxkq_h: /tmp/tmpl3dxkq_h.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long sq = sqrt(d);\n    long\
    \ t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    if (t1 >=\
    \ 0 && t1 <= 1 && t2 >= 0 && t2 <= 1)\n        return true;\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6e6asnz0: /tmp/tmp6e6asnz0.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long ab = abs(b - a);\n    long ac = abs(c - a);\n    long bc = abs(b - c);\n\
    \    long abc = ab + ac;\n    long bca = bc + ab;\n    long abca = abc + bca;\n\
    \    long abcbc = abca + bca;\n    long abcabc = abcabc + abcbc;\n    long abcabcb\
    \ = abcabca + abcbc;\n    long abcabcbb = abcabcbb + abcbc;\n    long abcabcbc\
    \ = abcabcbc + abcbc;\n    long abcabcbcb = abcabcbcb + abcbc;\n    long abcabcbcbb\
    \ = abcabcbcbb + abcbc;\n    long abcabcbcbc = abcabcbcbc + abcbc;\n    long abcabcbcbcb\
    \ = abcabcbcbcb + abcbc;\n    long abcabcbcbcbb = abcabcbcbcbb + abcbc;\n    long\
    \ abcabcbcbcbc = abcabcbcbcbc + abcbc;\n    long abcabcbcbcbcb = abcabcbcbcbcb\
    \ + abcbc;\n    long abcabcbcbcbcbb = abcabcbcbcbcbb + abcbc;\n    long abcabcbcbcbcbc\
    \ = abcabcbcbcbcbc + abcbc;\n    long abcabcbcbcbcbcb = abcabcbcbcbcbcb + abcbc;\n\
    \    long abcabcbcbcbcbcb = abcabcbcbcbcbcb + abcbc;\n    long abcabcbcbcbcbcbc\
    \ = abcabcbcbcbcbcbc + abcbc;\n    long abcabcbcbcbcbcbcb = abcabcbcbcbcbcbcb\
    \ + abcbc;\n    long abcabcbcbcbcbcbcb = abcabcbcbcbcbcbcb + abcbc;\n    long\
    \ abcabcbcbcbcbcbcb = abcabcbcbcbcbcbcb + abcbc;\n    long abcabcbcbcbcbcbcb =\
    \ abcabcbcbcbcbcbcb + abcbc;\n    long abcabcbcbcbcbcbcbc = abcabcbcbcbcbcbcbc\
    \ + abcbc;\n    long abcabcbcbcbcbcbcbc = abcabcbcbcbcbcbcbc + abcbc;\n    long\
    \ abcabcbcbcb\n}\nint main() {\n    auto candidate = right_angle_triangle;\n \
    \   assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmph9bioqk3.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmph9bioqk3.cpp:22:20: error: \u2018abcabca\u2019\
    \ was not declared in this scope; did you mean \u2018abcabcb\u2019?\n   22 | \
    \    long abcabcb = abcabca + abcbc;\n      |                    ^~~~~~~\n   \
    \   |                    abcabcb\n/tmp/tmph9bioqk3.cpp:35:10: error: redeclaration\
    \ of \u2018long int abcabcbcbcbcbcb\u2019\n   35 |     long abcabcbcbcbcbcb =\
    \ abcabcbcbcbcbcb + abcbc;\n      |          ^~~~~~~~~~~~~~~\n/tmp/tmph9bioqk3.cpp:34:10:\
    \ note: \u2018long int abcabcbcbcbcbcb\u2019 previously declared here\n   34 |\
    \     long abcabcbcbcbcbcb = abcabcbcbcbcbcb + abcbc;\n      |          ^~~~~~~~~~~~~~~\n\
    /tmp/tmph9bioqk3.cpp:38:10: error: redeclaration of \u2018long int abcabcbcbcbcbcbcb\u2019\
    \n   38 |     long abcabcbcbcbcbcbcb = abcabcbcbcbcbcbcb + abcbc;\n      |   \
    \       ^~~~~~~~~~~~~~~~~\n/tmp/tmph9bioqk3.cpp:37:10: note: \u2018long int abcabcbcbcbcbcbcb\u2019\
    \ previously declared here\n   37 |     long abcabcbcbcbcbcbcb = abcabcbcbcbcbcbcb\
    \ + abcbc;\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmph9bioqk3.cpp:39:10: error:\
    \ redeclaration of \u2018long int abcabcbcbcbcbcbcb\u2019\n   39 |     long abcabcbcbcbcbcbcb\
    \ = abcabcbcbcbcbcbcb + abcbc;\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmph9bioqk3.cpp:37:10:\
    \ note: \u2018long int abcabcbcbcbcbcbcb\u2019 previously declared here\n   37\
    \ |     long abcabcbcbcbcbcbcb = abcabcbcbcbcbcbcb + abcbc;\n      |         \
    \ ^~~~~~~~~~~~~~~~~\n/tmp/tmph9bioqk3.cpp:40:10: error: redeclaration of \u2018\
    long int abcabcbcbcbcbcbcb\u2019\n   40 |     long abcabcbcbcbcbcbcb = abcabcbcbcbcbcbcb\
    \ + abcbc;\n      |          ^~~~~~~~~~~~~~~~~\n/tmp/tmph9bioqk3.cpp:37:10: note:\
    \ \u2018long int abcabcbcbcbcbcbcb\u2019 previously declared here\n   37 |   \
    \  long abcabcbcbcbcbcbcb = abcabcbcbcbcbcbcb + abcbc;\n      |          ^~~~~~~~~~~~~~~~~\n\
    /tmp/tmph9bioqk3.cpp:42:10: error: redeclaration of \u2018long int abcabcbcbcbcbcbcbc\u2019\
    \n   42 |     long abcabcbcbcbcbcbcbc = abcabcbcbcbcbcbcbc + abcbc;\n      | \
    \         ^~~~~~~~~~~~~~~~~~\n/tmp/tmph9bioqk3.cpp:41:10: note: \u2018long int\
    \ abcabcbcbcbcbcbcbc\u2019 previously declared here\n   41 |     lon"
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int a1 = abs(a), b1 = abs(b), c1 = abs(c);\n    long long int a2\
    \ = abs(a1), b2 = abs(b1), c2 = abs(c1);\n    long long int a3 = abs(a2), b3 =\
    \ abs(b2), c3 = abs(c2);\n    long long int a4 = abs(a3), b4 = abs(b3), c4 = abs(c3);\n\
    \    long long int a5 = abs(a4), b5 = abs(b4), c5 = abs(c4);\n    long long int\
    \ a6 = abs(a5), b6 = abs(b5), c6 = abs(c5);\n    long long int a7 = abs(a6), b7\
    \ = abs(b6), c7 = abs(c6);\n    long long int a8 = abs(a7), b8 = abs(b8), c8 =\
    \ abs(c7);\n    long long int a9 = abs(a8), b9 = abs(b9), c9 = abs(c8);\n    long\
    \ long int a10 = abs(a9), b10 = abs(b9), c10 = abs(c9);\n    long long int a11\
    \ = abs(a10), b11 = abs(b10), c11 = abs(c10);\n    long long int a12 = abs(a11),\
    \ b12 = abs(b11), c12 = abs(c11);\n    long long int a13 = abs(a12), b13 = abs(b12),\
    \ c13 = abs(c12);\n    long long int a14 = abs(a13), b14 = abs(b13), c14 = abs(c13);\n\
    \    long long int a15 = abs(a14), b15 = abs(b14), c15 = abs(c14);\n    long long\
    \ int a16 = abs(a15), b16 = abs(b15), c16 = abs(c15);\n    long long int a17 =\
    \ abs(a16), b17 = abs(b16), c17 = abs(c16);\n    long long int a18 = abs(a17),\
    \ b18 = abs(b17), c18 = abs(c17);\n    long long int a19 = abs(a18), b19 = abs(b18),\
    \ c19 = abs(c18);\n    long long int a20 = abs(a19), b20 = abs(b19), c20 = abs(c19);\n\
    \    long long int a21 = abs(a20), b21 = abs(b20), c21 = abs(c20);\n    long long\
    \ int a22 = abs(a21), b22 = abs(b21), c22 = abs(c21); \n    long long int a23\
    \ = abs(a22), b23 = abs(b\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjafnig_d.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpjafnig_d.cpp:36:46: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   36 |     long long int a23 = abs(a22),\
    \ b23 = abs(b\n      |                                            ~ ^\n      |\
    \                                              )\n   37 | }\n      | ~       \
    \                                      \n/tmp/tmpjafnig_d.cpp:37:1: warning: no\
    \ return statement in function returning non-void [-Wreturn-type]\n   37 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long sum = a+b+c;\n    long sq = sum*sum;\n    long sq1 = sq*sum;\n    long\
    \ sq2 = sq*sq;\n    long sq3 = sq1*sq;\n    long sq4 = sq1*sq1;\n    long sq5\
    \ = sq2*sq1;\n    long sq6 = sq2*sq2;\n    long sq7 = sq3*sq2;\n    long sq8 =\
    \ sq3*sq3;\n    long sq9 = sq4*sq3;\n    long sq10 = sq4*sq4;\n    long sq11 =\
    \ sq5*sq4;\n    long sq12 = sq5*sq5;\n    long sq13 = sq6*sq5;\n    long sq14\
    \ = sq6*sq6;\n    long sq15 = sq7*sq6;\n    long sq16 = sq7*sq7;\n    long sq17\
    \ = sq8*sq7;\n    long sq18 = sq8*sq8;\n    long sq19 = sq9*sq8;\n    long sq20\
    \ = sq9*sq9;\n    long sq21 = sq10*sq9;\n    long sq22 = sq10*sq10;\n    long\
    \ sq23 = sq11*sq10;\n    long sq24 = sq11*sq11;\n    long sq25 = sq12*sq11;\n\
    \    long sq26 = sq12*sq12;\n    long sq27 = sq13*sq12;\n    long sq28 = sq13*sq13;\n\
    \    long sq29 = sq14*sq13;\n    long sq30 = sq14*sq14;\n    long sq31 = sq15*sq14;\n\
    \    long sq32 = sq15*sq15;\n    long sq33 = sq16*sq15;\n    long sq34 = sq16*sq16;\n\
    \    long sq35 = sq17*sq16;\n    long sq36 = sq17*sq17;\n    long sq37 = sq18*sq17;\n\
    \    long sq38 = sq18*sq18;\n    long sq39 = sq19*sq18;\n    long sq40 = sq19*sq19;\n\
    \    long sq41 = sq20*sq19;\n    long sq42 = sq20*sq20;\n    long sq43 = sq21*sq20;\n\
    \    long sq44 = sq21*sq21;\n    long sq45 = sq22*sq21;\n    long sq46 = sq22*sq22;\n\
    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp7850bljj: /tmp/tmp7850bljj.cpp:66: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    if(a==c){\n        return true;\n    }\n    if(b==c){\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppz6_buwc: /tmp/tmppz6_buwc.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long sum = a+b+c;\n    if (sum%2 == 0)\n    {\n        return false;\n  \
    \  }\n    long mid = sum/2;\n    if (a == mid || b == mid || c == mid)\n    {\n\
    \        return true;\n    }\n    long l1 = mid+(b-a)/2;\n    long l2 = mid+(c-b)/2;\n\
    \    if (l1 == l2)\n    {\n        return true;\n    }\n    long l3 = mid+(a-c)/2;\n\
    \    if (l1 == l3 || l2 == l3)\n    {\n        return true;\n    }\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpun3m7ovo: /tmp/tmpun3m7ovo.cpp:39: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long e = std::sqrt(d);\n    long f = b + e * 0.5;\n    long g = a +\
    \ e * 0.5;\n    long h = c - e * 0.5;\n    long i = a * a + b * b + c * c - e\
    \ * e;\n    long j = 2 * b * c - a * b;\n    long k = a * e * 0.5 - b * e * 0.5\
    \ + c * e * 0.5 + e * e * 0.5;\n    long l = b * e * 0.5 - a * e * 0.5 + c * e\
    \ * 0.5 + e * e * 0.5;\n    long m = a * e * 0.5 + b * e * 0.5 + c * e * 0.5 +\
    \ e * e * 0.5;\n    long n = a * e * 0.5 - b * e * 0.5 + c * e * 0.5 + e * e *\
    \ 0.5;\n    long o = b * e * 0.5 - a * e * 0.5 + c * e * 0.5 + e * e * 0.5;\n\
    \    long p = a * e * 0.5 + b * e * 0.5 + c * e * 0.5 + e * e * 0.5;\n    long\
    \ q = a * e * 0.5 + b * e * 0.5 + c * e * 0.5 + e * e * 0.5;\n    long r = a *\
    \ e * 0.5 - b * e * 0.5 + c * e * 0.5 + e * e * 0.5;\n    long s = b * e * 0.5\
    \ - a * e * 0.5 + c * e * 0.5 + e * e * 0.5;\n    long t = a * e * 0.5 + b * e\
    \ * 0.5 + c * e * 0.5 + e * e * 0.5;\n    long u = a * e * 0.5 - b * e * 0.5 +\
    \ c * e * 0.5 + e * e * 0.5;\n    long v = b * e * 0.5 - a * e * 0.5 + c * e *\
    \ 0.5 + e * e * 0.5;\n    long w = a * e * 0.5 + b * e * 0.5 + c * e * 0.5 + e\
    \ * e * 0.5;\n    long x = a * e * 0.5 - b * e * 0.5 + c * e * 0.5 + e * e * 0.5;\n\
    \    long y = b * e * 0.5 - a * e * 0.5 + c * e * 0.5 + e * e * 0.5;\n    long\
    \ z = a * e \n}\nint main() {\n    auto candidate = right_angle_triangle;\n  \
    \  assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnvme1qiv.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpnvme1qiv.cpp:40:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   40 | }\n     \
    \ | ^\n/tmp/tmpnvme1qiv.cpp:40:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   40 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x = (long) (-b + root) / (2 * a);\n    long y = (long) (-b\
    \ - root) / (2 * a);\n    return ((x == b) || (x == -b)) && ((y == b) || (y ==\
    \ -b));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzfvbj8vy: /tmp/tmpzfvbj8vy.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b - a;\n    long e = c - b;\n    long f = d - e;\n    long g = e\
    \ - f;\n    long h = f - g;\n    long k = g - h;\n    long l = h - k;\n    long\
    \ m = k - l;\n    long n = l - m;\n    long o = m - n;\n    long p = n - o;\n\
    \    long q = o - p;\n    long r = p - q;\n    long s = q - r;\n    long t = r\
    \ - s;\n    long u = s - t;\n    long v = t - u;\n    long w = u - v;\n    long\
    \ x = v - w;\n    long y = w - x;\n    long z = x - y;\n    long a = x + y + z;\n\
    \    long b = y + z + x;\n    long c = z + x + y;\n    long d = x + y + z;\n \
    \   long e = y + z + x;\n    long f = z + x + y;\n    long g = x + y + z;\n  \
    \  long h = y + z + x;\n    long k = z + x + y;\n    long l = x + y + z;\n   \
    \ long m = y + z + x;\n    long n = z + x + y;\n    long o = x + y + z;\n    long\
    \ p = y + z + x;\n    long q = z + x + y;\n    long r = x + y + z;\n    long s\
    \ = y + z + x;\n    long t = z + x + y;\n    long u = x + y + z;\n    long v =\
    \ y + z + x;\n    long w = z + x + y;\n    long x = y + z + x;\n    long y = z\
    \ + x + y;\n    long z = x + y + z;\n    long a = x + y + z;\n    long b = y +\
    \ z + x;\n    long c = z + x + y;\n    long d = x + y + z;\n    long e = y + z\
    \ + x;\n    long f = z + x + y;\n    long g = x + y + z;\n    long h = y + z +\
    \ x;\n    long k = z + x + y;\n    long l = x + y + z;\n    long m = y + z + x;\n\
    \    long n = z + x + y;\n    long o = x + y + z;\n    long p = y + z + x;\n \
    \   long q = z + x + y;\n    long r = x + y + z;\n    long s = y + z + x;\n  \
    \  long t = z + x + y;\n    long u = x + y + z;\n    long v = y + z + x;\n   \
    \ long w = z + x + y;\n    long x = y + z + x;\n    long y = z + x + y;\n    long\
    \ z = x + \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptb98ut_u.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmptb98ut_u.cpp:35:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   35 |     long a = x + y +\
    \ z;\n      |          ^\n/tmp/tmptb98ut_u.cpp:36:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   36 |     long b = y + z + x;\n      |\
    \          ^\n/tmp/tmptb98ut_u.cpp:37:10: error: declaration of \u2018long int\
    \ c\u2019 shadows a parameter\n   37 |     long c = z + x + y;\n      |      \
    \    ^\n/tmp/tmptb98ut_u.cpp:38:10: error: redeclaration of \u2018long int d\u2019\
    \n   38 |     long d = x + y + z;\n      |          ^\n/tmp/tmptb98ut_u.cpp:14:10:\
    \ note: \u2018long int d\u2019 previously declared here\n   14 |     long d =\
    \ b - a;\n      |          ^\n/tmp/tmptb98ut_u.cpp:39:10: error: redeclaration\
    \ of \u2018long int e\u2019\n   39 |     long e = y + z + x;\n      |        \
    \  ^\n/tmp/tmptb98ut_u.cpp:15:10: note: \u2018long int e\u2019 previously declared\
    \ here\n   15 |     long e = c - b;\n      |          ^\n/tmp/tmptb98ut_u.cpp:40:10:\
    \ error: redeclaration of \u2018long int f\u2019\n   40 |     long f = z + x +\
    \ y;\n      |          ^\n/tmp/tmptb98ut_u.cpp:16:10: note: \u2018long int f\u2019\
    \ previously declared here\n   16 |     long f = d - e;\n      |          ^\n\
    /tmp/tmptb98ut_u.cpp:41:10: error: redeclaration of \u2018long int g\u2019\n \
    \  41 |     long g = x + y + z;\n      |          ^\n/tmp/tmptb98ut_u.cpp:17:10:\
    \ note: \u2018long int g\u2019 previously declared here\n   17 |     long g =\
    \ e - f;\n      |          ^\n/tmp/tmptb98ut_u.cpp:42:10: error: redeclaration\
    \ of \u2018long int h\u2019\n   42 |     long h = y + z + x;\n      |        \
    \  ^\n/tmp/tmptb98ut_u.cpp:18:10: note: \u2018long int h\u2019 previously declared\
    \ here\n   18 |     long h = f - g;\n      |          ^\n/tmp/tmptb98ut_u.cpp:43:10:\
    \ error: redeclaration of \u2018long int k\u2019\n   43 |     long k = z + x +\
    \ y;\n      |          ^\n/tmp/tmptb98ut_u.cpp:19:10: note: \u2018long int k\u2019\
    \ previously declared here\n   19 |     long k = g - h;\n      |          ^\n\
    /tmp/tmptb98ut_u.cpp:44:10: error: redeclaration of \u2018long int l\u2019\n \
    \  44 |     long l = x + y + z;\n      |          ^\n/tmp/tmptb98ut_u.cpp:20:10:"
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a == 0 || b == 0 || c == 0 ||\
    \ a + b > c || a + c > b || b + c > a) {\n        return false;\n    }\n    long\
    \ d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n    }\n   \
    \ long x = (b + c) / 2;\n    long y = (a + b) / 2;\n    long m = (a + b) / 2;\n\
    \    long n = (a + c) / 2;\n    long o = (b + c) / 2;\n    long p = (a + b) /\
    \ 2;\n    long q = (a + c) / 2;\n    long r = (b + c) / 2;\n    long s = (a +\
    \ b) / 2;\n    long t = (a + c) / 2;\n    long u = (b + c) / 2;\n    long v =\
    \ (a + c) / 2;\n    long w = (b + c) / 2;\n    long x = (b + c) / 2;\n    long\
    \ y = (a + b) / 2;\n    long m = (a + b) / 2;\n    long n = (a + c) / 2;\n   \
    \ long o = (b + c) / 2;\n    long p = (a + b) / 2;\n    long q = (a + c) / 2;\n\
    \    long r = (b + c) / 2;\n    long s = (a + b) / 2;\n    long t = (a + c) /\
    \ 2;\n    long u = (b + c) / 2;\n    long v = (a + c) / 2;\n    long w = (b +\
    \ c) / 2;\n    long x = (b + c) / 2;\n    long y = (a + b) / 2;\n    long m =\
    \ (a + b) / 2;\n    long n = (a + c) / 2;\n    long o = (b + c) / 2;\n    long\
    \ p = (a + b) / 2;\n    long q = (a + c) / 2;\n    long r = (b + c) / 2;\n   \
    \ long s = (a + b) / 2;\n    long t = (a + c) / 2;\n    long u = (b + c) / 2;\n\
    \    long v = (a + c) / 2;\n    long w = (b + c) / 2;\n    long x = (b + c) /\
    \ 2;\n    long y = (a + b) / 2;\n    long m = (a + b) / 2;\n    long n = (a +\
    \ c) / 2;\n    long o = (b + c) / 2;\n    long p = (a + b) / 2;\n    long q =\
    \ (a + c) / 2;\n    long r = (b + c) / 2;\n    long s = (a + b) / 2;\n    long\
    \ t = (a + c) / 2;\n    long u = (\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpgegzg08n.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpgegzg08n.cpp:36:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   36 |     long x = (b + c) / 2;\n      |      \
    \    ^\n/tmp/tmpgegzg08n.cpp:23:10: note: \u2018long int x\u2019 previously declared\
    \ here\n   23 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmpgegzg08n.cpp:37:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   37 |     long y = (a + b)\
    \ / 2;\n      |          ^\n/tmp/tmpgegzg08n.cpp:24:10: note: \u2018long int y\u2019\
    \ previously declared here\n   24 |     long y = (a + b) / 2;\n      |       \
    \   ^\n/tmp/tmpgegzg08n.cpp:38:10: error: redeclaration of \u2018long int m\u2019\
    \n   38 |     long m = (a + b) / 2;\n      |          ^\n/tmp/tmpgegzg08n.cpp:25:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   25 |     long m =\
    \ (a + b) / 2;\n      |          ^\n/tmp/tmpgegzg08n.cpp:39:10: error: redeclaration\
    \ of \u2018long int n\u2019\n   39 |     long n = (a + c) / 2;\n      |      \
    \    ^\n/tmp/tmpgegzg08n.cpp:26:10: note: \u2018long int n\u2019 previously declared\
    \ here\n   26 |     long n = (a + c) / 2;\n      |          ^\n/tmp/tmpgegzg08n.cpp:40:10:\
    \ error: redeclaration of \u2018long int o\u2019\n   40 |     long o = (b + c)\
    \ / 2;\n      |          ^\n/tmp/tmpgegzg08n.cpp:27:10: note: \u2018long int o\u2019\
    \ previously declared here\n   27 |     long o = (b + c) / 2;\n      |       \
    \   ^\n/tmp/tmpgegzg08n.cpp:41:10: error: redeclaration of \u2018long int p\u2019\
    \n   41 |     long p = (a + b) / 2;\n      |          ^\n/tmp/tmpgegzg08n.cpp:28:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   28 |     long p =\
    \ (a + b) / 2;\n      |          ^\n/tmp/tmpgegzg08n.cpp:42:10: error: redeclaration\
    \ of \u2018long int q\u2019\n   42 |     long q = (a + c) / 2;\n      |      \
    \    ^\n/tmp/tmpgegzg08n.cpp:29:10: note: \u2018long int q\u2019 previously declared\
    \ here\n   29 |     long q = (a + c) / 2;\n      |          ^\n/tmp/tmpgegzg08n.cpp:43:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   43 |     long r = (b + c)\
    \ / 2;\n      |          ^\n/tmp/tmpgegzg08n.cpp:30:10: note: \u2018long int r\u2019\
    \ previously declared here\n   30 |     long r = (b + c) / 2;\n      |       \
    \   ^\n/tmp/tmpgeg"
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = d*d / 2;\n  \
    \  long t1 = (-b + root) / a;\n    long t2 = (-b - root) / a;\n    return t1 >=\
    \ 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfm80_q7v: /tmp/tmpfm80_q7v.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long d = b * b -\
    \ 4 * a * c;\n    if (d < 0) {\n        return false;\n    }\n    long long root\
    \ = (long long) sqrt(d);\n    long long t1 = (-b + root) / (2 * a);\n    long\
    \ long t2 = (-b - root) / (2 * a);\n    if (t1 >= 0 && t1 <= 1 && t2 >= 0 && t2\
    \ <= 1) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp_bz5ybd0: /tmp/tmp_bz5ybd0.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c &&\
    \ b > c) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmptry59ruc: /tmp/tmptry59ruc.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long s = (-b + sqrt(d))\
    \ / (2 * a);\n    long t = (-b - sqrt(d)) / (2 * a);\n    return (s == t);\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyro_s93p.cpp: In function 'int main()':\n/tmp/tmpyro_s93p.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyro_s93p.cpp:2:\n/tmp/tmpyro_s93p.cpp:23:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root)) / (2 * a);\n    long t = (-b - sqrt(root))\
    \ / (2 * a);\n    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp8xpry5o9: /tmp/tmp8xpry5o9.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixehj67q.cpp: In function 'int main()':\n/tmp/tmpixehj67q.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixehj67q.cpp:2:\n/tmp/tmpixehj67q.cpp:26:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root))/(2*a);\n    long t = (-b - sqrt(root))/(2*a);\n\
    \    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3bmfzj7i: /tmp/tmp3bmfzj7i.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = b1 + c1;\n    long\
    \ long a3 = a1 + c1, c3 = b1 + a1;\n    long long a4 = a2 + b1, c4 = b2 + c2;\n\
    \    long long a5 = a2 + c2, c5 = b2 + a2;\n    long long a6 = a3 + c3, c6 = b3\
    \ + c3;\n    long long a7 = a3 + c3, c7 = b3 + a3;\n    long long a8 = a4 + c4,\
    \ c8 = b4 + c4;\n    long long a9 = a4 + c4, c9 = b4 + a4;\n    long long a10\
    \ = a5 + c5, c10 = b5 + c5;\n    long long a11 = a5 + c5, c11 = b5 + a5;\n   \
    \ long long a12 = a6 + c6, c12 = b6 + c6;\n    long long a13 = a6 + c6, c13 =\
    \ b6 + a6;\n    long long a14 = a7 + c7, c14 = b7 + c7;\n    long long a15 = a7\
    \ + c7, c15 = b7 + a7;\n    long long a16 = a8 + c8, c16 = b8 + c8;\n    long\
    \ long a17 = a8 + c8, c17 = b8 + a8;\n    long long a18 = a9 + c9, c18 = b9 +\
    \ c9;\n    long long a19 = a9 + c9, c19 = b9 + a9;\n    long long a20 = a10 +\
    \ c10, c20 = b10 + c10;\n    long long a21 = a10 + c10, c21 = b10 + a10;\n   \
    \ long long a22 = a11 + c11, c22 = b11 + c11;\n    long long a23 = a11 + c11,\
    \ c23 = b11 + a11;\n    long long a24 = a12 + c12, c24 = b12 + c12;\n    long\
    \ long a25 = a12 + c12, c25 = b12 + a12;\n    long long a26 = a13 + c13, c26 =\
    \ b13 + c13;\n    long long a27 = a13 + c13, c27 = b13 + a13;\n    long long a28\
    \ = a14 + c14, c28 = b14 + c14;\n    long long a29 = a14 + c14, c29 = b14 + a14;\n\
    \    long long a30 = a15 + c15, c30 = b15 + c15;\n    \n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxmbmx7pk.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpxmbmx7pk.cpp:16:34: error: \u2018b2\u2019\
    \ was not declared in this scope; did you mean \u2018c2\u2019?\n   16 |     long\
    \ long a4 = a2 + b1, c4 = b2 + c2;\n      |                                  ^~\n\
    \      |                                  c2\n/tmp/tmpxmbmx7pk.cpp:18:34: error:\
    \ \u2018b3\u2019 was not declared in this scope; did you mean \u2018c3\u2019?\n\
    \   18 |     long long a6 = a3 + c3, c6 = b3 + c3;\n      |                  \
    \                ^~\n      |                                  c3\n/tmp/tmpxmbmx7pk.cpp:20:34:\
    \ error: \u2018b4\u2019 was not declared in this scope; did you mean \u2018c4\u2019\
    ?\n   20 |     long long a8 = a4 + c4, c8 = b4 + c4;\n      |                \
    \                  ^~\n      |                                  c4\n/tmp/tmpxmbmx7pk.cpp:22:36:\
    \ error: \u2018b5\u2019 was not declared in this scope; did you mean \u2018c5\u2019\
    ?\n   22 |     long long a10 = a5 + c5, c10 = b5 + c5;\n      |              \
    \                      ^~\n      |                                    c5\n/tmp/tmpxmbmx7pk.cpp:24:36:\
    \ error: \u2018b6\u2019 was not declared in this scope; did you mean \u2018c6\u2019\
    ?\n   24 |     long long a12 = a6 + c6, c12 = b6 + c6;\n      |              \
    \                      ^~\n      |                                    c6\n/tmp/tmpxmbmx7pk.cpp:26:36:\
    \ error: \u2018b7\u2019 was not declared in this scope; did you mean \u2018c7\u2019\
    ?\n   26 |     long long a14 = a7 + c7, c14 = b7 + c7;\n      |              \
    \                      ^~\n      |                                    c7\n/tmp/tmpxmbmx7pk.cpp:28:36:\
    \ error: \u2018b8\u2019 was not declared in this scope; did you mean \u2018c8\u2019\
    ?\n   28 |     long long a16 = a8 + c8, c16 = b8 + c8;\n      |              \
    \                      ^~\n      |                                    c8\n/tmp/tmpxmbmx7pk.cpp:30:36:\
    \ error: \u2018b9\u2019 was not declared in this scope; did you mean \u2018c9\u2019\
    ?\n   30 |     long long a18 = a9 + c9, c18 = b9 + c9;\n      |              \
    \                      ^~\n      |                                    c9\n/tmp/tmpxmbmx7pk.cpp:32:38:\
    \ error: \u2018b10\u2019 was not declared in this scope; did you mean \u2018c10\u2019\
    ?\n"
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (b + d) / (2 * a);\n    long y = (-b\
    \ - d) / (2 * a);\n    return (x * x + y * y) <= 1;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjbfn4rxl: /tmp/tmpjbfn4rxl.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = abs(ab +\
    \ ac);\n    long bca = abs(bc + ab);\n    long acb = abs(ac + bc);\n    long abcb\
    \ = abs(abc + bca);\n    long bcac = abs(bca + acb);\n    long abcca = abs(abcc\
    \ + abcb);\n    long bcaca = abs(bcac + bcac);\n    long abccaa = abs(abcca);\n\
    \    long bcacaa = abs(bcaca + abcca);\n    long abccaaa = abs(abccaa + bcacaa);\n\
    \    long bcacaaa = abs(bcacaaa + abccaaa);\n    long abccaaaa = abs(abccaaaa\
    \ + bcacaaa);\n    long bcacaaaa = abs(bcacaaaa + abccaaaa);\n    long abccaaaaa\
    \ =abs(abccaaaaa + bcacaaaaa);\n    long bcacaaaaa = abs(bcacaaaaa + abccaaaaaa);\n\
    \    long abccaaaaa = abs(abccaaaaa + bcacaaaaaa);\n    long bcacaaaaa = abs(bcacaaaaa\
    \ + abccaaaaaa);\n    long abccaaaaaa = abs(abccaaaaaa + bcacaaaaaa);\n    long\
    \ bcacaaaaaa = abs(bcacaaaaaa + abccaaaaaaa);\n    long abccaaaaaaa = abs(abccaaaaaaa\
    \ + bcacaaaaaaa);\n    long bcacaaaaaaa = abs(bcacaaaaaaa + abccaaaaaaaa);\n \
    \   long abccaaaaaaaa = abs(abccaaaaaaaa + bcacaaaaaaaa);\n    long bcacaaaaaaaa\
    \ =abs(bcacaaaaaaaa + abccaaaaaaaaaa);\n    long abccaaaaaaaaa =abs(abccaaaaaaaaa\
    \ + bcacaaaaaaaaa);\n    long bcacaaaaaaaa = abs(bcacaaaaaaaa + abccaaaaaaaaa);\n\
    \    long abccaaaaaaaaa =abs(abccaaaaaaaaa + bcacaaaaaaaaa);\n    long bcacaaaaaaaaa\
    \ = abs(bcacaaaaaaaaa + abccaaaaaaaaaa);\n    long abccaaaaaaaaaa = abs(abccaaaaaaaaaa\
    \ + bcacaaaaaaaaaa);\n    long bcacaaaaaaaaaa = abs(bcacaaaaaaaaaa + abccaaaaaaaaaaa);\n\
    \    long abccaaaaaaaaa\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpshoa3d40.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpshoa3d40.cpp:21:22: error: \u2018abcc\u2019\
    \ was not declared in this scope; did you mean \u2018abcca\u2019?\n   21 |   \
    \  long abcca = abs(abcc + abcb);\n      |                      ^~~~\n      |\
    \                      abcca\n/tmp/tmpshoa3d40.cpp:29:37: error: \u2018bcacaaaaa\u2019\
    \ was not declared in this scope; did you mean \u2018bcacaaaa\u2019?\n   29 |\
    \     long abccaaaaa =abs(abccaaaaa + bcacaaaaa);\n      |                   \
    \                  ^~~~~~~~~\n      |                                     bcacaaaa\n\
    /tmp/tmpshoa3d40.cpp:30:38: error: \u2018abccaaaaaa\u2019 was not declared in\
    \ this scope; did you mean \u2018abccaaaaa\u2019?\n   30 |     long bcacaaaaa\
    \ = abs(bcacaaaaa + abccaaaaaa);\n      |                                    \
    \  ^~~~~~~~~~\n      |                                      abccaaaaa\n/tmp/tmpshoa3d40.cpp:31:10:\
    \ error: redeclaration of \u2018long int abccaaaaa\u2019\n   31 |     long abccaaaaa\
    \ = abs(abccaaaaa + bcacaaaaaa);\n      |          ^~~~~~~~~\n/tmp/tmpshoa3d40.cpp:29:10:\
    \ note: \u2018long int abccaaaaa\u2019 previously declared here\n   29 |     long\
    \ abccaaaaa =abs(abccaaaaa + bcacaaaaa);\n      |          ^~~~~~~~~\n/tmp/tmpshoa3d40.cpp:31:38:\
    \ error: \u2018bcacaaaaaa\u2019 was not declared in this scope; did you mean \u2018\
    bcacaaaa\u2019?\n   31 |     long abccaaaaa = abs(abccaaaaa + bcacaaaaaa);\n \
    \     |                                      ^~~~~~~~~~\n      |             \
    \                         bcacaaaa\n/tmp/tmpshoa3d40.cpp:34:40: error: \u2018\
    abccaaaaaaa\u2019 was not declared in this scope; did you mean \u2018abccaaaaa\u2019\
    ?\n   34 |     long bcacaaaaaa = abs(bcacaaaaaa + abccaaaaaaa);\n      |     \
    \                                   ^~~~~~~~~~~\n      |                     \
    \                   abccaaaaa\n/tmp/tmpshoa3d40.cpp:35:42: error: \u2018bcacaaaaaaa\u2019\
    \ was not declared in this scope; did you mean \u2018bcacaaaa\u2019?\n   35 |\
    \     long abccaaaaaaa = abs(abccaaaaaaa + bcacaaaaaaa);\n      |            \
    \                              ^~~~~~~~~~~\n      |                          \
    \                bcacaaaa\n/tmp/tmpshoa3d40.cpp:36:42: error: \u2018abc"
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a + b > c || a + c > b || b\
    \ + c > a) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnzmpuotn: /tmp/tmpnzmpuotn.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long sq = sqrt(d);\n\
    \    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    return\
    \ (t1 >= 0 && t1 <= 1) && (t2 >= 0 && t2 <= 1);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdcye04gd: /tmp/tmpdcye04gd.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, b2 = b1 + c1, c2 = c1\
    \ + a1;\n    long long a3 = a2 + b2, b3 = b2 + c2, c3 = c2 + a2;\n    long long\
    \ a4 = a3 + b3, b4 = b4 + c3, c4 = c4 + a3;\n    long long a5 = a4 + b4, b5 =\
    \ b5 + c4, c5 = c5 + a4;\n    long long a6 = a5 + b5, b6 = b6 + c5, c6 = c6 +\
    \ a5;\n    long long a7 = a6 + b6, b7 = b7 + c6, c7 = c7 + a6;\n    long long\
    \ a8 = a7 + b7, b8 = b8 + c7, c8 = c8 + a7;\n    long long a9 = a8 + b8, b9 =\
    \ b9 + c8, c9 = c9 + a8;\n    long long a10 = a9 + b9, b10 = b10 + c9, c10 = c10\
    \ + a9;\n    long long a11 = a10 + b10, b11 = b11 + c10, c11 = c11 + a10;\n  \
    \  long long a12 = a11 + b11, b12 = b12 + c11, c12 = c12 + a11;\n    long long\
    \ a13 = a12 + b12, b13 = b13 + c12, c13 = c13 + a12;\n    long long a14 = a13\
    \ + b13, b14 = b14 + c13, c14 = c14 + a13;\n    long long a15 = a14 + b14, b15\
    \ = b15 + c14, c15 = c15 + a14;\n    long long a16 = a15 + b15, b16 = b16 + c15,\
    \ c16 = c16 + a15;\n    long long a17 = a16 + b16, b17 = b17 + c16, c17 = c17\
    \ + a16;\n    long long a18 = a17 + b17, b18 = b18 + c17, c18 = c18 + a17;\n \
    \   long long a19 = a18 + b18, b19 = b19 + c18, c19 = c19 + a18;\n    long long\
    \ a20 = a19 + b19, b20 = b20 + c19, c20 = c20 + a19;\n    long long a21 = a20\
    \ + b20, b21 = b21 + c20, c21 = c21 + a20;\n    long long a22 = a21 + b21, b22\
    \ = b22 + c22, c22 = c22 + a21;\n    long long a23 = a22\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppbi6gnzf.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmppbi6gnzf.cpp:34:44: error: \u2018c22\u2019\
    \ was not declared in this scope; did you mean \u2018b22\u2019?\n   34 |     long\
    \ long a22 = a21 + b21, b22 = b22 + c22, c22 = c22 + a21;\n      |           \
    \                                 ^~~\n      |                               \
    \             b22\n/tmp/tmppbi6gnzf.cpp:36:1: error: expected \u2018,\u2019 or\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   36 | }\n      | ^\n/tmp/tmppbi6gnzf.cpp:36:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long long ans = (a*a + b*b - c*c)/2;\n    return ((ans % 2) == 1);\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpoebo0nc3: /tmp/tmpoebo0nc3.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixehj67q.cpp: In function 'int main()':\n/tmp/tmpixehj67q.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixehj67q.cpp:2:\n/tmp/tmpixehj67q.cpp:26:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2 * a);\n  \
    \  return (s == 0 && t == 0) || (s > 0 && t > 0);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpio43tunm: /tmp/tmpio43tunm.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / a;\n    long t2 = (-b - root) / a;\n \
    \   if (t1 < 0 || t2 < 0 || t1 > a || t2 > a) {\n        return false;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpg_s8_14x: /tmp/tmpg_s8_14x.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x = (long) (-b + root) / (2 * a);\n    long y = (long) (-b\
    \ - root) / (2 * a);\n    return (root == x) && (root == y);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp8b3zi4f7: /tmp/tmp8b3zi4f7.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long e = std::sqrt(d);\n    long f = -b + e;\n    long g = -b - e;\n\
    \    long h = -a + e;\n    long i = -a - e;\n    long j = a + e;\n    long k =\
    \ a - e;\n    long l = b + e;\n    long m = b - e;\n    long n = a + e;\n    long\
    \ o = a - e;\n    long p = b + e;\n    long q = b - e;\n    long r = a + e;\n\
    \    long s = a - e;\n    long t = b + e;\n    long u = -b - e;\n    long v =\
    \ -a + e;\n    long w = -a - e;\n    long x = a + e;\n    long y = a - e;\n  \
    \  long z = b + e;\n    long A = a;\n    long B = b;\n    long C = c; \n    long\
    \ D = a;\n    long E = b;\n    long F = c; \n    long G = a;\n    long H = b;\n\
    \    long I = c; \n    long J = a;\n    long K = b;\n    long L = c; \n    long\
    \ M = a;\n    long N = b;\n    long O = c; \n    long P = a;\n    long Q = b;\n\
    \    long R = c; \n    long S = a;\n    long T = b;\n    long U = c; \n    long\
    \ V = a;\n    long W = b;\n    long X = c; \n    long Y = a;\n    long Z = b;\n\
    \    long aa = a;\n    long ab = b;\n    long ac = c; \n    long ad = a;\n   \
    \ long ae = b;\n    long af = c; \n    long ag = a;\n    long ah = b;\n    long\
    \ ai = c; \n    long aj = a;\n    long ak = b;\n    long al = c; \n    long am\
    \ = a;\n    long an = b;\n    long ao = c; \n    long ap = a;\n    long aq = b;\n\
    \    long ar = c; \n    long as = a;\n    long at = b;\n    long au = c; \n  \
    \  long av = a;\n    long aw = b;\n    long ax = c; \n    long ay = a;\n    long\
    \ az = b;\n    long aA = a;\n    long aB = b;\n    long aC = c; \n    long aD\
    \ = a;\n    long a\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpuo1pqbd2.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpuo1pqbd2.cpp:97:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   97 | }\n      | ^\n/tmp/tmpuo1pqbd2.cpp:97:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   97 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659793894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = (a + b\
    \ + c) / 2;\n    long long b1 = (a + b) / 2;\n    long long c1 = (a + c) / 2;\n\
    \    long long a2 = (a1 + b1 + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n \
    \   long long c2 = (a1 + c2) / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n  \
    \  long long b3 = (a2 + b2) / 2;\n    long long c3 = (a2 + c3) / 2;\n    long\
    \ long a4 = (a3 + b3 + c3) / 2;\n    long long b4 = (a3 + b3) / 2;\n    long long\
    \ c4 = (a3 + c4) / 2;\n    long long a5 = (a4 + b4 + c4) / 2;\n    long long b5\
    \ = (a4 + b4) / 2;\n    long long c5 = (a4 + c5) / 2;\n    long long a6 = (a5\
    \ + b5 + c5) / 2;\n    long long b6 = (a5 + b5) / 2;\n    long long c6 = (a5 +\
    \ c6) / 2;\n    long long a7 = (a6 + b6 + c6) / 2;\n    long long b7 = (a6 + b6)\
    \ / 2;\n    long long c7 = (a6 + c7) / 2;\n    long long a8 = (a7 + b7 + c7) /\
    \ 2;\n    long long b8 = (a7 + b7) / 2;\n    long long c8 = (a7 + c8) / 2;\n \
    \   long long a9 = (a8 + b8 + c8) / 2;\n    long long b9 = (a8 + b8) / 2;\n  \
    \  long long c9 = (a8 + c9) / 2;\n    long long a10 = (a9 + b9 + c9) / 2;\n  \
    \  long long b10 = (a9 + b9) / 2;\n    long long c10 = (a9 + c10) / 2;\n    long\
    \ long a11 = (a10 + b10 + c10) / 2;\n    long long b11 = (a10 + b10) / 2;\n  \
    \  long long c11 = (a10 + c11) / 2;\n    long long a12 = (a11 + b11 + c11) / 2;\n\
    \    long long b12 = (a11 + b11) / 2;\n    long long c12 = (a11 + c12) / 2;\n\
    \    long long a13 = (a12 + b12 + c12) / 2;\n    long long b13 = (a12 + b12) /\
    \ 2;\n    long long c13 = (a12 + c13) / 2;\n    long long a14 = (a13 + b13 + c13)\
    \ / 2;\n    long long b14 = (a13 + b13) / 2;\n    long long c14 = (a13 + \n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa7q7qke8.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpa7q7qke8.cpp:55:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpa7q7qke8.cpp:54:27:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   54 |     long long\
    \ c14 = (a13 +\n      |                     ~     ^\n      |                 \
    \          )\n   55 | }\n      | ~                          \n/tmp/tmpa7q7qke8.cpp:55:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   55 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixehj67q.cpp: In function 'int main()':\n/tmp/tmpixehj67q.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixehj67q.cpp:2:\n/tmp/tmpixehj67q.cpp:26:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixehj67q.cpp: In function 'int main()':\n/tmp/tmpixehj67q.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixehj67q.cpp:2:\n/tmp/tmpixehj67q.cpp:26:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long ans = (a*a + b*b + c*c) - (a*a*a + b*b*b + c*c*c);\n    long long\
    \ sq = ans*ans;\n    long long sq1 = sq*sq;\n    long long sq2 = sq1*sq;\n   \
    \ long long sq3 = sq2*sq;\n    long long sq4 = sq3*sq;\n    long long sq5 = sq4*sq;\n\
    \    long long sq6 = sq5*sq;\n    long long sq7 = sq6*sq;\n    long long sq8 =\
    \ sq7*sq;\n    long long sq9 = sq8*sq;\n    long long sq10 = sq9*sq;\n    long\
    \ long sq11 = sq10*sq;\n    long long sq12 = sq11*sq;\n    long long sq13 = sq12*sq;\n\
    \    long long sq14 = sq13*sq;\n    long long sq15 = sq14*sq;\n    long long sq16\
    \ = sq15*sq;\n    long long sq17 = sq16*sq;\n    long long sq18 = sq17*sq;\n \
    \   long long sq19 = sq18*sq;\n    long long sq20 = sq19*sq;\n    long long sq21\
    \ = sq20*sq;\n    long long sq22 = sq21*sq;\n    long long sq23 = sq22*sq;\n \
    \   long long sq24 = sq23*sq;\n    long long sq25 = sq24*sq;\n    long long sq26\
    \ = sq25*sq;\n    long long sq27 = sq26*sq;\n    long long sq28 = sq27*sq;\n \
    \   long long sq29 = sq28*sq;\n    long long sq30 = sq29*sq;\n    long long sq31\
    \ = sq30*sq;\n    long long sq32 = sq31*sq;\n    long long sq33 = sq32*sq;\n \
    \   long long sq34 = sq33*sq;\n    long long sq35 = sq34*sq;\n    long long sq36\
    \ = sq35*sq;\n    long long sq37 = sq36*sq;\n    long long sq38 = sq37*sq;\n \
    \   long long sq39 = sq38*sq;\n    long long sq40 = sq39*sq;\n    long long sq41\
    \ = sq40\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkpzq9wjg.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpkpzq9wjg.cpp:57:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   57 | }\n     \
    \ | ^\n/tmp/tmpkpzq9wjg.cpp:57:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a>b){\n        long temp=a;\n        a=b;\n        b=temp;\n    }\n  \
    \  if(a>c){\n        long temp=a;\n        a=c;\n        c=temp;\n    }\n    if(b>c){\n\
    \        long temp=b;\n        b=c;\n        c=temp;\n    }\n    if(a==b){\n \
    \       if(a==c){\n            return true;\n        }\n        return false;\n\
    \    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n        return\
    \ false;\n    }\n    long long ans=0;\n    long long d1=(b*b)-(a*c);\n    long\
    \ long d2=(b*c)-(a*b);\n    long long d3=(c*c)-(a*a);\n    if(d1==0){\n      \
    \  if(d2==0){\n            if(d3==0){\n                return true;\n        \
    \    }\n            return false;\n        }\n        return false;\n    }\n \
    \   if(d2==0){\n        if(d3==0){\n            return false;\n        }\n   \
    \     return false;\n    }\n    if(d3==0){\n        return false;\n    }\n   \
    \ long long d=(d1*d1)+(d2*d2)+(d3*d3);\n    if(d==0){\n        return false;\n\
    \    }\n    long long e=(a*d1)+(b*d2)+(c*d3);\n    if(e==0){\n        return false;\n\
    \    }\n    long long f=(d*d1)+(a*d2)+(b*d3);\n    if(f==0){\n        return false;\n\
    \    }\n    ans=((d*d1)-(a*d2))*((d*d1)-(a*d2))+((d*d3)-(a*d2))*((d*d3)-(a*d2))+((d*d3)-(a*d3))*((d*d3)-(a*d3));\n\
    \    if(ans==0){\n        return false;\n    }\n    ans=((d*d1)-(a*d3))*((d*d1)-(a*d3))+((d*d2)-(a*d3))*((d*d2)-(a*d3))+((d*d3)-(a*d3))*((d*d3)-(a*d3));\n\
    \    if(ans==0){\n        return false;\n    }\n    ans=((d*d1)-(a*d2))*((d*d1)-(a*d2))+((d*d3)-(a*d2))*((d\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpa1qmjxq0.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpa1qmjxq0.cpp:83:60: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   83 |     ans=((d*d1)-(a*d2))*((d*d1)-(a*d2))+((d*d3)-(a*d2))*((d\n\
    \      |                                                          ~ ^\n      |\
    \                                                            )\n   84 | }\n  \
    \    | ~                                                           \n/tmp/tmpa1qmjxq0.cpp:83:60:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   83 |     ans=((d*d1)-(a*d2))*((d*d1)-(a*d2))+((d*d3)-(a*d2))*((d\n\
    \      |                                                         ~  ^\n      |\
    \                                                            )\n   84 | }\n  \
    \    | ~                                                           \n/tmp/tmpa1qmjxq0.cpp:83:60:\
    \ error: expected \u2018;\u2019 before \u2018}\u2019 token\n   83 |     ans=((d*d1)-(a*d2))*((d*d1)-(a*d2))+((d*d3)-(a*d2))*((d\n\
    \      |                                                            ^\n      |\
    \                                                            ;\n   84 | }\n  \
    \    | ~                                                           \n/tmp/tmpa1qmjxq0.cpp:84:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n   84 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659793894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    if(a==c){\n        return true;\n    }\n    if(b==c){\n        return true;\n\
    \    }\n    if(a>b){\n        if(a>c){\n            return true;\n        }\n\
    \    }\n    if(b>c){\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp2qc7x8e8: /tmp/tmp2qc7x8e8.cpp:37: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b) - (c * c);\n    if (ans == 0)\n        return true;\n    if (ans < 0)\n \
    \       return false;\n    long long sq = ans * (ans - 1);\n    long long sq2\
    \ = sq * (sq - 1);\n    long long sq3 = sq * (sq - 2);\n    long long sq4 = sq\
    \ * (sq - 3);\n    long long sq5 = sq * (sq - 4);\n    long long sq6 = sq * (sq\
    \ - 5);\n    long long sq7 = sq * (sq - 6);\n    long long sq8 = sq * (sq - 7);\n\
    \    long long sq9 = sq * (sq - 8);\n    long long sq10 = sq * (sq - 9);\n   \
    \ long long sq11 = sq * (sq - 10);\n    long long sq12 = sq * (sq - 11);\n   \
    \ long long sq13 = sq * (sq - 12);\n    long long sq14 = sq * (sq - 13);\n   \
    \ long long sq15 = sq * (sq - 14);\n    long long sq16 = sq * (sq - 15);\n   \
    \ long long sq17 = sq * (sq - 16);\n    long long sq18 = sq * (sq - 17);\n   \
    \ long long sq19 = sq * (sq - 18);\n    long long sq20 = sq * (sq - 19);\n   \
    \ long long sq21 = sq * (sq - 20);\n    long long sq22 = sq * (sq - 21);\n   \
    \ long long sq23 = sq * (sq - 22);\n    long long sq24 = sq * (sq - 23);\n   \
    \ long long sq25 = sq * (sq - 24);\n    long long sq26 = sq * (sq - 25);\n   \
    \ long long sq27 = sq * (sq - 26);\n    long long sq28 = sq * (sq - 27);\n   \
    \ long long sq29 = sq * (sq - 28);\n    long long sq30 = sq * (sq - 29);\n   \
    \ long long sq31 = sq * (sq - 30);\n    long long sq32 = sq * (sq - 31);\n   \
    \ long long sq33 = sq * (sq - 32);\n    long long sq34 = sq * (sq - 33);\n   \
    \ long long sq35 = sq * (sq - 34);\n    long long sq36 = sq * (sq - 35);\n   \
    \ long long sq37 = sq * (sq - 36);\n    long long sq38 = sq * (sq - 37);\n   \
    \ long long sq39 = sq * (sq - 38);\n    long long sq40 = sq * (sq - \n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqfyybunu.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpqfyybunu.cpp:58:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   58 | }\n      | ^\n/tmp/tmpqfyybunu.cpp:57:32:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   57 |     long long\
    \ sq40 = sq * (sq -\n      |                           ~    ^\n      |       \
    \                         )\n   58 | }\n      | ~                            \
    \   \n/tmp/tmpqfyybunu.cpp:58:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   58 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b||a==c||b==c)\n        return false;\n    if(a>b&&a>c)\n        return\
    \ true;\n    if(b>a&&b>c)\n        return true;\n    if(c>a&&c>b)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpba3_3c5w: /tmp/tmpba3_3c5w.cpp:27: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659793894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv_ld48g8: /tmp/tmpv_ld48g8.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (b + c) / 2;\n    long y = (-b - c)\
    \ / 2;\n    long m = (a + b) / 2;\n    long n = (-a + b) / 2;\n    long o = (a\
    \ + c) / 2;\n    long p = (-a + c) / 2;\n    long q = (b + c) / 2;\n    long r\
    \ = (-b + c) / 2;\n    long s = (a + b) / 2;\n    long t = (-a + b) / 2;\n   \
    \ long u = (a + c) / 2;\n    long v = (-a + c) / 2;\n    long w = (b + c) / 2;\n\
    \    long x = (b + c) / 2;\n    long y = (-b - c) / 2;\n    long m = (a + b) /\
    \ 2;\n    long n = (-a + b) / 2;\n    long o = (a + c) / 2;\n    long p = (-a\
    \ + c) / 2;\n    long q = (b + c) / 2;\n    long r = (-b + c) / 2;\n    long s\
    \ = (a + b) / 2;\n    long t = (-a + b) / 2;\n    long u = (a + c) / 2;\n    long\
    \ v = (-a + c) / 2;\n    long w = (b + c) / 2;\n    long x = (b + c) / 2;\n  \
    \  long y = (-b - c) / 2;\n    long m = (a + b) / 2;\n    long n = (-a + b) /\
    \ 2;\n    long o = (a + c) / 2;\n    long p = (-a + c) / 2;\n    long q = (b +\
    \ c) / 2;\n    long r = (-b + c) / 2;\n    long s = (a + b) / 2;\n    long t =\
    \ (-a + b) / 2;\n    long u = (a + c) / 2;\n    long v = (-a + c) / 2;\n    long\
    \ w = (b + c) / 2;\n    long x = (b + c) / 2;\n    long y = (-b - c) / 2;\n  \
    \  long m = (a + b) / 2;\n    long n = (-a + b) / 2;\n    long o = (a + c) / 2;\n\
    \    long p = (-a + c) / 2;\n    long q = (b + c) / 2;\n    long r = (-b + c)\
    \ / 2;\n    long s = (a + b) / 2;\n    long t = (-a + b) / 2;\n    long u = (a\
    \ + c) / 2;\n    long v = (-a + c) / 2;\n    \n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyg3di7sa.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpyg3di7sa.cpp:31:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   31 |     long x = (b + c) / 2;\n      |      \
    \    ^\n/tmp/tmpyg3di7sa.cpp:18:10: note: \u2018long int x\u2019 previously declared\
    \ here\n   18 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmpyg3di7sa.cpp:32:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   32 |     long y = (-b - c)\
    \ / 2;\n      |          ^\n/tmp/tmpyg3di7sa.cpp:19:10: note: \u2018long int y\u2019\
    \ previously declared here\n   19 |     long y = (-b - c) / 2;\n      |      \
    \    ^\n/tmp/tmpyg3di7sa.cpp:33:10: error: redeclaration of \u2018long int m\u2019\
    \n   33 |     long m = (a + b) / 2;\n      |          ^\n/tmp/tmpyg3di7sa.cpp:20:10:\
    \ note: \u2018long int m\u2019 previously declared here\n   20 |     long m =\
    \ (a + b) / 2;\n      |          ^\n/tmp/tmpyg3di7sa.cpp:34:10: error: redeclaration\
    \ of \u2018long int n\u2019\n   34 |     long n = (-a + b) / 2;\n      |     \
    \     ^\n/tmp/tmpyg3di7sa.cpp:21:10: note: \u2018long int n\u2019 previously declared\
    \ here\n   21 |     long n = (-a + b) / 2;\n      |          ^\n/tmp/tmpyg3di7sa.cpp:35:10:\
    \ error: redeclaration of \u2018long int o\u2019\n   35 |     long o = (a + c)\
    \ / 2;\n      |          ^\n/tmp/tmpyg3di7sa.cpp:22:10: note: \u2018long int o\u2019\
    \ previously declared here\n   22 |     long o = (a + c) / 2;\n      |       \
    \   ^\n/tmp/tmpyg3di7sa.cpp:36:10: error: redeclaration of \u2018long int p\u2019\
    \n   36 |     long p = (-a + c) / 2;\n      |          ^\n/tmp/tmpyg3di7sa.cpp:23:10:\
    \ note: \u2018long int p\u2019 previously declared here\n   23 |     long p =\
    \ (-a + c) / 2;\n      |          ^\n/tmp/tmpyg3di7sa.cpp:37:10: error: redeclaration\
    \ of \u2018long int q\u2019\n   37 |     long q = (b + c) / 2;\n      |      \
    \    ^\n/tmp/tmpyg3di7sa.cpp:24:10: note: \u2018long int q\u2019 previously declared\
    \ here\n   24 |     long q = (b + c) / 2;\n      |          ^\n/tmp/tmpyg3di7sa.cpp:38:10:\
    \ error: redeclaration of \u2018long int r\u2019\n   38 |     long r = (-b + c)\
    \ / 2;\n      |          ^\n/tmp/tmpyg3di7sa.cpp:25:10: note: \u2018long int r\u2019\
    \ previously declared here\n   25 |     long r = (-b + c) / 2;\n      |      \
    \    ^\n/tm"
  stdout: ''
  timestamp: 1659793894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long sq = sqrt(d);\n    long\
    \ t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    return (t1\
    \ >= 0 && t1 <= 1) && (t2 >= 0 && t2 <= 1);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpndcwvbxm: /tmp/tmpndcwvbxm.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    if (t1 >= 0 && t1 <= 1) {\n        return true;\n    }\n    if\
    \ (t2 >= 0 && t2 <= 1) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpm063axsd.cpp: In function 'int main()':\n/tmp/tmpm063axsd.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpm063axsd.cpp:2:\n/tmp/tmpm063axsd.cpp:30:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    else if(a==c){\n        if(b==c){\n            return true;\n        }\n\
    \    }\n    else if(b==c){\n        if(a==b){\n            return true;\n    \
    \    }\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpa3n58s4l.cpp: In function 'int main()':\n/tmp/tmpa3n58s4l.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpa3n58s4l.cpp:2:\n/tmp/tmpa3n58s4l.cpp:33:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long int a1 = (a\
    \ + b + c) / 2;\n    long long int b1 = (a + b) / 2;\n    long long int c1 = (a\
    \ + b + c) / 2;\n    long long int a2 = (a1 + b + c) / 2;\n    long long int b2\
    \ = (a1 + b) / 2;\n    long long int c2 = (a1 + b + c) / 2;\n    long long int\
    \ a3 = (b1 + c + a) / 2;\n    long long int b3 = (b1 + c) / 2;\n    long long\
    \ int c3 = (b1 + c + a) / 2;\n    long long int a4 = (b2 + c + a) / 2;\n    long\
    \ long int b4 = (b2 + c) / 2;\n    long long int c4 = (b2 + c + a) / 2;\n    long\
    \ long int a5 = (c2 + a + b) / 2;\n    long long int b5 = (c2 + b) / 2;\n    long\
    \ long int c5 = (c2 + a + b) / 2;\n    long long int a6 = (a3 + b + c) / 2;\n\
    \    long long int b6 = (a3 + b) / 2;\n    long long int c6 = (a3 + b + c) / 2;\n\
    \    long long int a7 = (b3 + c + a) / 2;\n    long long int b7 = (b3 + c) / 2;\n\
    \    long long int c7 = (b3 + c + a) / 2;\n    long long int a8 = (b4 + c + a)\
    \ / 2;\n    long long int b8 = (b4 + c) / 2;\n    long long int c8 = (b4 + c +\
    \ a) / 2;\n    long long int a9 = (c5 + a + b) / 2;\n    long long int b9 = (c5\
    \ + b) / 2;\n    long long int c9 = (c5 + a + b) / 2;\n    long long int a10 =\
    \ (a6 + b + c) / 2;\n    long long int b10 = (a6 + b) / 2;\n    long long int\
    \ c10 = (a6 + b + c) / 2;\n    long long int a11 = (b7 + c + a) / 2;\n    long\
    \ long int b11 = (b7 + c) / 2;\n    long long int c11 = (b7 + c + a) / 2;\n  \
    \  long long int a12 = (b8 + c + a) / 2;\n    long long int b12 = (b8 + c) / 2;\n\
    \    long long int c12 = (b8 + c + a) / 2;\n    long long int a13 = (c9 + a +\
    \ b) / 2;\n    long long int b13 = (c9 + b) / 2;\n    long long int c13 = (c9\
    \ + a + b) / 2;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmptp73i5a5: /tmp/tmptp73i5a5.cpp:55: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        if (b > c) {\n            return true;\n        } else {\n          \
    \  return false;\n        }\n    } else if (b > a && b > c) {\n        if (c >\
    \ a) {\n            return true;\n        } else {\n            return false;\n\
    \        }\n    } else if (c > a && c > b) {\n        return true;\n    } else\
    \ {\n        return false;\n    }\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpyas1sq8v: /tmp/tmpyas1sq8v.cpp:34: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a>b&&b>c&&c>a){\n        return true;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdh6mi0jr: /tmp/tmpdh6mi0jr.cpp:21: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (b + c) / 2;\n    long y = (-b - c)\
    \ / 2;\n    long m = (long) sqrt(d);\n    long n = (long) sqrt(a * a + b * b);\n\
    \    long o = (long) sqrt(a * a + c * c);\n    long p = (long) sqrt(b * b + c\
    \ * c);\n    long q = (long) sqrt(a * a + b * b + c * c);\n    long r = (a * b\
    \ + c * c) / 2;\n    long s = (a + b + c) / 2;\n    long t = (a + b + c) / 2;\n\
    \    long u = (a + b + c) / 2;\n    long v = (a + b + c) / 2;\n    long w = (a\
    \ + b + c) / 2;\n    long x = (long) sqrt(a * a + b * b + c * c);\n    long y\
    \ = (long) sqrt(a * a + c * c + b * b);\n    long z = (long) sqrt(a * a + b *\
    \ b + c * c);\n    long x1 = (long) sqrt(a * a + b * b + c * c);\n    long y1\
    \ = (long) sqrt(a * a + c * c + b * b);\n    long z1 = (long) sqrt(a * a + b *\
    \ b + c * c);\n    long x2 = (long) sqrt(a * a + b * b + c * c);\n    long y2\
    \ = (long) sqrt(a * a + c * c + b * b);\n    long z2 = (long) sqrt(a * a + b *\
    \ b + c * c);\n    long x3 = (long) sqrt(a * a + b * b + c * c);\n    long y3\
    \ = (long) sqrt(a * a + c * c + b * b);\n    long z3 = (long) sqrt(a * a + b *\
    \ b + c * c);\n    long x4 = (long) sqrt(a * a + b * b + c * c);\n    long y4\
    \ = (long) sqrt(a * a + c * c + b * b);\n    long z4 = (long) sqrt(a * a + b *\
    \ b + c * c);\n    long x5 = (long) sqrt(a * a + b * b + c * c);\n    long y5\
    \ = (long) sqrt(a * a + c * c + b * b);\n    long z5 = (long) sqrt(a * a + b *\
    \ b + c * c);\n    long x6 = (long) sqrt(a * a + b * b + c * c);\n    long y6\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp0r14vnc.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpp0r14vnc.cpp:31:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   31 |     long x = (long) sqrt(a * a + b * b +\
    \ c * c);\n      |          ^\n/tmp/tmpp0r14vnc.cpp:18:10: note: \u2018long int\
    \ x\u2019 previously declared here\n   18 |     long x = (b + c) / 2;\n      |\
    \          ^\n/tmp/tmpp0r14vnc.cpp:32:10: error: redeclaration of \u2018long int\
    \ y\u2019\n   32 |     long y = (long) sqrt(a * a + c * c + b * b);\n      | \
    \         ^\n/tmp/tmpp0r14vnc.cpp:19:10: note: \u2018long int y\u2019 previously\
    \ declared here\n   19 |     long y = (-b - c) / 2;\n      |          ^\n/tmp/tmpp0r14vnc.cpp:51:1:\
    \ error: expected initializer before \u2018}\u2019 token\n   51 | }\n      | ^\n\
    /tmp/tmpp0r14vnc.cpp:51:1: warning: control reaches end of non-void function [-Wreturn-type]\n\
    \   51 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0) return true;\n    if (a == 0 || b == 0 || c == 0) return false;\n\
    \    if (a + b > c) return right_angle_triangle(a, c - b, c);\n    if (a + c >\
    \ b) return right_angle_triangle(a - b, b, c);\n    if (b + c > a) return right_angle_triangle(a,\
    \ b - c, c);\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmphy2rcgeo: /tmp/tmphy2rcgeo.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a == 0 || b == 0 || c == 0 ||\
    \ a + b > c || a + c > b || b + c > a) {\n        return false;\n    }\n    return\
    \ true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwm4t5erf: /tmp/tmpwm4t5erf.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a + b > c || a + c > b || b\
    \ + c > a) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnzmpuotn: /tmp/tmpnzmpuotn.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1\
    \ + c1;\n    return (a2 == b2 || a2 == c2 || b2 == c2);\n}\nint main() {\n   \
    \ auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5z2j_op7: /tmp/tmp5z2j_op7.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return false;\n    }\n    if (b > c && b > a) {\n        return false;\n\
    \    }\n    if (c > a && c > b) {\n        return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmphd4w4ira: /tmp/tmphd4w4ira.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = a + b\
    \ + c;\n    if (ans % 2 == 0) {\n        return false;\n    }\n    long long s\
    \ = ans / 2;\n    long long t = ans / 2 - 1;\n    long long u = (a + b) / 2;\n\
    \    long long v = (c + b) / 2;\n    long long w = (c + a) / 2;\n    long long\
    \ x = (a * b) / 2;\n    long long y = (b * c) / 2;\n    long long z = (c * a)\
    \ / 2;\n    long long t1 = (a + b) / 2;\n    long long t2 = (c + b) / 2;\n   \
    \ long long t3 = (c + a) / 2;\n    long long t4 = (a + b) / 2;\n    long long\
    \ t5 = (c * a) / 2;\n    long long t6 = (b * c) / 2;\n    long long t7 = (c *\
    \ a) / 2;\n    long long t8 = (a + b) / 2;\n    long long t9 = (c * a) / 2;\n\
    \    long long t10 = (b * c) / 2;\n    long long t11 = (c * a) / 2;\n    long\
    \ long t12 = (a + b) / 2;\n    long long t13 = (c * a) / 2;\n    long long t14\
    \ = (b * c) / 2;\n    long long t15 = (c * a) / 2;\n    long long t16 = (a + b)\
    \ / 2;\n    long long t17 = (c * a) / 2;\n    long long t18 = (b * c) / 2;\n \
    \   long long t19 = (c * a) / 2;\n    long long t20 = (a + b) / 2;\n    long long\
    \ t21 = (c + b) / 2;\n    long long t22 = (c + a) / 2;\n    long long t23 = (a\
    \ + b) / 2;\n    long long t24 = (c * a) / 2;\n    long long t25 = (b * c) / 2;\n\
    \    long long t26 = (c * a) / 2;\n    long long t27 = (a + b) / 2;\n    long\
    \ long t28 = (c * a) / 2;\n    long long t29 = (b * c) / 2;\n    long long t30\
    \ = (c * a) / 2;\n    long long t31 = (a + b) / 2;\n    long long t32 = (c * a)\
    \ / 2;\n    long long t33 = (b * c) / 2;\n    long long t34 = (c * a) / 2;\n \
    \   long long t35 = (a + b) / 2;\n    long long t36 = (c * a) / 2;\n    long long\
    \ t37 = (b * c) / 2;\n\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmplki0h30a: /tmp/tmplki0h30a.cpp:66: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (-b + sqrt(d)) / (2 * a);\n    long\
    \ y = (-b - sqrt(d)) / (2 * a);\n    return (x >= 0 && x <= 1 && y >= 0 && y <=\
    \ 1);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpm5_csqef: /tmp/tmpm5_csqef.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long e = sqrt(d);\n    long f = (b + e * (b - c)) / 2;\n    long g =\
    \ (a + e * (a - c)) / 2;\n    return ((f < 0 && g > 0) || (f > 0 && g < 0));\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5lxrtd8v: /tmp/tmp5lxrtd8v.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixehj67q.cpp: In function 'int main()':\n/tmp/tmpixehj67q.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixehj67q.cpp:2:\n/tmp/tmpixehj67q.cpp:26:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(b>c){\n        return\
    \ false;\n    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpg94fsn1y: /tmp/tmpg94fsn1y.cpp:39: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b+c){\n        return true;\n    }\n    if(a==b){\n        return true;\n\
    \    }\n    if(a==c){\n        return true;\n    }\n    if(b==c){\n        return\
    \ true;\n    }\n    if(a>b+c){\n        return false;\n    }\n    if(a>b){\n \
    \       return false;\n    }\n    if(a>c){\n        return false;\n    }\n   \
    \ if(b>c){\n        return false;\n    }\n    if(b>a){\n        return false;\n\
    \    }\n    if(c>a){\n        return false;\n    }\n    if(c>b){\n        return\
    \ false;\n    }\n    if(a>b+c){\n        return false;\n    }\n    if(a>b){\n\
    \        return false;\n    }\n    if(a>c){\n        return false;\n    }\n  \
    \  if(b>c){\n        return false;\n    }\n    if(b>a){\n        return false;\n\
    \    }\n    if(c>a){\n        return false;\n    }\n    if(c>b){\n        return\
    \ false;\n    }\n    if(a>b+c){\n        return false;\n    }\n    if(a>b){\n\
    \        return false;\n    }\n    if(a>c){\n        return false;\n    }\n  \
    \  if(b>c){\n        return false;\n    }\n    if(b>a){\n        return false;\n\
    \    }\n    if(c>a){\n        return false;\n    }\n    if(c>b){\n        return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpa87x60x6: /tmp/tmpa87x60x6.cpp:93: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = d*d / 2;\n  \
    \  long t1 = (-b + root) / a;\n    long t2 = (-b - root) / a;\n    return t1 >=\
    \ 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpfm80_q7v: /tmp/tmpfm80_q7v.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root))/2*a;\n    long t = (-b - sqrt(root))/2*a;\n\
    \    if (s == t) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc6eox_wu: /tmp/tmpc6eox_wu.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (b + d) / (2 * a);\n    long y = (-b\
    \ - d) / (2 * a);\n    if (x == y && x > 0)\n        return true;\n    return\
    \ false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnynn7fi8: /tmp/tmpnynn7fi8.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b) - (c * a);\n    if (ans < 0)\n        return false;\n    return true;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpribvx2dq: /tmp/tmpribvx2dq.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, b2 = a1 + c1, c2 = b1\
    \ + c1;\n    long long a3 = a2 + b2, b3 = a2 + c2, c3 = b2 + c2;\n    long long\
    \ a4 = a3 + b3, b4 = a3 + c3, c4 = b3 + c3;\n    long long a5 = a4 + b4, b5 =\
    \ a4 + c4, c5 = b4 + c4;\n    long long a6 = a5 + b5, b6 = a5 + c5, c6 = b5 +\
    \ c5;\n    long long a7 = a6 + b6, b7 = a6 + c6, c7 = b6 + c6;\n    long long\
    \ a8 = a7 + b7, b8 = a7 + c7, c9 = b7 + c7;\n    long long a9 = a8 + b8, b9 =\
    \ a8 + c8, c10 = b8 + c8;\n    long long a10 = a9 + b9, b10 = a9 + c9, c11 = b9\
    \ + c9;\n    long long a11 = a10 + b10, b11 = a10 + c10, c12 = b10 + c10;\n  \
    \  long long a12 = a11 + b11, b12 = a11 + c11, c13 = b11 + c11;\n    long long\
    \ a13 = a12 + b12, b13 = a12 + c12, c14 = b12 + c12;\n    long long a14 = a13\
    \ + b13, b14 = a13 + c13, c15 = b13 + c13;\n    long long a15 = a14 + b14, b15\
    \ = a14 + c14, c16 = b14 + c14;\n    long long a16 = a15 + b15, b16 = a15 + c15,\
    \ c17 = b15 + c15;\n    long long a17 = a16 + b16, b17 = a16 + c16, c18 = b16\
    \ + c16;\n    long long a18 = a17 + b17, b18 = a17 + c17, c19 = b17 + c17;\n \
    \   long long a19 = a18 + b18, b19 = a18 + c18, c20 = b18 + c18;\n    long long\
    \ a20 = a19 + b19, b20 = a19 + c19, c21 = b19 + c19;\n    long long a21 = 0LL,\
    \ b21 = 0LL, c22 = 0LL;\n    long long a22 = a20 + b20, b22 = a20 + c21, c23 =\
    \ b20 + c\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp346dkusu.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp346dkusu.cpp:21:39: error: \u2018c8\u2019\
    \ was not declared in this scope; did you mean \u2018c9\u2019?\n   21 |     long\
    \ long a9 = a8 + b8, b9 = a8 + c8, c10 = b8 + c8;\n      |                   \
    \                    ^~\n      |                                       c9\n/tmp/tmp346dkusu.cpp:23:44:\
    \ error: \u2018c10\u2019 was not declared in this scope; did you mean \u2018c11\u2019\
    ?\n   23 |     long long a11 = a10 + b10, b11 = a10 + c10, c12 = b10 + c10;\n\
    \      |                                            ^~~\n      |             \
    \                               c11\n/tmp/tmp346dkusu.cpp:25:44: error: \u2018\
    c12\u2019 was not declared in this scope; did you mean \u2018c13\u2019?\n   25\
    \ |     long long a13 = a12 + b12, b13 = a12 + c12, c14 = b12 + c12;\n      |\
    \                                            ^~~\n      |                    \
    \                        c13\n/tmp/tmp346dkusu.cpp:27:44: error: \u2018c14\u2019\
    \ was not declared in this scope; did you mean \u2018c15\u2019?\n   27 |     long\
    \ long a15 = a14 + b14, b15 = a14 + c14, c16 = b14 + c14;\n      |           \
    \                                 ^~~\n      |                               \
    \             c15\n/tmp/tmp346dkusu.cpp:29:44: error: \u2018c16\u2019 was not\
    \ declared in this scope; did you mean \u2018c17\u2019?\n   29 |     long long\
    \ a17 = a16 + b16, b17 = a16 + c16, c18 = b16 + c16;\n      |                \
    \                            ^~~\n      |                                    \
    \        c17\n/tmp/tmp346dkusu.cpp:31:44: error: \u2018c18\u2019 was not declared\
    \ in this scope; did you mean \u2018c19\u2019?\n   31 |     long long a19 = a18\
    \ + b18, b19 = a18 + c18, c20 = b18 + c18;\n      |                          \
    \                  ^~~\n      |                                            c19\n\
    /tmp/tmp346dkusu.cpp:35:1: error: expected \u2018,\u2019 or \u2018;\u2019 before\
    \ \u2018}\u2019 token\n   35 | }\n      | ^\n/tmp/tmp346dkusu.cpp:35:1: warning:\
    \ no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793895
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long ad = abs(d - a);\n\
    \    long bd = abs(b - d);\n    long cd = abs(c - d);\n    long abc = ab + ac;\n\
    \    long bcd = bc + bd;\n    long acd = ac + ad;\n    long abcd = abc + bcd;\n\
    \    long acbd = acd + bcd;\n    long abcdb = abc + bcd;\n    long acdbc = acd\
    \ + bcd;\n    long abcdbc = abc + bcd;\n    long acdbcd = acd + bcd;\n    long\
    \ abcdbcd = abc + bcd;\n    long acdbcdb = acd + bcd;\n    long abcdbcdbc = abc\
    \ + bcd;\n    long acdbcdbcd = acd + bcd;\n    long abcdbcdbcd = abc + bcd;\n\
    \    long acdbcdbcdb = acd + bcd;\n    long abcdbcdbcdbc = abc + bcd;\n    long\
    \ acdbcdbcdbcd = acd + bcd;\n    long abcdbcdbcdbcd = abc + bcd;\n    long acdbcdbcdbcdb\
    \ = acd + bcd;\n    long abcdbcdbcdbcdbc = abc + bcd;\n    long acdbcdbcdbcdbcd\
    \ = acd + bcd;\n    long abcdbcdbcdbcdbcd = abc + bcd;\n    long acdbcdbcdbcdbcdb\
    \ = acd + bcd;\n    long abcdbcdbcdbcdbcdbc = abc + bcd;\n    long acdbcdbcdbcdbcdbcd\
    \ = acd + bcd;\n    long abcdbcdbcdbcdbcdbcd = abc + bcd;\n    long acdbcdbcdbcdbcdbcdb\
    \ = acd + bcd;\n    long abcdbcdbcdbcdbcdbcdb = abc + bcd;\n    long acdbcdbcdbcdbcdbcdbc\
    \ = acd + bcd;\n    long abcdbcdbcdbcdbcdbcdbc = abc + bcd;\n    long acdbcdbcdbcdbcdbcdbc\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmwuly784.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpmwuly784.cpp:16:19: error: \u2018d\u2019\
    \ was not declared in this scope; did you mean \u2018ad\u2019?\n   16 |     long\
    \ ad = abs(d - a);\n      |                   ^\n      |                   ad\n\
    /tmp/tmpmwuly784.cpp:50:1: error: expected initializer before \u2018}\u2019 token\n\
    \   50 | }\n      | ^\n/tmp/tmpmwuly784.cpp:50:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root))/2*a;\n    long t = (-b - sqrt(root))/2*a;\n\
    \    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwdgv30yu: /tmp/tmpwdgv30yu.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c &&\
    \ b > c) {\n        return true;\n    }\n    return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmptry59ruc: /tmp/tmptry59ruc.cpp:20: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixehj67q.cpp: In function 'int main()':\n/tmp/tmpixehj67q.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixehj67q.cpp:2:\n/tmp/tmpixehj67q.cpp:26:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n\
    \    long f = b + e * (b - c);\n    long g = a + e * (a - c);\n    long h = a\
    \ - e * (a - b);\n    return ((f < 0 && g > 0) || (f > 0 && g < 0) || (h < 0 &&\
    \ f < 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv4tzz0qv: /tmp/tmpv4tzz0qv.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n    }\n\
    \    if(a==c){\n        return true;\n    }\n    if(b==c){\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmppz6_buwc: /tmp/tmppz6_buwc.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    if (root >= 0) {\n        long x_1 = (-b + root) / a;\n        long\
    \ x_2 = (-b - root) / a;\n        long y_1 = (-b - root) / a;\n        long y_2\
    \ = (-b + root) / a;\n        if (x_1 == x_2 && y_1 == y_2) {\n            return\
    \ true;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpcae85yz8: /tmp/tmpcae85yz8.cpp:31: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = abs(ab +\
    \ ac);\n    long bca = abs(bc + ac);\n    long abca = abs(abc + bca);\n    long\
    \ abcbc = abs(abc + bca);\n    long bcabc = abs(bc + abc);\n    long abcabc =\
    \ abs(abc + abca);\n    long abcabcb = abs(abc + abcb);\n    long bcabcba = abs(bc\
    \ + abcb);\n    long abcabcbc = abs(abc + abcabc);\n    long abcabcbca = abs(abc\
    \ + abcabcb);\n    long abcabcbcb = abs(abc + abcabcb);\n    long bcabcbac = abs(bc\
    \ + abcabcb);\n    long abcabcbcaa = abs(abc + abcabcbca);\n    long abcabcbcba\
    \ = abs(abc + abcabcbca);\n    long abcabcbcbac = abs(abc + abcabcbca);\n    long\
    \ bcabcbaca = abs(bc + abcabcbca);\n    long abcabcbcaab = abs(abc + abcabcbcaab);\n\
    \    long abcabcbcbaab = abs(abc + abcabcbcbaab);\n    long abcabcbcbaabc = abs(abc\
    \ + abcabcbcbaabc);\n    long bcabcbacab = abs(bc + abcabcbcab);\n    long abcabcbcaabc\
    \ = abs(abc + abcabcbcaabc);\n    long abcabcbcbaabc = abs(abc + abcabcbcbaabc);\n\
    \    long bcabcbacaba = abs(bc + abcabcbcaba);\n    long abcabcbcaabca = abs(abc\
    \ + abcabcbcaabca);\n    long abcabcbcbaabca = abs(abc + abcabcbcbaabca);\n  \
    \  long bcabcbacabab = abs(bc + abcabcbcabab);\n    long abcabcbcaabcab = abs(abc\
    \ + abcabcbcaabcab);\n    long abcabcbcbaabcab = abs(abc + abcabcbcbaabcab);\n\
    \    long bcabcbacababc = abs(bc + abcabcbcababc);\n    long abcabcbcaabcabc =\
    \ abs(abc + abcab\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_blwyoes.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp_blwyoes.cpp:22:30: error: \u2018abcb\u2019\
    \ was not declared in this scope; did you mean \u2018abcbc\u2019?\n   22 |   \
    \  long abcabcb = abs(abc + abcb);\n      |                              ^~~~\n\
    \      |                              abcbc\n/tmp/tmp_blwyoes.cpp:35:32: error:\
    \ \u2018abcabcbcab\u2019 was not declared in this scope; did you mean \u2018abcabcbcaab\u2019\
    ?\n   35 |     long bcabcbacab = abs(bc + abcabcbcab);\n      |              \
    \                  ^~~~~~~~~~\n      |                                abcabcbcaab\n\
    /tmp/tmp_blwyoes.cpp:37:10: error: redeclaration of \u2018long int abcabcbcbaabc\u2019\
    \n   37 |     long abcabcbcbaabc = abs(abc + abcabcbcbaabc);\n      |        \
    \  ^~~~~~~~~~~~~\n/tmp/tmp_blwyoes.cpp:34:10: note: \u2018long int abcabcbcbaabc\u2019\
    \ previously declared here\n   34 |     long abcabcbcbaabc = abs(abc + abcabcbcbaabc);\n\
    \      |          ^~~~~~~~~~~~~\n/tmp/tmp_blwyoes.cpp:38:33: error: \u2018abcabcbcaba\u2019\
    \ was not declared in this scope; did you mean \u2018abcabcbcaab\u2019?\n   38\
    \ |     long bcabcbacaba = abs(bc + abcabcbcaba);\n      |                   \
    \              ^~~~~~~~~~~\n      |                                 abcabcbcaab\n\
    /tmp/tmp_blwyoes.cpp:41:34: error: \u2018abcabcbcabab\u2019 was not declared in\
    \ this scope; did you mean \u2018abcabcbcbaab\u2019?\n   41 |     long bcabcbacabab\
    \ = abs(bc + abcabcbcabab);\n      |                                  ^~~~~~~~~~~~\n\
    \      |                                  abcabcbcbaab\n/tmp/tmp_blwyoes.cpp:44:35:\
    \ error: \u2018abcabcbcababc\u2019 was not declared in this scope; did you mean\
    \ \u2018abcabcbcaabc\u2019?\n   44 |     long bcabcbacababc = abs(bc + abcabcbcababc);\n\
    \      |                                   ^~~~~~~~~~~~~\n      |            \
    \                       abcabcbcaabc\n/tmp/tmp_blwyoes.cpp:45:38: error: \u2018\
    abcab\u2019 was not declared in this scope; did you mean \u2018abcabc\u2019?\n\
    \   45 |     long abcabcbcaabcabc = abs(abc + abcab\n      |                 \
    \                     ^~~~~\n      |                                      abcabc\n\
    /tmp/tmp_blwyoes.cpp:46:1: warning: no return stateme"
  stdout: ''
  timestamp: 1659793895
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a>b+c) return false;\n    if(a>c+b) return false;\n    if(b>c+a) return\
    \ false;\n    return true;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpnyklhner.cpp: In function 'int main()':\n/tmp/tmpnyklhner.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnyklhner.cpp:2:\n/tmp/tmpnyklhner.cpp:21:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long abc = ab + bc;\n\
    \    long acb = ac + ab;\n    return abc > acb;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpnkqpfpym: /tmp/tmpnkqpfpym.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv_ld48g8: /tmp/tmpv_ld48g8.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long e = std::sqrt(d);\n\
    \    long f = (b + e * 0.5) / a;\n    long g = (c + e * 0.5) / a;\n    long h\
    \ = (b - e * 0.5) / a;\n    return ((f < 0 && g < 0 && h < 0) || (f > 0 && g >\
    \ 0 && h > 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpu5oo1qyp: /tmp/tmpu5oo1qyp.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root)) / (2 * a);\n    long t = (-b - sqrt(root))\
    \ / (2 * a);\n    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp8xpry5o9: /tmp/tmp8xpry5o9.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int a1 = (a + b + c) / 2;\n    long long int a2 = (b + c + a) /\
    \ 2;\n    long long int a3 = (c + a + b) / 2;\n    long long int b1 = (a + b +\
    \ c) / 2;\n    long long int b2 = (b + c + a) / 2;\n    long long int b3 = (c\
    \ + a + b) / 2;\n    long long int c1 = (a + b + c) / 2;\n    long long int c2\
    \ = (b + c + a) / 2;\n    long long int c3 = (c + a + b) / 2;\n    long long int\
    \ d = a1 * a2 + b1 * b2 + c1 * c2;\n    long long int e1 = a1 * a3 + b1 * b3 +\
    \ c1 * c3;\n    long long int e2 = a2 * b2 + b2 * c2 + c2 * c3;\n    long long\
    \ int f1 = a1 * a2 + b1 * b2 + c1 * c2;\n    long long int f2 = a1 * a3 + b1 *\
    \ b3 + c1 * c3;\n    long long int g1 = a1 * a2 + b1 * b2 + c1 * c2;\n    long\
    \ long int g2 = a1 * a3 + b1 * b3 + c1 * c3;\n    long long int h1 = a1 * a2 +\
    \ b1 * b2 + c1 * c2;\n    long long int h2 = a1 * a3 + b1 * b3 + c1 * c3;\n  \
    \  long long int i = a1 * a2 + b1 * b2 + c1 * c2;\n    long long int j = a1 *\
    \ a3 + b1 * b3 + c1 * c3;\n    long long int k = a1 * a2 + b1 * b2 + c1 * c2;\n\
    \    long long int l = a1 * a3 + b1 * b3 + c1 * c3;\n    long long int m = a1\
    \ * a2 + b1 * b2 + c1 * c2;\n    long long int n = a1 * a3 + b1 * b3 + c1 * c3;\n\
    \    long long int p = a1 * a2 + b1 * b2 + c1 * c2;\n    long long int q = a1\
    \ * a3 + b1 * b3 + c1 * c3;\n    long long int r = a1 * a2 + b1 * b2 + c1 * c2;\n\
    \    long long int s = a1 * a3 + b1 * b3 + c1 * c3;\n    long long int t = a1\
    \ * a2 + b1 * b2 + c1 * c2;\n    long long int u = a1 * a3 + b1 * b3 + c1 * c3;\n\
    \    long long int v = a1 * a2 + b1 * b2 + c1 * c2;\n    long long int w = a1\
    \ * a3 + b1 * \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpe67nfpua.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpe67nfpua.cpp:46:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   46 | }\n      | ^\n/tmp/tmpe67nfpua.cpp:46:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793895
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b) + (b * c);\n    long long ans2 = 0;\n    long long ans3 = 0;\n    long long\
    \ ans4 = 0;\n    long long ans5 = 0;\n    long long ans6 = 0;\n    long long ans7\
    \ = 0;\n    long long ans8 = 0;\n    long long ans9 = 0;\n    long long ans10\
    \ = 0;\n    long long ans11 = 0;\n    long long ans12 = 0;\n    long long ans13\
    \ = 0;\n    long long ans14 = 0;\n    long long ans15 = 0;\n    long long ans16\
    \ = 0;\n    long long ans17 = 0;\n    long long ans18 = 0;\n    long long ans19\
    \ = 0;\n    long long ans20 = 0;\n    long long ans21 = 0;\n    long long ans22\
    \ = 0;\n    long long ans23 = 0;\n    long long ans24 = 0;\n    long long ans25\
    \ = 0;\n    long long ans26 = 0;\n    long long ans27 = 0;\n    long long ans28\
    \ = 0;\n    long long ans29 = 0;\n    long long ans30 = 0;\n    long long ans31\
    \ = 1;\n    long long ans32 = 0;\n    long long ans33 = 0;\n    long long ans34\
    \ = 0;\n    long long ans35 = 0;\n    long long ans36 = 0;\n    long long ans37\
    \ = 0;\n    long long ans38 = 0;\n    long long ans39 = 0;\n    long long ans40\
    \ = 0;\n    long long ans = ans % 10;\n    long long ans2 = ans2 % 10;\n    long\
    \ long ans3 = ans31 % 10;\n    long long ans4 = ans32 % 10;\n    long long ans5\
    \ = ans33 % 10;\n    long long ans6 = ans34 % 10;\n    long long ans7 = ans35\
    \ % 10;\n    long long ans8 = ans36 % 10;\n    long long ans9 = ans37 % 10;\n\
    \    long long ans10 = ans38 % 10;\n    long long ans11 = ans39 % 10;\n    long\
    \ long ans12 = ans40 % 10;\n    long long ans13 = ans % 10;\n    long long ans14\
    \ = ans2 % 10;\n    long long ans15 = ans31 % 10;\n    long long ans16 = ans32\
    \ % 10;\n    long long ans17 = ans33 % 10;\n    long long ans18 = ans34 % 10;\n\
    \    long long ans19 = ans35 % 10;\n    long long ans20 = ans36 % 10;\n    long\
    \ long ans21 = ans37 % 10;\n    long long ans22 = ans38 % 10;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgtummdyd.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpgtummdyd.cpp:53:15: error: redeclaration\
    \ of \u2018long long int ans\u2019\n   53 |     long long ans = ans % 10;\n  \
    \    |               ^~~\n/tmp/tmpgtummdyd.cpp:13:15: note: \u2018long long int\
    \ ans\u2019 previously declared here\n   13 |     long long ans = (a * b) + (b\
    \ * c);\n      |               ^~~\n/tmp/tmpgtummdyd.cpp:54:15: error: redeclaration\
    \ of \u2018long long int ans2\u2019\n   54 |     long long ans2 = ans2 % 10;\n\
    \      |               ^~~~\n/tmp/tmpgtummdyd.cpp:14:15: note: \u2018long long\
    \ int ans2\u2019 previously declared here\n   14 |     long long ans2 = 0;\n \
    \     |               ^~~~\n/tmp/tmpgtummdyd.cpp:55:15: error: redeclaration of\
    \ \u2018long long int ans3\u2019\n   55 |     long long ans3 = ans31 % 10;\n \
    \     |               ^~~~\n/tmp/tmpgtummdyd.cpp:15:15: note: \u2018long long\
    \ int ans3\u2019 previously declared here\n   15 |     long long ans3 = 0;\n \
    \     |               ^~~~\n/tmp/tmpgtummdyd.cpp:56:15: error: redeclaration of\
    \ \u2018long long int ans4\u2019\n   56 |     long long ans4 = ans32 % 10;\n \
    \     |               ^~~~\n/tmp/tmpgtummdyd.cpp:16:15: note: \u2018long long\
    \ int ans4\u2019 previously declared here\n   16 |     long long ans4 = 0;\n \
    \     |               ^~~~\n/tmp/tmpgtummdyd.cpp:57:15: error: redeclaration of\
    \ \u2018long long int ans5\u2019\n   57 |     long long ans5 = ans33 % 10;\n \
    \     |               ^~~~\n/tmp/tmpgtummdyd.cpp:17:15: note: \u2018long long\
    \ int ans5\u2019 previously declared here\n   17 |     long long ans5 = 0;\n \
    \     |               ^~~~\n/tmp/tmpgtummdyd.cpp:58:15: error: redeclaration of\
    \ \u2018long long int ans6\u2019\n   58 |     long long ans6 = ans34 % 10;\n \
    \     |               ^~~~\n/tmp/tmpgtummdyd.cpp:18:15: note: \u2018long long\
    \ int ans6\u2019 previously declared here\n   18 |     long long ans6 = 0;\n \
    \     |               ^~~~\n/tmp/tmpgtummdyd.cpp:59:15: error: redeclaration of\
    \ \u2018long long int ans7\u2019\n   59 |     long long ans7 = ans35 % 10;\n \
    \     |               ^~~~\n/tmp/tmpgtummdyd.cpp:19:15: note: \u2018long long\
    \ int ans7\u2019 previously declared here\n   19 |     long long ans7 = 0;\n \
    \     |        "
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(b>c){\n        return\
    \ false;\n    }\n    if(a>c){\n        if(b>c){\n            return true;\n  \
    \      }\n        return false;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp94ei15xo: /tmp/tmp94ei15xo.cpp:45: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b * c) / gcd(a, b);\n    return ans == a || ans == b;\n}\nint main() {\n   \
    \ auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_xrunlqw.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp_xrunlqw.cpp:13:35: error: \u2018gcd\u2019\
    \ was not declared in this scope\n   13 |     long long ans = (a * b * c) / gcd(a,\
    \ b);\n      |                                   ^~~\n"
  stdout: ''
  timestamp: 1659793896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = a + b\
    \ + c;\n    long long sum = (a + b) * (a + c) + (b + c) * (a + b) + (a + c) *\
    \ (b + c);\n    long long sq = sum * sum;\n    long long sq1 = sq - ans;\n   \
    \ long long sq2 = sq - sum;\n    long long sq3 = sq - sq1;\n    long long sq4\
    \ = sq - sq2;\n    long long sq5 = sq - sq3;\n    long long sq6 = sq - sq4;\n\
    \    long long sq7 = sq - sq5;\n    long long sq8 = sq - sq6;\n    long long sq9\
    \ = sq - sq7;\n    long long sq10 = sq - sq8;\n    long long sq11 = sq - sq9;\n\
    \    long long sq12 = sq - sq10;\n    long long sq13 = sq - sq11;\n    long long\
    \ sq14 = sq - sq12;\n    long long sq15 = sq - sq13;\n    long long sq16 = sq\
    \ - sq14;\n    long long sq17 = sq - sq15;\n    long long sq18 = sq - sq16;\n\
    \    long long sq19 = sq - sq17;\n    long long sq20 = sq - sq18;\n    long long\
    \ sq21 = sq - sq19;\n    long long sq22 = sq - sq20;\n    long long sq23 = sq\
    \ - sq21;\n    long long sq24 = sq - sq22;\n    long long sq25 = sq - sq23;\n\
    \    long long sq26 = sq - sq24;\n    long long sq27 = sq - sq25;\n    long long\
    \ sq28 = sq - sq26;\n    long long sq29 = sq - sq27;\n    long long sq30 = sq\
    \ - sq28;\n    long long sq31 = sq - sq29;\n    long long sq32 = sq - sq30;\n\
    \    long long sq33 = sq - sq31;\n    long long sq34 = sq - sq32;\n    long long\
    \ sq35 = sq - sq33;\n    long long sq36 = sq - sq34;\n    long long sq37 = sq\
    \ - sq35;\n    long long sq38 = sq - sq36;\n    long long sq39 = sq - sq37;\n\
    \    long long sq40 = sq - sq38;\n    long long sq41 = sq - sq39;\n    long long\
    \ sq42 = sq - \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpao1oh_e8.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpao1oh_e8.cpp:58:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   58 | }\n      | ^\n/tmp/tmpao1oh_e8.cpp:58:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        if(a>c){\n            return\
    \ true;\n        }\n        return false;\n    }\n    if(b>c){\n        return\
    \ false;\n    }\n    if(a>c){\n        if(b>c){\n            return true;\n  \
    \      }\n        return false;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp6leyuzuk: /tmp/tmp6leyuzuk.cpp:45: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    if (root < 0)\n        return false;\n    long x = ((-b - root) /\
    \ a) % 2;\n    long y = ((-b + root) / a) % 2;\n    long z = ((-b - root) / a)\
    \ % 2;\n    return (x == 0 && y == 0 && z == 1);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpss1g2gq_: /tmp/tmpss1g2gq_.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv_ld48g8: /tmp/tmpv_ld48g8.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793894
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0)\n        return true;\n    else if (a == 0 || b == 0 || c == 0)\n\
    \        return false;\n    else if (a > b && a > c)\n        return true;\n \
    \   else if (b > a && b > c)\n        return true;\n    else if (c > a && c >\
    \ b)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9icikdy4: /tmp/tmp9icikdy4.cpp:28: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (b + c) / 2;\n    long y = (-b - c)\
    \ / 2;\n    long m = (a + b) / 2;\n    long n = (a + c) / 2;\n    long o = (b\
    \ + c) / 2;\n    long p = (a * b) / 4;\n    long q = ((a + b) * (a + c)) / (4\
    \ * a);\n    long r = ((b + c) * (b + c)) / (4 * a);\n    long s = (a * b * b)\
    \ / (4 * a * a);\n    long t = ((a + b) * (b + c)) / (4 * a);\n    long u = ((a\
    \ + b) * (a + c)) / (4 * a);\n    long v = ((b + c) * (a + c)) / (4 * a);\n  \
    \  long w = ((b + c) * (b + c)) / (4 * a);\n    long x = ((a + b) * (b + c)) /\
    \ (4 * a);\n    long y = ((a + b) * (a + c)) / (4 * a);\n    long z = ((b + c)\
    \ * (a + c)) / (4 * a);\n    long a = ((a + b) * (a + c)) / (4 * a);\n    long\
    \ b = ((b + c) * (a + c)) / (4 * a);\n    long c = ((a + b) * (b + c)) / (4 *\
    \ a);\n    long d = ((a + b) * (a + c)) / (4 * a);\n    long e = ((b + c) * (a\
    \ + c)) / (4 * a);\n    long f = ((b + c) * (b + c)) / (4 * a);\n    long g =\
    \ ((a + b) * (a + c)) / (4 * a);\n    long h = ((a + b) * (b + c)) / (4 * a);\n\
    \    long i = ((b + c) * (a + c)) / (4 * a);\n    long j = ((b + c) * (b + c))\
    \ / (4 * a);\n    long k = ((a + b) * (a + c)) / (4 * a);\n    long l = ((a +\
    \ b) * (b + c)) / (4 * a);\n    long m = ((b + c) * (a + c)) / (4 * a);\n    long\
    \ n = ((b + c) * (b + c)) / (4 * a);\n    long o = ((a + b) * (a + c)) / (4 *\
    \ a);\n    long p = ((a + b) * (b + c)) / (4 * a);\n    long q = ((b + c) * (a\
    \ + c)) / (4 * a);\n    long r = \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ws20kze.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp2ws20kze.cpp:31:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   31 |     long x = ((a + b) * (b + c)) / (4 * a);\n\
    \      |          ^\n/tmp/tmp2ws20kze.cpp:18:10: note: \u2018long int x\u2019\
    \ previously declared here\n   18 |     long x = (b + c) / 2;\n      |       \
    \   ^\n/tmp/tmp2ws20kze.cpp:32:10: error: redeclaration of \u2018long int y\u2019\
    \n   32 |     long y = ((a + b) * (a + c)) / (4 * a);\n      |          ^\n/tmp/tmp2ws20kze.cpp:19:10:\
    \ note: \u2018long int y\u2019 previously declared here\n   19 |     long y =\
    \ (-b - c) / 2;\n      |          ^\n/tmp/tmp2ws20kze.cpp:34:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   34 |     long a = ((a + b)\
    \ * (a + c)) / (4 * a);\n      |          ^\n/tmp/tmp2ws20kze.cpp:35:10: error:\
    \ declaration of \u2018long int b\u2019 shadows a parameter\n   35 |     long\
    \ b = ((b + c) * (a + c)) / (4 * a);\n      |          ^\n/tmp/tmp2ws20kze.cpp:36:10:\
    \ error: declaration of \u2018long int c\u2019 shadows a parameter\n   36 |  \
    \   long c = ((a + b) * (b + c)) / (4 * a);\n      |          ^\n/tmp/tmp2ws20kze.cpp:37:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   37 |     long d = ((a + b)\
    \ * (a + c)) / (4 * a);\n      |          ^\n/tmp/tmp2ws20kze.cpp:15:10: note:\
    \ \u2018long int d\u2019 previously declared here\n   15 |     long d = b * b\
    \ - 4 * a * c;\n      |          ^\n/tmp/tmp2ws20kze.cpp:46:10: error: redeclaration\
    \ of \u2018long int m\u2019\n   46 |     long m = ((b + c) * (a + c)) / (4 * a);\n\
    \      |          ^\n/tmp/tmp2ws20kze.cpp:20:10: note: \u2018long int m\u2019\
    \ previously declared here\n   20 |     long m = (a + b) / 2;\n      |       \
    \   ^\n/tmp/tmp2ws20kze.cpp:47:10: error: redeclaration of \u2018long int n\u2019\
    \n   47 |     long n = ((b + c) * (b + c)) / (4 * a);\n      |          ^\n/tmp/tmp2ws20kze.cpp:21:10:\
    \ note: \u2018long int n\u2019 previously declared here\n   21 |     long n =\
    \ (a + c) / 2;\n      |          ^\n/tmp/tmp2ws20kze.cpp:48:10: error: redeclaration\
    \ of \u2018long int o\u2019\n   48 |     long o = ((a + b) * (a + c)) / (4 * a);\n\
    \      |          ^\n/tmp/tmp2ws20kze.cpp:22:10: note: \u2018long int o"
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long root = (long) sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n\
    \    long t2 = (-b - root) / (2 * a);\n    if (t1 == t2) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpcvcng1s2: /tmp/tmpcvcng1s2.cpp:28: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n\
    \    long abc = ab + ac;\n    long bcb = bc + cb;\n    long abbc = abb + bcb;\n\
    \    long abcc = abc + cb + (abbc > ab);\n    long abbbc = abbc + cbc + (abbc\
    \ > ab);\n    long abbcc = abbc + cbc + (abbc > ab);\n    long abccb = abcc +\
    \ cbc + (abbc > ab);\n    long abbbcc = abbbc + cbc + (abbc > ab);\n    long abbccb\
    \ = abbccb + cbc + (abbc > ab);\n    long abcccb = abccc + cbc + (abbc > ab);\n\
    \    long abbbccb = abbbcc + cbc + (abbc > ab);\n    long abbcccb = abbccc + cbc\
    \ + (abbc > ab);\n    long abcccbb = abcccb + cbc + (abbc > ab);\n    long abbbcccb\
    \ = abbbccc + cbc + (abbc > ab);\n    long abbcccbb = abbcccb + cbc + (abbc >\
    \ ab);\n    long abcccbb = abcccb + cbc + (abbc > ab);\n    long abbbcccb = abbbccc\
    \ + cbc + (abbc > ab);\n    long abbcccbb = abbcccb + cbc + (abbc > ab);\n   \
    \ long abcccbb = abcccb + cbc + (abbc > ab);\n    long abbbcccb = abbbccc + cbc\
    \ + (abbc > ab);\n    long abbcccbb = abbcccb + cbc + (abbc > ab);\n    long abcccbb\
    \ = abcccb + cbc + (abbc > ab);\n    long abbbcccb = abbbccc + cbc + (abbc > ab);\n\
    \    long abbcccbb = abbcccb + cbc + (abbc > ab);\n    long abcccbb = abcccb +\
    \ cbc + (abbc > ab);\n    long abbb\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp4twxvel.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpp4twxvel.cpp:19:17: error: \u2018abb\u2019\
    \ was not declared in this scope; did you mean \u2018abbc\u2019?\n   19 |    \
    \ long abbc = abb + bcb;\n      |                 ^~~\n      |               \
    \  abbc\n/tmp/tmpp4twxvel.cpp:21:25: error: \u2018cbc\u2019 was not declared in\
    \ this scope; did you mean \u2018abc\u2019?\n   21 |     long abbbc = abbc + cbc\
    \ + (abbc > ab);\n      |                         ^~~\n      |               \
    \          abc\n/tmp/tmpp4twxvel.cpp:26:19: error: \u2018abccc\u2019 was not declared\
    \ in this scope; did you mean \u2018abcccb\u2019?\n   26 |     long abcccb = abccc\
    \ + cbc + (abbc > ab);\n      |                   ^~~~~\n      |             \
    \      abcccb\n/tmp/tmpp4twxvel.cpp:28:20: error: \u2018abbccc\u2019 was not declared\
    \ in this scope; did you mean \u2018abbcccb\u2019?\n   28 |     long abbcccb =\
    \ abbccc + cbc + (abbc > ab);\n      |                    ^~~~~~\n      |    \
    \                abbcccb\n/tmp/tmpp4twxvel.cpp:30:21: error: \u2018abbbccc\u2019\
    \ was not declared in this scope; did you mean \u2018abbbcccb\u2019?\n   30 |\
    \     long abbbcccb = abbbccc + cbc + (abbc > ab);\n      |                  \
    \   ^~~~~~~\n      |                     abbbcccb\n/tmp/tmpp4twxvel.cpp:32:10:\
    \ error: redeclaration of \u2018long int abcccbb\u2019\n   32 |     long abcccbb\
    \ = abcccb + cbc + (abbc > ab);\n      |          ^~~~~~~\n/tmp/tmpp4twxvel.cpp:29:10:\
    \ note: \u2018long int abcccbb\u2019 previously declared here\n   29 |     long\
    \ abcccbb = abcccb + cbc + (abbc > ab);\n      |          ^~~~~~~\n/tmp/tmpp4twxvel.cpp:33:10:\
    \ error: redeclaration of \u2018long int abbbcccb\u2019\n   33 |     long abbbcccb\
    \ = abbbccc + cbc + (abbc > ab);\n      |          ^~~~~~~~\n/tmp/tmpp4twxvel.cpp:30:10:\
    \ note: \u2018long int abbbcccb\u2019 previously declared here\n   30 |     long\
    \ abbbcccb = abbbccc + cbc + (abbc > ab);\n      |          ^~~~~~~~\n/tmp/tmpp4twxvel.cpp:34:10:\
    \ error: redeclaration of \u2018long int abbcccbb\u2019\n   34 |     long abbcccbb\
    \ = abbcccb + cbc + (abbc > ab);\n      |          ^~~~~~~~\n/tmp/tmpp4twxvel.cpp:31:10:\
    \ note: \u2018long int abbcccbb\u2019 previously declared here\n   31 |     long\
    \ abbc"
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0) return false;\n    long d = b * b - 4 * a * c;\n    if (d < 0) return\
    \ false;\n    long x = (b + d) / (2 * a);\n    long y = (-b - d) / (2 * a);\n\
    \    return (x >= 0 && x <= 1 && y >= 0 && y <= 1);\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpjy6pn_5c: /tmp/tmpjy6pn_5c.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0)\n        return true;\n    else if (a == 0 || b == 0 || c == 0)\n\
    \        return false;\n    else if (a > b && a > c)\n        return true;\n \
    \   else if (b > a && b > c)\n        return true;\n    else if (c > a && c >\
    \ b)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp9icikdy4: /tmp/tmp9icikdy4.cpp:28: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a + b > c) {\n        return\
    \ false;\n    }\n    if (a + c > b) {\n        return false;\n    }\n    if (b\
    \ + c > a) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmprcgs44y9: /tmp/tmprcgs44y9.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long sq = sqrt(d);\n\
    \    long t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    return\
    \ (t1 >= 0 && t1 <= 1) && (t2 >= 0 && t2 <= 1);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpdcye04gd: /tmp/tmpdcye04gd.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1\
    \ + c1;\n    return a1 == b1 && b1 == c1 && c2 == a2;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3fl1j_84: /tmp/tmp3fl1j_84.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long l1 = abs(a), l2 = abs(b), l3 = abs(c);\n    long sum = 0;\n    long\
    \ temp = 0;\n    long ans = false;\n    long sum1 = 0, sum2 = 0, sum3 = 0;\n \
    \   long temp1 = 0, temp2 = 0, temp3 = 0;\n    long count = 0;\n    long sum1a\
    \ = 0, sum2a = 0, sum3a = 0;\n    long temp1a = 0, temp2a = 0, temp3a = 0;\n \
    \   long count1 = 0;\n    long sum1b = 0, sum2b = 0, sum3b = 0;\n    long temp1b\
    \ = 0, temp2b = 0, temp3b = 0;\n    long count2 = 0;\n    long sum1c = 0, sum2c\
    \ = 0, sum3c = 0;\n    long temp1c = 0, temp2c = 0, temp3c = 0;\n    long count3\
    \ = 0;\n    long sum1d = 0, sum2d = 0, sum3d = 0;\n    long temp1d = 0, temp2d\
    \ = 0, temp3d = 0;\n    long count4 = 0;\n    long sum1e = 0, sum2e = 0, sum3e\
    \ = 0;\n    long temp1e = 0, temp2e = 0, temp3e = 0;\n    long count5 = 0;\n \
    \   long sum1f = 0, sum2f = 0, sum3f = 0;\n    long temp1f = 0, temp2f = 0, temp3f\
    \ = 0;\n    long count6 = 0;\n    long sum1g = 0, sum2g = 0, sum3g = 0;\n    long\
    \ temp1g = 0, temp2g = 0, temp3g = 0;\n    long count7 = 0;\n    long sum1h =\
    \ 0, sum2h = 0, sum3h = 0;\n    long temp1h = 0, temp2h = 0, temp3h = 0;\n   \
    \ long count8 = 0;\n    long sum1i = 0, sum2i = 0, sum3i = 0;\n    long temp1i\
    \ = 0, temp2i = 0, temp3i = 0;\n    long count9 = 0;\n    long sum1j = 0, sum2j\
    \ = 0, sum3j = 0;\n    long temp1j = 0, temp2j = 0, temp3j = 0;\n    long count10\
    \ = 0;\n    long sum1k = 0, sum2k = 0, sum3k = 0;\n    long temp1k = 0, temp2k\
    \ = 0, temp3k = 0;\n    long count11 = 0;\n    long sum1l = 0, sum2l = 0, sum3l\
    \ = 0;\n    long temp1l = 0, temp2l = 0, temp3l = 0;\n    long count12 = 0;\n\
    \    long sum1m = 0, sum2m = 0, sum3m = 0;\n    long temp1m = 0, temp2m = 0, temp3m\
    \ = 0;\n    long count13 = 0;\n    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpzwruapye: /tmp/tmpzwruapye.cpp:64: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = (a + b\
    \ + c) / 2;\n    long long b1 = (a + b) / 2;\n    long long c1 = (a + c) / 2;\n\
    \    long long a2 = (a1 + b1 + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n \
    \   long long c2 = (a1 + c2) / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n  \
    \  long long b3 = (a2 + b2) / 2;\n    long long c3 = (a2 + c3) / 2;\n    long\
    \ long a4 = (a3 + b3 + c3) / 2;\n    long long b4 = (a3 + b3) / 2;\n    long long\
    \ c4 = (a3 + c4) / 2;\n    long long a5 = (a4 + b4 + c4) / 2;\n    long long b5\
    \ = (a4 + b4) / 2;\n    long long c5 = (a4 + c5) / 2;\n    long long a6 = (a5\
    \ + b5 + c5) / 2;\n    long long b6 = (a5 + b5) / 2;\n    long long c6 = (a5 +\
    \ c6) / 2;\n    long long a7 = (a6 + b6 + c6) / 2;\n    long long b7 = (a6 + b6)\
    \ / 2;\n    long long c7 = (a6 + c7) / 2;\n    long long a8 = (a7 + b7 + c7) /\
    \ 2;\n    long long b8 = (a7 + b7) / 2;\n    long long c8 = (a7 + c8) / 2;\n \
    \   long long a9 = (a8 + b8 + c8) / 2;\n    long long b9 = (a8 + b8) / 2;\n  \
    \  long long c9 = (a8 + c9) / 2;\n    long long a10 = (a9 + b9 + c9) / 2;\n  \
    \  long long b10 = (a9 + b9) / 2;\n    long long c10 = (a9 + c10) / 2;\n    long\
    \ long a11 = (a10 + b10 + c10) / 2;\n    long long b11 = (a10 + b10) / 2;\n  \
    \  long long c11 = (a10 + c11) / 2;\n    long long a12 = (a11 + b11 + c11) / 2;\n\
    \    long long b12 = (a11 + b11) / 2;\n    long long c12 = (a11 + c12) / 2;\n\
    \    long long a13 = (a12 + b12 + c12) / 2;\n    long long b13 = (a12 + b12) /\
    \ 2;\n    long long c13 = (a12 + c13) / 2;\n    long long a14 = (a13 + b13 + c13)\
    \ / 2;\n    long long b14 = (a13 + b13) / 2;\n    long long c14 = (a13 + c14\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp04zso41s.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp04zso41s.cpp:54:31: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |     long long c14 = (a13 +\
    \ c14\n      |                     ~         ^\n      |                      \
    \         )\n   55 | }\n      | ~                              \n/tmp/tmp04zso41s.cpp:55:1:\
    \ error: expected \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n\
    \   55 | }\n      | ^\n/tmp/tmp04zso41s.cpp:55:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long t1 = (-b + root) / (2 * a);\n    long t2 = (-b - root) /\
    \ (2 * a);\n    return t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpv_ld48g8: /tmp/tmpv_ld48g8.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793894
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x0 = 0, y0 = 0, x1 = 0, y1 = 0, x2 = 0, y2 = 0;\n    if (root\
    \ == 0) {\n        x0 = -b / (2 * a);\n        y0 = -a / (2 * a);\n        x1\
    \ = -b / (2 * a);\n        y1 = a / (2 * a);\n        x2 = a / (2 * a);\n    \
    \    y2 = -b / (2 * a);\n    } else {\n        long x3 = 0, y3 = 0, x4 = 0, y4\
    \ = 0;\n        long disc = 2 * root;\n        x3 = -b + disc / (2 * a);\n   \
    \     y3 = -a - disc / (2 * a);\n        x4 = -b - disc / (2 * a);\n        y4\
    \ = a + disc / (2 * a);\n        x0 = x3;\n        y0 = y3;\n        x1 = x4;\n\
    \        y1 = y4;\n        x2 = x1;\n        y2 = y1;\n    }\n    long x5 = x2\
    \ - x0;\n    long y5 = y2 - y0;\n    long x6 = x3 - x0;\n    long y6 = y3 - y0;\n\
    \    long x7 = x4 - x0;\n    long y7 = y4 - y0;\n    long x8 = x5 - x0;\n    long\
    \ y8 = y5 - y0;\n    long x9 = y6 - y0;\n    long x10 = y7 - y0;\n    long x11\
    \ = y8 - y0;\n    long x12 = y9 - y0;\n    long x13 = x10 - x0;\n    long y13\
    \ = x11 - x0;\n    long x14 = x12 - x0;\n    long y14 = x13 - x0;\n    long x15\
    \ = x14 - x0;\n    long y15 = x15 - x0;\n    long x16 = x15 - x0;\n    long y16\
    \ = x16 - x0;\n    long x17 = x16 - x0;\n    long y17 = x17 - x0;\n    long x18\
    \ = x17 - x0;\n    long y18 = x18 - x0;\n    long x19 = x18 - x0;\n    long y19\
    \ = x19 - x0;\n    long x20 = x19 - x0;\n    long y20 = x20 - x0;\n    long x21\
    \ = x20 - x0;\n    long y21 = x21 - x0;\n    long x22 = x20 - x0;\n    long y22\
    \ = x22 - x\n}\nint main() {\n    auto candidate = right_angle_triangle;\n   \
    \ assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpldn7mqjc.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpldn7mqjc.cpp:42:15: error: \u2018x3\u2019\
    \ was not declared in this scope; did you mean \u2018x6\u2019?\n   42 |     long\
    \ x6 = x3 - x0;\n      |               ^~\n      |               x6\n/tmp/tmpldn7mqjc.cpp:43:15:\
    \ error: \u2018y3\u2019 was not declared in this scope; did you mean \u2018y6\u2019\
    ?\n   43 |     long y6 = y3 - y0;\n      |               ^~\n      |         \
    \      y6\n/tmp/tmpldn7mqjc.cpp:44:15: error: \u2018x4\u2019 was not declared\
    \ in this scope; did you mean \u2018x7\u2019?\n   44 |     long x7 = x4 - x0;\n\
    \      |               ^~\n      |               x7\n/tmp/tmpldn7mqjc.cpp:45:15:\
    \ error: \u2018y4\u2019 was not declared in this scope; did you mean \u2018y7\u2019\
    ?\n   45 |     long y7 = y4 - y0;\n      |               ^~\n      |         \
    \      y7\n/tmp/tmpldn7mqjc.cpp:51:16: error: \u2018y9\u2019 was not declared\
    \ in this scope; did you mean \u2018x9\u2019?\n   51 |     long x12 = y9 - y0;\n\
    \      |                ^~\n      |                x9\n/tmp/tmpldn7mqjc.cpp:71:22:\
    \ error: \u2018x\u2019 was not declared in this scope; did you mean \u2018x9\u2019\
    ?\n   71 |     long y22 = x22 - x\n      |                      ^\n      |   \
    \                   x9\n/tmp/tmpldn7mqjc.cpp:72:1: warning: control reaches end\
    \ of non-void function [-Wreturn-type]\n   72 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root)) / (2 * a);\n    long t = (-b - sqrt(root))\
    \ / (2 * a);\n    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp8xpry5o9: /tmp/tmp8xpry5o9.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793893
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = (b * b) - (4 * a * c);\n   \
    \ if (d == 0)\n        return false;\n    long x = (b * b) - (4 * a * d);\n  \
    \  long y = (b * b) - (4 * a * d);\n    long z = (b * b) - (4 * a * d);\n    long\
    \ t1 = (x / d);\n    long t2 = (y / d);\n    long t3 = (z / d);\n    if (t1 ==\
    \ 0 && t2 == 0 && t3 == 0)\n        return true;\n    if (t1 == 0 && t2 == 0 &&\
    \ t3 != 0)\n        return false;\n    if (t1 != 0 && t2 != 0 && t3 != 0)\n  \
    \      return false;\n    if (t1 == 0 && t2 == 0 && t3 == 0)\n        return false;\n\
    \    if (t1 != 0 && t2 == 0 && t3 == 0)\n        return false;\n    if (t1 !=\
    \ 0 && t2 != 0 && t3 == 0)\n        return false;\n    if (t1 != 0 && t2 != 0\
    \ && t3 != 0)\n        return false;\n    if (t1 != 0 && t2 != 0 && t3 == 0)\n\
    \        return false;\n    if (t1 != 0 && t2 != 0 && t3 != 0)\n        return\
    \ false;\n    if (t1 != 0 && t2 != 0 && t3 == 0)\n        return false;\n    if\
    \ (t1 != 0 && t2 != 0 && t3 != 0)\n        return false;\n    if (t1 != 0 && t2\
    \ != 0 && t3 == 0)\n        return false;\n    if (t1 != 0 && t2 != 0 && t3 !=\
    \ 0)\n        return false;\n    if (t1 != 0 && t2 != 0 && t3 == 0)\n        return\
    \ false;\n    if (t1 != 0 && t2 != 0 && t3 != 0)\n        return false;\n    if\
    \ (t1 != 0 && t2 != 0 && t3 == 0)\n        return false;\n    if (t1 != 0 && t2\
    \ != 0 && t3 != 0)\n        return false;\n    if (t1 != 0 && t2 != 0 && t3 ==\
    \ 0)\n        return false;\n    if (t1 != 0 && t2 != 0 && t3 != 0)\n        return\
    \ false;\n    if (t1 != 0 && t2 != 0 && t3 == 0)\n        return false;\n    if\
    \ (t1 != 0 && t2 != 0 && t3 != 0)\n        return false;\n    if (t1 != 0 && t2\
    \ != 0 && t3 == 0)\n        return false;\n    if (t1 != 0 && t2 != 0 && t3 !=\
    \ 0)\n        return false;\n    if (t1 != 0 && t2 != 0 && t3 == 0)\n        return\
    \ false;\n    if (t1 != 0 && t2 != 0 && t3 != 0)\n        return false;\n    if\
    \ (t1 != 0 && t2 != 0 && t3 == 0)\n        return false;\n    if (t1 != 0 && t2\
    \ != 0 && t3 != 0)\n        return false;\n    if (t1 != 0 && t2 != 0 && t3 ==\
    \ 0)\n        return false;\n    if (t1 != 0 && t2 != 0 && t3 != 0)\n        return\
    \ false;\n    if (t1 != 0 && t2 != 0 && t\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpief6gwjp.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpief6gwjp.cpp:82:31: error: \u2018t\u2019\
    \ was not declared in this scope; did you mean \u2018t3\u2019?\n   82 |     if\
    \ (t1 != 0 && t2 != 0 && t\n      |                               ^\n      | \
    \                              t3\n/tmp/tmpief6gwjp.cpp:82:32: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   82 |     if (t1 != 0 && t2 != 0\
    \ && t\n      |        ~                       ^\n      |                    \
    \            )\n   83 | }\n      | ~                               \n/tmp/tmpief6gwjp.cpp:83:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n   83 | }\n \
    \     | ^\n/tmp/tmpief6gwjp.cpp:83:1: warning: control reaches end of non-void\
    \ function [-Wreturn-type]\n   83 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0)\n        return true;\n    else if (a == 0 || b == 0 || c == 0)\n\
    \        return false;\n    else if (a > b && a > c)\n        return true;\n \
    \   else if (b > a && b > c)\n        return true;\n    else if (c > a && c >\
    \ b)\n        return true;\n    else\n        return false;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpu4l9bhj3: /tmp/tmpu4l9bhj3.cpp:29: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = (a + b\
    \ + c) / 2;\n    long long b1 = (a + b) / 2;\n    long long c1 = (a + c) / 2;\n\
    \    long long a2 = (a1 + b1 + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n \
    \   long long c2 = (a1 + c2) / 2;\n    long long a3 = (b1 + c1 + a2) / 2;\n  \
    \  long long b3 = (b1 + c1) / 2;\n    long long c3 = (b1 + c2) / 2;\n    long\
    \ long a4 = (c1 + a2 + a3) / 2;\n    long long b4 = (c1 + a2) / 2;\n    long long\
    \ c4 = (c1 + c3) / 2;\n    long long a5 = (b2 + c3 + a4) / 2;\n    long long b5\
    \ = (b2 + c3) / 2;\n    long long c5 = (b2 + c4) / 2;\n    long long a6 = (c2\
    \ + a4 + a5) / 2;\n    long long b6 = (c2 + a4) / 2;\n    long long c6 = (c2 +\
    \ c5) / 2;\n    long long a7 = (b3 + c5 + a6) / 2;\n    long long b7 = (b3 + c5)\
    \ / 2;\n    long long c7 = (b3 + c6) / 2;\n    long long a8 = (c4 + a6 + a7) /\
    \ 2;\n    long long b8 = (c4 + a6) / 2;\n    long long c8 = (c4 + c8) / 2;\n \
    \   long long a9 = (b5 + c6 + a9) / 2;\n    long long b9 = (b5 + c6) / 2;\n  \
    \  long long c9 = (b5 + c7) / 2;\n    long long a10 = (c6 + a9 + a10) / 2;\n \
    \   long long b10 = (c6 + a9) / 2;\n    long long c10 = (c6 + b10) / 2;\n    long\
    \ long a11 = (c7 + b10 + a10) / 2;\n    long long b11 = (c7 + b10) / 2;\n    long\
    \ long c11 = (c7 + c10) / 2;\n    long long a12 = (b8 + c10 + a11) / 2;\n    long\
    \ long b12 = (b8 + c10) / 2;\n    long long c12 = (b8 + c11) / 2;\n    long long\
    \ a13 = (b9 + c11 + a12) / 2;\n    long long b13 = (b9 + c11) / 2;\n    long long\
    \ c13 = (b9 + c12) / 2;\n    long long a14 = (b10 + c12 + a13) / 2;\n    long\
    \ long b14 = (b10 + c12) / 2;\n    long long c14 = (b10 + \n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcrzrc5sy.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpcrzrc5sy.cpp:55:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpcrzrc5sy.cpp:54:27:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   54 |     long long\
    \ c14 = (b10 +\n      |                     ~     ^\n      |                 \
    \          )\n   55 | }\n      | ~                          \n/tmp/tmpcrzrc5sy.cpp:55:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   55 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x = ((b * b) - 4 * a * c) / root;\n    long y = ((-b) + root)\
    \ / 2;\n    long r = ((-b) - root) / 2;\n    return (y == r || y == -r);\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpc_uxzibz: /tmp/tmpc_uxzibz.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = (a *\
    \ b) + (c * c);\n    if (ans <= 0)\n        return false;\n    long long d = a\
    \ * b - c * c;\n    if (d > 0)\n        return true;\n    long long e = a * c\
    \ - b * b;\n    if (e > 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpqeug_vsn: /tmp/tmpqeug_vsn.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, b2 = b1 + c1, c2 = c1\
    \ + a1;\n    long long a3 = a2 + b2, b3 = b2 + c2, c3 = c2 + a2;\n    long long\
    \ a4 = a3 + b3, b4 = b4 + c3, c4 = c4 + a3;\n    long long a5 = a4 + b4, b5 =\
    \ b5 + c4, c5 = c5 + a4;\n    long long a6 = a5 + b5, b6 = b6 + c5, c6 = c6 +\
    \ a5;\n    long long a7 = a6 + b6, b7 = b7 + c6, c7 = c7 + a6;\n    long long\
    \ a8 = a7 + b7, b8 = b7 + c7, c8 = c7 + a7;\n    long long a9 = a8 + b8, b9 =\
    \ b9 + c8, c9 = c9 + a8;\n    long long a10 = a9 + b9, b10 = b10 + c9, c10 = c10\
    \ + a9;\n    long long a11 = a10 + b10, b11 = b11 + c10, c11 = c11 + a10;\n  \
    \  long long a12 = a11 + b11, b12 = b12 + c11, c12 = c12 + a11;\n    long long\
    \ a13 = a12 + b12, b13 = b13 + c12, c13 = c13 + a12;\n    long long a14 = a13\
    \ + b13, b14 = b14 + c13, c14 = c14 + a13;\n    long long a15 = a14 + b14, b15\
    \ = b15 + c14, c15 = c15 + a14;\n    long long a16 = a15 + b15, b16 = b16 + c15,\
    \ c16 = c16 + a15;\n    long long a17 = a16 + b16, b17 = b17 + c16, c17 = c17\
    \ + a16;\n    long long a18 = a17 + b17, b18 = b18 + c17, c18 = c18 + a17;\n \
    \   long long a19 = a18 + b18, b19 = b19 + c18, c19 = c19 + a18;\n    long long\
    \ a20 = a19 + b19, b20 = b20 + c19, c20 = c20 + a19;\n    long long a21 = a20\
    \ + b20, b21 = b21 + c20, c21 = c21 + a20;\n    long long a22 = a21 + b21, b22\
    \ = b22 + c22, c22 = c22 + a21;\n    long long a23 = a22 + b\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3plafn_b.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp3plafn_b.cpp:34:44: error: \u2018c22\u2019\
    \ was not declared in this scope; did you mean \u2018b22\u2019?\n   34 |     long\
    \ long a22 = a21 + b21, b22 = b22 + c22, c22 = c22 + a21;\n      |           \
    \                                 ^~~\n      |                               \
    \             b22\n/tmp/tmp3plafn_b.cpp:36:1: error: expected \u2018,\u2019 or\
    \ \u2018;\u2019 before \u2018}\u2019 token\n   36 | }\n      | ^\n/tmp/tmp3plafn_b.cpp:36:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = (long) sqrt(d);\n\
    \    long t1 = (-b + root) / a;\n    long t2 = (-b - root) / a;\n    if (t1 >=\
    \ 0 && t1 <= 1)\n        return true;\n    if (t2 >= 0 && t2 <= 1)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_jwv3w0b: /tmp/tmp_jwv3w0b.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long d = b*b - 4*a*c;\n\
    \    if (d < 0)\n        return false;\n    long long root = (long long)sqrt((double)d);\n\
    \    long long a = b*((long long)1.0/root);\n    long long b = c*((long long)1.0/root);\n\
    \    long long c = a*((long long)1.0/root);\n    long long d = b*b - 4*a*c;\n\
    \    if (d < 0)\n        return false;\n    long long root = (long long)sqrt((double)d);\n\
    \    long long a = b*((long long)1.0/root);\n    long long b = c*((long long)1.0/root);\n\
    \    long long c = a*((long long)1.0/root);\n    long long d = b*b - 4*a*c;\n\
    \    if (d < 0)\n        return false;\n    long long root = (long long)sqrt((double)d);\n\
    \    long long a = b*((long long)1.0/root);\n    long long b = c*((long long)1.0/root);\n\
    \    long long c = a*((long long)1.0/root);\n    long long d = b*b - 4*a*c;\n\
    \    if (d < 0)\n        return false;\n    return true;\n}\nint main() {\n  \
    \  auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp59hrom2a.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp59hrom2a.cpp:17:15: error: declaration\
    \ of \u2018long long int a\u2019 shadows a parameter\n   17 |     long long a\
    \ = b*((long long)1.0/root);\n      |               ^\n/tmp/tmp59hrom2a.cpp:18:15:\
    \ error: declaration of \u2018long long int b\u2019 shadows a parameter\n   18\
    \ |     long long b = c*((long long)1.0/root);\n      |               ^\n/tmp/tmp59hrom2a.cpp:19:15:\
    \ error: declaration of \u2018long long int c\u2019 shadows a parameter\n   19\
    \ |     long long c = a*((long long)1.0/root);\n      |               ^\n/tmp/tmp59hrom2a.cpp:20:15:\
    \ error: redeclaration of \u2018long long int d\u2019\n   20 |     long long d\
    \ = b*b - 4*a*c;\n      |               ^\n/tmp/tmp59hrom2a.cpp:13:15: note: \u2018\
    long long int d\u2019 previously declared here\n   13 |     long long d = b*b\
    \ - 4*a*c;\n      |               ^\n/tmp/tmp59hrom2a.cpp:23:15: error: redeclaration\
    \ of \u2018long long int root\u2019\n   23 |     long long root = (long long)sqrt((double)d);\n\
    \      |               ^~~~\n/tmp/tmp59hrom2a.cpp:16:15: note: \u2018long long\
    \ int root\u2019 previously declared here\n   16 |     long long root = (long\
    \ long)sqrt((double)d);\n      |               ^~~~\n/tmp/tmp59hrom2a.cpp:24:15:\
    \ error: redeclaration of \u2018long long int a\u2019\n   24 |     long long a\
    \ = b*((long long)1.0/root);\n      |               ^\n/tmp/tmp59hrom2a.cpp:17:15:\
    \ note: \u2018long long int a\u2019 previously declared here\n   17 |     long\
    \ long a = b*((long long)1.0/root);\n      |               ^\n/tmp/tmp59hrom2a.cpp:25:15:\
    \ error: redeclaration of \u2018long long int b\u2019\n   25 |     long long b\
    \ = c*((long long)1.0/root);\n      |               ^\n/tmp/tmp59hrom2a.cpp:18:15:\
    \ note: \u2018long long int b\u2019 previously declared here\n   18 |     long\
    \ long b = c*((long long)1.0/root);\n      |               ^\n/tmp/tmp59hrom2a.cpp:26:15:\
    \ error: redeclaration of \u2018long long int c\u2019\n   26 |     long long c\
    \ = a*((long long)1.0/root);\n      |               ^\n/tmp/tmp59hrom2a.cpp:19:15:\
    \ note: \u2018long long int c\u2019 previously declared here\n   19 |     long\
    \ long c = a*((long long)1.0/root);\n     "
  stdout: ''
  timestamp: 1659793897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b - a;\n    long e = c - a;\n    long f = d - e;\n    if (f < 0)\n\
    \        return false;\n    if (f == 0)\n        return true;\n    long g = e\
    \ + d;\n    if (g > f)\n        return false;\n    if (g == f)\n        return\
    \ true;\n    long h = b + c;\n    if (h > g)\n        return false;\n    if (h\
    \ == g)\n        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmppozq24_m: /tmp/tmppozq24_m.cpp:35: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    if(a>b){\n        long temp=a;\n        a=b;\n        b=temp;\n    }\n  \
    \  if(a>c){\n        long temp=a;\n        a=c;\n        c=temp;\n    }\n    if(b>c){\n\
    \        long temp=b;\n        b=c;\n        c=temp;\n    }\n    if(a==b){\n \
    \       if(a==c){\n            return true;\n        }\n        return false;\n\
    \    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n        return\
    \ false;\n    }\n    if(a>b){\n        long temp=a;\n        a=b;\n        b=temp;\n\
    \    }\n    if(a>c){\n        long temp=a;\n        a=c;\n        c=temp;\n  \
    \  }\n    if(b>c){\n        long temp=b;\n        b=c;\n        c=temp;\n    }\n\
    \    if(a==b){\n        if(a==c){\n            return true;\n        }\n     \
    \   return false;\n    }\n    if(a==c){\n        return false;\n    }\n    if(b==c){\n\
    \        return false;\n    }\n    if(a>b){\n        long temp=a;\n        a=b;\n\
    \        b=temp;\n    }\n    if(a>c){\n        long temp=a;\n        a=c;\n  \
    \      c=temp;\n    }\n    if(b>c){\n        long temp=b;\n        b=c;\n    \
    \    c=temp;\n    }\n    if(a==b){\n        if(a==c){\n            return true;\n\
    \        }\n        return false;\n    }\n    if(a==c){\n        return false;\n\
    \    }\n    if(b==c){\n        return false;\n    }\n    if(a>b){\n        long\
    \ temp=a;\n        a=b;\n        b=temp;\n    }\n    if(a>c){\n        long temp=a;\n\
    \        a=c;\n        c=temp;\n    }\n    if(b>c){\n        long temp=b;\n  \
    \      b=c;\n        c=temp;\n    }\n    if(a==b){\n        if(a==c){\n      \
    \      return true;\n        }\n        return false;\n    }\n    if(a==c){\n\
    \        return false;\n    }\n    if(b==c){\n        return false;\n    }\n \
    \   if(a>b){\n        long temp=a;\n        a=b;\n        b=temp;\n    }\n   \
    \ if(a>c){\n        long temp=a;\n        a=c;\n        c=temp;\n    }\n    if(b>c){\n\
    \        long temp=b;\n        b=c;\n        c=temp;\n\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjjlwtacp.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpjjlwtacp.cpp:138:12: error: a function-definition\
    \ is not allowed here before \u2018{\u2019 token\n  138 | int main() {\n     \
    \ |            ^\n/tmp/tmpjjlwtacp.cpp:151:1: error: expected \u2018}\u2019 at\
    \ end of input\n  151 | }\n      | ^\n/tmp/tmpjjlwtacp.cpp:12:51: note: to match\
    \ this \u2018{\u2019\n   12 | bool right_angle_triangle(long a, long b, long c)\
    \ {\n      |                                                   ^\n/tmp/tmpjjlwtacp.cpp:151:1:\
    \ warning: control reaches end of non-void function [-Wreturn-type]\n  151 | }\n\
    \      | ^\n"
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long d = b - a;\n    long e = c - a;\n    long f = d - e;\n    long g = e\
    \ - b;\n    long h = f - g;\n    long i = g - c;\n    long j = h - i;\n    long\
    \ k = i - f;\n    long l = j - k;\n    long m = k - d;\n    long n = l - m;\n\
    \    long o = m - e;\n    long p = n - o;\n    long q = o - b;\n    long r = p\
    \ - q;\n    long s = q - c;\n    long t = r - s;\n    long u = s - d;\n    long\
    \ v = t - u;\n    long w = u - e;\n    long x = v - w;\n    long y = w - f;\n\
    \    long z = x - y;\n    long a = z - x;\n    long b = y - z;\n    long c = x\
    \ - a;\n    long d = b - c;\n    long e = c - d;\n    long f = d - e;\n    long\
    \ g = e - f;\n    long h = f - g;\n    long i = g - h;\n    long j = h - i;\n\
    \    long k = i - j;\n    long l = j - k;\n    long m = k - l;\n    long n = l\
    \ - m;\n    long o = m - n;\n    long p = n - o;\n    long q = o - p;\n    long\
    \ r = p - q;\n    long s = q - r;\n    long t = r - s;\n    long u = s - t;\n\
    \    long v = t - u;\n    long w = u - v;\n    long x = v - w;\n    long y = w\
    \ - x;\n    long z = x - y;\n    long a = z - y;\n    long b = y - z;\n    long\
    \ c = x - a;\n    long d = b - c;\n    long e = c - d;\n    long f = d - e;\n\
    \    long g = e - f;\n    long h = f - g;\n    long i = g - h;\n    long j = h\
    \ - i;\n    long k = i - j;\n    long l = j - k;\n    long m = k - l;\n    long\
    \ n = l - m;\n    long o = m - n;\n    long p = n - o;\n    long q = o - p;\n\
    \    long r = p - q;\n    long s = q - r;\n    long t = r - s;\n    long u = s\
    \ - t;\n    long v = t - u;\n    long w = u - v;\n    long x = v - w;\n    long\
    \ y = w - x;\n    long z = x - y;\n    long a = \n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu4bw6ohc.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpu4bw6ohc.cpp:37:10: error: declaration\
    \ of \u2018long int a\u2019 shadows a parameter\n   37 |     long a = z - x;\n\
    \      |          ^\n/tmp/tmpu4bw6ohc.cpp:38:10: error: declaration of \u2018\
    long int b\u2019 shadows a parameter\n   38 |     long b = y - z;\n      |   \
    \       ^\n/tmp/tmpu4bw6ohc.cpp:39:10: error: declaration of \u2018long int c\u2019\
    \ shadows a parameter\n   39 |     long c = x - a;\n      |          ^\n/tmp/tmpu4bw6ohc.cpp:40:10:\
    \ error: redeclaration of \u2018long int d\u2019\n   40 |     long d = b - c;\n\
    \      |          ^\n/tmp/tmpu4bw6ohc.cpp:14:10: note: \u2018long int d\u2019\
    \ previously declared here\n   14 |     long d = b - a;\n      |          ^\n\
    /tmp/tmpu4bw6ohc.cpp:41:10: error: redeclaration of \u2018long int e\u2019\n \
    \  41 |     long e = c - d;\n      |          ^\n/tmp/tmpu4bw6ohc.cpp:15:10: note:\
    \ \u2018long int e\u2019 previously declared here\n   15 |     long e = c - a;\n\
    \      |          ^\n/tmp/tmpu4bw6ohc.cpp:42:10: error: redeclaration of \u2018\
    long int f\u2019\n   42 |     long f = d - e;\n      |          ^\n/tmp/tmpu4bw6ohc.cpp:16:10:\
    \ note: \u2018long int f\u2019 previously declared here\n   16 |     long f =\
    \ d - e;\n      |          ^\n/tmp/tmpu4bw6ohc.cpp:43:10: error: redeclaration\
    \ of \u2018long int g\u2019\n   43 |     long g = e - f;\n      |          ^\n\
    /tmp/tmpu4bw6ohc.cpp:17:10: note: \u2018long int g\u2019 previously declared here\n\
    \   17 |     long g = e - b;\n      |          ^\n/tmp/tmpu4bw6ohc.cpp:44:10:\
    \ error: redeclaration of \u2018long int h\u2019\n   44 |     long h = f - g;\n\
    \      |          ^\n/tmp/tmpu4bw6ohc.cpp:18:10: note: \u2018long int h\u2019\
    \ previously declared here\n   18 |     long h = f - g;\n      |          ^\n\
    /tmp/tmpu4bw6ohc.cpp:45:10: error: redeclaration of \u2018long int i\u2019\n \
    \  45 |     long i = g - h;\n      |          ^\n/tmp/tmpu4bw6ohc.cpp:19:10: note:\
    \ \u2018long int i\u2019 previously declared here\n   19 |     long i = g - c;\n\
    \      |          ^\n/tmp/tmpu4bw6ohc.cpp:46:10: error: redeclaration of \u2018\
    long int j\u2019\n   46 |     long j = h - i;\n      |          ^\n/tmp/tmpu4bw6ohc.cpp:20:10:\
    \ note: \u2018long int j\u2019 previously declared "
  stdout: ''
  timestamp: 1659793897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == 0 && t == 0) || (s > 0 && t > 0);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy2g_mvtl: /tmp/tmpy2g_mvtl.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = ((b * b) - 4 * a * c) / d;\n    long\
    \ y = ((-b) + sqrt(d)) / 2;\n    long z = ((-b) - sqrt(d)) / 2;\n    if (x ==\
    \ y && x == z)\n        return true;\n    return false;\n}\nint main() {\n   \
    \ auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpeqsbmmnk: /tmp/tmpeqsbmmnk.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long long int a1 = (a + b + c) / 2;\n    long long int b1 = (a + b) / 2;\n\
    \    long long int c1 = (a + c) / 2;\n    long long int a2 = (a1 + b1 + c1) /\
    \ 2;\n    long long int b2 = (a1 + b1) / 2;\n    long long int c2 = (a1 + c2)\
    \ / 2;\n    long long int a3 = (b1 + c1 + a2) / 2;\n    long long int b3 = (b1\
    \ + c1) / 2;\n    long long int c3 = (b1 + c2) / 2;\n    long long int a4 = (c1\
    \ + a2 + a3) / 2;\n    long long int b4 = (c1 + a2) / 2;\n    long long int c5\
    \ = (c1 + c3) / 2;\n    long long int a6 = (b2 + c2 + a4) / 2;\n    long long\
    \ int b6 = (b2 + c2) / 2;\n    long long int c7 = (b2 + c5) / 2;\n    long long\
    \ int a8 = (c2 + a4 + a6) / 2;\n    long long int b8 = (c2 + a4) / 2;\n    long\
    \ long int c9 = (c2 + c6) / 2;\n    long long int a10 = (b3 + c3 + a7) / 2;\n\
    \    long long int b10 = (b3 + c3) / 2;\n    long long int c10 = (b3 + c7) / 2;\n\
    \    long long int a11 = (c3 + a7 + a10) / 2;\n    long long int b11 = (c3 + a7)\
    \ / 2;\n    long long int c11 = (c3 + c10) / 2;\n    long long int a12 = (b4 +\
    \ c4 + a8) / 2;\n    long long int b12 = (b4 + c4) / 2;\n    long long int c12\
    \ = (b4 + c11) / 2;\n    long long int a13 = (c4 + a8 + a12) / 2;\n    long long\
    \ int b13 = (c4 + a8) / 2;\n    long long int c13 = (c4 + c13) / 2;\n    long\
    \ long int a14 = (b5 + c5 + a9) / 2;\n    long long int b14 = (b5 + c5) / 2;\n\
    \    long long int c14 = (b5 + c14) / 2;\n    long long int a15 = (c5 + a9 + a14)\
    \ / 2;\n    long long int b15 = (c5 + a9) / 2;\n    long long int c15 = (c5 +\
    \ c15) / 2;\n    long long int a16 = (b6 + c6 + a10) / 2;\n    long long int b16\
    \ = (b6 + c6) / 2;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpezhymqb3.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpezhymqb3.cpp:31:30: error: \u2018c6\u2019\
    \ was not declared in this scope; did you mean \u2018c9\u2019?\n   31 |     long\
    \ long int c9 = (c2 + c6) / 2;\n      |                              ^~\n    \
    \  |                              c9\n/tmp/tmpezhymqb3.cpp:32:36: error: \u2018\
    a7\u2019 was not declared in this scope; did you mean \u2018a8\u2019?\n   32 |\
    \     long long int a10 = (b3 + c3 + a7) / 2;\n      |                       \
    \             ^~\n      |                                    a8\n/tmp/tmpezhymqb3.cpp:38:31:\
    \ error: \u2018c4\u2019 was not declared in this scope; did you mean \u2018c9\u2019\
    ?\n   38 |     long long int a12 = (b4 + c4 + a8) / 2;\n      |              \
    \                 ^~\n      |                               c9\n/tmp/tmpezhymqb3.cpp:44:26:\
    \ error: \u2018b5\u2019 was not declared in this scope; did you mean \u2018b8\u2019\
    ?\n   44 |     long long int a14 = (b5 + c5 + a9) / 2;\n      |              \
    \            ^~\n      |                          b8\n/tmp/tmpezhymqb3.cpp:44:36:\
    \ error: \u2018a9\u2019 was not declared in this scope; did you mean \u2018c9\u2019\
    ?\n   44 |     long long int a14 = (b5 + c5 + a9) / 2;\n      |              \
    \                      ^~\n      |                                    c9\n/tmp/tmpezhymqb3.cpp:52:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   52 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a > b && a > c) {\n\
    \        return true;\n    }\n    if (b > c && b > a) {\n        return true;\n\
    \    }\n    if (c > a && c > b) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpixehj67q.cpp: In function 'int main()':\n/tmp/tmpixehj67q.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = right_angle_triangle;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpixehj67q.cpp:2:\n/tmp/tmpixehj67q.cpp:26:35: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((3), (4),\
    \ (5)) == (true));\n                                   ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long bd = abs(d - b);\n\
    \    long cd = abs(c - d);\n    long ad = abs(d - a);\n    long abc = ab + ac;\n\
    \    long bcd = bc + bd;\n    long acd = ac + cd;\n    long abcd = abc + bcd;\n\
    \    long acbd = acd + bcd;\n    long abcda = abcd + ad;\n    long acdbc = acbd\
    \ + cd;\n    long acdbd = acdbc + bd;\n    long acdbda = acdbd + ad;\n    long\
    \ acdbcd = acdbda + cd;\n    long acdbcda = acdbcd + ad;\n    long acdbcdbc =\
    \ acdbcda + bd;\n    long acdbcdbd = acdbcdbc + ad;\n    long acdbcdbda = acdbcdbd\
    \ + cd;\n    long acdbcdbcd = acdbcdbda + bd;\n    long acdbcdbcda = acdbcdbcd\
    \ + ad;\n    long acdbcdbcdbc = acdbcdbcda + cd;\n    long acdbcdbcdbd = acdbcdbcdbc\
    \ + ad;\n    long acdbcdbcdbda = acdbcdbcdbd + cd;\n    long acdbcdbcdbcd = acdbcdbcdbda\
    \ + bd;\n    long acdbcdbcdbcda = acdbcdbcdbcd + ad;\n    long acdbcdbcdbcdbc\
    \ = acdbcdbcdbcda + cd;\n    long acdbcdbcdbcdbd = acdbcdbcdbcdbc + ad;\n    long\
    \ acdbcdbcdbcdbda = acdbcdbcdbcdbd + cd;\n    long acdbcdbcdbcdbcd = acdbcdbcdbcdbda\
    \ + bd;\n    long acdbcdbcdbcdbcda = acdbcdbcdbcdbcd + ad;\n    long acdbcdbcdbcdbcdbc\
    \ = acdbcdbcdbcdbcda + cd;\n    long acdbcdbcdbcdbcdbd = \n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwr725kru.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpwr725kru.cpp:16:19: error: \u2018d\u2019\
    \ was not declared in this scope; did you mean \u2018bd\u2019?\n   16 |     long\
    \ bd = abs(d - b);\n      |                   ^\n      |                   bd\n\
    /tmp/tmpwr725kru.cpp:47:1: error: expected primary-expression before \u2018}\u2019\
    \ token\n   47 | }\n      | ^\n/tmp/tmpwr725kru.cpp:47:1: warning: no return statement\
    \ in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0) return true;\n    if (a == 0 || b == 0 || c == 0) return false;\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) return false;\n    long x = (b\
    \ + c) / 2;\n    long y = (-b + c) / 2;\n    long m = (a + b) / 2;\n    long n\
    \ = (-a + b) / 2;\n    long o = (a + m) / 2;\n    long p = (-a + m) / 2;\n   \
    \ long q = (a + n) / 2;\n    long r = (-a + n) / 2;\n    long s = (a + o) / 2;\n\
    \    long t = (-a + o) / 2;\n    long u = (a + p) / 2;\n    long v = (-a + p)\
    \ / 2;\n    long w = (a + q) / 2;\n    long x = (-a + q) / 2;\n    long y = (a\
    \ + r) / 2;\n    long z = (-a + r) / 2;\n    long w = (a + s) / 2;\n    long x\
    \ = (-a + s) / 2;\n    long y = (a + t) / 2;\n    long z = (-a + t) / 2;\n   \
    \ long w = (a + u) / 2;\n    long x = (-a + u) / 2;\n    long y = (a + v) / 2;\n\
    \    long z = (-a + v) / 2;\n    long w = (a + w) / 2;\n    long x = (-a + w)\
    \ / 2;\n    long y = (a + x) / 2;\n    long z = (-a + x) / 2;\n    long w = (a\
    \ + y) / 2;\n    long x = (-a + y) / 2;\n    long y = (a + z) / 2;\n    long z\
    \ = (-a + z) / 2;\n    long w = (a + w) / 2;\n    long x = (-a + w) / 2;\n   \
    \ long y = (a + x) / 2;\n    long z = (-a + x) / 2;\n    long w = (a + y) / 2;\n\
    \    long x = (-a + y) / 2;\n    long y = (a + z) / 2;\n    long z = (-a + z)\
    \ / 2;\n    long w = (a + w) / 2;\n    long x = (-a + w) / 2;\n    long y = (a\
    \ + x) / 2;\n    long z = (-a + x) / 2;\n    long w = (a + y) / 2;\n    long x\
    \ = (-a + y) / 2;\n    long y = (a + z) / 2;\n    long z = (-a + z) / 2;\n   \
    \ long w = (a + w) / 2;\n    long x = (-a + w) / 2;\n    long y = (a + x) / 2;\n\
    \    \n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2tzypx65.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp2tzypx65.cpp:30:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   30 |     long x = (-a + q) / 2;\n      |     \
    \     ^\n/tmp/tmp2tzypx65.cpp:17:10: note: \u2018long int x\u2019 previously declared\
    \ here\n   17 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmp2tzypx65.cpp:31:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   31 |     long y = (a + r)\
    \ / 2;\n      |          ^\n/tmp/tmp2tzypx65.cpp:18:10: note: \u2018long int y\u2019\
    \ previously declared here\n   18 |     long y = (-b + c) / 2;\n      |      \
    \    ^\n/tmp/tmp2tzypx65.cpp:33:10: error: redeclaration of \u2018long int w\u2019\
    \n   33 |     long w = (a + s) / 2;\n      |          ^\n/tmp/tmp2tzypx65.cpp:29:10:\
    \ note: \u2018long int w\u2019 previously declared here\n   29 |     long w =\
    \ (a + q) / 2;\n      |          ^\n/tmp/tmp2tzypx65.cpp:34:10: error: redeclaration\
    \ of \u2018long int x\u2019\n   34 |     long x = (-a + s) / 2;\n      |     \
    \     ^\n/tmp/tmp2tzypx65.cpp:17:10: note: \u2018long int x\u2019 previously declared\
    \ here\n   17 |     long x = (b + c) / 2;\n      |          ^\n/tmp/tmp2tzypx65.cpp:35:10:\
    \ error: redeclaration of \u2018long int y\u2019\n   35 |     long y = (a + t)\
    \ / 2;\n      |          ^\n/tmp/tmp2tzypx65.cpp:18:10: note: \u2018long int y\u2019\
    \ previously declared here\n   18 |     long y = (-b + c) / 2;\n      |      \
    \    ^\n/tmp/tmp2tzypx65.cpp:36:10: error: redeclaration of \u2018long int z\u2019\
    \n   36 |     long z = (-a + t) / 2;\n      |          ^\n/tmp/tmp2tzypx65.cpp:32:10:\
    \ note: \u2018long int z\u2019 previously declared here\n   32 |     long z =\
    \ (-a + r) / 2;\n      |          ^\n/tmp/tmp2tzypx65.cpp:37:10: error: redeclaration\
    \ of \u2018long int w\u2019\n   37 |     long w = (a + u) / 2;\n      |      \
    \    ^\n/tmp/tmp2tzypx65.cpp:29:10: note: \u2018long int w\u2019 previously declared\
    \ here\n   29 |     long w = (a + q) / 2;\n      |          ^\n/tmp/tmp2tzypx65.cpp:38:10:\
    \ error: redeclaration of \u2018long int x\u2019\n   38 |     long x = (-a + u)\
    \ / 2;\n      |          ^\n/tmp/tmp2tzypx65.cpp:17:10: note: \u2018long int x\u2019\
    \ previously declared here\n   17 |     long x = (b + c) / 2;\n      |       \
    \   ^\n/tmp"
  stdout: ''
  timestamp: 1659793897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    if (root < 0)\n        return false;\n    if (root == 0)\n       \
    \ return true;\n    long x = ((-b - root) / a) / 2;\n    long y = ((-b + root)\
    \ / a) / 2;\n    long z = ((-b - root) / a) / 2;\n    return (x * x + y * y +\
    \ z * z == 1);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp3c3r6x2s: /tmp/tmp3c3r6x2s.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 * a1, b2 = b1 * b1, c2 = c1\
    \ * c1;\n    long long a3 = a1 * a2, b3 = b1 * b2, c3 = c1 * c2;\n    long long\
    \ a4 = a1 * a3, b4 = b1 * b3, c4 = c1 * c3;\n    long long a5 = a1 * a4, b5 =\
    \ b1 * b4, c5 = c1 * c4;\n    long long a6 = a1 * a5, b6 = b1 * b5, c6 = c1 *\
    \ c5;\n    long long a7 = a1 * a6, b7 = b1 * b6, c7 = c1 * c6;\n    long long\
    \ a8 = a1 * a7, b8 = b1 * b7, c8 = c1 * c7;\n    long long a9 = a1 * a8, b9 =\
    \ b1 * b8, c9 = c1 * c8;\n    long long a10 = a1 * a9, b10 = b1 * b9, c10 = c1\
    \ * c9;\n    long long a11 = a1 * a10, b11 = b1 * b10, c11 = c1 * c10;\n    long\
    \ long a12 = a1 * a11, b12 = b1 * b11, c12 = c1 * c11;\n    long long a13 = a1\
    \ * a12, b13 = b1 * b12, c13 = c1 * c12;\n    long long a14 = a1 * a13, b14 =\
    \ b1 * b13, c14 = c1 * c13;\n    long long a15 = a1 * a14, b15 = b1 * b14, c15\
    \ = c1 * c14;\n    long long a16 = a1 * a15, b16 = b1 * b15, c16 = c1 * c15;\n\
    \    long long a17 = a1 * a16, b17 = b1 * b16, c17 = c1 * c16;\n    long long\
    \ a18 = a1 * a17, b18 = b1 * b17, c18 = c1 * c17;\n    long long a19 = a1 * a18,\
    \ b19 = b1 * b18, c19 = c1 * c18;\n    long long a20 = a1 * a19, b20 = b1 * b19,\
    \ c20 = c1 * c19;\n    long long a21 = a1 * a20, b21 = b1 * b20, c21 = c1 * c20;\n\
    \    long long a22 = a1 * a21, b22 = b1 * b21, c22 = c1 * c21;\n    long long\
    \ a23 = a1 * a22, b23 = b1 * b22, c23 = c1 * c22;\n    long long a24 = a1 * a23,\
    \ b24 = b1 * b23, c24 = c1 * c23;\n\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpd7as6frs: /tmp/tmpd7as6frs.cpp:41: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = (a + b\
    \ + c) / 2;\n    long long b1 = (a + b) / 2;\n    long long c1 = (a + c) / 2;\n\
    \    long long a2 = (a1 + b1 + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n \
    \   long long c2 = (a1 + c2) / 2;\n    long long a3 = (b1 + c1 + a2) / 2;\n  \
    \  long long b3 = (b1 + c1) / 2;\n    long long c3 = (b1 + c2) / 2;\n    long\
    \ long a4 = (c1 + a2 + a3) / 2;\n    long long b4 = (c1 + a2) / 2;\n    long long\
    \ c4 = (c1 + c3) / 2;\n    long long a5 = (b2 + c3 + a4) / 2;\n    long long b5\
    \ = (b2 + c3) / 2;\n    long long c5 = (b2 + c4) / 2;\n    long long a6 = (c2\
    \ + a4 + a5) / 2;\n    long long b6 = (c2 + a4) / 2;\n    long long c6 = (c2 +\
    \ c5) / 2;\n    long long a7 = (b3 + c5 + a6) / 2;\n    long long b7 = (b3 + c5)\
    \ / 2;\n    long long c7 = (b3 + c6) / 2;\n    long long a8 = (c4 + a6 + a7) /\
    \ 2;\n    long long b8 = (c4 + a6) / 2;\n    long long c8 = (c4 + c8) / 2;\n \
    \   long long a9 = (b5 + c6 + a7) / 2;\n    long long b9 = (b5 + c6) / 2;\n  \
    \  long long c9 = (b5 + c8) / 2;\n    long long a10 = (c6 + a7 + a9) / 2;\n  \
    \  long long b10 = (c6 + a7) / 2;\n    long long c10 = (c6 + c9) / 2;\n    long\
    \ long a11 = (b7 + c9 + a10) / 2;\n    long long b11 = (b7 + c9) / 2;\n    long\
    \ long c11 = (b7 + c10) / 2;\n    long long a12 = (b8 + c10 + a11) / 2;\n    long\
    \ long b12 = (b8 + c10) / 2;\n    long long c12 = (b8 + c11) / 2;\n    long long\
    \ a13 = (b9 + c11 + a12) / 2;\n    long long b13 = (b9 + c11) / 2;\n    long long\
    \ c13 = (b9 + c12) / 2;\n    long long a14 = (b10 + c12 + a13) / 2;\n    long\
    \ long b14 = (b10 + c12) / 2;\n    long long c14 = (b10\n}\nint main() {\n   \
    \ auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpum8txfle.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpum8txfle.cpp:54:25: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   54 |     long long c14 = (b10\n\
    \      |                     ~   ^\n      |                         )\n   55 |\
    \ }\n      | ~                        \n/tmp/tmpum8txfle.cpp:55:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   55 | }\n     \
    \ | ^\n/tmp/tmpum8txfle.cpp:55:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long e = ((b * b) - 4 * a * c) / d;\n    if\
    \ (e < 0)\n        return false;\n    long f = ((b * b) - 4 * a * c) / d + a;\n\
    \    if (f < 0)\n        return false;\n    long g = ((b * b) - 4 * a * c) / d\
    \ + b;\n    if (g < 0)\n        return false;\n    if (e == 0 && f == 0 && g ==\
    \ 0)\n        return true;\n    if (e == 0 && f != 0)\n        return false;\n\
    \    if (e != 0 && f == 0)\n        return false;\n    if (e != 0 && f != 0)\n\
    \        return true;\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpwm60ufw4: /tmp/tmpwm60ufw4.cpp:39: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long ab = abs(b - a);\n\
    \    long ac = abs(c - a);\n    long bc = abs(b - c);\n    long cb = abs(c - b);\n\
    \    long abc = ab + ac;\n    long bcb = bc + cb;\n    long abbc = abb + bcc;\n\
    \    long abcc = abc + cbb;\n    long abbb = abbc + cbb;\n    long abbba = abbb\
    \ + cba;\n    long abbca = abbca + cba;\n    long abccb = abcca + cbc;\n    long\
    \ abccc = abccb + cbc;\n    long abbbc = abbbc + cbc;\n    long abbbac = abbbac\
    \ + cba;\n    long abbcaa = abbcaa + cba;\n    long abccbc = abccbc + cbc;\n \
    \   long abcccb = abccca + cbc;\n    long abbbcb = abbbca + cbc;\n    long abbbaca\
    \ = abbbac + cba;\n    long abbcaab = abbcaa + cba;\n    long abccbcb = abccbc\
    \ + cbc;\n    long abcccbc = abccca + cbc;\n    long abbbcba = abbbca + cba;\n\
    \    long abbbacaa = abbbac + cba;\n    long abbcaabb = abbcaa + cba;\n    long\
    \ abccbcba = abccbc + cba;\n    long abcccbca = abccca + cba;\n    long abbbcbaa\
    \ = abbbca + cba;\n    long abbbacaab = abbbac + cba;\n    long abbcaabb = abbcaa\
    \ + cba;\n    long abccbcbaa = abccbc + cba;\n    long abcccbcaa = abccca + cba;\n\
    \    long abbbcbaab = abbbca + cba;\n    long abbbacaabb = abbbac + cba;\n   \
    \ long abbcaabbc = abbcaa + cba;\n    long abccbcbaab = abccbc + cba;\n    long\
    \ abcccbcaab = abccca + cba;\n    long abbbcbaabb = abbbc\n}\nint main() {\n \
    \   auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkitk_4kd.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpkitk_4kd.cpp:19:17: error: \u2018abb\u2019\
    \ was not declared in this scope; did you mean \u2018abbc\u2019?\n   19 |    \
    \ long abbc = abb + bcc;\n      |                 ^~~\n      |               \
    \  abbc\n/tmp/tmpkitk_4kd.cpp:19:23: error: \u2018bcc\u2019 was not declared in\
    \ this scope; did you mean \u2018bcb\u2019?\n   19 |     long abbc = abb + bcc;\n\
    \      |                       ^~~\n      |                       bcb\n/tmp/tmpkitk_4kd.cpp:20:23:\
    \ error: \u2018cbb\u2019 was not declared in this scope; did you mean \u2018bcb\u2019\
    ?\n   20 |     long abcc = abc + cbb;\n      |                       ^~~\n   \
    \   |                       bcb\n/tmp/tmpkitk_4kd.cpp:22:25: error: \u2018cba\u2019\
    \ was not declared in this scope; did you mean \u2018cb\u2019?\n   22 |     long\
    \ abbba = abbb + cba;\n      |                         ^~~\n      |          \
    \               cb\n/tmp/tmpkitk_4kd.cpp:24:18: error: \u2018abcca\u2019 was not\
    \ declared in this scope; did you mean \u2018abccb\u2019?\n   24 |     long abccb\
    \ = abcca + cbc;\n      |                  ^~~~~\n      |                  abccb\n\
    /tmp/tmpkitk_4kd.cpp:24:26: error: \u2018cbc\u2019 was not declared in this scope;\
    \ did you mean \u2018abc\u2019?\n   24 |     long abccb = abcca + cbc;\n     \
    \ |                          ^~~\n      |                          abc\n/tmp/tmpkitk_4kd.cpp:30:19:\
    \ error: \u2018abccca\u2019 was not declared in this scope; did you mean \u2018\
    abcccb\u2019?\n   30 |     long abcccb = abccca + cbc;\n      |              \
    \     ^~~~~~\n      |                   abcccb\n/tmp/tmpkitk_4kd.cpp:31:19: error:\
    \ \u2018abbbca\u2019 was not declared in this scope; did you mean \u2018abbbcb\u2019\
    ?\n   31 |     long abbbcb = abbbca + cbc;\n      |                   ^~~~~~\n\
    \      |                   abbbcb\n/tmp/tmpkitk_4kd.cpp:43:10: error: redeclaration\
    \ of \u2018long int abbcaabb\u2019\n   43 |     long abbcaabb = abbcaa + cba;\n\
    \      |          ^~~~~~~~\n/tmp/tmpkitk_4kd.cpp:38:10: note: \u2018long int abbcaabb\u2019\
    \ previously declared here\n   38 |     long abbcaabb = abbcaa + cba;\n      |\
    \          ^~~~~~~~\n/tmp/tmpkitk_4kd.cpp:52:1: error: expected \u2018,\u2019\
    \ or \u2018;\u2019 before \u2018}\u2019 token\n   52 |"
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long int a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long int a2 = a1 + b1, c2 = a1 + c1, b2\
    \ = b1 + c1;\n    long long int a3 = a2 + b2, c3 = a2 + c2, b3 = b2 + c2;\n  \
    \  long long int a4 = a3 + b3, c4 = a3 + c3, b4 = b3 + c3;\n    long long int\
    \ a5 = a4 + b4, c5 = a4 + c4, b5 = b4 + c4;\n    long long int a6 = a5 + b5, c6\
    \ = a5 + c5, b6 = b6 + c5;\n    long long int a7 = a6 + b6, c7 = a6 + c6, b7 =\
    \ b7 + c6;\n    long long int a8 = a7 + b7, c8 = a7 + c7, b9 = b7 + c8;\n    long\
    \ long int a9 = a8 + b8, c9 = a8 + c8, b9 = b9 + c9;\n    long long int a10 =\
    \ a9 + b9, c10 = a9 + c9, b10 = b9 + c10;\n    long long int a11 = a10 + b10,\
    \ c11 = a10 + c10, b11 = b10 + c11;\n    long long int a12 = a11 + b11, c12 =\
    \ a11 + c11, b12 = b11 + c12;\n    long long int a13 = a12 + b12, c13 = a12 +\
    \ c12, b13 = b12 + c13;\n    long long int a14 = a13 + b13, c14 = a13 + c13, b14\
    \ = b13 + c14;\n    long long int a15 = a14 + b14, c15 = a14 + c14, b15 = b14\
    \ + c15;\n    long long int a16 = a15 + b15, c16 = a15 + c15, b16 = b15 + c16;\n\
    \    long long int a17 = a16 + b16, c17 = a16 + c16, b17 = b16 + c17;\n    long\
    \ long int a18 = a17 + b17, c18 = a17 + c17, b18 = b17 + c18;\n    long long int\
    \ a19 = a18 + b18, c19 = a18 + c18, b19 = b18 + c19;\n    long long int a20 =\
    \ a19 + b19, c20 = a19 + c19, b20 = b19 + c20;\n    long long int a21 = a20 +\
    \ b20, c21 = a20 + c21, b21 = b20\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp889vc6d7.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp889vc6d7.cpp:21:29: error: \u2018b8\u2019\
    \ was not declared in this scope; did you mean \u2018b9\u2019?\n   21 |     long\
    \ long int a9 = a8 + b8, c9 = a8 + c8, b9 = b9 + c9;\n      |                \
    \             ^~\n      |                             b9\n/tmp/tmp889vc6d7.cpp:22:45:\
    \ error: \u2018c9\u2019 was not declared in this scope; did you mean \u2018a9\u2019\
    ?\n   22 |     long long int a10 = a9 + b9, c10 = a9 + c9, b10 = b9 + c10;\n \
    \     |                                             ^~\n      |              \
    \                               a9\n/tmp/tmp889vc6d7.cpp:23:31: error: \u2018\
    b10\u2019 was not declared in this scope; did you mean \u2018c10\u2019?\n   23\
    \ |     long long int a11 = a10 + b10, c11 = a10 + c10, b11 = b10 + c11;\n   \
    \   |                               ^~~\n      |                             \
    \  c10\n/tmp/tmp889vc6d7.cpp:24:31: error: \u2018b11\u2019 was not declared in\
    \ this scope; did you mean \u2018a11\u2019?\n   24 |     long long int a12 = a11\
    \ + b11, c12 = a11 + c11, b12 = b11 + c12;\n      |                          \
    \     ^~~\n      |                               a11\n/tmp/tmp889vc6d7.cpp:25:31:\
    \ error: \u2018b12\u2019 was not declared in this scope; did you mean \u2018a12\u2019\
    ?\n   25 |     long long int a13 = a12 + b12, c13 = a12 + c12, b13 = b12 + c13;\n\
    \      |                               ^~~\n      |                          \
    \     a12\n/tmp/tmp889vc6d7.cpp:26:31: error: \u2018b13\u2019 was not declared\
    \ in this scope; did you mean \u2018a13\u2019?\n   26 |     long long int a14\
    \ = a13 + b13, c14 = a13 + c13, b14 = b13 + c14;\n      |                    \
    \           ^~~\n      |                               a13\n/tmp/tmp889vc6d7.cpp:27:31:\
    \ error: \u2018b14\u2019 was not declared in this scope; did you mean \u2018a14\u2019\
    ?\n   27 |     long long int a15 = a14 + b14, c15 = a14 + c14, b15 = b14 + c15;\n\
    \      |                               ^~~\n      |                          \
    \     a14\n/tmp/tmp889vc6d7.cpp:28:31: error: \u2018b15\u2019 was not declared\
    \ in this scope; did you mean \u2018a15\u2019?\n   28 |     long long int a16\
    \ = a15 + b15, c16 = a15 + c15, b16 = b15 + c16;\n     "
  stdout: ''
  timestamp: 1659793897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long e = std::sqrt(d);\n    long f = (b + e\
    \ * c) / a;\n    long g = (b - e * c) / a;\n    long h = (a + e * b) / a;\n  \
    \  return ((f < 0 && g < 0 && h < 0) || (f > 0 && g > 0 && h > 0));\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyrmw_1ft: /tmp/tmpyrmw_1ft.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long d = b * b - 4 * a * c;\n    if (d < 0) {\n        return false;\n  \
    \  }\n    long e = std::sqrt(d);\n    long f = (b + e) / 2;\n    long g = (b -\
    \ e) / 2;\n    long h = (a + g) / 2;\n    long i = (a - g) / 2;\n    return ((f\
    \ < 0 && g < 0 && h < 0 && i < 0) || (f > 0 && g > 0 && h > 0 && i > 0));\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpmkv7d8va: /tmp/tmpmkv7d8va.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == 0 && t == 0) || (s > 0 && t > 0);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpy2g_mvtl: /tmp/tmpy2g_mvtl.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793892
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long ans = (a*a + b*b - c*c)/2;\n    if(ans == 0)\n        return false;\n\
    \    long d = b*b - a*c;\n    if(d < 0)\n        return false;\n    long e = sqrt(d);\n\
    \    long f = (b*b - a*c)/e;\n    long g = (b*b + a*c)/e;\n    long h = (b*b +\
    \ a*c)/e;\n    long i = (b*b - a*c)/e;\n    long j = (b*b + a*c)/e;\n    long\
    \ k = (b*b + a*c)/e;\n    long l = (b*b - a*c)/e;\n    long m = (b*b + a*c)/e;\n\
    \    long n = (b*b - a*c)/e;\n    long o = (b*b + a*c)/e;\n    long p = (b*b -\
    \ a*c)/e;\n    long q = (b*b + a*c)/e;\n    long r = (b*b + a*c)/e;\n    long\
    \ s = (b*b - a*c)/e;\n    long t = (b*b + a*c)/e;\n    long u = (b*b - a*c)/e;\n\
    \    long v = (b*b + a*c)/e;\n    long w = (b*b + a*c)/e;\n    long x = (b*b -\
    \ a*c)/e;\n    long y = (b*b + a*c)/e;\n    long z = (b*b + a*c)/e;\n    long\
    \ A = (b*b - a*c)/e;\n    long B = (b*b + a*c)/e;\n    long C = (b*b + a*c)/e;\n\
    \    long D = (b*b - a*c)/e;\n    long E = (b*b + a*c)/e;\n    long F = (b*b -\
    \ a*c)/e;\n    long G = (b*b + a*c)/e;\n    long H = (b*b + a*c)/e;\n    long\
    \ I = (b*b - a*c)/e;\n    long J = (b*b + a*c)/e;\n    long K = (b*b + a*c)/e;\n\
    \    long L = (b*b - a*c)/e;\n    long M = (b*b + a*c)/e;\n    long N = (b*b -\
    \ a*c)/e;\n    long O = (b*b + a*c)/e;\n    long P = (b*b - a*c)/e;\n    long\
    \ Q = (b*b + a*c)/e;\n    long R = (b*b + a*c\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprov7z_yz.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmprov7z_yz.cpp:59:24: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   59 |     long R = (b*b + a*c\n\
    \      |              ~         ^\n      |                        )\n   60 | }\n\
    \      | ~                       \n/tmp/tmprov7z_yz.cpp:60:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   60 | }\n     \
    \ | ^\n/tmp/tmprov7z_yz.cpp:60:1: warning: control reaches end of non-void function\
    \ [-Wreturn-type]\n   60 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int sum = a+b+c;\n    long long int sum2 = sum*sum;\n    long long\
    \ int sum3 = sum2*sum;\n    long long int sum4 = sum3*sum;\n    long long int\
    \ sum5 = sum4*sum;\n    long long int sum6 = sum5*sum;\n    long long int sum7\
    \ = sum6*sum;\n    long long int sum8 = sum7*sum;\n    long long int sum9 = sum8*sum;\n\
    \    long long int sum10 = sum9*sum;\n    long long int sum11 = sum10*sum;\n \
    \   long long int sum12 = sum11*sum;\n    long long int sum13 = sum12*sum;\n \
    \   long long int sum14 = sum13*sum;\n    long long int sum15 = sum14*sum;\n \
    \   long long int sum16 = sum15*sum;\n    long long int sum17 = sum16*sum;\n \
    \   long long int sum18 = sum17*sum;\n    long long int sum19 = sum18*sum;\n \
    \   long long int sum20 = sum19*sum;\n    long long int sum21 = sum20*sum;\n \
    \   long long int sum22 = sum21*sum;\n    long long int sum23 = sum22*sum;\n \
    \   long long int sum24 = sum23*sum;\n    long long int sum25 = sum24*sum;\n \
    \   long long int sum26 = sum25*sum;\n    long long int sum27 = sum26*sum;\n \
    \   long long int sum28 = sum27*sum;\n    long long int sum29 = sum28*sum;\n \
    \   long long int sum30 = sum29*sum;\n    long long int sum31 = sum30*sum;\n \
    \   long long int sum32 = sum31*sum;\n    long long int sum33 = sum32*sum;\n \
    \   long long int sum34 = sum33*sum;\n    long long int sum35 = sum34*sum;\n \
    \   long long int sum36 = sum35*sum;\n    long long int sum37 = sum36*sum;\n \
    \   long long int sum38 = sum37*sum;\n    long long int sum39 = sum38*sum;\n \
    \   long long int sum40 = sum39*sum;\n    long long int sum4\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqu9rg9gc.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpqu9rg9gc.cpp:55:1: error: expected\
    \ initializer before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpqu9rg9gc.cpp:55:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793897
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int a1 = (a + b + c) / 2;\n    long long int b1 = (a + b) / 2;\n\
    \    long long int c1 = (a + c) / 2;\n    long long int a2 = (a1 + b1 + c1) /\
    \ 2;\n    long long int b2 = (a1 + b1) / 2;\n    long long int c2 = (a1 + c2)\
    \ / 2;\n    long long int a3 = (a2 + b2 + c2) / 2;\n    long long int b3 = (a2\
    \ + b2) / 2;\n    long long int c3 = (a2 + c3) / 2;\n    long long int a4 = (a3\
    \ + b3 + c3) / 2;\n    long long int b4 = (a3 + b3) / 2;\n    long long int c4\
    \ = (a3 + c4) / 2;\n    long long int a5 = (a4 + b4 + c4) / 2;\n    long long\
    \ int b5 = (a4 + b5) / 2;\n    long long int c5 = (a4 + c5) / 2;\n    long long\
    \ int a6 = (a5 + b5 + c5) / 2;\n    long long int b6 = (a5 + b6) / 2;\n    long\
    \ long int c6 = (a5 + c6) / 2;\n    long long int a7 = (a6 + b6 + c6) / 2;\n \
    \   long long int b7 = (a6 + b7) / 2;\n    long long int c7 = a7 / 2;\n    long\
    \ long int a8 = (a7 + b7 + c7) / 2;\n    long long int b8 = (a7 + b8) / 2;\n \
    \   long long int c8 = (a7 + c8) / 2;\n    long long int a9 = (a8 + b8 + c8) /\
    \ 2;\n    long long int b9 = (a8 + b9) / 2;\n    long long int c9 = (a8 + c9)\
    \ / 2;\n    long long int a10 = (a9 + b9 + c9) / 2;\n    long long int b10 = (a9\
    \ + b10) / 2;\n    long long int c10 = (a9 + c10) / 2;\n    long long int a11\
    \ = (a10 + b10 + c10) / 2;\n    long long int b11 = (a10 + b11) / 2;\n    long\
    \ long int c11 = (a10 + c11) / 2;\n    long long int a12 = (a11 + b11 + c11) /\
    \ 2;\n    long long int b12 = (a11 + b12) / 2;\n    long long int c12 = (a11 +\
    \ c12) / 2;\n    long long int a13 = (a12 + b12 + c12) / 2;\n    long long int\
    \ b13 = (a12 + b13) / 2;\n    long long int \n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1veeuv44.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp1veeuv44.cpp:53:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   53 | }\n      | ^\n/tmp/tmp1veeuv44.cpp:53:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793897
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, c2 = a1 + c1, b2 = b1\
    \ + c1;\n    return a1 == b1 && b1 == c1 && c1 == a2;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp3bchsadm: /tmp/tmp3bchsadm.cpp:19: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, b2 = b1 + c1, c2 = a1\
    \ + c1;\n    if (a2 > b2 && a2 > c2) return true;\n    if (b2 > c2) return true;\n\
    \    return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpvfcvtjg_: /tmp/tmpvfcvtjg_.cpp:22: int main(): Assertion `candidate((1),
    (2), (3)) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = (a + b\
    \ + c) / 2;\n    long long b1 = (a + b) / 2;\n    long long c1 = (a + c) / 2;\n\
    \    long long a2 = (a1 + b1 + c1) / 2;\n    long long b2 = (a1 + b1) / 2;\n \
    \   long long c2 = (a1 + c2) / 2;\n    long long a3 = (a2 + b2 + c2) / 2;\n  \
    \  long long b3 = (a2 + b2) / 2;\n    long long c3 = (a2 + c3) / 2;\n    long\
    \ long a4 = (a3 + b3 + c3) / 2;\n    long long b4 = (a3 + b3) / 2;\n    long long\
    \ c4 = (a3 + c4) / 2;\n    long long a5 = (a4 + b4 + c4) / 2;\n    long long b5\
    \ = (a4 + b5) / 2;\n    long long c5 = (a4 + c5) / 2;\n    long long a6 = (a5\
    \ + b5 + c5) / 2;\n    long long b6 = (a5 + b5) / 2;\n    long long c6 = (a5 +\
    \ c6) / 2;\n    long long a7 = (a6 + b6 + c6) / 2;\n    long long b7 = (a6 + b6)\
    \ / 2;\n    long long c7 = (a6 + c7) / 2;\n    long long a8 = (a7 + b7 + c7) /\
    \ 2;\n    long long b8 = (a7 + b7) / 2;\n    long long c8 = (a7 + c8) / 2;\n \
    \   long long a9 = (a8 + b8 + c8) / 2;\n    long long b9 = (a8 + b8) / 2;\n  \
    \  long long c9 = (a8 + c9) / 2;\n    long long a10 = (a9 + b9 + c9) / 2;\n  \
    \  long long b10 = (a9 + b9) / 2;\n    long long c10 = (a9 + c10) / 2;\n    long\
    \ long a11 = (a10 + b10 + c10) / 2;\n    long long b11 = (a10 + b10) / 2;\n  \
    \  long long c11 = (a10 + c11) / 2;\n    long long a12 = (a11 + b11 + c11) / 2;\n\
    \    long long b12 = (a11 + b11) / 2;\n    long long c12 = (a11 + c12) / 2;\n\
    \    long long a13 = (a12 + b12 + c12) / 2;\n    long long b13 = (a12 + b12) /\
    \ 2;\n    long long c13 = (a12 + c13) / 2;\n    long long a14 = (a13 + b13 + c13)\
    \ / 2;\n    long long b14 = (a13 + b13) / 2;\n    long long c14 = (a13 + \n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpltyybcso.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpltyybcso.cpp:55:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmpltyybcso.cpp:54:27:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   54 |     long long\
    \ c14 = (a13 +\n      |                     ~     ^\n      |                 \
    \          )\n   55 | }\n      | ~                          \n/tmp/tmpltyybcso.cpp:55:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   55 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793898
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long ab = abs(b - c);\n    long ac = abs(a - c);\n    long bc = abs(b - c);\n\
    \    long bd = abs(b - d);\n    long cd = abs(c - d);\n    long abc = ab + ac;\n\
    \    long bcd = bc + bd;\n    long acd = ac + cd;\n    long abbc = abc + bcd;\n\
    \    long abac = abc + acd;\n    long abbd = abbc + bd;\n    long abbc = abbc\
    \ + cd;\n    long abac = abac + cd;\n    long abbd = abbd + bd;\n    long abbc\
    \ = abbc + bd;\n    long abac = abac + acd;\n    long abbd = abbd + bd;\n    long\
    \ abbc = abbc + bd;\n    long abac = abac + acd;\n    long abbd = abbd + bd;\n\
    \    long abbc = abbc + bd;\n    long abac = abac + acd;\n    long abbd = abbd\
    \ + bd;\n    long abbc = abbc + bd;\n    long abac = abac + acd;\n    long abbd\
    \ = abbd + bd;\n    long abbc = abbc + bd;\n    long abac = abac + acd;\n    long\
    \ abbd = abbd + bd;\n    long abbc = abbc + bd;\n    long abac = abac + acd;\n\
    \    long abbd = abbd + bd;\n    long abbc = abbc + bd;\n    long abac = abac\
    \ + acd;\n    long abbd = abbd + bd;\n    long abbc = abbc + bd;\n    long abac\
    \ = abac + acd;\n    long abbd = abbd + bd;\n    long abbc = abbc + bd;\n    long\
    \ abac = abac + acd;\n    long abbd = abbd + bd;\n    long abbc = abbc + bd;\n\
    \    long abac = abac + acd;\n    long abbd = abbd + bd;\n    long abbc = abbc\
    \ + bd;\n    long abac = abac + acd;\n    long abbd = abbd + bd;\n    long abbc\
    \ = abbc + b\n}\nint main() {\n    auto candidate = right_angle_triangle;\n  \
    \  assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpqa72gsi0.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpqa72gsi0.cpp:17:23: error: \u2018d\u2019\
    \ was not declared in this scope; did you mean \u2018bd\u2019?\n   17 |     long\
    \ bd = abs(b - d);\n      |                       ^\n      |                 \
    \      bd\n/tmp/tmpqa72gsi0.cpp:25:10: error: redeclaration of \u2018long int\
    \ abbc\u2019\n   25 |     long abbc = abbc + cd;\n      |          ^~~~\n/tmp/tmpqa72gsi0.cpp:22:10:\
    \ note: \u2018long int abbc\u2019 previously declared here\n   22 |     long abbc\
    \ = abc + bcd;\n      |          ^~~~\n/tmp/tmpqa72gsi0.cpp:26:10: error: redeclaration\
    \ of \u2018long int abac\u2019\n   26 |     long abac = abac + cd;\n      |  \
    \        ^~~~\n/tmp/tmpqa72gsi0.cpp:23:10: note: \u2018long int abac\u2019 previously\
    \ declared here\n   23 |     long abac = abc + acd;\n      |          ^~~~\n/tmp/tmpqa72gsi0.cpp:27:10:\
    \ error: redeclaration of \u2018long int abbd\u2019\n   27 |     long abbd = abbd\
    \ + bd;\n      |          ^~~~\n/tmp/tmpqa72gsi0.cpp:24:10: note: \u2018long int\
    \ abbd\u2019 previously declared here\n   24 |     long abbd = abbc + bd;\n  \
    \    |          ^~~~\n/tmp/tmpqa72gsi0.cpp:28:10: error: redeclaration of \u2018\
    long int abbc\u2019\n   28 |     long abbc = abbc + bd;\n      |          ^~~~\n\
    /tmp/tmpqa72gsi0.cpp:22:10: note: \u2018long int abbc\u2019 previously declared\
    \ here\n   22 |     long abbc = abc + bcd;\n      |          ^~~~\n/tmp/tmpqa72gsi0.cpp:29:10:\
    \ error: redeclaration of \u2018long int abac\u2019\n   29 |     long abac = abac\
    \ + acd;\n      |          ^~~~\n/tmp/tmpqa72gsi0.cpp:23:10: note: \u2018long\
    \ int abac\u2019 previously declared here\n   23 |     long abac = abc + acd;\n\
    \      |          ^~~~\n/tmp/tmpqa72gsi0.cpp:30:10: error: redeclaration of \u2018\
    long int abbd\u2019\n   30 |     long abbd = abbd + bd;\n      |          ^~~~\n\
    /tmp/tmpqa72gsi0.cpp:24:10: note: \u2018long int abbd\u2019 previously declared\
    \ here\n   24 |     long abbd = abbc + bd;\n      |          ^~~~\n/tmp/tmpqa72gsi0.cpp:31:10:\
    \ error: redeclaration of \u2018long int abbc\u2019\n   31 |     long abbc = abbc\
    \ + bd;\n      |          ^~~~\n/tmp/tmpqa72gsi0.cpp:22:10: note: \u2018long int\
    \ abbc\u2019 previously declared here\n   22 |     long abbc ="
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root))/2*a;\n    long t = (-b - sqrt(root))/2*a;\n\
    \    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwdgv30yu: /tmp/tmpwdgv30yu.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long s = (-b + root) / (2 * a);\n    long t = (-b - root) / (2\
    \ * a);\n    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpsoc0pbwq: /tmp/tmpsoc0pbwq.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = (a + b\
    \ + c) / 2;\n    long long a2 = (b + c + a) / 2;\n    long long a3 = (c + a +\
    \ b) / 2;\n    long long a4 = (a1 + a2 + a3) / 3;\n    long long a5 = (a2 + a3\
    \ + a4) / 3;\n    long long a6 = (b2 + b3 + b4) / 3;\n    long long a7 = (b3 +\
    \ b4 + a6) / 3;\n    long long a8 = (a3 + a4 + a7) / 3;\n    long long a9 = (a4\
    \ + a5 + a6) / 3;\n    long long a10 = (a5 + a6 + a7) / 3;\n    long long a11\
    \ = (a6 + a7 + a8) / 3;\n    long long a12 = (a7 + a8 + a9) / 3;\n    long long\
    \ a13 = (a8 + a9 + a10) / 3;\n    long long a14 = (a9 + a10 + a11) / 3;\n    long\
    \ long a15 = (a10 + a11 + a12) / 3;\n    long long a16 = (a11 + a12 + a13) / 3;\n\
    \    long long a17 = (a12 + a13 + a14) / 3;\n    long long a18 = (a13 + a14 +\
    \ a15) / 3;\n    long long a19 = (a14 + a15 + a16) / 3;\n    long long a20 = (a15\
    \ + a16 + a17) / 3;\n    long long a21 = (a16 + a17 + a18) / 3;\n    long long\
    \ a22 = (a17 + a18 + a19) / 3;\n    long long a23 = (a18 + a19 + a20) / 3;\n \
    \   long long a24 = (a19 + a20 + a21) / 3;\n    long long a25 = (a20 + a21 + a22)\
    \ / 3;\n    long long a26 = (a21 + a22 + a23) / 3;\n    long long a27 = (a22 +\
    \ a23 + a24) / 3;\n    long long a28 = (a23 + a24 + a25) / 3;\n    long long a29\
    \ = (a24 + a25 + a26) / 3;\n    long long a30 = (a25 + a26 + a27) / 3;\n    long\
    \ long a31 = (a26 + a27 + a28) / 3;\n    long long a32 = (a27 + a28 + a29) / 3;\n\
    \    long long a33 = (a28 + a29 + a30) / 3;\n    long long a34 = (a29 + a30 +\
    \ a31) / 3;\n    long long a35 = (a30 + a31 + a32) / 3;\n    long long a36 = (a31\
    \ + a32 + a33) / 3;\n    long long a37 = (a32 + a33 + a34) / 3;\n    long long\
    \ a38 = (a33\n}\nint main() {\n    auto candidate = right_angle_triangle;\n  \
    \  assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp62jduwk6.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp62jduwk6.cpp:18:21: error: \u2018b2\u2019\
    \ was not declared in this scope; did you mean \u2018a2\u2019?\n   18 |     long\
    \ long a6 = (b2 + b3 + b4) / 3;\n      |                     ^~\n      |     \
    \                a2\n/tmp/tmp62jduwk6.cpp:18:26: error: \u2018b3\u2019 was not\
    \ declared in this scope; did you mean \u2018a3\u2019?\n   18 |     long long\
    \ a6 = (b2 + b3 + b4) / 3;\n      |                          ^~\n      |     \
    \                     a3\n/tmp/tmp62jduwk6.cpp:18:31: error: \u2018b4\u2019 was\
    \ not declared in this scope; did you mean \u2018a4\u2019?\n   18 |     long long\
    \ a6 = (b2 + b3 + b4) / 3;\n      |                               ^~\n      |\
    \                               a4\n/tmp/tmp62jduwk6.cpp:50:25: error: expected\
    \ \u2018)\u2019 before \u2018}\u2019 token\n   50 |     long long a38 = (a33\n\
    \      |                     ~   ^\n      |                         )\n   51 |\
    \ }\n      | ~                        \n/tmp/tmp62jduwk6.cpp:51:1: error: expected\
    \ \u2018,\u2019 or \u2018;\u2019 before \u2018}\u2019 token\n   51 | }\n     \
    \ | ^\n/tmp/tmp62jduwk6.cpp:51:1: warning: no return statement in function returning\
    \ non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = (long)\
    \ sqrt(d);\n    long x = (long) (-b + root) / (2 * a);\n    long y = (long) (-b\
    \ - root) / (2 * a);\n    return (x * x + y * y) <= 1;\n}\nint main() {\n    auto\
    \ candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n\
    \    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpp7a07ua0: /tmp/tmpp7a07ua0.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int a1 = a/2;\n    long long int b1 = b/2;\n    long long int c1\
    \ = c/2;\n    long long int a2 = a1 + a1;\n    long long int b2 = b1 + b1;\n \
    \   long long int c2 = c1 + c1;\n    long long int a3 = a2 + a1;\n    long long\
    \ int b3 = b2 + b1;\n    long long int c3 = c2 + c1;\n    long long int a4 = a3\
    \ + a2;\n    long long int b4 = b4 + b2;\n    long long int c4 = c4 + c2;\n  \
    \  long long int a5 = a4 + a3;\n    long long int b5 = b5 + b3;\n    long long\
    \ int c5 = c5 + c3;\n    long long int a6 = a5 + a4;\n    long long int b6 = b6\
    \ + b4;\n    long long int c6 = c6 + c4;\n    long long int a7 = a6 + a5;\n  \
    \  long long int b7 = b7 + b5;\n    long long int c7 = c7 + c5;\n    long long\
    \ int a8 = a7 + a6;\n    long long int b8 = b8 + b6;\n    long long int c8 = c8\
    \ + c6;\n    long long int a9 = a8 + a7;\n    long long int b9 = b9 + b7;\n  \
    \  long long int c9 = c9 + c7;\n    long long int a10 = a9 + a8;\n    long long\
    \ int b10 = b10 + b8;\n    long long int c10 = c10 + c8;\n    long long int a11\
    \ = a10 + a9;\n    long long int b11 = b11 + b9;\n    long long int c11 = c11\
    \ + c9;\n    long long int a12 = a11 + a10;\n    long long int b12 = b12 + b10;\n\
    \    long long int c12 = c12 + c10;\n    long long int a13 = a12 + a11;\n    long\
    \ long int b13 = b13 + b11;\n    long long int c13 = c13 + c11;\n    long long\
    \ int a14 = a13 + a12;\n    long long int b14 = b14 + b12;\n    long long int\
    \ c14 = c14 + c12;\n    long long int a15 = a14 + a13;\n    long long int b15\
    \ = b15 + b13;\n    long long int c15 = c15 + c13;\n    long long int a16 = a15\
    \ + a14;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzujfwaul: /tmp/tmpzujfwaul.cpp:63: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long root = d*d / (2 * a);\n\
    \    if (root < 0)\n        return false;\n    long x = (-b - root) / (2 * a);\n\
    \    long y = (-b + root) / (2 * a);\n    return (x * x + y * y) <= 1;\n}\nint\
    \ main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp0_2o7x35: /tmp/tmp0_2o7x35.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0)\n        return false;\n    long sq = sqrt(d);\n    long\
    \ t1 = (-b + sq) / (2 * a);\n    long t2 = (-b - sq) / (2 * a);\n    return (t1\
    \ >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpz_f0qdou: /tmp/tmpz_f0qdou.cpp:23: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 && b == 0\
    \ && c == 0)\n        return true;\n    else if (a == 0 || b == 0 || c == 0)\n\
    \        return false;\n    long d = b * b - 4 * a * c;\n    if (d < 0)\n    \
    \    return false;\n    long x = (b + d) / (2 * a);\n    long y = (-b - d) / (2\
    \ * a);\n    return (x >= 0 && x <= 1 && y >= 0 && y <= 1);\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5q16y_5a: /tmp/tmp5q16y_5a.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + sqrt(root))/2*a;\n    long t = (-b - sqrt(root))/2*a;\n\
    \    return (s == t);\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpwdgv30yu: /tmp/tmpwdgv30yu.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793895
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long ans = a + b\
    \ + c;\n    long long sq = ans * ans;\n    long long sq1 = sq - a;\n    long long\
    \ sq2 = sq - b;\n    long long sq3 = sq - c;\n    long long sq4 = sq3 - b;\n \
    \   long long sq5 = sq3 - c;\n    long long sq6 = sq5 - a;\n    long long sq7\
    \ = sq5 - b;\n    long long sq8 = sq5 - c;\n    long long sq9 = sq6 - a;\n   \
    \ long long sq10 = sq6 - b;\n    long long sq11 = sq6 - c;\n    long long sq12\
    \ = sq9 - a;\n    long long sq13 = sq9 - b;\n    long long sq14 = sq9 - c;\n \
    \   long long sq15 = sq12 - a;\n    long long sq16 = sq12 - b;\n    long long\
    \ sq17 = sq12 - c;\n    long long sq18 = sq13 - a;\n    long long sq19 = sq13\
    \ - b;\n    long long sq20 = sq13 - c;\n    long long sq21 = sq14 - a;\n    long\
    \ long sq22 = sq14 - b;\n    long long sq23 = sq14 - c;\n    long long sq24 =\
    \ sq15 - a;\n    long long sq25 = sq15 - b;\n    long long sq26 = sq15 - c;\n\
    \    long long sq27 = sq16 - a;\n    long long sq28 = sq16 - b;\n    long long\
    \ sq29 = sq16 - c;\n    long long sq30 = sq17 - a;\n    long long sq31 = sq17\
    \ - b;\n    long long sq32 = sq17 - c;\n    long long sq33 = sq18 - a;\n    long\
    \ long sq34 = sq18 - b;\n    long long sq35 = sq18 - c;\n    long long sq36 =\
    \ sq19 - a;\n    long long sq37 = sq19 - b;\n    long long sq38 = sq19 - c;\n\
    \    long long sq39 = sq20 - a;\n    long long sq40 = sq20 - b;\n    long long\
    \ sq41 = sq20 - c;\n    long long sq42 = sq21 - a;\n    long long sq43 = sq21\
    \ - b;\n    long long sq44 = sq21 - c;\n    long long sq45 = sq22 - a;\n    long\
    \ long sq46 = sq22 - b;\n    long long \n}\nint main() {\n    auto candidate =\
    \ right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n   \
    \ assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpd_urxsoj.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpd_urxsoj.cpp:62:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   62 | }\n      | ^\n/tmp/tmpd_urxsoj.cpp:62:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a < 0 || b < 0 ||\
    \ c < 0) {\n        return false;\n    }\n    if (a + b > c) {\n        return\
    \ false;\n    }\n    if (a + c > b) {\n        return false;\n    }\n    if (b\
    \ + c > a) {\n        return false;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4), (5))\
    \ == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmprcgs44y9: /tmp/tmprcgs44y9.cpp:29: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793896
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / (2 * a);\n    if (root >= 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmp5ee1sk4r: /tmp/tmp5ee1sk4r.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long t1 = (-b + root) / a;\n    long t2 = (-b - root) / a;\n    return\
    \ t1 >= 0 && t1 <= 1 && t2 >= 0 && t2 <= 1;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpyij2kjja: /tmp/tmpyij2kjja.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long s = (-b + sqrt(d))\
    \ / (2 * a);\n    long t = (-b - sqrt(d)) / (2 * a);\n    if (s == t) {\n    \
    \    return true;\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpvbdss6ap: /tmp/tmpvbdss6ap.cpp:26: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long long a1 = abs(a),\
    \ b1 = abs(b), c1 = abs(c);\n    long long a2 = a1 + b1, b2 = b1 + c1, c2 = a1\
    \ + c1;\n    long long a3 = a2 + b2, b3 = b2 + c2, c3 = a2 + c2;\n    long long\
    \ a4 = a3 + b3, b4 = b3 + c3, c4 = a3 + c3;\n    long long a5 = a4 + b4, b5 =\
    \ b4 + c4, c5 = a4 + c4;\n    long long a6 = a5 + b5, b6 = b6 + c5, c6 = a5 +\
    \ c5;\n    long long a7 = a6 + b6, b7 = b7 + c6, c7 = a6 + c6;\n    long long\
    \ a8 = a7 + b7, b8 = b7 + c7, c8 = a7 + c7;\n    long long a9 = a8 + b8, b9 =\
    \ b8 + c8, c9 = a8 + c8;\n    long long a10 = a9 + b9, b10 = b9 + c9, c10 = a9\
    \ + c9;\n    long long a11 = a10 + b10, b11 = b10 + c10, c11 = a10 + c10;\n  \
    \  long long a12 = a11 + b11, b12 = b11 + c11, c12 = a11 + c11;\n    long long\
    \ a13 = a12 + b12, b13 = b12 + c12, c13 = a12 + c12;\n    long long a14 = a13\
    \ + b13, b14 = b13 + c13, c14 = a13 + c13;\n    long long a15 = a14 + b14, b15\
    \ = b14 + c14, c15 = a14 + c14;\n    long long a16 = a15 + b15, b16 = b15 + c15,\
    \ c16 = a15 + c15;\n    long long a17 = a16 + b16, b17 = b16 + c16, c17 = a16\
    \ + c16;\n    long long a18 = a17 + b17, b18 = b17 + c17, c18 = a17 + c17;\n \
    \   long long a19 = a18 + b18, b19 = b18 + c18, c19 = a18 + c18;\n    long long\
    \ a20 = a19 + b19, b20 = b19 + c19, c20 = a19 + c19;\n    long long a21 = a20\
    \ + b20, b21 = b20 + c20, c21 = a20 + c20;\n    long long a22 = a21 + b21, b22\
    \ = b21 + c21, \n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmprfc3au37.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmprfc3au37.cpp:35:1: error: expected\
    \ unqualified-id before \u2018}\u2019 token\n   35 | }\n      | ^\n/tmp/tmprfc3au37.cpp:35:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0)\n        return false;\n    long d = b * b - 4 * a * c;\n    if (d\
    \ < 0)\n        return false;\n    long x = (b + d) / (2 * a);\n    long y = (-b\
    \ - d) / (2 * a);\n    return ((x == 0 && y >= 0) || (x == 0 && y < 0)\n     \
    \       || (x >= 0 && y >= 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpmxtft6h_: /tmp/tmpmxtft6h_.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int sum = a+b+c;\n    long long int sum2 = a*a+b*b+c*c;\n    long\
    \ long int sum3 = a*a*a+b*b*b+c*c*c;\n    long long int sum4 = a*a*a*a+b*b*b*b+c*c*c*c;\n\
    \    long long int sum5 = a*a*a*a*a+b*b*b*b*b+c*c*c*c*c;\n    long long int sum6\
    \ = a*a*a*a*a*a+b*b*b*b*b*b+c*c*c*c*c*c;\n    long long int sum7 = a*a*a*a*a*a*a+b*b*b*b*b*b*b+c*c*c*c*c*c*c;\n\
    \    long long int sum8 = a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c;\n \
    \   long long int sum9 = a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum10 = a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum11 = a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum12 = a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum13 = a*a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum14 = a*a*a*a*a*a*a*a*a*a*a+b*b*b*b*b*b*b*b*b*b+c*c*c*c*c*c*c*c*c*c*c*c*c;\n\
    \    long long int sum15 = a*a*a*a*a*a*a*a*a*a*a*\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp666ssad1.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmp666ssad1.cpp:29:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   29 | }\n      | ^\n/tmp/tmp666ssad1.cpp:29:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    if (root >= 0) {\n        return true;\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpxsskl86k: /tmp/tmpxsskl86k.cpp:25: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long ans = (b * b) - (4 * a * c);\n    if (ans == 0)\n        return true;\n\
    \    else\n        return false;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp6bnwrj8g: /tmp/tmp6bnwrj8g.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    if (a == 0 || b == 0\
    \ || c == 0) return false;\n    long d = b * b - 4 * a * c;\n    if (d < 0) return\
    \ false;\n    long x = (b + c) / 2;\n    long y = (-b - c) / 2;\n    return ((x\
    \ * x) + (y * y)) <= 0;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmpjye1xjig: /tmp/tmpjye1xjig.cpp:22: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long sq = sqrt(d);\n\
    \    long root1 = (-b + sq) / (2 * a);\n    long root2 = (-b - sq) / (2 * a);\n\
    \    if (root1 == root2) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3),\
    \ (4), (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n  \
    \  assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2), (2),\
    \ (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10),\
    \ (5), (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n\
    \    assert(candidate((15), (8), (17)) == (true));\n    assert(candidate((48),\
    \ (55), (73)) == (true));\n    assert(candidate((1), (1), (1)) == (false));\n\
    \    assert(candidate((2), (2), (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpzs206ako: /tmp/tmpzs206ako.cpp:27: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int a1 = (a + b + c) / 2;\n    long long int b1 = (b + c + a) /\
    \ 2;\n    long long int c1 = (c + a + b) / 2;\n    long long int a2 = (a1 + b1\
    \ + c1) / 2;\n    long long int b2 = (b1 + c1 + a2) / 2;\n    long long int c2\
    \ = (c1 + a2 + b2) / 2;\n    long long int a3 = (a2 + b2 + c2) / 2;\n    long\
    \ long int b3 = (b2 + c2 + a3) / 2;\n    long long int c3 = (c2 + a3 + b3) / 2;\n\
    \    long long int a4 = (a3 + b3 + c3) / 2;\n    long long int b4 = (b3 + c3 +\
    \ a4) / 2;\n    long long int c4 = (c4 + a4 + b4) / 2;\n    long long int a5 =\
    \ (a4 + b4 + c4) / 2;\n    long long int b5 = (b5 + c4 + a5) / 2;\n    long long\
    \ int c5 = (c5 + a5 + b5) / 2;\n    long long int a6 = (a5 + b5 + c5) / 2;\n \
    \   long long int b6 = (b6 + c5 + a6) / 2;\n    long long int c6 = (c6 + a6 +\
    \ b6) / 2;\n    long long int a7 = (a6 + b6 + c6) / 2;\n    long long int b7 =\
    \ (b7 + c6 + a7) / 2;\n    long long int c7 = (c7 + a7 + b7) / 2;\n    long long\
    \ int a8 = (a7 + b7 + c7) / 2;\n    long long int b8 = (b8 + c7 + a8) / 2;\n \
    \   long long int c8 = (c8 + a8 + b8) / 2;\n    long long int a9 = (a8 + b8 +\
    \ c8) / 2;\n    long long int b9 = (b9 + c8 + a9) / 2;\n    long long int c9 =\
    \ (c9 + a9 + b9) / 2;\n    long long int a10 = (a9 + b9 + c9) / 2;\n    long long\
    \ int b10 = (b10 + c9 + a10) / 2;\n    long long int c10 = (c10 + a10 + b10) /\
    \ 2;\n    long long int a11 = (a10 + b10 + c10) / 2;\n    long long int b11 =\
    \ (b11 + c10 + a11) / 2;\n    long long int c11 = (c11 + a11 + b11) / 2;\n   \
    \ long long int a12 = (a11 + b11 + c11) / 2;\n    long long int b12 = (b12 + c11\
    \ + a12) / 2;\n}\nint main() {\n    auto candidate = right_angle_triangle;\n \
    \   assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp_fztcybq: /tmp/tmp_fztcybq.cpp:52: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793898
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here.\n\
    \    long long int sum = a+b+c;\n    long long int sum1 = a+b+c;\n    long long\
    \ int sum2 = a+b+c;\n    long long int sum3 = a+b+c;\n    long long int sum4 =\
    \ a+b+c;\n    long long int sum5 = a+b+c;\n    long long int sum6 = a+b+c;\n \
    \   long long int sum7 = a+b+c;\n    long long int sum8 = a+b+c;\n    long long\
    \ int sum9 = a+b+c;\n    long long int sum10 = a+b+c;\n    long long int sum11\
    \ = a+b+c;\n    long long int sum12 = a+b+c;\n    long long int sum13 = a+b+c;\n\
    \    long long int sum14 = a+b+c;\n    long long int sum15 = a+b+c;\n    long\
    \ long int sum16 = a+b+c;\n    long long int sum17 = a+b+c;\n    long long int\
    \ sum18 = a+b+c;\n    long long int sum19 = a+b+c;\n    long long int sum20 =\
    \ a+b+c;\n    long long int sum21 = a+b+c;\n    long long int sum22 = a+b+c;\n\
    \    long long int sum23 = a+b+c;\n    long long int sum24 = a+b+c;\n    long\
    \ long int sum25 = a+b+c;\n    long long int sum26 = a+b+c;\n    long long int\
    \ sum27 = a+b+c;\n    long long int sum28 = a+b+c;\n    long long int sum29 =\
    \ a+b+c;\n    long long int sum30 = a+b+c;\n    long long int sum31 = a+b+c;\n\
    \    long long int sum32 = a+b+c;\n    long long int sum33 = a+b+c;\n    long\
    \ long int sum34 = a+b+c;\n    long long int sum35 = a+b+c;\n    long long int\
    \ sum36 = a+b+c;\n    long long int sum37 = a+b+c;\n    long long int sum38 =\
    \ a+b+c;\n    long long int sum39 = a+b+c;\n    long long int sum40 = a+b+c;\n\
    \    long long int sum41 = a+b+c;\n    long long int sum42 = a+b+\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe6x3s65d.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpe6x3s65d.cpp:57:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   57 | }\n      | ^\n/tmp/tmpe6x3s65d.cpp:57:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1659793899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long root = d*d\
    \ / 2;\n    long s = (-b + root) / a;\n    long t = (-b - root) / a;\n    return\
    \ (s == 0 && t >= 0) || (t > 0 && t <= 1);\n}\nint main() {\n    auto candidate\
    \ = right_angle_triangle;\n    assert(candidate((3), (4), (5)) == (true));\n \
    \   assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10), (6),\
    \ (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n    assert(candidate((7),\
    \ (24), (25)) == (true));\n    assert(candidate((10), (5), (7)) == (false));\n\
    \    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: Exception
  stderr: 'tmpsp6eijnk: /tmp/tmpsp6eijnk.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793899
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    long d = b * b - 4 *\
    \ a * c;\n    if (d < 0) {\n        return false;\n    }\n    long e = std::sqrt(d);\n\
    \    long f = (b + e * c) / a;\n    long g = (b - e * c) / a;\n    return ((f\
    \ < 0 && g < 0) || (f > 0 && g > 0));\n}\nint main() {\n    auto candidate = right_angle_triangle;\n\
    \    assert(candidate((3), (4), (5)) == (true));\n    assert(candidate((1), (2),\
    \ (3)) == (false));\n    assert(candidate((10), (6), (8)) == (true));\n    assert(candidate((2),\
    \ (2), (2)) == (false));\n    assert(candidate((7), (24), (25)) == (true));\n\
    \    assert(candidate((10), (5), (7)) == (false));\n    assert(candidate((5),\
    \ (12), (13)) == (true));\n    assert(candidate((15), (8), (17)) == (true));\n\
    \    assert(candidate((48), (55), (73)) == (true));\n    assert(candidate((1),\
    \ (1), (1)) == (false));\n    assert(candidate((2), (2), (10)) == (false));\n\
    }\n"
  status: Exception
  stderr: 'tmp8iou0ntn: /tmp/tmp8iou0ntn.cpp:24: int main(): Assertion `candidate((3),
    (4), (5)) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1659793899
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given the lengths of the\
    \ three sides of a triangle. Return True if the three\n// sides form a right-angled\
    \ triangle, False otherwise.\n// A right-angled triangle is a triangle in which\
    \ one angle is right angle or \n// 90 degree.\n// Example:\n// >>> right_angle_triangle((3),\
    \ (4), (5))\n// (true)\n// >>> right_angle_triangle((1), (2), (3))\n// (false)\n\
    bool right_angle_triangle(long a, long b, long c) {\n    // Write your code here\n\
    \    long long int a1 = (a + b + c) / 2;\n    long long int b1 = (a + b) / 2;\n\
    \    long long int c1 = (a + b) / 2;\n    long long int a2 = (a + c) / 2;\n  \
    \  long long int b2 = (a + c) / 2;\n    long long int c2 = (a + c) / 2;\n    long\
    \ long int a3 = (b + c) / 2;\n    long long int b3 = (b + c) / 2;\n    long long\
    \ int c3 = (b + c) / 2;\n    long long int a4 = (a + c) / 2;\n    long long int\
    \ b4 = (a + c) / 2;\n    long long int c4 = (a + c) / 2;\n    long long int a5\
    \ = (b + c) / 2;\n    long long int b5 = (b + c) / 2;\n    long long int c5 =\
    \ (b + c) / 2;\n    long long int a6 = (a + b) / 2;\n    long long int b6 = (a\
    \ + b) / 2;\n    long long int c6 = (a + b) / 2;\n    long long int a7 = (b +\
    \ c) / 2;\n    long long int b7 = (b + c) / 2;\n    long long int c7 = (b + c)\
    \ / 2;\n    long long int a8 = (a + c) / 2;\n    long long int b8 = (a + c) /\
    \ 2;\n    long long int c8 = (a + c) / 2;\n    long long int a9 = (b + c) / 2;\n\
    \    long long int b9 = (b + c) / 2;\n    long long int c9 = (b + c) / 2;\n  \
    \  long long int a10 = (a + b) / 2;\n    long long int b10 = (a + b) / 2;\n  \
    \  long long int c10 = (a + b) / 2;\n    long long int a11 = (b + c) / 2;\n  \
    \  long long int b11 = (b + c) / 2;\n    long long int c11 = (b + c) / 2;\n  \
    \  long long int a12 = (a + c) / 2;\n    long long int b12 = (a + c) / 2;\n  \
    \  long long int c12 = (a + c) / 2;\n    long long int a13 = (b + c) / 2;\n  \
    \  long long int b13 = (b + c) / 2;\n    long long int c13 = (b + c) / 2;\n  \
    \  long long int a14 = (a + b) / 2;\n    long long int b14 = (a + b) / 2;\n  \
    \  long long int c14 = (a + b) / 2;\n    long long int a15 = (\n}\nint main()\
    \ {\n    auto candidate = right_angle_triangle;\n    assert(candidate((3), (4),\
    \ (5)) == (true));\n    assert(candidate((1), (2), (3)) == (false));\n    assert(candidate((10),\
    \ (6), (8)) == (true));\n    assert(candidate((2), (2), (2)) == (false));\n  \
    \  assert(candidate((7), (24), (25)) == (true));\n    assert(candidate((10), (5),\
    \ (7)) == (false));\n    assert(candidate((5), (12), (13)) == (true));\n    assert(candidate((15),\
    \ (8), (17)) == (true));\n    assert(candidate((48), (55), (73)) == (true));\n\
    \    assert(candidate((1), (1), (1)) == (false));\n    assert(candidate((2), (2),\
    \ (10)) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl65ik_g_.cpp: In function \u2018bool right_angle_triangle(long\
    \ int, long int, long int)\u2019:\n/tmp/tmpl65ik_g_.cpp:57:1: error: expected\
    \ primary-expression before \u2018}\u2019 token\n   57 | }\n      | ^\n/tmp/tmpl65ik_g_.cpp:56:26:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   56 |     long long\
    \ int a15 = (\n      |                         ~^\n      |                   \
    \       )\n   57 | }\n      | ~                         \n/tmp/tmpl65ik_g_.cpp:57:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   57 | }\n      | ^\n"
  stdout: ''
  timestamp: 1659793899
