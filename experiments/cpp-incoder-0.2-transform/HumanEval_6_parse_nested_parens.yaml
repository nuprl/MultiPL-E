name: HumanEval_6_parse_nested_parens
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function is\
  \ a string represented multiple groups for nested parentheses separated by spaces.\n\
  // For each of the group, output the deepest level of nesting of parentheses.\n\
  // E.g. (()()) has maximum two levels of nesting while ((())) has three.\n// >>>\
  \ parse_nested_parens((\"(()()) ((())) () ((())()())\"))\n// (std::vector<long>({(long)2,\
  \ (long)3, (long)1, (long)3}))\nstd::vector<long> parse_nested_parens(std::string\
  \ paren_string) {\n"
tests: "}\nint main() {\n    auto candidate = parse_nested_parens;\n    assert(candidate((\"\
  (()()) ((())) () ((())()())\")) == (std::vector<long>({(long)2, (long)3, (long)1,\
  \ (long)3})));\n    assert(candidate((\"() (()) ((())) (((())))\")) == (std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4})));\n    assert(candidate((\"(()(())((())))\")) ==\
  \ (std::vector<long>({(long)4})));\n}\n"
completions: ["    std::vector<long> levels;\n    std::string curr_level;\n    long\
    \ curr_depth = 0;\n    for (size_t i = 0; i < paren_string.size(); i++) {\n  \
    \      if (paren_string[i] == '(') {\n            curr_level = paren_string.substr(0,\
    \ i);\n            curr_depth++;\n        } else if (paren_string[i] == ')') {\n\
    \            curr_depth--;\n            if (curr_depth == 0) {\n             \
    \   levels.push_back(curr_level.length());\n            }\n        }\n    }\n\
    \    return levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n            assert(paren_level\
    \ >= 0);\n            paren_levels.push_back(paren_level);\n        } else {\n\
    \            assert(paren_level == 0);\n            paren_levels.push_back(paren_level);\n\
    \        }\n    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   for (auto &c : paren_string) {\n        if (c == '(') {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n    }\n    paren_levels.push_back(paren_level);\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    for (auto c : paren_string) {\n        if (c == '(')\
    \ {\n            paren_levels.push_back(level);\n            level++;\n      \
    \  } else if (c == ')') {\n            level--;\n            assert(level >= 0);\n\
    \            paren_levels.push_back(level);\n        }\n    }\n    return paren_levels;",
  "  std::vector<long> paren_levels;\n  paren_levels.reserve(paren_string.size());\n\
    \  long paren_level = 0;\n  for (auto c : paren_string) {\n    if (c == '(') {\n\
    \      paren_level++;\n    } else if (c == ')') {\n      paren_level--;\n    }\n\
    \    paren_levels.push_back(paren_level);\n  }\n  return paren_levels;", "   \
    \ std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long level = 0;\n    bool is_open = false;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        char c = paren_string[i];\n        if (c == '(') {\n       \
    \     is_open = true;\n        } else if (c == ')') {\n            is_open = false;\n\
    \        } else if (is_open) {\n            paren_levels.push_back(level);\n \
    \           level++;\n        }\n    }\n    return paren_levels;", "  std::vector<long>\
    \ paren_levels;\n  paren_levels.push_back(0);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n  paren_levels.push_back(1);\n\
    \  paren_levels.push_back(1);\n", "    std::vector<long> paren_levels;\n    paren_levels\
    \ = paren_string.substr(0, paren_string.find_first_of('(')).split(' ');\n    std::vector<long>\
    \ paren_levels_temp;\n    paren_levels_temp.push_back(paren_levels.size());\n\
    \    long paren_levels_size = paren_levels_temp.size();\n    long paren_levels_index\
    \ = 0;\n    long paren_levels_index_temp = 0;\n    long paren_levels_index_temp2\
    \ = 0;\n    long paren_levels_index_temp3 = 0;\n    long paren_levels_index_temp4\
    \ = 0;\n    long paren_levels_index_temp5 = 0;\n    long paren_levels_index_temp6\
    \ = 0;\n    long paren_levels_index_temp7 = 0;\n    long paren_levels_index_temp8\
    \ = 0;\n    long paren_levels_index_temp9 = 0;\n    long paren_levels_index_temp10\
    \ = 0;\n    long paren_levels_index_temp11 = 0;\n    long paren_levels_index_temp12\
    \ = 0;\n    long paren_levels_index_temp13 = 0;\n    long paren_levels_index_temp14\
    \ = 0;\n    long paren_levels_index_temp15 = 0;\n    long paren_levels_index_temp16\
    \ = 0;\n    long paren_levels_index_temp17 = 0;\n    long paren_levels_index_temp18\
    \ = 0;\n    long paren_levels_index_temp19 = 0;\n    long paren_levels_index_temp20\
    \ = 0;\n    long paren_levels_index_temp21 = 0;\n    long paren_levels_index_temp22\
    \ = 0;\n    long paren_levels_index_temp23 = 0;\n    long paren_levels_index_temp24\
    \ = 0;\n    long paren_levels_index_temp25 = 0;\n    long paren_levels_index_temp26\
    \ = 0;\n    long paren_levels_index_temp27 = 0;\n    long paren_levels_index_temp28\
    \ = 0;\n    long paren_levels_index_temp29 = 0;\n    long paren_levels_index_temp30\
    \ = 0;\n    long paren_levels_index_temp31 = 0;\n    long paren_levels_index_temp32\
    \ = 0;\n    long paren_levels_index_temp33 = 0;\n    long paren_levels_index_temp34\
    \ = 0;\n    long paren_levels_index_temp35 = 0;\n    long paren_levels_index_temp36\
    \ = 0;\n    long paren_levels_index_temp37 = 0;\n    long paren_levels_index_temp38\
    \ = 0;\n    long paren_levels_index_temp39 = 0;\n    long paren_levels_index_temp",
  "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long current_level = 0;\n    for (auto c : paren_string) {\n        if (c\
    \ == '(') {\n            current_level++;\n        } else if (c == ')') {\n  \
    \          current_level--;\n        }\n        paren_levels.push_back(current_level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    long\
    \ paren_level = 0;\n    bool is_open = false;\n    std::string current_paren_string\
    \ = \"\";\n    for (auto c : paren_string) {\n        if (c == '(') {\n      \
    \      is_open = true;\n            current_paren_string = c;\n            paren_level++;\n\
    \        } else if (c == ')') {\n            is_open = false;\n            current_paren_string\
    \ = \"\";\n            paren_level--;\n        } else if (is_open) {\n       \
    \     current_paren_string = current_paren_string + c;\n        }\n    }\n   \
    \ paren_levels[paren_level - 1]++;\n    return paren_levels;", "    std::vector<long>\
    \ levels;\n    std::string paren_level;\n    long level = 0;\n    for (size_t\
    \ i = 0; i < paren_string.size(); i++) {\n        if (paren_string[i] == '(')\
    \ {\n            paren_level = paren_string.substr(0, i);\n            level++;\n\
    \        } else if (paren_string[i] == ')') {\n            level--;\n        \
    \    if (level == 0) {\n                levels.push_back(level);\n           \
    \ }\n        }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long level = 0;\n    bool\
    \ is_open = false;\n    bool is_closed = false;\n    for (size_t i = 0; i < paren_string.size();\
    \ i++) {\n        char c = paren_string[i];\n        if (c == '(') {\n       \
    \     is_open = true;\n        } else if (c == ')') {\n            is_closed =\
    \ true;\n        } else if (c == ' ') {\n            if (is_open && !is_closed)\
    \ {\n                paren_levels.push_back(level);\n                is_open =\
    \ false;\n                is_closed = false;\n                level++;\n     \
    \       }\n        } else {\n            is_open = false;\n            is_closed\
    \ = false;\n        }\n    }\n    if (is_open && !is_closed) {\n        paren_levels.push_back(level);\n\
    \    }\n    return paren_levels;", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    for (auto c : paren_string) {\n        if (c ==\
    \ '(') {\n            paren_levels.push_back(paren_level);\n            paren_level++;\n\
    \        } else if (c == ')') {\n            paren_level--;\n        }\n    }\n\
    \    paren_levels.push_back(paren_level);\n    return paren_levels;", "    std::vector<long>\
    \ paren_levels;\n    paren_levels.reserve(paren_string.size());\n    long current_level\
    \ = 0;\n    for (auto c : paren_string) {\n        if (c == '(') {\n         \
    \   current_level++;\n        } else if (c == ')') {\n            current_level--;\n\
    \        }\n        paren_levels.push_back(current_level);\n    }\n    return\
    \ paren_levels;", "  std::vector<long> result;\n  long level = 0;\n  std::string\
    \ current_paren = \"\";\n  for (size_t i = 0; i < paren_string.size(); ++i) {\n\
    \    if (paren_string[i] == '(') {\n      current_paren = paren_string[i];\n \
    \     ++level;\n    } else if (paren_string[i] == ')') {\n      --level;\n   \
    \   if (level == 0) {\n        result.push_back(std::stoll(current_paren));\n\
    \      }\n    }\n  }\n  return result;", "    std::vector<long> paren_levels;\n\
    \    paren_levels.reserve(paren_string.size());\n    long paren_level = 0;\n \
    \   for (auto c : paren_string) {\n        if (c == '(') {\n            paren_levels.push_back(paren_level);\n\
    \            paren_level++;\n        } else if (c == ')') {\n            paren_level--;\n\
    \        }\n    }\n    paren_levels.push_back(paren_level);\n    return paren_levels;",
  "    std::vector<long> paren_levels;\n    paren_levels.push_back(0);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n    paren_levels.push_back(1);\n\
    \    paren_levels.push_back(1);", "    std::vector<long> paren_levels;\n    paren_levels.reserve(paren_string.size());\n\
    \    long paren_level = 0;\n    bool is_open = false;\n    for (size_t i = 0;\
    \ i < paren_string.size(); i++) {\n        char c = paren_string[i];\n       \
    \ if (c == '(') {\n            is_open = true;\n            paren_levels.push_back(paren_level);\n\
    \        } else if (c == ')') {\n            is_open = false;\n            paren_levels.pop_back();\n\
    \        } else if (is_open) {\n            paren_level++;\n        }\n    }\n\
    \    return paren_levels;", "    std::vector<long> levels;\n    std::string current_level;\n\
    \    long current_level_size = 0;\n    for (auto c : paren_string) {\n       \
    \ if (c == '(') {\n            current_level = current_level + c;\n          \
    \  current_level_size++;\n        } else if (c == ')') {\n            current_level\
    \ = current_level.substr(0, current_level.size() - 1);\n            current_level_size--;\n\
    \        } else {\n            current_level = current_level + c;\n        }\n\
    \        if (current_level_size > 0) {\n            levels.push_back(current_level_size);\n\
    \        }\n    }\n    return levels;", "    std::vector<long> paren_levels;\n\
    \    paren_levels_t paren_levels_t;\n    paren_levels_t.clear();\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_levels_t.push_back(paren_levels_t::level0);\n\
    \    paren_levels_t.push_back(paren_levels_t::level0);\n    paren_"]
stop_tokens:
- "\n}"
