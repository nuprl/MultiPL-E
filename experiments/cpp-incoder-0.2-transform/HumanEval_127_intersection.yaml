name: HumanEval_127_intersection
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given two intervals,\n\
  // where each interval is a pair of integers. For example, interval = (start, end)\
  \ = (1, 2).\n// The given intervals are closed which means that the interval (start,\
  \ end)\n// includes both start and end.\n// For each given interval, it is assumed\
  \ that its start is less or equal its end.\n// Your task is to determine whether\
  \ the length of intersection of these two \n// intervals is a prime number.\n//\
  \ Example, the intersection of the intervals (1, 3), (2, 4) is (2, 3)\n// which\
  \ its length is 1, which not a prime number.\n// If the length of the intersection\
  \ is a prime number, return \"YES\",\n// otherwise, return \"NO\".\n// If the two\
  \ intervals don't intersect, return \"NO\".\n// [input/output] samples:\n// >>>\
  \ intersection((std::make_tuple(1, 2)), (std::make_tuple(2, 3)))\n// (\"NO\")\n\
  // >>> intersection((std::make_tuple(-1, 1)), (std::make_tuple(0, 4)))\n// (\"NO\"\
  )\n// >>> intersection((std::make_tuple(-3, -1)), (std::make_tuple(-5, 5)))\n//\
  \ (\"YES\")\nstd::string intersection(std::tuple<long, long> interval1, std::tuple<long,\
  \ long> interval2) {\n"
tests: "}\nint main() {\n    auto candidate = intersection;\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(2, 3))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-1,\
  \ 1)), (std::make_tuple(0, 4))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-3,\
  \ -1)), (std::make_tuple(-5, 5))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-2,\
  \ 2)), (std::make_tuple(-4, 0))) == (\"YES\"));\n    assert(candidate((std::make_tuple(-11,\
  \ 2)), (std::make_tuple(-1, -1))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(3, 5))) == (\"NO\"));\n    assert(candidate((std::make_tuple(1,\
  \ 2)), (std::make_tuple(1, 2))) == (\"NO\"));\n    assert(candidate((std::make_tuple(-2,\
  \ -2)), (std::make_tuple(-3, -2))) == (\"NO\"));\n}\n"
completions: ["    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start == start2 && end == end2) {\n        return \"NO\";\n  \
    \  }\n    if (start > end2) {\n        return \"NO\";\n    }\n    if (start <\
    \ end2) {\n        return \"YES\";\n    }\n    long start3 = start;\n    long\
    \ end3 = end;\n    long start4 = start2;\n    long end4 = end2;\n    long start5\
    \ = start3;\n    long end5 = end3;\n    long start6 = start4;\n    long end6 =\
    \ end4;\n    long start7 = start5;\n    long end7 = end5;\n    long start8 = start6;\n\
    \    long end8 = end6;\n    long start9 = start7;\n    long end9 = end7;\n   \
    \ long start10 = start8;\n    long end10 = end8;\n    long start11 = start9;\n\
    \    long end11 = end9;\n    long start12 = start10;\n    long end12 = end10;\n\
    \    long start13 = start11;\n    long end13 = end11;\n    long start14 = start12;\n\
    \    long end14 = end12;\n    long start15 = start13;\n    long end15 = end13;\n\
    \    long start16 = start14;\n    long end16 = end14;\n    long start17 = start15;\n\
    \    long end17 = end15;\n    long start18 = start16;\n    long end18 = end16;\n\
    \    long start19 = start17;\n    long end19 = end17;\n    long start20 = start18;\n\
    \    long end20 = end18;\n    long start21 = start19;\n    long end21 = end19;\n\
    \    long start22 = start20;\n    long end22 = end20;\n    long start23 = start21;\n\
    \    long end23 = end21;\n    long start24 = start22;\n    long end24 = end22;\n\
    \    long start25 = start23;\n    long end25 = end23;\n    long start26 = start24;\n\
    \    long end26 = end24;\n    long start27 = start25;", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    if (start > end2) {\n        return\
    \ \"NO\";\n    }\n    if (start2 == end2) {\n        return \"NO\";\n    }\n \
    \   long length = end - start;\n    long length2 = end2 - start2;\n    if (length\
    \ == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if (length == 1)\
    \ {\n        return \"YES\";\n    }\n    if (length2 == 1) {\n        return \"\
    YES\";\n    }\n    long mid = (start + end2) / 2;\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        return\
    \ \"NO\";\n    }\n    if (length2 < length) {\n        return \"NO\";\n    }\n\
    \    if (length == length2) {\n        return \"YES\";\n    }\n    if (length\
    \ < length2) {\n        return \"NO\";\n    }\n    if (length2 < length) {\n \
    \       return \"NO\";\n    }\n    if (length == length2) {\n        return \"\
    YES\";\n    }\n    if (length < length2) {\n        return \"NO\";\n    }\n  \
    \  if (length2 < length) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        return\
    \ \"NO\";\n    }\n    if (length2 < length) {\n        return \"NO\";\n    }\n\
    \    if (length == length2) {\n        return \"YES\";\n    }\n    if (length\
    \ < length2) {\n        return \"NO\";\n    }\n    if (length2 < length) {\n \
    \       return \"NO\";\n    }\n    if (length == length2) {\n        return \"\
    YES\";\n    }\n    if (length < length2) {\n        return \"NO\";\n    }\n  \
    \  if (length2 < length) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        return\
    \ \"NO\";\n    }\n    if (length2 < length) {\n        return \"NO\";\n    }\n\
    \    if (length == length2) {\n        return \"YES\";\n    }\n    if (length\
    \ < length2) {\n        return \"NO\";\n    }\n    if (length2 < length) {\n \
    \       return \"NO\";\n    }\n    if (length == length2) {\n        return \"\
    YES\";\n    }\n    if (length < length2) {\n        return \"NO\";\n    }\n  \
    \  if (length2 < length) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        return\
    \ \"NO\";\n    }\n", "    long start = std::get<0>(interval1);\n    long end =\
    \ std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    long length = end - start;\n    long length2\
    \ = end2 - start2;\n    if (length2 > length) {\n        length = length2;\n \
    \   }\n    if (length == 0) {\n        return \"NO\";\n    }\n    long sum = 0;\n\
    \    for (long i = start; i <= end; i++) {\n        sum += i;\n    }\n    for\
    \ (long i = start2; i <= end2; i++) {\n        sum += i;\n    }\n    if (sum ==\
    \ length) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long long\
    \ int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end - start;\n    long long\
    \ int length2 = end2 - start2;\n    if (length2 > length) {\n        length =\
    \ length2;\n    }\n    long long int ans = length / 2;\n    long long int ans2\
    \ = 0;\n    long long int ans3 = 0;\n    long long int ans4 = 0;\n    long long\
    \ int ans5 = 0;\n    long long int ans6 = 0;\n    long long int ans7 = 0;\n  \
    \  long long int ans8 = 0;\n    long long int ans9 = 0;\n    long long int ans10\
    \ = 0;\n    long long int ans11 = 0;\n    long long int ans12 = 0;\n    long long\
    \ int ans13 = 0;\n    long long int ans14 = 0;\n    long long int ans15 = 0;\n\
    \    long long int ans16 = 0;\n    long long int ans17 = 0;\n    long long int\
    \ ans18 = 0;\n    long long int ans19 = 0;\n    long long int ans20 = 0;\n   \
    \ long long int ans21 = 0;\n    long long int ans22 = 0;\n    long long int ans23\
    \ = 0;\n    long long int ans24 = 0;\n    long long int ans25 = 0;\n    long long\
    \ int ans26 = 0;\n    long long int ans27 = 0;\n    long long int ans28 = 0;\n\
    \    long long int ans29 = 0;\n    long long int ans30 = 0;\n    long long int\
    \ ans31 = 1;\n    long long int ans32 = 0;\n    long long int ans33 = 0;\n   \
    \ long long int ans34 = 0;\n    long long int ans35 = 0;\n    long long int ans36\
    \ = 0;\n    long long int ans37 = 0;\n    long long int ans38 = 0;\n    long long\
    \ int ans39 = 0;\n    long long int ans40 = 0;\n    long long int ans = ans;\n\
    \    long long int ans2 = ans2;\n    long long int ans3 = ans3;\n    long long\
    \ int ans4 = ans4;\n    long long int ans5 = ans5;\n    long long int ans6 = ans6;\n\
    \    long long int ans7 = ans7;\n    long long int ans8 = ans8;\n    long long\
    \ int ans9 = ans9;\n    long long int ans10 = ans10;\n    long long int ans11\
    \ = ans11;\n    long long int ans12 = ans", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length2 == 1) {\n        return \"YES\";\n    }\n  \
    \  long long ans = length / length2;\n    if (ans == 0) {\n        return \"NO\"\
    ;\n    }\n    if (ans == 1) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 2) {\n        return \"YES\";\n    }\n    if (ans == 3) {\n        return \"\
    YES\";\n    }\n    if (ans == 4) {\n        return \"YES\";\n    }\n    if (ans\
    \ == 5) {\n        return \"YES\";\n    }\n    if (ans == 6) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 7) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 8) {\n        return \"YES\";\n    }\n    if (ans == 9) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 10) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 11) {\n        return \"YES\";\n    }\n    if (ans == 12) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 13) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 14) {\n        return \"YES\";\n    }\n    if (ans == 15)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 16) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 17) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 18) {\n        return \"YES\";\n    }\n    if (ans == 19) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 20) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 21) {\n        return \"YES\";\n    }\n    if (ans == 22) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 23) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 24) {\n        return \"YES\";\n    }\n    if (ans == 25)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 26) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 27) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 28) {\n        return \"YES\";\n    }\n    if (ans == 29) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 30) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 31) {\n        return \"YES\";\n    }\n    if (ans == 32) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 33) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 34) {\n        return \"YES\";\n", "    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    if (std::get<0>(interval1) > std::get<0>(interval2)) {\n        return \"\
    NO\";\n    }\n    if (std::get<1>(interval1) < std::get<1>(interval2)) {\n   \
    \     std::swap(interval1, interval2);\n    }\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    long long intersection_length\
    \ = std::get<0>(interval1) - std::get<1>(interval1);\n    if (intersection_length\
    \ == 2) {\n        return \"YES\";\n    }\n    if (intersection_length == 1) {\n\
    \        return \"NO\";\n    }\n    if (intersection_length == -1) {\n       \
    \ return \"NO\";\n    }\n    if (intersection_length == -2) {\n        return\
    \ \"NO\";\n    }\n    if (intersection_length == -3) {\n        return \"NO\"\
    ;\n    }\n    if (intersection_length == -4) {\n        return \"NO\";\n    }\n\
    \    if (intersection_length == -5) {\n        return \"NO\";\n    }\n    if (intersection_length\
    \ == -6) {\n        return \"NO\";\n    }\n    if (intersection_length == -7)\
    \ {\n        return \"NO\";\n    }\n    if (intersection_length == -8) {\n   \
    \     return \"NO\";\n    }\n    if (intersection_length == -9) {\n        return\
    \ \"NO\";\n    }\n    if (intersection_length == -10) {\n        return \"NO\"\
    ;\n    }\n    if (intersection_length == -11) {\n        return \"NO\";\n    }\n\
    \    if (intersection_length == -12) {\n        return \"NO\";\n    }\n    if\
    \ (intersection_length == -13) {\n        return \"NO\";\n    }\n    if (intersection_length\
    \ == -14) {\n        return \"NO\";\n    }\n    if (intersection_length == -15)\
    \ {\n        return \"NO\";\n    }\n    if (intersection_length == -16) {\n  \
    \      return \"NO\";\n    }\n    if (intersection_length == -17) {\n        return\
    \ \"NO\";\n    }\n    if (intersection_length == -18) {\n        return \"NO\"\
    ;\n    }\n    if (intersection_length == -19) {\n        return \"NO\";\n    }\n\
    \    if (intersection_length == -20) {\n        return \"NO\";\n    }\n    if\
    \ (intersection_length == -21) {\n        return \"NO\";\n    }\n    if (intersection_length\
    \ == -22) {\n        return \"NO\";\n    }\n    if (intersection_length == -23)\
    \ {\n        return \"NO\";\n    }\n    if (intersection_length == -24) {\n  \
    \      return \"NO\";\n    }\n    if (intersection_length == -25) {\n        return\
    \ \"NO\";\n    }\n    if (intersection_length == -", "    long long int start\
    \ = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end - start;\n    long long\
    \ int length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n     \
    \   return \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\"\
    ;\n    }\n    long long int length3 = length / length2;\n    if (length3 == 1)\
    \ {\n        return \"YES\";\n    }\n    if (length3 == 2) {\n        return \"\
    NO\";\n    }\n    if (length3 == 3) {\n        return \"YES\";\n    }\n    if\
    \ (length3 == 4) {\n        return \"NO\";\n    }\n    if (length3 == 5) {\n \
    \       return \"YES\";\n    }\n    if (length3 == 6) {\n        return \"NO\"\
    ;\n    }\n    if (length3 == 7) {\n        return \"YES\";\n    }\n    if (length3\
    \ == 8) {\n        return \"NO\";\n    }\n    if (length3 == 9) {\n        return\
    \ \"YES\";\n    }\n    if (length3 == 10) {\n        return \"NO\";\n    }\n \
    \   if (length3 == 11) {\n        return \"YES\";\n    }\n    if (length3 == 12)\
    \ {\n        return \"NO\";\n    }\n    if (length3 == 13) {\n        return \"\
    YES\";\n    }\n    if (length3 == 14) {\n        return \"NO\";\n    }\n    if\
    \ (length3 == 15) {\n        return \"YES\";\n    }\n    if (length3 == 16) {\n\
    \        return \"NO\";\n    }\n    if (length3 == 17) {\n        return \"YES\"\
    ;\n    }\n    if (length3 == 18) {\n        return \"NO\";\n    }\n    if (length3\
    \ == 19) {\n        return \"YES\";\n    }\n    if (length3 == 20) {\n       \
    \ return \"NO\";\n    }\n    if (length3 == 21) {\n        return \"YES\";\n \
    \   }\n    if (length3 == 22) {\n        return \"NO\";\n    }\n    if (length3\
    \ == 23) {\n        return \"YES\";\n    }\n    if (length3 == 24) {\n       \
    \ return \"NO\";\n    }\n    if (length3 == 25) {\n        return \"YES\";\n \
    \   }\n    if (length3 == 26) {\n        return \"NO\";\n    }\n    if (length3\
    \ == 27) {\n        return \"YES\";\n    }\n    if (length3 == 28) {\n       \
    \ return \"NO\";\n    }\n    if (length3 == 29) {\n        return \"YES\";\n \
    \   }\n    if (length3 == 30) {\n        return \"NO\";\n    }\n    if (length3\
    \ == 31) {\n        return \"YES\";\n    }\n    if (length3 == 32) {\n       \
    \ return \"NO\";\n    }\n    if (length3 == 33) {\n        return \"YES\";\n \
    \   }\n    if (length3 == 34) {\n        return \"NO\";\n", "    long start =\
    \ std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n    long start2\
    \ = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n    if (start\
    \ > end) {\n        std::swap(start, end);\n        std::swap(start2, end2);\n\
    \    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n    }\n  \
    \  if (start > start2) {\n        return \"NO\";\n    }\n    if (end < end2) {\n\
    \        return \"NO\";\n    }\n    long length = end - start;\n    long length2\
    \ = end2 - start2;\n    if (length2 > length) {\n        return \"NO\";\n    }\n\
    \    if (length2 == length) {\n        return \"YES\";\n    }\n    long mid =\
    \ start + (length / 2);\n    long mid2 = start2 + (length2 / 2);\n    if (mid\
    \ < mid2) {\n        return \"NO\";\n    }\n    if (mid == mid2) {\n        return\
    \ \"YES\";\n    }\n    long mid3 = mid + (length / 2);\n    long mid4 = mid2 +\
    \ (length2 / 2);\n    if (mid3 < mid4) {\n        return \"NO\";\n    }\n    if\
    \ (mid3 == mid4) {\n        return \"YES\";\n    }\n    long mid5 = mid + (length\
    \ / 2);\n    long mid6 = mid2 + (length2 / 2);\n    if (mid5 < mid6) {\n     \
    \   return \"NO\";\n    }\n    if (mid5 == mid6) {\n        return \"YES\";\n\
    \    }\n    long mid7 = mid + (length / 2);\n    long mid8 = mid2 + (length2 /\
    \ 2);\n    if (mid7 < mid8) {\n        return \"NO\";\n    }\n    if (mid7 ==\
    \ mid8) {\n        return \"YES\";\n    }\n    long mid9 = mid + (length / 2);\n\
    \    long mid10 = mid + (length2 / 2);\n    if (mid9 < mid10) {\n        return\
    \ \"NO\";\n    }\n    if (mid9 == mid10) {\n        return \"YES\";\n    }\n \
    \   long mid11 = mid + (length / 2);\n    long mid12 = mid + (length2 / 2);\n\
    \    if (mid11 < mid12) {\n        return \"NO\";\n    }\n    if (mid11 == mid12)\
    \ {\n        return \"YES\";\n    }\n    long mid13 = mid + (length / 2);\n  \
    \  long mid14 = mid + (length2 / 2);\n    if (mid13 < mid14) {\n        return\
    \ \"NO\";\n    }\n    if (mid13 == mid14) {\n        return \"YES\";\n    }\n\
    \    long mid15 = mid + (length / 2);\n    long mid16 = mid + (length2 / 2);\n\
    \    if (mid15 < ", "    long start = std::get<0>(interval1);\n    long end =\
    \ std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\";\n\
    \    }\n    if (length2 == 1) {\n        return \"YES\";\n    }\n    long p =\
    \ 1;\n    for (long i = 3; i <= length; i += 2) {\n        if (length % i == 0)\
    \ {\n            p = i;\n            break;\n        }\n    }\n    if (length2\
    \ % p == 0) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long\
    \ start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n  \
    \  long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long length = end - start;\n    long length2 = end2 - start2;\n  \
    \  if (length2 > length) {\n        std::swap(length, length2);\n    }\n    if\
    \ (length == 1) {\n        return \"NO\";\n    }\n    if (length2 == 1) {\n  \
    \      return \"NO\";\n    }\n    if (length == length2) {\n        return \"\
    YES\";\n    }\n    long mid = length / 2;\n    long mid2 = length2 / 2;\n    if\
    \ (mid > mid2) {\n        std::swap(mid, mid2);\n    }\n    long count = 0;\n\
    \    long count2 = 0;\n    while (count < mid && count2 < mid2) {\n        if\
    \ (std::get<0>(interval1) < std::get<1>(interval1)) {\n            std::swap(std::get<0>(interval1),\
    \ std::get<1>(interval1));\n            std::swap(std::get<0>(interval2), std::get<1>(interval2));\n\
    \        }\n        if (std::get<0>(interval2) < std::get<1>(interval2)) {\n \
    \           std::swap(std::get<0>(interval2), std::get<1>(interval2));\n     \
    \   }\n        long a = std::get<0>(interval1);\n        long b = std::get<1>(interval1);\n\
    \        long c = std::get<0>(interval2);\n        long d = std::get<1>(interval2);\n\
    \        if (a > b) {\n            std::swap(a, b);\n            std::swap(c,\
    \ d);\n        }\n        if (c > d) {\n            std::swap(c, d);\n       \
    \ }\n        if (a > c) {\n            std::swap(a, b);\n            std::swap(c,\
    \ d);\n        }\n        if (b > d) {\n            std::swap(a, b);\n       \
    \     std::swap(c, d);\n        }\n        if (a > b) {\n            std::swap(a,\
    \ b);\n        }\n        if (c > d) {\n            std::swap(c, d);\n       \
    \ }\n        if (a > c) {\n            std::swap(a, b);\n        }\n        if\
    \ (b > d) {\n            std::swap(a, b);\n        }\n        if (c > d) {\n \
    \           std::swap(c, d);\n        }\n        if (a > b) {\n            std::swap(a,\
    \ b);\n        }\n        if (c > d) {\n            std::swap(c, d);", "    long\
    \ start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n  \
    \  long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    if (start\
    \ == start2 && end == end2) {\n        return \"YES\";\n    }\n    long start3\
    \ = start;\n    long end3 = end;\n    long start4 = start2;\n    long end4 = end2;\n\
    \    long start5 = start3;\n    long end5 = end3;\n    long start6 = start4;\n\
    \    long end6 = end4;\n    long start7 = start5;\n    long end7 = end5;\n   \
    \ long start8 = start6;\n    long end8 = end6;\n    long start9 = start7;\n  \
    \  long end9 = end7;\n    long start10 = start8;\n    long end10 = end8;\n   \
    \ long start11 = start9;\n    long end11 = end9;\n    long start12 = start10;\n\
    \    long end12 = end10;\n    long start13 = start11;\n    long end13 = end11;\n\
    \    long start14 = start12;\n    long end14 = end12;\n    long start15 = start13;\n\
    \    long end15 = end13;\n    long start16 = start14;\n    long end16 = end14;\n\
    \    long start17 = start15;\n    long end17 = end15;\n    long start18 = start16;\n\
    \    long end18 = end16;\n    long start19 = start17;\n    long end19 = end17;\n\
    \    long start20 = start18;\n    long end20 = end18;\n    long start21 = start19;\n\
    \    long end21 = end19;\n    long start22 = start20;\n    long end22 = end20;\n\
    \    long start23 = start21;\n    long end23 = end21;\n    long start24 = start22;\n\
    \    long end24 = end22;\n    long start25 = start23;\n    long end25 = end23;\n\
    \    long start26 = start24;\n    long end26 = end24;\n    long start27 = start25;\n\
    \    long end27 = end25;\n    long ", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length == length2) {\n        return\
    \ \"YES\";\n    }\n    if (length < length2) {\n        length = length2;\n  \
    \  }\n    if (length < 2) {\n        return \"NO\";\n    }\n    long long mid\
    \ = length / 2;\n    long long mid2 = length2 / 2;\n    long long mid3 = mid +\
    \ mid2;\n    long long mid4 = mid3 + mid2;\n    long long mid5 = mid4 + mid2;\n\
    \    long long mid6 = mid5 + mid2;\n    long long mid7 = mid6 + mid2;\n    long\
    \ long mid8 = mid7 + mid2;\n    long long mid9 = mid8 + mid2;\n    long long mid10\
    \ = mid9 + mid2;\n    long long mid11 = mid10 + mid2;\n    long long mid12 = mid11\
    \ + mid2;\n    long long mid13 = mid12 + mid2;\n    long long mid14 = mid13 +\
    \ mid2;\n    long long mid15 = mid14 + mid2;\n    long long mid16 = mid15 + mid2;\n\
    \    long long mid17 = mid16 + mid2;\n    long long mid18 = mid17 + mid2;\n  \
    \  long long mid19 = mid18 + mid2;\n    long long mid20 = mid19 + mid2;\n    long\
    \ long mid21 = mid20 + mid2;\n    long long mid22 = mid21 + mid2;\n    long long\
    \ mid23 = mid22 + mid2;\n    long long mid24 = mid23 + mid2;\n    long long mid25\
    \ = mid24 + mid2;\n    long long mid26 = mid25 + mid2;\n    long long mid27 =\
    \ mid26 + mid2;\n    long long mid28 = mid27 + mid2;\n    long long mid29 = mid28\
    \ + mid2;\n    long long mid30 = mid29 + mid2;\n    long long mid31 = mid30 +\
    \ mid2;\n    long long mid32 = mid31 + mid2;\n    long long mid33 = mid32 + mid2;\n\
    \    long long mid34 = mid33 + mid2;\n    long long mid35 = ", "    long long\
    \ int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start, end);\n\
    \        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2,\
    \ end2);\n    }\n    if (start > start2) {\n        return \"NO\";\n    }\n  \
    \  if (start == start2 && end > end2) {\n        return \"NO\";\n    }\n    if\
    \ (start == start2 && end == end2) {\n        return \"YES\";\n    }\n    long\
    \ long int start3 = start;\n    long long int end3 = end;\n    long long int start4\
    \ = start2;\n    long long int end4 = end2;\n    long long int start5 = start3;\n\
    \    long long int end5 = end3;\n    long long int start6 = start4;\n    long\
    \ long int end6 = end4;\n    long long int start7 = start5;\n    long long int\
    \ end7 = end5;\n    long long int start8 = start6;\n    long long int end8 = end6;\n\
    \    long long int start9 = start7;\n    long long int end9 = end7;\n    long\
    \ long int start10 = start8;\n    long long int end10 = end8;\n    long long int\
    \ start11 = start9;\n    long long int end11 = end9;\n    long long int start12\
    \ = start10;\n    long long int end12 = end10;\n    long long int start13 = start11;\n\
    \    long long int end13 = end11;\n    long long int start14 = start12;\n    long\
    \ long int end14 = end12;\n    long long int start15 = start13;\n    long long\
    \ int end15 = end13;\n    long long int start16 = start14;\n    long long int\
    \ end16 = end14;\n    long long int start17 = start15;\n    long long int end17\
    \ = end15;\n    long long int start18 = start16;\n    long long int end18 = end16;\n\
    \    long long int start19 = start17;\n    long long int end19 = end17;\n    long\
    \ long int start20 = start18;\n    long long int end20 = end18;\n    long long\
    \ int start21 = start19;\n    long long int end21 = end19;\n    long long int\
    \ start22 = start20;", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n  \
    \  end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long length = end - start;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    if (length == 3) {\n        return \"YES\";\n    }\n    if (length\
    \ == 5) {\n        return \"YES\";\n    }\n    if (length == 7) {\n        return\
    \ \"YES\";\n    }\n    if (length == 9) {\n        return \"YES\";\n    }\n  \
    \  if (length == 11) {\n        return \"YES\";\n    }\n    if (length == 13)\
    \ {\n        return \"YES\";\n    }\n    if (length == 17) {\n        return \"\
    YES\";\n    }\n    if (length == 19) {\n        return \"YES\";\n    }\n    if\
    \ (length == 23) {\n        return \"YES\";\n    }\n    if (length == 29) {\n\
    \        return \"YES\";\n    }\n    if (length == 31) {\n        return \"YES\"\
    ;\n    }\n    if (length == 37) {\n        return \"YES\";\n    }\n    if (length\
    \ == 43) {\n        return \"YES\";\n    }\n    if (length == 59) {\n        return\
    \ \"YES\";\n    }\n    if (length == 73) {\n        return \"YES\";\n    }\n \
    \   if (length == 89) {\n        return \"YES\";\n    }\n    if (length == 117)\
    \ {\n        return \"YES\";\n    }\n    if (length == 131) {\n        return\
    \ \"YES\";\n    }\n    if (length == 159) {\n        return \"YES\";\n    }\n\
    \    if (length == 179) {\n        return \"YES\";\n    }\n    if (length == 197)\
    \ {\n        return \"YES\";\n    }\n    if (length == 229) {\n        return\
    \ \"YES\";\n    }\n    if (length == 297) {\n        return \"YES\";\n    }\n\
    \    if (length == 319) {\n        return \"YES\";\n    }\n    if (length == 379)\
    \ {\n        return \"YES\";\n    }\n    if (length == 431) {\n        return\
    \ \"YES\";\n    }\n    if (length == 597) {\n        return \"YES\";\n    }\n\
    \    if (length == 743) {\n        return \"YES\";\n    }\n    if (length == 897)\
    \ {\n        return \"YES\";\n    }\n    if (length == 1173) {\n        return\
    \ \"YES\";\n    }\n    if (length == 1317) {\n        return \"YES\";\n    }\n\
    \    if (length == 1597) {\n        return \"YES\";\n    }\n    if (length ==\
    \ 1797) {\n        return \"YES\";\n    }\n    if (length == 1973) {\n       \
    \ return \"YES\";\n    }\n    if (length == 2293) {\n        return \"YES\";\n\
    \    }\n    if (length", "    // Write your code here\n    long long start1 =\
    \ std::get<0>(interval1);\n    long long end1 = std::get<1>(interval1);\n    long\
    \ long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long start = std::min(start1, start2);\n    long long end = std::max(end1,\
    \ end2);\n    long long length = end - start;\n    if (length == 1) {\n      \
    \  return \"NO\";\n    }\n    if (length == 2 && start == end) {\n        return\
    \ \"YES\";\n    }\n    if (length == 2 && start == start) {\n        return \"\
    NO\";\n    }\n    if (length == 2 && start == end) {\n        return \"NO\";\n\
    \    }\n    if (length == 2 && start == start) {\n        return \"NO\";\n   \
    \ }\n    if (length == 2 && start == end) {\n        return \"NO\";\n    }\n \
    \   if (length == 2 && start == start) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2 && start == end) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2 && start == start) {\n        return \"NO\";\n    }\n    if (length ==\
    \ 2 && start == end) {\n        return \"NO\";\n    }\n    if (length == 2 &&\
    \ start == start) {\n        return \"NO\";\n    }\n    if (length == 2 && start\
    \ == end) {\n        return \"NO\";\n    }\n    if (length == 2 && start == start)\
    \ {\n        return \"NO\";\n    }\n    if (length == 2 && start == end) {\n \
    \       return \"NO\";\n    }\n    if (length == 2 && start == start) {\n    \
    \    return \"NO\";\n    }\n    if (length == 2 && start == end) {\n        return\
    \ \"NO\";\n    }\n    if (length == 2 && start == start) {\n        return \"\
    NO\";\n    }\n    if (length == 2 && start == end) {\n        return \"NO\";\n\
    \    }\n    if (length == 2 && start == start) {\n        return \"NO\";\n   \
    \ }\n    if (length == 2 && start == end) {\n        return \"NO\";\n    }\n \
    \   if (length == 2 && start == start) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2 && start == end) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2 && start == start) {\n        return \"NO\";\n    }\n    if (length ==\
    \ 2 && start == end) {\n        return \"NO\";\n    }\n    if (length == 2 &&\
    \ start == start) {\n        return \"NO\";\n    }\n    if (length == 2 && start\
    \ == end) {\n        return \"NO\";\n    }\n    if (length == 2 && start == start)\
    \ {\n        return \"NO\";\n    }\n    if (length == 2 && start == end) {\n \
    \       return \"NO\";\n    }\n    if (length == 2 && start == start) {\n    \
    \    return \"", "    long long int start = std::get<0>(interval1);\n    long\
    \ long int end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long int length = end - start;\n    if (length == 1)\
    \ {\n        return \"NO\";\n    }\n    if (length == 2) {\n        return \"\
    YES\";\n    }\n    if (length == 3) {\n        return \"YES\";\n    }\n    if\
    \ (length == 5) {\n        return \"YES\";\n    }\n    if (length == 7) {\n  \
    \      return \"YES\";\n    }\n    if (length == 9) {\n        return \"YES\"\
    ;\n    }\n    if (length == 11) {\n        return \"YES\";\n    }\n    if (length\
    \ == 13) {\n        return \"YES\";\n    }\n    if (length == 17) {\n        return\
    \ \"YES\";\n    }\n    if (length == 19) {\n        return \"YES\";\n    }\n \
    \   if (length == 23) {\n        return \"YES\";\n    }\n    if (length == 29)\
    \ {\n        return \"YES\";\n    }\n    if (length == 31) {\n        return \"\
    YES\";\n    }\n    if (length == 37) {\n        return \"YES\";\n    }\n    if\
    \ (length == 43) {\n        return \"YES\";\n    }\n    if (length == 49) {\n\
    \        return \"YES\";\n    }\n    if (length == 53) {\n        return \"YES\"\
    ;\n    }\n    if (length == 59) {\n        return \"YES\";\n    }\n    if (length\
    \ == 67) {\n        return \"YES\";\n    }\n    if (length == 73) {\n        return\
    \ \"YES\";\n    }\n    if (length == 79) {\n        return \"YES\";\n    }\n \
    \   if (length == 91) {\n        return \"YES\";\n    }\n    if (length == 99)\
    \ {\n        return \"YES\";\n    }\n    if (length == 111) {\n        return\
    \ \"YES\";\n    }\n    if (length == 127) {\n        return \"YES\";\n    }\n\
    \    if (length == 131) {\n        return \"YES\";\n    }\n    if (length == 137)\
    \ {\n        return \"YES\";\n    }\n    if (length == 141) {\n        return\
    \ \"YES\";\n    }\n    if (length == 147) {\n        return \"YES\";\n    }\n\
    \    if (length == 151) {\n        return \"YES\";\n    }\n    if (length == 157)\
    \ {\n        return \"YES\";\n    }\n    if (length == 161) {\n        return\
    \ \"YES\";\n    }\n    if (length == 167) {\n        return \"YES\";\n    }\n\
    \    if (length == 173) {\n        return \"YES\";\n    }\n    if (length == 179)\
    \ {\n        return \"YES\";\n    }\n    if (length == 181) {\n        return\
    \ \"YES\";\n    }\n    if (length == 191) {\n        return \"YES\";\n    }\n\
    \    if (length == 199) {\n        return \"", "    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end - start;\n    long long int length2 = end2 - start2;\n    long long int\
    \ ans = length * length2;\n    if (ans == 0) {\n        return \"NO\";\n    }\n\
    \    if (ans % 2 == 0) {\n        return \"NO\";\n    }\n    if (length < length2)\
    \ {\n        return \"NO\";\n    }\n    if (length == length2) {\n        return\
    \ \"YES\";\n    }\n    if (length < length2) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    long start = std::get<0>(interval1);\n    long end\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    if (start > start2) {\n        return\
    \ \"NO\";\n    }\n    if (start == start2) {\n        if (end == end2) {\n   \
    \         return \"YES\";\n        }\n        return \"NO\";\n    }\n    if (start\
    \ == end2) {\n        return \"NO\";\n    }\n    long mid = start + (end - start)\
    \ / 2;\n    if (mid == start2) {\n        return \"YES\";\n    }\n    if (mid\
    \ == end2) {\n        return \"NO\";\n    }\n    long mid2 = start2 + (end2 -\
    \ start2) / 2;\n    if (mid > mid2) {\n        return \"NO\";\n    }\n    if (mid\
    \ == mid2) {\n        return \"YES\";\n    }\n    long mid3 = mid + (mid2 - mid)\
    \ / 2;\n    if (mid3 > mid2) {\n        return \"NO\";\n    }\n    if (mid3 ==\
    \ mid2) {\n        return \"YES\";\n    }\n    long mid4 = mid3 + (mid2 - mid3)\
    \ / 2;\n    if (mid4 > mid2) {\n        return \"NO\";\n    }\n    if (mid4 ==\
    \ mid2) {\n        return \"YES\";\n    }\n    long mid5 = mid4 + (mid2 - mid4)\
    \ / 2;\n    if (mid5 > mid2) {\n        return \"NO\";\n    }\n    if (mid5 ==\
    \ mid2) {\n        return \"YES\";\n    }\n    long mid6 = mid5 + (mid2 - mid5)\
    \ / 2;\n    if (mid6 > mid2) {\n        return \"NO\";\n    }\n    if (mid6 ==\
    \ mid2) {\n        return \"YES\";\n    }\n    long mid7 = mid6 + (mid2 - mid6)\
    \ / 2;\n    if (mid7 > mid2) {\n        return \"NO\";\n    }\n    if (mid7 ==\
    \ mid2) {\n        return \"YES\";\n    }\n    long mid8 = mid7 + (mid2 - mid7)\
    \ / 2;\n    if (mid8 > mid2) {\n        return \"NO\";\n    }\n    if (mid8 ==\
    \ mid2) {\n        return \"YES\";\n    }\n    long mid9 = mid8 + (mid2 - mid8)\
    \ / 2;\n    if (mid9 > mid2) {\n        return \"NO\";\n    }\n    if (mid9 ==\
    \ mid2) {\n        return \"YES\";\n    }\n    long mid10 = mid9 + (mid2 - mid9)\
    \ / 2;\n    if (mid10 > mid2) {\n        return \"NO\";\n", "    long long int\
    \ start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long int length\
    \ = end - start;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    long long int mid = start\
    \ + (end - start) / 2;\n    if (mid == start) {\n        return \"YES\";\n   \
    \ }\n    if (mid == end) {\n        return \"NO\";\n    }\n    if (mid % 2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    long long int a = mid - 1;\n    long\
    \ long int b = mid + 1;\n    long long int c = mid + 2;\n    long long int d =\
    \ mid + 3;\n    long long int e = mid + 4;\n    long long int f = mid + 5;\n \
    \   long long int g = mid + 6;\n    long long int h = mid + 7;\n    long long\
    \ int i = mid + 8;\n    long long int j = mid + 9;\n    long long int k = mid\
    \ + 10;\n    long long int l = mid + 11;\n    long long int m = mid + 12;\n  \
    \  long long int n = mid + 13;\n    long long int o = mid + 14;\n    long long\
    \ int p = mid + 15;\n    long long int q = mid + 16;\n    long long int r = mid\
    \ + 17;\n    long long int s = mid + 18;\n    long long int t = mid + 19;\n  \
    \  long long int u = mid + 20;\n    long long int v = mid + 21;\n    long long\
    \ int w = mid + 22;\n    long long int x = mid + 23;\n    long long int y = mid\
    \ + 24;\n    long long int z = mid + 25;\n    long long int aa = mid + 26;\n \
    \   long long int ab = mid + 27;\n    long long int ac = mid + 28;\n    long long\
    \ int ad = mid + 29;\n    long long int ae = mid + 30;\n    long long int af =\
    \ mid + 31;\n    long long int ag = mid + 32;\n    long long int ah = mid + 33;\n\
    \    long long int ai = mid + 34;\n    long long int aj = mid + 35;\n    long\
    \ long int ak = mid + 36;\n    long long int al = mid + 37;\n    long long int\
    \ am = mid + 38", "    long long start1 = interval1.get<0>();\n    long long end1\
    \ = interval1.get<1>();\n    long long start2 = interval2.get<0>();\n    long\
    \ long end2 = interval2.get<1>();\n    long long length = end1 - start1;\n   \
    \ long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length == length2) {\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (start1 < start2)\
    \ {\n            std::swap(start1, start2);\n            std::swap(end1, end2);\n\
    \        }\n        long long mid1 = start1 + length / 2;\n        long long mid2\
    \ = start2 + length2 / 2;\n        if (mid1 < mid2) {\n            std::swap(mid1,\
    \ mid2);\n        }\n        if (mid1 == mid2) {\n            long long mid =\
    \ mid1;\n            while (mid < mid2) {\n                if (mid == start1 ||\
    \ mid == start2) {\n                    return \"NO\";\n                }\n  \
    \              mid++;\n            }\n            return \"YES\";\n        }\n\
    \        return \"NO\";\n    }\n    if (length < length2) {\n        std::swap(start1,\
    \ start2);\n        std::swap(end1, end2);\n    }\n    long long mid1 = start1\
    \ + length / 2;\n    long long mid2 = start2 + length2 / 2;\n    if (mid1 < mid2)\
    \ {\n        std::swap(mid1, mid2);\n    }\n    if (mid1 == mid2) {\n        long\
    \ long mid = mid1;\n        while (mid1 < mid2) {\n            if (mid == start1\
    \ || mid == start2) {\n                return \"NO\";\n            }\n       \
    \     mid++;\n        }\n        return \"YES\";\n    }\n    return \"NO\";",
  "    long long int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end - start;\n    long long\
    \ int length2 = end2 - start2;\n    long long int ans = 0;\n    if (length2 >\
    \ length) {\n        ans = length2;\n    } else {\n        ans = length;\n   \
    \ }\n    if (ans == 0) {\n        return \"NO\";\n    }\n    if (ans == 1) {\n\
    \        return \"YES\";\n    }\n    if (ans == 2) {\n        return \"YES\";\n\
    \    }\n    if (ans == 3) {\n        return \"YES\";\n    }\n    if (ans == 4)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 5) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 6) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 7) {\n        return \"YES\";\n    }\n    if (ans == 8) {\n        return \"\
    YES\";\n    }\n    if (ans == 9) {\n        return \"YES\";\n    }\n    if (ans\
    \ == 10) {\n        return \"YES\";\n    }\n    if (ans == 11) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 12) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 13) {\n        return \"YES\";\n    }\n    if (ans == 14) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 15) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 16) {\n        return \"YES\";\n    }\n    if (ans == 17)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 18) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 19) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 20) {\n        return \"YES\";\n    }\n    if (ans == 21) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 22) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 23) {\n        return \"YES\";\n    }\n    if (ans == 24) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 25) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 26) {\n        return \"YES\";\n    }\n    if (ans == 27)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 28) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 29) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 30) {\n        return \"YES\";\n    }\n    if (ans == 31) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 32) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 33) {\n        return \"YES\";\n    }\n    if (ans == 34) {\n      \
    \  return \"YES", "    long long int start = std::get<0>(interval1);\n    long\
    \ long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end - start;\n    long long int length2 = end2 - start2;\n    if (length2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    if (length == length2) {\n        return\
    \ \"YES\";\n    }\n    if (length < length2) {\n        return \"NO\";\n    }\n\
    \    long long int mid = (start + end) / 2;\n    long long int mid2 = (start2\
    \ + end2) / 2;\n    long long int mid3 = mid * mid;\n    long long int mid4 =\
    \ mid2 * mid2;\n    if (mid3 >= mid4) {\n        return \"NO\";\n    }\n    return\
    \ \"YES\";", "    long long int start1 = std::get<0>(interval1);\n    long long\
    \ int end1 = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end1 - start1 + end2 - start2;\n    if (length == 0)\n        return \"NO\"\
    ;\n    if (length == 1)\n        return \"YES\";\n    long long int mid1 = start1\
    \ + end1 / 2;\n    long long int mid2 = start2 + end2 / 2;\n    long long int\
    \ mid = mid1 + mid2;\n    long long int a = start1;\n    long long int b = start2;\n\
    \    long long int c = mid;\n    long long int d = mid;\n    long long int e =\
    \ end1;\n    long long int f = end2;\n    long long int g = mid;\n    long long\
    \ int h = mid;\n    long long int i = end1;\n    long long int j = end2;\n   \
    \ long long int k = mid;\n    long long int l = mid;\n    long long int m = end1;\n\
    \    long long int n = end2;\n    long long int o = mid;\n    long long int p\
    \ = mid;\n    long long int q = mid;\n    long long int r = end1;\n    long long\
    \ int s = end2;\n    long long int t = mid;\n    long long int u = mid;\n    long\
    \ long int v = mid;\n    long long int w = end1;\n    long long int x = end2;\n\
    \    long long int y = mid;\n    long long int z = mid;\n    long long int aa\
    \ = start1;\n    long long int ab = start2;\n    long long int ac = mid;\n   \
    \ long long int ad = mid;\n    long long int ae = end1;\n    long long int af\
    \ = end2;\n    long long int ag = mid;\n    long long int ah = mid;\n    long\
    \ long int ai = end1;\n    long long int aj = end2;\n    long long int ak = mid;\n\
    \    long long int al = mid;\n    long long int am = end1;\n    long long int\
    \ an = end2;\n    long long int ao = mid;\n    long long int ap = mid;\n    long\
    \ long int aq = mid;\n    long long int ar = end1;\n    long long int as = end2;\n\
    \    long long int at = mid;\n    long long ", "    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    if (std::get<0>(interval1) > std::get<0>(interval2)) {\n        return \"\
    NO\";\n    }\n    if (std::get<1>(interval1) < std::get<1>(interval2)) {\n   \
    \     std::swap(interval1, interval2);\n    }\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    long long len1\
    \ = std::get<0>(interval1) - std::get<1>(interval1);\n    long long len2 = std::get<1>(interval2)\
    \ - std::get<0>(interval2);\n    if (len1 == len2) {\n        return \"YES\";\n\
    \    }\n    if (len1 > len2) {\n        return \"NO\";\n    }\n    long long len3\
    \ = len1;\n    long long len4 = len2;\n    while (len3 > 1) {\n        len3 /=\
    \ 2;\n    }\n    while (len4 > 1) {\n        len4 /= 2;\n    }\n    long long\
    \ len5 = len3;\n    long long len6 = len4;\n    while (len5 > 1) {\n        len5\
    \ /= 2;\n    }\n    while (len6 > 1) {\n        len6 /= 2;\n    }\n    long long\
    \ len7 = len5;\n    long long len8 = len6;\n    while (len7 > 1) {\n        len7\
    \ /= 2;\n    }\n    while (len8 > 1) {\n        len8 /= 2;\n    }\n    long long\
    \ len9 = len7;\n    long long len10 = len8;\n    while (len9 > 1) {\n        len9\
    \ /= 2;\n    }\n    while (len10 > 1) {\n        len10 /= 2;\n    }\n    long\
    \ long len11 = len9;\n    long long len12 = len10;\n    while (len11 > 1) {\n\
    \        len11 /= 2;\n    }\n    while (len12 > 1) {\n        len12 /= 2;\n  \
    \  }\n    long long len13 = len11;\n    long long len14 = len12;\n    while (len13\
    \ > 1) {\n        len13 /= 2;\n    }\n    while (len14 > 1) {\n        len14 /=\
    \ 2;\n    }\n    long long len15 = len13;\n    long long len16 = len14;\n    while\
    \ (len15 > 1) {\n        len15 /= 2;\n    }\n    while (len16 > 1) {\n       \
    \ len16 /= 2;\n    }\n    long long len17 = len15;\n    long long len18 = len16;\n\
    \    while (len17 > 1) {\n        len17 /= 2;\n", "    long long int start1 =\
    \ std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int startIntersection = start1 < end2\
    \ ? start1 : end2;\n    long long int endIntersection = start1 < end2 ? end2 :\
    \ start1;\n    long long int endIntersection2 = end1 < start2 ? end1 : start2;\n\
    \    long long int startIntersection2 = start2 < endIntersection ? start2 : endIntersection;\n\
    \    long long int endIntersection2 = start2 < endIntersection ? endIntersection\
    \ : start2;\n    long long int startIntersection3 = start1 < start2 ? start1 :\
    \ start2;\n    long long int endIntersection3 = end1 < end2 ? end1 : end2;\n \
    \   long long int startIntersection4 = start2 < startIntersection3 ? start2 :\
    \ startIntersection3;\n    long long int endIntersection4 = end2 < endIntersection3\
    \ ? end2 : endIntersection3;\n    long long int startIntersection5 = start1 <\
    \ start2 ? start1 : start2;\n    long long int endIntersection5 = end1 < end2\
    \ ? end1 : end2;\n    long long int startIntersection6 = start2 < startIntersection5\
    \ ? start2 : startIntersection5;\n    long long int endIntersection6 = end2 <\
    \ endIntersection5 ? end2 : endIntersection5;\n    long long int startIntersection7\
    \ = start1 < start2 ? start1 : start2;\n    long long int endIntersection7 = end1\
    \ < end2 ? end1 : end2;\n    long long int startIntersection8 = start2 < startIntersection7\
    \ ? start2 : startIntersection7;\n    long long int endIntersection8 = end2 <\
    \ endIntersection7 ? end2 : endIntersection7;\n    long long int startIntersection9\
    \ = start1 < start2 ? start1 : start2;\n    long long int endIntersection9 = end1\
    \ < end2 ? end1 : end2;\n    long long int startIntersection10 = start2 < startIntersection9\
    \ ? start2 : startIntersection9;\n    long long int endIntersection10 = end2 <\
    \ endIntersection9 ? end2 : endIntersection9;\n    long long int startIntersection11\
    \ = start1 < start2 ? start1 : start2;\n    long long int endIntersection11 =\
    \ end1 < end2 ? end1 : end2;\n    long long int ", "    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    if (std::get<0>(interval1) > std::get<0>(interval2)) {\n        return \"\
    NO\";\n    }\n    if (std::get<1>(interval1) < std::get<1>(interval2)) {\n   \
    \     std::swap(interval1, interval2);\n    }\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<0>(interval1)\
    \ == std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    long long intersect\
    \ = std::get<1>(interval1) & std::get<1>(interval2);\n    if (intersect == 0)\
    \ {\n        return \"NO\";\n    }\n    if (intersect == 1) {\n        return\
    \ \"YES\";\n    }\n    if (intersect == -1) {\n        return \"NO\";\n    }\n\
    \    if (intersect == -2) {\n        return \"YES\";\n    }\n    if (intersect\
    \ == -3) {\n        return \"YES\";\n    }\n    if (intersect == -4) {\n     \
    \   return \"YES\";\n    }\n    if (intersect == -5) {\n        return \"YES\"\
    ;\n    }\n    if (intersect == -6) {\n        return \"YES\";\n    }\n    if (intersect\
    \ == -7) {\n        return \"YES\";\n    }\n    if (intersect == -8) {\n     \
    \   return \"YES\";\n    }\n    if (intersect == -9) {\n        return \"YES\"\
    ;\n    }\n    if (intersect == -10) {\n        return \"YES\";\n    }\n    if\
    \ (intersect == -11) {\n        return \"YES\";\n    }\n    if (intersect == -12)\
    \ {\n        return \"YES\";\n    }\n    if (intersect == -13) {\n        return\
    \ \"YES\";\n    }\n    if (intersect == -14) {\n        return \"YES\";\n    }\n\
    \    if (intersect == -15) {\n        return \"YES\";\n    }\n    if (intersect\
    \ == -16) {\n        return \"YES\";\n    }\n    if (intersect == -17) {\n   \
    \     return \"YES\";\n    }\n    if (intersect == -18) {\n        return \"YES\"\
    ;\n    }\n    if (intersect == -19) {\n        return \"YES\";\n    }\n    if\
    \ (intersect == -20) {\n        return \"YES\";\n    }\n    if (intersect == -21)\
    \ {\n        return \"YES\";\n    }\n    if (intersect == -22) {\n        return\
    \ \"YES\";\n    }\n    if (intersect == -23) {\n        return \"YES\";\n    }\n\
    \    if (intersect == -24) {\n        return \"YES\";\n", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    long\
    \ long length = end - start;\n    if (length == 0) return \"NO\";\n    if (length\
    \ == 1) return \"YES\";\n    if (length == 2) return \"YES\";\n    if (length\
    \ == 3) return \"YES\";\n    if (length == 4) return \"YES\";\n    if (length\
    \ == 5) return \"YES\";\n    if (length == 6) return \"YES\";\n    if (length\
    \ == 7) return \"YES\";\n    if (length == 8) return \"YES\";\n    if (length\
    \ == 9) return \"YES\";\n    if (length == 10) return \"YES\";\n    if (length\
    \ == 11) return \"YES\";\n    if (length == 12) return \"YES\";\n    if (length\
    \ == 13) return \"YES\";\n    if (length == 14) return \"YES\";\n    if (length\
    \ == 15) return \"YES\";\n    if (length == 16) return \"YES\";\n    if (length\
    \ == 17) return \"YES\";\n    if (length == 18) return \"YES\";\n    if (length\
    \ == 19) return \"YES\";\n    if (length == 20) return \"YES\";\n    if (length\
    \ == 21) return \"YES\";\n    if (length == 22) return \"YES\";\n    if (length\
    \ == 23) return \"YES\";\n    if (length == 24) return \"YES\";\n    if (length\
    \ == 25) return \"YES\";\n    if (length == 26) return \"YES\";\n    if (length\
    \ == 27) return \"YES\";\n    if (length == 28) return \"YES\";\n    if (length\
    \ == 29) return \"YES\";\n    if (length == 30) return \"YES\";\n    if (length\
    \ == 31) return \"YES\";\n    if (length == 32) return \"YES\";\n    if (length\
    \ == 33) return \"YES\";\n    if (length == 34) return \"YES\";\n    if (length\
    \ == 35) return \"YES\";\n    if (length == 36) return \"YES\";\n    if (length\
    \ == 37) return \"YES\";\n    if (length == 38) return \"YES\";\n    if (length\
    \ == 39) return \"YES\";\n    if (length == 40) return \"YES\";\n    if (length\
    \ == 41) return \"YES\";\n    if (length == 42) return \"YES\";\n    if (length\
    \ == 43) return \"YES\";\n    if (length == 44) return \"YES\";\n    if (length\
    \ == 45) return \"YES\";\n    if (length == 46) return \"YES\";\n    if (length\
    \ == 47) return \"YES\";\n    if (length == 48) return \"YES\";\n    if (length\
    \ == 49) return \"YES\";\n    if (length == 50) return \"YES\";\n    if (length\
    \ == 51) return \"YES\";\n    if (length == 52) return \"YES\";", "    long long\
    \ int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end - start;\n    long long\
    \ int length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\"\
    ;\n    }\n    if (length == 1) {\n        return \"YES\";\n    }\n    if (length2\
    \ == 1) {\n        return \"YES\";\n    }\n    long long int length3 = length\
    \ * length2;\n    long long int length4 = length2 * length2;\n    long long int\
    \ length5 = length3 * length2;\n    long long int length6 = length3 * length3;\n\
    \    long long int length7 = length4 * length3;\n    long long int length8 = length4\
    \ * length4;\n    long long int length9 = length5 * length4;\n    long long int\
    \ length10 = length5 * length5;\n    long long int length11 = length6 * length5;\n\
    \    long long int length12 = length6 * length6;\n    long long int length13 =\
    \ length7 * length6;\n    long long int length14 = length7 * length7;\n    long\
    \ long int length15 = length8 * length7;\n    long long int length16 = length8\
    \ * length8;\n    long long int length17 = length9 * length8;\n    long long int\
    \ length18 = length9 * length9;\n    long long int length19 = length10 * length9;\n\
    \    long long int length20 = length10 * length10;\n    long long int length21\
    \ = length11 * length10;\n    long long int length22 = length11 * length11;\n\
    \    long long int length23 = length12 * length11;\n    long long int length24\
    \ = length12 * length12;\n    long long int length25 = length13 * length12;\n\
    \    long long int length26 = length13 * length13;\n    long long int length27\
    \ = length14 * length13;\n    long long int length28 = length14 * length14;\n\
    \    long long int length29 = length15 * length14;\n    long long int length30\
    \ = length15 * length15;\n    long long int length31 = length16 * length15;\n\
    \    long long int length32 = length16 * length16;\n    long long int length33\
    \ = length17 * length16;\n    long long int length34 = length17 * length17;\n\
    \    long long int length35 = length18 * length17;", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long length = end - start;\n   \
    \ long length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n    \
    \    return \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\"\
    ;\n    }\n    if (length < length2) {\n        length = length2;\n    }\n    long\
    \ mid = length / 2;\n    long mid2 = length2 / 2;\n    if (mid == mid2) {\n  \
    \      return \"NO\";\n    }\n    if (mid < mid2) {\n        mid = mid2;\n   \
    \ }\n    long a = start;\n    long b = start;\n    long c = end;\n    long d =\
    \ end;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n \
    \   long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x\
    \ = 1;\n    long y = 1;\n    long z = 1;\n    long a = start;\n    long b = start;\n\
    \    long c = end;\n    long d = end;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = start;\n    long b = start;\n    long c = end;\n    long d = end;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;\n    long z = 1;\n    long a = start;\n    long b = start;\n    long\
    \ c = end;\n    long d = end;\n    long p = 1;\n    long q = 1;\n    long r =\
    \ 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n   \
    \ long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a =\
    \ start;\n    long b = start;\n    long c = end;\n    long d = end;\n    long\
    \ p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long t = 1;\n\
    \    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n    long\
    \ y = 1;", "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long start3 = start;\n    long end3 = end;\n    long start4 = start2;\n\
    \    long end4 = end2;\n    long start5 = start3;\n    long end5 = end3;\n   \
    \ long start6 = start4;\n    long end6 = end4;\n    long start7 = start5;\n  \
    \  long end7 = end5;\n    long start8 = start6;\n    long end8 = end6;\n    long\
    \ start9 = start7;\n    long end9 = end7;\n    long start10 = start8;\n    long\
    \ end10 = end8;\n    long start11 = start9;\n    long end11 = end9;\n    long\
    \ start12 = start10;\n    long end12 = end10;\n    long start13 = start11;\n \
    \   long end13 = end11;\n    long start14 = start12;\n    long end14 = end12;\n\
    \    long start15 = start13;\n    long end15 = end13;\n    long start16 = start14;\n\
    \    long end16 = end14;\n    long start17 = start15;\n    long end17 = end15;\n\
    \    long start18 = start16;\n    long end18 = end16;\n    long start19 = start17;\n\
    \    long end19 = end17;\n    long start20 = start18;\n    long end20 = end18;\n\
    \    long start21 = start19;\n    long end21 = end19;\n    long start22 = start20;\n\
    \    long end22 = end20;\n    long start23 = start21;\n    long end23 = end21;\n\
    \    long start24 = start22;\n    long end24 = end22;\n    long start25 = start23;\n\
    \    long end25 = end23;\n    long start26 = start24;\n    long end26 = end24;\n\
    \    long start27 = start25;\n    long end27 = end25;\n    long start28 = start26;\n\
    \    long end28 = end26;\n    long start29 = start27;\n    long end", "    //\
    \ Your code here\n    long long int l1 = interval1.get<0>();\n    long long int\
    \ l2 = interval2.get<0>();\n    long long int r1 = interval1.get<1>();\n    long\
    \ long int r2 = interval2.get<1>();\n    long long int l3 = l1;\n    long long\
    \ int r3 = r1;\n    long long int l4 = l2;\n    long long int r4 = r2;\n    long\
    \ long int l5 = l3;\n    long long int r5 = r3;\n    long long int l6 = l4;\n\
    \    long long int r6 = r4;\n    long long int l7 = l5;\n    long long int r7\
    \ = r5;\n    long long int l8 = l6;\n    long long int r8 = r6;\n    long long\
    \ int l9 = l7;\n    long long int r9 = r7;\n    long long int l10 = l8;\n    long\
    \ long int r10 = r8;\n    long long int l11 = l9;\n    long long int r11 = r9;\n\
    \    long long int l12 = l10;\n    long long int r12 = r10;\n    long long int\
    \ l13 = l11;\n    long long int r13 = r11;\n    long long int l14 = l12;\n   \
    \ long long int r14 = r12;\n    long long int l15 = l13;\n    long long int r15\
    \ = r13;\n    long long int l16 = l14;\n    long long int r16 = r14;\n    long\
    \ long int l17 = l15;\n    long long int r17 = r15;\n    long long int l18 = l16;\n\
    \    long long int r18 = r16;\n    long long int l19 = l17;\n    long long int\
    \ r19 = r17;\n    long long int l20 = l18;\n    long long int r20 = r18;\n   \
    \ long long int l21 = l21;\n    long long int r21 = r19;\n    long long int l22\
    \ = l20;\n    long long int r22 = r20;\n    long long int l23 = l22;\n    long\
    \ long int r23 = r21;\n    long long int l24 = l23;\n    long long int r24 = r22;\n\
    \    long long int l25 = l24;\n    long long int r25 = r23;\n    long long int\
    \ l26 = l25;\n    long long int r26 = r24", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int start = std::max(start1, start2);\n    long long int end =\
    \ std::min(end1, end2);\n    long long int length = end - start;\n    if (length\
    \ == 0) return \"NO\";\n    if (length == 1) return \"YES\";\n    long long int\
    \ mid = start + (end - start) / 2;\n    if (std::get<0>(intersection(std::make_tuple(start,\
    \ mid), std::make_tuple(mid, end))) == mid) return \"YES\";\n    return \"NO\"\
    ;", "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long length = end - start;\n    long length2 = end2 - start2;\n    if (length2\
    \ == 0) {\n        return \"NO\";\n    }\n    if (length2 == 1) {\n        return\
    \ \"YES\";\n    }\n    if (length < length2) {\n        return \"NO\";\n    }\n\
    \    if (length == length2) {\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            if (start <= end2)\
    \ {\n                return \"YES\";\n            }\n        }\n    }\n    return\
    \ \"NO\";", "    long long int start1 = interval1.get<0>();\n    long long int\
    \ end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1 < start2 ? start1 : start2;\n    long long int endIntersection = end1\
    \ < end2 ? end1 : end2;\n    long long int startIntersectionEnd = startIntersection\
    \ < endIntersection ? startIntersection : endIntersection;\n    long long int\
    \ endIntersectionEnd = startIntersection < endIntersection ? endIntersection :\
    \ startIntersection;\n    long long int startIntersectionEnd2 = startIntersection\
    \ < endIntersection ? startIntersection : endIntersection;\n    long long int\
    \ endIntersectionEnd2 = startIntersection < endIntersection ? endIntersection\
    \ : startIntersection;\n    long long int startIntersectionEnd3 = startIntersection\
    \ < endIntersection ? startIntersection : endIntersection;\n    long long int\
    \ endIntersectionEnd3 = startIntersection < endIntersection ? endIntersection\
    \ : startIntersection;\n    long long int startIntersectionEnd4 = startIntersection\
    \ < endIntersection ? startIntersection : endIntersection;\n    long long int\
    \ endIntersectionEnd4 = startIntersection < endIntersection ? endIntersection\
    \ : startIntersection;\n    long long int startIntersectionEnd5 = startIntersection\
    \ < endIntersection ? startIntersection : endIntersection;\n    long long int\
    \ endIntersectionEnd5 = startIntersection < endIntersection ? endIntersection\
    \ : startIntersection;\n    long long int startIntersectionEnd6 = startIntersection\
    \ < endIntersection ? startIntersection : endIntersection;\n    long long int\
    \ endIntersectionEnd6 = startIntersection < endIntersection ? endIntersection\
    \ : startIntersection;\n    long long int startIntersectionEnd7 = startIntersection\
    \ < endIntersection ? startIntersection : endIntersection;\n    long long int\
    \ endIntersectionEnd7 = startIntersection < endIntersection ? endIntersection\
    \ : startIntersection;\n    long long int startIntersectionEnd8 = startIntersection\
    \ < endIntersection ? startIntersection : endIntersection;\n    long long int\
    \ endIntersectionEnd8 = startIntersection < endIntersection ? endIntersection\
    \ : startIntersection;\n    long long int startIntersectionEnd9 = start", "  \
    \  long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    if (end\
    \ < end2) {\n        return \"NO\";\n    }\n    long long inter = end - start;\n\
    \    long long inter2 = end2 - start2;\n    if (inter > inter2) {\n        return\
    \ \"NO\";\n    }\n    if (inter == inter2) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length == length2) {\n        return\
    \ \"YES\";\n    }\n    long long m = length / length2;\n    if (m == 0) {\n  \
    \      return \"NO\";\n    }\n    if (m == 1) {\n        return \"YES\";\n   \
    \ }\n    if (m == 2) {\n        if (length == length2) {\n            return \"\
    YES\";\n        }\n        if (length < length2) {\n            return \"NO\"\
    ;\n        }\n    }\n    long long n = length / m;\n    if (n == 0) {\n      \
    \  return \"NO\";\n    }\n    if (n == 1) {\n        return \"YES\";\n    }\n\
    \    if (n == 2) {\n        if (length == length2) {\n            return \"YES\"\
    ;\n        }\n        if (length < length2) {\n            return \"NO\";\n  \
    \      }\n    }\n    long long k = length / n;\n    if (k == 0) {\n        return\
    \ \"NO\";\n    }\n    if (k == 1) {\n        return \"YES\";\n    }\n    if (k\
    \ == 2) {\n        if (length == length2) {\n            return \"YES\";\n   \
    \     }\n        if (length < length2) {\n            return \"NO\";\n       \
    \ }\n    }\n    long long l = length / k;\n    if (l == 0) {\n        return \"\
    NO\";\n    }\n    if (l == 1) {\n        return \"YES\";\n    }\n    if (l ==\
    \ 2) {\n        if (length == length2) {\n            return \"YES\";\n      \
    \  }\n        if (length < length2) {\n            return \"NO\";\n        }\n\
    \    }\n    long long m = length / l;\n    if (m == 0) {\n        return \"NO\"\
    ;\n    }\n    if (m == 1) {\n        return \"YES\";\n    }\n    if (m == 2) {\n\
    \        if (length == length2) {\n            return \"YES\";\n        }\n  \
    \      if (length < length2) {\n            return \"NO\";\n        }\n    }\n\
    \    long long n = length / m;\n    if (n == 0) {\n        return \"NO\";\n  \
    \  }\n    if (n == 1) {\n        return \"YES\";\n    }\n    if (n == 2) {\n \
    \       if (length == length2) {\n            return \"YES\";\n        }\n   \
    \     if (length < length2) {\n            return \"NO\";\n        }\n    }\n\
    \    long long k = length / n;\n    if (k == 0) {\n        return \"NO\";\n  \
    \  }\n    if (k == 1) {\n        return \"YES\";\n    }\n    if (k == 2) {\n \
    \       if (length == length2) {\n            return \"YES\";\n        }\n   \
    \     if (length < length2) {\n            return \"NO\";\n        }\n    }",
  "    long long int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end - start;\n    long long\
    \ int length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n     \
    \   return \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\"\
    ;\n    }\n    if (length < length2) {\n        std::swap(start, end);\n      \
    \  std::swap(start2, end2);\n    }\n    long long int length3 = length / length2;\n\
    \    long long int length4 = length % length2;\n    if (length3 == 1) {\n    \
    \    return \"YES\";\n    }\n    if (length4 != 0) {\n        return \"NO\";\n\
    \    }\n    if (length3 == 2) {\n        return \"YES\";\n    }\n    if (length3\
    \ == 3) {\n        return \"YES\";\n    }\n    if (length3 == 4) {\n        return\
    \ \"YES\";\n    }\n    if (length3 == 5) {\n        return \"YES\";\n    }\n \
    \   if (length3 == 6) {\n        return \"YES\";\n    }\n    if (length3 == 7)\
    \ {\n        return \"YES\";\n    }\n    if (length3 == 8) {\n        return \"\
    YES\";\n    }\n    if (length3 == 9) {\n        return \"YES\";\n    }\n    if\
    \ (length3 == 10) {\n        return \"YES\";\n    }\n    if (length3 == 11) {\n\
    \        return \"YES\";\n    }\n    if (length3 == 12) {\n        return \"YES\"\
    ;\n    }\n    if (length3 == 13) {\n        return \"YES\";\n    }\n    if (length3\
    \ == 14) {\n        return \"YES\";\n    }\n    if (length3 == 15) {\n       \
    \ return \"YES\";\n    }\n    if (length3 == 16) {\n        return \"YES\";\n\
    \    }\n    if (length3 == 17) {\n        return \"YES\";\n    }\n    if (length3\
    \ == 18) {\n        return \"YES\";\n    }\n    if (length3 == 19) {\n       \
    \ return \"YES\";\n    }\n    if (length3 == 20) {\n        return \"YES\";\n\
    \    }\n    if (length3 == 21) {\n        return \"YES\";\n    }\n    if (length3\
    \ == 22) {\n        return \"YES\";\n    }\n    if (length3 == 23) {\n       \
    \ return \"YES\";\n    }\n    if (length3 == 24) {\n        return \"YES\";\n\
    \    }\n    if (length3 == 25) {\n        return \"YES\";\n    }\n    if (length3\
    \ == 26) {\n        return \"YES\";\n    }\n    if (length3 == 27) {\n       \
    \ return \"YES\";\n    }\n    if (length3 == 28) {\n        return \"YES\";\n\
    \    }\n    if (length3 == 29) {\n        return \"YES\";\n    }\n    if (length3\
    \ == 30) {\n        return \"YES\";\n    }", "    long long int l1 = interval1.get<0>(),\
    \ l2 = interval2.get<0>();\n    long long int r1 = interval1.get<1>(), r2 = interval2.get<1>();\n\
    \    long long int l3 = l1, l4 = l2;\n    long long int r3 = r1, r4 = r2;\n  \
    \  long long int l5 = l3, l6 = l4;\n    long long int r5 = r3, r6 = r4;\n    long\
    \ long int l7 = l5, l8 = l6;\n    long long int r7 = r5, r8 = r6;\n    long long\
    \ int l9 = l7, l10 = l8;\n    long long int r9 = r7, r10 = r8;\n    long long\
    \ int l11 = l9, l12 = l10;\n    long long int r11 = r9, r12 = r10;\n    long long\
    \ int l13 = l11, l14 = l12;\n    long long int r13 = r11, r14 = r12;\n    long\
    \ long int l15 = l13, l16 = l14;\n    long long int r15 = r13, r16 = r14;\n  \
    \  long long int l17 = l15, l18 = l16;\n    long long int r17 = r15, r18 = r16;\n\
    \    long long int l19 = l17, l20 = l18;\n    long long int r19 = r17, r20 = r18;\n\
    \    long long int l21 = l19, l22 = l20;\n    long long int r21 = r19, r22 = r20;\n\
    \    long long int l23 = l21, l24 = l22;\n    long long int r23 = r21, r24 = r22;\n\
    \    long long int l25 = l23, l26 = l24;\n    long long int r25 = r23, r26 = r24;\n\
    \    long long int l27 = l25, l28 = l26;\n    long long int r27 = r25, r28 = r26;\n\
    \    long long int l29 = l27, l30 = l28;\n    long long int r29 = r27, r30 = r28;\n\
    \    long long int l31 = l29, l32 = l30;\n    long long int r31 = r29, r32 = r30;\n\
    \    long long int l33 = l31, l34 = l32;\n    long long int r33 = r31, r32 = r32;\n\
    \    long long int l35 = l33, l36 = l34;\n    long long int ", "    long long\
    \ int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = start1 < end2 ? start1 : end2;\n    long\
    \ long int endIntersection = start1 < end2 ? end2 : start1;\n    long long int\
    \ startIntersectionEnd = start1 < end2 ? start2 : end1;\n    long long int endIntersectionEnd\
    \ = start1 < end2 ? end1 : start2;\n    long long int startIntersectionLength\
    \ = start1 < end2 ? end1 - start1 : end2 - start2;\n    long long int endIntersectionLength\
    \ = start1 < end2 ? start2 - end1 : start1 - end2;\n    long long int startIntersectionStartEnd\
    \ = start1 < end2 ? start1 : end2;\n    long long int endIntersectionStartEnd\
    \ = start1 < end2 ? end1 : start2;\n    long long int startIntersectionStartLength\
    \ = start1 < end2 ? end1 - start1 : end2 - start2;\n    long long int endIntersectionStartLength\
    \ = start1 < end2 ? start2 - end1 : start1 - end2;\n    long long int startIntersectionEndLength\
    \ = start1 < end2 ? end1 - start2 : end2 - start1;\n    long long int endIntersectionEndLength\
    \ = start1 < end2 ? start2 - end2 : start1 - end1;\n    long long int startIntersectionStartStartEnd\
    \ = start1 < end2 ? start1 : end2;\n    long long int endIntersectionStartStartEnd\
    \ = start1 < end2 ? end1 : start2;\n    long long int startIntersectionStartStartLength\
    \ = start1 < end2 ? end1 - start1 : end2 - start2;\n    long long int endIntersectionStartStartLength\
    \ = start1 < end2 ? start2 - end1 : start1 - end2;\n    long long int startIntersectionEndEndLength\
    \ = start1 < end2 ? end1 - start2 : end2 - start1;\n    long long int endIntersectionEndEndLength\
    \ = start1 < end2 ? start2 - end2 : start1 - end1;\n    long long int startIntersectionStartEndLength\
    \ = start1 < end2 ? end1 - start2 : end2 - start1;\n    long long int endIntersectionStartEndLength\
    \ = start1 < end2 ? start2 - end1 : start1 - end2;\n    long long int startIntersectionEndStartLength\
    \ = start1 < end2 ? end1 - start2 : end2 - start1;\n    long long int endInter",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = 0;\n    if (start <= end) {\n        if (start2 <= end2)\
    \ {\n            length = end - start;\n            if (length >= 2) {\n     \
    \           long long start3 = std::get<0>(interval1);\n                long long\
    \ end3 = std::get<1>(interval1);\n                long long start4 = std::get<0>(interval2);\n\
    \                long long end4 = std::get<1>(interval2);\n                long\
    \ long length3 = 0;\n                if (start3 <= end3) {\n                 \
    \   if (start4 <= end4) {\n                        length3 = end3 - start3;\n\
    \                        if (length3 >= 2) {\n                            long\
    \ long start5 = std::get<0>(interval1);\n                            long long\
    \ end5 = std::get<1>(interval1);\n                            long long start6\
    \ = std::get<0>(interval2);\n                            long long end6 = std::get<1>(interval2);\n\
    \                            long long length5 = 0;\n                        \
    \    if (start5 <= end5) {\n                                if (start6 <= end6)\
    \ {\n                                    length5 = end5 - start5;\n          \
    \                          if (length5 >= 2) {\n                             \
    \           long long start7 = std::get<0>(interval1);\n                     \
    \                   long long end7 = std::get<1>(interval1);\n               \
    \                         long long start8 = std::get<0>(interval2);\n       \
    \                                 long long end8 = std::get<1>(interval2);\n \
    \                                       long long length7 = 0;\n             \
    \                           if (start7 <= end7) {\n                          \
    \                  if (start8 <= end8) {\n                                   \
    \             length7 = end7 - start7;\n                                     \
    \           if (length7 >= 2) {\n                                            \
    \        long long start9 = std::get<0>(interval1);\n                        \
    \                            long long end9 = std::get<1>(interval1);\n      \
    \                                              long long start10 = std::get<0>(interval2);\n\
    \                                                    long long end10 = std::get<1>(interval2);\n\
    \                                                    long long length9 = 0;\n\
    \                                                    if (start9 <= end9) {\n \
    \                                                       if (start10 <= end10)\
    \ {\n                                                            length9 = end9\
    \ - start9;\n                                                            if (length9\
    \ >= 2) {\n                                                                long\
    \ long start11 = std::get<0>(interval1);\n                                   \
    \                             long long end11 = std::get<1>(interval1);\n    \
    \                                                            long long start12\
    \ = std::get<0>(interval2);\n                                                \
    \                long long end12 = std::get<1>(interval2);\n                 \
    \                                               long long length11 = 0;\n    \
    \                                                            if (start11 <= end11)\
    \ {\n", "    if (interval1[0] >= interval2[1]) {\n        std::swap(interval1,\
    \ interval2);\n    }\n    if (interval1[1] >= interval2[0]) {\n        std::swap(interval1,\
    \ interval2);\n    }\n    long long int a = interval1[0], b = interval1[1];\n\
    \    long long int c = interval2[0], d = interval2[1];\n    long long int m =\
    \ (a+b)/2;\n    long long int n = (c+d)/2;\n    long long int p = (m+n)/2;\n \
    \   long long int q = (m+n)/2;\n    long long int r = (a+b)/2;\n    long long\
    \ int s = (c+d)/2;\n    long long int t = (a+b)/2;\n    long long int u = (c+d)/2;\n\
    \    long long int v = (m+n)/2;\n    long long int w = (m+n)/2;\n    long long\
    \ int x = (a+b)/2;\n    long long int y = (c+d)/2;\n    long long int z = (m+n)/2;\n\
    \    long long int A = (m+n)/2;\n    long long int B = (m+n)/2;\n    long long\
    \ int C = (m+n)/2;\n    long long int D = (m+n)/2;\n    long long int E = (m+n)/2;\n\
    \    long long int F = (m+n)/2;\n    long long int G = (m+n)/2;\n    long long\
    \ int H = (m+n)/2;\n    long long int I = (m+n)/2;\n    long long int J = (m+n)/2;\n\
    \    long long int K = (m+n)/2;\n    long long int L = (m+n)/2;\n    long long\
    \ int M = (m+n)/2;\n    long long int N = (m+n)/2;\n    long long int O = (m+n)/2;\n\
    \    long long int P = (m+n)/2;\n    long long int Q = (m+n)/2;\n    long long\
    \ int R = (m+n)/2;\n    long long int S = (m+n)/2;\n    long long int T = (m+n)/2;\n\
    \    long long int U = (m+n)/2;\n    long long int V = (m+n)/2;\n    long long\
    \ int W = (m+n)/2;\n    long long int X = (m+n)/2;\n    long long int Y = (",
  "    long long start1 = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n\
    \    long long start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n\
    \    long long length = end1 - start1 + end2 - start2;\n    if (length < 2) {\n\
    \        return \"NO\";\n    }\n    long long startIntersection = start1 + start2;\n\
    \    long long endIntersection = end1 - end2;\n    long long startIntersection1\
    \ = start1 + end2;\n    long long endIntersection1 = end1 - start2;\n    long\
    \ long startIntersection2 = start2 - start1;\n    long long endIntersection2 =\
    \ end2 - end1;\n    long long startIntersection3 = start2 - end1;\n    long long\
    \ endIntersection3 = end2 - start1;\n    long long startIntersection4 = start1\
    \ - start2;\n    long long endIntersection4 = end1 - end2;\n    long long startIntersection5\
    \ = start1 - end2;\n    long long endIntersection5 = end1 - start2;\n    long\
    \ long startIntersection6 = start2 - start1;\n    long long endIntersection6 =\
    \ end2 - end1;\n    long long startIntersection7 = start2 - end1;\n    long long\
    \ endIntersection7 = end2 - start1;\n    long long startIntersection8 = start1\
    \ - start2;\n    long long endIntersection8 = end1 - end2;\n    long long startIntersection9\
    \ = start1 - end2;\n    long long endIntersection9 = end1 - start2;\n    long\
    \ long startIntersection10 = start2 - start1;\n    long long endIntersection10\
    \ = end2 - end1;\n    long long startIntersection11 = start2 - end1;\n    long\
    \ long endIntersection11 = end2 - start1;\n    long long startIntersection12 =\
    \ start1 - start2;\n    long long endIntersection12 = end1 - end2;\n    long long\
    \ startIntersection13 = start1 - end2;\n    long long endIntersection13 = end1\
    \ - start2;\n    long long startIntersection14 = start2 - start1;\n    long long\
    \ endIntersection14 = end2 - end1;\n    long long startIntersection15 = start2\
    \ - end1;\n    long long endIntersection15 = end2 - start1;\n    long long startIntersection16\
    \ = start1 - start2;\n    long long endIntersection16 = end1 - end2;\n    long\
    \ long startIntersection17 = start1 - end2;\n    long long endIntersection17 =\
    \ end1 - start", "    long long start1 = std::get<0>(interval1);\n    long long\
    \ end1 = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end1 - start1;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length == length2) {\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (start1 < start2)\
    \ {\n            std::swap(start1, start2);\n        }\n        if (end1 > end2)\
    \ {\n            std::swap(end1, end2);\n        }\n        long long start3 =\
    \ start1 + 1;\n        long long end3 = end1 - 1;\n        long long start4 =\
    \ start2 + 1;\n        long long end4 = end2 - 1;\n        if (start3 < start4\
    \ && end3 > end4) {\n            return \"YES\";\n        }\n        if (start3\
    \ < start4 && end3 <= end4) {\n            return \"NO\";\n        }\n       \
    \ if (start3 > start4 && end3 <= end4) {\n            return \"NO\";\n       \
    \ }\n        if (start3 > start4 && end3 > end4) {\n            return \"YES\"\
    ;\n        }\n    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    long long inter = length * length2;\n\
    \    if (inter % 2 == 0) {\n        return \"NO\";\n    }\n    long long prime\
    \ = inter / 2;\n    if (prime == 1) {\n        return \"YES\";\n    }\n    if\
    \ (prime == 0) {\n        return \"NO\";\n    }\n    if (prime == 2) {\n     \
    \   return \"YES\";\n    }\n    if (prime == 3) {\n        return \"YES\";\n \
    \   }\n    if (prime == 5) {\n        return \"YES\";\n    }\n    if (prime ==\
    \ 7) {\n        return \"YES\";\n    }\n    if (prime == 11) {\n        return\
    \ \"YES\";\n    }\n    if (prime == 13) {\n        return \"YES\";\n    }\n  \
    \  if (prime == 17) {\n        return \"YES\";\n    }\n    if (prime == 19) {\n\
    \        return \"YES\";\n    }\n    if (prime == 23) {\n        return \"YES\"\
    ;\n    }\n    if (prime == 29) {\n        return \"YES\";\n    }\n    if (prime\
    \ == 31) {\n        return \"YES\";\n    }\n    if (prime == 37) {\n        return\
    \ \"YES\";\n    }\n    if (prime == 43) {\n        return \"YES\";\n    }\n  \
    \  if (prime == 47) {\n        return \"YES\";\n    }\n    if (prime == 53) {\n\
    \        return \"YES\";\n    }\n    if (prime == 59) {\n        return \"YES\"\
    ;\n    }\n    if (prime == 61) {\n        return \"YES\";\n    }\n    if (prime\
    \ == 67) {\n        return \"YES\";\n    }\n    if (prime == 73) {\n        return\
    \ \"YES\";\n    }\n    if (prime == 79) {\n        return \"YES\";\n    }\n  \
    \  if (prime == 83) {\n        return \"YES\";\n    }\n    if (prime == 89) {\n\
    \        return \"YES\";\n    }\n    if (prime == 97) {\n        return \"YES\"\
    ;\n    }\n    if (prime == 101) {\n        return \"YES\";\n    }\n    if (prime\
    \ == 103) {\n        return \"YES\";\n    }\n    if (prime == 107) {\n       \
    \ return \"YES\";\n    }\n    if (prime == 109) {\n        return \"YES\";\n \
    \   }\n    if (prime == 113) {\n        return \"YES\";\n    }\n    if (prime\
    \ == 117) {\n        return \"YES\";\n    }\n    if (prime == 121) {\n       \
    \ return \"YES\";\n    }\n    if (prime == 123) {\n        return \"YES\";\n \
    \   }\n    if (prime == 127) {\n", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2)\
    \ {\n        return \"NO\";\n    }\n    if (start == start2 && end == end2) {\n\
    \        return \"YES\";\n    }\n    long long length = 0;\n    long long length2\
    \ = 0;\n    long long length3 = 0;\n    long long length4 = 0;\n    long long\
    \ length5 = 0;\n    long long length6 = 0;\n    long long length7 = 0;\n    long\
    \ long length8 = 0;\n    long long length9 = 0;\n    long long length10 = 0;\n\
    \    long long length11 = 0;\n    long long length12 = 0;\n    long long length13\
    \ = 0;\n    long long length14 = 0;\n    long long length15 = 0;\n    long long\
    \ length16 = 0;\n    long long length17 = 0;\n    long long length18 = 0;\n  \
    \  long long length19 = 0;\n    long long length20 = 0;\n    long long length21\
    \ = 0;\n    long long length22 = 0;\n    long long length23 = 0;\n    long long\
    \ length24 = 0;\n    long long length25 = 0;\n    long long length26 = 0;\n  \
    \  long long length27 = 0;\n    long long length28 = 0;\n    long long length29\
    \ = 0;\n    long long length30 = 0;\n    long long length31 = 0;\n    long long\
    \ length32 = 0;\n    long long length33 = 0;\n    long long length34 = 0;\n  \
    \  long long length35 = 0;\n    long long length36 = 0;\n    long long length37\
    \ = 0;\n    long long length38 = 0;\n    long long length39 = 0;\n    long long\
    \ length40 = 0;\n    long long length41 = 0;\n    long long length42 = 0;\n  \
    \  long long length43 = 0;\n    long long length44 = 0;\n    long long length45\
    \ = 0;\n    long long length46 = 0;\n    long long length47 = 0;\n    long long\
    \ length48 = 0;\n    long long length49 = 0;\n    long long length50 = 0;\n  \
    \  long long length51 = 0;\n    long long length52 = 0;\n    long long length53\
    \ = 0;\n    long long length54 = 0;\n    long long length55 = 0;\n    long long\
    \ length56 = 0;\n    long long length57", "    long long int start1 = interval1.get<0>();\n\
    \    long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1 < end2 ? start1 : end2;\n    long long int endIntersection = start1\
    \ < end2 ? end1 : start2;\n    long long int startIntersection2 = start2 < end1\
    \ ? start2 : end1;\n    long long int endIntersection2 = start2 < end1 ? end2\
    \ : start1;\n    long long int startIntersection3 = start1 < end2 ? start2 : end1;\n\
    \    long long int endIntersection3 = start1 < end2 ? end2 : start1;\n    long\
    \ long int startIntersection4 = start2 < end1 ? start1 : end2;\n    long long\
    \ int endIntersection4 = start2 < end1 ? end1 : start2;\n    long long int startIntersection5\
    \ = start1 < end2 ? start1 : end2;\n    long long int endIntersection5 = start1\
    \ < end2 ? end1 : start2;\n    long long int startIntersection6 = start2 < end1\
    \ ? start1 : end2;\n    long long int endIntersection6 = start2 < end1 ? end1\
    \ : start2;\n    long long int startIntersection7 = start1 < end2 ? start1 : end2;\n\
    \    long long int endIntersection7 = start1 < end2 ? end1 : start2;\n    long\
    \ long int startIntersection8 = start2 < end1 ? start1 : end2;\n    long long\
    \ int endIntersection8 = start2 < end1 ? end1 : start2;\n    long long int startIntersection9\
    \ = start1 < end2 ? start1 : end2;\n    long long int endIntersection9 = start1\
    \ < end2 ? end1 : start2;\n    long long int startIntersection10 = start2 < end1\
    \ ? start1 : end2;\n    long long int endIntersection10 = start2 < end1 ? end1\
    \ : start2;\n    long long int startIntersection11 = start1 < end2 ? start1 :\
    \ end2;\n    long long int endIntersection11 = start1 < end2 ? end1 : start2;\n\
    \    long long int startIntersection12 = start2 < end1 ? start1 : end2;\n    long\
    \ long int endIntersection12 = start2 < end1 ? end1 : start2;\n    long long int\
    \ startIntersection13 = start1 < end2 ? start1 : end2;\n    long long int endIntersection13\
    \ = start1 < end2 ? end1 : start2;\n    long ", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long length = end - start;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    long long prime_number = 0;\n    for (long\
    \ long i = 2; i <= length; ++i) {\n        if (length % i == 0) {\n          \
    \  prime_number = i;\n            break;\n        }\n    }\n    if (prime_number\
    \ == 0) {\n        return \"NO\";\n    }\n    if (start < prime_number) {\n  \
    \      return \"NO\";\n    }\n    return \"YES\";", "    long long int start =\
    \ std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n \
    \   long long int start2 = std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2 && end > end2) {\n        return \"NO\";\n    }\n\
    \    if (start > start2 && end < end2) {\n        return \"NO\";\n    }\n    if\
    \ (start < start2 && end > end2) {\n        return \"NO\";\n    }\n    if (start\
    \ < start2 && end < end2) {\n        return \"YES\";\n    }\n    if (start ==\
    \ start2 && end == end2) {\n        return \"YES\";\n    }\n    return \"NO\";",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 > length) {\n        return \"NO\";\n    }\n    if (length2 ==\
    \ length) {\n        return \"YES\";\n    }\n    long long a = length / length2;\n\
    \    long long b = length2 / length2;\n    long long c = length / length2;\n \
    \   long long d = length2 / length2;\n    long long e = length / length2;\n  \
    \  long long f = length2 / length2;\n    long long g = length / length2;\n   \
    \ long long h = length2 / length2;\n    long long i = length / length2;\n    long\
    \ long j = length2 / length2;\n    long long k = length / length2;\n    long long\
    \ l = length2 / length2;\n    long long m = length / length2;\n    long long n\
    \ = length2 / length2;\n    long long o = length / length2;\n    long long p =\
    \ length2 / length2;\n    long long q = length / length2;\n    long long r = length2\
    \ / length2;\n    long long s = length / length2;\n    long long t = length2 /\
    \ length2;\n    long long u = length / length2;\n    long long v = length2 / length2;\n\
    \    long long w = length / length2;\n    long long x = length2 / length2;\n \
    \   long long y = length / length2;\n    long long z = length2 / length2;\n  \
    \  long long A = length / length2;\n    long long B = length2 / length2;\n   \
    \ long long C = length / length2;\n    long long D = length2 / length2;\n    long\
    \ long E = length / length2;\n    long long F = length2 / length2;\n    long long\
    \ G = length / length2;\n    long long H = length2 / length2;\n    long long I\
    \ = length / length2;\n    long long J = length2 / length2;\n    long long K =\
    \ length / length2;\n    long long L = length2 / length2;\n    long long M = length\
    \ / length2;\n    long long N = length2 / length2;\n    long long O = length /\
    \ length2;\n    long long P = length2 / length2;\n    long long Q = length / length2;\n\
    \    long long R = length2 / length2;\n    long long S = length / length2;\n \
    \   long long T = length2 / length2;\n    ", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2)\
    \ {\n        return \"NO\";\n    }\n    if (end < end2) {\n        return \"NO\"\
    ;\n    }\n    long long mid = start + (end - start) / 2;\n    if (mid == start2)\
    \ {\n        return \"YES\";\n    }\n    if (mid < start2) {\n        return \"\
    NO\";\n    }\n    if (mid > end2) {\n        return \"NO\";\n    }\n    if (mid\
    \ < end) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long long\
    \ int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = start1 < end2 ? start1 : end2;\n    long\
    \ long int endIntersection = start1 < end2 ? end2 : start1;\n    long long int\
    \ endIntersection1 = end1 < start2 ? end1 : start2;\n    long long int endIntersection2\
    \ = end1 < start2 ? start2 : end1;\n    long long int startIntersection1 = start1\
    \ < end2 ? start2 : end1;\n    long long int startIntersection2 = start1 < end2\
    \ ? end1 : start2;\n    long long int endIntersection11 = end1 < start2 ? start2\
    \ : end1;\n    long long int endIntersection12 = end1 < start2 ? end1 : start2;\n\
    \    long long int startIntersection11 = start1 < end2 ? start1 : end2;\n    long\
    \ long int startIntersection12 = start1 < end2 ? end1 : start2;\n    long long\
    \ int endIntersection21 = end1 < start2 ? end2 : start1;\n    long long int endIntersection22\
    \ = end1 < start2 ? start2 : end1;\n    long long int startIntersection21 = start1\
    \ < end2 ? end2 : start1;\n    long long int startIntersection22 = start1 < end2\
    \ ? start2 : end1;\n    long long int endIntersection31 = end1 < start2 ? end2\
    \ : start1;\n    long long int endIntersection32 = end1 < start2 ? start2 : end1;\n\
    \    long long int startIntersection31 = start1 < end2 ? end2 : start1;\n    long\
    \ long int startIntersection32 = start1 < end2 ? start2 : end1;\n    long long\
    \ int endIntersection41 = end1 < start2 ? end2 : start1;\n    long long int endIntersection42\
    \ = end1 < start2 ? start2 : end1;\n    long long int startIntersection41 = start1\
    \ < end2 ? end2 : start1;\n    long long int startIntersection42 = start1 < end2\
    \ ? start2 : end1;\n    long long int endIntersection51 = end1 < start2 ? end2\
    \ : start1;\n    long long int endIntersection52 = end1 < start2 ? start2 : end1;\n\
    \    long long int startIntersection51 = start1 < end2 ? ", "    long long start1\
    \ = std::get<0>(interval1);\n    long long end1 = std::get<1>(interval1);\n  \
    \  long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end1 - start1 + end2 - start2;\n    if (length < 2) {\n\
    \        return \"NO\";\n    }\n    long long ans = 1;\n    for (long long i =\
    \ start1; i <= end1; i++) {\n        for (long long j = start2; j <= end2; j++)\
    \ {\n            if (i == j) {\n                continue;\n            }\n   \
    \         if (i % j == 0) {\n                ans *= i;\n            }\n      \
    \  }\n    }\n    if (ans == 1) {\n        return \"YES\";\n    }\n    return \"\
    NO\";", "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    long\
    \ long ans = length * length2;\n    long long prime = 1;\n    long long prime2\
    \ = 1;\n    long long prime3 = 1;\n    long long prime4 = 0;\n    long long prime5\
    \ = 0;\n    long long prime6 = 0;\n    long long prime7 = 0;\n    long long prime8\
    \ = 0;\n    long long prime9 = 0;\n    long long prime10 = 0;\n    long long prime11\
    \ = 0;\n    long long prime12 = 0;\n    long long prime13 = 0;\n    long long\
    \ prime14 = 0;\n    long long prime15 = 0;\n    long long prime16 = 0;\n    long\
    \ long prime17 = 0;\n    long long prime18 = 0;\n    long long prime19 = 0;\n\
    \    long long prime20 = 0;\n    long long prime21 = 0;\n    long long prime22\
    \ = 0;\n    long long prime23 = 0;\n    long long prime24 = 0;\n    long long\
    \ prime25 = 0;\n    long long prime26 = 0;\n    long long prime27 = 0;\n    long\
    \ long prime28 = 0;\n    long long prime29 = 0;\n    long long prime30 = 0;\n\
    \    long long prime31 = 0;\n    long long prime32 = 0;\n    long long prime33\
    \ = 0;\n    long long prime34 = 0;\n    long long prime35 = 0;\n    long long\
    \ prime36 = 0;\n    long long prime37 = 0;\n    long long prime38 = 0;\n    long\
    \ long prime39 = 0;\n    long long prime40 = 0;\n    long long prime41 = 0;\n\
    \    long long prime42 = 0;\n    long long prime43 = 0;\n    long long prime44\
    \ = 0;\n    long long prime45 = 0;\n    long long prime46 = 0;\n    long long\
    \ prime47 = 0;\n    long long prime48 = 0;\n    long long prime49 = 0;\n    long\
    \ long prime50 = 0;\n    long long prime51 = 0;\n    long long prime52 = 0;\n\
    \    long long prime53 = 0;\n    long long prime54 = 0;\n    long long prime55\
    \ = 0;\n    long long prime56 = 0;\n    long long prime57 = 0;\n    long long\
    \ prime58 = 0;\n    long long prime59 = 0;\n    long long prime60 = 0;\n    long\
    \ long prime", "    long long int start = std::get<0>(interval1);\n    long long\
    \ int end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n   \
    \ end = std::get<1>(interval2);\n    long long int length = end - start;\n   \
    \ if (length == 1) {\n        return \"NO\";\n    }\n    long long int mid = start\
    \ + (end - start) / 2;\n    long long int leftLength = std::get<0>(intersection(std::make_tuple(start,\
    \ mid), std::make_tuple(mid, end)));\n    long long int rightLength = std::get<1>(intersection(std::make_tuple(mid,\
    \ end), std::make_tuple(start, mid)));\n    if (leftLength == rightLength) {\n\
    \        return \"YES\";\n    }\n    if (leftLength > rightLength) {\n       \
    \ return \"NO\";\n    }\n    return \"YES\";", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int startIntersection = start1 < end2 ? start1 : start2;\n    long\
    \ long int endIntersection = start1 < end2 ? end1 : end2;\n    long long int startIntersection2\
    \ = start2 < end1 ? start2 : start1;\n    long long int endIntersection2 = start2\
    \ < end1 ? end2 : end1;\n    long long int startIntersection3 = start1 < end2\
    \ ? start2 : start1;\n    long long int endIntersection3 = start1 < end2 ? end2\
    \ : end1;\n    long long int startIntersection4 = start2 < end1 ? start1 : start2;\n\
    \    long long int endIntersection4 = start2 < end1 ? end1 : end2;\n    long long\
    \ int startIntersection5 = start1 < end2 ? start1 : start2;\n    long long int\
    \ endIntersection5 = start1 < end2 ? end1 : end2;\n    long long int startIntersection6\
    \ = start2 < end1 ? start2 : start1;\n    long long int endIntersection6 = start2\
    \ < end1 ? end1 : end2;\n    long long int startIntersection7 = start1 < end2\
    \ ? start1 : start2;\n    long long int endIntersection7 = start1 < end2 ? end1\
    \ : end2;\n    long long int startIntersection8 = start2 < end1 ? start2 : start1;\n\
    \    long long int endIntersection8 = start2 < end1 ? end1 : end2;\n    long long\
    \ int startIntersection9 = start1 < end2 ? start1 : start2;\n    long long int\
    \ endIntersection9 = start1 < end2 ? end1 : end2;\n    long long int startIntersection10\
    \ = start2 < end1 ? start2 : start1;\n    long long int endIntersection10 = start2\
    \ < end1 ? end1 : end2;\n    long long int startIntersection11 = start1 < end2\
    \ ? start1 : start2;\n    long long int endIntersection11 = start1 < end2 ? end1\
    \ : end2;\n    long long int startIntersection12 = start2 < end1 ? start2 : start1;\n\
    \    long long int endIntersection12 = start2 < end1 ? end1 : end2;\n    long\
    \ long int startIntersection13 = start1 < end2 ? start1 : start2;\n    long long\
    \ int endIntersection13 = start1 < end2 ? end1 : end", "    long long start =\
    \ std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n    long\
    \ long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    if (start\
    \ == start2) {\n        long long mid = start + (end - start) / 2;\n        if\
    \ (mid == start2) {\n            return \"YES\";\n        }\n        if (mid >\
    \ start2) {\n            return \"NO\";\n        }\n        if (mid < start2)\
    \ {\n            return \"YES\";\n        }\n    }\n    if (end > end2) {\n  \
    \      return \"NO\";\n    }\n    if (end == end2) {\n        long long mid =\
    \ end + (end - end2) / 2;\n        if (mid == end2) {\n            return \"YES\"\
    ;\n        }\n        if (mid > end2) {\n            return \"NO\";\n        }\n\
    \        if (mid < end2) {\n            return \"YES\";\n        }\n    }\n  \
    \  return \"NO\";", "    long long int start1 = interval1.get<0>();\n    long\
    \ long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int start = std::min(start1,\
    \ start2);\n    long long int end = std::max(end1, end2);\n    long long int length\
    \ = end - start;\n    if (length == 0) return \"NO\";\n    long long int prime\
    \ = 1;\n    for (long long int i = 2; i <= length; ++i) {\n        if (length\
    \ % i == 0) {\n            prime = 0;\n            break;\n        }\n    }\n\
    \    if (prime) return \"YES\";\n    return \"NO\";", "    long long int l1 =\
    \ std::get<0>(interval1);\n    long long int l2 = std::get<0>(interval2);\n  \
    \  long long int r1 = std::get<1>(interval1);\n    long long int r2 = std::get<1>(interval2);\n\
    \    long long int l3 = l1 + l2;\n    long long int r3 = r1 + r2;\n    long long\
    \ int l4 = l3 + l3;\n    long long int r4 = r3 + r3;\n    long long int l5 = l4\
    \ + l4;\n    long long int r5 = r4 + r4;\n    long long int l6 = l5 + l5;\n  \
    \  long long int r6 = r5 + r5;\n    long long int l7 = l6 + l6;\n    long long\
    \ int r7 = r6 + r6;\n    long long int l8 = l7 + l7;\n    long long int r8 = r7\
    \ + r7;\n    long long int l9 = l8 + l8;\n    long long int r9 = r8 + r8;\n  \
    \  long long int l10 = l9 + l9;\n    long long int r10 = r9 + r9;\n    long long\
    \ int l11 = l10 + l10;\n    long long int r11 = r10 + r10;\n    long long int\
    \ l12 = l11 + l11;\n    long long int r12 = r11 + r11;\n    long long int l13\
    \ = l12 + l12;\n    long long int r13 = r12 + r12;\n    long long int l14 = l13\
    \ + l13;\n    long long int r14 = r13 + r13;\n    long long int l15 = l14 + l14;\n\
    \    long long int r15 = r14 + r14;\n    long long int l16 = l15 + l15;\n    long\
    \ long int r16 = r15 + r15;\n    long long int l17 = l16 + l16;\n    long long\
    \ int r17 = r16 + r16;\n    long long int l18 = l17 + l17;\n    long long int\
    \ r18 = r17 + r17;\n    long long int l19 = l18 + l18;\n    long long int r19\
    \ = r18 + r18;\n    long long int l20 = l19 + l19;\n    long long int r20 = r19\
    \ + r19;\n    long long int l21 = l20 + l20;\n    long long int r21 = ", "   \
    \ long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == 1)\
    \ {\n        return \"YES\";\n    }\n    long long mid = start + (end - start)\
    \ / 2;\n    long long mid2 = start2 + (end2 - start2) / 2;\n    if (mid == mid2)\
    \ {\n        return \"YES\";\n    }\n    if (mid > mid2) {\n        return \"\
    NO\";\n    }\n    if (mid < mid2) {\n        return \"YES\";\n    }\n    long\
    \ long mid3 = mid + (mid2 - mid) / 2;\n    long long mid4 = mid2 + (mid2 - mid2)\
    \ / 2;\n    if (mid3 == mid4) {\n        return \"YES\";\n    }\n    if (mid3\
    \ > mid4) {\n        return \"NO\";\n    }\n    if (mid3 < mid4) {\n        return\
    \ \"YES\";\n    }\n    long long mid5 = mid3 + (mid4 - mid3) / 2;\n    long long\
    \ mid6 = mid4 + (mid4 - mid4) / 2;\n    if (mid5 == mid6) {\n        return \"\
    YES\";\n    }\n    if (mid5 > mid6) {\n        return \"NO\";\n    }\n    if (mid3\
    \ < mid6) {\n        return \"YES\";\n    }\n    long long mid7 = mid5 + (mid6\
    \ - mid5) / 2;\n    long long mid8 = mid6 + (mid6 - mid6) / 2;\n    if (mid7 ==\
    \ mid8) {\n        return \"YES\";\n    }\n    if (mid7 > mid8) {\n        return\
    \ \"NO\";\n    }\n    if (mid5 < mid8) {\n        return \"YES\";\n    }\n   \
    \ long long mid9 = mid7 + (mid8 - mid7) / 2;\n    long long mid10 = mid8 + (mid8\
    \ - mid8) / 2;\n    if (mid9 == mid10) {\n        return \"YES\";\n    }\n   \
    \ if (mid9 > mid10) {\n        return \"NO\";\n    }\n    if (mid7 < mid10) {\n\
    \        return \"YES\";\n    }\n    long long mid11 = mid9 + (mid10 - mid9) /\
    \ 2;\n    long long mid12 = mid10 + (mid10 - mid10) / 2;\n    if (", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    if (length < length2)\
    \ {\n        long long temp = start;\n        start = end2;\n        end2 = temp;\n\
    \    }\n    long long ans = 0;\n    long long i = start;\n    long long j = start2;\n\
    \    while (i <= end && j <= end2) {\n        if (i == j) {\n            ans +=\
    \ 1;\n        }\n        i += 1;\n        j += 1;\n    }\n    if (ans == length)\
    \ {\n        return \"YES\";\n    }\n    return \"NO\";", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    if (length < length2)\
    \ {\n        std::swap(length, length2);\n    }\n    long long mid = length /\
    \ 2;\n    long long mid2 = length2 / 2;\n    if (mid == mid2) {\n        return\
    \ \"NO\";\n    }\n    if (mid < mid2) {\n        std::swap(mid, mid2);\n    }\n\
    \    long long a = start;\n    long long b = start;\n    long long c = end;\n\
    \    long long d = end;\n    long long a2 = start2;\n    long long b2 = start2;\n\
    \    long long c2 = end2;\n    long long d2 = end2;\n    while (b <= mid) {\n\
    \        while (a2 <= mid2) {\n            while (b2 <= mid2) {\n            \
    \    while (c2 <= mid2) {\n                    while (d2 <= mid2) {\n        \
    \                if (b2 <= mid2 && c2 <= mid2 && d2 <= mid2) {\n             \
    \               if (a2 <= mid2 && b2 <= mid2 && c2 <= mid2 && d2 <= mid2) {\n\
    \                                if (a2 <= mid2 && b2 <= mid2 && c2 <= mid2 &&\
    \ d2 <= mid2) {\n                                    if (a2 <= mid2 && b2 <= mid2\
    \ && c2 <= mid2 && d2 <= mid2) {\n                                        return\
    \ \"YES\";\n                                    }\n                          \
    \      }\n                            }\n                        }\n         \
    \               d2++;\n                    }\n                    c2++;\n    \
    \            }\n                b2++;\n            }\n            a2++;\n    \
    \    }\n        b++;\n    }\n    return \"NO\";", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    if (start > start2) {\n        return\
    \ \"NO\";\n    }\n    if (end < end2) {\n        return \"NO\";\n    }\n    if\
    \ (start == start2 && end == end2) {\n        return \"YES\";\n    }\n    long\
    \ mid = start + (end - start) / 2;\n    if (mid == start2) {\n        return \"\
    YES\";\n    }\n    if (mid == end2) {\n        return \"YES\";\n    }\n    if\
    \ (mid % 2 == 0) {\n        return \"NO\";\n    }\n    long mid2 = start2 + (end2\
    \ - start2) / 2;\n    if (mid2 == start2) {\n        return \"YES\";\n    }\n\
    \    if (mid2 == end2) {\n        return \"YES\";\n    }\n    if (mid2 % 2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    long mid3 = mid / 2;\n    if (mid3\
    \ == start2) {\n        return \"YES\";\n    }\n    if (mid3 == end2) {\n    \
    \    return \"YES\";\n    }\n    if (mid3 % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    long mid4 = mid3 / 2;\n    if (mid4 == start2) {\n        return \"\
    YES\";\n    }\n    if (mid4 == end2) {\n        return \"YES\";\n    }\n    if\
    \ (mid4 % 2 == 0) {\n        return \"NO\";\n    }\n    long mid5 = mid4 / 2;\n\
    \    if (mid5 == start2) {\n        return \"YES\";\n    }\n    if (mid5 == end2)\
    \ {\n        return \"YES\";\n    }\n    if (mid5 % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    long mid6 = mid5 / 2;\n    if (mid6 == start2) {\n     \
    \   return \"YES\";\n    }\n    if (mid6 == end2) {\n        return \"YES\";\n\
    \    }\n    if (mid6 % 2 == 0) {\n        return \"NO\";\n    }\n    long mid7\
    \ = mid6 / 2;\n    if (mid7 == start2) {\n        return \"YES\";\n    }\n   \
    \ if (mid7 == end2) {\n        return \"YES\";\n    }\n    if (mid7 % 2 == 0)\
    \ {\n        return \"NO\";\n    }\n    long mid8 = mid7 / 2;\n    if (mid8 ==\
    \ start2) {\n        return \"YES\";\n    }\n    if (mid8 == end2) {\n       \
    \ return \"YES\";\n    }\n    if (mid8 % 2 == 0) {\n        return \"NO\";\n \
    \   }\n", "    long long int start1 = std::get<0>(interval1);\n    long long int\
    \ end1 = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int start = std::max(start1,\
    \ start2);\n    long long int end = std::min(end1, end2);\n    long long int length\
    \ = end - start;\n    if (length == 0) return \"NO\";\n    long long int prime\
    \ = std::sqrt(length);\n    if (length == prime) return \"YES\";\n    return \"\
    NO\";", "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long length\
    \ = end - start;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    long long mid = start +\
    \ (end - start) / 2;\n    long long mid1 = std::get<0>(std::make_tuple(mid, mid));\n\
    \    long long mid2 = std::get<1>(std::make_tuple(mid, mid));\n    if (mid1 <\
    \ mid2) {\n        std::swap(mid1, mid2);\n    }\n    long long mid3 = std::get<0>(std::make_tuple(mid,\
    \ mid));\n    long long mid4 = std::get<1>(std::make_tuple(mid, mid));\n    if\
    \ (mid3 < mid4) {\n        std::swap(mid3, mid4);\n    }\n    long long mid5 =\
    \ std::get<0>(std::make_tuple(mid, mid));\n    long long mid6 = std::get<1>(std::make_tuple(mid,\
    \ mid));\n    if (mid5 < mid6) {\n        std::swap(mid5, mid6);\n    }\n    long\
    \ long mid7 = std::get<0>(std::make_tuple(mid, mid));\n    long long mid8 = std::get<1>(std::make_tuple(mid,\
    \ mid));\n    if (mid7 < mid8) {\n        std::swap(mid7, mid8);\n    }\n    long\
    \ long mid9 = std::get<0>(std::make_tuple(mid, mid));\n    long long mid10 = std::get<1>(std::make_tuple(mid,\
    \ mid));\n    if (mid9 < mid10) {\n        std::swap(mid9, mid10);\n    }\n  \
    \  long long mid11 = std::get<0>(std::make_tuple(mid, mid));\n    long long mid12\
    \ = std::get<1>(std::make_tuple(mid, mid));\n    if (mid11 < mid12) {\n      \
    \  std::swap(mid11, mid12);\n    }\n    long long mid13 = std::get<0>(std::make_tuple(mid,\
    \ mid));\n    long long mid14 = std::get<1>(std::make_tuple(mid, mid));\n    if\
    \ (mid13 < mid14) {\n        std::swap(mid13, mid14);\n    }\n    long long mid15\
    \ = std::get<0>(std::make_tuple(mid", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start == start2\
    \ && end == end2) {\n        return \"NO\";\n    }\n    long long mid = (start\
    \ + end) / 2;\n    long long mid2 = (start2 + end2) / 2;\n    if (mid == mid2)\
    \ {\n        return \"NO\";\n    }\n    if (mid * mid2 == (start + end) * (start2\
    \ + end2)) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long long\
    \ int start1 = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int start = std::min(start1, start2);\n\
    \    long long int end = std::max(end1, end2);\n    long long int length = end\
    \ - start;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2) {\n        return \"YES\";\n    }\n    long long int start3 = start;\n\
    \    long long int end3 = end;\n    long long int start4 = start;\n    long long\
    \ int end4 = end;\n    long long int start5 = start;\n    long long int end5 =\
    \ end;\n    long long int start6 = start;\n    long long int end6 = end;\n   \
    \ long long int start7 = start;\n    long long int end7 = end;\n    long long\
    \ int start8 = start;\n    long long int end8 = end;\n    long long int start9\
    \ = start;\n    long long int end9 = end;\n    long long int start10 = start;\n\
    \    long long int end10 = end;\n    long long int start11 = start;\n    long\
    \ long int end11 = end;\n    long long int start12 = start;\n    long long int\
    \ end12 = end;\n    long long int start13 = start;\n    long long int end13 =\
    \ end;\n    long long int start14 = start;\n    long long int end14 = end;\n \
    \   long long int start15 = start;\n    long long int end15 = end;\n    long long\
    \ int start16 = start;\n    long long int end16 = end;\n    long long int start17\
    \ = start;\n    long long int end17 = end;\n    long long int start18 = start;\n\
    \    long long int end18 = end;\n    long long int start19 = start;\n    long\
    \ long int end19 = end;\n    long long int start20 = start;\n    long long int\
    \ end20 = end;\n    long long int start21 = start;\n    long long int end21 =\
    \ end;\n    long long int start22 = start;\n    long long int end22 = end;\n \
    \   long long int start23 = start;\n    long long int end23 = end;\n    long long\
    \ int start24 = start;\n    long long int end24 = end;\n    long long int start25\
    \ = start;\n    long long int end25 = end;\n    long long int start26 = start;",
  "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long length = end - start;\n    long length2 = end2 - start2;\n    if (length\
    \ == length2) {\n        if (length == 1) {\n            return \"NO\";\n    \
    \    }\n        if (length == 2) {\n            return \"YES\";\n        }\n \
    \       if (length == 2) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n        \
    \    return \"YES\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2) {\n            return \"YES\";\n      \
    \  }\n        if (length == 2) {\n            return \"YES\";\n        }\n   \
    \     if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n        \
    \    return \"YES\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2) {\n            return \"YES\";\n      \
    \  }\n        if (length == 2) {\n            return \"YES\";\n        }\n   \
    \     if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n        \
    \    return \"YES\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2) {\n            return \"YES\";\n      \
    \  }\n        if (length == 2) {\n            return \"YES\";\n        }\n   \
    \     if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n        \
    \    return \"YES\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2) {\n            return \"YES\";\n      \
    \  }\n        if (length == 2) {\n            return \"YES\";\n        }\n   \
    \     if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n        \
    \    return \"YES\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length < length2) {\n       \
    \ length = length2;\n    }\n    if (length == 0) {\n        return \"NO\";\n \
    \   }\n    long long ans = 1;\n    for (long long i = start; i <= end; i++) {\n\
    \        for (long long j = start2; j <= end2; j++) {\n            if (i == j)\
    \ {\n                continue;\n            }\n            if (i % j == 0) {\n\
    \                ans *= i;\n                ans /= j;\n            }\n       \
    \ }\n    }\n    if (ans == 1) {\n        return \"YES\";\n    }\n    return \"\
    NO\";", "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long length\
    \ = end - start;\n    if (length == 1) {\n        return \"NO\";\n    }\n    long\
    \ long prime_number = 0;\n    long long prime_number_count = 0;\n    long long\
    \ prime_number_count_2 = 0;\n    long long prime_number_count_3 = 0;\n    long\
    \ long prime_number_count_4 = 0;\n    long long prime_number_count_5 = 0;\n  \
    \  long long prime_number_count_6 = 0;\n    long long prime_number_count_7 = 0;\n\
    \    long long prime_number_count_8 = 0;\n    long long prime_number_count_9 =\
    \ 0;\n    long long prime_number_count_10 = 0;\n    long long prime_number_count_11\
    \ = 0;\n    long long prime_number_count_12 = 0;\n    long long prime_number_count_13\
    \ = 0;\n    long long prime_number_count_14 = 0;\n    long long prime_number_count_15\
    \ = 0;\n    long long prime_number_count_16 = 0;\n    long long prime_number_count_17\
    \ = 0;\n    long long prime_number_count_18 = 0;\n    long long prime_number_count_19\
    \ = 0;\n    long long prime_number_count_20 = 0;\n    long long prime_number_count_21\
    \ = 0;\n    long long prime_number_count_22 = 0;\n    long long prime_number_count_23\
    \ = 0;\n    long long prime_number_count_24 = 0;\n    long long prime_number_count_25\
    \ = 0;\n    long long prime_number_count_26 = 0;\n    long long prime_number_count_27\
    \ = 0;\n    long long prime_number_count_28 = 0;\n    long long prime_number_count_29\
    \ = 0;\n    long long prime_number_count_30 = 0;\n    long long prime_number_count_31\
    \ = 0;\n    long long prime_number_count_32 = 0;\n    long long prime_number_count_33\
    \ = 0;\n    long long prime_number_count_34 = 0;\n    long long prime_number_count_35\
    \ = 0;\n    long long prime_number_count_36 = 0;\n    long long prime_number_count_37\
    \ = 0;\n    long long prime_number_count_38 = 0;\n    long long prime_number_count_39\
    \ = 0;\n    long long prime_number_count_40 = 0;\n    long long prime_number_count_41\
    \ = 0;\n    long long prime_number_count_42 = 0;\n    long long prime_number_count_43\
    \ = 0;\n    long long ", "    long long int l1 = std::get<0>(interval1);\n   \
    \ long long int l2 = std::get<0>(interval2);\n    long long int r1 = std::get<1>(interval1);\n\
    \    long long int r2 = std::get<1>(interval2);\n    long long int l3 = l1 + l2;\n\
    \    long long int r3 = r1 + r2;\n    long long int l4 = l3 + l3;\n    long long\
    \ int r4 = r3 + r3;\n    long long int l5 = l4 + l4;\n    long long int r5 = r4\
    \ + r4;\n    long long int l6 = l5 + l5;\n    long long int r6 = r5 + r5;\n  \
    \  long long int l7 = l6 + l6;\n    long long int r7 = r6 + r6;\n    long long\
    \ int l8 = l7 + l7;\n    long long int r8 = r7 + r7;\n    long long int l9 = l8\
    \ + l8;\n    long long int r9 = r8 + r8;\n    long long int l10 = l9 + l9;\n \
    \   long long int r10 = r9 + r9;\n    long long int l11 = l10 + l10;\n    long\
    \ long int r11 = r10 + r10;\n    long long int l12 = l11 + l11;\n    long long\
    \ int r12 = r11 + r11;\n    long long int l13 = l12 + l12;\n    long long int\
    \ r13 = r12 + r12;\n    long long int l14 = l13 + l13;\n    long long int r14\
    \ = r13 + r13;\n    long long int l15 = l14 + l14;\n    long long int r15 = r14\
    \ + r14;\n    long long int l16 = l15 + l15;\n    long long int r16 = r15 + r15;\n\
    \    long long int l17 = l16 + l16;\n    long long int r17 = r16 + r16;\n    long\
    \ long int l18 = l17 + l17;\n    long long int r18 = r17 + r17;\n    long long\
    \ int l19 = l18 + l18;\n    long long int r19 = r18 + r18;\n    long long int\
    \ l20 = l19 + l19;\n    long long int r20 = r19 + r19;\n    long long int l21\
    \ = l20 + l20;\n    long long int r21 = ", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length == 1) {\n        return \"YES\"\
    ;\n    }\n    if (length2 == 1) {\n        return \"YES\";\n    }\n    long long\
    \ mid = start + (length / 2);\n    long long mid2 = start2 + (length2 / 2);\n\
    \    if (mid > mid2) {\n        std::swap(mid, mid2);\n    }\n    long long mid3\
    \ = mid + (length / 2);\n    long long mid4 = mid2 + (length2 / 2);\n    if (mid3\
    \ > mid4) {\n        std::swap(mid3, mid4);\n    }\n    long long mid5 = mid3\
    \ + (length / 2);\n    long long mid6 = mid4 + (length2 / 2);\n    if (mid5 >\
    \ mid6) {\n        std::swap(mid5, mid6);\n    }\n    long long mid7 = mid5 +\
    \ (length / 2);\n    long long mid8 = mid6 + (length2 / 2);\n    if (mid7 > mid8)\
    \ {\n        std::swap(mid7, mid8);\n    }\n    long long mid9 = mid7 + (length\
    \ / 2);\n    long long mid10 = mid8 + (length2 / 2);\n    if (mid9 > mid10) {\n\
    \        std::swap(mid9, mid10);\n    }\n    long long mid11 = mid9 + (length\
    \ / 2);\n    long long mid12 = mid10 + (length2 / 2);\n    if (mid11 > mid12)\
    \ {\n        std::swap(mid11, mid12);\n    }\n    long long mid13 = mid11 + (length\
    \ / 2);\n    long long mid14 = mid12 + (length2 / 2);\n    if (mid13 > mid14)\
    \ {\n        std::swap(mid13, mid14);\n    }\n    long long mid15 = mid13 + (length\
    \ / 2);\n    long long mid16 = mid14 + (length2 / 2);\n    if (mid15 > mid16)\
    \ {\n        std::swap(mid15, mid16);\n    }\n    long long mid17 = mid15 + (length\
    \ / 2);\n    long long mid18 = mid16 + (length2 / 2);\n    if (mid", "    long\
    \ start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n  \
    \  long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long length = end - start;\n    long length2 = end2 - start2;\n    if (length2\
    \ == 0) {\n        return \"NO\";\n    }\n    if (length == length2) {\n     \
    \   return \"YES\";\n    }\n    if (length < length2) {\n        return \"NO\"\
    ;\n    }\n    long mid = length / 2;\n    long mid2 = length2 / 2;\n    long a\
    \ = std::get<0>(interval1);\n    long b = std::get<1>(interval1);\n    long c\
    \ = std::get<0>(interval2);\n    long d = std::get<1>(interval2);\n    long a2\
    \ = std::get<0>(interval1);\n    long b2 = std::get<1>(interval1);\n    long c2\
    \ = std::get<0>(interval2);\n    long d2 = std::get<1>(interval2);\n    if (a\
    \ > b) {\n        std::swap(a, b);\n        std::swap(c, d);\n        std::swap(a2,\
    \ b2);\n        std::swap(c2, d2);\n    }\n    long ans = 1;\n    long ans2 =\
    \ 0;\n    long ans3 = 0;\n    long ans4 = 0;\n    long ans5 = 0;\n    long ans6\
    \ = 0;\n    long ans7 = 0;\n    long ans8 = 0;\n    long ans9 = 0;\n    long ans10\
    \ = 0;\n    long ans11 = 0;\n    long ans12 = 0;\n    long ans13 = 0;\n    long\
    \ ans14 = 0;\n    long ans15 = 0;\n    long ans16 = 0;\n    long ans17 = 0;\n\
    \    long ans18 = 0;\n    long ans19 = 0;\n    long ans20 = 0;\n    long ans21\
    \ = 0;\n    long ans22 = 0;\n    long ans23 = 0;\n    long ans24 = 0;\n    long\
    \ ans25 = 0;\n    long ans26 = 0;\n    long ans27 = 0;\n    long ans28 = 0;\n\
    \    long ans29 = 0;\n    long ans30 = 0;\n    long ans31 = 0;\n    long ans32\
    \ = 0;\n    long ans33 = 0;\n    long ans34 = 0;\n    long ans35 = 0;\n    long\
    \ ans36 = 0;\n    long ans37 = 0;\n    long ans38 = 0;\n    long ans39 = 0;\n\
    \    long ans40 = 0;\n    long ans = 1;\n    long ans2 = 0;\n    long ans3 = 0;\n\
    \    long ans4 = 0;\n    long ans5 = 0;\n    long ans6 = 0;\n    ", "    long\
    \ long int a = interval1.get<0>();\n    long long int b = interval1.get<1>();\n\
    \    long long int c = interval2.get<0>();\n    long long int d = interval2.get<1>();\n\
    \    long long int length = std::max(a, b) - std::min(a, b);\n    long long int\
    \ length2 = std::max(c, d) - std::min(c, d);\n    if (length == 0 || length2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    long long int length3 = length * length;\n\
    \    long long int length4 = length2 * length2;\n    if (length3 <= length4) {\n\
    \        return \"YES\";\n    }\n    return \"NO\";", "    long long int start1\
    \ = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int start = std::min(start1, start2);\n\
    \    long long int end = std::max(end1, end2);\n    long long int length = end\
    \ - start;\n    if (length == 0)\n        return \"NO\";\n    if (length == 1)\n\
    \        return \"YES\";\n    long long int mid = start + (length / 2);\n    long\
    \ long int mid1 = mid - 1;\n    long long int mid2 = mid + 1;\n    long long int\
    \ mid3 = mid + 2;\n    long long int mid4 = mid + 3;\n    long long int mid5 =\
    \ mid + 4;\n    long long int mid6 = mid + 5;\n    long long int mid7 = mid +\
    \ 6;\n    long long int mid8 = mid + 7;\n    long long int mid9 = mid + 8;\n \
    \   long long int mid10 = mid + 9;\n    long long int mid11 = mid + 10;\n    long\
    \ long int mid12 = mid + 11;\n    long long int mid13 = mid + 12;\n    long long\
    \ int mid14 = mid + 13;\n    long long int mid15 = mid + 14;\n    long long int\
    \ mid16 = mid + 15;\n    long long int mid17 = mid + 16;\n    long long int mid18\
    \ = mid + 17;\n    long long int mid19 = mid + 18;\n    long long int mid20 =\
    \ mid + 19;\n    long long int mid21 = mid + 20;\n    long long int mid22 = mid\
    \ + 21;\n    long long int mid23 = mid + 22;\n    long long int mid24 = mid +\
    \ 23;\n    long long int mid25 = mid + 24;\n    long long int mid26 = mid + 25;\n\
    \    long long int mid27 = mid + 26;\n    long long int mid28 = mid + 27;\n  \
    \  long long int mid29 = mid + 28;\n    long long int mid30 = mid + 29;\n    long\
    \ long int mid31 = mid + 30;\n    long long int mid32 = mid + 31;\n    long long\
    \ int mid33 = mid + 32;\n    long long int mid34 = mid + 33;\n    long long int\
    \ mid35 = mid + 34;\n    long long int mid36 = mid + 35;\n    long long int mid37\
    \ = mid + 36;\n    long long ", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length2 == 1) {\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        return \"NO\";\n  \
    \  }\n    long long ans = 1;\n    long long ans2 = 0;\n    long long m = 0;\n\
    \    long long n = 0;\n    long long k = 0;\n    long long l = 0;\n    long long\
    \ m2 = 1;\n    long long n2 = 1;\n    long long k2 = 1;\n    long long l2 = 1;\n\
    \    long long m3 = 1;\n    long long n3 = 1;\n    long long k3 = 1;\n    long\
    \ long l3 = 1;\n    long long m4 = 1;\n    long long n4 = 1;\n    long long k4\
    \ = 1;\n    long long l4 = 1;\n    long long m5 = 1;\n    long long n5 = 1;\n\
    \    long long k5 = 1;\n    long long l5 = 1;\n    long long m6 = 1;\n    long\
    \ long n6 = 1;\n    long long k6 = 1;\n    long long l6 = 1;\n    long long m7\
    \ = 1;\n    long long n7 = 1;\n    long long k7 = 1;\n    long long l7 = 1;\n\
    \    long long m8 = 1;\n    long long n8 = 1;\n    long long k8 = 1;\n    long\
    \ long l8 = 1;\n    long long m9 = 1;\n    long long n9 = 1;\n    long long k9\
    \ = 1;\n    long long l9 = 1;\n    long long m10 = 1;\n    long long n10 = 1;\n\
    \    long long k10 = 1;\n    long long l10 = 1;\n    long long m11 = 1;\n    long\
    \ long n11 = 1;\n    long long k11 = 1;\n    long long l11 = 1;\n    long long\
    \ m12 = 1;\n    long long n12 = 1;\n    long long k12 = 1;\n    long long l12\
    \ = 1;\n    long long m13 = 1;\n    long long n13 = 1;\n    long long k13 = 1;\n\
    \    long long l13 = 1;\n    long long m14 = 1;\n    long long n14 = 1;\n    long\
    \ long k14 = 1;\n    long long l14 = 1;\n    long long m15 = 1;\n    long long\
    \ n15", "    long long int start1 = interval1.get<0>();\n    long long int end1\
    \ = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n    long\
    \ long int end2 = interval2.get<1>();\n    long long int startIntersection = start1\
    \ < end2 ? start1 : end2;\n    long long int endIntersection = start1 < end2 ?\
    \ end2 : start1;\n    long long int endIntersection2 = end1 < start2 ? end1 :\
    \ start2;\n    long long int endIntersection3 = end1 < start2 ? start2 : end1;\n\
    \    long long int endIntersection4 = end1 < end2 ? end2 : start1;\n    long long\
    \ int endIntersection5 = end1 < end2 ? start2 : end1;\n    long long int endIntersection6\
    \ = end1 < end2 ? end2 : start1;\n    long long int endIntersection7 = end1 <\
    \ end2 ? start2 : end1;\n    long long int endIntersection8 = end1 < end2 ? end2\
    \ : start1;\n    long long int endIntersection9 = end1 < end2 ? start2 : end1;\n\
    \    long long int endIntersection10 = end1 < end2 ? end2 : start1;\n    long\
    \ long int endIntersection11 = end1 < end2 ? start2 : end1;\n    long long int\
    \ endIntersection12 = end1 < end2 ? end2 : start1;\n    long long int endIntersection13\
    \ = end1 < end2 ? start2 : end1;\n    long long int endIntersection14 = end1 <\
    \ end2 ? end2 : start1;\n    long long int endIntersection15 = end1 < end2 ? start2\
    \ : end1;\n    long long int endIntersection16 = end1 < end2 ? end2 : start1;\n\
    \    long long int endIntersection17 = end1 < end2 ? start2 : end1;\n    long\
    \ long int endIntersection18 = end1 < end2 ? end2 : start1;\n    long long int\
    \ endIntersection19 = end1 < end2 ? start2 : end1;\n    long long int endIntersection20\
    \ = end1 < end2 ? end2 : start1;\n    long long int endIntersection21 = end1 <\
    \ end2 ? start2 : end1;\n    long long int endIntersection22 = end1 < end2 ? end2\
    \ : start1;\n    long long int endIntersection23 = end1 < end2 ? start2 : end1;\n\
    \    long long int endIntersection24 = end1 < end2 ? end2 : start", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        return\
    \ \"NO\";\n    }\n    long long mid = start + (end - start) / 2;\n    long long\
    \ mid2 = start2 + (end2 - start2) / 2;\n    long long mid3 = mid + mid2;\n   \
    \ long long mid4 = mid3 - mid;\n    long long mid5 = mid4 + mid2;\n    long long\
    \ mid6 = mid5 + mid;\n    long long mid7 = mid6 + mid2;\n    long long mid8 =\
    \ mid7 + mid;\n    long long mid9 = mid8 + mid2;\n    long long mid10 = mid9 +\
    \ mid;\n    long long mid11 = mid10 + mid2;\n    long long mid12 = mid11 + mid;\n\
    \    long long mid13 = mid12 + mid2;\n    long long mid14 = mid13 + mid;\n   \
    \ long long mid15 = mid14 + mid2;\n    long long mid16 = mid15 + mid;\n    long\
    \ long mid17 = mid16 + mid2;\n    long long mid18 = mid17 + mid;\n    long long\
    \ mid19 = mid18 + mid2;\n    long long mid20 = mid19 + mid;\n    long long mid21\
    \ = mid20 + mid2;\n    long long mid22 = mid21 + mid;\n    long long mid23 = mid22\
    \ + mid2;\n    long long mid24 = mid23 + mid;\n    long long mid25 = mid24 + mid2;\n\
    \    long long mid26 = mid25 + mid;\n    long long mid27 = mid26 + mid2;\n   \
    \ long long mid28 = mid27 + mid;\n    long long mid29 = mid28 + mid2;\n    long\
    \ long mid30 = mid29 + mid;\n    long long mid31 = mid30 + mid2;\n    long long\
    \ mid32 = mid31 + mid;\n    long long mid33 = mid32 + mid2;\n    long long mid34\
    \ = mid33 + mid;\n    long long mid35 = mid34 + mid2;\n    ", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    long long mid = (start\
    \ + end) / 2;\n    long long mid2 = start2 + end2;\n    long long mid3 = mid +\
    \ mid2;\n    long long mid4 = mid3 - mid;\n    if (mid2 == mid3 && mid2 == mid4)\
    \ {\n        return \"YES\";\n    }\n    if (mid3 == mid4) {\n        return \"\
    NO\";\n    }\n    if (length < length2) {\n        return \"NO\";\n    }\n   \
    \ return \"YES\";", "    long long start = std::get<0>(interval1);\n    long long\
    \ end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length == length2) {\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        long long mid = start\
    \ + (end - start) / 2;\n        long long mid2 = start2 + (end2 - start2) / 2;\n\
    \        if (mid == mid2) {\n            return \"YES\";\n        }\n        return\
    \ \"NO\";\n    }\n    if (length < length2) {\n        return \"NO\";\n    }\n\
    \    return \"YES\";", "    long start = std::get<0>(interval1);\n    long end\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == 1) {\n        return \"YES\";\n    }\n   \
    \ if (length2 == 1) {\n        return \"YES\";\n    }\n    long mid = (start +\
    \ end) / 2;\n    long mid2 = (start2 + end2) / 2;\n    if (mid == mid2) {\n  \
    \      return \"YES\";\n    }\n    if (mid % length == 0 && mid2 % length2 ==\
    \ 0) {\n        return \"YES\";\n    }\n    if (mid % length == 0 && mid2 % length2\
    \ != 0) {\n        return \"NO\";\n    }\n    if (mid % length != 0 && mid2 %\
    \ length2 == 0) {\n        return \"NO\";\n    }\n    if (mid % length != 0 &&\
    \ mid2 % length2 != 0) {\n        return \"YES\";\n    }\n    return \"NO\";",
  "    long long int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int start = std::min(start1, start2);\n    long long int end =\
    \ std::max(end1, end2);\n    long long int length = end - start;\n    if (length\
    \ == 0)\n        return \"NO\";\n    long long int prime = 1;\n    for (long long\
    \ int i = 2; i <= length / 2; i++) {\n        if (length % i == 0) {\n       \
    \     prime = 0;\n            break;\n        }\n    }\n    if (prime)\n     \
    \   return \"YES\";\n    else\n        return \"NO\";", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long length = end - start;\n   \
    \ long length2 = end2 - start2;\n    if (length == length2) {\n        return\
    \ \"YES\";\n    }\n    if (length < length2) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        length = end - start;\n    }\n\
    \    if (length < length2) {\n        start2 = std::get<0>(interval1);\n     \
    \   end2 = std::get<1>(interval1);\n        length2 = end2 - start2;\n    }\n\
    \    if (length == length2) {\n        return \"NO\";\n    }\n    if (length <\
    \ length2) {\n        start = std::get<0>(interval1);\n        end = std::get<1>(interval1);\n\
    \        length = end - start;\n    }\n    if (length < length2) {\n        start2\
    \ = std::get<0>(interval2);\n        end2 = std::get<1>(interval2);\n        length2\
    \ = end2 - start2;\n    }\n    if (length == length2) {\n        return \"NO\"\
    ;\n    }\n    if (length < length2) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        length = end - start;\n    }\n\
    \    if (length < length2) {\n        start2 = std::get<0>(interval1);\n     \
    \   end2 = std::get<1>(interval1);\n        length2 = end2 - start2;\n    }\n\
    \    if (length == length2) {\n        return \"NO\";\n    }\n    if (length <\
    \ length2) {\n        start = std::get<0>(interval2);\n        end = std::get<1>(interval2);\n\
    \        length = end - start;\n    }\n    if (length < length2) {\n        start2\
    \ = std::get<0>(interval1);\n        end2 = std::get<1>(interval1);\n        length2\
    \ = end2 - start2;\n    }\n    if (length == length2) {\n        return \"NO\"\
    ;\n    }\n    if (length < length2) {\n        start = std::get<0>(interval2);\n\
    \        end = std::get<1>(interval2);\n        length = end - start;\n    }\n\
    \    if (length < length2) {\n        start2 = std::get<0>(interval1);\n     \
    \   end2 = std::get<1>(interval1);\n        length2 = end2 - start2;\n    }\n\
    \    if (length == length2) {\n        return \"NO\";\n    }\n    if (length <\
    \ length2) {\n        start = std::get<0>(interval2);\n        end = std::get<1>(interval2);\n\
    \        length = end - start;\n    }\n    if (length < length2) {\n", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    if (end\
    \ < end2) {\n        return \"NO\";\n    }\n    if (start == start2 && end ==\
    \ end2) {\n        return \"YES\";\n    }\n    long long mid = (start + end) /\
    \ 2;\n    long long mid2 = (start2 + end2) / 2;\n    if (mid == mid2) {\n    \
    \    return \"YES\";\n    }\n    if (mid > mid2) {\n        return \"NO\";\n \
    \   }\n    if (mid < mid2) {\n        return \"NO\";\n    }\n    long long len1\
    \ = end - start;\n    long long len2 = end2 - start2;\n    if (len1 < len2) {\n\
    \        return \"NO\";\n    }\n    if (len1 > len2) {\n        return \"NO\"\
    ;\n    }\n    long long len = (len1 + len2) / 2;\n    long long len2 = len % 2\
    \ == 0 ? len / 2 : len / 2 + 1;\n    long long len3 = len % 2 == 0 ? len / 2 :\
    \ len / 2 + 1;\n    long long len4 = len % 2 == 0 ? len / 2 : len / 2 + 1;\n \
    \   long long len5 = len % 2 == 0 ? len / 2 : len / 2 + 1;\n    long long len6\
    \ = len % 2 == 0 ? len / 2 : len / 2 + 1;\n    long long len7 = len % 2 == 0 ?\
    \ len / 2 : len / 2 + 1;\n    long long len8 = len % 2 == 0 ? len / 2 : len /\
    \ 2 + 1;\n    long long len9 = len % 2 == 0 ? len / 2 : len / 2 + 1;\n    long\
    \ long len10 = len % 2 == 0 ? len / 2 : len / 2 + 1;\n    long long len11 = len\
    \ % 2 == 0 ? len / 2 : len / 2 + 1;\n    long long len12 = len % 2 == 0 ? len\
    \ / 2 : len / 2 + 1;\n    long long len13 = len % 2 == 0 ? len / 2 : len / 2 +\
    \ 1;\n    long long len14 = len % 2 == 0 ? len / 2 : len / 2 + 1;\n    long long\
    \ len15 = len % 2 == 0 ? len / 2 : len / 2 + 1;\n    long long len16 = len % 2\
    \ == 0 ? len / 2 : len / 2 + 1;\n    long long len17 = len", "    long long int\
    \ start1 = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int start = std::min(start1, start2);\n\
    \    long long int end = std::max(end1, end2);\n    long long int length = end\
    \ - start;\n    if (length == 0) return \"NO\";\n    if (length == 1) return \"\
    YES\";\n    if (length == 2 && start % 2 == 0 && end % 2 == 0) return \"YES\"\
    ;\n    if (length == 2 && start % 2 == 0 && end % 2 == 1) return \"NO\";\n   \
    \ if (length == 3 && start % 3 == 0 && end % 3 == 0) return \"YES\";\n    if (length\
    \ == 3 && start % 3 == 0 && end % 3 == 1) return \"NO\";\n    if (length == 3\
    \ && start % 3 == 1 && end % 3 == 0) return \"NO\";\n    if (length == 3 && start\
    \ % 3 == 1 && end % 3 == 1) return \"YES\";\n    if (length == 4 && start % 5\
    \ == 0 && end % 5 == 0) return \"YES\";\n    if (length == 4 && start % 5 == 0\
    \ && end % 5 == 1) return \"NO\";\n    if (length == 4 && start % 5 == 1 && end\
    \ % 5 == 0) return \"NO\";\n    if (length == 4 && start % 5 == 1 && end % 5 ==\
    \ 1) return \"YES\";\n    if (length == 5 && start % 7 == 0 && end % 7 == 0) return\
    \ \"YES\";\n    if (length == 5 && start % 7 == 0 && end % 7 == 1) return \"NO\"\
    ;\n    if (length == 5 && start % 7 == 1 && end % 7 == 0) return \"NO\";\n   \
    \ if (length == 5 && start % 7 == 1 && end % 7 == 1) return \"YES\";\n    if (length\
    \ == 7 && start % 11 == 0 && end % 11 == 0) return \"YES\";\n    if (length ==\
    \ 7 && start % 11 == 0 && end % 11 == 1) return \"NO\";\n    if (length == 7 &&\
    \ start % 11 == 1 && end % 11 == 0) return \"NO\";\n    if (length == 7 && start\
    \ % 11 == 1 && end % 11 == 1) return \"YES\";\n    if (length == 11 && start %\
    \ 13 == 0 && end % 13 == 0) return \"YES\";\n    if (length == 11 && start % 13\
    \ == 0 && end % 13 == 1) return \"NO\";\n    if (length == 11 && start % 13 ==\
    \ 1 && end % 13 == 0) return \"NO\";\n    if (length == 11 && start % 13 == 1\
    \ && end % 13 == 1) return \"YES\";\n", "    if (interval1.first > interval1.second)\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (interval2.first\
    \ > interval2.second) {\n        std::swap(interval1, interval2);\n    }\n   \
    \ if (interval1.first > interval2.first) {\n        return \"NO\";\n    }\n  \
    \  if (interval1.second < interval2.second) {\n        return \"NO\";\n    }\n\
    \    if (interval1.second == interval2.second) {\n        return \"YES\";\n  \
    \  }\n    long long start = interval1.first;\n    long long end = interval1.second;\n\
    \    long long inter = end - start;\n    if (inter % 2 == 0) {\n        return\
    \ \"NO\";\n    }\n    long long ans = inter / 2;\n    for (long long i = 2; i\
    \ <= ans; i++) {\n        if (inter % i == 0) {\n            return \"NO\";\n\
    \        }\n    }\n    return \"YES\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length == 0 || length2\
    \ == 0) {\n        return \"NO\";\n    }\n    long long ans = 1;\n    for (long\
    \ long i = 3; i <= length; i += 2) {\n        long long temp = ans;\n        for\
    \ (long long j = 3; j <= length2; j += 2) {\n            if (temp % i == 0 &&\
    \ temp % j == 0) {\n                ans = temp;\n                break;\n    \
    \        }\n        }\n    }\n    if (ans == 1) {\n        return \"YES\";\n \
    \   }\n    return \"NO\";", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int length = end1 - start1 + end2 - start2;\n    if (length < 2)\
    \ {\n        return \"NO\";\n    }\n    long long int mid1 = start1 + end1 / 2;\n\
    \    long long int mid2 = start2 + end2 / 2;\n    long long int mid = mid1 + mid2;\n\
    \    if (mid < 2) {\n        return \"NO\";\n    }\n    long long int a = start1;\n\
    \    long long int b = start2;\n    long long int c = mid;\n    long long int\
    \ d = mid;\n    long long int e = end1;\n    long long int f = end2;\n    long\
    \ long int g = mid;\n    long long int h = mid;\n    long long int i = start1;\n\
    \    long long int j = start2;\n    long long int k = end1;\n    long long int\
    \ l = end2;\n    long long int m = mid1;\n    long long int n = mid2;\n    long\
    \ long int o = start1;\n    long long int p = start2;\n    long long int q = end1;\n\
    \    long long int r = end2;\n    long long int s = mid1;\n    long long int t\
    \ = mid2;\n    long long int u = start1;\n    long long int v = start2;\n    long\
    \ long int w = end1;\n    long long int x = end2;\n    long long int y = mid1;\n\
    \    long long int z = mid2;\n    long long int A = start1;\n    long long int\
    \ B = start2;\n    long long int C = end1;\n    long long int D = end2;\n    long\
    \ long int E = mid1;\n    long long int F = mid2;\n    long long int G = end1;\n\
    \    long long int H = end2;\n    long long int I = mid1;\n    long long int J\
    \ = mid2;\n    long long int K = start1;\n    long long int L = start2;\n    long\
    \ long int M = end1;\n    long long int N = end2;\n    long long int O = start1;\n\
    \    long long int P = start2;\n    long long int Q = end1;\n    long long int\
    \ R = end2;\n    long long int S = mid1;\n    long long int T = mid2;\n    long\
    \ long int U = start1;\n", "    long long start = std::get<0>(interval1);\n  \
    \  long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length == 0 || length2\
    \ == 0) {\n        return \"NO\";\n    }\n    if (length == 1) {\n        return\
    \ \"YES\";\n    }\n    if (length2 == 1) {\n        return \"YES\";\n    }\n \
    \   long long mid = (start + end) / 2;\n    long long mid2 = (start2 + end2) /\
    \ 2;\n    long long mid3 = mid + mid2;\n    long long mid4 = mid3 - mid;\n   \
    \ if (mid3 == mid2) {\n        return \"YES\";\n    }\n    if (mid3 == mid) {\n\
    \        return \"YES\";\n    }\n    if (mid3 == mid4) {\n        return \"YES\"\
    ;\n    }\n    if (mid3 == mid2) {\n        return \"YES\";\n    }\n    if (mid3\
    \ == mid) {\n        return \"YES\";\n    }\n    if (mid3 == mid4) {\n       \
    \ return \"YES\";\n    }\n    if (mid3 == mid2) {\n        return \"YES\";\n \
    \   }\n    if (mid3 == mid) {\n        return \"YES\";\n    }\n    if (mid3 ==\
    \ mid4) {\n        return \"YES\";\n    }\n    if (mid3 == mid2) {\n        return\
    \ \"YES\";\n    }\n    if (mid3 == mid) {\n        return \"YES\";\n    }\n  \
    \  if (mid3 == mid4) {\n        return \"YES\";\n    }\n    if (mid3 == mid2)\
    \ {\n        return \"YES\";\n    }\n    if (mid3 == mid) {\n        return \"\
    YES\";\n    }\n    if (mid3 == mid4) {\n        return \"YES\";\n    }\n    if\
    \ (mid3 == mid2) {\n        return \"YES\";\n    }\n    if (mid3 == mid) {\n \
    \       return \"YES\";\n    }\n    if (mid3 == mid4) {\n        return \"YES\"\
    ;\n    }\n    if (mid3 == mid2) {\n        return \"YES\";\n    }\n    if (mid3\
    \ == mid) {\n        return \"YES\";\n    }\n    if (mid3 == mid4) {\n       \
    \ return \"YES\";\n    }\n    if (mid3 == mid2) {\n        return \"YES\";\n \
    \   }\n    if (mid3 == mid) {\n        return \"YES\";\n    }\n    if (mid3 ==\
    \ mid4) {\n        return \"YES\";\n    }\n    if (mid3 == mid2) {\n        return\
    \ \"YES\";\n    }\n    if (mid3 == mid) {\n        return \"YES\";\n    }\n  \
    \  if (mid3 == mid4) {\n        return \"YES\";\n    }\n    if (", "    long long\
    \ int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = start1 < end2 ? start1 : end2;\n    long\
    \ long int endIntersection = start1 < end2 ? end2 : start1;\n    long long int\
    \ endIntersection2 = start2 < end1 ? end2 : start2;\n    long long int startIntersection2\
    \ = start2 < end1 ? start2 : end1;\n    long long int endIntersection3 = start1\
    \ < end2 ? start1 : end2;\n    long long int endIntersection4 = start2 < end1\
    \ ? end2 : start1;\n    long long int startIntersection3 = start2 < end1 ? start2\
    \ : end1;\n    long long int endIntersection5 = start1 < end2 ? start1 : end2;\n\
    \    long long int endIntersection6 = start2 < end1 ? end2 : start1;\n    long\
    \ long int startIntersection4 = start2 < end1 ? start2 : end1;\n    long long\
    \ int endIntersection7 = start1 < end2 ? start1 : end2;\n    long long int endIntersection8\
    \ = start2 < end1 ? end2 : start1;\n    long long int startIntersection5 = start2\
    \ < end1 ? start2 : end1;\n    long long int endIntersection9 = start1 < end2\
    \ ? start1 : end2;\n    long long int endIntersection10 = start2 < end1 ? end2\
    \ : start1;\n    long long int startIntersection6 = start2 < end1 ? start2 : end1;\n\
    \    long long int endIntersection11 = start1 < end2 ? start1 : end2;\n    long\
    \ long int endIntersection12 = start2 < end1 ? end2 : start1;\n    long long int\
    \ startIntersection7 = start2 < end1 ? start2 : end1;\n    long long int endIntersection13\
    \ = start1 < end2 ? start1 : end2;\n    long long int endIntersection14 = start2\
    \ < end1 ? end2 : start1;\n    long long int startIntersection8 = start2 < end1\
    \ ? start2 : end1;\n    long long int endIntersection15 = start1 < end2 ? start1\
    \ : end2;\n    long long int endIntersection16 = start2 < end1 ? end2 : start1;\n\
    \    long long int startIntersection9 = start2 < end1 ? start2 : end1;\n    long\
    \ long int endIntersection17 = start1 < end2 ? start1 : end2;\n    long long ",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 < end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > end2) {\n        return \"NO\";\n    }\n    long long\
    \ length = 0;\n    for (long long i = start; i <= end; i++) {\n        for (long\
    \ long j = start2; j <= end2; j++) {\n            if (i == j) {\n            \
    \    length++;\n            }\n        }\n    }\n    if (length == 2 && length\
    \ == 2) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long long\
    \ start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length2 == 1)\
    \ {\n        return \"YES\";\n    }\n    if (length2 == 2) {\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            if (start <= end2 && start <= end) {\n                return \"YES\"\
    ;\n            }\n            if (end <= start2 && end <= start) {\n         \
    \       return \"YES\";\n            }\n        }\n    }\n    if (length2 > 2)\
    \ {\n        if (length2 == 3) {\n            if (length == 1) {\n           \
    \     return \"YES\";\n            }\n            if (length == 2) {\n       \
    \         if (start <= end2 && start <= end) {\n                    return \"\
    YES\";\n                }\n                if (end <= start2 && end <= start)\
    \ {\n                    return \"YES\";\n                }\n            }\n \
    \       }\n    }\n    return \"NO\";", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long length = end - start;\n   \
    \ long length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n    \
    \    return \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\"\
    ;\n    }\n    if (length < length2) {\n        std::swap(start, end);\n      \
    \  std::swap(start2, end2);\n    }\n    long mid = start + (end - start) / 2;\n\
    \    long mid2 = start2 + (end2 - start2) / 2;\n    if (mid == mid2) {\n     \
    \   return \"YES\";\n    }\n    if (mid < mid2) {\n        std::swap(mid, mid2);\n\
    \    }\n    long count = 0;\n    long count2 = 0;\n    while (start < end) {\n\
    \        long mid = start + (end - start) / 2;\n        if (mid == mid2) {\n \
    \           count++;\n        }\n        if (mid < mid2) {\n            count2++;\n\
    \        }\n        start = mid + 1;\n    }\n    while (start2 < end2) {\n   \
    \     long mid2 = start2 + (end2 - start2) / 2;\n        if (mid == mid2) {\n\
    \            count2++;\n        }\n        if (mid < mid2) {\n            count++;\n\
    \        }\n        start2 = mid2 + 1;\n    }\n    if (count == count2) {\n  \
    \      return \"YES\";\n    }\n    return \"NO\";", "    long long int start =\
    \ std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n \
    \   long long int start2 = std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int length = end - start;\n    long long int length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length2 == 1) {\n        return \"YES\";\n    }\n    if (length == 1) {\n \
    \       return \"NO\";\n    }\n    if (length2 > length) {\n        return \"\
    NO\";\n    }\n    if (length2 < length) {\n        return \"NO\";\n    }\n   \
    \ if (length == length2) {\n        return \"YES\";\n    }\n    if (length2 >\
    \ length2) {\n        return \"NO\";\n    }\n    if (length2 < length2) {\n  \
    \      return \"NO\";\n    }\n    if (length == length2) {\n        return \"\
    YES\";\n    }\n    if (length2 > length2) {\n        return \"NO\";\n    }\n \
    \   if (length2 < length2) {\n        return \"NO\";\n    }\n    if (length ==\
    \ length2) {\n        return \"YES\";\n    }\n    if (length2 > length2) {\n \
    \       return \"NO\";\n    }\n    if (length2 < length2) {\n        return \"\
    NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n \
    \   if (length2 > length2) {\n        return \"NO\";\n    }\n    if (length2 <\
    \ length2) {\n        return \"NO\";\n    }\n    if (length == length2) {\n  \
    \      return \"YES\";\n    }\n    if (length2 > length2) {\n        return \"\
    NO\";\n    }\n    if (length2 < length2) {\n        return \"NO\";\n    }\n  \
    \  if (length == length2) {\n        return \"YES\";\n    }\n    if (length2 >\
    \ length2) {\n        return \"NO\";\n    }\n    if (length2 < length2) {\n  \
    \      return \"NO\";\n    }\n    if (length == length2) {\n        return \"\
    YES\";\n    }\n    if (length2 > length2) {\n        return \"NO\";\n    }\n \
    \   if (length2 < length2) {\n        return \"NO\";\n    }\n    if (length ==\
    \ length2) {\n        return \"YES\";\n    }\n    if (length2 > length2) {\n \
    \       return \"NO\";\n    }\n    if (length2 < length2) {\n        return \"\
    NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n \
    \   if (length2 > length2) {\n        return \"NO\";\n    }\n    if (length2 <\
    \ length2) {\n        return \"NO\";\n    }\n    if (length == length2) {\n  \
    \      return \"YES\";\n    }\n    if (length2 > length2) {\n        return \"\
    NO\";\n    }\n    if (length2 < length2) {\n        return \"NO\";\n    }\n  \
    \  if (length == length2) {\n        return \"YES\";\n", "    long long start\
    \ = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n   \
    \ long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > end2) {\n        return \"NO\";\n    }\n    long long\
    \ start3 = start;\n    long long end3 = end;\n    long long start4 = start2;\n\
    \    long long end4 = end2;\n    long long start5 = start3;\n    long long end5\
    \ = end3;\n    long long start6 = start4;\n    long long end6 = end4;\n    long\
    \ long start7 = start5;\n    long long end7 = end5;\n    long long start8 = start6;\n\
    \    long long end8 = end6;\n    long long start9 = start7;\n    long long end9\
    \ = end7;\n    long long start10 = start8;\n    long long end10 = end8;\n    long\
    \ long start11 = start9;\n    long long end11 = end9;\n    long long start12 =\
    \ start10;\n    long long end12 = end10;\n    long long start13 = start11;\n \
    \   long long end13 = end11;\n    long long start14 = start12;\n    long long\
    \ end14 = end12;\n    long long start15 = start13;\n    long long end15 = end13;\n\
    \    long long start16 = start14;\n    long long end16 = end14;\n    long long\
    \ start17 = start15;\n    long long end17 = end15;\n    long long start18 = start16;\n\
    \    long long end18 = end16;\n    long long start19 = start17;\n    long long\
    \ end19 = end17;\n    long long start20 = start18;\n    long long end20 = end18;\n\
    \    long long start21 = start19;\n    long long end21 = end19;\n    long long\
    \ start22 = start20;\n    long long end22 = end20;\n    long long start23 = start21;\n\
    \    long long end23 = end21;\n    long long start24 = start22;\n    long long\
    \ end24 = end22;\n    long long start25 = start23;\n    long long end25 = end23;\n\
    \    long long start", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length2 > length)\
    \ {\n        std::swap(length, length2);\n    }\n    if (length2 == 0) {\n   \
    \     return \"NO\";\n    }\n    if (length == 1) {\n        return \"YES\";\n\
    \    }\n    long long ans = 1;\n    for (long long i = 3; i <= length; i += 2)\
    \ {\n        if (length2 % i == 0) {\n            ans *= i;\n        }\n    }\n\
    \    if (ans == 1) {\n        return \"YES\";\n    }\n    return \"NO\";", " \
    \   long long int a = interval1.get<0>(), b = interval1.get<1>();\n    long long\
    \ int c = interval2.get<0>(), d = interval2.get<1>();\n    if (a > b) {\n    \
    \    std::swap(a, b);\n        std::swap(c, d);\n    }\n    if (c > d) {\n   \
    \     std::swap(c, d);\n    }\n    if (a > c) {\n        std::swap(a, b);\n  \
    \      std::swap(c, d);\n    }\n    if (b > d) {\n        std::swap(a, b);\n \
    \       std::swap(c, d);\n    }\n    if (a > b) {\n        std::swap(a, b);\n\
    \        std::swap(c, d);\n    }\n    if (c > d) {\n        std::swap(c, d);\n\
    \    }\n    if (a > c) {\n        std::swap(a, b);\n        std::swap(c, d);\n\
    \    }\n    if (b > d) {\n        std::swap(a, b);\n        std::swap(c, d);\n\
    \    }\n    if (a > b) {\n        std::swap(a, b);\n        std::swap(c, d);\n\
    \    }\n    if (c > d) {\n        std::swap(c, d);\n    }\n    if (a > c) {\n\
    \        std::swap(a, b);\n        std::swap(c, d);\n    }\n    if (b > d) {\n\
    \        std::swap(a, b);\n        std::swap(c, d);\n    }\n    if (a > b) {\n\
    \        std::swap(a, b);\n        std::swap(c, d);\n    }\n    if (c > d) {\n\
    \        std::swap(c, d);\n    }\n    if (a > c) {\n        std::swap(a, b);\n\
    \        std::swap(c, d);\n    }\n    if (b > d) {\n        std::swap(a, b);\n\
    \        std::swap(c, d);\n    }\n    if (a > b) {\n        std::swap(a, b);\n\
    \        std::swap(c, d);\n    }\n    if (c > d) {\n        std::swap(c, d);\n\
    \    }\n    if (a > c) {\n        std::swap(a, b);\n        std::swap(c, d);\n\
    \    }\n    if (b > d) {\n        std::swap(a, b);\n        std::swap(c, d);\n\
    \    }\n    if (a > b) {\n        std::swap(a, b);\n        std::swap(c, d);\n\
    \    }\n    if (c > d) {\n        std::swap(c, d);\n    }\n    if (a > c) {\n\
    \        std::swap(a, b);\n        std::swap(c, d);\n    }\n    if (b > d) {\n\
    \        std::swap(a, b);\n        std::swap(c, d);\n    }\n    if (a > b) {\n\
    \        std::swap(a, b);\n        std::swap(c, d);\n    }\n    if (c > d) {\n\
    \        std::swap", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    long long ans = length / length2;\n  \
    \  if (ans == 0) {\n        return \"NO\";\n    }\n    if (ans == 1) {\n     \
    \   return \"YES\";\n    }\n    if (ans == 2) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 3) {\n        return \"YES\";\n    }\n    if (ans == 4) {\n\
    \        return \"YES\";\n    }\n    if (ans == 5) {\n        return \"YES\";\n\
    \    }\n    if (ans == 6) {\n        return \"YES\";\n    }\n    if (ans == 7)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 8) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 9) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 10) {\n        return \"YES\";\n    }\n    if (ans == 11) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 12) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 13) {\n        return \"YES\";\n    }\n    if (ans == 14) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 15) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 16) {\n        return \"YES\";\n    }\n    if (ans == 17)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 18) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 19) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 20) {\n        return \"YES\";\n    }\n    if (ans == 21) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 22) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 23) {\n        return \"YES\";\n    }\n    if (ans == 24) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 25) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 26) {\n        return \"YES\";\n    }\n    if (ans == 27)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 28) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 29) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 30) {\n        return \"YES\";\n    }\n    if (ans == 31) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 32) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 33) {\n        return \"YES\";\n    }\n    if (ans == 34) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 35) {\n", "    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    long long start = std::get<0>(interval1);\n    long long end = std::get<0>(interval2);\n\
    \    long long length = end - start;\n    if (length == 1) {\n        return \"\
    NO\";\n    }\n    long long mid = start + (end - start) / 2;\n    if (std::get<0>(interval1)\
    \ < mid) {\n        std::swap(interval1, interval2);\n    }\n    long long mid2\
    \ = mid + (end - mid) / 2;\n    if (std::get<0>(interval2) < mid2) {\n       \
    \ std::swap(interval1, interval2);\n    }\n    long long mid3 = mid2 + (end -\
    \ mid2) / 2;\n    if (std::get<0>(interval1) < mid3) {\n        std::swap(interval1,\
    \ interval2);\n    }\n    long long mid4 = mid3 + (end - mid3) / 2;\n    if (std::get<0>(interval2)\
    \ < mid4) {\n        std::swap(interval1, interval2);\n    }\n    long long mid5\
    \ = mid4 + (end - mid4) / 2;\n    if (std::get<0>(interval1) < mid5) {\n     \
    \   std::swap(interval1, interval2);\n    }\n    long long mid6 = mid5 + (end\
    \ - mid5) / 2;\n    if (std::get<0>(interval2) < mid6) {\n        std::swap(interval1,\
    \ interval2);\n    }\n    long long mid7 = mid6 + (end - mid6) / 2;\n    if (std::get<0>(interval1)\
    \ < mid7) {\n        std::swap(interval1, interval2);\n    }\n    long long mid8\
    \ = mid7 + (end - mid7) / 2;\n    if (std::get<0>(interval2) < mid8) {\n     \
    \   std::swap(interval1, interval2);\n    }\n    long long mid9 = mid8 + (end\
    \ - mid8) / 2;\n    if (std::get<0>(interval1) < mid9) {\n        std::swap(interval1,\
    \ interval2);\n    }\n    long long mid10 = mid9 + (end - mid9) / 2;\n    if (std::get<0>(interval2)\
    \ < mid10) {\n        std::swap(interval1, interval2);\n    }\n    long long mid11\
    \ = mid10 + (end - mid10) / 2;\n    if (std::get<0>(interval1) < mid11) {\n  \
    \      std::swap(interval1, interval2);\n    }\n    long long mid12 = mid11 +\
    \ (end - mid11) / 2;\n    if (std::get<0>(interval2) < mid12) {\n        std::swap(interval",
  "    long long int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = start1 < end2 ? start1 : end2;\n    long\
    \ long int endIntersection = start1 < end2 ? end1 : start2;\n    long long int\
    \ endIntersection2 = end1 < start2 ? end1 : start2;\n    long long int startIntersection2\
    \ = start2 < end1 ? start2 : end1;\n    long long int endIntersection2 = start2\
    \ < end1 ? end1 : start2;\n    long long int startIntersection3 = start1 < start2\
    \ ? start1 : start2;\n    long long int endIntersection3 = end1 < end2 ? end1\
    \ : end2;\n    long long int startIntersection4 = start2 < start1 ? start2 : start1;\n\
    \    long long int endIntersection4 = end2 < end1 ? end2 : end1;\n    long long\
    \ int startIntersection5 = start1 < start2 ? start1 : start2;\n    long long int\
    \ endIntersection5 = end1 < end2 ? end1 : end2;\n    long long int startIntersection6\
    \ = start2 < start1 ? start2 : start1;\n    long long int endIntersection6 = end2\
    \ < end1 ? end2 : end1;\n    long long int startIntersection7 = start1 < start2\
    \ ? start1 : start2;\n    long long int endIntersection7 = end1 < end2 ? end1\
    \ : end2;\n    long long int startIntersection8 = start2 < start1 ? start2 : start1;\n\
    \    long long int endIntersection8 = end2 < end1 ? end2 : end1;\n    long long\
    \ int startIntersection9 = start1 < start2 ? start1 : start2;\n    long long int\
    \ endIntersection9 = end1 < end2 ? end1 : end2;\n    long long int startIntersection10\
    \ = start2 < start1 ? start2 : start1;\n    long long int endIntersection10 =\
    \ end2 < end1 ? end2 : end1;\n    long long int startIntersection11 = start1 <\
    \ start2 ? start1 : start2;\n    long long int endIntersection11 = end1 < end2\
    \ ? end1 : end2;\n    long long int startIntersection12 = start2 < start1 ? start2\
    \ : start1;\n    long long int endIntersection12 = end2 < end1 ? end2 : end1;\n\
    \    long long int startIntersection13 = start1 < start2 ? start1 : start2;\n\
    \    long long ", "    if (std::get<0>(interval1) < std::get<0>(interval2)) {\n\
    \        std::swap(interval1, interval2);\n    }\n    if (std::get<0>(interval1)\
    \ > std::get<0>(interval2)) {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    if (std::get<1>(interval1) > std::get<1>(interval2)) {\n        return \"\
    NO\";\n    }\n    if (std::get<0>(interval1) == std::get<0>(interval2)) {\n  \
    \      return \"NO\";\n    }\n    if (std::get<1>(interval1) == std::get<1>(interval2))\
    \ {\n        return \"NO\";\n    }\n    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<0>(interval2);\n    long long length = end - start;\n\
    \    long long ans = 0;\n    long long i = 2;\n    while (i <= length) {\n   \
    \     long long mid = (start + end) / 2;\n        if (mid % i == 0) {\n      \
    \      ans += 1;\n            end = mid;\n        } else {\n            start\
    \ = mid;\n        }\n        i += 2;\n    }\n    if (ans == length) {\n      \
    \  return \"YES\";\n    } else {\n        return \"NO\";\n    }", "    // Write\
    \ your code here\n    long long int start1 = std::get<0>(interval1);\n    long\
    \ long int end1 = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int startIntersection\
    \ = start1;\n    long long int endIntersection = end1;\n    long long int startIntersection2\
    \ = start2;\n    long long int endIntersection2 = end2;\n    long long int startIntersection3\
    \ = startIntersection;\n    long long int endIntersection3 = endIntersection;\n\
    \    long long int startIntersection4 = startIntersection2;\n    long long int\
    \ endIntersection4 = endIntersection2;\n    long long int startIntersection5 =\
    \ startIntersection3;\n    long long int endIntersection5 = endIntersection3;\n\
    \    long long int startIntersection6 = startIntersection4;\n    long long int\
    \ endIntersection6 = endIntersection4;\n    long long int startIntersection7 =\
    \ startIntersection5;\n    long long int endIntersection7 = endIntersection5;\n\
    \    long long int startIntersection8 = startIntersection6;\n    long long int\
    \ endIntersection8 = endIntersection6;\n    long long int startIntersection9 =\
    \ startIntersection7;\n    long long int endIntersection9 = endIntersection7;\n\
    \    long long int startIntersection10 = startIntersection8;\n    long long int\
    \ endIntersection10 = endIntersection8;\n    long long int startIntersection11\
    \ = startIntersection9;\n    long long int endIntersection11 = endIntersection9;\n\
    \    long long int startIntersection12 = startIntersection10;\n    long long int\
    \ endIntersection12 = endIntersection10;\n    long long int startIntersection13\
    \ = startIntersection11;\n    long long int endIntersection13 = endIntersection11;\n\
    \    long long int startIntersection14 = startIntersection12;\n    long long int\
    \ endIntersection14 = endIntersection12;\n    long long int startIntersection15\
    \ = startIntersection13;\n    long long int endIntersection15 = endIntersection13;\n\
    \    long long int startIntersection16 = startIntersection14;\n    long long int\
    \ endIntersection16 = endIntersection14;\n    long long int startIntersection17\
    \ = startIntersection15;\n    long long int endIntersection17 = endIntersection15;\n\
    \    long long int startIntersection", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ < end2) {\n        std::swap(start2, end2);\n    }\n    if (start > end2) {\n\
    \        return \"NO\";\n    }\n    long long length = end - start;\n    long\
    \ long length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\"\
    ;\n    }\n    if (length2 == 1) {\n        return \"YES\";\n    }\n    long long\
    \ length3 = length / length2;\n    if (length3 == 1) {\n        return \"YES\"\
    ;\n    }\n    long long length4 = length % length2;\n    if (length4 == 0) {\n\
    \        return \"YES\";\n    }\n    long long length5 = length / length4;\n \
    \   if (length5 == 1) {\n        return \"YES\";\n    }\n    long long length6\
    \ = length % length4;\n    if (length6 == 0) {\n        return \"YES\";\n    }\n\
    \    long long length7 = length / length6;\n    if (length7 == 1) {\n        return\
    \ \"YES\";\n    }\n    long long length8 = length % length6;\n    if (length8\
    \ == 0) {\n        return \"YES\";\n    }\n    long long length9 = length / length8;\n\
    \    if (length9 == 1) {\n        return \"YES\";\n    }\n    long long length10\
    \ = length % length8;\n    if (length10 == 0) {\n        return \"YES\";\n   \
    \ }\n    long long length11 = length / length10;\n    if (length11 == 1) {\n \
    \       return \"YES\";\n    }\n    long long length12 = length % length10;\n\
    \    if (length12 == 0) {\n        return \"YES\";\n    }\n    long long length13\
    \ = length / length12;\n    if (length13 == 1) {\n        return \"YES\";\n  \
    \  }\n    long long length14 = length % length12;\n    if (length14 == 0) {\n\
    \        return \"YES\";\n    }\n    long long length15 = length / length14;\n\
    \    if (length15 == 1) {\n        return \"YES\";\n    }\n    long long length16\
    \ = length % length14;\n    if (length16 == 0) {\n        return \"YES\";\n  \
    \  }\n    long long length17 = length / length16;\n    if (length17 == 1) {\n\
    \        return \"YES\";\n    }\n    long long length18 = length % length16;\n\
    \    if (length18 == 0) {\n        return \"YES\";\n    }\n    long long length19\
    \ = length / length18;\n    if (length19 == 1) {\n        return \"YES\";", " \
    \   // Your code here\n    long long int a = std::get<0>(interval1);\n    long\
    \ long int b = std::get<1>(interval1);\n    long long int c = std::get<0>(interval2);\n\
    \    long long int d = std::get<1>(interval2);\n    long long int ans = 0;\n \
    \   long long int b1 = b;\n    long long int b2 = d;\n    long long int c1 = c;\n\
    \    long long int c2 = d;\n    long long int a1 = a1;\n    long long int a2 =\
    \ a2;\n    long long int b1 = b1;\n    long long int b2 = b2;\n    long long int\
    \ c1 = c1;\n    long long int c2 = c2;\n    long long int a1 = a1;\n    long long\
    \ int a2 = a2;\n    long long int b1 = b1;\n    long long int b2 = b2;\n    long\
    \ long int c1 = c1;\n    long long int c2 = c2;\n    long long int a1 = a1;\n\
    \    long long int a2 = a2;\n    long long int b1 = b1;\n    long long int b2\
    \ = b2;\n    long long int c1 = c1;\n    long long int c2 = c2;\n    long long\
    \ int a1 = a1;\n    long long int a2 = a2;\n    long long int b1 = b1;\n    long\
    \ long int b2 = b2;\n    long long int c1 = c1;\n    long long int c2 = c2;\n\
    \    long long int a1 = a1;\n    long long int a2 = a2;\n    long long int b1\
    \ = b1;\n    long long int b2 = b2;\n    long long int c1 = c1;\n    long long\
    \ int c2 = c2;\n    long long int a1 = a1;\n    long long int a2 = a2;\n    long\
    \ long int b1 = b1;\n    long long int b2 = b2;\n    long long int c1 = c1;\n\
    \    long long int c2 = c2;\n    long long int a1 = a1;\n    long long int a2\
    \ = a2;\n    long long int b1 = b1;\n    long long int b2 = b2;\n    long long\
    \ int c1 = c1;\n    long long int c2 = c2;\n    long long int a1 = a1;\n    long\
    \ long int a2 = a2;\n    long long int b1 = b1;\n    long long int b2 = b2;\n\
    \    long long int c1 = c1;\n    ", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    if (start > start2) {\n        return\
    \ \"NO\";\n    }\n    long len1 = end - start;\n    long len2 = end2 - start2;\n\
    \    if (len1 == 0 || len2 == 0) {\n        return \"NO\";\n    }\n    long len3\
    \ = len1 * len2;\n    long sum = 0;\n    for (long i = 0; i < len3; i++) {\n \
    \       sum += i;\n    }\n    if (sum % len3 == 0) {\n        return \"YES\";\n\
    \    }\n    return \"NO\";", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int start = std::min(start1, start2);\n    long long int end =\
    \ std::max(end1, end2);\n    long long int length = end - start;\n    if (length\
    \ == 0)\n        return \"NO\";\n    if (length == 1)\n        return \"YES\"\
    ;\n    if (length == 2)\n        return \"NO\";\n    long long int mid = start\
    \ + (end - start) / 2;\n    if (mid == start || mid == end)\n        return \"\
    NO\";\n    if (mid % 2 == 0)\n        return \"NO\";\n    if (mid % 3 == 0)\n\
    \        return \"YES\";\n    if (mid % 5 == 0)\n        return \"YES\";\n   \
    \ if (mid % 7 == 0)\n        return \"YES\";\n    if (mid % 11 == 0)\n       \
    \ return \"YES\";\n    if (mid % 13 == 0)\n        return \"YES\";\n    if (mid\
    \ % 17 == 0)\n        return \"YES\";\n    if (mid % 19 == 0)\n        return\
    \ \"YES\";\n    if (mid % 23 == 0)\n        return \"YES\";\n    if (mid % 29\
    \ == 0)\n        return \"YES\";\n    if (mid % 31 == 0)\n        return \"YES\"\
    ;\n    if (mid % 37 == 0)\n        return \"YES\";\n    if (mid % 41 == 0)\n \
    \       return \"YES\";\n    if (mid % 43 == 0)\n        return \"YES\";\n   \
    \ if (mid % 47 == 0)\n        return \"YES\";\n    if (mid % 49 == 0)\n      \
    \  return \"YES\";\n    if (mid % 53 == 0)\n        return \"YES\";\n    if (mid\
    \ % 59 == 0)\n        return \"YES\";\n    if (mid % 61 == 0)\n        return\
    \ \"YES\";\n    if (mid % 67 == 0)\n        return \"YES\";\n    if (mid % 71\
    \ == 0)\n        return \"YES\";\n    if (mid % 73 == 0)\n        return \"YES\"\
    ;\n    if (mid % 79 == 0)\n        return \"YES\";\n    if (mid % 83 == 0)\n \
    \       return \"YES\";\n    if (mid % 89 == 0)\n        return \"YES\";\n   \
    \ if (mid % 97 == 0)\n        return \"YES\";\n    if (mid % 101 == 0)\n     \
    \   return \"YES\";\n    if (mid % 103 == 0)\n        return \"YES\";\n    if\
    \ (mid % 107 == 0)\n        return \"YES\";\n    if (mid % 109 == 0)\n       \
    \ return \"YES\";\n    if (mid % 113 == 0)\n        return \"YES\";\n    if (",
  "    long long int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start, end);\n\
    \        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2,\
    \ end2);\n    }\n    if (start == end) {\n        return \"NO\";\n    }\n    if\
    \ (start2 == end2) {\n        return \"NO\";\n    }\n    long long int start3\
    \ = start;\n    long long int end3 = end;\n    long long int start4 = start2;\n\
    \    long long int end4 = end2;\n    while (start3 <= end3) {\n        while (start4\
    \ <= end4) {\n            if (start3 == start4) {\n                end4 = end4;\n\
    \            } else if (start3 == end4) {\n                start4 = start4;\n\
    \            } else {\n                long long int mid = (start3 + end3) / 2;\n\
    \                if (mid == start4 || mid == end4) {\n                    end4\
    \ = mid;\n                } else {\n                    start4 = mid;\n      \
    \          }\n            }\n        }\n        start3 = start3 + 1;\n       \
    \ end3 = end3 + 1;\n    }\n    if (start4 <= end4) {\n        return \"YES\";\n\
    \    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length == 1) {\n        return \"YES\"\
    ;\n    }\n    if (length2 == 1) {\n        return \"NO\";\n    }\n    long long\
    \ ans = 1;\n    for (long long i = 2; i <= length2; i++) {\n        if (length\
    \ % i == 0) {\n            ans *= i;\n            if (ans == length2) {\n    \
    \            return \"YES\";\n            }\n        }\n    }\n    return \"NO\"\
    ;", "    long long int start1 = std::get<0>(interval1);\n    long long int end1\
    \ = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int start = std::min(start1,\
    \ start2);\n    long long int end = std::max(end1, end2);\n    long long int length\
    \ = end - start;\n    if (length == 0) return \"NO\";\n    if (length == 1) return\
    \ \"YES\";\n    long long int mid = start + (end - start) / 2;\n    if (mid ==\
    \ start) return \"NO\";\n    if (mid == end) return \"YES\";\n    if (mid % 2\
    \ == 0) return \"NO\";\n    long long int mid2 = mid / 2;\n    if (mid2 == start)\
    \ return \"NO\";\n    if (mid2 == end) return \"YES\";\n    if (mid2 % 2 == 0)\
    \ return \"NO\";\n    long long int mid3 = mid2 / 2;\n    if (mid3 == start) return\
    \ \"NO\";\n    if (mid3 == end) return \"YES\";\n    if (mid3 % 2 == 0) return\
    \ \"NO\";\n    long long int mid4 = mid3 / 2;\n    if (mid4 == start) return \"\
    NO\";\n    if (mid4 == end) return \"YES\";\n    if (mid4 % 2 == 0) return \"\
    NO\";\n    long long int mid5 = mid4 / 2;\n    if (mid5 == start) return \"NO\"\
    ;\n    if (mid5 == end) return \"YES\";\n    if (mid5 % 2 == 0) return \"NO\"\
    ;\n    long long int mid6 = mid5 / 2;\n    if (mid6 == start) return \"NO\";\n\
    \    if (mid6 == end) return \"YES\";\n    if (mid6 % 2 == 0) return \"NO\";\n\
    \    long long int mid7 = mid6 / 2;\n    if (mid7 == start) return \"NO\";\n \
    \   if (mid7 == end) return \"YES\";\n    if (mid7 % 2 == 0) return \"NO\";\n\
    \    long long int mid8 = mid7 / 2;\n    if (mid8 == start) return \"NO\";\n \
    \   if (mid8 == end) return \"YES\";\n    if (mid8 % 2 == 0) return \"NO\";\n\
    \    long long int mid9 = mid8 / 2;\n    if (mid9 == start) return \"NO\";\n \
    \   if (mid9 == end) return \"YES\";\n    if (mid9 % 2 == 0) return \"NO\";\n\
    \    long long int mid10 = mid9 / 2;\n    if (mid10 == start) return \"NO\";\n\
    \    if (mid10 == end) return \"YES\";\n    if (mid", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length == length2) {\n        return\
    \ \"YES\";\n    }\n    if (length < length2) {\n        std::swap(start, end);\n\
    \        std::swap(start2, end2);\n    }\n    long long mid = (start + end) /\
    \ 2;\n    long long mid2 = (start2 + end2) / 2;\n    if (mid * mid == length *\
    \ length2) {\n        return \"YES\";\n    }\n    if (mid * mid < length * length2)\
    \ {\n        return \"NO\";\n    }\n    return \"NO\";", "    long long int start\
    \ = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end - start;\n    long long\
    \ int length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n     \
    \   return \"NO\";\n    }\n    if (length == length2) {\n        if (length ==\
    \ 1) {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n\
    \    if (length < length2) {\n        length = length2;\n    }\n    long long\
    \ int length3 = length / 2;\n    long long int length4 = length % 2;\n    long\
    \ long int length5 = length3 / 2;\n    long long int length6 = length3 % 2;\n\
    \    long long int length7 = length5 / 2;\n    long long int length8 = length5\
    \ % 2;\n    long long int length9 = length7 / 2;\n    long long int length10 =\
    \ length7 % 2;\n    long long int length11 = length9 / 2;\n    long long int length12\
    \ = length9 % 2;\n    long long int length13 = length11 / 2;\n    long long int\
    \ length14 = length11 % 2;\n    long long int length15 = length13 / 2;\n    long\
    \ long int length16 = length13 % 2;\n    long long int length17 = length15 / 2;\n\
    \    long long int length18 = length15 % 2;\n    long long int length19 = length17\
    \ / 2;\n    long long int length20 = length17 % 2;\n    long long int length21\
    \ = length19 / 2;\n    long long int length22 = length19 % 2;\n    long long int\
    \ length23 = length21 / 2;\n    long long int length24 = length21 % 2;\n    long\
    \ long int length25 = length23 / 2;\n    long long int length26 = length23 % 2;\n\
    \    long long int length27 = length25 / 2;\n    long long int length28 = length25\
    \ % 2;\n    long long int length29 = length27 / 2;\n    long long int length30\
    \ = length27 % 2;\n    long long int length31 = length29 / 2;\n    long long int\
    \ length32 = length29 % 2;\n    long long int length33 = length31 / 2;\n    long\
    \ long int length34 = length31 % 2;\n    long long int length35 = length33 / 2;\n\
    \    long long int length", "    long start = std::get<0>(interval1);\n    long\
    \ end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n \
    \   long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\";\n\
    \    }\n    if (length == 1) {\n        return \"YES\";\n    }\n    long mid =\
    \ start + (length / 2);\n    long mid2 = start2 + (length2 / 2);\n    long mid3\
    \ = mid + 1;\n    long mid4 = mid2 + 1;\n    long mid5 = mid + 2;\n    long mid6\
    \ = mid2 + 2;\n    long mid7 = mid3 + 1;\n    long mid8 = mid4 + 1;\n    long\
    \ mid9 = mid5 + 1;\n    long mid10 = mid6 + 1;\n    long mid11 = mid7 + 1;\n \
    \   long mid12 = mid8 + 1;\n    long mid13 = mid9 + 1;\n    long mid14 = mid10\
    \ + 1;\n    long mid15 = mid11 + 1;\n    long mid16 = mid12 + 1;\n    long mid17\
    \ = mid13 + 1;\n    long mid18 = mid14 + 1;\n    long mid19 = mid15 + 1;\n   \
    \ long mid20 = mid16 + 1;\n    long mid21 = mid17 + 1;\n    long mid22 = mid18\
    \ + 1;\n    long mid23 = mid19 + 1;\n    long mid24 = mid20 + 1;\n    long mid25\
    \ = mid21 + 1;\n    long mid26 = mid22 + 1;\n    long mid27 = mid23 + 1;\n   \
    \ long mid28 = mid24 + 1;\n    long mid29 = mid25 + 1;\n    long mid30 = mid26\
    \ + 1;\n    long mid31 = mid27 + 1;\n    long mid32 = mid28 + 1;\n    long mid33\
    \ = mid29 + 1;\n    long mid34 = mid30 + 1;\n    long mid35 = mid31 + 1;\n   \
    \ long mid36 = mid32 + 1;\n    long mid37 = mid33 + 1;\n    long mid38 = mid34\
    \ + 1;\n    long mid39 = mid35 + 1;\n    long mid40 = mid36 + 1;\n    long mid41\
    \ = mid37 + 1;\n    long mid42 = mid38 + 1;\n    long mid43 = mid39 + 1;\n   \
    \ long mid44 = mid", "    long long int start1 = interval1.get<0>();\n    long\
    \ long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1 < end2 ? start1 : end2;\n    long long int endIntersection = start1\
    \ < end2 ? end2 : start1;\n    long long int endIntersection2 = start2 < end1\
    \ ? end2 : start2;\n    long long int endIntersection3 = start2 < end1 ? start2\
    \ : end1;\n    long long int endIntersection4 = start1 < end2 ? end1 : start2;\n\
    \    long long int endIntersection5 = start1 < end2 ? start2 : end1;\n    long\
    \ long int endIntersection6 = start2 < end1 ? end1 : start2;\n    long long int\
    \ endIntersection7 = start2 < end1 ? start2 : end1;\n    long long int endIntersection8\
    \ = start1 < end2 ? end1 : start2;\n    long long int endIntersection9 = start1\
    \ < end2 ? start2 : end1;\n    long long int endIntersection10 = start2 < end1\
    \ ? end1 : start2;\n    long long int endIntersection11 = start2 < end1 ? start2\
    \ : end1;\n    long long int endIntersection12 = start1 < end2 ? end1 : start2;\n\
    \    long long int endIntersection13 = start1 < end2 ? start2 : end1;\n    long\
    \ long int endIntersection14 = start2 < end1 ? end1 : start2;\n    long long int\
    \ endIntersection15 = start2 < end1 ? start2 : end1;\n    long long int endIntersection16\
    \ = start1 < end2 ? end1 : start2;\n    long long int endIntersection17 = start1\
    \ < end2 ? start2 : end1;\n    long long int endIntersection18 = start2 < end1\
    \ ? end1 : start2;\n    long long int endIntersection19 = start2 < end1 ? start2\
    \ : end1;\n    long long int endIntersection20 = start1 < end2 ? end1 : start2;\n\
    \    long long int endIntersection21 = start1 < end2 ? start2 : end1;\n    long\
    \ long int endIntersection22 = start2 < end1 ? end1 : start2;\n    long long int\
    \ endIntersection23 = start2 < end1 ? start2 : end1;\n    long long int endIntersection24\
    \ = start1 < end2 ? end1 : start2;\n    long long int endIntersection25 = start",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    long long mid = (start\
    \ + end) / 2;\n    long long mid2 = (start2 + end2) / 2;\n    if (mid == mid2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        std::swap(mid,\
    \ mid2);\n    }\n    long long ans = 1;\n    long long i = 1;\n    while (i <=\
    \ length && i <= length2) {\n        if (mid % i == 0) {\n            ans = ans\
    \ * i;\n            i += 1;\n        }\n        i += 2;\n    }\n    if (i == length2)\
    \ {\n        ans = ans * i;\n    }\n    if (ans == 1) {\n        return \"NO\"\
    ;\n    }\n    return \"YES\";", "    long long start1 = std::get<0>(interval1);\n\
    \    long long end1 = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end1 - start1;\n\
    \    long long length2 = end2 - start2;\n    if (length < length2) {\n       \
    \ length = length2;\n    }\n    if (length == 0) {\n        return \"NO\";\n \
    \   }\n    if (length == 1) {\n        return \"YES\";\n    }\n    long long mid1\
    \ = start1 + length / 2;\n    long long mid2 = start2 + length2 / 2;\n    long\
    \ long mid = mid1;\n    long long count = 0;\n    while (count < length) {\n \
    \       if (mid < mid2) {\n            if (std::get<0>(std::make_tuple(mid, mid2))\
    \ == std::get<0>(interval1) && std::get<1>(std::make_tuple(mid, mid2)) == std::get<1>(interval2))\
    \ {\n                return \"YES\";\n            }\n            mid++;\n    \
    \        count++;\n        } else {\n            if (std::get<0>(std::make_tuple(mid,\
    \ mid2)) == std::get<0>(interval2) && std::get<1>(std::make_tuple(mid, mid2))\
    \ == std::get<1>(interval1)) {\n                return \"YES\";\n            }\n\
    \            mid--;\n            count++;\n        }\n    }\n    return \"NO\"\
    ;", "    long long int a = interval1.get<0>();\n    long long int b = interval1.get<1>();\n\
    \    long long int c = interval2.get<0>();\n    long long int d = interval2.get<1>();\n\
    \    long long int len1 = a - b;\n    long long int len2 = c - d;\n    long long\
    \ int len3 = len1 + len2;\n    long long int len4 = len1 + len2;\n    long long\
    \ int len5 = len1 + len2;\n    long long int len6 = len1 + len2;\n    long long\
    \ int len7 = len1 + len2;\n    long long int len8 = len1 + len2;\n    long long\
    \ int len9 = len1 + len2;\n    long long int len10 = len1 + len2;\n    long long\
    \ int len11 = len1 + len2;\n    long long int len12 = len1 + len2;\n    long long\
    \ int len13 = len1 + len2;\n    long long int len14 = len1 + len2;\n    long long\
    \ int len15 = len1 + len2;\n    long long int len16 = len1 + len2;\n    long long\
    \ int len17 = len1 + len2;\n    long long int len18 = len1 + len2;\n    long long\
    \ int len19 = len1 + len2;\n    long long int len20 = len1 + len2;\n    long long\
    \ int len21 = len1 + len2;\n    long long int len22 = len1 + len2;\n    long long\
    \ int len23 = len1 + len2;\n    long long int len24 = len1 + len2;\n    long long\
    \ int len25 = len1 + len2;\n    long long int len26 = len1 + len2;\n    long long\
    \ int len27 = len1 + len2;\n    long long int len28 = len1 + len2;\n    long long\
    \ int len29 = len1 + len2;\n    long long int len30 = len1 + len2;\n    long long\
    \ int len31 = len1 + len2;\n    long long int len32 = len1 + len2;\n    long long\
    \ int len33 = len1 + len2;\n    long long int len34 = len1 + len2;\n    long long\
    \ int len35 = len1 + len2;\n    long long int len36 = len1 + len2;\n    long long\
    \ int len37 = len1 + len2;\n    long long int len38 = len1 + len2;\n    long long\
    \ int len39 = len1 + len2;\n    long long int len40 = len1 + len2;\n", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long intersection\
    \ = end - start;\n    if (intersection == 1) {\n        return \"YES\";\n    }\n\
    \    if (intersection % 2 == 0) {\n        return \"NO\";\n    }\n    long long\
    \ prime = 1;\n    long long divisor = 2;\n    while (divisor <= intersection)\
    \ {\n        if (intersection % divisor == 0) {\n            prime = 0;\n    \
    \        break;\n        }\n        divisor++;\n    }\n    if (prime) {\n    \
    \    return \"YES\";\n    }\n    return \"NO\";", "    // Write your code here\n\
    \    long long int a = interval1[0];\n    long long int b = interval1[1];\n  \
    \  long long int c = interval2[0];\n    long long int d = interval2[1];\n    long\
    \ long int length = std::max(a, b) - std::min(a, b);\n    long long int length2\
    \ = std::max(c, d) - std::min(c, d);\n    if (length == length2) {\n        if\
    \ (length == 1) {\n            return \"NO\";\n        } else {\n            return\
    \ \"YES\";\n        }\n    } else {\n        return \"NO\";\n    }", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    long long mid = (start\
    \ + end) / 2;\n    long long mid2 = start2 + end2;\n    long long mid3 = mid +\
    \ mid2;\n    if (mid == mid2) {\n        if (mid3 == length) {\n            return\
    \ \"YES\";\n        }\n        if (mid3 == length2) {\n            return \"YES\"\
    ;\n        }\n        if (mid3 == 2 * length) {\n            return \"YES\";\n\
    \        }\n        if (mid3 == 2 * length2) {\n            return \"YES\";\n\
    \        }\n        return \"NO\";\n    }\n    if (mid < mid2) {\n        if (mid3\
    \ == length) {\n            return \"YES\";\n        }\n        if (mid3 == length2)\
    \ {\n            return \"YES\";\n        }\n        if (mid3 == 2 * length) {\n\
    \            return \"YES\";\n        }\n        if (mid3 == 2 * length2) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ (mid2 < mid) {\n        if (mid3 == length) {\n            return \"YES\";\n\
    \        }\n        if (mid3 == length2) {\n            return \"YES\";\n    \
    \    }\n        if (mid3 == 2 * length) {\n            return \"YES\";\n     \
    \   }\n        if (mid3 == 2 * length2) {\n            return \"YES\";\n     \
    \   }\n        return \"NO\";\n    }\n    if (mid2 < mid) {\n        if (mid3\
    \ == length) {\n            return \"YES\";\n        }\n        if (mid3 == length2)\
    \ {\n            return \"YES\";\n        }\n        if (mid3 == 2 * length) {\n\
    \            return \"YES\";\n        }\n        if (mid3 == 2 * length2) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ (mid2 < mid) {\n        if (mid3 == length) {\n            return \"YES\";\n\
    \        }\n        if (mid3 == length2) {\n            return \"YES\";\n    \
    \    }\n        if (mid3 == 2 * length) {\n            return \"YES\";\n     \
    \   }\n        if (mid3 == 2 * length2) {\n            return \"YES\";\n     \
    \   }\n        return \"NO\";\n    }\n    if (mid2 < mid) {\n        if (mid3\
    \ == length) {\n            return \"YES\";\n        }\n        if (mid3 == length2)\
    \ {\n            return \"YES\";\n        }\n        if (mid3 == 2 * length) {\n\
    \            return \"YES\";\n        }\n        if (mid3 == 2 * length2) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ (mid2 < mid) {\n        if (mid3 == length) {\n            return \"YES\";\n\
    \        }\n        if (mid3 == length2) {\n            return \"YES\";\n    \
    \    }", "    long start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n\
    \    long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long inter = end - start2;\n    if (inter == 0) {\n        return\
    \ \"NO\";\n    }\n    if (inter == 1) {\n        return \"YES\";\n    }\n    long\
    \ prime = 1;\n    long prime2 = 1;\n    long prime3 = 1;\n    long prime4 = 1;\n\
    \    long prime5 = 1;\n    long prime6 = 1;\n    long prime7 = 1;\n    long prime8\
    \ = 1;\n    long prime9 = 1;\n    long prime10 = 1;\n    long prime11 = 1;\n \
    \   long prime12 = 1;\n    long prime13 = 1;\n    long prime14 = 1;\n    long\
    \ prime15 = 1;\n    long prime16 = 1;\n    long prime17 = 1;\n    long prime18\
    \ = 1;\n    long prime19 = 1;\n    long prime20 = 1;\n    long prime21 = 1;\n\
    \    long prime22 = 1;\n    long prime23 = 1;\n    long prime24 = 1;\n    long\
    \ prime25 = 1;\n    long prime26 = 1;\n    long prime27 = 1;\n    long prime28\
    \ = 1;\n    long prime29 = 1;\n    long prime30 = 1;\n    long prime31 = 1;\n\
    \    long prime32 = 1;\n    long prime33 = 1;\n    long prime34 = 1;\n    long\
    \ prime35 = 1;\n    long prime36 = 1;\n    long prime37 = 1;\n    long prime38\
    \ = 1;\n    long prime39 = 1;\n    long prime40 = 1;\n    long prime41 = 1;\n\
    \    long prime42 = 1;\n    long prime43 = 1;\n    long prime44 = 1;\n    long\
    \ prime45 = 1;\n    long prime46 = 1;\n    long prime47 = 1;\n    long prime48\
    \ = 1;\n    long prime49 = 1;\n    long prime50 = 1;\n    long prime51 = 1;\n\
    \    long prime52 = 1;\n    long prime53 = 1;\n    long prime54 = 1;\n    long\
    \ prime55 = 1;\n    long prime56 = 1;\n    long prime57 = 1;\n    long prime58\
    \ = 1;\n    long prime59 = 1;\n    long prime60 = 1;\n    long prime61 = 1;\n\
    \    long prime62 = 1;\n    long prime63 = 1;\n    long prime64 = 1;\n    long\
    \ prime65 = 1;\n    long ", "    if (std::get<0>(interval1) < std::get<0>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<0>(interval2);\n    long long length = end - start;\n\
    \    if (length == 1) {\n        return \"NO\";\n    }\n    long long mid = start\
    \ + (end - start) / 2;\n    if (std::get<0>(interval1) < std::get<0>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    long long mid1 = std::get<0>(interval1);\n\
    \    long long mid2 = std::get<0>(interval2);\n    long long midLength = mid2\
    \ - mid1;\n    if (midLength == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == midLength) {\n        return \"YES\";\n    }\n    long long midMid1 = mid\
    \ - mid1;\n    long long midMid2 = mid - mid2;\n    long long midMidLength = midMid2\
    \ - midMid1;\n    if (midMidLength == 1) {\n        return \"NO\";\n    }\n  \
    \  if (length == midMidLength) {\n        return \"YES\";\n    }\n    long long\
    \ midMidMid1Length = midMid1 - midMid2;\n    if (midMid1Length == 1) {\n     \
    \   return \"NO\";\n    }\n    if (length == midMid1Length) {\n        return\
    \ \"YES\";\n    }\n    long long midMid2Length = midMid2 - midMid1;\n    if (midMid2Length\
    \ == 1) {\n        return \"NO\";\n    }\n    if (length == midMid2Length) {\n\
    \        return \"YES\";\n    }\n    long long midMid3Length = midMid1 - midMid2;\n\
    \    if (midMid3Length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == midMid3Length) {\n        return \"YES\";\n    }\n    long long midMid4Length\
    \ = midMid2 - midMid3;\n    if (midMid4Length == 1) {\n        return \"NO\";\n\
    \    }\n    if (length == midMid4Length) {\n        return \"YES\";\n    }\n \
    \   long long midMid5Length = midMid3 - midMid4;\n    if (midMid5Length == 1)\
    \ {\n        return \"NO\";\n    }\n    if (length == midMid5Length) {\n     \
    \   return \"YES\";\n    }\n    long long midMid6Length = midMid4 - midMid5;\n\
    \    if (midMid6Length == 1) {\n        return \"NO\";\n    }\n    if (length\
    \ == midMid6Length) {\n        return \"YES\";\n    }\n    long long midMid7Length\
    \ = midMid5 - midMid6;\n    if (", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 > length) {\n       \
    \ return \"NO\";\n    }\n    if (length2 <= length) {\n        return \"YES\"\
    ;\n    }\n    long long ans = 0;\n    long long temp = 0;\n    for (long long\
    \ i = start; i <= end; i++) {\n        temp = i;\n        for (long long j = start2;\
    \ j <= end2; j++) {\n            if (temp == j) {\n                ans++;\n  \
    \          }\n        }\n    }\n    if (ans == length) {\n        return \"YES\"\
    ;\n    }\n    return \"NO\";", "    long start = std::get<0>(interval1);\n   \
    \ long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    if (start > start2) {\n        return\
    \ \"NO\";\n    }\n    if (start == start2) {\n        if (end == end2) {\n   \
    \         return \"YES\";\n        }\n        if (end < end2) {\n            return\
    \ \"NO\";\n        }\n    }\n    if (start < start2) {\n        return \"NO\"\
    ;\n    }\n    if (start == start2) {\n        if (end < end2) {\n            return\
    \ \"NO\";\n        }\n        if (end == end2) {\n            return \"YES\";\n\
    \        }\n    }\n    if (end < end2) {\n        return \"NO\";\n    }\n    if\
    \ (end == end2) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long\
    \ long int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = std::min(start1, start2);\n    long long\
    \ int endIntersection = std::max(end1, end2);\n    long long int endIntersection2\
    \ = endIntersection + 1;\n    long long int startIntersection2 = startIntersection\
    \ + 1;\n    long long int endIntersection3 = endIntersection2 + 1;\n    long long\
    \ int startIntersection3 = startIntersection2 + 1;\n    long long int endIntersection4\
    \ = endIntersection3 + 1;\n    long long int startIntersection4 = startIntersection3\
    \ + 1;\n    long long int endIntersection5 = endIntersection4 + 1;\n    long long\
    \ int startIntersection5 = startIntersection4 + 1;\n    long long int endIntersection6\
    \ = endIntersection5 + 1;\n    long long int startIntersection6 = startIntersection5\
    \ + 1;\n    long long int endIntersection7 = endIntersection6 + 1;\n    long long\
    \ int startIntersection7 = startIntersection6 + 1;\n    long long int endIntersection8\
    \ = endIntersection7 + 1;\n    long long int startIntersection8 = startIntersection7\
    \ + 1;\n    long long int endIntersection9 = endIntersection8 + 1;\n    long long\
    \ int startIntersection9 = startIntersection8 + 1;\n    long long int endIntersection10\
    \ = endIntersection9 + 1;\n    long long int startIntersection10 = startIntersection9\
    \ + 1;\n    long long int endIntersection11 = endIntersection10 + 1;\n    long\
    \ long int startIntersection11 = startIntersection10 + 1;\n    long long int endIntersection12\
    \ = endIntersection11 + 1;\n    long long int startIntersection12 = startIntersection11\
    \ + 1;\n    long long int endIntersection13 = endIntersection12 + 1;\n    long\
    \ long int startIntersection13 = startIntersection12 + 1;\n    long long int endIntersection14\
    \ = endIntersection13 + 1;\n    long long int startIntersection14 = startIntersection13\
    \ + 1;\n    long long int endIntersection15 = endIntersection14 + 1;\n    long\
    \ long int startIntersection15 = startIntersection14 + 1;\n    long long int endIntersection16\
    \ = endIntersection15 + 1;\n    long long int startIntersection16 = startIntersection15\
    \ + 1;\n    long long ", "    // Your code here\n    long long int start1 = interval1.get<0>();\n\
    \    long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1 < end2 ? start1 : end2;\n    long long int endIntersection = start1\
    \ < end2 ? end2 : start1;\n    long long int lengthIntersection = endIntersection\
    \ - startIntersection;\n    if (lengthIntersection == 1) {\n        return \"\
    NO\";\n    }\n    if (lengthIntersection % 2 == 0) {\n        return \"NO\";\n\
    \    }\n    long long int lengthDivisor = lengthIntersection / 2;\n    long long\
    \ int lengthDivisor2 = lengthDivisor / 2;\n    long long int lengthDivisor3 =\
    \ lengthDivisor2 / 2;\n    long long int lengthDivisor4 = lengthDivisor3 / 2;\n\
    \    long long int lengthDivisor5 = lengthDivisor4 / 2;\n    long long int lengthDivisor6\
    \ = lengthDivisor5 / 2;\n    long long int lengthDivisor7 = lengthDivisor6 / 2;\n\
    \    long long int lengthDivisor8 = lengthDivisor7 / 2;\n    long long int lengthDivisor9\
    \ = lengthDivisor8 / 2;\n    long long int lengthDivisor10 = lengthDivisor9 /\
    \ 2;\n    long long int lengthDivisor11 = lengthDivisor10 / 2;\n    long long\
    \ int lengthDivisor12 = lengthDivisor11 / 2;\n    long long int lengthDivisor13\
    \ = lengthDivisor12 / 2;\n    long long int lengthDivisor14 = lengthDivisor13\
    \ / 2;\n    long long int lengthDivisor15 = lengthDivisor14 / 2;\n    long long\
    \ int lengthDivisor16 = lengthDivisor15 / 2;\n    long long int lengthDivisor17\
    \ = lengthDivisor16 / 2;\n    long long int lengthDivisor18 = lengthDivisor17\
    \ / 2;\n    long long int lengthDivisor19 = lengthDivisor18 / 2;\n    long long\
    \ int lengthDivisor20 = lengthDivisor19 / 2;\n    long long int lengthDivisor21\
    \ = lengthDivisor20 / 2;\n    long long int lengthDivisor22 = lengthDivisor21\
    \ / 2;\n    long long int lengthDivisor23 = lengthDivisor22 / 2;\n    long long\
    \ int lengthDivisor24 = lengthDivisor23 / 2;\n    long long int length", "   \
    \ long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    if (start\
    \ == start2) {\n        if (end == end2) {\n            return \"YES\";\n    \
    \    }\n        return \"NO\";\n    }\n    long long mid = (start + end) / 2;\n\
    \    long long mid2 = (start2 + end2) / 2;\n    if (mid == mid2) {\n        return\
    \ \"YES\";\n    }\n    if (mid > mid2) {\n        return \"NO\";\n    }\n    if\
    \ (mid < mid2) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long\
    \ long int start1 = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end1 - start1 + end2 - start2;\n\
    \    if (length < 2) {\n        return \"NO\";\n    }\n    if (length == 2 &&\
    \ start1 <= start2) {\n        return \"YES\";\n    }\n    if (length == 2 &&\
    \ start1 > start2) {\n        return \"NO\";\n    }\n    if (length == 2 && start1\
    \ < start2) {\n        return \"NO\";\n    }\n    if (length == 2 && start1 >\
    \ start2) {\n        return \"NO\";\n    }\n    if (length == 2 && start1 < start2)\
    \ {\n        return \"NO\";\n    }\n    if (length == 2 && start1 == start2) {\n\
    \        return \"NO\";\n    }\n    if (length == 2 && start1 > start2) {\n  \
    \      return \"NO\";\n    }\n    if (length == 2 && start1 < start2) {\n    \
    \    return \"NO\";\n    }\n    if (length == 2 && start1 > start2) {\n      \
    \  return \"NO\";\n    }\n    if (length == 2 && start1 < start2) {\n        return\
    \ \"NO\";\n    }\n    if (length == 2 && start1 == start2) {\n        return \"\
    NO\";\n    }\n    if (length == 2 && start1 > start2) {\n        return \"NO\"\
    ;\n    }\n    if (length == 2 && start1 < start2) {\n        return \"NO\";\n\
    \    }\n    if (length == 2 && start1 > start2) {\n        return \"NO\";\n  \
    \  }\n    if (length == 2 && start1 < start2) {\n        return \"NO\";\n    }\n\
    \    if (length == 2 && start1 == start2) {\n        return \"NO\";\n    }\n \
    \   if (length == 2 && start1 > start2) {\n        return \"NO\";\n    }\n   \
    \ if (length == 2 && start1 < start2) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2 && start1 > start2) {\n        return \"NO\";\n    }\n    if (length\
    \ == 2 && start1 < start2) {\n        return \"NO\";\n    }\n    if (length ==\
    \ 2 && start1 == start2) {\n        return \"NO\";\n    }\n    if (length == 2\
    \ && start1 > start2) {\n        return \"NO\";\n    }\n    if (length == 2 &&\
    \ start1 < start2) {\n        return \"NO\";\n    }\n    if (length == 2 && start1\
    \ > start2) {\n        return \"NO\";\n    }\n    if (length == 2 && start1 <\
    \ start2) {\n        return \"NO\";\n    }\n    if (length == 2 && start1 == start2)\
    \ {\n        return \"NO\";\n    }\n    if (length == 2 && start1 > start2) {\n\
    \        return \"NO\";\n    }\n    if (length == 2 && start1 < start2) {\n  \
    \      return \"NO\";\n    }\n    if (length == 2 && start1 > start2) {\n    \
    \    return \"NO", "    long long start1 = std::get<0>(interval1);\n    long long\
    \ end1 = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end1 - start1\
    \ + end2 - start2;\n    if (length == 0) return \"NO\";\n    if (length == 1)\
    \ return \"YES\";\n    if (length == 2) return \"YES\";\n    if (length == 3)\
    \ return \"YES\";\n    if (length == 5) return \"YES\";\n    if (length == 7)\
    \ return \"YES\";\n    if (length == 11) return \"YES\";\n    if (length == 13)\
    \ return \"YES\";\n    if (length == 17) return \"YES\";\n    if (length == 19)\
    \ return \"YES\";\n    if (length == 21) return \"YES\";\n    if (length == 23)\
    \ return \"YES\";\n    if (length == 25) return \"YES\";\n    if (length == 27)\
    \ return \"YES\";\n    if (length == 29) return \"YES\";\n    if (length == 31)\
    \ return \"YES\";\n    if (length == 33) return \"YES\";\n    if (length == 35)\
    \ return \"YES\";\n    if (length == 37) return \"YES\";\n    if (length == 39)\
    \ return \"YES\";\n    if (length == 41) return \"YES\";\n    if (length == 43)\
    \ return \"YES\";\n    if (length == 45) return \"YES\";\n    if (length == 47)\
    \ return \"YES\";\n    if (length == 49) return \"YES\";\n    if (length == 51)\
    \ return \"YES\";\n    if (length == 53) return \"YES\";\n    if (length == 55)\
    \ return \"YES\";\n    if (length == 57) return \"YES\";\n    if (length == 59)\
    \ return \"YES\";\n    if (length == 61) return \"YES\";\n    if (length == 63)\
    \ return \"YES\";\n    if (length == 65) return \"YES\";\n    if (length == 67)\
    \ return \"YES\";\n    if (length == 69) return \"YES\";\n    if (length == 71)\
    \ return \"YES\";\n    if (length == 73) return \"YES\";\n    if (length == 75)\
    \ return \"YES\";\n    if (length == 77) return \"YES\";\n    if (length == 79)\
    \ return \"YES\";\n    if (length == 81) return \"YES\";\n    if (length == 83)\
    \ return \"YES\";\n    if (length == 85) return \"YES\";\n    if (length == 87)\
    \ return \"YES\";\n    if (length == 89) return \"YES\";\n    if (length == 91)\
    \ return \"YES\";\n    if (length == 93) return \"YES\";\n    if (length == 95)\
    \ return \"YES\";\n    if (length == 97) return \"YES\";\n    if (length == 99)\
    \ return \"YES\";\n    if (length == 10", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length2 == 1) {\n        if (length\
    \ == 1) {\n            return \"YES\";\n        } else {\n            return \"\
    NO\";\n        }\n    }\n    long long mid = start + (end - start) / 2;\n    long\
    \ long mid2 = start2 + (end2 - start2) / 2;\n    if (mid == mid2) {\n        return\
    \ \"NO\";\n    }\n    if (mid < mid2) {\n        long long temp = mid;\n     \
    \   mid = mid2;\n        mid2 = temp;\n    }\n    long long mid3 = mid + (mid2\
    \ - mid) / 2;\n    long long mid4 = mid2 + (mid2 - mid2) / 2;\n    if (mid3 ==\
    \ mid4) {\n        return \"NO\";\n    }\n    if (mid3 < mid4) {\n        long\
    \ long temp = mid3;\n        mid3 = mid4;\n        mid4 = temp;\n    }\n    long\
    \ long mid5 = mid3 + (mid4 - mid3) / 2;\n    long long mid6 = mid4 + (mid4 - mid4)\
    \ / 2;\n    if (mid5 == mid6) {\n        return \"NO\";\n    }\n    if (mid3 <\
    \ mid6) {\n        long long temp = mid3;\n        mid3 = mid6;\n        mid6\
    \ = temp;\n    }\n    long long mid7 = mid3 + (mid6 - mid3) / 2;\n    long long\
    \ mid8 = mid4 + (mid6 - mid4) / 2;\n    if (mid7 == mid8) {\n        return \"\
    NO\";\n    }\n    if (mid3 < mid8) {\n        long long temp = mid3;\n       \
    \ mid3 = mid8;\n        mid8 = temp;\n    }\n    long long mid9 = mid3 + (mid8\
    \ - mid3) / 2;\n    long long mid10 = mid4 + (mid8 - mid4) / 2;\n    if (mid9\
    \ == mid10) {\n        return \"NO\";\n    }\n    if (mid3 < mid10) {\n      \
    \  long long temp = mid3;\n        mid3 = mid10;\n        mid10 = temp;\n    }\n\
    \    long long mid11 = mid3 + (mid10 - mid3) / 2;\n    long long mid12 = mid4\
    \ + (mid10 - mid4) / 2;\n    if (mid11 == mid12) {\n        return \"NO\";\n \
    \   }\n    if (mid3 < mid12) {\n        long long ", "    long long int a = interval1.get<0>(),\
    \ b = interval1.get<1>();\n    long long int c = interval2.get<0>(), d = interval2.get<1>();\n\
    \    long long int ans = (a*a + b*b - c*c - d*d) / 2;\n    if (ans == 0) return\
    \ \"NO\";\n    if (ans == 1) return \"YES\";\n    if (ans < 0) return \"NO\";\n\
    \    if (ans > 1) return \"NO\";\n    if (a > b) return \"NO\";\n    if (c > d)\
    \ return \"NO\";\n    if (a < c) return \"NO\";\n    if (b < d) return \"NO\"\
    ;\n    return \"YES\";", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int startIntersection = start1 < start2 ? start1 : start2;\n  \
    \  long long int endIntersection = end1 < end2 ? end1 : end2;\n    long long int\
    \ startIntersectionEnd = startIntersection + endIntersection;\n    long long int\
    \ endIntersectionStart = startIntersection - endIntersection;\n    if (startIntersectionEnd\
    \ < startIntersection || endIntersectionStart > endIntersection) {\n        return\
    \ \"NO\";\n    }\n    long long int startIntersectionLength = startIntersectionEnd\
    \ - startIntersection;\n    long long int endIntersectionLength = endIntersectionStart\
    \ - endIntersection;\n    if (startIntersectionLength == endIntersectionLength)\
    \ {\n        return \"YES\";\n    }\n    if (startIntersectionLength > endIntersectionLength)\
    \ {\n        return \"NO\";\n    }\n    long long int startIntersectionPrime =\
    \ startIntersectionLength % 2 == 0 ? startIntersectionLength / 2 : startIntersectionLength\
    \ / 2 + 1;\n    long long int endIntersectionPrime = endIntersectionLength % 2\
    \ == 0 ? endIntersectionLength / 2 : endIntersectionLength / 2 + 1;\n    if (startIntersectionPrime\
    \ == endIntersectionPrime) {\n        return \"YES\";\n    }\n    return \"NO\"\
    ;", "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    if (length < length2)\
    \ {\n        length = length2;\n    }\n    long long mid = (start + end) / 2;\n\
    \    long long mid2 = (start2 + end2) / 2;\n    if (mid * mid == length * length)\
    \ {\n        return \"YES\";\n    }\n    if (mid * mid > length * length) {\n\
    \        return \"NO\";\n    }\n    if (mid * mid < length * length) {\n     \
    \   return \"NO\";\n    }\n    if (mid * mid > length * length2) {\n        return\
    \ \"NO\";\n    }\n    if (mid * mid < length * length2) {\n        return \"YES\"\
    ;\n    }\n    if (mid * mid > length2 * length2) {\n        return \"YES\";\n\
    \    }\n    if (mid * mid < length2 * length2) {\n        return \"NO\";\n   \
    \ }\n    return \"NO\";", "    // Your code here\n    long long int start = std::get<0>(interval1);\n\
    \    long long int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ 0;\n    long long int length2 = 0;\n    long long int length3 = 0;\n    long\
    \ long int length4 = 0;\n    long long int length5 = 0;\n    long long int length6\
    \ = 0;\n    long long int length7 = 0;\n    long long int length8 = 0;\n    long\
    \ long int length9 = 0;\n    long long int length10 = 0;\n    long long int length11\
    \ = 0;\n    long long int length12 = 0;\n    long long int length13 = 0;\n   \
    \ long long int length14 = 0;\n    long long int length15 = 0;\n    long long\
    \ int length16 = 0;\n    long long int length17 = 0;\n    long long int length18\
    \ = 0;\n    long long int length19 = 0;\n    long long int length20 = 0;\n   \
    \ long long int length21 = 0;\n    long long int length22 = 0;\n    long long\
    \ int length23 = 0;\n    long long int length24 = 0;\n    long long int length25\
    \ = 0;\n    long long int length26 = 0;\n    long long int length27 = 0;\n   \
    \ long long int length28 = 0;\n    long long int length29 = 0;\n    long long\
    \ int length30 = 0;\n    long long int length31 = 0;\n    long long int length32\
    \ = 0;\n    long long int length33 = 0;\n    long long int length34 = 0;\n   \
    \ long long int length35 = 0;\n    long long int length36 = 0;\n    long long\
    \ int length37 = 0;\n    long long int length38 = 0;\n    long long int length39\
    \ = 0;\n    long long int length40 = 0;\n    long long int length41 = 0;\n   \
    \ long long int length42 = 0;\n    long long int length43 = 0;\n    long long\
    \ int length44 = 0;\n    long long int length45 = 0;\n    long long int length46\
    \ = 0;\n    long long int length47 = 0;\n    long long int length48 = 0;\n   \
    \ long long int length49 = 0;\n    long long int length50 = 0;\n    long long\
    \ int length51 = 0;\n    long long int length52 = 0;\n    long long int length53\
    \ = 0;\n    long long int length54 = 0;\n    long long int length55 = 0;\n   \
    \ long long int length56 = 0;\n    long long int length57 = 0;\n    long ", " \
    \   long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    if (length < length2)\
    \ {\n        length = length2;\n    }\n    long long mid = length / 2;\n    long\
    \ long mid2 = length2 / 2;\n    long long mid3 = mid + mid2;\n    long long mid4\
    \ = mid3 + mid2;\n    long long mid5 = mid4 + mid2;\n    long long mid6 = mid5\
    \ + mid2;\n    long long mid7 = mid6 + mid2;\n    long long mid8 = mid7 + mid2;\n\
    \    long long mid9 = mid8 + mid2;\n    long long mid10 = mid9 + mid2;\n    long\
    \ long mid11 = mid10 + mid2;\n    long long mid12 = mid11 + mid2;\n    long long\
    \ mid13 = mid12 + mid2;\n    long long mid14 = mid13 + mid2;\n    long long mid15\
    \ = mid14 + mid2;\n    long long mid16 = mid15 + mid2;\n    long long mid17 =\
    \ mid16 + mid2;\n    long long mid18 = mid17 + mid2;\n    long long mid19 = mid18\
    \ + mid2;\n    long long mid20 = mid19 + mid2;\n    long long mid21 = mid20 +\
    \ mid2;\n    long long mid22 = mid21 + mid2;\n    long long mid23 = mid22 + mid2;\n\
    \    long long mid24 = mid23 + mid2;\n    long long mid25 = mid24 + mid2;\n  \
    \  long long mid26 = mid25 + mid2;\n    long long mid27 = mid26 + mid2;\n    long\
    \ long mid28 = mid27 + mid2;\n    long long mid29 = mid28 + mid2;\n    long long\
    \ mid30 = mid29 + mid2;\n    long long mid31 = mid30 + mid2;\n    long long mid32\
    \ = mid31 + mid2;\n    long long mid33 = mid32 + mid2;\n    long long mid34 =\
    \ mid33 + mid2;\n    long long mid35 = mid34 + mid2;\n    long long mid36", " \
    \   long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    if (length < length2)\
    \ {\n        std::swap(start, end);\n        std::swap(start2, end2);\n    }\n\
    \    long long mid = start + (end - start) / 2;\n    long long mid2 = start2 +\
    \ (end2 - start2) / 2;\n    long long ans = 1;\n    while (start <= mid && mid2\
    \ <= end2) {\n        if (mid % mid2 == 0) {\n            ans += 1;\n        }\n\
    \        mid += 1;\n        mid2 += 1;\n    }\n    if (ans == 1) {\n        return\
    \ \"YES\";\n    }\n    return \"NO\";", "    long long int a = interval1[0];\n\
    \    long long int b = interval1[1];\n    long long int c = interval2[0];\n  \
    \  long long int d = interval2[1];\n    long long int a1 = interval1[0];\n   \
    \ long long int b1 = interval1[1];\n    long long int c1 = interval2[0];\n   \
    \ long long int d1 = interval2[1];\n    long long int a2 = interval1[0];\n   \
    \ long long int b2 = interval1[1];\n    long long int c2 = interval2[0];\n   \
    \ long long int d2 = interval2[1];\n    long long int a3 = interval1[0];\n   \
    \ long long int b3 = interval1[1];\n    long long int c3 = interval2[0];\n   \
    \ long long int d3 = interval2[1];\n    long long int a4 = interval1[0];\n   \
    \ long long int b4 = interval1[1];\n    long long int c4 = interval2[0];\n   \
    \ long long int d4 = interval2[1];\n    long long int a5 = interval1[0];\n   \
    \ long long int b5 = interval1[1];\n    long long int c5 = interval2[0];\n   \
    \ long long int d5 = interval2[1];\n    long long int a6 = interval1[0];\n   \
    \ long long int b6 = interval1[1];\n    long long int c6 = interval2[0];\n   \
    \ long long int d6 = interval2[1];\n    long long int a7 = interval1[0];\n   \
    \ long long int b7 = interval1[1];\n    long long int c7 = interval2[0];\n   \
    \ long long int d7= interval2[1];\n    long long int a8 = interval1[0];\n    long\
    \ long int b8 = interval1[1];\n    long long int c8 = interval2[0];\n    long\
    \ long int d8 = interval2[1];\n    long long int a9 = interval1[0];\n    long\
    \ long int b9 = interval1[1];\n    long long int c9 = interval2[0];\n    long\
    \ long int d9 = interval2[1];\n    long long int a10 = interval1[0];\n    long\
    \ long int b10 = interval1[1];\n    long long int c10 = interval2[0];\n    long\
    \ long int d10 = interval2[1];\n    long long int a11 = interval1[0];\n    long\
    \ long int b11 = interval1[1];\n    long long int c11 = interval2[0];\n    long\
    \ long int d11 = interval2[1];\n    long long int a12 = interval1[0];\n    long\
    \ long int b12 = interval1[1];\n    long long int c12 = interval2[0];\n    long\
    \ long int d12 = interval2", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    long long m = length / length2;\n    long long n = length % length2;\n  \
    \  long long m2 = m * m;\n    long long n2 = n * n;\n    long long m3 = m2 * m;\n\
    \    long long n3 = n2 * n;\n    long long m4 = m3 * m;\n    long long n4 = n3\
    \ * n;\n    long long m5 = m4 * m;\n    long long n5 = n4 * n;\n    long long\
    \ m6 = m5 * m;\n    long long n6 = n5 * n;\n    long long m7 = m6 * m;\n    long\
    \ long n7 = n6 * n;\n    long long m8 = m7 * m;\n    long long n8 = n7 * n;\n\
    \    long long m9 = m8 * m;\n    long long n9 = n8 * n;\n    long long m10 = m9\
    \ * m;\n    long long n10 = n9 * n;\n    long long m11 = m10 * m;\n    long long\
    \ n11 = n10 * n;\n    long long m12 = m11 * m;\n    long long n12 = n11 * n;\n\
    \    long long m13 = m12 * m;\n    long long n13 = n12 * n;\n    long long m14\
    \ = m13 * m;\n    long long n14 = n13 * n;\n    long long m15 = m14 * m;\n   \
    \ long long n15 = n14 * n;\n    long long m16 = m15 * m;\n    long long n16 =\
    \ n15 * n;\n    long long m17 = m16 * m;\n    long long n17 = n16 * n;\n    long\
    \ long m18 = m17 * m;\n    long long n18 = n17 * n;\n    long long m19 = m18 *\
    \ m;\n    long long n19 = n18 * n;\n    long long m20 = m19 * m;\n    long long\
    \ n20 = n19 * n;\n    long long m21 = m20 * m;\n    long long n21 = n20 * n;\n\
    \    long long m22 = m21 * m;\n    long long n22 = n21 * n;", "    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2))\n        return intersection(interval2, interval1);\n\
    \    if (std::get<0>(interval1) > std::get<0>(interval2))\n        return intersection(interval1,\
    \ interval2);\n    if (std::get<1>(interval1) < std::get<1>(interval2))\n    \
    \    return intersection(interval1, interval2);\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2))\n        return intersection(interval2, interval1);\n\
    \    if (std::get<0>(interval1) == std::get<0>(interval2))\n        return \"\
    NO\";\n    if (std::get<1>(interval1) == std::get<1>(interval2))\n        return\
    \ \"NO\";\n    if (std::get<0>(interval1) < std::get<0>(interval2) && std::get<1>(interval1)\
    \ < std::get<1>(interval2))\n        return \"YES\";\n    if (std::get<0>(interval1)\
    \ > std::get<0>(interval2) && std::get<1>(interval1) > std::get<1>(interval2))\n\
    \        return \"YES\";\n    if (std::get<0>(interval1) < std::get<0>(interval2)\
    \ && std::get<1>(interval1) > std::get<1>(interval2))\n        return \"YES\"\
    ;\n    if (std::get<0>(interval1) > std::get<0>(interval2) && std::get<1>(interval1)\
    \ < std::get<1>(interval2))\n        return \"YES\";\n    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2) && std::get<1>(interval1) > std::get<1>(interval2))\n\
    \        return \"YES\";\n    if (std::get<0>(interval1) > std::get<0>(interval2)\
    \ && std::get<1>(interval1) < std::get<1>(interval2))\n        return \"YES\"\
    ;\n    if (std::get<0>(interval1) < std::get<0>(interval2) && std::get<1>(interval1)\
    \ > std::get<1>(interval2))\n        return \"YES\";\n    if (std::get<0>(interval1)\
    \ > std::get<0>(interval2) && std::get<1>(interval1) < std::get<1>(interval2))\n\
    \        return \"YES\";\n    if (std::get<0>(interval1) < std::get<0>(interval2)\
    \ && std::get<1>(interval1) > std::get<1>(interval2))\n        return \"YES\"\
    ;\n    if (std::get<0>(interval1) > std::get<0>(interval2) && std::get<1>(interval1)\
    \ < std::get<1>(interval2))\n        return \"YES\";\n    if (std::", "    if\
    \ (std::get<0>(interval1) > std::get<0>(interval2)) {\n        std::swap(interval1,\
    \ interval2);\n    }\n    if (std::get<0>(interval1) < std::get<0>(interval2))\
    \ {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1) > std::get<1>(interval2))\
    \ {\n        return \"NO\";\n    }\n    if (std::get<1>(interval1) < std::get<1>(interval2))\
    \ {\n        return \"NO\";\n    }\n    long long intersect = std::get<0>(interval1)\
    \ & std::get<1>(interval2);\n    if (intersect == 0) {\n        return \"NO\"\
    ;\n    }\n    if (intersect == 1) {\n        return \"YES\";\n    }\n    if (intersect\
    \ == -1) {\n        return \"NO\";\n    }\n    if (intersect == -2) {\n      \
    \  return \"YES\";\n    }\n    if (intersect == -3) {\n        return \"YES\"\
    ;\n    }\n    if (intersect == -4) {\n        return \"YES\";\n    }\n    if (intersect\
    \ == -5) {\n        return \"YES\";\n    }\n    if (intersect == -6) {\n     \
    \   return \"YES\";\n    }\n    if (intersect == -7) {\n        return \"YES\"\
    ;\n    }\n    if (intersect == -8) {\n        return \"YES\";\n    }\n    if (intersect\
    \ == -9) {\n        return \"YES\";\n    }\n    if (intersect == -10) {\n    \
    \    return \"YES\";\n    }\n    if (intersect == -11) {\n        return \"YES\"\
    ;\n    }\n    if (intersect == -12) {\n        return \"YES\";\n    }\n    if\
    \ (intersect == -13) {\n        return \"YES\";\n    }\n    if (intersect == -14)\
    \ {\n        return \"YES\";\n    }\n    if (intersect == -15) {\n        return\
    \ \"YES\";\n    }\n    if (intersect == -16) {\n        return \"YES\";\n    }\n\
    \    if (intersect == -17) {\n        return \"YES\";\n    }\n    if (intersect\
    \ == -18) {\n        return \"YES\";\n    }\n    if (intersect == -19) {\n   \
    \     return \"YES\";\n    }\n    if (intersect == -20) {\n        return \"YES\"\
    ;\n    }\n    if (intersect == -21) {\n        return \"YES\";\n    }\n    if\
    \ (intersect == -22) {\n        return \"YES\";\n    }\n    if (intersect == -23)\
    \ {\n        return \"YES\";\n    }\n    if (intersect == -24) {\n        return\
    \ \"YES\";\n    }\n    if (intersect == -25) {\n        return \"YES\";\n    }\n\
    \    if (intersect == -26) {\n        return \"YES", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    if (length < length2) {\n        length = length2;\n    }\n    long long\
    \ mid = start + (length / 2);\n    long long mid2 = start2 + (length2 / 2);\n\
    \    if (mid < mid2) {\n        length = mid;\n    } else {\n        length =\
    \ mid2;\n    }\n    long long ans = 1;\n    for (long long i = start; i <= end;\
    \ i++) {\n        ans *= i;\n    }\n    for (long long i = start2; i <= end2;\
    \ i++) {\n        ans /= i;\n    }\n    if (ans == 1) {\n        return \"NO\"\
    ;\n    }\n    return \"YES\";", "    long start = std::get<0>(interval1);\n  \
    \  long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long length = end - start;\n   \
    \ long length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n    \
    \    return \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\"\
    ;\n    }\n    if (length < length2) {\n        length = length2;\n    }\n    long\
    \ mid = (start + end) / 2;\n    long mid2 = (start2 + end2) / 2;\n    if (mid\
    \ == mid2) {\n        return \"NO\";\n    }\n    if (mid < mid2) {\n        length\
    \ = mid;\n    } else {\n        length = mid2;\n    }\n    long count = 0;\n \
    \   for (long i = start; i <= end; i++) {\n        for (long j = start2; j <=\
    \ end2; j++) {\n            if (i == j) {\n                count++;\n        \
    \    }\n        }\n    }\n    if (count == length) {\n        return \"YES\";\n\
    \    }\n    return \"NO\";", "    long long int a = std::get<0>(interval1);\n\
    \    long long int b = std::get<0>(interval2);\n    long long int c = std::get<1>(interval1);\n\
    \    long long int d = std::get<1>(interval2);\n    long long int min = a;\n \
    \   long long int max = b;\n    long long int ans = 0;\n    long long int flag\
    \ = 0;\n    long long int flag2 = 0;\n    long long int flag3 = 0;\n    long long\
    \ int flag4 = 0;\n    long long int flag5 = 0;\n    long long int flag6 = 0;\n\
    \    long long int flag7 = 0;\n    long long int flag8 = 0;\n    long long int\
    \ flag9 = 0;\n    long long int flag10 = 0;\n    long long int flag11 = 0;\n \
    \   long long int flag12 = 0;\n    long long int flag13 = 0;\n    long long int\
    \ flag14 = 0;\n    long long int flag15 = 0;\n    long long int flag16 = 0;\n\
    \    long long int flag17 = 0;\n    long long int flag18 = 0;\n    long long int\
    \ flag19 = 0;\n    long long int flag20 = 0;\n    long long int flag21 = 0;\n\
    \    long long int flag22 = 0;\n    long long int flag23 = 0;\n    long long int\
    \ flag24 = 0;\n    long long int flag25 = 0;\n    long long int flag26 = 0;\n\
    \    long long int flag27 = 0;\n    long long int flag28 = 0;\n    long long int\
    \ flag29 = 0;\n    long long int flag30 = 0;\n    long long int flag31 = 0;\n\
    \    long long int flag32 = 0;\n    long long int flag33 = 0;\n    long long int\
    \ flag34 = 0;\n    long long int flag35 = 0;\n    long long int flag36 = 0;\n\
    \    long long int flag37 = 0;\n    long long int flag38 = 0;\n    long long int\
    \ flag39 = 0;\n    long long int flag40 = 0;\n    long long int flag41 = 0;\n\
    \    long long int flag42 = 0;\n    long long int flag43 = 0;\n    long long int\
    \ flag44 = 0;\n    long long int flag45 = 0;\n    long long int flag46 = 0;\n\
    \    long long int flag47 = 0;\n    long long int flag48 = 0;\n    long long int\
    \ flag49 = 0;\n    long long int flag50 = 0;\n    long long int flag51 = 0;\n\
    \    long long int flag52 = 0;\n    long long int flag53 = 0;\n    long long int\
    \ flag54 = 0;\n    long long int flag55 = 0;\n    long long ", "    long long\
    \ start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = 0;\n    if (start < end) {\n        length = end - start;\n\
    \    } else if (start > end) {\n        length = start2 - end;\n    } else {\n\
    \        length = end2 - start2;\n    }\n    if (length == 1) {\n        return\
    \ \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\";\n    }\n   \
    \ if (length == 3) {\n        return \"YES\";\n    }\n    if (length == 5) {\n\
    \        return \"YES\";\n    }\n    if (length == 7) {\n        return \"YES\"\
    ;\n    }\n    if (length == 9) {\n        return \"YES\";\n    }\n    if (length\
    \ == 11) {\n        return \"YES\";\n    }\n    if (length == 13) {\n        return\
    \ \"YES\";\n    }\n    if (length == 17) {\n        return \"YES\";\n    }\n \
    \   if (length == 19) {\n        return \"YES\";\n    }\n    if (length == 23)\
    \ {\n        return \"YES\";\n    }\n    if (length == 29) {\n        return \"\
    YES\";\n    }\n    if (length == 31) {\n        return \"YES\";\n    }\n    if\
    \ (length == 37) {\n        return \"YES\";\n    }\n    if (length == 43) {\n\
    \        return \"YES\";\n    }\n    if (length == 59) {\n        return \"YES\"\
    ;\n    }\n    if (length == 67) {\n        return \"YES\";\n    }\n    if (length\
    \ == 73) {\n        return \"YES\";\n    }\n    if (length == 91) {\n        return\
    \ \"YES\";\n    }\n    if (length == 117) {\n        return \"YES\";\n    }\n\
    \    if (length == 131) {\n        return \"YES\";\n    }\n    if (length == 137)\
    \ {\n        return \"YES\";\n    }\n    if (length == 151) {\n        return\
    \ \"YES\";\n    }\n    if (length == 157) {\n        return \"YES\";\n    }\n\
    \    if (length == 161) {\n        return \"YES\";\n    }\n    if (length == 167)\
    \ {\n        return \"YES\";\n    }\n    if (length == 173) {\n        return\
    \ \"YES\";\n    }\n    if (length == 179) {\n        return \"YES\";\n    }\n\
    \    if (length == 181) {\n        return \"YES\";\n    }\n    if (length == 191)\
    \ {\n        return \"YES\";\n    }\n    if (length == 197) {\n        return\
    \ \"YES\";\n    }\n    if (length == 203) {\n        return \"YES\";\n    }\n\
    \    if (length == 209) {\n        return \"YES\";\n    }\n    if (length == 211)\
    \ {\n        return \"YES\";\n    }\n    if (length == 217) {\n        return\
    \ \"YES\";\n    }\n    if (length == 223) {\n        return \"", "    long long\
    \ int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = start1 < end2 ? start1 : end2;\n    long\
    \ long int endIntersection = start1 < end2 ? end2 : start1;\n    long long int\
    \ endIntersection2 = endIntersection;\n    long long int startIntersection2 =\
    \ start2 < end1 ? start2 : end1;\n    long long int endIntersection2 = end2 <\
    \ start1 ? end1 : start2;\n    long long int startIntersection3 = start2 < end1\
    \ ? start2 : end1;\n    long long int endIntersection3 = end2 < start1 ? end1\
    \ : start2;\n    long long int startIntersection4 = start2 < end1 ? start2 : end1;\n\
    \    long long int endIntersection4 = end2 < start1 ? end1 : start2;\n    long\
    \ long int startIntersection5 = start2 < end1 ? start2 : end1;\n    long long\
    \ int endIntersection5 = end2 < start1 ? end1 : start2;\n    long long int startIntersection6\
    \ = start2 < end1 ? start2 : end1;\n    long long int endIntersection6 = end2\
    \ < start1 ? end1 : start2;\n    long long int startIntersection7 = start2 < end1\
    \ ? start2 : end1;\n    long long int endIntersection7 = end2 < start1 ? end1\
    \ : start2;\n    long long int startIntersection8 = start2 < end1 ? start2 : end1;\n\
    \    long long int endIntersection8 = end2 < start1 ? end1 : start2;\n    long\
    \ long int startIntersection9 = start2 < end1 ? start2 : end1;\n    long long\
    \ int endIntersection9 = end2 < start1 ? end1 : start2;\n    long long int startIntersection10\
    \ = start2 < end1 ? start2 : end1;\n    long long int endIntersection10 = end2\
    \ < start1 ? end1 : start2;\n    long long int startIntersection11 = start2 <\
    \ end1 ? start2 : end1;\n    long long int endIntersection11 = end2 < start1 ?\
    \ end1 : start2;\n    long long int startIntersection12 = start2 < end1 ? start2\
    \ : end1;\n    long long int endIntersection12 = end2 < start1 ? end1 : start2;\n\
    \    long long int startIntersection13 = start2 < end1 ? start2 : end1;\n    long\
    \ long int endIntersection13 = end2 < start1 ? end1 : start2;\n    ", "    long\
    \ long start1 = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n\
    \    long long start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n\
    \    long long startIntersection = start1 < end2 ? start1 : end2;\n    long long\
    \ endIntersection = start1 < end2 ? end2 : start1;\n    long long lengthIntersection\
    \ = start1 < end2 ? end1 - start1 : end2 - start2;\n    long long length1 = end1\
    \ - start1;\n    long long length2 = end2 - start2;\n    long long lengthIntersection1\
    \ = lengthIntersection / length1;\n    long long lengthIntersection2 = lengthIntersection\
    \ / length2;\n    if (lengthIntersection1 == 0 || lengthIntersection2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (lengthIntersection1 % lengthIntersection2\
    \ == 0) {\n        return \"YES\";\n    }\n    return \"NO\";", "    long long\
    \ int start1 = std::get<0>(interval1);\n    long long int end1 = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end1 - start1;\n    long\
    \ long int length2 = end2 - start2;\n    long long int length3 = length * length;\n\
    \    long long int length4 = length2 * length2;\n    long long int length5 = length3\
    \ * length3;\n    long long int length6 = length4 * length4;\n    long long int\
    \ length7 = length5 * length5;\n    long long int length8 = length6 * length6;\n\
    \    long long int length9 = length7 * length7;\n    long long int length10 =\
    \ length8 * length8;\n    long long int length11 = length9 * length9;\n    long\
    \ long int length12 = length10 * length10;\n    long long int length13 = length11\
    \ * length11;\n    long long int length14 = length12 * length12;\n    long long\
    \ int length15 = length13 * length13;\n    long long int length16 = length14 *\
    \ length14;\n    long long int length17 = length15 * length15;\n    long long\
    \ int length18 = length16 * length16;\n    long long int length19 = length17 *\
    \ length17;\n    long long int length20 = length18 * length18;\n    long long\
    \ int length21 = length19 * length19;\n    long long int length22 = length20 *\
    \ length20;\n    long long int length23 = length21 * length21;\n    long long\
    \ int length24 = length22 * length22;\n    long long int length25 = length23 *\
    \ length23;\n    long long int length26 = length24 * length24;\n    long long\
    \ int length27 = length25 * length25;\n    long long int length28 = length26 *\
    \ length26;\n    long long int length29 = length27 * length27;\n    long long\
    \ int length30 = length28 * length28;\n    long long int length31 = length29 *\
    \ length29;\n    long long int length32 = length30 * length30;\n    long long\
    \ int length33 = length31 * length31;\n    long long int length34 = length32 *\
    \ length32;\n    long long int length35 = length33 * length33;\n    long long\
    \ int length36 = length34", "    long start = std::get<0>(interval1);\n    long\
    \ end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n \
    \   long end2 = std::get<1>(interval2);\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    if (length < length2) {\n        long temp = start;\n        start = end2;\n\
    \        end2 = temp;\n    }\n    long mid = start + (end - start) / 2;\n    if\
    \ (mid == start2) {\n        return \"YES\";\n    }\n    if (mid == end2) {\n\
    \        return \"NO\";\n    }\n    if (mid > start2 && mid < end2) {\n      \
    \  return \"YES\";\n    }\n    return \"NO\";", "    long long int start1 = std::get<0>(interval1);\n\
    \    long long int end1 = std::get<1>(interval1);\n    long long int start2 =\
    \ std::get<0>(interval2);\n    long long int end2 = std::get<1>(interval2);\n\
    \    long long int startIntersection = start1 < end2 ? start1 : end2;\n    long\
    \ long int endIntersection = start1 < end2 ? end1 : start2;\n    long long int\
    \ startIntersection2 = start2 < end1 ? start2 : end1;\n    long long int endIntersection2\
    \ = start2 < end1 ? end2 : start1;\n    long long int startIntersection3 = start1\
    \ < start2 ? start1 : start2;\n    long long int endIntersection3 = start1 < start2\
    \ ? end1 : end2;\n    long long int startIntersection4 = start2 < start1 ? start2\
    \ : start1;\n    long long int endIntersection4 = start2 < start1 ? end2 : end1;\n\
    \    long long int startIntersection5 = start1 < start2 ? start1 : start2;\n \
    \   long long int endIntersection5 = start1 < start2 ? end1 : end2;\n    long\
    \ long int startIntersection6 = start2 < start1 ? start2 : start1;\n    long long\
    \ int endIntersection6 = start2 < start1 ? end2 : end1;\n    long long int startIntersection7\
    \ = start1 < start2 ? start1 : start2;\n    long long int endIntersection7 = start1\
    \ < start2 ? end1 : end2;\n    long long int startIntersection8 = start2 < start1\
    \ ? start2 : start1;\n    long long int endIntersection8 = start2 < start1 ? end2\
    \ : end1;\n    long long int startIntersection9 = start1 < start2 ? start1 : start2;\n\
    \    long long int endIntersection9 = start1 < start2 ? end1 : end2;\n    long\
    \ long int startIntersection10 = start2 < start1 ? start2 : start1;\n    long\
    \ long int endIntersection10 = start2 < start1 ? end2 : end1;\n    long long int\
    \ startIntersection11 = start1 < start2 ? start1 : start2;\n    long long int\
    \ endIntersection11 = start1 < start2 ? end1 : end2;\n    long long int startIntersection12\
    \ = start2 < start1 ? start2 : start1;\n    long long int endIntersection12 =\
    \ start2 < start1 ? end2 : end1;\n    long long int startIntersection13 = start1\
    \ < start2 ? start1 : start2;\n    long long int endIntersection13 = start1 <\
    \ start2 ? end1 : end", "    long start = std::get<0>(interval1);\n    long end\
    \ = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\";\n\
    \    }\n    if (length == 1) {\n        return \"YES\";\n    }\n    if (length2\
    \ == 1) {\n        return \"NO\";\n    }\n    long mid = length / 2;\n    long\
    \ mid2 = length2 / 2;\n    long a = std::get<0>(interval1);\n    long b = std::get<1>(interval1);\n\
    \    long c = std::get<0>(interval2);\n    long d = std::get<1>(interval2);\n\
    \    long a2 = std::get<0>(interval1);\n    long b2 = std::get<1>(interval1);\n\
    \    long c2 = std::get<0>(interval2);\n    long d2 = std::get<1>(interval2);\n\
    \    long a3 = std::get<0>(interval1);\n    long b3 = std::get<1>(interval1);\n\
    \    long c3 = std::get<0>(interval2);\n    long d3 = std::get<1>(interval2);\n\
    \    long a4 = std::get<0>(interval1);\n    long b4 = std::get<1>(interval1);\n\
    \    long c4 = std::get<0>(interval2);\n    long d4 = std::get<1>(interval2);\n\
    \    long a5 = std::get<0>(interval1);\n    long b5 = std::get<1>(interval1);\n\
    \    long c5 = std::get<0>(interval2);\n    long d5 = std::get<1>(interval2);\n\
    \    long a6 = std::get<0>(interval1);\n    long b6 = std::get<1>(interval1);\n\
    \    long c6 = std::get<0>(interval2);\n    long d6 = std::get<1>(interval2);\n\
    \    long a7 = std::get<0>(interval1);\n    long b7 = std::get<1>(interval1);\n\
    \    long c7 = std::get<0>(interval2);\n    long d7 = std::get<1>(interval2);\n\
    \    long a8 = std::get<0>(interval1);\n    long b8 = std::get<1>(interval1);\n\
    \    long c8 = std::", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 > length) {\n       \
    \ length = length2;\n    }\n    if (length == 1) {\n        return \"NO\";\n \
    \   }\n    if (length == 2) {\n        return \"YES\";\n    }\n    if (length\
    \ == 3) {\n        if (length2 == 2) {\n            return \"YES\";\n        }\n\
    \        if (length2 == 3) {\n            return \"NO\";\n        }\n    }\n \
    \   if (length == 4) {\n        if (length2 == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length2 == 3) {\n            return \"NO\";\n      \
    \  }\n        if (length2 == 4) {\n            return \"YES\";\n        }\n  \
    \  }\n    if (length == 5) {\n        if (length2 == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length2 == 3) {\n            return \"NO\"\
    ;\n        }\n        if (length2 == 4) {\n            return \"YES\";\n     \
    \   }\n        if (length2 == 5) {\n            return \"YES\";\n        }\n \
    \   }\n    if (length == 6) {\n        if (length2 == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length2 == 3) {\n            return \"NO\"\
    ;\n        }\n        if (length2 == 4) {\n            return \"YES\";\n     \
    \   }\n        if (length2 == 5) {\n            return \"YES\";\n        }\n \
    \       if (length2 == 6) {\n            return \"YES\";\n        }\n    }\n \
    \   if (length == 7) {\n        if (length2 == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length2 == 3) {\n            return \"NO\";\n      \
    \  }\n        if (length2 == 4) {\n            return \"YES\";\n        }\n  \
    \      if (length2 == 5) {\n            return \"YES\";\n        }\n        if\
    \ (length2 == 6) {\n            return \"YES\";\n        }\n        if (length2\
    \ == 7) {\n            return \"YES\";\n        }\n    }\n    if (length == 8)\
    \ {\n        if (length2 == 2) {\n            return \"YES\";\n        }\n   \
    \     if (length2 == 3) {\n            return \"NO\";\n        }\n        if (length2\
    \ == 4) {\n            return \"YES\";\n        }\n        if (length2 == 5) {\n\
    \            return \"YES\";\n        }\n        if (length2 == 6) {\n       \
    \     return \"YES\";\n        }\n        if (length2 == 7) {\n            return\
    \ \"YES\";\n        }\n        if (length2 == 8) {\n            return \"YES\"\
    ;\n        }\n    }\n    if (length == 9) {\n        if (length2 == 2) {\n   \
    \         return \"YES\";\n        }\n        if (length2 == 3) {\n          \
    \  return \"NO\";\n        }\n        if (length2 == 4) {\n            return\
    \ \"YES\";\n        }\n        if (length2 == 5) {\n            return \"YES\"\
    ;\n        }\n        if (length2 == 6", "    // Write your code here\n    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == length2) {\n        if (length == 1) {\n            return\
    \ \"NO\";\n        }\n        if (length == 2) {\n            return \"YES\";\n\
    \        }\n        if (length == 2) {\n            return \"YES\";\n        }\n\
    \        if (length == 2) {\n            return \"YES\";\n        }\n        if\
    \ (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n        \
    \    return \"YES\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2) {\n            return \"YES\";\n      \
    \  }\n        if (length == 2) {\n            return \"YES\";\n        }\n   \
    \     if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n        \
    \    return \"YES\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2) {\n            return \"YES\";\n      \
    \  }\n        if (length == 2) {\n            return \"YES\";\n        }\n   \
    \     if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n        \
    \    return \"YES\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2) {\n            return \"YES\";\n      \
    \  }\n        if (length == 2) {\n            return \"YES\";\n        }\n   \
    \     if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n        \
    \    return \"YES\";\n        }\n        if (length == 2) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2) {\n            return \"YES\";\n      \
    \  }\n        if (length == 2) {\n            return \"YES\";\n        }\n   \
    \     if (length == 2) {\n            return \"YES\";\n        }\n        if (length\
    \ == 2) {\n            return \"YES\";\n        }\n        if (length == 2) {\n\
    \            return \"YES\";\n        }\n        if (length == 2) {\n", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long long length = (end - start) * (end2 - start2);\n    if (length\
    \ == 0) return \"NO\";\n    if (length == 1) return \"YES\";\n    if (length ==\
    \ 2) return \"YES\";\n    if (length == 3) return \"YES\";\n    if (length ==\
    \ 5) return \"YES\";\n    if (length == 7) return \"YES\";\n    if (length ==\
    \ 11) return \"YES\";\n    if (length == 13) return \"YES\";\n    if (length ==\
    \ 17) return \"YES\";\n    if (length == 19) return \"YES\";\n    if (length ==\
    \ 21) return \"YES\";\n    if (length == 23) return \"YES\";\n    if (length ==\
    \ 25) return \"YES\";\n    if (length == 27) return \"YES\";\n    if (length ==\
    \ 29) return \"YES\";\n    if (length == 31) return \"YES\";\n    if (length ==\
    \ 33) return \"YES\";\n    if (length == 35) return \"YES\";\n    if (length ==\
    \ 37) return \"YES\";\n    if (length == 39) return \"YES\";\n    if (length ==\
    \ 41) return \"YES\";\n    if (length == 43) return \"YES\";\n    if (length ==\
    \ 45) return \"YES\";\n    if (length == 47) return \"YES\";\n    if (length ==\
    \ 49) return \"YES\";\n    if (length == 51) return \"YES\";\n    if (length ==\
    \ 53) return \"YES\";\n    if (length == 55) return \"YES\";\n    if (length ==\
    \ 57) return \"YES\";\n    if (length == 59) return \"YES\";\n    if (length ==\
    \ 61) return \"YES\";\n    if (length == 63) return \"YES\";\n    if (length ==\
    \ 65) return \"YES\";\n    if (length == 67) return \"YES\";\n    if (length ==\
    \ 69) return \"YES\";\n    if (length == 71) return \"YES\";\n    if (length ==\
    \ 73) return \"YES\";\n    if (length == 75) return \"YES\";\n    if (length ==\
    \ 77) return \"YES\";\n    if (length == 79) return \"YES\";\n    if (length ==\
    \ 81) return \"YES\";\n    if (length == 83) return \"YES\";\n    if (length ==\
    \ 85) return \"YES\";\n    if (length == 87) return \"YES\";\n    if (length ==\
    \ 89) return \"YES\";\n    if (length == 91) return \"YES\";", "    long long\
    \ int start = std::get<0>(interval1);\n    long long int end = std::get<1>(interval1);\n\
    \    long long int start2 = std::get<0>(interval2);\n    long long int end2 =\
    \ std::get<1>(interval2);\n    long long int length = end - start;\n    long long\
    \ int length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\"\
    ;\n    }\n    if (length2 == 1) {\n        return \"YES\";\n    }\n    if (length2\
    \ == 2) {\n        if (length == 1) {\n            return \"YES\";\n        }\n\
    \        if (length == 2) {\n            if (start <= end2) {\n              \
    \  if (start <= end) {\n                    if (start <= end2) {\n           \
    \             if (start <= end) {\n                            if (start <= end2)\
    \ {\n                                if (start <= end) {\n                   \
    \                 if (start <= end2) {\n                                     \
    \   if (start <= end) {\n                                            return \"\
    YES\";\n                                        }\n                          \
    \              return \"NO\";\n                                    }\n       \
    \                             return \"NO\";\n                               \
    \ }\n                                return \"NO\";\n                        \
    \    }\n                            return \"NO\";\n                        }\n\
    \                        return \"NO\";\n                    }\n             \
    \       return \"NO\";\n                }\n                return \"NO\";\n  \
    \          }\n            return \"NO\";\n        }\n        return \"NO\";\n\
    \    }\n    return \"NO\";", "    // Your code here\n    long long int start1\
    \ = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n    long\
    \ long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int start1End = start1 + end1;\n    long long int start2End = start2\
    \ + end2;\n    long long int start1End2 = start1End + start2End;\n    long long\
    \ int start1End21 = start1End2 + start1End;\n    long long int start1End22 = start1End21\
    \ + start1End;\n    long long int start1End23 = start1End22 + start1End;\n   \
    \ long long int start1End24 = start1End23 + start1End;\n    long long int start1End25\
    \ = start1End24 + start1End;\n    long long int start1End26 = start1End25 + start1End;\n\
    \    long long int start1End27 = start1End26 + start1End;\n    long long int start1End28\
    \ = start1End27 + start1End;\n    long long int start1End29 = start1End28 + start1End;\n\
    \    long long int start1End30 = start1End29 + start1End;\n    long long int start1End31\
    \ = start1End30 + start1End;\n    long long int start1End32 = start1End31 + start1End;\n\
    \    long long int start1End33 = start1End32 + start1End;\n    long long int start1End34\
    \ = start1End33 + start1End;\n    long long int start1End35 = start1End34 + start1End;\n\
    \    long long int start1End36 = start1End35 + start1End;\n    long long int start1End37\
    \ = start1End36 + start1End;\n    long long int start1End38 = start1End37 + start1End;\n\
    \    long long int start1End39 = start1End38 + start1End;\n    long long int start1End40\
    \ = start1End39 + start1End;\n    long long int start1End41 = start1End40 + start1End;\n\
    \    long long int start1End42 = start1End41 + start1", "    long long start =\
    \ std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n    long\
    \ long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        return \"YES\";\n    }\n    if (length < length2)\
    \ {\n        std::swap(start, end);\n        std::swap(start2, end2);\n    }\n\
    \    long long mid = start + (end - start) / 2;\n    long long mid2 = start2 +\
    \ (end2 - start2) / 2;\n    if (mid == mid2) {\n        return \"NO\";\n    }\n\
    \    if (mid < mid2) {\n        std::swap(mid, mid2);\n    }\n    long long ans\
    \ = std::min(mid, mid2);\n    if (ans == mid) {\n        return \"YES\";\n   \
    \ }\n    if (ans == mid2) {\n        return \"YES\";\n    }\n    if (ans > mid)\
    \ {\n        std::swap(ans, mid);\n    }\n    if (ans > mid2) {\n        std::swap(ans,\
    \ mid2);\n    }\n    if (ans == 1) {\n        return \"YES\";\n    }\n    if (ans\
    \ == 2) {\n        return \"YES\";\n    }\n    if (ans == 3) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 4) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 5) {\n        return \"YES\";\n    }\n    if (ans == 6) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 7) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 8) {\n        return \"YES\";\n    }\n    if (ans == 9) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 10) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 11) {\n        return \"YES\";\n    }\n    if (ans == 12) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 13) {\n        return \"YES\";\n   \
    \ }\n    if (ans == 14) {\n        return \"YES\";\n    }\n    if (ans == 15)\
    \ {\n        return \"YES\";\n    }\n    if (ans == 16) {\n        return \"YES\"\
    ;\n    }\n    if (ans == 17) {\n        return \"YES\";\n    }\n    if (ans ==\
    \ 18) {\n        return \"YES\";\n    }\n    if (ans == 19) {\n        return\
    \ \"YES\";\n    }\n    if (ans == 20) {\n        return \"YES\";\n    }\n    if\
    \ (ans == 21) {\n        return \"YES\";\n    }\n    if (ans == 22) {\n      \
    \  return \"YES\";\n    }\n    if (ans == 23) {\n        return \"YES\";", " \
    \   long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 > length) {\n        std::swap(length, length2);\n    }\n   \
    \ if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if (length\
    \ == 1) {\n        return \"YES\";\n    }\n    if (length2 == 1) {\n        return\
    \ \"YES\";\n    }\n    long long mid = start + (length / 2);\n    long long mid2\
    \ = start2 + (length2 / 2);\n    long long mid3 = mid + 1;\n    long long mid4\
    \ = mid2 + 1;\n    long long mid5 = mid3 + 1;\n    long long mid6 = mid4 + 1;\n\
    \    long long mid7 = mid5 + 1;\n    long long mid8 = mid6 + 1;\n    long long\
    \ mid9 = mid7 + 1;\n    long long mid10 = mid8 + 1;\n    long long mid11 = mid9\
    \ + 1;\n    long long mid12 = mid10 + 1;\n    long long mid13 = mid11 + 1;\n \
    \   long long mid14 = mid12 + 1;\n    long long mid15 = mid13 + 1;\n    long long\
    \ mid16 = mid14 + 1;\n    long long mid17 = mid15 + 1;\n    long long mid18 =\
    \ mid16 + 1;\n    long long mid19 = mid17 + 1;\n    long long mid20 = mid18 +\
    \ 1;\n    long long mid21 = mid19 + 1;\n    long long mid22 = mid20 + 1;\n   \
    \ long long mid23 = mid21 + 1;\n    long long mid24 = mid22 + 1;\n    long long\
    \ mid25 = mid23 + 1;\n    long long mid26 = mid24 + 1;\n    long long mid27 =\
    \ mid25 + 1;\n    long long mid28 = mid26 + 1;\n    long long mid29 = mid27 +\
    \ 1;\n    long long mid30 = mid28 + 1;\n    long long mid31 = mid29 + 1;\n   \
    \ long long mid32 = mid30 + 1;\n    long long mid33 = mid31 + 1;\n    long long\
    \ mid34 = mid32 + 1;\n    long long mid35 = mid33 + 1;\n    long long mid36 =\
    \ mid", "    long long int start = std::get<0>(interval1);\n    long long int\
    \ end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    if (start > end) {\n  \
    \      std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if\
    \ (start2 > end2) {\n        std::swap(start2, end2);\n    }\n    if (start >\
    \ start2) {\n        return \"NO\";\n    }\n    if (end < end2) {\n        return\
    \ \"NO\";\n    }\n    long long int start3 = std::max(start, end2);\n    long\
    \ long int end3 = std::min(start, end2);\n    long long int start4 = std::max(start2,\
    \ end2);\n    long long int end4 = std::min(start2, end2);\n    long long int\
    \ start5 = std::max(start3, end3);\n    long long int end5 = std::min(start3,\
    \ end3);\n    long long int start6 = std::max(start4, end4);\n    long long int\
    \ end6 = std::min(start4, end4);\n    long long int start7 = std::max(start5,\
    \ end5);\n    long long int end7 = std::min(start5, end5);\n    long long int\
    \ start8 = std::max(start6, end6);\n    long long int end8 = std::min(start6,\
    \ end6);\n    long long int start9 = std::max(start7, end7);\n    long long int\
    \ end9 = std::min(start7, end7);\n    long long int start10 = std::max(start8,\
    \ end8);\n    long long int end10 = std::min(start8, end8);\n    long long int\
    \ start11 = std::max(start9, end9);\n    long long int end11 = std::min(start9,\
    \ end9);\n    long long int start12 = std::max(start10, end10);\n    long long\
    \ int end12 = std::min(start10, end10);\n    long long int start13 = std::max(start11,\
    \ end11);\n    long long int end13 = std::min(start11, end11);\n    long long\
    \ int start14 = std::max(start12, end12);\n    long long int end14 = std::min(start12,\
    \ end12);\n    long long int start15 = std::max(start13, end13);\n    long long\
    \ int end15 = std::min(start13, end13);\n    long long int start16 = std::max(start14,\
    \ end14);\n    long long int end16 = std::min(start14, end14);\n    long long\
    \ int start17 = std::max(start15, end15);\n    long long int end17 = std::min(start",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n    if\
    \ (start > end) {\n        std::swap(start, end);\n    }\n    long long length\
    \ = end - start;\n    if (length == 1) {\n        return \"NO\";\n    }\n    if\
    \ (length == 2) {\n        return \"YES\";\n    }\n    long long mid = start +\
    \ (end - start) / 2;\n    if (mid == 1) {\n        return \"NO\";\n    }\n   \
    \ if (mid == 2) {\n        return \"YES\";\n    }\n    if (mid == 3) {\n     \
    \   return \"YES\";\n    }\n    if (mid == 4) {\n        return \"YES\";\n   \
    \ }\n    if (mid == 5) {\n        return \"YES\";\n    }\n    if (mid == 6) {\n\
    \        return \"YES\";\n    }\n    if (mid == 7) {\n        return \"YES\";\n\
    \    }\n    if (mid == 8) {\n        return \"YES\";\n    }\n    if (mid == 9)\
    \ {\n        return \"YES\";\n    }\n    if (mid == 10) {\n        return \"YES\"\
    ;\n    }\n    if (mid == 11) {\n        return \"YES\";\n    }\n    if (mid ==\
    \ 12) {\n        return \"YES\";\n    }\n    if (mid == 13) {\n        return\
    \ \"YES\";\n    }\n    if (mid == 14) {\n        return \"YES\";\n    }\n    if\
    \ (mid == 15) {\n        return \"YES\";\n    }\n    if (mid == 16) {\n      \
    \  return \"YES\";\n    }\n    if (mid == 17) {\n        return \"YES\";\n   \
    \ }\n    if (mid == 18) {\n        return \"YES\";\n    }\n    if (mid == 19)\
    \ {\n        return \"YES\";\n    }\n    if (mid == 20) {\n        return \"YES\"\
    ;\n    }\n    if (mid == 21) {\n        return \"YES\";\n    }\n    if (mid ==\
    \ 22) {\n        return \"YES\";\n    }\n    if (mid == 23) {\n        return\
    \ \"YES\";\n    }\n    if (mid == 24) {\n        return \"YES\";\n    }\n    if\
    \ (mid == 25) {\n        return \"YES\";\n    }\n    if (mid == 26) {\n      \
    \  return \"YES\";\n    }\n    if (mid == 27) {\n        return \"YES\";\n   \
    \ }\n    if (mid == 28) {\n        return \"YES\";\n    }\n    if (mid == 29)\
    \ {\n        return \"YES\";\n    }\n    if (mid == 30) {\n        return \"YES\"\
    ;\n    }\n    if (mid == 31) {\n        return \"YES\";\n    }\n    if (mid ==\
    \ 32) {\n        return \"YES\";\n    }\n    if (mid == 33) {\n        return\
    \ \"YES\";\n    }\n    if (mid == 34) {\n        return \"YES\";\n    }\n    if\
    \ (mid == 35) {\n        return \"YES", "    long long int start1 = interval1.get<0>();\n\
    \    long long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int startIntersection\
    \ = start1 < start2 ? start1 : start2;\n    long long int endIntersection = end1\
    \ < end2 ? end1 : end2;\n    long long int startIntersectionEnd = start1 < start2\
    \ ? start2 : start1;\n    long long int endIntersectionEnd = end1 < end2 ? end2\
    \ : end1;\n    long long int startIntersectionEnd2 = start1 < start2 ? start1\
    \ : start2;\n    long long int endIntersectionEnd2 = end1 < end2 ? end2 : end1;\n\
    \    long long int startIntersectionEnd3 = start1 < start2 ? start2 : start1;\n\
    \    long long int endIntersectionEnd3 = end1 < end2 ? end2 : end1;\n    long\
    \ long int startIntersectionEnd4 = start1 < start2 ? start1 : start2;\n    long\
    \ long int endIntersectionEnd4 = end1 < end2 ? end2 : end1;\n    long long int\
    \ startIntersectionEnd5 = start1 < start2 ? start2 : start1;\n    long long int\
    \ endIntersectionEnd5 = end1 < end2 ? end2 : end1;\n    long long int startIntersectionEnd6\
    \ = start1 < start2 ? start1 : start2;\n    long long int endIntersectionEnd6\
    \ = end1 < end2 ? end2 : end1;\n    long long int startIntersectionEnd7 = start1\
    \ < start2 ? start2 : start1;\n    long long int endIntersectionEnd7 = end1 <\
    \ end2 ? end2 : end1;\n    long long int startIntersectionEnd8 = start1 < start2\
    \ ? start2 : start1;\n    long long int endIntersectionEnd8 = end1 < end2 ? end2\
    \ : end1;\n    long long int startIntersectionEnd9 = start1 < start2 ? start2\
    \ : start1;\n    long long int endIntersectionEnd9 = end1 < end2 ? end2 : end1;\n\
    \    long long int startIntersectionEnd10 = start1 < start2 ? start2 : start1;\n\
    \    long long int endIntersectionEnd10 = end1 < end2 ? end2 : end1;\n    long\
    \ long int startIntersectionEnd11 = start1 < start2 ? start2 : start1;\n    long\
    \ long int endIntersectionEnd11 = end1 < end2 ? end2 : end1;\n    long long int\
    \ startIntersectionEnd", "    long long int a = interval1.get<0>();\n    long\
    \ long int b = interval1.get<1>();\n    long long int c = interval2.get<0>();\n\
    \    long long int d = interval2.get<1>();\n    long long int e = (a + b) / 2;\n\
    \    long long int f = (c + d) / 2;\n    if (e > f) {\n        std::swap(a, b);\n\
    \        std::swap(c, d);\n        std::swap(e, f);\n    }\n    long long int\
    \ g = e - f;\n    if (g == 1) {\n        return \"YES\";\n    }\n    if (g ==\
    \ 2) {\n        return \"NO\";\n    }\n    if (g > 2) {\n        return \"NO\"\
    ;\n    }\n    if (g == 1) {\n        return \"YES\";\n    }\n    if (g == 2) {\n\
    \        return \"NO\";\n    }\n    if (g > 2) {\n        return \"NO\";\n   \
    \ }\n    if (g == 1) {\n        return \"YES\";\n    }\n    if (g == 2) {\n  \
    \      return \"NO\";\n    }\n    if (g > 2) {\n        return \"NO\";\n    }\n\
    \    if (g == 1) {\n        return \"YES\";\n    }\n    if (g == 2) {\n      \
    \  return \"NO\";\n    }\n    if (g > 2) {\n        return \"NO\";\n    }\n  \
    \  if (g == 1) {\n        return \"YES\";\n    }\n    if (g == 2) {\n        return\
    \ \"NO\";\n    }\n    if (g > 2) {\n        return \"NO\";\n    }\n    if (g ==\
    \ 1) {\n        return \"YES\";\n    }\n    if (g == 2) {\n        return \"NO\"\
    ;\n    }\n    if (g > 2) {\n        return \"NO\";\n    }\n    if (g == 1) {\n\
    \        return \"YES\";\n    }\n    if (g == 2) {\n        return \"NO\";\n \
    \   }\n    if (g > 2) {\n        return \"NO\";\n    }\n    if (g == 1) {\n  \
    \      return \"YES\";\n    }\n    if (g == 2) {\n        return \"NO\";\n   \
    \ }\n    if (g > 2) {\n        return \"NO\";\n    }\n    if (g == 1) {\n    \
    \    return \"YES\";\n    }\n    if (g == 2) {\n        return \"NO\";\n    }\n\
    \    if (g > 2) {\n        return \"NO\";\n    }\n    if (g == 1) {\n        return\
    \ \"YES\";\n    }\n    if (g == 2) {\n        return \"NO\";\n    }\n    if (g\
    \ > 2) {\n        return \"NO\";\n    }\n    if (g == 1) {\n        return \"\
    YES\";\n    }\n    if (g == 2) {\n        return \"NO\";\n    }\n    if (g > 2)\
    \ {\n        return \"NO\";\n    }\n    if (g == 1) {\n        return \"YES\"\
    ;\n    }\n    if (g == 2) {\n        return \"NO\";\n    }\n    if (g > 2) {\n\
    \        return \"NO\";\n    }\n    if (g == 1) {\n        return \"YES\";\n",
  "    long long int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = start1 < end2 ? start1 : end2;\n    long\
    \ long int endIntersection = start1 < end2 ? end2 : start1;\n    long long int\
    \ endIntersection2 = start2 < end1 ? end2 : start2;\n    long long int endIntersection3\
    \ = start2 < end1 ? start2 : end1;\n    long long int endIntersection4 = start1\
    \ < end2 ? end1 : start2;\n    long long int endIntersection5 = start1 < end2\
    \ ? start2 : end1;\n    long long int endIntersection6 = start1 < end2 ? end1\
    \ : end2;\n    long long int endIntersection7 = start1 < end2 ? end2 : start1;\n\
    \    long long int endIntersection8 = start2 < end1 ? end1 : start2;\n    long\
    \ long int endIntersection9 = start2 < end1 ? start2 : end1;\n    long long int\
    \ endIntersection10 = start1 < end2 ? end2 : start1;\n    long long int endIntersection11\
    \ = start2 < end1 ? end1 : start2;\n    long long int endIntersection12 = start2\
    \ < end1 ? start2 : end1;\n    long long int endIntersection13 = start1 < end2\
    \ ? end2 : start1;\n    long long int endIntersection14 = start2 < end1 ? end1\
    \ : start2;\n    long long int endIntersection15 = start2 < end1 ? start2 : end1;\n\
    \    long long int endIntersection16 = start1 < end2 ? end2 : start1;\n    long\
    \ long int endIntersection17 = start2 < end1 ? end1 : start2;\n    long long int\
    \ endIntersection18 = start2 < end1 ? start2 : end1;\n    long long int endIntersection19\
    \ = start1 < end2 ? end2 : start1;\n    long long int endIntersection20 = start2\
    \ < end1 ? end1 : start2;\n    long long int endIntersection21 = start2 < end1\
    \ ? start2 : end1;\n    long long int endIntersection22 = start2 < end1 ? end1\
    \ : start2;\n    long long int endIntersection23 = start1 < end2 ? end2 : start1;\n\
    \    long long int endIntersection24 = start2 < end1 ? end1 : start2;\n    long\
    \ long int endIntersection25 = start2 < end", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = 0;\n   \
    \ long long length2 = 0;\n    long long length3 = 0;\n    long long length4 =\
    \ 0;\n    long long length5 = 0;\n    long long length6 = 0;\n    long long length7\
    \ = 0;\n    long long length8 = 0;\n    long long length9 = 0;\n    long long\
    \ length10 = 0;\n    long long length11 = 0;\n    long long length12 = 0;\n  \
    \  long long length13 = 0;\n    long long length14 = 0;\n    long long length15\
    \ = 0;\n    long long length16 = 0;\n    long long length17 = 0;\n    long long\
    \ length18 = 0;\n    long long length19 = 0;\n    long long length20 = 0;\n  \
    \  long long length21 = 0;\n    long long length22 = 0;\n    long long length23\
    \ = 0;\n    long long length24 = 0;\n    long long length25 = 0;\n    long long\
    \ length26 = 0;\n    long long length27 = 0;\n    long long length28 = 0;\n  \
    \  long long length29 = 0;\n    long long length30 = 0;\n    long long length31\
    \ = 0;\n    long long length32 = 0;\n    long long length33 = 0;\n    long long\
    \ length34 = 0;\n    long long length35 = 0;\n    long long length36 = 0;\n  \
    \  long long length37 = 0;\n    long long length38 = 0;\n    long long length39\
    \ = 0;\n    long long length40 = 0;\n    long long length41 = 0;\n    long long\
    \ length42 = 0;\n    long long length43 = 0;\n    long long length44 = 0;\n  \
    \  long long length45 = 0;\n    long long length46 = 0;\n    long long length47\
    \ = 0;\n    long long length48 = 0;\n    long long length49 = 0;\n    long long\
    \ length50 = 0;\n    long long length51 = 0;\n    long long length52 = 0;\n  \
    \  long long length53 = 0;\n    long long length54 = 0;\n    long long length55\
    \ = 0;\n    long long length56 = 0;\n    long long length57 = 0;\n    long long\
    \ length58 = 0;\n    long long length59 = 0;\n    long long length60 = 0;\n  \
    \  long long length61 = 0;\n    long long length62 = 0;\n    long long length63\
    \ = 0;\n    long long length64 = 0;\n    long long length65 = 0;\n    long long\
    \ length66 = 0;\n    long long length67", "    long long int l1 = std::get<0>(interval1);\n\
    \    long long int l2 = std::get<0>(interval2);\n    long long int r1 = std::get<1>(interval1);\n\
    \    long long int r2 = std::get<1>(interval2);\n    long long int l3 = l1 + l2;\n\
    \    long long int r3 = r1 + r2;\n    if (l3 > r3) {\n        std::swap(l3, r3);\n\
    \    }\n    if (l3 > r3) {\n        return \"NO\";\n    }\n    if (l3 == r3) {\n\
    \        if (l1 < l2) {\n            return \"NO\";\n        }\n        return\
    \ \"YES\";\n    }\n    long long int l4 = l3 - r3;\n    if (l4 > 1) {\n      \
    \  return \"NO\";\n    }\n    if (l4 == 1) {\n        return \"YES\";\n    }\n\
    \    long long int r4 = r3 - l3;\n    if (r4 > 1) {\n        return \"NO\";\n\
    \    }\n    if (r4 == 1) {\n        return \"YES\";\n    }\n    long long int\
    \ l5 = l3 - r3;\n    long long int r5 = r3 - l3;\n    if (l5 > r5) {\n       \
    \ std::swap(l5, r5);\n    }\n    if (l5 > r5) {\n        return \"NO\";\n    }\n\
    \    if (l5 == r5) {\n        if (l1 < l2) {\n            return \"NO\";\n   \
    \     }\n        return \"YES\";\n    }\n    long long int l6 = l5 - r5;\n   \
    \ if (l6 > 1) {\n        return \"NO\";\n    }\n    if (l6 == 1) {\n        return\
    \ \"YES\";\n    }\n    long long int r6 = r5 - l5;\n    if (r6 > 1) {\n      \
    \  return \"NO\";\n    }\n    if (r6 == 1) {\n        return \"YES\";\n    }\n\
    \    long long int l7 = l5 - r5;\n    long long int r7 = r5 - l5;\n    if (l7\
    \ > r7) {\n        std::swap(l7, r7);\n    }\n    if (l7 > r7) {\n        return\
    \ \"NO\";\n    }\n    if (l7 == r7) {\n        if (l1 < l2) {\n            return\
    \ \"NO\";\n        }\n        return \"YES\";\n    }\n    long long int l8 = r7\
    \ - l7;\n    if (l8 > 1) {\n        return \"NO\";\n    }\n    if (l8 == 1) {\n\
    \        return \"YES\";\n    }\n    long long int r8 = r7 - l7;\n    if (r8 >\
    \ 1) {\n        return \"NO\";\n    }\n    if (r8 == 1) {\n        return \"YES\"\
    ;\n    }\n    long long int ", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 > length) {\n       \
    \ length = length2;\n    }\n    if (length == 1) {\n        return \"NO\";\n \
    \   }\n    if (length == 2) {\n        return \"YES\";\n    }\n    if (length\
    \ == -1) {\n        return \"NO\";\n    }\n    if (length == -2) {\n        return\
    \ \"YES\";\n    }\n    if (length == -3) {\n        return \"YES\";\n    }\n \
    \   if (length == -4) {\n        return \"YES\";\n    }\n    if (length == -5)\
    \ {\n        return \"YES\";\n    }\n    if (length == -6) {\n        return \"\
    YES\";\n    }\n    if (length == -7) {\n        return \"YES\";\n    }\n    if\
    \ (length == -8) {\n        return \"YES\";\n    }\n    if (length == 9) {\n \
    \       return \"YES\";\n    }\n    if (length == 10) {\n        return \"YES\"\
    ;\n    }\n    if (length == 11) {\n        return \"YES\";\n    }\n    if (length\
    \ == 12) {\n        return \"YES\";\n    }\n    if (length == 13) {\n        return\
    \ \"YES\";\n    }\n    if (length == 14) {\n        return \"YES\";\n    }\n \
    \   if (length == 15) {\n        return \"YES\";\n    }\n    if (length == 16)\
    \ {\n        return \"YES\";\n    }\n    if (length == 17) {\n        return \"\
    YES\";\n    }\n    if (length == 18) {\n        return \"YES\";\n    }\n    if\
    \ (length == 19) {\n        return \"YES\";\n    }\n    if (length == 20) {\n\
    \        return \"YES\";\n    }\n    if (length == 21) {\n        return \"YES\"\
    ;\n    }\n    if (length == 22) {\n        return \"YES\";\n    }\n    if (length\
    \ == 23) {\n        return \"YES\";\n    }\n    if (length == 24) {\n        return\
    \ \"YES\";\n    }\n    if (length == 25) {\n        return \"YES\";\n    }\n \
    \   if (length == 26) {\n        return \"YES\";\n    }\n    if (length == 27)\
    \ {\n        return \"YES\";\n    }\n    if (length == 28) {\n        return \"\
    YES\";\n    }\n    if (length == 29) {\n        return \"YES\";\n    }\n    if\
    \ (length == 30) {\n        return \"YES\";\n    }\n    if (length == 31) {\n\
    \        return \"YES\";\n    }\n    if (length == 32) {\n        return \"YES\"\
    ;\n    }\n    if (length == 33) {\n        return \"YES\";\n    }\n    if (length\
    \ == 34) {\n        return \"YES\";\n    }\n    if (length == 35) {\n        return\
    \ \"YES\";\n    }", "    long start = std::get<0>(interval1);\n    long end =\
    \ std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n    long\
    \ end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long length = end - start;\n    long\
    \ length2 = end2 - start2;\n    if (length2 == 0) {\n        return \"NO\";\n\
    \    }\n    if (length == 1) {\n        return \"YES\";\n    }\n    long ans =\
    \ 1;\n    for (long i = 2; i <= length2; i++) {\n        if (length % i == 0)\
    \ {\n            ans = ans * i;\n        }\n    }\n    if (ans == 1) {\n     \
    \   return \"YES\";\n    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    if (start > start2)\
    \ {\n        return \"NO\";\n    }\n    if (end < end2) {\n        return \"NO\"\
    ;\n    }\n    long long mid = (start + end) / 2;\n    long long mid2 = (start2\
    \ + end2) / 2;\n    if (mid > mid2) {\n        return \"NO\";\n    }\n    long\
    \ long len1 = end - start;\n    long long len2 = end2 - start2;\n    if (len1\
    \ == 0 || len2 == 0) {\n        return \"NO\";\n    }\n    long long len3 = len1\
    \ * len2;\n    if (len3 == 1) {\n        return \"YES\";\n    }\n    if (len3\
    \ % 2 == 0) {\n        return \"NO\";\n    }\n    long long len4 = len3 / 2;\n\
    \    long long len5 = len3 / 2;\n    long long len6 = len3 / 2;\n    long long\
    \ len7 = len3 / 2;\n    long long len8 = len3 / 2;\n    long long len9 = len3\
    \ / 2;\n    long long len10 = len3 / 2;\n    long long len11 = len3 / 2;\n   \
    \ long long len12 = len3 / 2;\n    long long len13 = len3 / 2;\n    long long\
    \ len14 = len3 / 2;\n    long long len15 = len3 / 2;\n    long long len16 = len3\
    \ / 2;\n    long long len17 = len3 / 2;\n    long long len18 = len3 / 2;\n   \
    \ long long len19 = len3 / 2;\n    long long len20 = len3 / 2;\n    long long\
    \ len21 = len3 / 2;\n    long long len22 = len3 / 2;\n    long long len23 = len3\
    \ / 2;\n    long long len24 = len3 / 2;\n    long long len25 = len3 / 2;\n   \
    \ long long len26 = len3 / 2;\n    long long len27 = len3 / 2;\n    long long\
    \ len28 = len3 / 2;\n    long long len29 = len3 / 2;\n    long long len30 = len3\
    \ / 2;\n    long long len31 = len", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n\
    \    end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long length = end - start;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    long long mid = start + (end - start) / 2;\n    long long a = std::get<0>(interval1);\n\
    \    long long b = std::get<1>(interval1);\n    long long c = std::get<0>(interval2);\n\
    \    long long d = std::get<1>(interval2);\n    if (a > b) {\n        std::swap(a,\
    \ b);\n    }\n    if (c > d) {\n        std::swap(c, d);\n    }\n    if (a < c)\
    \ {\n        std::swap(a, c);\n    }\n    if (b < d) {\n        std::swap(b, d);\n\
    \    }\n    if (a > b) {\n        std::swap(a, b);\n    }\n    if (c > d) {\n\
    \        std::swap(c, d);\n    }\n    if (a < c) {\n        std::swap(a, c);\n\
    \    }\n    if (b < d) {\n        std::swap(b, d);\n    }\n    if (a > b) {\n\
    \        std::swap(a, b);\n    }\n    if (c > d) {\n        std::swap(c, d);\n\
    \    }\n    if (a < c) {\n        std::swap(a, c);\n    }\n    if (b < d) {\n\
    \        std::swap(b, d);\n    }\n    if (a > b) {\n        std::swap(a, b);\n\
    \    }\n    if (c > d) {\n        std::swap(c, d);\n    }\n    if (a < c) {\n\
    \        std::swap(a, c);\n    }\n    if (b < d) {\n        std::swap(b, d);\n\
    \    }\n    if (a > b) {\n        std::swap(a, b);\n    }\n    if (c > d) {\n\
    \        std::swap(c, d);\n    }\n    if (a < c) {\n        std::swap(a, c);\n\
    \    }\n    if (b < d) {\n        std::swap(b, d);\n    }\n    if (a > b) {\n\
    \        std::swap(a, b);\n    }\n    if (c > d) {\n        std::swap(c, d);\n\
    \    }\n    if (a < c) {\n        std::swap(a, c);\n    }\n    if (b < d) {\n\
    \        std::swap(b, d);\n    }\n    if (a > b) {\n        std::swap(a, b);\n\
    \    }\n    if (c > d) {\n        std::swap(c, d);\n    }\n    if (a < c) {\n\
    \        std::swap(a, c);\n    }\n", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long start = std::min(start, end);\n\
    \    long end = std::max(start, end);\n    long start2 = std::min(start2, end2);\n\
    \    long end2 = std::max(start2, end2);\n    long intersection = end - start;\n\
    \    long intersection2 = end2 - start2;\n    if (intersection == 0 && intersection2\
    \ == 0) {\n        return \"NO\";\n    }\n    if (intersection != 0 && intersection2\
    \ == 0) {\n        return \"NO\";\n    }\n    if (intersection == 0 && intersection2\
    \ != 0) {\n        return \"YES\";\n    }\n    if (intersection != 0 && intersection2\
    \ != 0) {\n        if (intersection % intersection2 == 0) {\n            return\
    \ \"YES\";\n        } else {\n            return \"NO\";\n        }\n    }", " \
    \   long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    long long\
    \ length = 0;\n    long long length2 = 0;\n    while (start <= end) {\n      \
    \  long long mid = (start + end) / 2;\n        if (mid > start2 && mid < end2)\
    \ {\n            length = mid - start;\n            break;\n        }\n      \
    \  start = mid + 1;\n    }\n    while (start2 <= end2) {\n        long long mid\
    \ = (start2 + end2) / 2;\n        if (mid > start && mid < end) {\n          \
    \  length2 = mid - start2;\n            break;\n        }\n        start2 = mid\
    \ + 1;\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    return \"NO\";", "    long long int l1 = interval1.get<0>();\n    long long\
    \ int l2 = interval2.get<0>();\n    long long int r1 = interval1.get<1>();\n \
    \   long long int r2 = interval2.get<1>();\n    long long int l3 = l1;\n    long\
    \ long int r3 = r1;\n    long long int l4 = l2;\n    long long int r4 = r2;\n\
    \    long long int l5 = l3;\n    long long int r5 = r3;\n    long long int l6\
    \ = l4;\n    long long int r6 = r4;\n    long long int l7 = l5;\n    long long\
    \ int r7 = r5;\n    long long int l8 = l6;\n    long long int r8 = r6;\n    long\
    \ long int l9 = l7;\n    long long int r9 = r7;\n    long long int l10 = l8;\n\
    \    long long int r10 = r8;\n    long long int l11 = l9;\n    long long int r11\
    \ = r9;\n    long long int l12 = l10;\n    long long int r12 = r10;\n    long\
    \ long int l13 = l11;\n    long long int r13 = r11;\n    long long int l14 = l12;\n\
    \    long long int r14 = r12;\n    long long int l15 = l13;\n    long long int\
    \ r15 = r13;\n    long long int l16 = l14;\n    long long int r16 = r14;\n   \
    \ long long int l17 = l15;\n    long long int r17 = r15;\n    long long int l18\
    \ = l16;\n    long long int r18 = r16;\n    long long int l19 = l17;\n    long\
    \ long int r19 = r17;\n    long long int l20 = l18;\n    long long int r20 = r18;\n\
    \    long long int l21 = l19;\n    long long int r21 = r19;\n    long long int\
    \ l22 = l20;\n    long long int r22 = r20;\n    long long int l23 = l21;\n   \
    \ long long int r23 = r21;\n    long long int l24 = l22;\n    long long int r24\
    \ = r22;\n    long long int l25 = l23;\n    long long int r25 = r23;\n    long\
    \ long int l26 = l24;\n    long long int r26 = r24;\n    long long ", "    long\
    \ start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n  \
    \  long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    long length = end - start;\n    long length2 = end2 - start2;\n    if (length2\
    \ == 0) {\n        return \"NO\";\n    }\n    if (length < length2) {\n      \
    \  return \"NO\";\n    }\n    long mid = start + (end - start) / 2;\n    long\
    \ mid2 = start2 + (end2 - start2) / 2;\n    long count = 0;\n    for (long i =\
    \ start; i <= mid; i++) {\n        for (long j = start2; j <= mid2; j++) {\n \
    \           if (i == j) {\n                count++;\n            }\n        }\n\
    \    }\n    if (count == length2) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    long long int start1 = interval1.get<0>();\n    long long int\
    \ end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int start = std::min(start1,\
    \ start2);\n    long long int end = std::max(end1, end2);\n    long long int length\
    \ = end - start;\n    if (length == 0) return \"NO\";\n    long long int mid =\
    \ start + (length / 2);\n    if (mid % 2 == 0) return \"NO\";\n    long long int\
    \ count = 1;\n    long long int flag = 0;\n    for (long long int i = start; i\
    \ <= end; i++) {\n        if (i == mid) {\n            flag = 1;\n           \
    \ break;\n        }\n        if (flag == 1) {\n            count++;\n        }\n\
    \    }\n    if (count == length) return \"YES\";\n    return \"NO\";", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == 0 || length2 == 0) {\n        return \"NO\";\n    }\n    if\
    \ (length == length2) {\n        if (length == 1) {\n            return \"YES\"\
    ;\n        }\n        if (length == 2) {\n            if (start <= start2 && end\
    \ >= end2) {\n                return \"YES\";\n            }\n        }\n    }\n\
    \    if (length < length2) {\n        if (start <= start2 && end >= end2) {\n\
    \            return \"YES\";\n        }\n    }\n    return \"NO\";", "    // Write\
    \ your code here\n    long long start = std::get<0>(interval1);\n    long long\
    \ end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length == length2) {\n        return\
    \ \"YES\";\n    }\n    if (length < length2) {\n        long long temp = start;\n\
    \        start = end2;\n        end2 = temp;\n    }\n    long long mid = (start\
    \ + end) / 2;\n    long long mid2 = start2;\n    long long count = 0;\n    while\
    \ (start <= mid && mid2 <= end2) {\n        if (mid % mid2 == 0) {\n         \
    \   count++;\n        }\n        mid++;\n        mid2++;\n    }\n    if (count\
    \ == length / 2) {\n        return \"YES\";\n    }\n    return \"NO\";", "   \
    \ long long start1 = std::get<0>(interval1);\n    long long end1 = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end1 - start1;\n    long long length2 = end2 - start2;\n\
    \    long long length3 = length * length2;\n    long long length4 = length3 *\
    \ length;\n    long long length5 = length4 * length;\n    long long length6 =\
    \ length5 * length;\n    long long length7 = length6 * length;\n    long long\
    \ length8 = length7 * length;\n    long long length9 = length8 * length;\n   \
    \ long long length10 = length9 * length;\n    long long length11 = length10 *\
    \ length;\n    long long length12 = length11 * length;\n    long long length13\
    \ = length12 * length;\n    long long length14 = length13 * length;\n    long\
    \ long length15 = length14 * length;\n    long long length16 = length15 * length;\n\
    \    long long length17 = length16 * length;\n    long long length18 = length17\
    \ * length;\n    long long length19 = length18 * length;\n    long long length20\
    \ = length19 * length;\n    long long length21 = length20 * length;\n    long\
    \ long length22 = length21 * length;\n    long long length23 = length22 * length;\n\
    \    long long length24 = length23 * length;\n    long long length25 = length24\
    \ * length;\n    long long length26 = length25 * length;\n    long long length27\
    \ = length26 * length;\n    long long length28 = length27 * length;\n    long\
    \ long length29 = length28 * length;\n    long long length30 = length29 * length;\n\
    \    long long length31 = length30 * length;\n    long long length32 = length31\
    \ * length;\n    long long length33 = length32 * length;\n    long long length34\
    \ = length33 * length;\n    long long length35 = length34 * length;\n    long\
    \ long length36 = length35 * length;\n    long long length37 = length36 * length;\n\
    \    long long length38 = length37 * length;\n    long long length39 = length38\
    \ * length;\n    long long length40 = length39 * length;\n    long long length41\
    \ = length40 * length;\n    long long length42 = length41 * length;\n    long\
    \ long length43 = length42 * length;\n    long long length44", "    long long\
    \ start1 = interval1.get<0>();\n    long long end1 = interval1.get<1>();\n   \
    \ long long start2 = interval2.get<0>();\n    long long end2 = interval2.get<1>();\n\
    \    long long startIntersection = std::min(start1, start2);\n    long long endIntersection\
    \ = std::max(end1, end2);\n    long long intersectionLength = endIntersection\
    \ - startIntersection;\n    if (intersectionLength == 0)\n        return \"NO\"\
    ;\n    if (startIntersection == endIntersection)\n        return \"YES\";\n  \
    \  if (startIntersection > endIntersection)\n        return \"NO\";\n    if (startIntersection\
    \ == endIntersection)\n        return \"YES\";\n    if (startIntersection < endIntersection)\n\
    \        return \"NO\";\n    long long startPrime = startIntersection;\n    long\
    \ long endPrime = endIntersection;\n    long long primeLength = 1;\n    while\
    \ (startPrime <= endPrime) {\n        if (startPrime % 2 == 0 && endPrime % 2\
    \ == 0)\n            return \"NO\";\n        if (startPrime % 2 == 1 && endPrime\
    \ % 2 == 1)\n            return \"NO\";\n        startPrime++;\n        endPrime++;\n\
    \        primeLength++;\n    }\n    return \"YES\";", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    long length = end - start;\n   \
    \ long length2 = end2 - start2;\n    if (length == 0 || length2 == 0) {\n    \
    \    return \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\"\
    ;\n    }\n    long mid = (start + end) / 2;\n    long mid2 = (start2 + end2) /\
    \ 2;\n    if (mid == mid2) {\n        return \"YES\";\n    }\n    if (mid < mid2)\
    \ {\n        return intersection(std::make_tuple(start, mid), std::make_tuple(mid2,\
    \ end2));\n    }\n    return intersection(std::make_tuple(mid, mid2), std::make_tuple(start,\
    \ end));", "    long long start = std::get<0>(interval1);\n    long long end =\
    \ std::get<1>(interval1);\n    start = std::get<0>(interval2);\n    end = std::get<1>(interval2);\n\
    \    long long intersection = end - start;\n    if (intersection == 0)\n     \
    \   return \"NO\";\n    if (intersection == 1)\n        return \"YES\";\n    if\
    \ (intersection % 2 == 0)\n        return \"NO\";\n    long long mid = (start\
    \ + end) / 2;\n    if (mid == 1)\n        return \"YES\";\n    if (mid == 2)\n\
    \        return \"NO\";\n    if (mid % 2 == 0)\n        return \"NO\";\n    long\
    \ long mid2 = mid / 2;\n    if (mid2 == 1)\n        return \"YES\";\n    if (mid2\
    \ == 2)\n        return \"NO\";\n    if (mid2 % 2 == 0)\n        return \"NO\"\
    ;\n    long long mid3 = mid2 / 2;\n    if (mid3 == 1)\n        return \"YES\"\
    ;\n    if (mid3 == 2)\n        return \"NO\";\n    if (mid3 % 2 == 0)\n      \
    \  return \"NO\";\n    long long mid4 = mid3 / 2;\n    if (mid4 == 1)\n      \
    \  return \"YES\";\n    if (mid4 == 2)\n        return \"NO\";\n    if (mid4 %\
    \ 2 == 0)\n        return \"NO\";\n    long long mid5 = mid4 / 2;\n    if (mid5\
    \ == 1)\n        return \"YES\";\n    if (mid5 == 2)\n        return \"NO\";\n\
    \    if (mid5 % 2 == 0)\n        return \"NO\";\n    long long mid6 = mid5 / 2;\n\
    \    if (mid6 == 1)\n        return \"YES\";\n    if (mid6 == 2)\n        return\
    \ \"NO\";\n    if (mid6 % 2 == 0)\n        return \"NO\";\n    long long mid7\
    \ = mid6 / 2;\n    if (mid7 == 1)\n        return \"YES\";\n    if (mid7 == 2)\n\
    \        return \"NO\";\n    if (mid7 % 2 == 0)\n        return \"NO\";\n    long\
    \ long mid8 = mid7 / 2;\n    if (mid8 == 1)\n        return \"YES\";\n    if (mid8\
    \ == 2)\n        return \"NO\";\n    if (mid8 % 2 == 0)\n        return \"NO\"\
    ;\n    long long mid9 = mid8 / 2;\n    if (mid9 == 1)\n        return \"YES\"\
    ;\n    if (mid9 == 2)\n        return \"NO\";\n    if (mid9 % 2 == 0)\n      \
    \  return \"NO\";\n    long long mid10 = mid9 / 2;\n    if (mid10 == 1)\n    \
    \    return \"YES\";\n    if (mid10 == 2)\n        return \"NO\";\n    if (mid10\
    \ % 2 == 0)\n        return \"NO\";\n    long long mid11 = mid10 / 2;\n    if\
    \ (mid11 == 1)\n        return \"YES\";\n    if (mid11 == 2)\n        return \"\
    NO\";", "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start == end) {\n        return \"NO\";\n    }\n    if (start2\
    \ == end2) {\n        return \"NO\";\n    }\n    long long length = (end - start)\
    \ * (end2 - start2) / (end2 - start) + 1;\n    if (length == 2) {\n        return\
    \ \"YES\";\n    }\n    if (length == 1) {\n        return \"NO\";\n    }\n   \
    \ if (length == 2) {\n        return \"YES\";\n    }\n    if (length == 3) {\n\
    \        return \"YES\";\n    }\n    if (length == 5) {\n        return \"YES\"\
    ;\n    }\n    if (length == 7) {\n        return \"YES\";\n    }\n    if (length\
    \ == 9) {\n        return \"YES\";\n    }\n    if (length == 11) {\n        return\
    \ \"YES\";\n    }\n    if (length == 13) {\n        return \"YES\";\n    }\n \
    \   if (length == 17) {\n        return \"YES\";\n    }\n    if (length == 19)\
    \ {\n        return \"YES\";\n    }\n    if (length == 23) {\n        return \"\
    YES\";\n    }\n    if (length == 29) {\n        return \"YES\";\n    }\n    if\
    \ (length == 31) {\n        return \"YES\";\n    }\n    if (length == 37) {\n\
    \        return \"YES\";\n    }\n    if (length == 43) {\n        return \"YES\"\
    ;\n    }\n    if (length == 49) {\n        return \"YES\";\n    }\n    if (length\
    \ == 53) {\n        return \"YES\";\n    }\n    if (length == 59) {\n        return\
    \ \"YES\";\n    }\n    if (length == 71) {\n        return \"YES\";\n    }\n \
    \   if (length == 79) {\n        return \"YES\";\n    }\n    if (length == 83)\
    \ {\n        return \"YES\";\n    }\n    if (length == 91) {\n        return \"\
    YES\";\n    }\n    if (length == 99) {\n        return \"YES\";\n    }\n    if\
    \ (length == 117) {\n        return \"YES\";\n    }\n    if (length == 131) {\n\
    \        return \"YES\";\n    }\n    if (length == 139) {\n        return \"YES\"\
    ;\n    }\n    if (length == 147) {\n        return \"YES\";\n    }\n    if (length\
    \ == 153) {\n        return \"YES\";\n    }\n    if (length == 159) {\n      \
    \  return \"YES\";\n    }\n    if (length == 167) {\n        return \"YES\";\n\
    \    }\n    if (length == 173) {\n        return \"YES\";\n    }\n    if (", " \
    \   long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long long length = 0;\n    if (start <= end2) {\n        length =\
    \ end - start2;\n    } else {\n        length = end2 - start;\n    }\n    if (length\
    \ == 1) {\n        return \"NO\";\n    }\n    if (length == 2) {\n        return\
    \ \"YES\";\n    }\n    if (length == 3) {\n        return \"YES\";\n    }\n  \
    \  if (length == 5) {\n        return \"YES\";\n    }\n    if (length == 7) {\n\
    \        return \"YES\";\n    }\n    if (length == 9) {\n        return \"YES\"\
    ;\n    }\n    if (length == 11) {\n        return \"YES\";\n    }\n    if (length\
    \ == 13) {\n        return \"YES\";\n    }\n    if (length == 17) {\n        return\
    \ \"YES\";\n    }\n    if (length == 19) {\n        return \"YES\";\n    }\n \
    \   if (length == 23) {\n        return \"YES\";\n    }\n    if (length == 29)\
    \ {\n        return \"YES\";\n    }\n    if (length == 31) {\n        return \"\
    YES\";\n    }\n    if (length == 37) {\n        return \"YES\";\n    }\n    if\
    \ (length == 43) {\n        return \"YES\";\n    }\n    if (length == 47) {\n\
    \        return \"YES\";\n    }\n    if (length == 53) {\n        return \"YES\"\
    ;\n    }\n    if (length == 59) {\n        return \"YES\";\n    }\n    if (length\
    \ == 67) {\n        return \"YES\";\n    }\n    if (length == 73) {\n        return\
    \ \"YES\";\n    }\n    if (length == 79) {\n        return \"YES\";\n    }\n \
    \   if (length == 91) {\n        return \"YES\";\n    }\n    if (length == 97)\
    \ {\n        return \"YES\";\n    }\n    if (length == 111) {\n        return\
    \ \"YES\";\n    }\n    if (length == 127) {\n        return \"YES\";\n    }\n\
    \    if (length == 131) {\n        return \"YES\";\n    }\n    if (length == 137)\
    \ {\n        return \"YES\";\n    }\n    if (length == 141) {\n        return\
    \ \"YES\";\n    }\n    if (length == 147) {\n        return \"YES\";\n    }\n\
    \    if (length == 153) {\n        return \"YES\";\n    }\n    if (length == 159)\
    \ {\n        return \"YES\";\n    }\n    if (length == 161) {\n        return\
    \ \"YES\";\n    }\n    if (length == 167) {\n        return \"YES\";\n    }\n\
    \    if (length == 17", "    long long int start1 = interval1.get<0>();\n    long\
    \ long int end1 = interval1.get<1>();\n    long long int start2 = interval2.get<0>();\n\
    \    long long int end2 = interval2.get<1>();\n    long long int start = std::min(start1,\
    \ start2);\n    long long int end = std::max(end1, end2);\n    long long int length\
    \ = end - start;\n    if (length == 0)\n        return \"NO\";\n    long long\
    \ int mid = start + (end - start) / 2;\n    if (mid == start)\n        return\
    \ \"NO\";\n    if (mid == end)\n        return \"NO\";\n    if (length == 1)\n\
    \        return \"YES\";\n    if (length == 2)\n        return \"YES\";\n    if\
    \ (length == 3)\n        return \"YES\";\n    if (length == 4)\n        return\
    \ \"YES\";\n    if (length == 5)\n        return \"YES\";\n    if (length == 6)\n\
    \        return \"YES\";\n    if (length == 7)\n        return \"YES\";\n    if\
    \ (length == 8)\n        return \"YES\";\n    if (length == 9)\n        return\
    \ \"YES\";\n    if (length == 10)\n        return \"YES\";\n    if (length ==\
    \ 11)\n        return \"YES\";\n    if (length == 12)\n        return \"YES\"\
    ;\n    if (length == 13)\n        return \"YES\";\n    if (length == 14)\n   \
    \     return \"YES\";\n    if (length == 15)\n        return \"YES\";\n    if\
    \ (length == 16)\n        return \"YES\";\n    if (length == 17)\n        return\
    \ \"YES\";\n    if (length == 18)\n        return \"YES\";\n    if (length ==\
    \ 19)\n        return \"YES\";\n    if (length == 20)\n        return \"YES\"\
    ;\n    if (length == 21)\n        return \"YES\";\n    if (length == 22)\n   \
    \     return \"YES\";\n    if (length == 23)\n        return \"YES\";\n    if\
    \ (length == 24)\n        return \"YES\";\n    if (length == 25)\n        return\
    \ \"YES\";\n    if (length == 26)\n        return \"YES\";\n    if (length ==\
    \ 27)\n        return \"YES\";\n    if (length == 28)\n        return \"YES\"\
    ;\n    if (length == 29)\n        return \"YES\";\n    if (length == 30)\n   \
    \     return \"YES\";\n    if (length == 31)\n        return \"YES\";\n    if\
    \ (length == 32)\n        return \"YES\";\n    if (length == 33)\n        return\
    \ \"YES\";\n    if (length == 34)\n        return \"YES\";\n    if (length ==\
    \ 35)\n        return \"YES\";\n    if (length == 36)\n        return \"YES\"\
    ;\n    if (length == 37)\n        return \"YES\";\n    if (length == 38)\n   \
    \     return \"YES\";\n    if (length == 39)\n        return \"YES\";\n    if\
    \ (length == 40)\n        return \"YES\";\n    if (length == 41)\n        return\
    \ \"YES\";\n    if (length == 42)\n        return \"YES\";\n    if (", "    long\
    \ long start1 = std::get<0>(interval1);\n    long long end1 = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end1 - start1 + end2 - start2;\n    if (length == 0) return\
    \ \"NO\";\n    if (length == 1) return \"YES\";\n    if (length == 2) return \"\
    YES\";\n    if (length == 3) return \"YES\";\n    if (length == 4) return \"YES\"\
    ;\n    if (length == 5) return \"YES\";\n    if (length == 6) return \"YES\";\n\
    \    if (length == 7) return \"YES\";\n    if (length == 8) return \"YES\";\n\
    \    if (length == 9) return \"YES\";\n    if (length == 10) return \"YES\";\n\
    \    if (length == 11) return \"YES\";\n    if (length == 12) return \"YES\";\n\
    \    if (length == 13) return \"YES\";\n    if (length == 14) return \"YES\";\n\
    \    if (length == 15) return \"YES\";\n    if (length == 16) return \"YES\";\n\
    \    if (length == 17) return \"YES\";\n    if (length == 18) return \"YES\";\n\
    \    if (length == 19) return \"YES\";\n    if (length == 20) return \"YES\";\n\
    \    if (length == 21) return \"YES\";\n    if (length == 22) return \"YES\";\n\
    \    if (length == 23) return \"YES\";\n    if (length == 24) return \"YES\";\n\
    \    if (length == 25) return \"YES\";\n    if (length == 26) return \"YES\";\n\
    \    if (length == 27) return \"YES\";\n    if (length == 28) return \"YES\";\n\
    \    if (length == 29) return \"YES\";\n    if (length == 30) return \"YES\";\n\
    \    if (length == 31) return \"YES\";\n    if (length == 32) return \"YES\";\n\
    \    if (length == 33) return \"YES\";\n    if (length == 34) return \"YES\";\n\
    \    if (length == 35) return \"YES\";\n    if (length == 36) return \"YES\";\n\
    \    if (length == 37) return \"YES\";\n    if (length == 38) return \"YES\";\n\
    \    if (length == 39) return \"YES\";\n    if (length == 40) return \"YES\";\n\
    \    if (length == 41) return \"YES\";\n    if (length == 42) return \"YES\";\n\
    \    if (length == 43) return \"YES\";\n    if (length == 44) return \"YES\";\n\
    \    if (length == 45) return \"YES\";\n    if (length == 46) return \"YES\";\n\
    \    if (length == 47) return \"YES\";\n    if (length == 48) return \"YES\";\n\
    \    if (length == 49) return \"YES\";\n    if (length == 50) return \"YES\";\n\
    \    if (length == 5", "    long long start = std::get<0>(interval1);\n    long\
    \ long end = std::get<1>(interval1);\n    start = std::get<0>(interval2);\n  \
    \  end = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n    }\n    long long length = end - start;\n    if (length == 1) {\n\
    \        return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\"\
    ;\n    }\n    if (length == 3) {\n        return \"YES\";\n    }\n    if (length\
    \ == 5) {\n        return \"YES\";\n    }\n    if (length == 7) {\n        return\
    \ \"YES\";\n    }\n    if (length == 9) {\n        return \"YES\";\n    }\n  \
    \  if (length == 11) {\n        return \"YES\";\n    }\n    if (length == 13)\
    \ {\n        return \"YES\";\n    }\n    if (length == 17) {\n        return \"\
    YES\";\n    }\n    if (length == 19) {\n        return \"YES\";\n    }\n    if\
    \ (length == 23) {\n        return \"YES\";\n    }\n    if (length == 29) {\n\
    \        return \"YES\";\n    }\n    if (length == 31) {\n        return \"YES\"\
    ;\n    }\n    if (length == 37) {\n        return \"YES\";\n    }\n    if (length\
    \ == 43) {\n        return \"YES\";\n    }\n    if (length == 49) {\n        return\
    \ \"YES\";\n    }\n    if (length == 71) {\n        return \"YES\";\n    }\n \
    \   if (length == 79) {\n        return \"YES\";\n    }\n    if (length == 89)\
    \ {\n        return \"YES\";\n    }\n    if (length == 97) {\n        return \"\
    YES\";\n    }\n    if (length == 105) {\n        return \"YES\";\n    }\n    if\
    \ (length == 111) {\n        return \"YES\";\n    }\n    if (length == 119) {\n\
    \        return \"YES\";\n    }\n    if (length == 131) {\n        return \"YES\"\
    ;\n    }\n    if (length == 139) {\n        return \"YES\";\n    }\n    if (length\
    \ == 147) {\n        return \"YES\";\n    }\n    if (length == 153) {\n      \
    \  return \"YES\";\n    }\n    if (length == 159) {\n        return \"YES\";\n\
    \    }\n    if (length == 167) {\n        return \"YES\";\n    }\n    if (length\
    \ == 173) {\n        return \"YES\";\n    }\n    if (length == 179) {\n      \
    \  return \"YES\";\n    }\n    if (length == 185) {\n        return \"YES\";\n\
    \    }\n    if (length == 191) {\n        return \"YES\";\n    }\n    if (length\
    \ == 199) {\n        return \"YES\";\n    }\n    if (length == 207) {\n      \
    \  return \"YES\";\n    }\n    if (length == 213) {\n        return \"YES\";\n\
    \    }\n    if (length == 219) {\n        return \"YES\";\n    }\n    if (length\
    \ == 227) {\n        return \"YES\";", "    if (std::get<0>(interval1) < std::get<0>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    if (std::get<0>(interval1) == std::get<0>(interval2)) {\n        return \"\
    NO\";\n    }\n    if (std::get<1>(interval1) == std::get<1>(interval2)) {\n  \
    \      return \"NO\";\n    }\n    if (std::get<0>(interval1) > std::get<0>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    if (std::get<0>(interval1) == std::get<0>(interval2)) {\n        return \"\
    NO\";\n    }\n    if (std::get<1>(interval1) == std::get<1>(interval2)) {\n  \
    \      return \"NO\";\n    }\n    if (std::get<0>(interval1) < std::get<0>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (std::get<1>(interval1)\
    \ < std::get<1>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    if (std::get<0>(interval1) > std::get<0>(interval2)) {\n        std::swap(interval1,\
    \ interval2);\n    }\n    if (std::get<1>(interval1) > std::get<1>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (std::get<0>(interval1)\
    \ < std::get<0>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    if (std::get<1>(interval1) < std::get<1>(interval2)) {\n        std::swap(interval1,\
    \ interval2);\n    }\n    if (std::get<0>(interval1) > std::get<0>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (std::get<1>(interval1)\
    \ > std::get<1>(interval2)) {\n        std::swap(interval1, interval2);\n    }\n\
    \    if (std::get<0>(interval1) < std::get<0>(interval2)) {\n        std::swap(interval1,\
    \ interval2);\n    }\n    if (std::get<1>(interval1) < std::get<1>(interval2))\
    \ {\n        std::swap(interval1, interval2);\n    }\n    if (std::get<0>(interval1)\
    \ > std::get<0>(", "    long long int start1 = std::get<0>(interval1);\n    long\
    \ long int end1 = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int startIntersection\
    \ = start1;\n    long long int endIntersection = end1;\n    if (start2 < start1)\
    \ {\n        startIntersection = start2;\n        endIntersection = end1;\n  \
    \  } else {\n        startIntersection = start1;\n        endIntersection = end2;\n\
    \    }\n    long long int startIntersection2 = startIntersection;\n    long long\
    \ int endIntersection2 = endIntersection;\n    if (endIntersection2 < endIntersection)\
    \ {\n        startIntersection2 = startIntersection;\n        endIntersection2\
    \ = endIntersection;\n    } else {\n        startIntersection2 = startIntersection;\n\
    \        endIntersection2 = endIntersection2;\n    }\n    long long int startIntersection3\
    \ = startIntersection2;\n    long long int endIntersection3 = endIntersection2;\n\
    \    if (endIntersection3 < endIntersection2) {\n        startIntersection3 =\
    \ startIntersection2;\n        endIntersection3 = endIntersection2;\n    } else\
    \ {\n        startIntersection3 = startIntersection2;\n        endIntersection3\
    \ = endIntersection3;\n    }\n    long long int startIntersection4 = startIntersection3;\n\
    \    long long int endIntersection4 = endIntersection3;\n    if (endIntersection4\
    \ < endIntersection3) {\n        startIntersection4 = startIntersection3;\n  \
    \      endIntersection4 = endIntersection3;\n    } else {\n        startIntersection4\
    \ = startIntersection3;\n        endIntersection4 = endIntersection4;\n    }\n\
    \    long long int startIntersection5 = startIntersection4;\n    long long int\
    \ endIntersection5 = endIntersection4;\n    if (endIntersection5 < endIntersection4)\
    \ {\n        startIntersection5 = startIntersection4;\n        endIntersection5\
    \ = endIntersection4;\n    } else {\n        startIntersection5 = startIntersection4;\n\
    \        endIntersection5 = endIntersection5;\n    }\n    long long int startIntersection6\
    \ = startIntersection5;\n    long long int endIntersection6 = endIntersection5;\n\
    \    if (endIntersection6 < endIntersection5) {\n        startIntersection6 =\
    \ startIntersection5;\n        endIntersection6 = endIntersection5;\n    } else\
    \ {\n        startIntersection6 = startIntersection5;\n        endIntersection6\
    \ = endIntersection6;\n    }\n    long long int startIntersection7 = startIntersection",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length == length2) {\n        return \"NO\";\n    }\n    if (length <\
    \ length2) {\n        length = length2;\n    }\n    long long ans = 1;\n    for\
    \ (long long i = start; i <= end; i++) {\n        long long count = 0;\n     \
    \   for (long long j = start2; j <= end2; j++) {\n            if (i == j) {\n\
    \                count++;\n            }\n        }\n        if (count == length)\
    \ {\n            ans = ans * i;\n        }\n    }\n    if (ans == 1) {\n     \
    \   return \"NO\";\n    }\n    if (ans == 0) {\n        return \"YES\";\n    }\n\
    \    return \"YES\";", "    long long start1 = std::get<0>(interval1);\n    long\
    \ long end1 = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end1 - start1;\n\
    \    long long length2 = end2 - start2;\n    if (length == 0 || length2 == 0)\
    \ {\n        return \"NO\";\n    }\n    if (length == length2) {\n        if (length\
    \ == 1) {\n            return \"YES\";\n        }\n        long long mid1 = start1\
    \ + length / 2;\n        long long mid2 = start2 + length2 / 2;\n        if (mid1\
    \ < mid2) {\n            return \"YES\";\n        }\n        return \"NO\";\n\
    \    }\n    long long mid1 = start1 + length / 2;\n    long long mid2 = start2\
    \ + length2 / 2;\n    if (mid1 < mid2) {\n        return \"NO\";\n    }\n    if\
    \ (length < length2) {\n        return \"NO\";\n    }\n    long long mid = mid1;\n\
    \    long long mid2 = mid2;\n    long long mid3 = mid1 + length / 2;\n    long\
    \ long mid4 = mid2 + length2 / 2;\n    long long mid5 = mid3 + length / 2;\n \
    \   long long mid6 = mid4 + length2 / 2;\n    long long mid7 = mid5 + length /\
    \ 2;\n    long long mid8 = mid6 + length2 / 2;\n    long long mid9 = mid7 + length\
    \ / 2;\n    long long mid10 = mid8 + length2 / 2;\n    long long mid11 = mid9\
    \ + length / 2;\n    long long mid12 = mid10 + length2 / 2;\n    long long mid13\
    \ = mid11 + length / 2;\n    long long mid14 = mid12 + length2 / 2;\n    long\
    \ long mid15 = mid13 + length / 2;\n    long long mid16 = mid14 + length2 / 2;\n\
    \    long long mid17 = mid15 + length / 2;\n    long long mid18 = mid16 + length2\
    \ / 2;\n    long long mid19 = mid17 + length / 2;\n    long long mid20 = mid18\
    \ + length2 / 2;\n    long long mid21 = mid19 + length / 2;\n    long long mid22\
    \ = mid20 + length2 / 2;\n    long long mid23 = mid21 + length / 2;\n    long\
    \ long mid24 = mid22 + length2 / 2;\n    long long mid25 = mid23 + length / 2;\n\
    \    long long mid26 = mid24 + length2 / 2;\n    long long mid27 = mid25 + length",
  "    long long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    if (start\
    \ == start2 && end > end2) {\n        return \"NO\";\n    }\n    if (start ==\
    \ start2 && end == end2) {\n        return \"YES\";\n    }\n    long long length1\
    \ = end - start;\n    long long length2 = end2 - start2;\n    if (length1 < length2)\
    \ {\n        std::swap(length1, length2);\n    }\n    long long lengthIntersection\
    \ = length1 - length2;\n    if (lengthIntersection == 1) {\n        return \"\
    YES\";\n    }\n    if (lengthIntersection == 2) {\n        return \"NO\";\n  \
    \  }\n    if (lengthIntersection % 2 == 0) {\n        return \"NO\";\n    }\n\
    \    if (lengthIntersection % 3 == 0) {\n        return \"YES\";\n    }\n    return\
    \ \"NO\";", "    long long int start = std::get<0>(interval1);\n    long long\
    \ int end = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    long long int length =\
    \ end - start;\n    long long int length2 = end2 - start2;\n    if (length2 ==\
    \ 0) {\n        return \"NO\";\n    }\n    if (length == length2) {\n        return\
    \ \"YES\";\n    }\n    if (length < length2) {\n        return \"NO\";\n    }\n\
    \    long long int length3 = length / length2;\n    long long int length4 = length\
    \ % length2;\n    long long int start3 = start2 + length3;\n    long long int\
    \ end3 = end2 + length3;\n    long long int start4 = start2 + length4;\n    long\
    \ long int end4 = end2 + length4;\n    long long int start5 = start2 + length2;\n\
    \    long long int end5 = end2 + length2;\n    long long int start6 = start2 +\
    \ length4;\n    long long int end6 = end2 + length4;\n    long long int start7\
    \ = start2 + length3;\n    long long int end7 = end2 + length3;\n    long long\
    \ int start8 = start2 + length5;\n    long long int end8 = end2 + length5;\n \
    \   long long int start9 = start2 + length6;\n    long long int end9 = end2 +\
    \ length6;\n    long long int start10 = start2 + length7;\n    long long int end10\
    \ = end2 + length7;\n    long long int start11 = start2 + length8;\n    long long\
    \ int end11 = end2 + length8;\n    long long int start12 = start2 + length9;\n\
    \    long long int end12 = end2 + length9;\n    long long int start13 = start2\
    \ + length10;\n    long long int end13 = end2 + length10;\n    long long int start14\
    \ = start2 + length11;\n    long long int end14 = end2 + length11;\n    long long\
    \ int start15 = start2 + length12;\n    long long int end15 = end2 + length12;\n\
    \    long long int start16 = start2 + length13;\n    long long int end16 = end2\
    \ + length13;\n    long long int start17 = start2 + length14;\n    long long int\
    \ end17 = end2 + length14;\n    long long int start18 = start2 + length15;\n \
    \   long long int end18 = end2 + length15;\n    long long int start19 = start2\
    \ + length16;\n    long long int end19", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length == 1) {\n        return \"YES\"\
    ;\n    }\n    if (length2 == 1) {\n        return \"YES\";\n    }\n    long long\
    \ length3 = length * length2;\n    if (length3 > 2) {\n        return \"NO\";\n\
    \    }\n    long long length4 = length * length2;\n    long long length5 = length\
    \ * length2;\n    long long length6 = length * length2;\n    long long length7\
    \ = length * length2;\n    long long length8 = length * length2;\n    long long\
    \ length9 = length * length2;\n    long long length10 = length * length2;\n  \
    \  long long length11 = length * length2;\n    long long length12 = length * length2;\n\
    \    long long length13 = length * length2;\n    long long length14 = length *\
    \ length2;\n    long long length15 = length * length2;\n    long long length16\
    \ = length * length2;\n    long long length17 = length * length2;\n    long long\
    \ length18 = length * length2;\n    long long length19 = length * length2;\n \
    \   long long length20 = length * length2;\n    long long length21 = length *\
    \ length2;\n    long long length22 = length * length2;\n    long long length23\
    \ = length * length2;\n    long long length24 = length * length2;\n    long long\
    \ length25 = length * length2;\n    long long length26 = length * length2;\n \
    \   long long length27 = length * length2;\n    long long length28 = length *\
    \ length2;\n    long long length29 = length * length2;\n    long long length30\
    \ = length * length2;\n    long long length31 = length * length2;\n    long long\
    \ length32 = length * length2;\n    long long length33 = length * length2;\n \
    \   long long length34 = length * length2;\n    long long length35 = length *\
    \ length2;\n    long long length36", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    if (start > end) {\n      \
    \  std::swap(start, end);\n        std::swap(start2, end2);\n    }\n    if (start2\
    \ > end2) {\n        std::swap(start2, end2);\n    }\n    long long length = end\
    \ - start;\n    long long length2 = end2 - start2;\n    if (length2 == 0) {\n\
    \        return \"NO\";\n    }\n    if (length2 == 1) {\n        return \"YES\"\
    ;\n    }\n    if (length2 == 2) {\n        if (length == 1) {\n            return\
    \ \"YES\";\n        }\n        if (length == 2) {\n            if (start % 2 ==\
    \ 0 && end % 2 == 0) {\n                if (start % 3 == 0 && end % 3 == 0) {\n\
    \                    if (start % 5 == 0 && end % 5 == 0) {\n                 \
    \       if (start % 7 == 0 && end % 7 == 0) {\n                            if\
    \ (start % 11 == 0 && end % 11 == 0) {\n                                if (start\
    \ % 13 == 0 && end % 13 == 0) {\n                                    if (start\
    \ % 17 == 0 && end % 17 == 0) {\n                                        if (start\
    \ % 19 == 0 && end % 19 == 0) {\n                                            return\
    \ \"YES\";\n                                        }\n                      \
    \              }\n                                }\n                        \
    \    }\n                        }\n                    }\n                }\n\
    \            }\n        }\n    }\n    return \"NO\";", "    long long start =\
    \ std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n    long\
    \ long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    long long length = end - start;\n    long long length2 = end2 - start2;\n\
    \    if (length2 == 0) {\n        return \"NO\";\n    }\n    if (length == length2)\
    \ {\n        return \"YES\";\n    }\n    if (length < length2) {\n        length\
    \ = length2;\n    }\n    long long inter = length / length2;\n    if (inter %\
    \ 2 == 0) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long long\
    \ start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long long length = 0;\n    if (start <= end2 && start2 <= end) {\n\
    \        length = end - start;\n    }\n    if (start2 <= end && start2 <= end2)\
    \ {\n        length = end2 - start2;\n    }\n    if (length == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == 1) {\n        return \"YES\";\n    }\n   \
    \ if (length == 2) {\n        if (std::get<0>(interval1) == std::get<0>(interval2))\
    \ {\n            return \"YES\";\n        }\n        return \"NO\";\n    }\n \
    \   if (length == 3) {\n        if (std::get<0>(interval1) == std::get<0>(interval2))\
    \ {\n            if (std::get<1>(interval1) == std::get<1>(interval2)) {\n   \
    \             return \"YES\";\n            }\n            return \"NO\";\n   \
    \     }\n        if (std::get<1>(interval1) == std::get<1>(interval2)) {\n   \
    \         return \"YES\";\n        }\n        return \"NO\";\n    }\n    if (length\
    \ == 4) {\n        if (std::get<0>(interval1) == std::get<0>(interval2)) {\n \
    \           if (std::get<1>(interval1) == std::get<1>(interval2)) {\n        \
    \        if (std::get<2>(interval1) == std::get<2>(interval2)) {\n           \
    \         return \"YES\";\n                }\n                return \"NO\";\n\
    \            }\n            return \"NO\";\n        }\n        if (std::get<1>(interval1)\
    \ == std::get<1>(interval2)) {\n            if (std::get<2>(interval1) == std::get<2>(interval2))\
    \ {\n                return \"YES\";\n            }\n            return \"NO\"\
    ;\n        }\n        if (std::get<2>(interval1) == std::get<2>(interval2)) {\n\
    \            return \"YES\";\n        }\n        return \"NO\";\n    }\n    if\
    \ (length == 5) {\n        if (std::get<0>(interval1) == std::get<0>(interval2))\
    \ {\n            if (std::get<1>(interval1) == std::get<1>(interval2)) {\n   \
    \             if (std::get<2>(interval1) == std::get<2>(interval2)) {\n      \
    \              if (std::get<3>(interval1) == std::get<3>(interval2)) {\n     \
    \                   return \"YES\";\n                    }\n                 \
    \   return \"NO\";\n                }\n", "    // Your code here\n    long long\
    \ int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int start = max(start1, start2);\n    long long int end = min(end1,\
    \ end2);\n    long long int length = end - start;\n    if (length == 1) {\n  \
    \      return \"NO\";\n    }\n    if (length == 2) {\n        return \"YES\";\n\
    \    }\n    long long int mid = (start + end) / 2;\n    if (length == mid) {\n\
    \        return \"YES\";\n    }\n    if (length < mid) {\n        return \"NO\"\
    ;\n    }\n    if (length == mid * 2) {\n        return \"YES\";\n    }\n    if\
    \ (length == mid * 3) {\n        return \"YES\";\n    }\n    if (length == mid\
    \ * 4) {\n        return \"YES\";\n    }\n    if (length == mid * 5) {\n     \
    \   return \"YES\";\n    }\n    if (length == mid * 6) {\n        return \"YES\"\
    ;\n    }\n    if (length == mid * 7) {\n        return \"YES\";\n    }\n    if\
    \ (length == mid * 8) {\n        return \"YES\";\n    }\n    if (length == mid\
    \ * 9) {\n        return \"YES\";\n    }\n    if (length == mid * 10) {\n    \
    \    return \"YES\";\n    }\n    if (length == mid * 11) {\n        return \"\
    YES\";\n    }\n    if (length == mid * 12) {\n        return \"YES\";\n    }\n\
    \    if (length == mid * 13) {\n        return \"YES\";\n    }\n    if (length\
    \ == mid * 14) {\n        return \"YES\";\n    }\n    if (length == mid * 15)\
    \ {\n        return \"YES\";\n    }\n    if (length == mid * 16) {\n        return\
    \ \"YES\";\n    }\n    if (length == mid * 17) {\n        return \"YES\";\n  \
    \  }\n    if (length == mid * 18) {\n        return \"YES\";\n    }\n    if (length\
    \ == mid * 19) {\n        return \"YES\";\n    }\n    if (length == mid * 20)\
    \ {\n        return \"YES\";\n    }\n    if (length == mid * 21) {\n        return\
    \ \"YES\";\n    }\n    if (length == mid * 22) {\n        return \"YES\";\n  \
    \  }\n    if (length == mid * 23) {\n        return \"YES\";\n    }\n    if (length\
    \ == mid * 24) {\n        return \"YES\";\n    }\n    if (length == mid * 25)\
    \ {\n        return \"YES\";\n    }\n    if (length == mid * 26) {\n        return\
    \ \"YES", "    long long int start1 = std::get<0>(interval1);\n    long long int\
    \ end1 = std::get<1>(interval1);\n    long long int start2 = std::get<0>(interval2);\n\
    \    long long int end2 = std::get<1>(interval2);\n    if (start1 < end2 && start2\
    \ < end1) {\n        long long int startIntersection = start1;\n        long long\
    \ int endIntersection = end2;\n        while (startIntersection < endIntersection)\
    \ {\n            if (startIntersection == endIntersection) {\n               \
    \ return \"NO\";\n            }\n            if (startIntersection % 2 == 0 &&\
    \ endIntersection % 2 == 0) {\n                startIntersection += 1;\n     \
    \           endIntersection += 1;\n            }\n            else if (startIntersection\
    \ % 2 == 0 && endIntersection % 2 == 1) {\n                startIntersection +=\
    \ 1;\n            }\n            else if (startIntersection % 2 == 1 && endIntersection\
    \ % 2 == 0) {\n                endIntersection += 1;\n            }\n        \
    \    else if (startIntersection % 2 == 1 && endIntersection % 2 == 1) {\n    \
    \            startIntersection += 1;\n                endIntersection += 1;\n\
    \            }\n            else {\n                return \"NO\";\n         \
    \   }\n        }\n        return \"YES\";\n    }\n    return \"NO\";", "    long\
    \ start = std::get<0>(interval1);\n    long end = std::get<1>(interval1);\n  \
    \  long start2 = std::get<0>(interval2);\n    long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    long inter = end - start2;\n    if (inter == 0) {\n        return\
    \ \"NO\";\n    }\n    long prime = std::sqrt(inter);\n    if (prime % 2 == 0)\
    \ {\n        return \"NO\";\n    }\n    long a = start;\n    long b = end;\n \
    \   long c = start2;\n    long d = end2;\n    long ans = 0;\n    long count =\
    \ 0;\n    while (a <= b) {\n        while (c <= d) {\n            if (a % c ==\
    \ 0 && b % d == 0) {\n                ans += 1;\n                count++;\n  \
    \          }\n            c++;\n        }\n        d--;\n        c++;\n    }\n\
    \    if (count == 1) {\n        return \"NO\";\n    }\n    if (count == 2) {\n\
    \        return \"YES\";\n    }\n    if (ans == 2) {\n        return \"YES\";\n\
    \    }\n    return \"NO\";", "    long long start = std::get<0>(interval1);\n\
    \    long long end = std::get<1>(interval1);\n    long long start2 = std::get<0>(interval2);\n\
    \    long long end2 = std::get<1>(interval2);\n    long long length = end - start;\n\
    \    long long length2 = end2 - start2;\n    if (length2 == 0) {\n        return\
    \ \"NO\";\n    }\n    if (length == length2) {\n        return \"YES\";\n    }\n\
    \    if (length < length2) {\n        std::swap(length, length2);\n    }\n   \
    \ long long mid = length / 2;\n    long long mid2 = length2 / 2;\n    long long\
    \ mid3 = mid + mid2;\n    long long mid4 = mid3 + mid2;\n    long long mid5 =\
    \ mid4 + mid2;\n    long long mid6 = mid5 + mid2;\n    long long mid7 = mid6 +\
    \ mid2;\n    long long mid8 = mid7 + mid2;\n    long long mid9 = mid8 + mid2;\n\
    \    long long mid10 = mid9 + mid2;\n    long long mid11 = mid10 + mid2;\n   \
    \ long long mid12 = mid11 + mid2;\n    long long mid13 = mid12 + mid2;\n    long\
    \ long mid14 = mid13 + mid2;\n    long long mid15 = mid14 + mid2;\n    long long\
    \ mid16 = mid15 + mid2;\n    long long mid17 = mid16 + mid2;\n    long long mid18\
    \ = mid17 + mid2;\n    long long mid19 = mid18 + mid2;\n    long long mid20 =\
    \ mid19 + mid2;\n    long long mid21 = mid20 + mid2;\n    long long mid22 = mid21\
    \ + mid2;\n    long long mid23 = mid22 + mid2;\n    long long mid24 = mid23 +\
    \ mid2;\n    long long mid25 = mid24 + mid2;\n    long long mid26 = mid25 + mid2;\n\
    \    long long mid27 = mid26 + mid2;\n    long long mid28 = mid27 + mid2;\n  \
    \  long long mid29 = mid28 + mid2;\n    long long mid30 = mid29 + mid2;\n    long\
    \ long mid31 = mid30 + mid2;\n    long long mid32 = mid31 + mid2;\n    long long\
    \ mid33 = mid32 + mid2;\n    long long mid34 = mid33 + mid2;\n    long long mid35\
    \ = mid34 + mid2;\n    long long mid36", "    long start = std::get<0>(interval1);\n\
    \    long end = std::get<1>(interval1);\n    long start2 = std::get<0>(interval2);\n\
    \    long end2 = std::get<1>(interval2);\n    if (start > end) {\n        std::swap(start,\
    \ end);\n        std::swap(start2, end2);\n    }\n    if (start2 > end2) {\n \
    \       std::swap(start2, end2);\n    }\n    long inter = end - start;\n    long\
    \ inter2 = end2 - start2;\n    if (inter > inter2) {\n        return \"NO\";\n\
    \    }\n    if (inter == inter2) {\n        return \"YES\";\n    }\n    if (inter\
    \ < inter2) {\n        return \"NO\";\n    }\n    return \"YES\";", "    long\
    \ long start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    long long\
    \ len1 = end - start;\n    long long len2 = end2 - start2;\n    if (len1 == len2)\
    \ {\n        return \"YES\";\n    }\n    if (len1 < len2) {\n        std::swap(len1,\
    \ len2);\n    }\n    long long len3 = len1 * len2;\n    long long len4 = len1\
    \ + len2;\n    long long len5 = len1 * len3;\n    long long len6 = len1 + len3;\n\
    \    long long len7 = len1 * len4;\n    long long len8 = len1 + len4;\n    long\
    \ long len9 = len1 * len5;\n    long long len10 = len1 + len5;\n    long long\
    \ len11 = len1 * len6;\n    long long len12 = len1 + len6;\n    long long len13\
    \ = len1 * len7;\n    long long len14 = len1 + len7;\n    long long len15 = len1\
    \ * len8;\n    long long len16 = len1 + len8;\n    long long len17 = len1 * len9;\n\
    \    long long len18 = len1 + len9;\n    long long len19 = len1 * len10;\n   \
    \ long long len20 = len1 + len10;\n    long long len21 = len1 * len11;\n    long\
    \ long len22 = len1 + len11;\n    long long len23 = len1 * len12;\n    long long\
    \ len24 = len1 + len12;\n    long long len25 = len1 * len13;\n    long long len26\
    \ = len1 + len13;\n    long long len27 = len1 * len14;\n    long long len28 =\
    \ len1 + len14;\n    long long len29 = len1 * len15;\n    long long len30 = len1\
    \ + len15;\n    long long len31 = len1 * len16;\n    long long len32 = len1 +\
    \ len16;\n    long long len33 = len1 * len17;\n    long long len34 = len1 + len17;\n\
    \    long long len35 = len1 * len18;\n    long long len36 = len", "    long long\
    \ start = std::get<0>(interval1);\n    long long end = std::get<1>(interval1);\n\
    \    long long start2 = std::get<0>(interval2);\n    long long end2 = std::get<1>(interval2);\n\
    \    if (start > end) {\n        std::swap(start, end);\n        std::swap(start2,\
    \ end2);\n    }\n    if (start2 > end2) {\n        std::swap(start2, end2);\n\
    \    }\n    if (start > start2) {\n        return \"NO\";\n    }\n    if (start\
    \ == start2 && end == end2) {\n        return \"YES\";\n    }\n    long long mid\
    \ = (start + end) / 2;\n    if (mid * mid == end) {\n        return \"NO\";\n\
    \    }\n    if (mid * mid > end) {\n        return \"YES\";\n    }\n    return\
    \ intersection(std::make_tuple(start, mid), std::make_tuple(mid + 1, end2));",
  "    long long int start1 = interval1.get<0>();\n    long long int end1 = interval1.get<1>();\n\
    \    long long int start2 = interval2.get<0>();\n    long long int end2 = interval2.get<1>();\n\
    \    long long int startIntersection = start1;\n    long long int endIntersection\
    \ = end1;\n    long long int startIntersection2 = start2;\n    long long int endIntersection2\
    \ = end2;\n    long long int startIntersection3 = start1;\n    long long int endIntersection3\
    \ = end1;\n    long long int startIntersection4 = start2;\n    long long int endIntersection4\
    \ = end2;\n    long long int startIntersection5 = start1;\n    long long int endIntersection5\
    \ = end1;\n    long long int startIntersection6 = start2;\n    long long int endIntersection6\
    \ = end2;\n    long long int startIntersection7 = start1;\n    long long int endIntersection7\
    \ = end1;\n    long long int startIntersection8 = start2;\n    long long int endIntersection8\
    \ = end2;\n    long long int startIntersection9 = start1;\n    long long int endIntersection9\
    \ = end1;\n    long long int startIntersection10 = start2;\n    long long int\
    \ endIntersection10 = end2;\n    long long int startIntersection11 = start1;\n\
    \    long long int endIntersection11 = end1;\n    long long int startIntersection12\
    \ = start2;\n    long long int endIntersection12 = end2;\n    long long int startIntersection13\
    \ = start1;\n    long long int endIntersection13 = end1;\n    long long int startIntersection14\
    \ = start2;\n    long long int endIntersection14 = end2;\n    long long int startIntersection15\
    \ = start1;\n    long long int endIntersection15 = end1;\n    long long int startIntersection16\
    \ = start2;\n    long long int endIntersection16 = end2;\n    long long int startIntersection17\
    \ = start1;\n    long long int endIntersection17 = end1;\n    long long int startIntersection18\
    \ = start2;\n    long long int endIntersection18 = end2;\n    long long int startIntersection19\
    \ = start1;\n    long long int endIntersection19 = end1;\n    long long int startIntersection20\
    \ = start2;\n    long long int endIntersection20 = end2;\n    long long int "]
stop_tokens:
- "\n}"
