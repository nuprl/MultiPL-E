name: HumanEval_4_mean_absolute_deviation
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// For a given list of input\
  \ numbers, calculate Mean Absolute Deviation\n// around the mean of this dataset.\n\
  // Mean Absolute Deviation is the average absolute difference between each\n// element\
  \ and a centerpoint (mean in this case):\n// MAD = average | x - x_mean |\n// >>>\
  \ mean_absolute_deviation((std::vector<float>({(float)1.0, (float)2.0, (float)3.0,\
  \ (float)4.0})))\n// (1.0)\nfloat mean_absolute_deviation(std::vector<float> numbers)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = mean_absolute_deviation;\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0}))) == (0.5));\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0, (float)4.0}))) == (1.0));\n    assert(candidate((std::vector<float>({(float)1.0,\
  \ (float)2.0, (float)3.0, (float)4.0, (float)5.0}))) == (1.2));\n}\n"
completions: ["  assert(numbers.size() > 0);\n  float sum = 0;\n  for (auto x : numbers)\
    \ {\n    sum += std::abs(x - numbers.front());\n  }\n  return sum / numbers.size();",
  "  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number);\n\
    \  }\n  return sum / numbers.size();", "  float sum = 0;\n  float mean = numbers.front();\n\
    \  for (auto number : numbers) {\n    sum += (number - mean) * (number - mean);\n\
    \  }\n  return sum / numbers.size();", "    float sum = 0;\n    float mean = numbers.front();\n\
    \    for (float number : numbers) {\n        sum += (number - mean) * (number\
    \ - mean);\n    }\n    return sum / numbers.size();", "  float sum = 0;\n  for\
    \ (float number : numbers) {\n    sum += std::abs(number - numbers[0]);\n  }\n\
    \  return sum / numbers.size();", "  assert(numbers.size() > 0);\n  float mean\
    \ = numbers[0];\n  float sum = 0;\n  for (float number : numbers) {\n    sum +=\
    \ std::abs(number - mean);\n    mean = sum / numbers.size();\n  }\n  return sum\
    \ / numbers.size();", "  float sum = 0;\n  for (float number : numbers) {\n  \
    \  sum += fabs(number);\n  }\n  return sum / numbers.size();", "  float sum =\
    \ 0;\n  for (float number : numbers) {\n    sum += std::abs(number - numbers[0]);\n\
    \  }\n  return sum / numbers.size();", "  float sum = 0;\n  for (float number\
    \ : numbers) {\n    sum += fabs(number - numbers[0]);\n  }\n  return sum / numbers.size();",
  "  float sum = 0;\n  float mean = numbers.front();\n  for (float number : numbers)\
    \ {\n    sum += (number - mean) * (number - mean);\n  }\n  return sum / numbers.size();",
  "  assert(numbers.size() > 0);\n  float sum = 0;\n  for (float number : numbers)\
    \ {\n    sum += std::abs(number - numbers.front());\n  }\n  return sum / numbers.size();",
  "    float sum = 0;\n    float mean = numbers.front();\n    for (auto number : numbers)\
    \ {\n        sum += (number - mean) * (number - mean);\n    }\n    return sum\
    \ / numbers.size();", "  float sum = 0;\n  for (float number : numbers) {\n  \
    \  sum += fabs(number);\n  }\n  return sum / numbers.size();", "  float sum =\
    \ 0;\n  for (float number : numbers) {\n    sum += std::abs(number - numbers.front());\n\
    \  }\n  return sum / numbers.size();", "  float sum = 0;\n  float mean = numbers.front();\n\
    \  for (auto x : numbers) {\n    sum += (x - mean) * (x - mean);\n  }\n  return\
    \ sum / numbers.size();", "    float sum = 0;\n    float mean = numbers.front();\n\
    \    for (float number : numbers) {\n        sum += (number - mean) * (number\
    \ - mean);\n    }\n    return sum / numbers.size();", "  float sum = 0;\n  for\
    \ (float number : numbers) {\n    sum += fabs(number - numbers[0]);\n  }\n  return\
    \ sum / numbers.size();", "  float sum = 0;\n  for (float number : numbers) {\n\
    \    sum += fabs(number - numbers[0]);\n  }\n  return sum / numbers.size();",
  "  float sum = 0;\n  for (float number : numbers) {\n    sum += fabs(number - numbers[0]);\n\
    \  }\n  return sum / numbers.size();", "  assert(numbers.size() > 0);\n  float\
    \ mean = numbers[0];\n  float sum = 0;\n  for (auto number : numbers) {\n    sum\
    \ += std::abs(number - mean);\n    mean = sum / numbers.size();\n  }\n  return\
    \ sum / numbers.size();"]
stop_tokens:
- "\n}"
