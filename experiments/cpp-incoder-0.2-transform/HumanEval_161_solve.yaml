name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\n// >>>\
  \ solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>>\
  \ solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a'\
    \ && s[i]<='z'){\n            res+=toupper(s[i]);\n        }\n        else if(s[i]>='A'\
    \ && s[i]<='Z'){\n            res+=tolower(s[i]);\n        }\n        else{\n\
    \            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (c == 'a' || c == 'A') {\n   \
    \         ans = ans.replace(c, c == 'a' ? 'A' : 'a');\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\
    \ else {\n            ans.replace(i, 1, s[i]);\n        }\n    }\n    return ans;",
  "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            char c = toupper(s[i]);\n            s[i] = c;\n            res+=c;\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for (auto &c : s) {\n        if (std::isalpha(c))\
    \ {\n            ans = ans.replace(c, std::toupper(c));\n        } else {\n  \
    \          ans = ans.replace(c, std::tolower(c));\n        }\n    }\n    return\
    \ ans;", "    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n    \
    \    if(isalpha(s[i])) {\n            char c = toupper(s[i]);\n            s[i]\
    \ = c;\n            c = tolower(c);\n            s[i] = c;\n        }\n    }\n\
    \    res.assign(s);\n    return res;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &i : s) {\n        if (isalpha(i)) {\n            ans = ans.replace(i.tolower(),\
    \ i.toupper());\n        } else {\n            ans = ans.replace(i.toupper(),\
    \ i.tolower());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'A') {\n            ans[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            ans[i] = 'B';\n        } else if (s[i] == 'c' || s[i] ==\
    \ 'C') {\n            ans[i] = 'C';\n        } else if (s[i] == 'd' || s[i] ==\
    \ 'D') {\n            ans[i] = 'D';\n        } else if (s[i] == 'e' || s[i] ==\
    \ 'E') {\n            ans[i] = 'E';\n        } else if (s[i] == 'f' || s[i] ==\
    \ 'F') {\n            ans[i] = 'F';\n        } else if (s[i] == 'g' || s[i] ==\
    \ 'G') {\n            ans[i] = 'G';\n        } else if (s[i] == 'h' || s[i] ==\
    \ 'H') {\n            ans[i] = 'H';\n        } else if (s[i] == 'i' || s[i] ==\
    \ 'I') {\n            ans[i] = 'I';\n        } else if (s[i] == 'j' || s[i] ==\
    \ 'J') {\n            ans[i] = 'J';\n        } else if (s[i] == 'k' || s[i] ==\
    \ 'K') {\n            ans[i] = 'K';\n        } else if (s[i] == 'l' || s[i] ==\
    \ 'L') {\n            ans[i] = 'L';\n        } else if (s[i] == 'm' || s[i] ==\
    \ 'M') {\n            ans[i] = 'M';\n        } else if (s[i] == 'n' || s[i] ==\
    \ 'N') {\n            ans[i] = 'N';\n        } else if (s[i] == 'o' || s[i] ==\
    \ 'O') {\n            ans[i] = 'O';\n        } else if (s[i] == 'p' || s[i] ==\
    \ 'P') {\n            ans[i] = 'P';\n        } else if (s[i] == 'q' || s[i] ==\
    \ 'Q') {\n            ans[i] = 'Q';\n        } else if (s[i] == 'r' || s[i] ==\
    \ 'R') {\n            ans[i] = 'R';\n        } else if (s[i] == 's' || s[i] ==\
    \ 'S') {\n            ans[i] = 'S';\n        } else if (s[i] == 't' || s[i] ==\
    \ 'T') {\n            ans[i] = 'T';\n        } else if (s[i] == 'u' || s[i] ==\
    \ 'U') {\n            ans[i] = 'U';\n        } else if (s[i] == 'v' || s[i] ==\
    \ 'V') {\n            ans[i] = 'V';\n        } else if (s[i] == 'w' || s[i] ==\
    \ 'W') {\n            ans[i] = 'W';\n        } else if (s[i] == 'x' || s[i] ==\
    \ 'X') {\n            ans[i] = 'X';\n        } else if (s[i] == 'y' || s[i] ==\
    \ 'Y') {\n            ans[i] = 'Y';\n        } else if (s[i] == 'z' || s[i] ==\
    \ 'Z') {\n            ans[i] = 'Z';\n        }\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    for(char c : s) {\n        if(c == 'a' || c ==\
    \ 'A') {\n            ans += \"A\";\n        } else if(c == 'b' || c == 'B') {\n\
    \            ans += \"B\";\n        } else if(c == 'c' || c == 'C') {\n      \
    \      ans += \"C\";\n        } else if(c == 'd' || c == 'D') {\n            ans\
    \ += \"D\";\n        } else if(c == 'e' || c == 'E') {\n            ans += \"\
    E\";\n        } else if(c == 'f' || c == 'F') {\n            ans += \"F\";\n \
    \       } else if(c == 'g' || c == 'G') {\n            ans += \"G\";\n       \
    \ } else if(c == 'h' || c == 'H') {\n            ans += \"H\";\n        } else\
    \ if(c == 'i' || c == 'I') {\n            ans += \"I\";\n        } else if(c ==\
    \ 'j' || c == 'J') {\n            ans += \"J\";\n        } else if(c == 'k' ||\
    \ c == 'K') {\n            ans += \"K\";\n        } else if(c == 'l' || c == 'L')\
    \ {\n            ans += \"L\";\n        } else if(c == 'm' || c == 'M') {\n  \
    \          ans += \"M\";\n        } else if(c == 'n' || c == 'N') {\n        \
    \    ans += \"N\";\n        } else if(c == 'o' || c == 'O') {\n            ans\
    \ += \"O\";\n        } else if(c == 'p' || c == 'P') {\n            ans += \"\
    P\";\n        } else if(c == 'q' || c == 'Q') {\n            ans += \"Q\";\n \
    \       } else if(c == 'r' || c == 'R') {\n            ans += \"R\";\n       \
    \ } else if(c == 's' || c == 'S') {\n            ans += \"S\";\n        } else\
    \ if(c == 't' || c == 'T') {\n            ans += \"T\";\n        } else if(c ==\
    \ 'u' || c == 'U') {\n            ans += \"U\";\n        } else if(c == 'v' ||\
    \ c == 'V') {\n            ans += \"V\";\n        } else if(c == 'w' || c == 'W')\
    \ {\n            ans += \"W\";\n        } else if(c == 'x' || c == 'X') {\n  \
    \          ans += \"X\";\n        } else if(c == 'y' || c == 'Y') {\n        \
    \    ans += \"Y\";\n        } else if(c == 'z' || c == 'Z') {\n            ans\
    \ += \"Z\";\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n   \
    \     }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans.at(i) = toupper(s[i]);\n\
    \        } else {\n            ans.at(i) = s[i];\n        }\n    }\n    return\
    \ ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a'\
    \ && s[i]<='z'){\n            res+=std::toupper(s[i]);\n        }\n        else\
    \ if(s[i]>='A' && s[i]<='Z'){\n            res+=std::tolower(s[i]);\n        }\n\
    \        else{\n            res+=s[i];\n        }\n    }\n    return res;", " \
    \   std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n\
    \        }\n    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res+=toupper(s[i]);\n      \
    \  }\n        else if(s[i]>='A' && s[i]<='Z'){\n            res+=tolower(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            char c = toupper(s[i]);\n            s[i] = c;\n            char\
    \ d = tolower(s[i]);\n            s[i] = d;\n        }\n    }\n    res.assign(s);\n\
    \    return res;", "    std::string ans = s;\n    for (size_t i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' &&\
    \ s[i]<='z'){\n            res+=toupper(s[i]);\n        }\n        else if(s[i]>='A'\
    \ && s[i]<='Z'){\n            res+=tolower(s[i]);\n        }\n        else{\n\
    \            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n     \
    \       res+=toupper(s[i]);\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n\
    \            res+=tolower(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans[i]\
    \ = toupper(s[i]);\n            ans[s.size() - i - 1] = tolower(s[i]);\n     \
    \   }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto &c :\
    \ s) {\n        if (isalpha(c)) {\n            ans = ans.replace(c, toupper(c));\n\
    \        } else {\n            ans = ans.replace(c, tolower(c));\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n        }\n    \
    \    else{\n            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n       \
    \     res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n\
    \            ans.replace(i, 2, tolower(s[i]));\n        } else {\n           \
    \ ans.replace(i, 1, s[i]);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &i : s) {\n        if (isalpha(i)) {\n            ans =\
    \ ans.replace(i,toupper(i),1);\n        } else {\n            ans = ans.replace(i,tolower(i),1);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (std::isalpha(s[i])) {\n           \
    \ ans = ans.substr(0, i) + std::toupper(ans.at(i)) + ans.substr(i + 1);\n    \
    \    } else {\n            ans = ans.substr(0, i) + std::tolower(ans.at(i)) +\
    \ ans.substr(i + 1);\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            char\
    \ c = s[i];\n            s[i] = toupper(c);\n            s[i] = tolower(c);\n\
    \        }\n        res += s[i];\n    }\n    return res;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n     \
    \       res+=s[i];\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n    \
    \        res+=s[i];\n        }\n        else{\n            res+=s[i];\n      \
    \  }\n    }\n    return res;", "    std::string ans = s;\n    for (auto &c : s)\
    \ {\n        if (isalpha(c)) {\n            ans = ans.replace(c, toupper(c));\n\
    \        } else {\n            ans = ans.replace(c, tolower(c));\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (size_t i = 0; i\
    \ < s.size(); i++) {\n        if (s[i] >= 'a' && s[i] <= 'z') {\n            ans[i]\
    \ = s[i] - 'a' + 'A';\n        } else if (s[i] >= 'A' && s[i] <= 'Z') {\n    \
    \        ans[i] = s[i] - 'A' + 'a';\n        } else {\n            ans[i] = s[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'A') {\n   \
    \         ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n  \
    \      }\n        else if (s[i] == 'b' || s[i] == 'B') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'c' || s[i] == 'C') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'd' || s[i] ==\
    \ 'D') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n        else if (s[i] == 'e' || s[i] == 'E') {\n       \
    \     ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n      \
    \  }\n        else if (s[i] == 'f' || s[i] == 'F') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'g' || s[i] == 'G') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'h' || s[i] ==\
    \ 'H') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n        else if (s[i] == 'i' || s[i] == 'I') {\n       \
    \     ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n      \
    \  }\n        else if (s[i] == 'j' || s[i] == 'J') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'k' || s[i] == 'K') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'l' || s[i] ==\
    \ 'L') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n        else if (s[i] == 'm' || s[i] == 'M') {\n       \
    \     ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n      \
    \  }\n        else if (s[i] == 'n' || s[i] == 'N') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n        else if (s[i]\
    \ == 'o' || s[i] == 'O') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n        else if (s[i] == 'p' || s[i] ==\
    \ 'P') {\n            ans = ans.substr(0, i) + an", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'A') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() -\
    \ i - 1);\n        }\n    }\n    return ans;", "    std::string ans = s;\n   \
    \ for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n    \
    \        ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1,\
    \ ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n  \
    \  for(int i=0;i<s.size();i++){\n        if(s[i]>=65 && s[i]<=90){\n         \
    \   res+=toupper(s[i]);\n        }\n        else if(s[i]>=97 && s[i]<=122){\n\
    \            res+=tolower(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res+=toupper(s[i]);\n      \
    \  }\n        else if(s[i]>='A' && s[i]<='Z'){\n            res+=tolower(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++)\
    \ {\n        if (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i);\n        }\n    }\n    return ans;",
  "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for(int i = 0; i <\
    \ s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (auto &c : s) {\n        if (c == 'a' || c ==\
    \ 'A') {\n            ans = ans.replace(c, c == 'a' ? 'A' : 'a');\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            char c = toupper(s[i]);\n           \
    \ char t = tolower(s[i]);\n            s[i] = t;\n            s[i] = c;\n    \
    \    }\n    }\n    res.assign(s);\n    return res;", "    std::string ans = s;\n\
    \    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n \
    \           ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c: s) {\n        if (c == 'a' || c == 'A') {\n        \
    \    ans = ans.replace(\"a\", toupper(c));\n            ans = ans.replace(\"A\"\
    , tolower(c));\n        }\n    }\n    return ans;", "    std::string res;\n  \
    \  for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n       \
    \     res+=s[i];\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n      \
    \      res+=s[i];\n        }\n        else{\n            res+=s[i];\n        }\n\
    \    }\n    return res;", "    std::string ans = s;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      char c = toupper(s[i]);\n            s[i] = c;\n            c = tolower(c);\n\
    \            s[i] = c;\n        }\n    }\n    res.assign(s);\n    return res;",
  "    std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    int n = s.size();\n    for (int i = 0; i < n; i++) {\n        if (isalpha(s[i]))\
    \ {\n            if (isupper(s[i])) {\n                s[i] = tolower(s[i]);\n\
    \            } else {\n                s[i] = toupper(s[i]);\n            }\n\
    \        }\n    }\n    for (int i = 0; i < n; i++) {\n        if (isalpha(s[i]))\
    \ {\n            res += s[i];\n        } else {\n            res += s[i];\n  \
    \      }\n    }\n    return res;", "    std::string ans = s;\n    for (auto &i\
    \ : s) {\n        if (std::isalpha(i)) {\n            ans = std::toupper(ans);\n\
    \        } else {\n            ans = std::tolower(ans);\n        }\n    }\n  \
    \  return ans;", "    std::string ans = s;\n    for (auto &c : s) {\n        if\
    \ (isalpha(c)) {\n            ans = ans.replace(c, toupper(c));\n        } else\
    \ {\n            ans = ans.replace(c, tolower(c));\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for (auto &c : s) {\n        if (std::isalpha(c))\
    \ {\n            ans = ans.replace(c, std::toupper(c));\n        } else {\n  \
    \          ans = ans.replace(c, std::tolower(c));\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n     \
    \       res+=toupper(s[i]);\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n\
    \            res+=tolower(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (auto\
    \ &i : s) {\n        if (isalpha(i)) {\n            ans = ans.replace(i.tolower(),\
    \ i.toupper());\n        } else {\n            ans = ans.replace(i.toupper(),\
    \ i.tolower());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans = ans.substr(0,\
    \ ans.size()-1) + toupper(ans.back()) + ans.substr(ans.size()-1);\n        } else\
    \ {\n            ans = ans.substr(0, ans.size()-1) + tolower(ans.back()) + ans.substr(ans.size()-1);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &c : s) {\n        if (isalpha(c)) {\n            ans = ans.substr(0, ans.size()-1)\
    \ + toupper(ans.back()) + ans.substr(ans.size()-1);\n        } else {\n      \
    \      ans = ans.substr(0, ans.size()-1) + tolower(ans.back()) + ans.substr(ans.size()-1);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c: s) {\n        if (isalpha(c)) {\n            ans = ans.replace(c,\
    \ toupper(c), 1);\n        } else {\n            ans = ans.replace(c, tolower(c),\
    \ 1);\n        }\n    }\n    return ans;", "    std::string ans = s;\n    for\
    \ (auto &i : s) {\n        if (isalpha(i)) {\n            ans = ans.substr(0,\
    \ ans.size() - 1) + toupper(ans.substr(ans.size() - 1)) + ans.substr(0, ans.size()\
    \ - 1);\n        } else {\n            ans = ans.substr(0, ans.size() - 1) + i;\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &c: ans) {\n        if (c == 'a' || c == 'A') {\n            ans = ans.replace(c,\
    \ 'A');\n        } else if (c == 'b' || c == 'B') {\n            ans = ans.replace(c,\
    \ 'B');\n        } else if (c == 'c' || c == 'C') {\n            ans = ans.replace(c,\
    \ 'C');\n        } else if (c == 'd' || c == 'D') {\n            ans = ans.replace(c,\
    \ 'D');\n        } else if (c == 'e' || c == 'E') {\n            ans = ans.replace(c,\
    \ 'E');\n        } else if (c == 'f' || c == 'F') {\n            ans = ans.replace(c,\
    \ 'F');\n        } else if (c == 'g' || c == 'G') {\n            ans = ans.replace(c,\
    \ 'G');\n        } else if (c == 'h' || c == 'H') {\n            ans = ans.replace(c,\
    \ 'H');\n        } else if (c == 'i' || c == 'I') {\n            ans = ans.replace(c,\
    \ 'I');\n        } else if (c == 'j' || c == 'J') {\n            ans = ans.replace(c,\
    \ 'J');\n        } else if (c == 'k' || c == 'K') {\n            ans = ans.replace(c,\
    \ 'K');\n        } else if (c == 'l' || c == 'L') {\n            ans = ans.replace(c,\
    \ 'L');\n        } else if (c == 'm' || c == 'M') {\n            ans = ans.replace(c,\
    \ 'M');\n        } else if (c == 'n' || c == 'N') {\n            ans = ans.replace(c,\
    \ 'N');\n        } else if (c == 'o' || c == 'O') {\n            ans = ans.replace(c,\
    \ 'O');\n        } else if (c == 'p' || c == 'P') {\n            ans = ans.replace(c,\
    \ 'P');\n        } else if (c == 'q' || c == 'Q') {\n            ans = ans.replace(c,\
    \ 'Q');\n        } else if (c == 'r' || c == 'R') {\n            ans = ans.replace(c,\
    \ 'R');\n        } else if (c == 's' || c == 'S') {\n            ans = ans.replace(c,\
    \ 'S');\n        } else if (c == 't' || c == 'T') {\n            ans = ans.replace(c,\
    \ 'T');\n        } else if (c == 'u' || c == 'U') {\n            ans = ans.replace(c,\
    \ 'U');\n        } else if (c == 'v' || c == 'V') {\n            ans = ans.replace(c,\
    \ 'V');\n        } else if (c == 'w' || c == 'W') {\n            ans = ans.replace(c,\
    \ 'W');\n        } else if (c == 'x' || c == 'X') {\n            ans = ans.replace",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = \"\";\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n\
    \        }\n    }\n    ans = ans.substr(0, ans.length()-1);\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &i : s) {\n        if (isalpha(i)) {\n            ans = ans.replace(i.tolower(),\
    \ i.toupper());\n        } else {\n            ans = ans.replace(i.toupper(),\
    \ i.tolower());\n        }\n    }\n    return ans;", "    std::string res;\n \
    \   for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n\
    \        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for (auto &c: s) {\n        if (isalpha(c))\
    \ {\n            ans = ans.replace(c, toupper(c));\n        } else {\n       \
    \     ans = ans.replace(c, tolower(c));\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c : s) {\n        if (c == 'a' || c == 'A') {\n       \
    \     ans = ans.replace(\"a\", toupper(c));\n            ans = ans.replace(\"\
    A\", tolower(c));\n        }\n    }\n    return ans;", "    std::string ans =\
    \ s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans[i] = toupper(s[i]);\n        } else {\n            ans[i]\
    \ = s[i];\n        }\n    }\n    return ans;", "    std::string ans = s;\n   \
    \ for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n         \
    \   ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n\
    \        }\n    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n        }\n    \
    \    else{\n            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = \"\";\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &c: s) {\n        if (c == 'a' || c == 'A') {\n            ans = ans.replace(\"\
    A\", c).replace(c, \"A\");\n        } else if (c == 'b' || c == 'B') {\n     \
    \       ans = ans.replace(\"B\", c).replace(c, \"B\");\n        } else if (c ==\
    \ 'c' || c == 'C') {\n            ans = ans.replace(\"C\", c).replace(c, \"C\"\
    );\n        } else if (c == 'd' || c == 'D') {\n            ans = ans.replace(\"\
    D\", c).replace(c, \"D\");\n        } else if (c == 'e' || c == 'E') {\n     \
    \       ans = ans.replace(\"E\", c).replace(c, \"E\");\n        } else if (c ==\
    \ 'f' || c == 'F') {\n            ans = ans.replace(\"F\", c).replace(c, \"F\"\
    );\n        } else if (c == 'g' || c == 'G') {\n            ans = ans.replace(\"\
    G\", c).replace(c, \"G\");\n        } else if (c == 'h' || c == 'H') {\n     \
    \       ans = ans.replace(\"H\", c).replace(c, \"H\");\n        } else if (c ==\
    \ 'i' || c == 'I') {\n            ans = ans.replace(\"I\", c).replace(c, \"I\"\
    );\n        } else if (c == 'j' || c == 'J') {\n            ans = ans.replace(\"\
    J\", c).replace(c, \"J\");\n        } else if (c == 'k' || c == 'K') {\n     \
    \       ans = ans.replace(\"K\", c).replace(c, \"K\");\n        } else if (c ==\
    \ 'l' || c == 'L') {\n            ans = ans.replace(\"L\", c).replace(c, \"L\"\
    );\n        } else if (c == 'm' || c == 'M') {\n            ans = ans.replace(\"\
    M\", c).replace(c, \"M\");\n        } else if (c == 'n' || c == 'N') {\n     \
    \       ans = ans.replace(\"N\", c).replace(c, \"N\");\n        } else if (c ==\
    \ 'o' || c == 'O') {\n            ans = ans.replace(\"O\", c).replace(c, \"O\"\
    );\n        } else if (c == 'p' || c == 'P') {\n            ans = ans.replace(\"\
    P\", c).replace(c, \"P\");\n        } else if (c == 'q' || c == 'Q') {\n     \
    \       ans = ans.replace(\"Q\", c).replace(c, \"Q\");\n        } else if (c ==\
    \ 'r' || c == 'R') {\n            ans = ans.replace(\"R\", c).replace(c, \"R\"\
    );\n        } else if (c == 's' || c == 'S') {\n            ans = ans.replace(\"\
    S\", c).replace(c, \"S\");\n        } else if (c == 't' || c", "    std::string\
    \ ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a'\
    \ || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.size()\
    \ - i - 1);\n        }\n    }\n    return ans;", "    std::string ans = s;\n \
    \   for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n       \
    \     ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n\
    \        } else {\n            ans = ans.substr(0, i) + tolower(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans[i] = toupper(s[i]);\n        }\n    }\n    return ans;",
  "    std::string ans = \"\";\n    for (auto &c: s) {\n        if (isalpha(c)) {\n\
    \            ans += toupper(c);\n        } else {\n            ans += c;\n   \
    \     }\n    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res+=toupper(s[i]);\n      \
    \  }\n        else if(s[i]>='A' && s[i]<='Z'){\n            res+=tolower(s[i]);\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            ans[i] = toupper(s[i]);\n     \
    \   } else {\n            ans[i] = s[i];\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans =\
    \ ans.replace(c, toupper(c));\n        } else {\n            ans = ans.replace(c,\
    \ tolower(c));\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (auto &i : s) {\n        if (isalpha(i)) {\n            ans = ans.replace(i,toupper(i),1);\n\
    \            ans = ans.replace(i,tolower(i),1);\n        } else {\n          \
    \  ans = ans.replace(i,i,1);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (auto &c: s) {\n        if (c == 'a' || c == 'A') {\n    \
    \        ans = ans.replace(\"A\",\"a\");\n            ans = ans.replace(\"a\"\
    ,\"A\");\n        }\n        if (c == 'b' || c == 'B') {\n            ans = ans.replace(\"\
    B\",\"b\");\n            ans = ans.replace(\"b\",\"B\");\n        }\n        if\
    \ (c == 'c' || c == 'C') {\n            ans = ans.replace(\"C\",\"c\");\n    \
    \        ans = ans.replace(\"c\",\"C\");\n        }\n        if (c == 'd' || c\
    \ == 'D') {\n            ans = ans.replace(\"D\",\"d\");\n            ans = ans.replace(\"\
    d\",\"D\");\n        }\n        if (c == 'e' || c == 'E') {\n            ans =\
    \ ans.replace(\"E\",\"e\");\n            ans = ans.replace(\"e\",\"E\");\n   \
    \     }\n        if (c == 'f' || c == 'F') {\n            ans = ans.replace(\"\
    F\",\"f\");\n            ans = ans.replace(\"f\",\"F\");\n        }\n        if\
    \ (c == 'g' || c == 'G') {\n            ans = ans.replace(\"G\",\"g\");\n    \
    \        ans = ans.replace(\"g\",\"G\");\n        }\n        if (c == 'h' || c\
    \ == 'H') {\n            ans = ans.replace(\"H\",\"h\");\n            ans = ans.replace(\"\
    h\",\"H\");\n        }\n        if (c == 'i' || c == 'I') {\n            ans =\
    \ ans.replace(\"I\",\"i\");\n            ans = ans.replace(\"i\",\"I\");\n   \
    \     }\n        if (c == 'j' || c == 'J') {\n            ans = ans.replace(\"\
    J\",\"j\");\n            ans = ans.replace(\"j\",\"J\");\n        }\n        if\
    \ (c == 'k' || c == 'K') {\n            ans = ans.replace(\"K\",\"k\");\n    \
    \        ans = ans.replace(\"k\",\"K\");\n        }\n        if (c == 'l' || c\
    \ == 'L') {\n            ans = ans.replace(\"L\",\"l\");\n            ans = ans.replace(\"\
    l\",\"L\");\n        }\n        if (c == 'm' || c == 'M') {\n            ans =\
    \ ans.replace(\"M\",\"m\");\n            ans = ans.replace(\"m\",\"M\");\n   \
    \     }\n        if (c == 'n' || c == 'N') {\n            ans = ans.replace(\"\
    N\",\"n\");\n            ans = ans.replace(\"n\",\"N\");\n        }\n        if\
    \ (c == 'o' || c == 'O') {\n            ans = ans.replace(\"O\",\"o\");\n    \
    \        ans = ans.", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n      \
    \  if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'A') {\n   \
    \         ans = ans.substr(0, i) + ans.substr(i + 1, ans.size() - i - 1);\n  \
    \      }\n    }\n    return ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n        }\n    \
    \    else{\n            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i, 2,\
    \ tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans =\
    \ s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n \
    \           ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(auto &c : s) {\n        if(isalpha(c)) {\n            ans = ans.replace(c,\
    \ toupper(c));\n        } else {\n            ans = ans.replace(c, tolower(c));\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(auto &c:\
    \ s) {\n        if(isalpha(c)) {\n            ans = ans.substr(0, ans.size()-1)\
    \ + toupper(ans.back()) + ans.substr(ans.size()-1);\n        }\n        else {\n\
    \            ans = ans.substr(0, ans.size()-1) + c;\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n\
    \            ans = ans.substr(0, ans.size() - 1) + toupper(ans.back()) + ans.substr(ans.size()\
    \ - 1);\n        } else {\n            ans = ans.substr(0, ans.size() - 1) + c;\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &c : s) {\n        if (isalpha(c)) {\n            ans = ans.replace(c, toupper(c));\n\
    \        } else {\n            ans = ans.replace(c, tolower(c));\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for(int i = 0; i <\
    \ s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    return ans;",
  "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' &&\
    \ s[i]<='z'){\n            res+=s[i];\n        }\n        else if(s[i]>='A' &&\
    \ s[i]<='Z'){\n            res+=s[i];\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (int i\
    \ = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans.at(s[i]) = toupper(ans.at(s[i]));\n\
    \        }\n        else {\n            ans.at(s[i]) = tolower(ans.at(s[i]));\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (size_t i = 0; i\
    \ < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string res;\n    for (auto &c: s) {\n    \
    \    if (isalpha(c)) {\n            std::swap(toupper(c), tolower(c));\n     \
    \   }\n        res += c;\n    }\n    return res;", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.length(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'A') {\n            ans = ans.substr(0, i) + ans.substr(i + 1, ans.length()\
    \ - i - 1);\n        }\n    }\n    return ans;", "    std::string res;\n    for(int\
    \ i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            char c\
    \ = toupper(s[i]);\n            s[i] = c;\n            c = tolower(s[i]);\n  \
    \          s[i] = c;\n        }\n    }\n    res.assign(s);\n    return res;",
  "    std::string res;\n    for (auto &c: s) {\n        if (isalpha(c)) {\n     \
    \       char c = toupper(c);\n            char t = tolower(c);\n            res\
    \ = res + t;\n        } else {\n            res = res + c;\n        }\n    }\n\
    \    return res;", "    std::string ans = s;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0,\
    \ i) + ans.substr(i + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n     \
    \       res+=s[i];\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n    \
    \        res+=s[i];\n        }\n        else{\n            res+=s[i];\n      \
    \  }\n    }\n    return res;", "    std::string ans = s;\n    for (auto &i : ans)\
    \ {\n        if (isalpha(i)) {\n            i = toupper(i);\n        }\n    }\n\
    \    return ans;", "    std::string ans = s;\n    for (auto &c : s) {\n      \
    \  if (std::isalpha(c)) {\n            ans = std::toupper(ans);\n            ans\
    \ = std::tolower(ans);\n        } else {\n            ans = c;\n        }\n  \
    \  }\n    return ans;", "    std::string ans = s;\n    for (auto &i : s) {\n \
    \       if (isalpha(i)) {\n            ans = ans.replace(i,toupper(i),1);\n  \
    \          ans = ans.replace(i,tolower(i),1);\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1);\n        } else {\n            ans = ans.substr(0,\
    \ i) + tolower(ans.substr(i, 1)) + ans.substr(i + 1);\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (std::isalpha(s[i])) {\n            ans.replace(i, 1, std::toupper(s[i]));\n\
    \            ans.replace(i, 2, std::tolower(s[i]));\n        }\n    }\n    return\
    \ ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (auto\
    \ &i : s) {\n        if (isalpha(i)) {\n            ans = ans.substr(0, ans.size()\
    \ - 1) + toupper(ans.back()) + ans.substr(ans.size() - 1);\n        } else {\n\
    \            ans = ans.substr(0, ans.size() - 1) + i;\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++)\
    \ {\n        if (isalpha(s[i])) {\n            ans[i] = toupper(s[i]);\n     \
    \       ans[s.size() - i - 1] = tolower(ans[s.size() - i - 1]);\n        }\n \
    \   }\n    return ans;", "    std::string ans = s;\n    for (size_t i = 0; i <\
    \ s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size();\
    \ i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c : s) {\n        if (isalpha(c)) {\n            ans =\
    \ ans.substr(0, ans.size()-1) + toupper(ans.back()) + ans.substr(ans.size()-1);\n\
    \        } else {\n            ans = ans.substr(0, ans.size()-1) + tolower(ans.back())\
    \ + ans.substr(ans.size()-1);\n        }\n    }\n    return ans;", "    std::string\
    \ res;\n    for(int i=0;i<s.size();i++) {\n        if(s[i]>='a' && s[i]<='z')\
    \ {\n            res+=s[i];\n        }\n        else {\n            res+=toupper(s[i]);\n\
    \        }\n    }\n    return res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            int l=tolower(s[i]);\n            int\
    \ u=toupper(s[i]);\n            res+=l+u;\n        }\n        else{\n        \
    \    res+=s[i];\n        }\n    }\n    return res;", "    std::string ans = s;\n\
    \    for (auto &i : s) {\n        if (std::isalpha(i)) {\n            ans = ans.substr(0,\
    \ ans.length() - 1) + toupper(ans.substr(ans.length() - 1)) + ans.substr(0, ans.length()\
    \ - 1);\n        } else {\n            ans = ans.substr(0, ans.length() - 1) +\
    \ i;\n        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int\
    \ i = 0; i < s.length(); i++) {\n        if(isalpha(s[i])) {\n            ans\
    \ = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.length());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (auto &c: ans) {\n\
    \        if (std::isalpha(c)) {\n            std::swap(std::toupper(c), std::tolower(c));\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &c : s) {\n        if (c == 'a' || c == 'A') {\n            ans = ans.replace(c,\
    \ 'A');\n        } else if (c == 'b' || c == 'B') {\n            ans = ans.replace(c,\
    \ 'B');\n        } else if (c == 'c' || c == 'C') {\n            ans = ans.replace(c,\
    \ 'C');\n        } else if (c == 'd' || c == 'D') {\n            ans = ans.replace(c,\
    \ 'D');\n        } else if (c == 'e' || c == 'E') {\n            ans = ans.replace(c,\
    \ 'E');\n        } else if (c == 'f' || c == 'F') {\n            ans = ans.replace(c,\
    \ 'F');\n        } else if (c == 'g' || c == 'G') {\n            ans = ans.replace(c,\
    \ 'G');\n        } else if (c == 'h' || c == 'H') {\n            ans = ans.replace(c,\
    \ 'H');\n        } else if (c == 'i' || c == 'I') {\n            ans = ans.replace(c,\
    \ 'I');\n        } else if (c == 'j' || c == 'J') {\n            ans = ans.replace(c,\
    \ 'J');\n        } else if (c == 'k' || c == 'K') {\n            ans = ans.replace(c,\
    \ 'K');\n        } else if (c == 'l' || c == 'L') {\n            ans = ans.replace(c,\
    \ 'L');\n        } else if (c == 'm' || c == 'M') {\n            ans = ans.replace(c,\
    \ 'M');\n        } else if (c == 'n' || c == 'N') {\n            ans = ans.replace(c,\
    \ 'N');\n        } else if (c == 'o' || c == 'O') {\n            ans = ans.replace(c,\
    \ 'O');\n        } else if (c == 'p' || c == 'P') {\n            ans = ans.replace(c,\
    \ 'P');\n        } else if (c == 'q' || c == 'Q') {\n            ans = ans.replace(c,\
    \ 'Q');\n        } else if (c == 'r' || c == 'R') {\n            ans = ans.replace(c,\
    \ 'R');\n        } else if (c == 's' || c == 'S') {\n            ans = ans.replace(c,\
    \ 'S');\n        } else if (c == 't' || c == 'T') {\n            ans = ans.replace(c,\
    \ 'T');\n        } else if (c == 'u' || c == 'U') {\n            ans = ans.replace(c,\
    \ 'U');\n        } else if (c == 'v' || c == 'V') {\n            ans = ans.replace(c,\
    \ 'V');\n        } else if (c == 'w' || c == 'W') {\n            ans = ans.replace(c,\
    \ 'W');\n        } else if (c == 'x' || c == 'X') {\n            ans = ans.replace",
  "    std::string ans = s;\n    for (auto &c : s) {\n        if (c == 'a' || c ==\
    \ 'A') {\n            ans = ans.replace(c, 'A');\n        } else if (c == 'b'\
    \ || c == 'B') {\n            ans = ans.replace(c, 'B');\n        } else if (c\
    \ == 'c' || c == 'C') {\n            ans = ans.replace(c, 'C');\n        } else\
    \ if (c == 'd' || c == 'D') {\n            ans = ans.replace(c, 'D');\n      \
    \  } else if (c == 'e' || c == 'E') {\n            ans = ans.replace(c, 'E');\n\
    \        } else if (c == 'f' || c == 'F') {\n            ans = ans.replace(c,\
    \ 'F');\n        } else if (c == 'g' || c == 'G') {\n            ans = ans.replace(c,\
    \ 'G');\n        } else if (c == 'h' || c == 'H') {\n            ans = ans.replace(c,\
    \ 'H');\n        } else if (c == 'i' || c == 'I') {\n            ans = ans.replace(c,\
    \ 'I');\n        } else if (c == 'j' || c == 'J') {\n            ans = ans.replace(c,\
    \ 'J');\n        } else if (c == 'k' || c == 'K') {\n            ans = ans.replace(c,\
    \ 'K');\n        } else if (c == 'l' || c == 'L') {\n            ans = ans.replace(c,\
    \ 'L');\n        } else if (c == 'm' || c == 'M') {\n            ans = ans.replace(c,\
    \ 'M');\n        } else if (c == 'n' || c == 'N') {\n            ans = ans.replace(c,\
    \ 'N');\n        } else if (c == 'o' || c == 'O') {\n            ans = ans.replace(c,\
    \ 'O');\n        } else if (c == 'p' || c == 'P') {\n            ans = ans.replace(c,\
    \ 'P');\n        } else if (c == 'q' || c == 'Q') {\n            ans = ans.replace(c,\
    \ 'Q');\n        } else if (c == 'r' || c == 'R') {\n            ans = ans.replace(c,\
    \ 'R');\n        } else if (c == 's' || c == 'S') {\n            ans = ans.replace(c,\
    \ 'S');\n        } else if (c == 't' || c == 'T') {\n            ans = ans.replace(c,\
    \ 'T');\n        } else if (c == 'u' || c == 'U') {\n            ans = ans.replace(c,\
    \ 'U');\n        } else if (c == 'v' || c == 'V') {\n            ans = ans.replace(c,\
    \ 'V');\n        } else if (c == 'w' || c == 'W') {\n            ans = ans.replace(c,\
    \ 'W');\n        } else if (c == 'x' || c == 'X') {\n            ans = ans.replace",
  "    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] >= 'a' && s[i] <= 'z') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>=65 && s[i]<=90){\n\
    \            res+=char(s[i]-32);\n        }\n        else if(s[i]>=97 && s[i]<=122){\n\
    \            res+=char(s[i]+32);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for (auto\
    \ &c : s) {\n        if (std::isalpha(c)) {\n            ans = std::toupper(ans);\n\
    \            ans = std::tolower(ans);\n        } else {\n            ans = c;\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &c : s) {\n        if (std::isalpha(c)) {\n            ans = std::string(std::toupper(c),\
    \ std::tolower(c));\n        } else {\n            ans = std::string(std::tolower(c),\
    \ std::toupper(c));\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>=65 && s[i]<=90){\n       \
    \     res+=toupper(s[i]);\n        }\n        else if(s[i]>=97 && s[i]<=122){\n\
    \            res+=tolower(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(s[i]>='a' && s[i]<='z'){\n            res+=s[i];\n        }\n    \
    \    else if(s[i]>='A' && s[i]<='Z'){\n            res+=s[i];\n        }\n   \
    \     else{\n            res+=s[i];\n        }\n    }\n    return res;", "   \
    \ std::string ans = s;\n    for(int i = 0; i < s.length(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.length());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n     \
    \       res+=toupper(s[i]);\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n\
    \            res+=tolower(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (size_t i = 0; i\
    \ < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for (size_t i = 0; i\
    \ < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for (auto &i : s) {\n        if (isalpha(i)) {\n\
    \            ans = ans.substr(0, ans.length() - 1) + toupper(i) + ans.substr(ans.length()\
    \ - 1);\n        } else {\n            ans = ans.substr(0, ans.length() - 1) +\
    \ i;\n        }\n    }\n    return ans;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &i : s) {\n        if (std::isalpha(i)) {\n            ans = ans.substr(0, ans.size()\
    \ - 1) + std::toupper(i) + ans.substr(ans.size() - 1);\n        } else {\n   \
    \         ans = ans.substr(0, ans.size() - 1) + std::tolower(i) + ans.substr(ans.size()\
    \ - 1);\n        }\n    }\n    return ans;", "    std::string ans = s;\n    for\
    \ (auto &c: ans) {\n        if (std::isalpha(c)) {\n            std::transform(c.begin(),\
    \ c.end(), c.begin(), ::toupper);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c: s) {\n        if (c == 'a' || c == 'A') {\n        \
    \    ans = ans.replace(\"A\",\"a\");\n            ans = ans.replace(\"a\",\"A\"\
    );\n        }\n        if (c == 'b' || c == 'B') {\n            ans = ans.replace(\"\
    B\",\"b\");\n            ans = ans.replace(\"b\",\"B\");\n        }\n        if\
    \ (c == 'c' || c == 'C') {\n            ans = ans.replace(\"C\",\"c\");\n    \
    \        ans = ans.replace(\"c\",\"C\");\n        }\n        if (c == 'd' || c\
    \ == 'D') {\n            ans = ans.replace(\"D\",\"d\");\n            ans = ans.replace(\"\
    d\",\"D\");\n        }\n        if (c == 'e' || c == 'E') {\n            ans =\
    \ ans.replace(\"E\",\"e\");\n            ans = ans.replace(\"e\",\"E\");\n   \
    \     }\n        if (c == 'f' || c == 'F') {\n            ans = ans.replace(\"\
    F\",\"f\");\n            ans = ans.replace(\"f\",\"F\");\n        }\n        if\
    \ (c == 'g' || c == 'G') {\n            ans = ans.replace(\"G\",\"g\");\n    \
    \        ans = ans.replace(\"g\",\"G\");\n        }\n        if (c == 'h' || c\
    \ == 'H') {\n            ans = ans.replace(\"H\",\"h\");\n            ans = ans.replace(\"\
    h\",\"H\");\n        }\n        if (c == 'i' || c == 'I') {\n            ans =\
    \ ans.replace(\"I\",\"i\");\n            ans = ans.replace(\"i\",\"I\");\n   \
    \     }\n        if (c == 'j' || c == 'J') {\n            ans = ans.replace(\"\
    J\",\"j\");\n            ans = ans.replace(\"j\",\"J\");\n        }\n        if\
    \ (c == 'k' || c == 'K') {\n            ans = ans.replace(\"K\",\"k\");\n    \
    \        ans = ans.replace(\"k\",\"K\");\n        }\n        if (c == 'l' || c\
    \ == 'L') {\n            ans = ans.replace(\"L\",\"l\");\n            ans = ans.replace(\"\
    l\",\"L\");\n        }\n        if (c == 'm' || c == 'M') {\n            ans =\
    \ ans.replace(\"M\",\"m\");\n            ans = ans.replace(\"m\",\"M\");\n   \
    \     }\n        if (c == 'n' || c == 'N') {\n            ans = ans.replace(\"\
    N\",\"n\");\n            ans = ans.replace(\"n\",\"N\");\n        }\n        if\
    \ (c == 'o' || c == 'O') {\n            ans = ans.replace(\"O\",\"o\");\n    \
    \        ans = ans.", "    std::string res;\n    for(int i=0;i<s.size();i++){\n\
    \        if(isalpha(s[i])){\n            res+=toupper(s[i]);\n        }else{\n\
    \            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++) {\n        if(isalpha(s[i])) {\n            char\
    \ c = s[i];\n            s[i] = toupper(c);\n            s[i] = tolower(c);\n\
    \        }\n    }\n    res.swap(s);\n    return res;", "    std::string ans =\
    \ s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n \
    \           ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n\
    \            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for(size_t i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    int len = s.length();\n    for(int i = 0; i < len; i++){\n        if(isalpha(s[i])){\n\
    \            char c = toupper(s[i]);\n            s[i] = c;\n            char\
    \ d = tolower(s[i]);\n            s[i] = d;\n        }\n    }\n    res.assign(s);\n\
    \    return res;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' &&\
    \ s[i]<='z'){\n            res+=toupper(s[i]);\n        }\n        else if(s[i]>='A'\
    \ && s[i]<='Z'){\n            res+=tolower(s[i]);\n        }\n        else{\n\
    \            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for (auto &i : s) {\n        if (isalpha(i)) {\n            ans\
    \ = ans.replace(i,toupper(i),1);\n        } else {\n            ans = ans.replace(i,tolower(i),1);\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = \"\";\n    for(int i = 0; i <\
    \ s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n\
    \        } else {\n            ans += s[i];\n        }\n    }\n    return ans;",
  "    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n       \
    \ if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = \"\";\n    for(int i = 0; i < s.size(); i++) {\n       \
    \ if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n        } else {\n \
    \           ans += s[i];\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string res;\n\
    \    for(int i=0;i<s.size();i++){\n        if(s[i]>='a' && s[i]<='z'){\n     \
    \       res+=s[i];\n        }\n        else if(s[i]>='A' && s[i]<='Z'){\n    \
    \        res+=s[i];\n        }\n        else{\n            res+=s[i];\n      \
    \  }\n    }\n    return res;", "    std::string ans = s;\n    for (auto &i : s)\
    \ {\n        if (std::isalpha(i)) {\n            ans = std::toupper(ans);\n  \
    \          ans = std::tolower(ans);\n        } else {\n            ans = std::tolower(ans);\n\
    \        }\n    }\n    return ans;", "    std::string res;\n    for(char c : s)\
    \ {\n        if(c>='a' && c<='z') {\n            res+=toupper(c);\n        }\n\
    \        else if(c>='A' && c<='Z') {\n            res+=tolower(c);\n        }\n\
    \        else {\n            res+=c;\n        }\n    }\n    return res;", "  \
    \  std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (auto &c: s) {\n        if (c == 'a' || c == 'A') {\n        \
    \    ans = ans.replace(\"A\",\"a\");\n            ans = ans.replace(\"a\",\"A\"\
    );\n        }\n        if (c == 'b' || c == 'B') {\n            ans = ans.replace(\"\
    B\",\"b\");\n            ans = ans.replace(\"b\",\"B\");\n        }\n        if\
    \ (c == 'c' || c == 'C') {\n            ans = ans.replace(\"C\",\"c\");\n    \
    \        ans = ans.replace(\"c\",\"C\");\n        }\n        if (c == 'd' || c\
    \ == 'D') {\n            ans = ans.replace(\"D\",\"d\");\n            ans = ans.replace(\"\
    d\",\"D\");\n        }\n        if (c == 'e' || c == 'E') {\n            ans =\
    \ ans.replace(\"E\",\"e\");\n            ans = ans.replace(\"e\",\"E\");\n   \
    \     }\n        if (c == 'f' || c == 'F') {\n            ans = ans.replace(\"\
    F\",\"f\");\n            ans = ans.replace(\"f\",\"F\");\n        }\n        if\
    \ (c == 'g' || c == 'G') {\n            ans = ans.replace(\"G\",\"g\");\n    \
    \        ans = ans.replace(\"g\",\"G\");\n        }\n        if (c == 'h' || c\
    \ == 'H') {\n            ans = ans.replace(\"H\",\"h\");\n            ans = ans.replace(\"\
    h\",\"H\");\n        }\n        if (c == 'i' || c == 'I') {\n            ans =\
    \ ans.replace(\"I\",\"i\");\n            ans = ans.replace(\"i\",\"I\");\n   \
    \     }\n        if (c == 'j' || c == 'J') {\n            ans = ans.replace(\"\
    J\",\"j\");\n            ans = ans.replace(\"j\",\"J\");\n        }\n        if\
    \ (c == 'k' || c == 'K') {\n            ans = ans.replace(\"K\",\"k\");\n    \
    \        ans = ans.replace(\"k\",\"K\");\n        }\n        if (c == 'l' || c\
    \ == 'L') {\n            ans = ans.replace(\"L\",\"l\");\n            ans = ans.replace(\"\
    l\",\"L\");\n        }\n        if (c == 'm' || c == 'M') {\n            ans =\
    \ ans.replace(\"M\",\"m\");\n            ans = ans.replace(\"m\",\"M\");\n   \
    \     }\n        if (c == 'n' || c == 'N') {\n            ans = ans.replace(\"\
    N\",\"n\");\n            ans = ans.replace(\"n\",\"N\");\n        }\n        if\
    \ (c == 'o' || c == 'O') {\n            ans = ans.replace(\"O\",\"o\");\n    \
    \        ans = ans."]
stop_tokens:
- "\n}"
