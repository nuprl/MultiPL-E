name: HumanEval_161_solve
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string s.\n\
  // if s[i] is a letter, reverse its case from lower to upper or vise versa, \n//\
  \ otherwise keep it as it is.\n// If the string contains no letters, reverse the\
  \ string.\n// The function should return the resulted string.\n// Examples\n// >>>\
  \ solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n// >>>\
  \ solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"\
  )) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
  ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
  #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
  ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
  #ccc\")) == (\"#CCC\"));\n}\n"
completions: ["    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a'\
    \ && s[i]<='z'){\n            res+=toupper(s[i]);\n        }\n        else if(s[i]>='A'\
    \ && s[i]<='Z'){\n            res+=tolower(s[i]);\n        }\n        else{\n\
    \            res+=s[i];\n        }\n    }\n    return res;", "    std::string\
    \ ans = s;\n    for (auto &c : s) {\n        if (c == 'a' || c == 'A') {\n   \
    \         ans = ans.replace(c, c == 'a' ? 'A' : 'a');\n        }\n    }\n    return\
    \ ans;", "    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n\
    \        if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;", " \
    \   std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;", "    std::string ans = s;\n    for(int i\
    \ = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans.replace(i,\
    \ 1, toupper(s[i]));\n            ans.replace(i, 2, tolower(s[i]));\n        }\
    \ else {\n            ans.replace(i, 1, s[i]);\n        }\n    }\n    return ans;",
  "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            char c = toupper(s[i]);\n            s[i] = c;\n            res+=c;\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;", "    std::string ans = s;\n    for (auto &c : s) {\n        if (std::isalpha(c))\
    \ {\n            ans = ans.replace(c, std::toupper(c));\n        } else {\n  \
    \          ans = ans.replace(c, std::tolower(c));\n        }\n    }\n    return\
    \ ans;", "    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n    \
    \    if(isalpha(s[i])) {\n            char c = toupper(s[i]);\n            s[i]\
    \ = c;\n            c = tolower(c);\n            s[i] = c;\n        }\n    }\n\
    \    res.assign(s);\n    return res;", "    std::string ans = s;\n    for (size_t\
    \ i = 0; i < s.size(); i++) {\n        if (isalpha(s[i])) {\n            ans =\
    \ ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n\
    \        }\n    }\n    return ans;", "    std::string ans = s;\n    for (auto\
    \ &i : s) {\n        if (isalpha(i)) {\n            ans = ans.replace(i.tolower(),\
    \ i.toupper());\n        } else {\n            ans = ans.replace(i.toupper(),\
    \ i.tolower());\n        }\n    }\n    return ans;", "    std::string ans = s;\n\
    \    for (int i = 0; i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] ==\
    \ 'A') {\n            ans[i] = 'A';\n        } else if (s[i] == 'b' || s[i] ==\
    \ 'B') {\n            ans[i] = 'B';\n        } else if (s[i] == 'c' || s[i] ==\
    \ 'C') {\n            ans[i] = 'C';\n        } else if (s[i] == 'd' || s[i] ==\
    \ 'D') {\n            ans[i] = 'D';\n        } else if (s[i] == 'e' || s[i] ==\
    \ 'E') {\n            ans[i] = 'E';\n        } else if (s[i] == 'f' || s[i] ==\
    \ 'F') {\n            ans[i] = 'F';\n        } else if (s[i] == 'g' || s[i] ==\
    \ 'G') {\n            ans[i] = 'G';\n        } else if (s[i] == 'h' || s[i] ==\
    \ 'H') {\n            ans[i] = 'H';\n        } else if (s[i] == 'i' || s[i] ==\
    \ 'I') {\n            ans[i] = 'I';\n        } else if (s[i] == 'j' || s[i] ==\
    \ 'J') {\n            ans[i] = 'J';\n        } else if (s[i] == 'k' || s[i] ==\
    \ 'K') {\n            ans[i] = 'K';\n        } else if (s[i] == 'l' || s[i] ==\
    \ 'L') {\n            ans[i] = 'L';\n        } else if (s[i] == 'm' || s[i] ==\
    \ 'M') {\n            ans[i] = 'M';\n        } else if (s[i] == 'n' || s[i] ==\
    \ 'N') {\n            ans[i] = 'N';\n        } else if (s[i] == 'o' || s[i] ==\
    \ 'O') {\n            ans[i] = 'O';\n        } else if (s[i] == 'p' || s[i] ==\
    \ 'P') {\n            ans[i] = 'P';\n        } else if (s[i] == 'q' || s[i] ==\
    \ 'Q') {\n            ans[i] = 'Q';\n        } else if (s[i] == 'r' || s[i] ==\
    \ 'R') {\n            ans[i] = 'R';\n        } else if (s[i] == 's' || s[i] ==\
    \ 'S') {\n            ans[i] = 'S';\n        } else if (s[i] == 't' || s[i] ==\
    \ 'T') {\n            ans[i] = 'T';\n        } else if (s[i] == 'u' || s[i] ==\
    \ 'U') {\n            ans[i] = 'U';\n        } else if (s[i] == 'v' || s[i] ==\
    \ 'V') {\n            ans[i] = 'V';\n        } else if (s[i] == 'w' || s[i] ==\
    \ 'W') {\n            ans[i] = 'W';\n        } else if (s[i] == 'x' || s[i] ==\
    \ 'X') {\n            ans[i] = 'X';\n        } else if (s[i] == 'y' || s[i] ==\
    \ 'Y') {\n            ans[i] = 'Y';\n        } else if (s[i] == 'z' || s[i] ==\
    \ 'Z') {\n            ans[i] = 'Z';\n        }\n    }\n    return ans;", "   \
    \ std::string ans = \"\";\n    for(char c : s) {\n        if(c == 'a' || c ==\
    \ 'A') {\n            ans += \"A\";\n        } else if(c == 'b' || c == 'B') {\n\
    \            ans += \"B\";\n        } else if(c == 'c' || c == 'C') {\n      \
    \      ans += \"C\";\n        } else if(c == 'd' || c == 'D') {\n            ans\
    \ += \"D\";\n        } else if(c == 'e' || c == 'E') {\n            ans += \"\
    E\";\n        } else if(c == 'f' || c == 'F') {\n            ans += \"F\";\n \
    \       } else if(c == 'g' || c == 'G') {\n            ans += \"G\";\n       \
    \ } else if(c == 'h' || c == 'H') {\n            ans += \"H\";\n        } else\
    \ if(c == 'i' || c == 'I') {\n            ans += \"I\";\n        } else if(c ==\
    \ 'j' || c == 'J') {\n            ans += \"J\";\n        } else if(c == 'k' ||\
    \ c == 'K') {\n            ans += \"K\";\n        } else if(c == 'l' || c == 'L')\
    \ {\n            ans += \"L\";\n        } else if(c == 'm' || c == 'M') {\n  \
    \          ans += \"M\";\n        } else if(c == 'n' || c == 'N') {\n        \
    \    ans += \"N\";\n        } else if(c == 'o' || c == 'O') {\n            ans\
    \ += \"O\";\n        } else if(c == 'p' || c == 'P') {\n            ans += \"\
    P\";\n        } else if(c == 'q' || c == 'Q') {\n            ans += \"Q\";\n \
    \       } else if(c == 'r' || c == 'R') {\n            ans += \"R\";\n       \
    \ } else if(c == 's' || c == 'S') {\n            ans += \"S\";\n        } else\
    \ if(c == 't' || c == 'T') {\n            ans += \"T\";\n        } else if(c ==\
    \ 'u' || c == 'U') {\n            ans += \"U\";\n        } else if(c == 'v' ||\
    \ c == 'V') {\n            ans += \"V\";\n        } else if(c == 'w' || c == 'W')\
    \ {\n            ans += \"W\";\n        } else if(c == 'x' || c == 'X') {\n  \
    \          ans += \"X\";\n        } else if(c == 'y' || c == 'Y') {\n        \
    \    ans += \"Y\";\n        } else if(c == 'z' || c == 'Z') {\n            ans\
    \ += \"Z\";\n        }\n    }\n    return ans;", "    std::string ans = \"\";\n\
    \    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i])) {\n      \
    \      ans += toupper(s[i]);\n        } else {\n            ans += s[i];\n   \
    \     }\n    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0;\
    \ i < s.size(); i++) {\n        if(isalpha(s[i])) {\n            ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n        }\n\
    \    }\n    return ans;", "    std::string ans = s;\n    for(int i = 0; i < s.size();\
    \ i++) {\n        if(isalpha(s[i])) {\n            ans.at(i) = toupper(s[i]);\n\
    \        } else {\n            ans.at(i) = s[i];\n        }\n    }\n    return\
    \ ans;", "    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a'\
    \ && s[i]<='z'){\n            res+=std::toupper(s[i]);\n        }\n        else\
    \ if(s[i]>='A' && s[i]<='Z'){\n            res+=std::tolower(s[i]);\n        }\n\
    \        else{\n            res+=s[i];\n        }\n    }\n    return res;", " \
    \   std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;", "    std::string\
    \ ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;", "    std::string ans\
    \ = s;\n    for (size_t i = 0; i < s.size(); i++) {\n        if (isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        }\n    }\n    return ans;"]
stop_tokens:
- "\n}"
