language: cpp
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = l.size();\n    for (long long i = 0; i < l;\
    \ i++) {\n        long long curr = l[i];\n        if (curr < ans)\n          \
    \  return false;\n        ans = curr;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpn__mz6bc.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpn__mz6bc.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = l.size();\n\
    \      |                        ^\n/tmp/tmpn__mz6bc.cpp:11:30: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = l.size();\n      |   \
    \                           ^~~~\n/tmp/tmpn__mz6bc.cpp:13:29: error: invalid types\
    \ \u2018long long int[long long int]\u2019 for array subscript\n   13 |      \
    \   long long curr = l[i];\n      |                             ^\n"
  stdout: ''
  timestamp: 1660126934
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long l = l.size();\n    for (long long\
    \ i = 0; i < l; i++) {\n        long long curr = l[i];\n        long long next\
    \ = l[(i + 1) % l];\n        if (curr > next) {\n            ans = 1;\n      \
    \      break;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpae70sq0p.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpae70sq0p.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmpae70sq0p.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmpae70sq0p.cpp:14:29:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   14 |         long long curr = l[i];\n      |                             ^\n\
    /tmp/tmpae70sq0p.cpp:15:39: error: invalid types \u2018long long int[long long\
    \ int]\u2019 for array subscript\n   15 |         long long next = l[(i + 1) %\
    \ l];\n      |                                       ^\n"
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for (; i < l.size() - 1; i++) {\n \
    \       if (l[i] > l[i + 1]) {\n            ans = l[i];\n            break;\n\
    \        }\n    }\n    if (ans == 0) return false;\n    for (; i < l.size(); i++)\
    \ {\n        if (l[i] < ans) ans = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptddp4c61: /tmp/tmptddp4c61.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126936
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            ans = 1;\n            break;\n  \
    \      }\n        if (l[i] > l[i - 1]) {\n            ans = 0;\n            break;\n\
    \        }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppn80b7fr: /tmp/tmppn80b7fr.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        long long mid = (i + j) / 2;\n        if\
    \ (l[mid] < l[mid+1]) {\n            ans = mid;\n            i = mid + 1;\n  \
    \      } else {\n            j = mid;\n        }\n    }\n    return ans == 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpscu9o9du: /tmp/tmpscu9o9du.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for (long long i = 0; i < n;\
    \ i++) {\n        long long cur = l[i];\n        if (cur < ans)\n            return\
    \ false;\n        ans = cur;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1x_ri84o: /tmp/tmp1x_ri84o.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (long long i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] < prev) {\n            return false;\n\
    \        }\n        prev = cur;\n        cur = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpaoa8fzca: /tmp/tmpaoa8fzca.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, curr = 0, prev = 0;\n    for (long long i = 0;\
    \ i < l.size(); i++) {\n        prev = curr;\n        curr = l[i];\n        if\
    \ (curr < prev) {\n            ans = false;\n            break;\n        }\n \
    \       ans = true;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptonuvtsv: /tmp/tmptonuvtsv.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for (; i < l.size(); i++) {\n     \
    \   long long curr = l[i];\n        if (curr < ans) {\n            ans = curr;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpr6908cw6: /tmp/tmpr6908cw6.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = std::numeric_limits<long long int>::max();\n\
    \    for (long long int i : l) {\n        if (i > max) {\n            max = i;\n\
    \        } else if (i < min) {\n            min = i;\n        }\n    }\n    return\
    \ max >= min;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd7be30yv: /tmp/tmpd7be30yv.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] < prev) {\n            return false;\n\
    \        }\n        prev = cur;\n        cur = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdm5kzr8r: /tmp/tmpdm5kzr8r.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long l = l.size();\n    for(long long\
    \ i = 0; i < l; i++) {\n        long long cur = l[i];\n        long long prev\
    \ = l[i - 1];\n        if(cur < prev) {\n            ans = 1;\n            break;\n\
    \        }\n        if(cur > prev) {\n            ans = 0;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqobx9_9d.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqobx9_9d.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmpqobx9_9d.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmpqobx9_9d.cpp:14:28:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   14 |         long long cur = l[i];\n      |                            ^\n\
    /tmp/tmpqobx9_9d.cpp:15:33: error: invalid types \u2018long long int[long long\
    \ int]\u2019 for array subscript\n   15 |         long long prev = l[i - 1];\n\
    \      |                                 ^\n"
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        long long curr = l[i];\n        long long prev = l[i - 1];\n        if\
    \ (curr < prev) {\n            ans = 1;\n            break;\n        }\n    }\n\
    \    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_p7coto7: /tmp/tmp_p7coto7.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = 0, r = l.size() - 1;\n    while (l <= r) {\n\
    \        long mid = l + (r - l) / 2;\n        if (l[mid] <= r[mid]) {\n      \
    \      ans = mid;\n            l = mid + 1;\n        } else {\n            r =\
    \ mid - 1;\n        }\n    }\n    return ans == l.size() - 1;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjis6dw16.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpjis6dw16.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = 0, r = l.size()\
    \ - 1;\n      |                        ^\n/tmp/tmpjis6dw16.cpp:11:37: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = 0, r = l.size() - 1;\n\
    \      |                                     ^~~~\n/tmp/tmpjis6dw16.cpp:14:18:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   14 |         if (l[mid] <= r[mid]) {\n      |                  ^\n/tmp/tmpjis6dw16.cpp:14:28:\
    \ error: invalid types \u2018long long int[long int]\u2019 for array subscript\n\
    \   14 |         if (l[mid] <= r[mid]) {\n      |                            ^\n\
    /tmp/tmpjis6dw16.cpp:21:21: error: request for member \u2018size\u2019 in \u2018\
    l\u2019, which is of non-class type \u2018long long int\u2019\n   21 |     return\
    \ ans == l.size() - 1;\n      |                     ^~~~\n"
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for (long long i = 0; i < n;\
    \ ++i) {\n        long long curr = l[i];\n        long long prev = l[i - 1];\n\
    \        if (curr < prev) {\n            ans = 1;\n            break;\n      \
    \  }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp42mcc3lw: /tmp/tmp42mcc3lw.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    for (long long\
    \ i = 0; i < n; i++) {\n        long long j = i;\n        while (j > 0 && l[j-1]\
    \ > l[j]) {\n            ans = l[j];\n            j--;\n        }\n        l[j]\
    \ = ans;\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppk679c4n: /tmp/tmppk679c4n.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        long long cur = l[i];\n        if (cur < ans)\n            return false;\n\
    \        if (cur > ans)\n            return true;\n        ans = cur;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7e7ob4qv: /tmp/tmp7e7ob4qv.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < ans)\n            return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp3r1w_3k: /tmp/tmpp3r1w_3k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (long long int i :\
    \ l) {\n        if (i < min) min = i;\n        if (i > max) max = i;\n    }\n\
    \    if (min == max) return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpz5jzs1pi: /tmp/tmpz5jzs1pi.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int ans = 0;\n    long long int max = std::numeric_limits<long\
    \ long int>::max();\n    for (long long int i : l) {\n        if (i > max) {\n\
    \            return false;\n        }\n        if (i < 0) {\n            return\
    \ false;\n        }\n        ans += i;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpufyu0zgf: /tmp/tmpufyu0zgf.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        long long mid = (i + j) / 2;\n        if\
    \ (l[mid] >= l[mid + 1]) {\n            ans = l[mid];\n            i = mid + 1;\n\
    \        } else {\n            j = mid;\n        }\n    }\n    return ans == l[0];\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpay0odtv3: /tmp/tmpay0odtv3.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < ans)\n            return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp3r1w_3k: /tmp/tmpp3r1w_3k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, x = 0, y = 0, z = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        x = l[i];\n        y = ans;\n        z = x;\n    \
    \    while (x != z) {\n            ans = y;\n            y = x;\n            x\
    \ = z;\n            z = y;\n        }\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9gyzsm2p: /tmp/tmp9gyzsm2p.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l.front();\n    for (long long i = 1; i <\
    \ l.size(); i++) {\n        if (l[i] < cur) {\n            return false;\n   \
    \     }\n        ans += (cur - l[i]) * (cur - l[i - 1]);\n        cur = l[i];\n\
    \    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwklg60g3: /tmp/tmpwklg60g3.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long cur = l.front();\n    for (long\
    \ long i = 0; i < l.size(); i++) {\n        if (cur < l[i]) {\n            ans\
    \ = 1;\n        } else if (cur > l[i]) {\n            ans = -1;\n        }\n \
    \       cur = l[i];\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp5v7x0xzy: /tmp/tmp5v7x0xzy.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, x = 0, y = 0, z = 0;\n    for(long long i = 0;\
    \ i < l.size(); i++) {\n        x = l[i];\n        y = l[i - 1];\n        z =\
    \ l[i + 1];\n        if(x > y && x > z) {\n            ans = 1;\n        } else\
    \ if(y > x && y > z) {\n            ans = -1;\n        } else if(z > x && z >\
    \ y) {\n            ans = 1;\n        } else {\n            ans = 0;\n       \
    \ }\n        if(ans != 0) {\n            return false;\n        }\n    }\n   \
    \ return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzr553gjj: /tmp/tmpzr553gjj.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (long long int i :\
    \ l) {\n        if (i > max) {\n            max = i;\n        } else if (i < min)\
    \ {\n            min = i;\n        }\n    }\n    return max > min;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3eca1_v9: /tmp/tmp3eca1_v9.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    if (n == 1)\
    \ return true;\n    long first = l[0];\n    for (int i = 1; i < n; i++) {\n  \
    \      if (l[i] < first) return false;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0758xdd3: /tmp/tmp0758xdd3.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] > l[j]) {\n            ans = l[j];\n\
    \            j = i;\n        } else {\n            ans = l[i];\n            i\
    \ = j;\n        }\n    }\n    return ans == l[j];\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp555m29e: /tmp/tmpp555m29e.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    long prev =\
    \ l[0];\n    for (int i = 1; i < n; ++i) {\n        if (l[i] < prev) {\n     \
    \       return false;\n        }\n        prev = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8d8nx4mv: /tmp/tmp8d8nx4mv.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    long long prev = l[0];\n    for (auto\
    \ it = l.begin() + 1; it != l.end(); ++it, ++i) {\n        if (*it > prev) {\n\
    \            ans = i;\n            prev = *it;\n        }\n    }\n    return ans\
    \ == i;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp52167x8x: /tmp/tmp52167x8x.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    for (long long\
    \ i = 0; i < n; ++i) {\n        long long cur = l[i];\n        long long prev\
    \ = l[i - 1];\n        if (cur > prev) {\n            ans = 1;\n            break;\n\
    \        }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplynwkwj7: /tmp/tmplynwkwj7.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > l[i + 1]) {\n            ans = 1;\n            break;\n  \
    \      }\n        if (l[i] < l[i + 1]) {\n            ans = -1;\n            break;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpng1lf2z7: /tmp/tmpng1lf2z7.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l.front();\n    for (long long i = 1; i <\
    \ l.size(); i++) {\n        if (l[i] < cur) {\n            return false;\n   \
    \     }\n        ans += 1;\n        cur = l[i];\n    }\n    return ans == 1;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0h1vahhu: /tmp/tmp0h1vahhu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = std::numeric_limits<long long int>::max();\n\
    \    for (long long int i : l) {\n        if (i > max) {\n            max = i;\n\
    \        } else if (i < min) {\n            min = i;\n        }\n    }\n    return\
    \ (min <= max);\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppfsgwaef: /tmp/tmppfsgwaef.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < ans)\n            return false;\n        else if (l[i]\
    \ > ans)\n            return true;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuyjodxyr: /tmp/tmpuyjodxyr.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    long long k = 0;\n    long long l = l[0];\n    while (i < j) {\n \
    \       if (l[i] < l[j]) {\n            ans = 1;\n            break;\n       \
    \ }\n        if (l[i] > l[j]) {\n            ans = 0;\n            break;\n  \
    \      }\n        i++;\n        j--;\n    }\n    if (ans == 1) {\n        while\
    \ (i < j) {\n            if (l[i] < l[j]) {\n                ans = 1;\n      \
    \          break;\n            }\n            if (l[i] > l[j]) {\n           \
    \     ans = 0;\n                break;\n            }\n            i++;\n    \
    \        j--;\n        }\n    }\n    if (ans == 1) {\n        while (i < j) {\n\
    \            if (l[i] < l[j]) {\n                ans = 1;\n                break;\n\
    \            }\n            if (l[i] > l[j]) {\n                ans = 0;\n   \
    \             break;\n            }\n            i++;\n            j--;\n    \
    \    }\n    }\n    if (ans == 1) {\n        while (i < j) {\n            if (l[i]\
    \ < l[j]) {\n                ans = 1;\n                break;\n            }\n\
    \            if (l[i] > l[j]) {\n                ans = 0;\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n    }\n    if (ans\
    \ == 1) {\n        while (i < j) {\n            if (l[i] < l[j]) {\n         \
    \       ans = 1;\n                break;\n            }\n            if (l[i]\
    \ > l[j]) {\n                ans = 0;\n                break;\n            }\n\
    \            i++;\n            j--;\n        }\n    }\n    if (ans == 1) {\n \
    \       while (i < j) {\n            if (l[i] < l[j]) {\n                ans =\
    \ 1;\n                break;\n            }\n            if (l[i] > l[j]) {\n\
    \                ans = 0;\n                break;\n            }\n           \
    \ i++;\n            j--;\n        }\n    }\n    if (ans == 1) {\n        while\
    \ (i < j) {\n            if (l[i] < l[j]) {\n                ans = 1;\n      \
    \          break;\n            }\n            if (l[i] > l[j]) {\n           \
    \     ans = 0;\n                break;\n            }\n            i++;\n    \
    \        j--;\n        }\n    }\n    if (ans == 1) {\n        while (i < j) {\n\
    \            if (l[i] < l[j]) {\n                ans = 1;\n                break;\n\
    \            }\n            if (l[i] > l[j]) {\n                ans = 0;\n   \
    \             break;\n            }\n            i++;\n            j--;\n    \
    \    }\n    }\n    if (ans == 1) {\n        while (i < j) {\n            if (l[i]\
    \ < l[j]) {\n                ans = 1;\n                break;\n            }\n\
    \            if (l[i] > l[j]) {\n                ans = 0;\n                break;\n\
    \            }\n            i++;\n            j--;\n        }\n    }\n    if (ans\
    \ == 1) {\n        while (i < j) {\n\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9zm3mgez.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9zm3mgez.cpp:15:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   15 |     long long l = l[0];\n      |  \
    \             ^\n/tmp/tmp9zm3mgez.cpp:15:22: error: invalid types \u2018long long\
    \ int[int]\u2019 for array subscript\n   15 |     long long l = l[0];\n      |\
    \                      ^\n/tmp/tmp9zm3mgez.cpp:17:16: error: invalid types \u2018\
    long long int[long long int]\u2019 for array subscript\n   17 |         if (l[i]\
    \ < l[j]) {\n      |                ^\n/tmp/tmp9zm3mgez.cpp:17:23: error: invalid\
    \ types \u2018long long int[long long int]\u2019 for array subscript\n   17 |\
    \         if (l[i] < l[j]) {\n      |                       ^\n/tmp/tmp9zm3mgez.cpp:21:16:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   21 |         if (l[i] > l[j]) {\n      |                ^\n/tmp/tmp9zm3mgez.cpp:21:23:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   21 |         if (l[i] > l[j]) {\n      |                       ^\n/tmp/tmp9zm3mgez.cpp:30:20:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   30 |             if (l[i] < l[j]) {\n      |                    ^\n/tmp/tmp9zm3mgez.cpp:30:27:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   30 |             if (l[i] < l[j]) {\n      |                           ^\n\
    /tmp/tmp9zm3mgez.cpp:34:20: error: invalid types \u2018long long int[long long\
    \ int]\u2019 for array subscript\n   34 |             if (l[i] > l[j]) {\n   \
    \   |                    ^\n/tmp/tmp9zm3mgez.cpp:34:27: error: invalid types \u2018\
    long long int[long long int]\u2019 for array subscript\n   34 |             if\
    \ (l[i] > l[j]) {\n      |                           ^\n/tmp/tmp9zm3mgez.cpp:44:20:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   44 |             if (l[i] < l[j]) {\n      |                    ^\n/tmp/tmp9zm3mgez.cpp:44:27:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   44 |         "
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[i];\n\
    \            i++;\n        } else {\n            ans = l[j];\n            j--;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpavsvhy0f: /tmp/tmpavsvhy0f.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        long long curr = l[i];\n        long long prev = l[i - 1];\n        if\
    \ (curr > prev) {\n            ans = 1;\n            break;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvlgv5cs9: /tmp/tmpvlgv5cs9.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = n - 1;\n    while (i < j) {\n        if (l[i] < l[j])\
    \ {\n            ans = l[j];\n            j = j - 1;\n        } else {\n     \
    \       ans = l[i];\n            i = i + 1;\n        }\n    }\n    return ans\
    \ == l[j];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmfrzsjss: /tmp/tmpmfrzsjss.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, prev = 0;\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        long long curr = l[i];\n        if (curr < prev) {\n       \
    \     ans = false;\n            break;\n        }\n        prev = curr;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppeyn50ej: /tmp/tmppeyn50ej.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    long long k = 0;\n    while (i < j) {\n        while (i < j && l[i]\
    \ <= l[j]) {\n            i++;\n        }\n        while (i < j && l[j] <= l[i])\
    \ {\n            j--;\n        }\n        if (i < j) {\n            ans = l[j];\n\
    \            k = i;\n        }\n    }\n    return (ans == l[k]);\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp42dirfsv: /tmp/tmp42dirfsv.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = std::numeric_limits<long long int>::max();\n \
    \   long long int min = std::numeric_limits<long long int>::min();\n    long long\
    \ int mid = max / 2;\n    for (long long int i : l) {\n        if (i < mid) {\n\
    \            if (i > mid)\n                return true;\n            else\n  \
    \              return false;\n        }\n        else if (i > mid) {\n       \
    \     return false;\n        }\n        else if (i < mid) {\n            if (i\
    \ > mid)\n                return true;\n            else\n                return\
    \ false;\n        }\n    }\n    return false;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8abozg4p: /tmp/tmp8abozg4p.cpp:35: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, temp = 0;\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        temp = l[i];\n        if (temp > ans)\n            ans = temp;\n\
    \        else if (temp < ans)\n            return false;\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp01ygcgw_: /tmp/tmp01ygcgw_.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (auto i : l) {\n  \
    \      if (i > max) {\n            max = i;\n        } else if (i < min) {\n \
    \           min = i;\n        }\n    }\n    if (min > max) {\n        return true;\n\
    \    } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9zllocm5: /tmp/tmp9zllocm5.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for(long long i = 0; i < n;\
    \ ++i) {\n        long long cur = l[i];\n        long long prev = l[i - 1];\n\
    \        if(cur > prev) {\n            ans = cur - prev;\n            break;\n\
    \        }\n    }\n    return ans > 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyeeqvoa8: /tmp/tmpyeeqvoa8.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        long long cur = l[i];\n        long long prev = l[i - 1];\n        if\
    \ (cur > prev) {\n            ans++;\n        } else if (cur < prev) {\n     \
    \       ans--;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd4mukx5m: /tmp/tmpd4mukx5m.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, x = 0, y = 0;\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        x = l[i];\n        y = ans;\n        ans = y - x;\n    }\n \
    \   return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgellqwfq: /tmp/tmpgellqwfq.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = n - 1;\n    while (i < j) {\n        if (l[i] < l[j])\
    \ {\n            ans = l[j];\n            j = j - 1;\n        } else {\n     \
    \       ans = l[i];\n            i = i + 1;\n        }\n    }\n    return ans\
    \ == l[j];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmfrzsjss: /tmp/tmpmfrzsjss.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        else if (l[i] > ans)\n\
    \            return true;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbn_wov2t: /tmp/tmpbn_wov2t.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = n - 1;\n    while (i < j) {\n        long long mid = (i\
    \ + j) / 2;\n        if (l[mid] < l[mid + 1]) {\n            ans = mid;\n    \
    \        i = mid + 1;\n        } else {\n            j = mid;\n        }\n   \
    \ }\n    return ans == n;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp214mjpf: /tmp/tmpp214mjpf.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < ans)\n            return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp3r1w_3k: /tmp/tmpp3r1w_3k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n\
    \            j = i;\n        } else {\n            ans = l[i];\n            i\
    \ = j;\n        }\n    }\n    return ans == l[j];\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8wwm4rmy: /tmp/tmp8wwm4rmy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = 0, mid = 0;\n    for (long long int i\
    \ : l) {\n        if (i > max) {\n            max = i;\n        } else if (i <\
    \ min) {\n            min = i;\n        }\n    }\n    if (max < min) {\n     \
    \   return false;\n    }\n    mid = (max + min) / 2;\n    for (long long int i\
    \ : l) {\n        if (i > mid) {\n            return true;\n        } else if\
    \ (i < mid) {\n            return false;\n        }\n    }\n    return false;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_bkf54l_: /tmp/tmp_bkf54l_.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = 0;\n    for (auto i : l) {\n        if\
    \ (i > max) {\n            max = i;\n        } else if (i < min) {\n         \
    \   min = i;\n        }\n    }\n    if (min > max) {\n        return true;\n \
    \   } else {\n        return false;\n    }\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpiyswjv_m: /tmp/tmpiyswjv_m.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, curr = 0, prev = 0;\n    for (auto i : l) {\n \
    \       prev = curr;\n        curr = i;\n        if (curr < prev) {\n        \
    \    ans = false;\n            break;\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1zjlndr8: /tmp/tmp1zjlndr8.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    for(long long\
    \ i = 0; i < n; i++) {\n        long long j = i;\n        while(j > 0 && l[j-1]\
    \ > l[j]) {\n            ans = l[j-1];\n            j--;\n        }\n        ans\
    \ = max(ans, l[j]);\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbvr0_a73.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpbvr0_a73.cpp:19:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   19 |         ans = max(ans,\
    \ l[j]);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpbvr0_a73.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] < prev) {\n            return false;\n\
    \        }\n        prev = cur;\n        cur = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpdm5kzr8r: /tmp/tmpdm5kzr8r.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        else if (l[i] > ans)\n\
    \            ans = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0yl6ca_y: /tmp/tmp0yl6ca_y.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = n - 1;\n    long long k = 0;\n    while (i < j) {\n  \
    \      if (l[i] < l[j]) {\n            ans = 1;\n            i = j;\n        }\
    \ else {\n            j--;\n        }\n    }\n    if (ans == 0) {\n        if\
    \ (l[i] > l[j]) {\n            ans = 1;\n            i = j;\n        } else {\n\
    \            j--;\n        }\n    }\n    while (i < j) {\n        if (l[i] > l[j])\
    \ {\n            ans = 1;\n            i = j;\n        } else {\n            j--;\n\
    \        }\n    }\n    if (ans == 0) {\n        if (l[i] < l[j]) {\n         \
    \   ans = 1;\n            i = j;\n        } else {\n            j--;\n       \
    \ }\n    }\n    while (i < j) {\n        if (l[i] < l[j]) {\n            ans =\
    \ 1;\n            i = j;\n        } else {\n            j--;\n        }\n    }\n\
    \    if (ans == 0) {\n        if (l[i] > l[j]) {\n            ans = 1;\n     \
    \       i = j;\n        } else {\n            j--;\n        }\n    }\n    while\
    \ (i < j) {\n        if (l[i] > l[j]) {\n            ans = 1;\n            i =\
    \ j;\n        } else {\n            j--;\n        }\n    }\n    if (ans == 0)\
    \ {\n        if (l[i] < l[j]) {\n            ans = 1;\n            i = j;\n  \
    \      } else {\n            j--;\n        }\n    }\n    while (i < j) {\n   \
    \     if (l[i] < l[j]) {\n            ans = 1;\n            i = j;\n        }\
    \ else {\n            j--;\n        }\n    }\n    if (ans == 0) {\n        if\
    \ (l[i] > l[j]) {\n            ans = 1;\n            i = j;\n        } else {\n\
    \            j--;\n        }\n    }\n    while (i < j) {\n        if (l[i] > l[j])\
    \ {\n            ans = 1;\n            i = j;\n        } else {\n            j--;\n\
    \        }\n    }\n    if (ans == 0) {\n        if (l[i] < l[j]) {\n         \
    \   ans = 1;\n            i = j;\n        } else {\n            j--;\n       \
    \ }\n    }\n    while (i < j) {\n        if (l[i] < l[j]) {\n            ans =\
    \ 1;\n            i = j;\n        } else {\n            j--;\n        }\n    }\n\
    \    if (ans == 0) {\n        if (l[i] > l[j]) {\n            ans = 1;\n     \
    \       i = j;\n        } else {\n            j--;\n        }\n    }\n    while\
    \ (i < j) {\n        if (l[i] > l[j]) {\n            ans = 1;\n            i =\
    \ j;\n        } else {\n            j--;\n        }\n    }\n    if (ans == 0)\
    \ {\n        if (l[i] \n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1yjv_juf.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1yjv_juf.cpp:137:17: error: expected \u2018)\u2019 before\
    \ \u2018}\u2019 token\n  137 |         if (l[i]\n      |            ~    ^\n \
    \     |                 )\n  138 | }\n      | ~                \n/tmp/tmp1yjv_juf.cpp:138:1:\
    \ error: expected primary-expression before \u2018}\u2019 token\n  138 | }\n \
    \     | ^\n/tmp/tmp1yjv_juf.cpp:139:12: error: a function-definition is not allowed\
    \ here before \u2018{\u2019 token\n  139 | int main() {\n      |            ^\n\
    /tmp/tmp1yjv_juf.cpp:149:1: error: expected \u2018}\u2019 at end of input\n  149\
    \ | }\n      | ^\n/tmp/tmp1yjv_juf.cpp:10:37: note: to match this \u2018{\u2019\
    \n   10 | bool monotonic(std::vector<long> l) {\n      |                     \
    \                ^\n/tmp/tmp1yjv_juf.cpp:149:1: warning: no return statement in\
    \ function returning non-void [-Wreturn-type]\n  149 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660126937
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l.front();\n    for (long long i = 1; i <\
    \ l.size(); i++) {\n        if (l[i] < cur) {\n            return false;\n   \
    \     }\n        ans = max(ans, cur - l[i]);\n        cur = l[i];\n    }\n   \
    \ return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0xj1xcry.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0xj1xcry.cpp:16:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   16 |         ans = max(ans,\
    \ cur - l[i]);\n      |               ^~~\n      |               std::max\nIn\
    \ file included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp0xj1xcry.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, last = 0;\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        if (l[i] > last) {\n            ans = 1;\n            last =\
    \ l[i];\n        } else if (l[i] < last) {\n            ans = 0;\n           \
    \ last = l[i];\n        }\n    }\n    return ans == 1;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppube1fnu: /tmp/tmppube1fnu.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return true;\n    int m = l[0];\n\
    \    for (int i = 1; i < n; i++) {\n        if (l[i] < m) return false;\n    \
    \    m = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp23exfug3: /tmp/tmp23exfug3.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return false;\n    long long ans = l[0];\n    for\
    \ (long long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) return false;\n\
    \        ans = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmps2f3ua45: /tmp/tmps2f3ua45.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = 0;\n    long long k = 0;\n    long long l = 0;\n    long\
    \ long m = 0;\n    long long n1 = 0;\n    long long n2 = 0;\n    long long n3\
    \ = 0;\n    long long n4 = 0;\n    long long n5 = 0;\n    long long n6 = 0;\n\
    \    long long n7 = 0;\n    long long n8 = 0;\n    long long n9 = 0;\n    long\
    \ long n10 = 0;\n    long long n11 = 0;\n    long long n12 = 0;\n    long long\
    \ n13 = 0;\n    long long n14 = 0;\n    long long n15 = 0;\n    long long n16\
    \ = 0;\n    long long n17 = 0;\n    long long n18 = 0;\n    long long n19 = 0;\n\
    \    long long n20 = 0;\n    long long n21 = 0;\n    long long n22 = 0;\n    long\
    \ long n23 = 0;\n    long long n24 = 0;\n    long long n25 = 0;\n    long long\
    \ n26 = 0;\n    long long n27 = 0;\n    long long n28 = 0;\n    long long n29\
    \ = 0;\n    long long n30 = 0;\n    long long n31 = 0;\n    long long n32 = 0;\n\
    \    long long n33 = 0;\n    long long n34 = 0;\n    long long n35 = 0;\n    long\
    \ long n36 = 0;\n    long long n37 = 0;\n    long long n38 = 0;\n    long long\
    \ n39 = 0;\n    long long n40 = 0;\n    long long n41 = 0;\n    long long n42\
    \ = 0;\n    long long n43 = 0;\n    long long n44 = 0;\n    long long n45 = 0;\n\
    \    long long n46 = 0;\n    long long n47 = 0;\n    long long n48 = 0;\n    long\
    \ long n49 = 0;\n    long long n50 = 0;\n    long long n51 = 0;\n    long long\
    \ n52 = 0;\n    long long n53 = 0;\n    long long n54 = 0;\n    long long n55\
    \ = 0;\n    long long n56 = 0;\n    long long n57 = 0;\n    long long n58 = 0;\n\
    \    long long n59 = 0;\n    long long n60 = 0;\n    long long n61 = 0;\n    long\
    \ long n62 = 0;\n    long long n63 = 0;\n    long long n64 = 0;\n    long long\
    \ n65 = 0;\n    long long n66 = 0;\n    long long n67 = 0;\n    long long n68\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkfm8grj8.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkfm8grj8.cpp:16:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   16 |     long long l = 0;\n      |     \
    \          ^\n/tmp/tmpkfm8grj8.cpp:86:1: error: expected initializer before \u2018\
    }\u2019 token\n   86 | }\n      | ^\n/tmp/tmpkfm8grj8.cpp:86:1: warning: no return\
    \ statement in function returning non-void [-Wreturn-type]\n"
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    long long prev = l[0];\n    long long\
    \ curr = l[0];\n    long long last = l[0];\n    for (auto it = l.begin() + 1;\
    \ it != l.end(); ++it) {\n        prev = curr;\n        curr = *it;\n        if\
    \ (curr < prev) {\n            ans = false;\n            break;\n        }\n \
    \       ans = true;\n        last = curr;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp5idr6n_: /tmp/tmpp5idr6n_.cpp:32: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = n - 1;\n    while (i < j) {\n        long long mid = (i\
    \ + j) / 2;\n        if (l[mid] >= l[mid + 1]) {\n            ans = l[mid];\n\
    \            i = mid + 1;\n        } else {\n            j = mid;\n        }\n\
    \    }\n    if (i == j) {\n        ans = l[i];\n    }\n    return ans > 0;\n}\n\
    int main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3fgi4b83: /tmp/tmp3fgi4b83.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) return true;\n    long first = l[0];\n    for (long\
    \ i : l) {\n        if (first > i) {\n            return false;\n        }\n \
    \       first = i;\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbpxhsopw: /tmp/tmpbpxhsopw.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    for(long long\
    \ i = 0; i < n; i++) {\n        long long curr = l[i];\n        long long prev\
    \ = l[i - 1];\n        if(curr > prev) {\n            ans = 1;\n            break;\n\
    \        }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkqmsmz9b: /tmp/tmpkqmsmz9b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    long long cur = l[0];\n    for(; i\
    \ < l.size(); i++) {\n        if(l[i] < cur) {\n            return false;\n  \
    \      }\n        ans = max(ans, cur - l[i]);\n        cur = l[i];\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphj2p62qg.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphj2p62qg.cpp:17:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |         ans = max(ans,\
    \ cur - l[i]);\n      |               ^~~\n      |               std::max\nIn\
    \ file included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmphj2p62qg.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for (; i < l.size(); i++) {\n     \
    \   if (l[i] < ans)\n            return false;\n        ans = l[i];\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9iaqgc4u: /tmp/tmp9iaqgc4u.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long l = l.size();\n    long long i =\
    \ 0;\n    long long j = l - 1;\n    while (i < j) {\n        if (l[i] < l[j])\
    \ {\n            ans = l[j];\n            j = j - 1;\n        } else {\n     \
    \       ans = l[i];\n            i = i + 1;\n        }\n    }\n    return ans\
    \ == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0ziisd5k.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0ziisd5k.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmp0ziisd5k.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmp0ziisd5k.cpp:16:16:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   16 |         if (l[i] < l[j]) {\n      |                ^\n/tmp/tmp0ziisd5k.cpp:16:23:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   16 |         if (l[i] < l[j]) {\n      |                       ^\n/tmp/tmp0ziisd5k.cpp:17:22:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   17 |             ans = l[j];\n      |                      ^\n/tmp/tmp0ziisd5k.cpp:20:22:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   20 |             ans = l[i];\n      |                      ^\n"
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n\
    \            j = i;\n        } else {\n            ans = l[i];\n            i\
    \ = j;\n        }\n    }\n    return ans == l[j];\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8wwm4rmy: /tmp/tmp8wwm4rmy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] > prev) {\n            ans = 1;\n   \
    \     }\n        if (l[i] < cur) {\n            ans = 0;\n        }\n        prev\
    \ = cur;\n        cur = l[i];\n    }\n    return ans == 1;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_rcdr56e: /tmp/tmp_rcdr56e.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        long long curr = l[i];\n        long long next = l[(i + 1) % l.size()];\n\
    \        if (curr > next) {\n            ans = 1;\n        } else {\n        \
    \    ans = 0;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1fdw6g3o: /tmp/tmp1fdw6g3o.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] > ans)\n            ans = l[i];\n    }\n    return ans == l[0];\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1ghfzbze: /tmp/tmp1ghfzbze.cpp:20: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for (long long i = 0; i < n;\
    \ ++i) {\n        long long j = i;\n        while (j > 0 && l[j - 1] > l[j]) {\n\
    \            --j;\n        }\n        if (j > i) {\n            ans = l[j];\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1975vsdv: /tmp/tmp1975vsdv.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long max = 0;\n    long long min = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        ans += l[i];\n      \
    \  max = std::max(max, l[i]);\n        min = std::min(min, l[i]);\n    }\n   \
    \ if (ans == 0) return false;\n    if (ans < 0) return true;\n    if (ans > max)\
    \ return false;\n    if (ans > min) return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph7xbpwn4.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmph7xbpwn4.cpp:16:33: error: no matching function for call\
    \ to \u2018max(long long int&, __gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type&)\u2019\n   16 |         max = std::max(max, l[i]);\n\
    \      |                                 ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmph7xbpwn4.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:222:5:\
    \ note: candidate: \u2018template<class _Tp> constexpr const _Tp& std::max(const\
    \ _Tp&, const _Tp&)\u2019\n  222 |     max(const _Tp& __a, const _Tp& __b)\n \
    \     |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:222:5: note:   template\
    \ argument deduction/substitution failed:\n/tmp/tmph7xbpwn4.cpp:16:33: note: \
    \  deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018long long\
    \ int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>, long\
    \ int>::value_type\u2019 {aka \u2018long int\u2019})\n   16 |         max = std::max(max,\
    \ l[i]);\n      |                                 ^\nIn file included from /usr/include/c++/9/bits/specfun.h:45,\n\
    \                 from /usr/include/c++/9/cmath:1927,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:41,\n\
    \                 from /tmp/tmph7xbpwn4.cpp:2:\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note: candidate: \u2018template<class _Tp, class _Compare> constexpr const _Tp&\
    \ std::max(const _Tp&, const _Tp&, _Compare)\u2019\n  268 |     max(const _Tp&\
    \ __a, const _Tp& __b, _Compare __comp)\n      |     ^~~\n/usr/include/c++/9/bits/stl_algobase.h:268:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmph7xbpwn4.cpp:16:33:\
    \ note:   deduced conflicting types for parameter \u2018const _Tp\u2019 (\u2018\
    long long int\u2019 and \u2018__gnu_cxx::__alloc_traits<std::allocator<long int>,\
    \ long int>::value_type\u2019 {aka \u2018long int\u2019})\n   16 |         max\
    \ = std::max(max, l[i]);\n      |        "
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = std::numeric_limits<long long int>::max();\n\
    \    for (long long int i : l) {\n        if (i > max) {\n            max = i;\n\
    \        } else if (i < min) {\n            min = i;\n        }\n    }\n    return\
    \ max >= min;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpd7be30yv: /tmp/tmpd7be30yv.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (long long i\
    \ = 1; i < l.size(); i++) {\n        if (l[i] < prev) {\n            return false;\n\
    \        }\n        prev = cur;\n        cur = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp9un3bumj: /tmp/tmp9un3bumj.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        long long curr = l[i];\n        long long next = l[(i + 1) % l.size()];\n\
    \        if (curr > next) {\n            ans = 1;\n        } else if (curr < next)\
    \ {\n            ans = -1;\n        }\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpgl9ysnxj: /tmp/tmpgl9ysnxj.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() == 0) return false;\n    long long ans = l[0];\n    for\
    \ (long long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) return false;\n\
    \        ans = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjnaar7iv: /tmp/tmpjnaar7iv.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l.front();\n    for (long long i = 1; i <\
    \ l.size(); i++) {\n        if (cur < l[i]) {\n            cur = l[i];\n     \
    \       ans = i;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbj6zfog3: /tmp/tmpbj6zfog3.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (long long int i :\
    \ l) {\n        if (i > max) {\n            max = i;\n        } else if (i < min)\
    \ {\n            min = i;\n        }\n    }\n    return max >= min;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpzfqar7zv: /tmp/tmpzfqar7zv.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, prev = 0;\n    for (auto i : l) {\n        long\
    \ long cur = i;\n        while (cur > prev) {\n            ans = cur;\n      \
    \      prev = cur - 1;\n            cur = prev + 1;\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Timeout
  stderr: None
  stdout: None
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return true;\n    if (n == 1) return\
    \ false;\n    if (l[0] < l[1]) return true;\n    if (l[0] > l[1]) return false;\n\
    \    for (int i = 2; i < n; ++i) {\n        if (l[i] < l[i - 1]) return false;\n\
    \        if (l[i] > l[i - 1]) return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp89688j_4: /tmp/tmp89688j_4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, prev = 0, cur = l.front();\n    for (long long\
    \ i : l) {\n        if (i > prev) {\n            ans = i;\n        }\n       \
    \ prev = cur;\n        cur = i;\n    }\n    return ans == l.front();\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpg9ugfowe: /tmp/tmpg9ugfowe.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0;\n    long long int min = 0;\n    for (long\
    \ long int i : l) {\n        if (i > max) {\n            max = i;\n        }\n\
    \        if (i < min) {\n            min = i;\n        }\n    }\n    if (min >\
    \ max) {\n        return false;\n    }\n    return true;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp892gtwyw: /tmp/tmp892gtwyw.cpp:30: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n\
    \            j = i;\n        } else {\n            ans = l[i];\n            i\
    \ = j;\n        }\n    }\n    return ans == l[j];\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp8wwm4rmy: /tmp/tmp8wwm4rmy.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126937
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > l[i + 1]) {\n            ans = 1;\n            break;\n  \
    \      }\n        if (l[i] < l[i + 1]) {\n            ans = -1;\n            break;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpng1lf2z7: /tmp/tmpng1lf2z7.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    long long ans = 0, x = l[0];\n    for (int\
    \ i = 1; i < n; i++) {\n        if (l[i] < x) {\n            return false;\n \
    \       }\n        ans = max(ans, x - l[i]);\n        x = l[i];\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiregr8xn.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpiregr8xn.cpp:17:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |         ans = max(ans,\
    \ x - l[i]);\n      |               ^~~\n      |               std::max\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpiregr8xn.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans) {\n            ans = l[i];\n        }\n    }\n    return\
    \ ans == l[0];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_5quwa3z: /tmp/tmp_5quwa3z.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126939
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long l = l.size();\n    for(long long\
    \ i = 0; i < l; i++) {\n        if(l[i] > ans) {\n            ans = l[i];\n  \
    \      }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0nz0fac3.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp0nz0fac3.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmp0nz0fac3.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmp0nz0fac3.cpp:14:15:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   14 |         if(l[i] > ans) {\n      |               ^\n/tmp/tmp0nz0fac3.cpp:15:22:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   15 |             ans = l[i];\n      |                      ^\n"
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    long long prev = l[0];\n    for (auto\
    \ it = l.begin() + 1; it != l.end(); ++it) {\n        if (*it > prev) {\n    \
    \        ans = 1;\n            break;\n        }\n        prev = *it;\n    }\n\
    \    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp38nsyywt: /tmp/tmp38nsyywt.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l.front();\n    for (long long i = 1; i <\
    \ l.size(); i++) {\n        if (cur > l[i]) {\n            cur = l[i];\n     \
    \       ans = i;\n        }\n    }\n    return ans == l.size() - 1;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjvh32v3n: /tmp/tmpjvh32v3n.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, x = 0, y = 0, z = 0, i = 0;\n    for (i = 0; i\
    \ < l.size(); i++) {\n        x = l[i];\n        y = l[i + 1];\n        z = l[i\
    \ + 2];\n        if (x > y && x > z) {\n            ans = 1;\n        } else if\
    \ (x < y && x < z) {\n            ans = -1;\n        } else if (x == y && x ==\
    \ z) {\n            ans = 0;\n        }\n    }\n    return ans == 1;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp60g9ofck: /tmp/tmp60g9ofck.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    long long cur = l[i];\n    long long\
    \ prev = l[i - 1];\n    while (i < l.size() - 1) {\n        long long next = l[i\
    \ + 1];\n        if (cur > prev) {\n            ans = 1;\n        } else if (cur\
    \ < prev) {\n            ans = -1;\n        } else {\n            ans = 0;\n \
    \       }\n        if (ans == 1) {\n            cur = next;\n        } else {\n\
    \            prev = next;\n        }\n        i++;\n    }\n    return ans == 1;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpnx8p4_6w: /tmp/tmpnx8p4_6w.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126939
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < ans)\n            return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp3r1w_3k: /tmp/tmpp3r1w_3k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l.front();\n    for (long long i = 1; i <\
    \ l.size(); i++) {\n        if (l[i] < cur) {\n            return false;\n   \
    \     }\n        ans += (l[i] - cur);\n        cur = l[i];\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6228v275: /tmp/tmp6228v275.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long max = 0;\n    long long min = 0;\n\
    \    for (long long i : l) {\n        if (i > max) {\n            max = i;\n \
    \       }\n        if (i < min) {\n            min = i;\n        }\n        ans\
    \ += (i - min) * (i - max);\n    }\n    return ans <= 0;\n}\nint main() {\n  \
    \  auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppgldijbh: /tmp/tmppgldijbh.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans) {\n            return false;\n        }\n        ans\
    \ = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpz241ope5: /tmp/tmpz241ope5.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, prev = 0, curr = 0, next = 0;\n    for (auto i\
    \ : l) {\n        prev = curr;\n        curr = next;\n        next = i;\n    \
    \    if (curr < prev) {\n            ans = false;\n            break;\n      \
    \  }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpw5gwmhc1: /tmp/tmpw5gwmhc1.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            ans = 1;\n            break;\n  \
    \      } else if (l[i] > l[i - 1]) {\n            ans = -1;\n            break;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpsmn7pq8d: /tmp/tmpsmn7pq8d.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            ans = 1;\n            break;\n  \
    \      }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmph9iu6sx_: /tmp/tmph9iu6sx_.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    long long l = l.size();\n    while\
    \ (i < l) {\n        long long mid = i + (l - i) / 2;\n        if (l[mid] < l[i])\
    \ {\n            ans = mid;\n            i = mid + 1;\n        } else {\n    \
    \        i = mid;\n        }\n    }\n    return ans == i;\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3ob55g4_.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp3ob55g4_.cpp:12:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   12 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmp3ob55g4_.cpp:12:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   12 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmp3ob55g4_.cpp:15:18:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   15 |         if (l[mid] < l[i]) {\n      |                  ^\n/tmp/tmp3ob55g4_.cpp:15:25:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   15 |         if (l[mid] < l[i]) {\n      |                         ^\n"
  stdout: ''
  timestamp: 1660126940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        long long curr = l[i];\n        long long next = l[(i + 1) % l.size()];\n\
    \        if (curr > next) {\n            ans = 1;\n        } else {\n        \
    \    ans = 0;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1fdw6g3o: /tmp/tmp1fdw6g3o.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        ans = max(ans, l[i]);\n        ans = min(ans, l[i]);\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_jr0d6du.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp_jr0d6du.cpp:13:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   13 |         ans = max(ans,\
    \ l[i]);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_jr0d6du.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp_jr0d6du.cpp:14:15: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   14 |         ans = min(ans, l[i]);\n      |               ^~~\n      |   \
    \            std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_jr0d6du.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126940
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    long long cur = l[0];\n    long long\
    \ prev = l[0];\n    for (auto it = l.begin() + 1; it != l.end(); ++it) {\n   \
    \     if (cur == *it) {\n            ++i;\n        } else {\n            ans =\
    \ i;\n            i = 1;\n            cur = *it;\n        }\n        prev = *it;\n\
    \    }\n    ans = i;\n    return ans == 1;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp19xch8e7: /tmp/tmp19xch8e7.cpp:31: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long cur = l.front();\n    long long\
    \ prev = l.back();\n    for (long long i = 0; i < l.size(); i++) {\n        if\
    \ (cur > l[i]) {\n            cur = l[i];\n            ans = i;\n        }\n \
    \       if (prev < l[i]) {\n            prev = l[i];\n            ans = i;\n \
    \       }\n    }\n    return ans == l.size() - 1;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpahoq7onz: /tmp/tmpahoq7onz.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        else if (l[i] > ans)\n\
    \            return true;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbn_wov2t: /tmp/tmpbn_wov2t.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        long long cur = l[i];\n        long long prev = l[i - 1];\n        if\
    \ (cur > prev) {\n            ans++;\n        } else {\n            ans--;\n \
    \       }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpqovbtnt4: /tmp/tmpqovbtnt4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for(auto it = l.begin(); it != l.end();\
    \ ++it) {\n        if(*it < ans) {\n            ans = *it;\n        }\n      \
    \  i++;\n    }\n    return i == l.size();\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphavjyyym: /tmp/tmphavjyyym.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            ans = 1;\n            break;\n  \
    \      }\n        if (l[i] > l[i - 1]) {\n            ans = 0;\n            break;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpwc68117d: /tmp/tmpwc68117d.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        else if (l[i] > ans)\n\
    \            return true;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbn_wov2t: /tmp/tmpbn_wov2t.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    if (n == 0)\n        return true;\n\
    \    long long int m = l[0];\n    for (long long int i = 1; i < n; i++) {\n  \
    \      if (l[i] > m)\n            return false;\n        m = l[i];\n    }\n  \
    \  return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmpr8e8nn: /tmp/tmpmpr8e8nn.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    long long cur = l[0];\n    for (; i\
    \ < l.size(); i++) {\n        if (l[i] < cur) {\n            return false;\n \
    \       }\n        ans = max(ans, cur - l[i]);\n        cur = l[i];\n    }\n \
    \   return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmy0hksfm.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpmy0hksfm.cpp:17:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   17 |         ans = max(ans,\
    \ cur - l[i]);\n      |               ^~~\n      |               std::max\nIn\
    \ file included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpmy0hksfm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, prev = 0, cur = 0;\n    for (auto i : l) {\n  \
    \      cur = i;\n        if (i > prev) {\n            ans = cur;\n        }\n\
    \        prev = cur;\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp_42wsib3: /tmp/tmp_42wsib3.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < ans)\n            return false;\n        if (l[i] > ans)\n\
    \            return true;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3vprn2o7: /tmp/tmp3vprn2o7.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = 0, r = l.size() - 1;\n    while (l <= r) {\n\
    \        long mid = l + (r - l) / 2;\n        if (l+1 == mid)\n            return\
    \ true;\n        if (l-1 != mid)\n            ans = mid;\n        if (l+1 != mid)\n\
    \            l = mid + 1;\n        else\n            r = mid - 1;\n    }\n   \
    \ return false;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl8yhb7o0.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpl8yhb7o0.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = 0, r = l.size()\
    \ - 1;\n      |                        ^\n/tmp/tmpl8yhb7o0.cpp:11:37: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = 0, r = l.size() - 1;\n\
    \      |                                     ^~~~\n"
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long curr = 0, prev = 0;\n    for (long\
    \ long i = 0; i < l.size(); i++) {\n        prev = curr;\n        curr = l[i];\n\
    \        if (curr < prev) {\n            ans++;\n        }\n    }\n    return\
    \ ans > 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpvn13sa9s: /tmp/tmpvn13sa9s.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long m =\
    \ n - 1;\n    long long i = 0;\n    long long j = 0;\n    long long k = 0;\n \
    \   long long l = n - 1;\n    long long sum = 0;\n    long long temp = 0;\n  \
    \  while (i < n) {\n        ans = ans + l[i];\n        sum = sum + l[i];\n   \
    \     i++;\n    }\n    while (j < n) {\n        temp = sum;\n        sum = sum\
    \ - l[j];\n        j = j + 1;\n        ans = ans - temp;\n    }\n    while (k\
    \ <= m) {\n        temp = sum;\n        sum = sum + l[k];\n        k = k + 1;\n\
    \        ans = ans - temp;\n    }\n    if (ans < 0)\n        ans = -ans;\n   \
    \ return ans > 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9bfsz09g.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp9bfsz09g.cpp:17:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   17 |     long long l = n - 1;\n      | \
    \              ^\n/tmp/tmp9bfsz09g.cpp:21:24: error: invalid types \u2018long\
    \ long int[long long int]\u2019 for array subscript\n   21 |         ans = ans\
    \ + l[i];\n      |                        ^\n/tmp/tmp9bfsz09g.cpp:22:24: error:\
    \ invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   22 |         sum = sum + l[i];\n      |                        ^\n/tmp/tmp9bfsz09g.cpp:27:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   27 |         sum = sum - l[j];\n      |                        ^\n/tmp/tmp9bfsz09g.cpp:33:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   33 |         sum = sum + l[k];\n      |                        ^\n"
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long max = 0;\n    long long min = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] > max) {\n \
    \           max = l[i];\n        }\n        if (l[i] < min) {\n            min\
    \ = l[i];\n        }\n        ans += (max - min);\n    }\n    return ans > 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmppqgnrmpv: /tmp/tmppqgnrmpv.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = 0, r = l.size() - 1;\n    for (; l <= r; l++)\
    \ {\n        long long mid = l + (r - l) / 2;\n        if (l+1 == r) ans = mid;\n\
    \        else if (l+1 == r) ans = mid;\n        else if (l+2 == r) ans = mid;\n\
    \        else if (l+2 == r) ans = mid;\n        else if (l+3 == r) ans = mid;\n\
    \        else if (l+3 == r) ans = mid;\n        else if (l+4 == r) ans = mid;\n\
    \        else if (l+4 == r) ans = mid;\n        else if (l+5 == r) ans = mid;\n\
    \        else if (l+5 == r) ans = mid;\n        else if (l+6 == r) ans = mid;\n\
    \        else if (l+6 == r) ans = mid;\n        else if (l+7 == r) ans = mid;\n\
    \        else if (l+7 == r) ans = mid;\n        else if (l+8 == r) ans = mid;\n\
    \        else if (l+8 == r) ans = mid;\n        else if (l+9 == r) ans = mid;\n\
    \        else if (l+9 == r) ans = mid;\n        else if (l+10 == r) ans = mid;\n\
    \        else if (l+10 == r) ans = mid;\n        else if (l+11 == r) ans = mid;\n\
    \        else if (l+11 == r) ans = mid;\n        else if (l+12 == r) ans = mid;\n\
    \        else if (l+12 == r) ans = mid;\n        else if (l+13 == r) ans = mid;\n\
    \        else if (l+13 == r) ans = mid;\n        else if (l+14 == r) ans = mid;\n\
    \        else if (l+14 == r) ans = mid;\n        else if (l+15 == r) ans = mid;\n\
    \        else if (l+15 == r) ans = mid;\n        else if (l+16 == r) ans = mid;\n\
    \        else if (l+16 == r) ans = mid;\n        else if (l+17 == r) ans = mid;\n\
    \        else if (l+17 == r) ans = mid;\n        else if (l+18 == r) ans = mid;\n\
    \        else if (l+18 == r) ans = mid;\n        else if (l+19 == r) ans = mid;\n\
    \        else if (l+19 == r) ans = mid;\n        else if (l+20 == r) ans = mid;\n\
    \        else if (l+20 == r) ans = mid;\n        else if (l\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphwt6dj0j.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmphwt6dj0j.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = 0, r = l.size()\
    \ - 1;\n      |                        ^\n/tmp/tmphwt6dj0j.cpp:11:37: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   11 |     long long ans = 0, l = 0, r = l.size() - 1;\n\
    \      |                                     ^~~~\n/tmp/tmphwt6dj0j.cpp:54:19:\
    \ error: expected \u2018)\u2019 before \u2018}\u2019 token\n   54 |         else\
    \ if (l\n      |                 ~ ^\n      |                   )\n   55 | }\n\
    \      | ~                  \n/tmp/tmphwt6dj0j.cpp:55:1: error: expected primary-expression\
    \ before \u2018}\u2019 token\n   55 | }\n      | ^\n/tmp/tmphwt6dj0j.cpp:56:12:\
    \ error: a function-definition is not allowed here before \u2018{\u2019 token\n\
    \   56 | int main() {\n      |            ^\n/tmp/tmphwt6dj0j.cpp:66:1: error:\
    \ expected \u2018}\u2019 at end of input\n   66 | }\n      | ^\n/tmp/tmphwt6dj0j.cpp:10:37:\
    \ note: to match this \u2018{\u2019\n   10 | bool monotonic(std::vector<long>\
    \ l) {\n      |                                     ^\n/tmp/tmphwt6dj0j.cpp:66:1:\
    \ warning: no return statement in function returning non-void [-Wreturn-type]\n\
    \   66 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int a = 0, b = 0, c = 0, d = 0, e = 0;\n    for (auto it\
    \ = l.begin(); it != l.end(); ++it) {\n        long long int cur = *it;\n    \
    \    if (cur < a) {\n            a = cur;\n        }\n        if (cur > b) {\n\
    \            b = cur;\n        }\n        if (cur < c) {\n            c = cur;\n\
    \        }\n        if (cur > d) {\n            d = cur;\n        }\n        if\
    \ (cur < e) {\n            e = cur;\n        }\n    }\n    if (a < b) {\n    \
    \    return true;\n    }\n    if (b < c) {\n        return true;\n    }\n    if\
    \ (c < d) {\n        return true;\n    }\n    if (d < e) {\n        return true;\n\
    \    }\n    return false;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpc090nguk: /tmp/tmpc090nguk.cpp:48: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long curr = l[0];\n    long long prev\
    \ = 0;\n    for (long long i = 1; i < l.size(); i++) {\n        if (l[i] < curr)\
    \ {\n            ans = 1;\n        } else if (l[i] > curr) {\n            ans\
    \ = -1;\n        } else {\n            ans = 0;\n        }\n        curr = l[i];\n\
    \        prev = l[i - 1];\n    }\n    return ans == 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp6lf7e6vp: /tmp/tmp6lf7e6vp.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long cur = l.front();\n    long long\
    \ prev = l.back();\n    for (long long i : l) {\n        if (i > prev) {\n   \
    \         ans = 1;\n            break;\n        }\n        if (i < prev) {\n \
    \           ans = -1;\n            break;\n        }\n        prev = i;\n    }\n\
    \    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpxxu8e4py: /tmp/tmpxxu8e4py.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        if (l[i] > ans)\n\
    \            return true;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmplngjodmk: /tmp/tmplngjodmk.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long curr = l[0];\n    for (long long\
    \ i = 1; i < l.size(); i++) {\n        if (l[i] < curr) {\n            ans = 1;\n\
    \        }\n        else if (l[i] > curr) {\n            ans = -1;\n        }\n\
    \        curr = l[i];\n    }\n    return ans == 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpjfhx86_n: /tmp/tmpjfhx86_n.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    while (i < l.size()) {\n        ans\
    \ = max(ans, l[i]);\n        i++;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuyc4r0e0.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpuyc4r0e0.cpp:13:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   13 |         ans = max(ans,\
    \ l[i]);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpuyc4r0e0.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long max = std::numeric_limits<long long>::max();\n\
    \    long long min = std::numeric_limits<long long>::min();\n    for (long long\
    \ i = 0; i < l.size(); i++) {\n        ans += l[i];\n        if (l[i] > max) {\n\
    \            max = l[i];\n        }\n        if (l[i] < min) {\n            min\
    \ = l[i];\n        }\n    }\n    if (ans > max) {\n        return true;\n    }\n\
    \    if (ans < min) {\n        return false;\n    }\n    return false;\n}\nint\
    \ main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpke47fl10: /tmp/tmpke47fl10.cpp:33: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int l1 = l[0];\n    long long int l2 = l[1];\n    long long\
    \ int l3 = l[2];\n    long long int l4 = l[3];\n    if (l1 == l2 && l2 == l3 &&\
    \ l3 == l4)\n        return true;\n    if (l1 < l2 && l2 < l3 && l3 < l4)\n  \
    \      return true;\n    return false;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpe5waqzc2: /tmp/tmpe5waqzc2.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l.front();\n    for (long long i = 1; i <\
    \ l.size(); i++) {\n        if (cur > l[i]) {\n            cur = l[i];\n     \
    \       ans = i;\n        }\n    }\n    return ans == l.size();\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3t5_m10s: /tmp/tmp3t5_m10s.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = 0;\n    long long k = 0;\n    long long l = n-1;\n   \
    \ long long m = 1;\n    long long p = 1;\n    long long q = 1;\n    long long\
    \ r = 1;\n    long long s = 1;\n    long long t = 1;\n    long long u = 1;\n \
    \   long long v = 1;\n    long long w = 1;\n    long long x = 1;\n    long long\
    \ y = 1;\n    long long z = 1;\n    long long A = 1;\n    long long B = 1;\n \
    \   long long C = 1;\n    long long D = 1;\n    long long E = 1;\n    long long\
    \ F = 1;\n    long long G = 1;\n    long long H = 1;\n    long long I = 1;\n \
    \   long long J = 1;\n    long long K = 1;\n    long long L = 1;\n    long long\
    \ M = 1;\n    long long N = 1;\n    long long O = 1;\n    long long P = 1;\n \
    \   long long Q = 1;\n    long long R = 1;\n    long long S = 1;\n    long long\
    \ T = 1;\n    long long U = 1;\n    long long V = 1;\n    long long W = 1;\n \
    \   long long X = 1;\n    long long Y = 1;\n    long long Z = 1;\n    long long\
    \ aa = 1;\n    long long ab = 1;\n    long long ac = 1;\n    long long ad = 1;\n\
    \    long long ae = 1;\n    long long af = 1;\n    long long ag = 1;\n    long\
    \ long ah = 1;\n    long long ai = 1;\n    long long aj = 1;\n    long long ak\
    \ = 1;\n    long long al = 1;\n    long long am = 1;\n    long long an = 1;\n\
    \    long long ao = 1;\n    long long ap = 1;\n    long long aq = 1;\n    long\
    \ long ar = 1;\n    long long as = 1;\n    long long at = 1;\n    long long au\
    \ = 1;\n    long long av = 1;\n    long long aw = 1;\n    long long ax = 1;\n\
    \    long long ay = 1;\n    long long az = 1;\n    long long a1 = 1;\n    long\
    \ long a2 = 1;\n    long long a3 = 1;\n    long long a4 = 1;\n    long long a5\
    \ = 1;\n    long long a6 = 1;\n    long long a7 = 1;\n    long long a8 = 1;\n\
    \    long long a9 = 1;\n    long long a10 = 1;\n    long long a11 = 1;\n    long\
    \ long a12 = 1;\n    long long a13 = 1;\n    long long a14 = 1;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp7zw_ynvq.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp7zw_ynvq.cpp:16:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   16 |     long long l = n-1;\n      |   \
    \            ^\n/tmp/tmp7zw_ynvq.cpp:95:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   95 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < ans)\n            return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpp3r1w_3k: /tmp/tmpp3r1w_3k.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    long long int k = std::accumulate(l.begin(), l.end(), 0);\n\
    \    long long int x = std::accumulate(l.begin(), l.end(), 0);\n    long long\
    \ int y = std::accumulate(l.begin(), l.end(), 0);\n    long long int z = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    long long int w = std::accumulate(l.begin(), l.end(), 0);\n\
    \    long long int a = std::accumulate(l.begin(), l.end(), 0);\n    long long\
    \ int b = std::accumulate(l.begin(), l.end(), 0);\n    long long int c = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    long long int d = std::accumulate(l.begin(), l.end(), 0);\n\
    \    long long int e = std::accumulate(l.begin(), l.end(), 0);\n    long long\
    \ int f = std::accumulate(l.begin(), l.end(), 0);\n    long long int g = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    long long int h = std::accumulate(l.begin(), l.end(), 0);\n\
    \    long long int i = std::accumulate(l.begin(), l.end(), 0);\n    long long\
    \ int j = std::accumulate(l.begin(), l.end(), 0);\n    long long int k = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    long long int l = std::accumulate(l.begin(), l.end(), 0);\n\
    \    long long int m = std::accumulate(l.begin(), l.end(), 0);\n    long long\
    \ int n = std::accumulate(l.begin(), l.end(), 0);\n    long long int o = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    long long int p = std::accumulate(l.begin(), l.end(), 0);\n\
    \    long long int q = std::accumulate(l.begin(), l.end(), 0);\n    long long\
    \ int r = std::accumulate(l.begin(), l.end(), 0);\n    long long int s = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    long long int t = std::accumulate(l.begin(), l.end(), 0);\n\
    \    long long int u = std::accumulate(l.begin(), l.end(), 0);\n    long long\
    \ int v = std::accumulate(l.begin(), l.end(), 0);\n    long long int w = std::accumulate(l.begin(),\
    \ l.end(), 0);\n    long long int x = std::accumulate(l.begin(), l.end(), 0);\n\
    \    long long int y = std::accumulate(l.begin(), l.end(), 0);\n    long long\
    \ int z = std::accumul\n}\nint main() {\n    auto candidate = monotonic;\n   \
    \ assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqm8bjqbw.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpqm8bjqbw.cpp:28:19: error: redeclaration of \u2018long\
    \ long int k\u2019\n   28 |     long long int k = std::accumulate(l.begin(), l.end(),\
    \ 0);\n      |                   ^\n/tmp/tmpqm8bjqbw.cpp:13:19: note: \u2018long\
    \ long int k\u2019 previously declared here\n   13 |     long long int k = std::accumulate(l.begin(),\
    \ l.end(), 0);\n      |                   ^\n/tmp/tmpqm8bjqbw.cpp:29:19: error:\
    \ declaration of \u2018long long int l\u2019 shadows a parameter\n   29 |    \
    \ long long int l = std::accumulate(l.begin(), l.end(), 0);\n      |         \
    \          ^\n/tmp/tmpqm8bjqbw.cpp:29:41: error: request for member \u2018begin\u2019\
    \ in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\n   29\
    \ |     long long int l = std::accumulate(l.begin(), l.end(), 0);\n      |   \
    \                                      ^~~~~\n/tmp/tmpqm8bjqbw.cpp:29:52: error:\
    \ request for member \u2018end\u2019 in \u2018l\u2019, which is of non-class type\
    \ \u2018long long int\u2019\n   29 |     long long int l = std::accumulate(l.begin(),\
    \ l.end(), 0);\n      |                                                    ^~~\n\
    /tmp/tmpqm8bjqbw.cpp:30:19: error: redeclaration of \u2018long long int m\u2019\
    \n   30 |     long long int m = std::accumulate(l.begin(), l.end(), 0);\n    \
    \  |                   ^\n/tmp/tmpqm8bjqbw.cpp:12:19: note: \u2018long long int\
    \ m\u2019 previously declared here\n   12 |     long long int m = std::accumulate(l.begin(),\
    \ l.end(), 0);\n      |                   ^\n/tmp/tmpqm8bjqbw.cpp:30:41: error:\
    \ request for member \u2018begin\u2019 in \u2018l\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   30 |     long long int m = std::accumulate(l.begin(),\
    \ l.end(), 0);\n      |                                         ^~~~~\n/tmp/tmpqm8bjqbw.cpp:30:52:\
    \ error: request for member \u2018end\u2019 in \u2018l\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   30 |     long long int m = std::accumulate(l.begin(),\
    \ l.end(), 0);\n      |                                                    ^~~\n\
    /tmp/tmpqm8bjqbw.cpp:31:19: error: redeclaration of \u2018long long in"
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = 0;\n    long long k = 0;\n    long long l = 0;\n    long\
    \ long m = n;\n    long long p = 0;\n    long long q = 0;\n    long long r = 0;\n\
    \    long long s = 0;\n    long long t = 0;\n    long long u = 0;\n    long long\
    \ v = 0;\n    long long w = 0;\n    long long x = 0;\n    long long y = 0;\n \
    \   long long z = 0;\n    long long aa = 0;\n    long long bb = 0;\n    long long\
    \ cc = 0;\n    long long dd = 0;\n    long long ee = 0;\n    long long ff = 0;\n\
    \    long long gg = 0;\n    long long hh = 0;\n    long long ii = 0;\n    long\
    \ long jj = 0;\n    long long kk = 0;\n    long long ll = 0;\n    long long mm\
    \ = 0;\n    long long nn = 0;\n    long long oo = 0;\n    long long pp = 0;\n\
    \    long long qq = 0;\n    long long rr = 0;\n    long long ss = 0;\n    long\
    \ long tt = 0;\n    long long uu = 0;\n    long long vv = 0;\n    long long ww\
    \ = 0;\n    long long xx = 0;\n    long long yy = 0;\n    long long zz = 0;\n\
    \    long long aaa = 0;\n    long long bbb = 0;\n    long long ccc = 0;\n    long\
    \ long ddd = 0;\n    long long eee = 0;\n    long long fff = 0;\n    long long\
    \ ggg = 0;\n    long long hhh = 0;\n    long long iii = 0;\n    long long jjj\
    \ = 0;\n    long long kkk = 0;\n    long long lll = 0;\n    long long mmm = 0;\n\
    \    long long nnn = 0;\n    long long ooo = 0;\n    long long ppp = 0;\n    long\
    \ long qqq = 0;\n    long long rrr = 0;\n    long long sss = 0;\n    long long\
    \ ttt = 0;\n    long long uuu = 0;\n    long long vvv = 0;\n    long long www\
    \ = 0;\n    long long xxx = 0;\n    long long yyy = 0;\n    long long zzz = 0;\n\
    \    long long aaaa = 0;\n    long long bbbb = 0;\n    long long cccc = 0;\n \
    \   long long dddd = 0;\n    long long eeee = 0;\n    long long ffff = 0;\n  \
    \  long long gggg = 0;\n    long long hhhh = 0;\n    long long iiii = 0;\n   \
    \ long long jjjj = 0;\n    long long kkkk = 0;\n    \n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo5l8vuaa.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpo5l8vuaa.cpp:16:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   16 |     long long l = 0;\n      |     \
    \          ^\n/tmp/tmpo5l8vuaa.cpp:93:1: warning: no return statement in function\
    \ returning non-void [-Wreturn-type]\n   93 | }\n      | ^\n"
  stdout: ''
  timestamp: 1660126941
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, prev = 0;\n    for (auto i : l) {\n        if (i\
    \ == prev) {\n            ans++;\n        } else {\n            ans = 1;\n   \
    \     }\n        prev = i;\n    }\n    return ans == 1;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4s02e634: /tmp/tmp4s02e634.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    for(long long\
    \ i = 0; i < n; i++) {\n        long long curr = l[i];\n        long long prev\
    \ = l[i - 1];\n        if(curr > prev) {\n            ans = 1;\n            break;\n\
    \        }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkqmsmz9b: /tmp/tmpkqmsmz9b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return false;\n    long long ans = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) return false;\n \
    \       ans = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfd3buzij: /tmp/tmpfd3buzij.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    long long n = l.size();\n    long long\
    \ m = n - 1;\n    while (i < n) {\n        if (l[i] < l[m]) {\n            ans\
    \ = l[i];\n            i++;\n        } else {\n            ans = l[m];\n     \
    \       m--;\n        }\n    }\n    return ans == l[n];\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0y2m43of: /tmp/tmp0y2m43of.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long cur = l.front();\n    long long\
    \ prev = l.back();\n    for (long long i : l) {\n        if (i > cur) {\n    \
    \        ans = 1;\n        } else if (i < prev) {\n            ans = -1;\n   \
    \     } else {\n            ans = 0;\n        }\n        cur = i;\n        prev\
    \ = i;\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmps5yetl05: /tmp/tmps5yetl05.cpp:29: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for (int i = 0; i < n; i++)\
    \ {\n        long long cur = l[i];\n        long long prev = l[i - 1];\n     \
    \   if (cur < prev) {\n            ans = false;\n            break;\n        }\n\
    \        ans = true;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpctqicybw: /tmp/tmpctqicybw.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    for(long long\
    \ i = 0; i < n; i++) {\n        long long curr = l[i];\n        long long prev\
    \ = l[i - 1];\n        if(curr > prev) {\n            ans = 1;\n            break;\n\
    \        }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpkqmsmz9b: /tmp/tmpkqmsmz9b.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 0; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp58nt4tge: /tmp/tmp58nt4tge.cpp:21: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, temp;\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        temp = ans;\n        ans = l[i] - temp;\n        if (ans < 0)\n \
    \           ans += (long long)INT_MAX;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmptpram442: /tmp/tmptpram442.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    long long cur = l[0];\n    for(; i\
    \ < l.size(); i++) {\n        if(l[i] < cur) {\n            ans = false;\n   \
    \         break;\n        }\n        ans = true;\n        cur = l[i];\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp7ntojmfh: /tmp/tmp7ntojmfh.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    if (n == 0) return false;\n    if (n == 1)\
    \ return true;\n    long l1 = l[0], l2 = l[0], l3 = l[0], l4 = l[0];\n    for\
    \ (int i = 1; i < n; i++) {\n        l1 = std::min(l1, l[i]);\n        l2 = std::max(l2,\
    \ l[i]);\n        l3 = std::min(l3, l[i]);\n        l4 = std::max(l4, l[i]);\n\
    \    }\n    return l4 > l3 && l4 > l2 && l4 > l1;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpyxegen5w: /tmp/tmpyxegen5w.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int n = l.size();\n    long long int m = 1;\n    for (long\
    \ long int i = 0; i < n; ++i) {\n        if (l[i] < m) m = l[i];\n    }\n    return\
    \ m == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2o6ks8s0: /tmp/tmp2o6ks8s0.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = n - 1;\n    while (i < j) {\n        if (l[i] < l[j])\
    \ {\n            ans = l[j];\n            j = j - 1;\n        } else {\n     \
    \       ans = l[i];\n            i = i + 1;\n        }\n    }\n    return ans\
    \ == l[0];\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp262h5x8e: /tmp/tmp262h5x8e.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long prev = l[0];\n    for (long long\
    \ i : l) {\n        if (i > prev) {\n            ans = 1;\n        } else {\n\
    \            ans = 0;\n        }\n        prev = i;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmnp10wpi: /tmp/tmpmnp10wpi.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for (long long i = 0; i < n;\
    \ i++) {\n        long long j = i;\n        while (j > 0 && l[j - 1] > l[j]) {\n\
    \            j--;\n        }\n        if (j > 0) {\n            ans = max(ans,\
    \ l[j] - l[j - 1]);\n        }\n    }\n    return ans == 0;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxpkwq_vy.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpxpkwq_vy.cpp:18:19: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   18 |             ans =\
    \ max(ans, l[j] - l[j - 1]);\n      |                   ^~~\n      |         \
    \          std::max\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpxpkwq_vy.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        else if (l[i] > ans)\n\
    \            return true;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbn_wov2t: /tmp/tmpbn_wov2t.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long i =\
    \ 0;\n    long long j = n - 1;\n    long long k = 0;\n    while (i < j) {\n  \
    \      while (i < n && l[i] < l[j]) {\n            i++;\n        }\n        while\
    \ (j < n && l[j] > l[i]) {\n            j--;\n        }\n        if (i < j) {\n\
    \            ans = l[j];\n            k = i;\n        }\n        i++;\n      \
    \  j--;\n    }\n    return ans == l[k];\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp1ocdjz9g: /tmp/tmp1ocdjz9g.cpp:34: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for(; i < l.size(); i++) {\n      \
    \  ans = max(ans, l[i]);\n    }\n    for(; i < l.size(); i++) {\n        ans =\
    \ min(ans, l[i]);\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1zn90kyd.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmp1zn90kyd.cpp:13:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   13 |         ans = max(ans,\
    \ l[i]);\n      |               ^~~\n      |               std::max\nIn file included\
    \ from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1zn90kyd.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n/tmp/tmp1zn90kyd.cpp:16:15: error: \u2018\
    min\u2019 was not declared in this scope; did you mean \u2018std::min\u2019?\n\
    \   16 |         ans = min(ans, l[i]);\n      |               ^~~\n      |   \
    \            std::min\nIn file included from /usr/include/c++/9/algorithm:62,\n\
    \                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp1zn90kyd.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3456:5:\
    \ note: \u2018std::min\u2019 declared here\n 3456 |     min(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l.front();\n    for (long long i = 1; i <\
    \ l.size(); i++) {\n        if (l[i] < cur) {\n            return false;\n   \
    \     }\n        ans += 1;\n        cur = l[i];\n    }\n    return ans == 1;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp0h1vahhu: /tmp/tmp0h1vahhu.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] > l[i + 1]) {\n            ans = 1;\n            break;\n  \
    \      } else if (l[i] < l[i + 1]) {\n            ans = -1;\n            break;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmprwca9kd4: /tmp/tmprwca9kd4.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        if (l[i] < l[j]) {\n            ans = l[j];\n\
    \            j = j - 1;\n        } else {\n            ans = l[i];\n         \
    \   i = i + 1;\n        }\n    }\n    return ans == l[j];\n}\nint main() {\n \
    \   auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj6g0rj05: /tmp/tmpj6g0rj05.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, x = 0, y = 0, z = 0;\n    for (long i = 0; i <\
    \ l.size(); i++) {\n        x = l[i];\n        y = l[i + 1];\n        z = x +\
    \ y;\n        if (z > ans) {\n            ans = z;\n        }\n    }\n    return\
    \ ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpj2z3q6nt: /tmp/tmpj2z3q6nt.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return false;\n    long long ans = l[0];\n    for\
    \ (long long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) return false;\n\
    \        ans = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmps2f3ua45: /tmp/tmps2f3ua45.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for(; i < l.size(); i++) {\n      \
    \  long long curr = l[i];\n        long long next = l[i+1];\n        if(curr <\
    \ next) {\n            ans = 1;\n            break;\n        }\n    }\n    return\
    \ ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp2d9xs5by: /tmp/tmp2d9xs5by.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, prev = 0, curr = 0, i = 0;\n    while (i < l.size())\
    \ {\n        curr = l[i];\n        if (curr < prev) {\n            ans = false;\n\
    \            break;\n        }\n        prev = curr;\n        i++;\n    }\n  \
    \  return ans;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp4mk3ik0_: /tmp/tmp4mk3ik0_.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    int n = l.size();\n    for (int i = 1; i < n; i++) {\n        if (l[i]\
    \ < l[i - 1]) {\n            return false;\n        }\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpllgdurop: /tmp/tmpllgdurop.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (long long i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] < prev) {\n            return false;\n\
    \        }\n        if (l[i] > cur) {\n            return true;\n        }\n \
    \       prev = cur;\n        cur = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpunwkc9b9: /tmp/tmpunwkc9b9.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l.front();\n    for (long long i = 1; i <\
    \ l.size(); i++) {\n        if (cur > l[i]) {\n            cur = l[i];\n     \
    \       ans = i;\n        }\n    }\n    return ans == l.size();\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp3t5_m10s: /tmp/tmp3t5_m10s.cpp:22: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long max = 0;\n    for (long long i =\
    \ 0; i < l.size(); i++) {\n        if (l[i] > max) {\n            max = l[i];\n\
    \        }\n        if (l[i] < ans) {\n            ans = l[i];\n        }\n  \
    \  }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpk4u6lk73: /tmp/tmpk4u6lk73.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = 0;\n \
    \   long long k = 0;\n    long long l = l.size();\n    while (i < l) {\n     \
    \   ans = ans + l[i];\n        i++;\n    }\n    while (j < l) {\n        ans =\
    \ ans - l[j];\n        j++;\n    }\n    while (k < l) {\n        ans = ans + l[k];\n\
    \        k++;\n    }\n    while (i < l) {\n        ans = ans - l[i];\n       \
    \ i++;\n    }\n    while (j < l) {\n        ans = ans - l[j];\n        j++;\n\
    \    }\n    while (k < l) {\n        ans = ans - l[k];\n        k++;\n    }\n\
    \    if (ans == 0) return false;\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy3_dxoog.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpy3_dxoog.cpp:15:15: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   15 |     long long l = l.size();\n     \
    \ |               ^\n/tmp/tmpy3_dxoog.cpp:15:21: error: request for member \u2018\
    size\u2019 in \u2018l\u2019, which is of non-class type \u2018long long int\u2019\
    \n   15 |     long long l = l.size();\n      |                     ^~~~\n/tmp/tmpy3_dxoog.cpp:17:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   17 |         ans = ans + l[i];\n      |                        ^\n/tmp/tmpy3_dxoog.cpp:21:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   21 |         ans = ans - l[j];\n      |                        ^\n/tmp/tmpy3_dxoog.cpp:25:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   25 |         ans = ans + l[k];\n      |                        ^\n/tmp/tmpy3_dxoog.cpp:29:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   29 |         ans = ans - l[i];\n      |                        ^\n/tmp/tmpy3_dxoog.cpp:33:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   33 |         ans = ans - l[j];\n      |                        ^\n/tmp/tmpy3_dxoog.cpp:37:24:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   37 |         ans = ans - l[k];\n      |                        ^\n"
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    if (l.size() < 2) return false;\n    long long ans = l[0];\n    for\
    \ (long i = 1; i < l.size(); i++) {\n        if (l[i] < ans) return false;\n \
    \       ans = l[i];\n    }\n    return true;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpfd3buzij: /tmp/tmpfd3buzij.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126942
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, temp = 0;\n    for (long i = 0; i < l.size(); i++)\
    \ {\n        temp = l[i];\n        if (temp < ans)\n            ans = temp;\n\
    \    }\n    if (ans == 0)\n        return false;\n    for (long i = 0; i < l.size();\
    \ i++) {\n        temp = l[i];\n        if (temp > ans)\n            ans = temp;\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmphytwsvr8: /tmp/tmphytwsvr8.cpp:28: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, prev = 0, cur = 0;\n    for (auto i : l) {\n  \
    \      cur = i;\n        while (cur > prev) {\n            prev = cur;\n     \
    \       cur = ans;\n            ans++;\n        }\n    }\n    return ans == l.size();\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpmuja2i5_: /tmp/tmpmuja2i5_.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for (long long i = 0; i < n;\
    \ ++i) {\n        long long x = l[i];\n        if (x < ans)\n            return\
    \ false;\n        ans = x;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpy41grhld: /tmp/tmpy41grhld.cpp:25: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        else if (l[i] > ans)\n\
    \            return true;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpbn_wov2t: /tmp/tmpbn_wov2t.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126938
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for(long long i = 0; i < n;\
    \ ++i) {\n        long long x = l[i];\n        long long y = l[i - 1];\n     \
    \   ans = max(ans, x - y);\n    }\n    return ans == 0;\n}\nint main() {\n   \
    \ auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkj0hkrgm.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkj0hkrgm.cpp:15:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   15 |         ans = max(ans,\
    \ x - y);\n      |               ^~~\n      |               std::max\nIn file\
    \ included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpkj0hkrgm.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = 0, h = 0;\n    for (long long i = 0; i < l.size();\
    \ i++) {\n        l = l[i];\n        ans = ans + l;\n    }\n    h = ans;\n   \
    \ for (long long i = 0; i < l.size(); i++) {\n        l = l[i];\n        if (l\
    \ > h) {\n            h++;\n        }\n    }\n    return h == ans;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkps9tb3g.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpkps9tb3g.cpp:11:24: error: declaration of \u2018long long\
    \ int l\u2019 shadows a parameter\n   11 |     long long ans = 0, l = 0, h = 0;\n\
    \      |                        ^\n/tmp/tmpkps9tb3g.cpp:12:33: error: request\
    \ for member \u2018size\u2019 in \u2018l\u2019, which is of non-class type \u2018\
    long long int\u2019\n   12 |     for (long long i = 0; i < l.size(); i++) {\n\
    \      |                                 ^~~~\n/tmp/tmpkps9tb3g.cpp:13:16: error:\
    \ invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   13 |         l = l[i];\n      |                ^\n/tmp/tmpkps9tb3g.cpp:17:33:\
    \ error: request for member \u2018size\u2019 in \u2018l\u2019, which is of non-class\
    \ type \u2018long long int\u2019\n   17 |     for (long long i = 0; i < l.size();\
    \ i++) {\n      |                                 ^~~~\n/tmp/tmpkps9tb3g.cpp:18:16:\
    \ error: invalid types \u2018long long int[long long int]\u2019 for array subscript\n\
    \   18 |         l = l[i];\n      |                ^\n"
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < ans)\n            return false;\n        else if (l[i]\
    \ > ans)\n            return true;\n    }\n    return true;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpuyjodxyr: /tmp/tmpuyjodxyr.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126935
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    long long m =\
    \ 1;\n    long long i = 0;\n    while (i < n) {\n        ans = ans * (n - i) +\
    \ l[i];\n        i++;\n    }\n    while (i < n) {\n        ans = ans * (n - i)\
    \ + m * (n - i - 1);\n        i++;\n    }\n    return ans <= 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp70okgb4w: /tmp/tmp70okgb4w.cpp:27: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l[0];\n    for (long long i = 1; i < l.size();\
    \ i++) {\n        if (l[i] < cur) {\n            return false;\n        }\n  \
    \      ans = max(ans, cur - l[i]);\n        cur = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpla5al8j7.cpp: In function \u2018bool monotonic(std::vector<long\
    \ int>)\u2019:\n/tmp/tmpla5al8j7.cpp:16:15: error: \u2018max\u2019 was not declared\
    \ in this scope; did you mean \u2018std::max\u2019?\n   16 |         ans = max(ans,\
    \ cur - l[i]);\n      |               ^~~\n      |               std::max\nIn\
    \ file included from /usr/include/c++/9/algorithm:62,\n                 from /usr/include/x86_64-linux-gnu/c++/9/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpla5al8j7.cpp:2:\n/usr/include/c++/9/bits/stl_algo.h:3468:5:\
    \ note: \u2018std::max\u2019 declared here\n 3468 |     max(initializer_list<_Tp>\
    \ __l, _Compare __comp)\n      |     ^~~\n"
  stdout: ''
  timestamp: 1660126943
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long i = 1; i < l.size(); i++) {\n\
    \        if (l[i] < ans)\n            return false;\n        ans = l[i];\n   \
    \ }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpoa8cm611: /tmp/tmpoa8cm611.cpp:24: int main(): Assertion `candidate((std::vector<long>({(long)4,
    (long)1, (long)0, (long)-10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126934
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = std::numeric_limits<long long int>::max();\n\
    \    for (auto i : l) {\n        if (i > max) {\n            max = i;\n      \
    \  } else if (i < min) {\n            min = i;\n        }\n    }\n    return max\
    \ >= min;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmp700os_0q: /tmp/tmp700os_0q.cpp:23: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)2, (long)4, (long)10}))) == (true)'' failed.

    '
  stdout: ''
  timestamp: 1660126944
- exit_code: -6
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for (long long i = 0; i < n;\
    \ ++i) {\n        long long curr = l[i];\n        long long prev = l[i - 1];\n\
    \        if (curr > prev) {\n            ans = 1;\n            break;\n      \
    \  }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: Exception
  stderr: 'tmpukq_lyu4: /tmp/tmpukq_lyu4.cpp:26: int main(): Assertion `candidate((std::vector<long>({(long)1,
    (long)20, (long)4, (long)10}))) == (false)'' failed.

    '
  stdout: ''
  timestamp: 1660126943
