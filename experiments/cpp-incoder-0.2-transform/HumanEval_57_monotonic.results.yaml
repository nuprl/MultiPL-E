language: cpp
name: HumanEval_57_monotonic
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = l.size();\n    for (long long i = 0; i < l;\
    \ i++) {\n        long long curr = l[i];\n        if (curr < ans)\n          \
    \  return false;\n        ans = curr;\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfdny_qo0.cpp: In function 'bool monotonic(std::vector<long int>)':\n\
    /tmp/tmpfdny_qo0.cpp:11:24: error: declaration of 'long long int l' shadows a\
    \ parameter\n     long long ans = 0, l = l.size();\n                        ^\n\
    /tmp/tmpfdny_qo0.cpp:11:30: error: request for member 'size' in 'l', which is\
    \ of non-class type 'long long int'\n     long long ans = 0, l = l.size();\n \
    \                             ^\n/tmp/tmpfdny_qo0.cpp:13:29: error: invalid types\
    \ 'long long int[long long int]' for array subscript\n         long long curr\
    \ = l[i];\n                             ^\n/tmp/tmpfdny_qo0.cpp: In function 'int\
    \ main()':\n/tmp/tmpfdny_qo0.cpp:21:10: error: 'candidate' does not name a type\n\
    \     auto candidate = monotonic;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfdny_qo0.cpp:2:\n/tmp/tmpfdny_qo0.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpfdny_qo0.cpp:22:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpfdny_qo0.cpp:22:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpfdny_qo0.cpp:22:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfdny_qo0.cpp:22:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfdny_qo0.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long l = l.size();\n    for (long long\
    \ i = 0; i < l; i++) {\n        long long curr = l[i];\n        long long next\
    \ = l[(i + 1) % l];\n        if (curr > next) {\n            ans = 1;\n      \
    \      break;\n        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpygg7sz7e.cpp: In function 'bool monotonic(std::vector<long int>)':\n\
    /tmp/tmpygg7sz7e.cpp:12:15: error: declaration of 'long long int l' shadows a\
    \ parameter\n     long long l = l.size();\n               ^\n/tmp/tmpygg7sz7e.cpp:12:21:\
    \ error: request for member 'size' in 'l', which is of non-class type 'long long\
    \ int'\n     long long l = l.size();\n                     ^\n/tmp/tmpygg7sz7e.cpp:14:29:\
    \ error: invalid types 'long long int[long long int]' for array subscript\n  \
    \       long long curr = l[i];\n                             ^\n/tmp/tmpygg7sz7e.cpp:15:39:\
    \ error: invalid types 'long long int[long long int]' for array subscript\n  \
    \       long long next = l[(i + 1) % l];\n                                   \
    \    ^\n/tmp/tmpygg7sz7e.cpp: In function 'int main()':\n/tmp/tmpygg7sz7e.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpygg7sz7e.cpp:2:\n/tmp/tmpygg7sz7e.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpygg7sz7e.cpp:25:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpygg7sz7e.cpp:25:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpygg7sz7e.cpp:25:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpygg7sz7e.cpp:25:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/incl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for (; i < l.size() - 1; i++) {\n \
    \       if (l[i] > l[i + 1]) {\n            ans = l[i];\n            break;\n\
    \        }\n    }\n    if (ans == 0) return false;\n    for (; i < l.size(); i++)\
    \ {\n        if (l[i] < ans) ans = l[i];\n    }\n    return true;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgozo2isn.cpp: In function 'int main()':\n/tmp/tmpgozo2isn.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgozo2isn.cpp:2:\n/tmp/tmpgozo2isn.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpgozo2isn.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpgozo2isn.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpgozo2isn.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgozo2isn.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgozo2isn.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgozo2isn.cpp:2:\n/tmp/tmpgozo2isn.cpp:26:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        if (l[i] < l[i - 1]) {\n            ans = 1;\n            break;\n  \
    \      }\n        if (l[i] > l[i - 1]) {\n            ans = 0;\n            break;\n\
    \        }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpks6wyrp6.cpp: In function 'int main()':\n/tmp/tmpks6wyrp6.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpks6wyrp6.cpp:2:\n/tmp/tmpks6wyrp6.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpks6wyrp6.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpks6wyrp6.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpks6wyrp6.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpks6wyrp6.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpks6wyrp6.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpks6wyrp6.cpp:2:\n/tmp/tmpks6wyrp6.cpp:26:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long i = 0;\n    long long j = l.size()\
    \ - 1;\n    while (i < j) {\n        long long mid = (i + j) / 2;\n        if\
    \ (l[mid] < l[mid+1]) {\n            ans = mid;\n            i = mid + 1;\n  \
    \      } else {\n            j = mid;\n        }\n    }\n    return ans == 0;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1kvnd9rq.cpp: In function 'int main()':\n/tmp/tmp1kvnd9rq.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kvnd9rq.cpp:2:\n/tmp/tmp1kvnd9rq.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmp1kvnd9rq.cpp:27:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmp1kvnd9rq.cpp:27:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp1kvnd9rq.cpp:27:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1kvnd9rq.cpp:27:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1kvnd9rq.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1kvnd9rq.cpp:2:\n/tmp/tmp1kvnd9rq.cpp:27:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for (long long i = 0; i < n;\
    \ i++) {\n        long long cur = l[i];\n        if (cur < ans)\n            return\
    \ false;\n        ans = cur;\n    }\n    return true;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpx3pw6fj7.cpp: In function 'int main()':\n/tmp/tmpx3pw6fj7.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx3pw6fj7.cpp:2:\n/tmp/tmpx3pw6fj7.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpx3pw6fj7.cpp:22:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpx3pw6fj7.cpp:22:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpx3pw6fj7.cpp:22:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpx3pw6fj7.cpp:22:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpx3pw6fj7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpx3pw6fj7.cpp:2:\n/tmp/tmpx3pw6fj7.cpp:22:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (long long i\
    \ = 0; i < l.size(); i++) {\n        if (l[i] < prev) {\n            return false;\n\
    \        }\n        prev = cur;\n        cur = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1a_38w2n.cpp: In function 'int main()':\n/tmp/tmp1a_38w2n.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1a_38w2n.cpp:2:\n/tmp/tmp1a_38w2n.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmp1a_38w2n.cpp:23:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmp1a_38w2n.cpp:23:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp1a_38w2n.cpp:23:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1a_38w2n.cpp:23:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1a_38w2n.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1a_38w2n.cpp:2:\n/tmp/tmp1a_38w2n.cpp:23:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, curr = 0, prev = 0;\n    for (long long i = 0;\
    \ i < l.size(); i++) {\n        prev = curr;\n        curr = l[i];\n        if\
    \ (curr < prev) {\n            ans = false;\n            break;\n        }\n \
    \       ans = true;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2yn6pre_.cpp: In function 'int main()':\n/tmp/tmp2yn6pre_.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2yn6pre_.cpp:2:\n/tmp/tmp2yn6pre_.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmp2yn6pre_.cpp:25:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmp2yn6pre_.cpp:25:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp2yn6pre_.cpp:25:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2yn6pre_.cpp:25:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2yn6pre_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2yn6pre_.cpp:2:\n/tmp/tmp2yn6pre_.cpp:25:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, i = 0;\n    for (; i < l.size(); i++) {\n     \
    \   long long curr = l[i];\n        if (curr < ans) {\n            ans = curr;\n\
    \        }\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate =\
    \ monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4f9b88bk.cpp: In function 'int main()':\n/tmp/tmp4f9b88bk.cpp:21:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4f9b88bk.cpp:2:\n/tmp/tmp4f9b88bk.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmp4f9b88bk.cpp:22:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmp4f9b88bk.cpp:22:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp4f9b88bk.cpp:22:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp4f9b88bk.cpp:22:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp4f9b88bk.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4f9b88bk.cpp:2:\n/tmp/tmp4f9b88bk.cpp:22:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = std::numeric_limits<long long int>::max();\n\
    \    for (long long int i : l) {\n        if (i > max) {\n            max = i;\n\
    \        } else if (i < min) {\n            min = i;\n        }\n    }\n    return\
    \ max >= min;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk_3lxjjz.cpp: In function 'bool monotonic(std::vector<long int>)':\n\
    /tmp/tmpk_3lxjjz.cpp:12:28: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long long int i : l) {\n                            ^\n\
    /tmp/tmpk_3lxjjz.cpp: In function 'int main()':\n/tmp/tmpk_3lxjjz.cpp:22:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = monotonic;\n       \
    \   ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n          \
    \       from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n  \
    \               from /tmp/tmpk_3lxjjz.cpp:2:\n/tmp/tmpk_3lxjjz.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpk_3lxjjz.cpp:23:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpk_3lxjjz.cpp:23:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpk_3lxjjz.cpp:23:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk_3lxjjz.cpp:23:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpk_3lxjjz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, cur = l[0], prev = l[0];\n    for (long i = 1;\
    \ i < l.size(); i++) {\n        if (l[i] < prev) {\n            return false;\n\
    \        }\n        prev = cur;\n        cur = l[i];\n    }\n    return true;\n\
    }\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8uye8b02.cpp: In function 'int main()':\n/tmp/tmp8uye8b02.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8uye8b02.cpp:2:\n/tmp/tmp8uye8b02.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmp8uye8b02.cpp:23:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmp8uye8b02.cpp:23:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp8uye8b02.cpp:23:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp8uye8b02.cpp:23:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8uye8b02.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8uye8b02.cpp:2:\n/tmp/tmp8uye8b02.cpp:23:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long l = l.size();\n    for(long long\
    \ i = 0; i < l; i++) {\n        long long cur = l[i];\n        long long prev\
    \ = l[i - 1];\n        if(cur < prev) {\n            ans = 1;\n            break;\n\
    \        }\n        if(cur > prev) {\n            ans = 0;\n            break;\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppkravx9y.cpp: In function 'bool monotonic(std::vector<long int>)':\n\
    /tmp/tmppkravx9y.cpp:12:15: error: declaration of 'long long int l' shadows a\
    \ parameter\n     long long l = l.size();\n               ^\n/tmp/tmppkravx9y.cpp:12:21:\
    \ error: request for member 'size' in 'l', which is of non-class type 'long long\
    \ int'\n     long long l = l.size();\n                     ^\n/tmp/tmppkravx9y.cpp:14:28:\
    \ error: invalid types 'long long int[long long int]' for array subscript\n  \
    \       long long cur = l[i];\n                            ^\n/tmp/tmppkravx9y.cpp:15:33:\
    \ error: invalid types 'long long int[long long int]' for array subscript\n  \
    \       long long prev = l[i - 1];\n                                 ^\n/tmp/tmppkravx9y.cpp:\
    \ In function 'int main()':\n/tmp/tmppkravx9y.cpp:28:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = monotonic;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppkravx9y.cpp:2:\n/tmp/tmppkravx9y.cpp:29:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmppkravx9y.cpp:29:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmppkravx9y.cpp:29:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmppkravx9y.cpp:29:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmppkravx9y.cpp:29:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        long long curr = l[i];\n        long long prev = l[i - 1];\n        if\
    \ (curr < prev) {\n            ans = 1;\n            break;\n        }\n    }\n\
    \    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpkkcbw0l3.cpp: In function 'int main()':\n/tmp/tmpkkcbw0l3.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkkcbw0l3.cpp:2:\n/tmp/tmpkkcbw0l3.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpkkcbw0l3.cpp:24:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpkkcbw0l3.cpp:24:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpkkcbw0l3.cpp:24:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpkkcbw0l3.cpp:24:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkkcbw0l3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkkcbw0l3.cpp:2:\n/tmp/tmpkkcbw0l3.cpp:24:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, l = 0, r = l.size() - 1;\n    while (l <= r) {\n\
    \        long mid = l + (r - l) / 2;\n        if (l[mid] <= r[mid]) {\n      \
    \      ans = mid;\n            l = mid + 1;\n        } else {\n            r =\
    \ mid - 1;\n        }\n    }\n    return ans == l.size() - 1;\n}\nint main() {\n\
    \    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzueun1ro.cpp: In function 'bool monotonic(std::vector<long int>)':\n\
    /tmp/tmpzueun1ro.cpp:11:24: error: declaration of 'long long int l' shadows a\
    \ parameter\n     long long ans = 0, l = 0, r = l.size() - 1;\n              \
    \          ^\n/tmp/tmpzueun1ro.cpp:11:37: error: request for member 'size' in\
    \ 'l', which is of non-class type 'long long int'\n     long long ans = 0, l =\
    \ 0, r = l.size() - 1;\n                                     ^\n/tmp/tmpzueun1ro.cpp:14:18:\
    \ error: invalid types 'long long int[long int]' for array subscript\n       \
    \  if (l[mid] <= r[mid]) {\n                  ^\n/tmp/tmpzueun1ro.cpp:14:28: error:\
    \ invalid types 'long long int[long int]' for array subscript\n         if (l[mid]\
    \ <= r[mid]) {\n                            ^\n/tmp/tmpzueun1ro.cpp:21:21: error:\
    \ request for member 'size' in 'l', which is of non-class type 'long long int'\n\
    \     return ans == l.size() - 1;\n                     ^\n/tmp/tmpzueun1ro.cpp:\
    \ In function 'int main()':\n/tmp/tmpzueun1ro.cpp:24:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = monotonic;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzueun1ro.cpp:2:\n/tmp/tmpzueun1ro.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpzueun1ro.cpp:25:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpzueun1ro.cpp:25:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpzueun1ro.cpp:25:78: error: no matching function for call\
    \ to 'std::vector<"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0, n = l.size();\n    for (long long i = 0; i < n;\
    \ ++i) {\n        long long curr = l[i];\n        long long prev = l[i - 1];\n\
    \        if (curr < prev) {\n            ans = 1;\n            break;\n      \
    \  }\n    }\n    return ans == 1;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfjghc06l.cpp: In function 'int main()':\n/tmp/tmpfjghc06l.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfjghc06l.cpp:2:\n/tmp/tmpfjghc06l.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpfjghc06l.cpp:24:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpfjghc06l.cpp:24:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpfjghc06l.cpp:24:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfjghc06l.cpp:24:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfjghc06l.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfjghc06l.cpp:2:\n/tmp/tmpfjghc06l.cpp:24:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    long long n = l.size();\n    for (long long\
    \ i = 0; i < n; i++) {\n        long long j = i;\n        while (j > 0 && l[j-1]\
    \ > l[j]) {\n            ans = l[j];\n            j--;\n        }\n        l[j]\
    \ = ans;\n    }\n    return ans == 0;\n}\nint main() {\n    auto candidate = monotonic;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdnzdph7q.cpp: In function 'int main()':\n/tmp/tmpdnzdph7q.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdnzdph7q.cpp:2:\n/tmp/tmpdnzdph7q.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpdnzdph7q.cpp:25:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpdnzdph7q.cpp:25:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpdnzdph7q.cpp:25:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdnzdph7q.cpp:25:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdnzdph7q.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdnzdph7q.cpp:2:\n/tmp/tmpdnzdph7q.cpp:25:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n\
    \        long long cur = l[i];\n        if (cur < ans)\n            return false;\n\
    \        if (cur > ans)\n            return true;\n        ans = cur;\n    }\n\
    \    return true;\n}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2qsmb7en.cpp: In function 'int main()':\n/tmp/tmp2qsmb7en.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2qsmb7en.cpp:2:\n/tmp/tmp2qsmb7en.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmp2qsmb7en.cpp:24:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmp2qsmb7en.cpp:24:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp2qsmb7en.cpp:24:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp2qsmb7en.cpp:24:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2qsmb7en.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2qsmb7en.cpp:2:\n/tmp/tmp2qsmb7en.cpp:24:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long ans = l[0];\n    for (long long i = 1; i < l.size(); i++)\
    \ {\n        if (l[i] < ans)\n            return false;\n        ans = l[i];\n\
    \    }\n    return true;\n}\nint main() {\n    auto candidate = monotonic;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)10})))\
    \ == (true));\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpebbsd4bd.cpp: In function 'int main()':\n/tmp/tmpebbsd4bd.cpp:20:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = monotonic;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpebbsd4bd.cpp:2:\n/tmp/tmpebbsd4bd.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpebbsd4bd.cpp:21:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpebbsd4bd.cpp:21:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpebbsd4bd.cpp:21:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpebbsd4bd.cpp:21:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpebbsd4bd.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpebbsd4bd.cpp:2:\n/tmp/tmpebbsd4bd.cpp:21:78"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int max = 0, min = INT_MAX;\n    for (long long int i :\
    \ l) {\n        if (i < min) min = i;\n        if (i > max) max = i;\n    }\n\
    \    if (min == max) return true;\n    return false;\n}\nint main() {\n    auto\
    \ candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcu4r4b0o.cpp: In function 'bool monotonic(std::vector<long int>)':\n\
    /tmp/tmpcu4r4b0o.cpp:12:28: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long long int i : l) {\n                            ^\n\
    /tmp/tmpcu4r4b0o.cpp: In function 'int main()':\n/tmp/tmpcu4r4b0o.cpp:20:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = monotonic;\n       \
    \   ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n          \
    \       from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n  \
    \               from /tmp/tmpcu4r4b0o.cpp:2:\n/tmp/tmpcu4r4b0o.cpp:21:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpcu4r4b0o.cpp:21:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpcu4r4b0o.cpp:21:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpcu4r4b0o.cpp:21:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcu4r4b0o.cpp:21:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcu4r4b0o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitu"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
    \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long>\
    \ l) {\n    long long int ans = 0;\n    long long int max = std::numeric_limits<long\
    \ long int>::max();\n    for (long long int i : l) {\n        if (i > max) {\n\
    \            return false;\n        }\n        if (i < 0) {\n            return\
    \ false;\n        }\n        ans += i;\n    }\n    return ans == 0;\n}\nint main()\
    \ {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
    \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeglwboe1.cpp: In function 'bool monotonic(std::vector<long int>)':\n\
    /tmp/tmpeglwboe1.cpp:13:28: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long long int i : l) {\n                            ^\n\
    /tmp/tmpeglwboe1.cpp: In function 'int main()':\n/tmp/tmpeglwboe1.cpp:25:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = monotonic;\n       \
    \   ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n          \
    \       from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n  \
    \               from /tmp/tmpeglwboe1.cpp:2:\n/tmp/tmpeglwboe1.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)10}))) == (true));\n                                        ^\n/tmp/tmpeglwboe1.cpp:26:78:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)10}))) == (true));\n                                        \
    \                                      ^\n/tmp/tmpeglwboe1.cpp:26:78: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpeglwboe1.cpp:26:78: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpeglwboe1.cpp:26:78:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpeglwboe1.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitu"
  stdout: ''
