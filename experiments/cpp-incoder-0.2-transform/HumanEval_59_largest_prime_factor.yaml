name: HumanEval_59_largest_prime_factor
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return the largest prime\
  \ factor of n. Assume n > 1 and is not a prime.\n// >>> largest_prime_factor((13195))\n\
  // (29)\n// >>> largest_prime_factor((2048))\n// (2)\nlong largest_prime_factor(long\
  \ n) {\n"
tests: "}\nint main() {\n    auto candidate = largest_prime_factor;\n    assert(candidate((15))\
  \ == (5));\n    assert(candidate((27)) == (3));\n    assert(candidate((63)) == (7));\n\
  \    assert(candidate((330)) == (11));\n    assert(candidate((13195)) == (29));\n\
  }\n"
completions: ["    long ans = 1;\n    long d = 2;\n    while (d < n) {\n        while\
    \ (n % d == 0) {\n            ans = d;\n            n /= d;\n        }\n     \
    \   d++;\n    }\n    return ans;", "    long i = 2;\n    long largest = i;\n \
    \   while (i < n) {\n        if (n % i == 0) {\n            largest = i;\n   \
    \     }\n        i++;\n    }\n    return largest;", "    long i, p, max_factor\
    \ = 1;\n    for (i = 2; i <= n / 2; ++i) {\n        p = i * i;\n        if (p\
    \ < n) {\n            if (n % p == 0) {\n                max_factor = p;\n   \
    \         }\n        }\n    }\n    return max_factor;", "    long maxFactor =\
    \ n;\n    long maxFactorFound = n;\n    long i = 2;\n    while (i <= maxFactor)\
    \ {\n        if (n % i == 0) {\n            maxFactorFound = i;\n        }\n \
    \       i += 2;\n    }\n    return maxFactorFound;", "    long ans = 1;\n    long\
    \ i = 2;\n    while (i < n) {\n        if (n % i == 0) {\n            ans = i;\n\
    \            while (n % i == 0) {\n                n /= i;\n            }\n  \
    \      }\n        i++;\n    }\n    return ans;", "    long ans = 1;\n    long\
    \ i = 2;\n    while (i <= n) {\n        if (n % i == 0) {\n            ans = i;\n\
    \            while (ans % i == 0) {\n                ans /= i;\n            }\n\
    \        }\n        i++;\n    }\n    return ans;", "    long p = 2;\n    long\
    \ q = n;\n    long r = n;\n    long s = 2;\n    long t = 3;\n    long u = 3;\n\
    \    long v = 3;\n    long w = 3;\n    long x = 2;\n    long y = 2;\n    long\
    \ z = 2;\n    long a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n\
    \    long e = 1;\n    long f = 0;\n    long g = 1;\n    long h = 1;\n    long\
    \ i = 1;\n    long j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n\
    \    long n = 1;\n    long o = 1;\n    long p = 1;\n    long q = 1;\n    long\
    \ r = 1;\n    long s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n\
    \    long w = 1;\n    long x = 1;\n    long y = 1;\n    long z = 1;\n    long\
    \ a = 1;\n    long b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n\
    \    long f = 0;\n    long g = 1;\n    long h = 1;\n    long i = 1;\n    long\
    \ j = 1;\n    long k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n\
    \    long o = 1;\n    long p = 1;\n    long q = 1;\n    long r = 1;\n    long\
    \ s = 1;\n    long t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n\
    \    long x = 1;\n    long y = 1;\n    long z = 1;\n    long a = 1;\n    long\
    \ b = 1;\n    long c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n\
    \    long g = 1;\n    long h = 1;\n    long i = 1;\n    long j = 1;\n    long\
    \ k = 1;\n    long l = 1;\n    long m = 1;\n    long n = 1;\n    long o = 1;\n\
    \    long p = 1;\n    long q = 1;\n    long r = 1;\n    long s = 1;\n    long\
    \ t = 1;\n    long u = 1;\n    long v = 1;\n    long w = 1;\n    long x = 1;\n\
    \    long y = 1;\n    long z = 1;\n    long a = 1;\n    long b = 1;\n    long\
    \ c = 1;\n    long d = 1;\n    long e = 1;\n    long f = 0;\n    long g = 1;\n\
    \    long h = 1;\n    long i = 1;\n    long j = 1;\n    long k = 1;\n    long\
    \ l = 1;\n    long m = 1;\n    long ", "    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    for (int i = 2; i <= n; i++) {\n        if (n % i == 0) {\n      \
    \      max_factor = i;\n            max_factor_index = i;\n        }\n    }\n\
    \    return max_factor;", "    long max_factor = 1;\n    long max_factor_index\
    \ = 0;\n    for (int i = 1; i <= n; i++) {\n        if (n % i == 0) {\n      \
    \      long factor = i / max_factor;\n            if (factor > max_factor) {\n\
    \                max_factor = factor;\n                max_factor_index = i;\n\
    \            }\n        }\n    }\n    return max_factor_index;", "    long long\
    \ ans = 1;\n    long long i = 2;\n    long long j = 2;\n    long long k = 1;\n\
    \    while (i * j <= n) {\n        if (n % i == 0) {\n            ans = i;\n \
    \           while (n % i == 0) {\n                n /= i;\n                ++k;\n\
    \            }\n        }\n        ++i;\n        ++j;\n    }\n    return ans;",
  "    long ans = 1;\n    long d = 2;\n    while (d <= n / 2) {\n        while (n\
    \ % d == 0) {\n            ans = d;\n            n /= d;\n        }\n        d\
    \ += 2;\n    }\n    return ans;", "    long ans = 1;\n    long i = 2;\n    while\
    \ (i <= n / 2) {\n        if (n % i == 0) {\n            ans = i;\n          \
    \  while (n % i == 0) {\n                n /= i;\n            }\n        }\n \
    \       ++i;\n    }\n    return ans;", "    long ans = 1;\n    long p = 2;\n \
    \   while (p * p <= n) {\n        if (n % p == 0) {\n            ans = p;\n  \
    \          break;\n        }\n        p += 1;\n    }\n    return ans;", "    long\
    \ factor = 2;\n    long max_factor = 1;\n    long max_divisor = 1;\n    long divisor\
    \ = 1;\n    long remainder = 0;\n    while (remainder != 0) {\n        divisor\
    \ = n;\n        while (divisor <= max_divisor) {\n            divisor *= factor;\n\
    \        }\n        remainder = n % divisor;\n        max_divisor = divisor;\n\
    \        max_factor = factor;\n        factor++;\n    }\n    return max_factor;",
  "    long max_factor = 1;\n    long max_factor_index = 0;\n    long i = 2;\n   \
    \ while (i <= n) {\n        if (n % i == 0) {\n            while (n % i == 0)\
    \ {\n                n /= i;\n                max_factor_index = i;\n        \
    \    }\n        }\n        i++;\n    }\n    return max_factor_index;", "    long\
    \ maxFactor = 1;\n    long i = 2;\n    while (i <= n / 2) {\n        if (n % i\
    \ == 0) {\n            maxFactor = i;\n        }\n        i += 2;\n    }\n   \
    \ return maxFactor;", "    long ans = 1;\n    long p = 2;\n    while (p < n) {\n\
    \        if (n % p == 0) {\n            ans = p;\n            break;\n       \
    \ }\n        p += 2;\n    }\n    return ans;", "    long res = n;\n    long max_div\
    \ = n;\n    long max_div2 = n;\n    long max_div3 = n;\n    long max_div4 = n;\n\
    \    long max_div5 = n;\n    long max_div6 = n;\n    long max_div7 = n;\n    long\
    \ max_div8 = n;\n    long max_div9 = n;\n    long max_div10 = n;\n    long max_div11\
    \ = n;\n    long max_div12 = n;\n    long max_div13 = n;\n    long max_div14 =\
    \ n;\n    long max_div15 = n;\n    long max_div16 = n;\n    long max_div17 = n;\n\
    \    long max_div18 = n;\n    long max_div19 = n;\n    long max_div20 = n;\n \
    \   long max_div21 = n;\n    long max_div22 = n;\n    long max_div23 = n;\n  \
    \  long max_div24 = n;\n    long max_div25 = n;\n    long max_div26 = n;\n   \
    \ long max_div27 = n;\n    long max_div28 = n;\n    long max_div29 = n;\n    long\
    \ max_div30 = n;\n    long max_div31 = n;\n    long max_div32 = n;\n    long max_div33\
    \ = n;\n    long max_div34 = n;\n    long max_div35 = n;\n    long max_div36 =\
    \ n;\n    long max_div37 = n;\n    long max_div38 = n;\n    long max_div39 = n;\n\
    \    long max_div40 = n;\n    long max_div41 = n;\n    long max_div42 = n;\n \
    \   long max_div43 = n;\n    long max_div44 = n;\n    long max_div45 = n;\n  \
    \  long max_div46 = n;\n    long max_div47 = n;\n    long max_div48 = n;\n   \
    \ long max_div49 = n;\n    long max_div50 = n;\n    long max_div51 = n;\n    long\
    \ max_div52 = n;\n    long max_div53 = n;\n    long max_div54 = n;\n    long max_div55\
    \ = n;\n    long max_div56 = n;\n    long max_div57 = n;\n    long max_div58 =\
    \ n;\n    long max_div59 = n;\n    long max_div60 = n;\n    long max_div61 = n;\n\
    \    long max_div62 = n;\n    long max_div63 = n;\n    long max_div64 = n;\n \
    \   long max_div65 = n;", "    long i = 2;\n    long largest = i;\n    while (i\
    \ < n) {\n        if (n % i == 0) {\n            largest = i;\n        }\n   \
    \     i += 2;\n    }\n    return largest;", "    long max_factor = 1;\n    long\
    \ max_factor_index = 0;\n    long i = 2;\n    while (i < n) {\n        if (n %\
    \ i == 0) {\n            long j = i;\n            while (j < n) {\n          \
    \      if (n % j == 0) {\n                    max_factor_index = j;\n        \
    \            break;\n                }\n                j++;\n            }\n\
    \            if (max_factor < j - i) {\n                max_factor = j - i;\n\
    \            }\n        }\n        i++;\n    }\n    return max_factor;"]
stop_tokens:
- "\n}"
