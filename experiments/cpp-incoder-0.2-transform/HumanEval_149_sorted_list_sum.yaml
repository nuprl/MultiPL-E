name: HumanEval_149_sorted_list_sum
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function that accepts\
  \ a list of strings as a parameter,\n// deletes the strings that have odd lengths\
  \ from it,\n// and returns the resulted list with a sorted order,\n// The list is\
  \ always a list of strings and never an array of numbers,\n// and it may contain\
  \ duplicates.\n// The order of the list should be ascending by length of each word,\
  \ and you\n// should return the list sorted by that rule.\n// If two words have\
  \ the same length, sort the list alphabetically.\n// The function should return\
  \ a list of strings in sorted order.\n// You may assume that all words will have\
  \ the same length.\n// For example:\n// >>> list_sort((std::vector<std::string>({(std::string)\"\
  aa\", (std::string)\"a\", (std::string)\"aaa\"})))\n// (std::vector<std::string>({(std::string)\"\
  aa\"}))\n// >>> list_sort((std::vector<std::string>({(std::string)\"ab\", (std::string)\"\
  a\", (std::string)\"aaa\", (std::string)\"cd\"})))\n// (std::vector<std::string>({(std::string)\"\
  ab\", (std::string)\"cd\"}))\nstd::vector<std::string> sorted_list_sum(std::vector<std::string>\
  \ lst) {\n"
tests: "}\nint main() {\n    auto candidate = sorted_list_sum;\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aa\", (std::string)\"a\", (std::string)\"aaa\"}))) == (std::vector<std::string>({(std::string)\"\
  aa\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"school\"\
  , (std::string)\"AI\", (std::string)\"asdf\", (std::string)\"b\"}))) == (std::vector<std::string>({(std::string)\"\
  AI\", (std::string)\"asdf\", (std::string)\"school\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  d\", (std::string)\"b\", (std::string)\"c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n\
  \    assert(candidate((std::vector<std::string>({(std::string)\"d\", (std::string)\"\
  dcba\", (std::string)\"abcd\", (std::string)\"a\"}))) == (std::vector<std::string>({(std::string)\"\
  abcd\", (std::string)\"dcba\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  AI\", (std::string)\"ai\", (std::string)\"au\"}))) == (std::vector<std::string>({(std::string)\"\
  AI\", (std::string)\"ai\", (std::string)\"au\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  a\", (std::string)\"b\", (std::string)\"b\", (std::string)\"c\", (std::string)\"\
  c\", (std::string)\"a\"}))) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
  aaaa\", (std::string)\"bbbb\", (std::string)\"dd\", (std::string)\"cc\"}))) == (std::vector<std::string>({(std::string)\"\
  cc\", (std::string)\"dd\", (std::string)\"aaaa\", (std::string)\"bbbb\"})));\n}\n"
completions: ["    // Write your code here\n    std::vector<std::string> res;\n  \
    \  for(auto &i : lst){\n        if(i.length()%2 != 0){\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;", " \
    \   // Write your code here\n    std::vector<std::string> res;\n    for(auto &x:lst){\n\
    \        if((res.size()%2)==0){\n            res.push_back(x);\n        }\n  \
    \      else{\n            for(auto &y:res){\n                if(x.size()>y.size()){\n\
    \                    res.push_back(x);\n                    break;\n         \
    \       }\n                else if(x.size()<y.size()){\n                    res.push_back(y);\n\
    \                    break;\n                }\n                else if(x.size()==y.size()){\n\
    \                    if(std::lexicographical_compare(x.begin(), x.end(), y.begin(),\
    \ y.end())){\n                        res.push_back(x);\n                    \
    \    break;\n                    }\n                    else{\n              \
    \          res.push_back(y);\n                        break;\n               \
    \     }\n                }\n            }\n        }\n    }\n    return res;",
  "    std::vector<std::string> res;\n    std::string temp;\n    for (auto &i : lst)\
    \ {\n        if (i.size() % 2 == 1) {\n            temp = i;\n            i =\
    \ \"\";\n            res.push_back(temp);\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;", " \
    \   // Write your code here\n    std::vector<std::string> res;\n    for(auto &s\
    \ : lst){\n        if(s.size() % 2 == 1){\n            res.push_back(s);\n   \
    \     }\n    }\n    std::sort(res.begin(), res.end(), [](std::string &s1, std::string\
    \ &s2){\n        return s1.size() < s2.size();\n    });\n    return res;", " \
    \   std::vector<std::string> res;\n    for(auto &i : lst) {\n        if(i.size()\
    \ % 2 == 1) {\n            res.push_back(i);\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](const std::string &a, const std::string &b) -> bool {\n      \
    \  return a.size() > b.size();\n    });\n    return res;", "    std::vector<std::string>\
    \ res;\n    for(auto &x : lst) {\n        if(res.size() == 0) {\n            res.push_back(x);\n\
    \        } else {\n            auto it = std::find(res.begin(), res.end(), x);\n\
    \            if(it == res.end()) {\n                res.push_back(x);\n      \
    \      } else {\n                res.insert(it, x);\n            }\n        }\n\
    \    }\n    return res;", "    std::vector<std::string> res;\n    std::string\
    \ temp;\n    for (auto &i : lst) {\n        if (i.size() % 2 == 1) {\n       \
    \     temp = i;\n            i = \"\";\n            res.push_back(temp);\n   \
    \     }\n    }\n    std::sort(res.begin(), res.end());\n    return res;", "  \
    \  std::vector<std::string> res;\n    for(auto &str : lst)\n    {\n        if(res.size()\
    \ == 0)\n        {\n            res.push_back(str);\n        }\n        else if(res.back().length()\
    \ != str.length())\n        {\n            res.push_back(str);\n        }\n  \
    \      else\n        {\n            auto it = std::find(res.rbegin(), res.rend(),\
    \ str);\n            if(it != res.rend())\n            {\n                res.erase(it);\n\
    \            }\n            else\n            {\n                res.push_back(str);\n\
    \            }\n        }\n    }\n    return res;", "    std::vector<std::string>\
    \ res;\n    for (auto &i : lst) {\n        if (i.size() % 2 != 0) {\n        \
    \    res.push_back(i);\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](std::string &a, std::string &b) { return a.size() < b.size(); });\n    return\
    \ res;", "    std::vector<std::string> res;\n    for (auto &i : lst) {\n     \
    \   if (i.size() % 2 == 1) {\n            res.push_back(i);\n        }\n    }\n\
    \    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<std::string>\
    \ res;\n    for (auto &i : lst) {\n        if (i.size() % 2 == 1) {\n        \
    \    res.push_back(i);\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::string &a, const std::string &b) {\n        return a.size() <\
    \ b.size();\n    });\n    return res;", "    std::vector<std::string> res;\n \
    \   for(auto &i : lst) {\n        if(i.length() % 2 != 0) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::string\
    \ &a, const std::string &b) { return a.length() < b.length(); });\n    return\
    \ res;", "    std::vector<std::string> res;\n    for (auto &x : lst) {\n     \
    \   if (res.size() == 0) {\n            res.push_back(x);\n        } else if (res.size()\
    \ == 1) {\n            if (x.size() >= res[0].size()) {\n                res.push_back(x);\n\
    \            } else {\n                res.insert(res.begin() + 1, x);\n     \
    \       }\n        } else {\n            if (x.size() >= res[res.size() - 1].size())\
    \ {\n                res.push_back(x);\n            } else {\n               \
    \ res.insert(res.begin() + res.size() - 1, x);\n            }\n        }\n   \
    \ }\n    return res;", "    std::vector<std::string> res;\n    for (auto &i :\
    \ lst) {\n        if (i.size() % 2 != 0) {\n            res.push_back(i);\n  \
    \      }\n    }\n    std::sort(res.begin(), res.end());\n    return res;", " \
    \   // Write your code here\n    std::vector<std::string> res;\n    for (auto\
    \ &i : lst) {\n        if (i.size() % 2 == 1) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::string\
    \ &a, const std::string &b) {\n        return a.size() > b.size();\n    });\n\
    \    return res;", "    std::vector<std::string> res;\n    std::string temp;\n\
    \    for (auto &i : lst) {\n        temp = i;\n        res.push_back(temp);\n\
    \    }\n    std::sort(res.begin(), res.end());\n    return res;", "    std::vector<std::string>\
    \ res;\n    for (auto &str : lst) {\n        if (res.size() == 0) {\n        \
    \    res.push_back(str);\n        } else if (res.back().size() == str.size())\
    \ {\n            res.back() += str;\n        } else {\n            std::string\
    \ temp;\n            for (auto &s : res) {\n                temp += s;\n     \
    \       }\n            res.push_back(temp);\n            res.back() += str;\n\
    \        }\n    }\n    return res;", "    std::vector<std::string> res;\n    for\
    \ (auto &i : lst) {\n        if (i.size() % 2 == 1) {\n            res.push_back(i);\n\
    \        }\n    }\n    std::sort(res.begin(), res.end());\n    return res;", " \
    \   std::vector<std::string> res;\n    std::string temp;\n    for (auto &i : lst)\
    \ {\n        if (i.size() % 2 == 1) {\n            temp = i;\n            i =\
    \ \"\";\n        }\n        res.push_back(i);\n    }\n    std::sort(res.begin(),\
    \ res.end());\n    return res;", "    std::vector<std::string> res;\n    for (auto\
    \ &x : lst) {\n        if (res.size() == 0) {\n            res.push_back(x);\n\
    \        } else {\n            auto it = std::find(res.begin(), res.end(), x);\n\
    \            if (it != res.end()) {\n                res.erase(it);\n        \
    \        res.push_back(x);\n            } else {\n                res.push_back(x);\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end());\n   \
    \ return res;"]
stop_tokens:
- "\n}"
