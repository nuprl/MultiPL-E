language: cpp
name: HumanEval_116_sort_array
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    for (long\
    \ long int i : arr) {\n        sum += i;\n    }\n    long long int max = 0;\n\
    \    for (long long int i : arr) {\n        if (i == 1) {\n            max = i;\n\
    \        }\n    }\n    std::vector<long> res;\n    for (long long int i : arr)\
    \ {\n        if (i == max) {\n            res.push_back(i);\n        }\n    }\n\
    \    for (long long int i : arr) {\n        if (i != max) {\n            res.push_back(i);\n\
    \        }\n    }\n    for (long long int i : arr) {\n        if (i != max) {\n\
    \            res.push_back(i);\n        }\n    }\n    for (long long int i : arr)\
    \ {\n        if (i != max) {\n            res.push_back(i);\n        }\n    }\n\
    \    for (long long int i : arr) {\n        if (i != max) {\n            res.push_back(i);\n\
    \        }\n    }\n    for (long long int i : arr) {\n        if (i != max) {\n\
    \            res.push_back(i);\n        }\n    }\n    for (long long int i : arr)\
    \ {\n        if (i != max) {\n            res.push_back(i);\n        }\n    }\n\
    \    for (long long int i : arr) {\n        if (i != max) {\n            res.push_back(i);\n\
    \        }\n    }\n    for (long long int i : arr) {\n        if (i != max) {\n\
    \            res.push_back(i);\n        }\n    }\n    for (long long int i : arr)\
    \ {\n        if (i != max) {\n            res.push_back(i);\n        }\n    }\n\
    \    for (long long int i : arr) {\n        if (i != max) {\n            res.push_back(i);\n\
    \        }\n    }\n    for (long long int i : arr) {\n        if (i != max) {\n\
    \            res.push_back(i);\n        }\n    }\n    for (long long int i : arr)\
    \ {\n        if (i != max) {\n            res.push_back(i);\n        }\n    }\n\
    \    for (long long int i : arr) {\n        if (i != max) {\n            res.push_back(i);\n\
    \        }\n    }\n    for (long long int i : arr) {\n        if (i != max) {\n\
    \            res.push_back(i);\n        }\n    }\n    for (long long int i : arr)\
    \ {\n        if (i != max) {\n            res.push_back(i);\n        }\n    }\n\
    \    for (long long int i : arr) {\n        if (i != max) {\n            res.push_back(i);\n\
    \        }\n    }\n    for (long long int i : arr) {\n        if (i != max) {\n\
    \            res.push_back(i);\n        }\n    }\n    for (long long int i : arr)\
    \ {\n        if (i != max) {\n            res.push_back(i);\n        }\n    }\n\
    \    for (long long int i : arr) {\n        if (i != max) {\n\n}\nint main() {\n\
    \    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp8c26osx1.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp8c26osx1.cpp:16:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmp8c26osx1.cpp:20:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long int i : arr) {\n            \
    \                ^\n/tmp/tmp8c26osx1.cpp:26:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp8c26osx1.cpp:31:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp8c26osx1.cpp:36:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp8c26osx1.cpp:41:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp8c26osx1.cpp:46:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp8c26osx1.cpp:51:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp8c26osx1.cpp:56:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp8c26osx1.cpp:61:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp8c26osx1.cpp:66:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp8c26osx1.cpp:71:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp8c26osx1.cpp:76:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long lon"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ones = 0;\n    for (long long i : arr) {\n        ones\
    \ += i;\n    }\n    long long base = 1;\n    while (ones > 0) {\n        long\
    \ long tmp = ones / base;\n        ones = ones % base;\n        arr.push_back(tmp);\n\
    \        base *= 10;\n    }\n    long long base = 1;\n    for (long long i : arr)\
    \ {\n        arr.push_back(i * base);\n        base *= 10;\n    }\n    std::sort(arr.begin(),\
    \ arr.end());\n    return arr;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptqwndp3k.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmptqwndp3k.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmptqwndp3k.cpp:25:15: error: redeclaration of 'long long int base'\n\
    \     long long base = 1;\n               ^\n/tmp/tmptqwndp3k.cpp:18:15: error:\
    \ 'long long int base' previously declared here\n     long long base = 1;\n  \
    \             ^\n/tmp/tmptqwndp3k.cpp:26:24: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long i : arr) {\n                \
    \        ^\n/tmp/tmptqwndp3k.cpp: In function 'int main()':\n/tmp/tmptqwndp3k.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptqwndp3k.cpp:2:\n/tmp/tmptqwndp3k.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmptqwndp3k.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmptqwndp3k.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmptqwndp3k.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmptqwndp3k.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    for(long\
    \ long int i : arr){\n        sum += i;\n    }\n    long long int ones = 0;\n\
    \    for(long long int i : arr){\n        ones += i;\n    }\n    long long int\
    \ max = 0;\n    for(long long int i : arr){\n        if(max < i){\n          \
    \  max = i;\n        }\n    }\n    long long int min = 0;\n    for(long long int\
    \ i : arr){\n        if(min > i){\n            min = i;\n        }\n    }\n  \
    \  long long int mid = sum / 2;\n    long long int midOnes = ones / 2;\n    long\
    \ long int midMax = max / 2;\n    long long int midMin = min / 2;\n    long long\
    \ int midMid = (mid + midOnes) / 2;\n    long long int midMidOnes = (midMid +\
    \ midOnes) / 2;\n    long long int midMidMax = (midMid + midMax) / 2;\n    long\
    \ long int midMidMin = (midMid + midMin) / 2;\n    long long int midMidMid = (midMid\
    \ + midMidOnes) / 2;\n    long long int midMidMidOnes = (midMid + midMidOnes)\
    \ / 2;\n    long long int midMidMidMax = (midMid + midMidMax) / 2;\n    long long\
    \ int midMidMidMin = (midMid + midMidMin) / 2;\n    long long int midMidMid =\
    \ (midMid + midMidMidOnes) / 2;\n    long long int midMidMidOnes = (midMid + midMidOnes)\
    \ / 2;\n    long long int midMidMidMax = (midMid + midMidMax) / 2;\n    long long\
    \ int midMidMidMin = (midMid + midMidMin) / 2;\n    long long int midMidMid =\
    \ (midMid + midMidMidOnes) / 2;\n    long long int midMidMidOnes = (midMid + midMidOnes)\
    \ / 2;\n    long long int midMidMidMax = (midMid + midMidMax) / 2;\n    long long\
    \ int midMidMidMin = (midMid + midMidMin) / 2;\n    long long int midMidMid =\
    \ (midMid + midMidMidOnes) / 2;\n    long long int midMidMidOnes = (midMid + midMidOnes)\
    \ / 2;\n    long long int midMidMidMax = (midMid + midMidMax) / 2;\n    long long\
    \ int midMidMidMin = (midMid + midMid\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0vml2s47.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp0vml2s47.cpp:16:27: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long int i : arr){\n                  \
    \         ^\n/tmp/tmp0vml2s47.cpp:20:27: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long int i : arr){\n                  \
    \         ^\n/tmp/tmp0vml2s47.cpp:24:27: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long int i : arr){\n                  \
    \         ^\n/tmp/tmp0vml2s47.cpp:30:27: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long int i : arr){\n                  \
    \         ^\n/tmp/tmp0vml2s47.cpp:47:19: error: redeclaration of 'long long int\
    \ midMidMid'\n     long long int midMidMid = (midMid + midMidMidOnes) / 2;\n \
    \                  ^\n/tmp/tmp0vml2s47.cpp:43:19: error: 'long long int midMidMid'\
    \ previously declared here\n     long long int midMidMid = (midMid + midMidOnes)\
    \ / 2;\n                   ^\n/tmp/tmp0vml2s47.cpp:48:19: error: redeclaration\
    \ of 'long long int midMidMidOnes'\n     long long int midMidMidOnes = (midMid\
    \ + midMidOnes) / 2;\n                   ^\n/tmp/tmp0vml2s47.cpp:44:19: error:\
    \ 'long long int midMidMidOnes' previously declared here\n     long long int midMidMidOnes\
    \ = (midMid + midMidOnes) / 2;\n                   ^\n/tmp/tmp0vml2s47.cpp:49:19:\
    \ error: redeclaration of 'long long int midMidMidMax'\n     long long int midMidMidMax\
    \ = (midMid + midMidMax) / 2;\n                   ^\n/tmp/tmp0vml2s47.cpp:45:19:\
    \ error: 'long long int midMidMidMax' previously declared here\n     long long\
    \ int midMidMidMax = (midMid + midMidMax) / 2;\n                   ^\n/tmp/tmp0vml2s47.cpp:50:19:\
    \ error: redeclaration of 'long long int midMidMidMin'\n     long long int midMidMidMin\
    \ = (midMid + midMidMin) / 2;\n                   ^\n/tmp/tmp0vml2s47.cpp:46:19:\
    \ error: 'long long int midMidMidMin' previously declared here\n     long long\
    \ int midMidMidMin = (midMid + midMidMin) / 2;\n                   ^\n/tmp/tmp0vml2s47.cpp:51:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Your code here\n    long long int sum = 0;\n    long long int\
    \ max = 0;\n    long long int min = 0;\n    for (long long int i : arr) {\n  \
    \      sum += i;\n        if (sum > max) {\n            max = sum;\n        }\n\
    \        if (sum < min) {\n            min = sum;\n        }\n    }\n    std::vector<long>\
    \ ans;\n    for (long long int i : arr) {\n        long long int count = 0;\n\
    \        while (i != 0) {\n            count += i & 1;\n            i >>= 1;\n\
    \        }\n        if (count == max - min) {\n            ans.push_back(i);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjf50b92i.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpjf50b92i.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmpjf50b92i.cpp:28:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long int i : arr) {\n            \
    \                ^\n/tmp/tmpjf50b92i.cpp: In function 'int main()':\n/tmp/tmpjf50b92i.cpp:41:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjf50b92i.cpp:2:\n/tmp/tmpjf50b92i.cpp:42:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpjf50b92i.cpp:42:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpjf50b92i.cpp:42:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpjf50b92i.cpp:42:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpjf50b92i.cpp:42:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpjf50b92i.cpp:2:\n/usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ans = 0;\n    for (long long i : arr) {\n        ans +=\
    \ i;\n    }\n    long long mod = pow(10, ceil(log2(ans)));\n    long long ans2\
    \ = 0;\n    for (long long i : arr) {\n        ans2 += i * mod;\n    }\n    long\
    \ long ans3 = ans / mod;\n    long long ans4 = ans % mod;\n    long long ans5\
    \ = ans2 / mod;\n    long long ans6 = ans2 % mod;\n    long long ans7 = ans3 /\
    \ mod;\n    long long ans8 = ans3 % mod;\n    long long ans9 = ans4 / mod;\n \
    \   long long ans10 = ans4 % mod;\n    long long ans11 = ans5 / mod;\n    long\
    \ long ans12 = ans5 % mod;\n    long long ans13 = ans6 / mod;\n    long long ans14\
    \ = ans6 % mod;\n    long long ans15 = ans7 / mod;\n    long long ans16 = ans7\
    \ % mod;\n    long long ans17 = ans8 / mod;\n    long long ans18 = ans8 % mod;\n\
    \    long long ans19 = ans9 / mod;\n    long long ans20 = ans9 % mod;\n    long\
    \ long ans21 = ans10 / mod;\n    long long ans22 = ans10 % mod;\n    long long\
    \ ans23 = ans11 / mod;\n    long long ans24 = ans11 % mod;\n    long long ans25\
    \ = ans12 / mod;\n    long long ans26 = ans12 % mod;\n    long long ans27 = ans13\
    \ / mod;\n    long long ans28 = ans13 % mod;\n    long long ans29 = ans14 / mod;\n\
    \    long long ans30 = ans14 % mod;\n    long long ans31 = ans15 / mod;\n    long\
    \ long ans32 = ans15 % mod;\n    long long ans33 = ans16 / mod;\n    long long\
    \ ans34 = ans16 % mod;\n    long long ans35 = ans17 / mod;\n    long long ans36\
    \ = ans17 % mod;\n    long long ans37 = ans18 / mod;\n    long long ans38 = ans18\
    \ % mod;\n    long long ans39 = ans19 / mod;\n    long long ans40 = ans19 % mod;\n\
    \    long long ans41 = ans20 / \n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3nvarzut.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp3nvarzut.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmp3nvarzut.cpp:20:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : arr) {\n                        ^\n/tmp/tmp3nvarzut.cpp:62:1:\
    \ error: expected primary-expression before '}' token\n }\n ^\n/tmp/tmp3nvarzut.cpp:62:1:\
    \ error: expected ',' or ';' before '}' token\n/tmp/tmp3nvarzut.cpp: In function\
    \ 'int main()':\n/tmp/tmp3nvarzut.cpp:64:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = sort_array;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3nvarzut.cpp:2:\n/tmp/tmp3nvarzut.cpp:65:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp3nvarzut.cpp:65:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp3nvarzut.cpp:65:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp3nvarzut.cpp:65:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp3nvarzut.cpp:65:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n         "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ones = 0;\n    for (long long i : arr) {\n        ones\
    \ += i;\n    }\n    long long base = 1;\n    while (ones > 0) {\n        long\
    \ long mod = ones / base;\n        ones = ones - mod * base;\n        arr.push_back(mod);\n\
    \        base *= 10;\n    }\n    std::sort(arr.begin(), arr.end());\n    return\
    \ arr;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ndt2t30.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp6ndt2t30.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmp6ndt2t30.cpp: In function 'int main()':\n/tmp/tmp6ndt2t30.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ndt2t30.cpp:2:\n/tmp/tmp6ndt2t30.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp6ndt2t30.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp6ndt2t30.cpp:30:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp6ndt2t30.cpp:30:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ndt2t30.cpp:30:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ndt2t30.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int temp = 0;\n    long long int count = 0;\n    for (long long int i : arr)\
    \ {\n        temp = i;\n        while (temp != 0) {\n            sum += temp %\
    \ 10;\n            temp /= 10;\n        }\n        count += 1;\n    }\n    std::vector<long>\
    \ ans;\n    for (long long int i = 0; i < count; i++) {\n        ans.push_back(sum\
    \ / count);\n        sum -= ans.back() * count;\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0c21f05o.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp0c21f05o.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmp0c21f05o.cpp: In function 'int main()':\n/tmp/tmp0c21f05o.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0c21f05o.cpp:2:\n/tmp/tmp0c21f05o.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp0c21f05o.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp0c21f05o.cpp:35:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp0c21f05o.cpp:35:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0c21f05o.cpp:35:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp0c21f05o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ones = 0;\n    for (long long i : arr) {\n        ones\
    \ += i;\n    }\n    long long ones_count = ones;\n    long long decimal = 0;\n\
    \    for (long long i : arr) {\n        decimal += i;\n    }\n    long long decimal_count\
    \ = decimal;\n    long long decimal_count_temp = decimal_count;\n    long long\
    \ decimal_count_temp_2 = decimal_count;\n    long long decimal_count_temp_3 =\
    \ decimal_count;\n    long long decimal_count_temp_4 = decimal_count;\n    long\
    \ long decimal_count_temp_5 = decimal_count;\n    long long decimal_count_temp_6\
    \ = decimal_count;\n    long long decimal_count_temp_7 = decimal_count;\n    long\
    \ long decimal_count_temp_8 = decimal_count;\n    long long decimal_count_temp_9\
    \ = decimal_count;\n    long long decimal_count_temp_10 = decimal_count;\n   \
    \ long long decimal_count_temp_11 = decimal_count;\n    long long decimal_count_temp_12\
    \ = decimal_count;\n    long long decimal_count_temp_13 = decimal_count;\n   \
    \ long long decimal_count_temp_14 = decimal_count;\n    long long decimal_count_temp_15\
    \ = decimal_count;\n    long long decimal_count_temp_16 = decimal_count;\n   \
    \ long long decimal_count_temp_17 = decimal_count;\n    long long decimal_count_temp_18\
    \ = decimal_count;\n    long long decimal_count_temp_19 = decimal_count;\n   \
    \ long long decimal_count_temp_20 = decimal_count;\n    long long decimal_count_temp_21\
    \ = decimal_count;\n    long long decimal_count_temp_22 = decimal_count;\n   \
    \ long long decimal_count_temp_23 = decimal_count;\n    long long decimal_count_temp_24\
    \ = decimal_count;\n    long long decimal_count_temp_25 = decimal_count;\n   \
    \ long long decimal_count_temp_26 = decimal_count;\n    long long decimal_count_temp_27\
    \ = decimal_count;\n    long long decimal_count_temp_28 = decimal_count;\n   \
    \ long long decimal_count_temp_29 = decimal_count;\n    long long decimal_count_temp_30\
    \ = decimal_count;\n    long long decimal_count_temp_31 = decimal_count;\n   \
    \ long long decimal_count_temp_32 = decimal_count;\n    long long decimal_count_temp_33\
    \ = decimal_count;\n    long long decimal_count_temp_34 = decimal_count;\n   \
    \ long long decimal_count_temp_35 = decimal_count;\n    long long decimal_count_temp_36\
    \ = decimal_count;\n    long long decimal_count_temp_37 = decimal_count;\n   \
    \ long long decimal_count_temp_38 = decimal_count;\n    long long decimal_count_temp_39\
    \ = decimal_count;\n    long long decimal_count_temp_40 = decimal_count;\n   \
    \ long long decimal_count_temp_41 = decimal_count;\n    long long decimal_count_temp_42\
    \ = decimal_count;\n    long long decimal_\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk7eo__ac.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpk7eo__ac.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmpk7eo__ac.cpp:20:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : arr) {\n                        ^\n/tmp/tmpk7eo__ac.cpp:67:1:\
    \ error: expected initializer before '}' token\n }\n ^\n/tmp/tmpk7eo__ac.cpp:\
    \ In function 'int main()':\n/tmp/tmpk7eo__ac.cpp:69:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk7eo__ac.cpp:2:\n/tmp/tmpk7eo__ac.cpp:70:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpk7eo__ac.cpp:70:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpk7eo__ac.cpp:70:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpk7eo__ac.cpp:70:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk7eo__ac.cpp:70:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n    "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long int sum = 0;\n    long long int max = 0;\n    for (long\
    \ long int i : arr) {\n        sum += i;\n        if (sum > max) {\n         \
    \   max = sum;\n        }\n    }\n    std::vector<long> ans;\n    for (long long\
    \ int i : arr) {\n        long long int count = 0;\n        for (long long int\
    \ j : arr) {\n            if (j == i) {\n                count++;\n          \
    \  }\n        }\n        ans.push_back((count * i) / max);\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpzuqvjltp.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpzuqvjltp.cpp:16:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmpzuqvjltp.cpp:23:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long int i : arr) {\n            \
    \                ^\n/tmp/tmpzuqvjltp.cpp:25:32: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n         for (long long int j : arr) {\n    \
    \                            ^\n/tmp/tmpzuqvjltp.cpp: In function 'int main()':\n\
    /tmp/tmpzuqvjltp.cpp:35:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpzuqvjltp.cpp:2:\n/tmp/tmpzuqvjltp.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpzuqvjltp.cpp:36:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpzuqvjltp.cpp:36:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpzuqvjltp.cpp:36:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpzuqvjltp.cpp:36:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long int sum = 0;\n    for (long long int i : arr) {\n    \
    \    sum += i;\n    }\n    long long int mod = sum % 10;\n    long long int rem\
    \ = sum / 10;\n    std::vector<long> res;\n    for (long long int i : arr) {\n\
    \        if (i % 2 == 0) {\n            res.push_back(rem);\n            rem =\
    \ mod * rem + i;\n            mod = i;\n        } else {\n            res.push_back(i);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc6h_zabg.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpc6h_zabg.cpp:15:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmpc6h_zabg.cpp:21:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long int i : arr) {\n            \
    \                ^\n/tmp/tmpc6h_zabg.cpp: In function 'int main()':\n/tmp/tmpc6h_zabg.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc6h_zabg.cpp:2:\n/tmp/tmpc6h_zabg.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpc6h_zabg.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpc6h_zabg.cpp:34:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpc6h_zabg.cpp:34:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpc6h_zabg.cpp:34:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpc6h_zabg.cpp:2:\n/usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int ones = 0;\n    long long\
    \ int zeros = 0;\n    long long int max = 0;\n    long long int min = 0;\n   \
    \ for (auto i : arr) {\n        if (i == 1) {\n            ones++;\n        }\
    \ else {\n            zeros++;\n        }\n        if (ones > zeros) {\n     \
    \       max = i;\n        } else if (ones < zeros) {\n            min = i;\n \
    \       }\n    }\n    long long int temp = zeros;\n    zeros = ones;\n    ones\
    \ = temp;\n    long long int temp2 = min;\n    min = max;\n    max = temp2;\n\
    \    long long int temp3 = max;\n    max = min;\n    min = temp3;\n    long long\
    \ int temp4 = max;\n    max = min;\n    min = temp4;\n    long long int temp5\
    \ = max;\n    max = min;\n    min = temp5;\n    long long int temp6 = max;\n \
    \   max = min;\n    min = temp6;\n    long long int temp7 = max;\n    max = min;\n\
    \    min = temp7;\n    long long int temp8 = max;\n    max = min;\n    min = temp8;\n\
    \    long long int temp9 = max;\n    max = min;\n    min = temp9;\n    long long\
    \ int temp10 = max;\n    max = min;\n    min = temp10;\n    long long int temp11\
    \ = max;\n    max = min;\n    min = temp11;\n    long long int temp12 = max;\n\
    \    max = min;\n    min = temp12;\n    long long int temp13 = max;\n    max =\
    \ min;\n    min = temp13;\n    long long int temp14 = max;\n    max = min;\n \
    \   min = temp14;\n    long long int temp15 = max;\n    max = min;\n    min =\
    \ temp15;\n    long long int temp16 = max;\n    max = min;\n    min = temp16;\n\
    \    long long int temp17 = max;\n    max = min;\n    min = temp17;\n    long\
    \ long int temp18 = max;\n    max = min;\n    min = temp18;\n    long long int\
    \ temp19 = max;\n    max = min;\n    min = temp19;\n    long long int temp20 =\
    \ max;\n    max = min;\n    min = temp20;\n    long long int temp21 = max;\n \
    \   max = min;\n    min = temp21;\n    long long int temp22 = max;\n    max =\
    \ min;\n    min = temp\n}\nint main() {\n    auto candidate = sort_array;\n  \
    \  assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3, (long)4})))\
    \ == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n  \
    \  assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphclhd9qd.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmphclhd9qd.cpp:19:15: error: 'i' does not name a type\n     for\
    \ (auto i : arr) {\n               ^\n/tmp/tmphclhd9qd.cpp:31:5: error: expected\
    \ ';' before 'long'\n     long long int temp = zeros;\n     ^\n/tmp/tmphclhd9qd.cpp:32:17:\
    \ error: expected ')' before ';' token\n     zeros = ones;\n                 ^\n\
    /tmp/tmphclhd9qd.cpp:33:12: error: 'temp' was not declared in this scope\n   \
    \  ones = temp;\n            ^\n/tmp/tmphclhd9qd.cpp:97:1: error: expected ';'\
    \ before '}' token\n }\n ^\n/tmp/tmphclhd9qd.cpp: In function 'int main()':\n\
    /tmp/tmphclhd9qd.cpp:99:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = sort_array;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphclhd9qd.cpp:2:\n/tmp/tmphclhd9qd.cpp:100:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmphclhd9qd.cpp:100:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmphclhd9qd.cpp:100:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmphclhd9qd.cpp:100:86: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmphclhd9qd.cpp:100:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /us"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    long long int max = 0;\n    long long int min = 0;\n   \
    \ for (long long int i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n \
    \       if (arr[i] > max) {\n            max = arr[i];\n        }\n        if\
    \ (arr[i] < min) {\n            min = arr[i];\n        }\n    }\n    long long\
    \ int temp;\n    for (long long int i = 0; i < arr.size(); i++) {\n        temp\
    \ = arr[i];\n        arr[i] = (arr[i] - min) * ((max - min) / sum);\n        arr[i]\
    \ = arr[i] + min;\n    }\n    return arr;\n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy9pnohib.cpp: In function 'int main()':\n/tmp/tmpy9pnohib.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy9pnohib.cpp:2:\n/tmp/tmpy9pnohib.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpy9pnohib.cpp:38:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpy9pnohib.cpp:38:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpy9pnohib.cpp:38:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpy9pnohib.cpp:38:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy9pnohib.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for(long long int i : arr){\n        sum += i;\n       \
    \ count += 1;\n    }\n    long long int mod = sum % 10;\n    long long int remainder\
    \ = sum / 10;\n    long long int temp = remainder;\n    long long int temp2 =\
    \ mod;\n    long long int temp3 = remainder;\n    long long int temp4 = mod;\n\
    \    long long int temp5 = remainder;\n    long long int temp6 = mod;\n    long\
    \ long int temp7 = remainder;\n    long long int temp8 = mod;\n    long long int\
    \ temp9 = remainder;\n    long long int temp10 = mod;\n    long long int temp11\
    \ = remainder;\n    long long int temp12 = mod;\n    long long int temp13 = remainder;\n\
    \    long long int temp14 = mod;\n    long long int temp15 = remainder;\n    long\
    \ long int temp16 = mod;\n    long long int temp17 = remainder;\n    long long\
    \ int temp18 = mod;\n    long long int temp19 = remainder;\n    long long int\
    \ temp20 = mod;\n    long long int temp21 = remainder;\n    long long int temp22\
    \ = mod;\n    long long int temp23 = remainder;\n    long long int temp24 = mod;\n\
    \    long long int temp25 = remainder;\n    long long int temp26 = mod;\n    long\
    \ long int temp27 = remainder;\n    long long int temp28 = mod;\n    long long\
    \ int temp29 = remainder;\n    long long int temp30 = mod;\n    long long int\
    \ temp31 = remainder;\n    long long int temp32 = mod;\n    long long int temp33\
    \ = remainder;\n    long long int temp34 = mod;\n    long long int temp35 = remainder;\n\
    \    long long int temp36 = mod;\n    long long int temp37 = remainder;\n    long\
    \ long int temp38 = mod;\n    long long int temp39 = remainder;\n    long long\
    \ int temp40 = mod;\n    long long int temp41 = remainder;\n    long long int\
    \ temp42 = mod;\n    long long int temp43 = remainder;\n    long long int temp44\
    \ = mod;\n    long long int temp\n}\nint main() {\n    auto candidate = sort_array;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})));\n\
    \    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4, (long)-5,\
    \ (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6, (long)-5,\
    \ (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2, (long)4,\
    \ (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqihwy8w7.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpqihwy8w7.cpp:17:27: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for(long long int i : arr){\n                  \
    \         ^\n/tmp/tmpqihwy8w7.cpp:68:1: error: expected initializer before '}'\
    \ token\n }\n ^\n/tmp/tmpqihwy8w7.cpp: In function 'int main()':\n/tmp/tmpqihwy8w7.cpp:70:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqihwy8w7.cpp:2:\n/tmp/tmpqihwy8w7.cpp:71:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpqihwy8w7.cpp:71:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpqihwy8w7.cpp:71:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpqihwy8w7.cpp:71:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpqihwy8w7.cpp:71:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqihwy8w7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_T"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    std::vector<long> res(arr.size());\n    for (size_t i = 0; i < arr.size();\
    \ i++) {\n        long ones = 0;\n        while (arr[i] & 1) ones++;\n       \
    \ res[i] = ones;\n    }\n    std::sort(res.begin(), res.end());\n    return res;\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1rwe8w6o.cpp: In function 'int main()':\n/tmp/tmp1rwe8w6o.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1rwe8w6o.cpp:2:\n/tmp/tmp1rwe8w6o.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp1rwe8w6o.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp1rwe8w6o.cpp:25:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp1rwe8w6o.cpp:25:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp1rwe8w6o.cpp:25:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1rwe8w6o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ones = 0;\n    for (long long i : arr) {\n        ones\
    \ += i;\n    }\n    long long base = 1;\n    while (ones > 0) {\n        long\
    \ long mod = ones / base;\n        ones = ones - mod * base;\n        arr.push_back(mod);\n\
    \        base *= 10;\n    }\n    std::sort(arr.begin(), arr.end());\n    return\
    \ arr;\n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6ndt2t30.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp6ndt2t30.cpp:15:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : arr) {\n                    \
    \    ^\n/tmp/tmp6ndt2t30.cpp: In function 'int main()':\n/tmp/tmp6ndt2t30.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6ndt2t30.cpp:2:\n/tmp/tmp6ndt2t30.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp6ndt2t30.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp6ndt2t30.cpp:30:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp6ndt2t30.cpp:30:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp6ndt2t30.cpp:30:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6ndt2t30.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ans = 0;\n    for (long long i = 0; i < arr.size(); i++)\
    \ {\n        ans += arr[i];\n    }\n    long long cnt = 0;\n    for (long long\
    \ i = 0; i < arr.size(); i++) {\n        cnt += arr[i];\n    }\n    long long\
    \ temp = ans;\n    ans = cnt;\n    cnt = temp;\n    std::vector<long> ans_list;\n\
    \    for (long long i = 0; i < arr.size(); i++) {\n        if (cnt > arr[i]) {\n\
    \            ans_list.push_back(arr[i]);\n            cnt -= arr[i];\n       \
    \ } else {\n            ans_list.push_back(cnt);\n            cnt += arr[i];\n\
    \        }\n    }\n    return ans_list;\n}\nint main() {\n    auto candidate =\
    \ sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpy4qu3gyh.cpp: In function 'int main()':\n/tmp/tmpy4qu3gyh.cpp:38:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy4qu3gyh.cpp:2:\n/tmp/tmpy4qu3gyh.cpp:39:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpy4qu3gyh.cpp:39:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpy4qu3gyh.cpp:39:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpy4qu3gyh.cpp:39:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpy4qu3gyh.cpp:39:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy4qu3gyh.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    long long int max = 0;\n    long long int min = 0;\n   \
    \ long long int max2 = 0;\n    long long int min2 = 0;\n    for (long long int\
    \ i = 0; i < arr.size(); i++) {\n        sum += arr[i];\n        count += 1;\n\
    \        if (arr[i] > max) {\n            max = arr[i];\n        }\n        if\
    \ (arr[i] < min) {\n            min = arr[i];\n        }\n        if (arr[i] >\
    \ max2) {\n            max2 = arr[i];\n        }\n        if (arr[i] < min2) {\n\
    \            min2 = arr[i];\n        }\n    }\n    long long int sum2 = sum;\n\
    \    long long int count2 = count;\n    long long int max2 = max;\n    long long\
    \ int min2 = min;\n    long long int max3 = max2;\n    long long int min3 = min2;\n\
    \    long long int max4 = max3;\n    long long int min4 = min3;\n    long long\
    \ int max5 = max4;\n    long long int min5 = min4;\n    long long int max6 = max5;\n\
    \    long long int min6 = min5;\n    long long int max7 = max6;\n    long long\
    \ int min7 = min6;\n    long long int max8 = max7;\n    long long int min8 = min7;\n\
    \    long long int max9 = max8;\n    long long int min9 = min8;\n    long long\
    \ int max10 = max9;\n    long long int min10 = min9;\n    long long int max11\
    \ = max10;\n    long long int min11 = min10;\n    long long int max12 = max11;\n\
    \    long long int min12 = min11;\n    long long int max13 = max12;\n    long\
    \ long int min13 = min12;\n    long long int max14 = max13;\n    long long int\
    \ min14 = min13;\n    long long int max15 = max14;\n    long long int min15 =\
    \ min14;\n    long long int max16 = max15;\n    long long int min16 = min15;\n\
    \    long long int max17 = max16;\n    long long int min17 = min16;\n    long\
    \ long int max18 = max17;\n    long long int min18 = min17;\n    long long int\
    \ max19 = max18;\n    long long int min19 = min18;\n    long long int max20 =\
    \ max19;\n    long long int min20 = min19;\n    long long int max21 = max20\n\
    }\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpb3_3915_.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpb3_3915_.cpp:39:19: error: redeclaration of 'long long int\
    \ max2'\n     long long int max2 = max;\n                   ^\n/tmp/tmpb3_3915_.cpp:19:19:\
    \ error: 'long long int max2' previously declared here\n     long long int max2\
    \ = 0;\n                   ^\n/tmp/tmpb3_3915_.cpp:40:19: error: redeclaration\
    \ of 'long long int min2'\n     long long int min2 = min;\n                  \
    \ ^\n/tmp/tmpb3_3915_.cpp:20:19: error: 'long long int min2' previously declared\
    \ here\n     long long int min2 = 0;\n                   ^\n/tmp/tmpb3_3915_.cpp:78:1:\
    \ error: expected ',' or ';' before '}' token\n }\n ^\n/tmp/tmpb3_3915_.cpp: In\
    \ function 'int main()':\n/tmp/tmpb3_3915_.cpp:80:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = sort_array;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb3_3915_.cpp:2:\n/tmp/tmpb3_3915_.cpp:81:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpb3_3915_.cpp:81:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpb3_3915_.cpp:81:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpb3_3915_.cpp:81:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpb3_3915_.cpp:81:86:\
    \ not"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    long long ones = 0;\n    long long zeros = 0;\n    for (auto i :\
    \ arr) {\n        ones += i;\n        zeros += (long long)~i;\n    }\n    if (ones\
    \ > zeros) {\n        std::sort(arr.begin(), arr.end(), [](long long a, long long\
    \ b) { return a > b; });\n    } else {\n        std::sort(arr.begin(), arr.end(),\
    \ [](long long a, long long b) { return a < b; });\n    }\n    return arr;\n}\n\
    int main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuw9kylgr.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpuw9kylgr.cpp:16:15: error: 'i' does not name a type\n     for\
    \ (auto i : arr) {\n               ^\n/tmp/tmpuw9kylgr.cpp:20:5: error: expected\
    \ ';' before 'if'\n     if (ones > zeros) {\n     ^\n/tmp/tmpuw9kylgr.cpp:20:5:\
    \ error: expected primary-expression before 'if'\n/tmp/tmpuw9kylgr.cpp:20:5: error:\
    \ expected ';' before 'if'\n/tmp/tmpuw9kylgr.cpp:20:5: error: expected primary-expression\
    \ before 'if'\n/tmp/tmpuw9kylgr.cpp:20:5: error: expected ')' before 'if'\n/tmp/tmpuw9kylgr.cpp:21:88:\
    \ warning: lambda expressions only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n         std::sort(arr.begin(), arr.end(), [](long long a, long\
    \ long b) { return a > b; });\n                                              \
    \                                          ^\n/tmp/tmpuw9kylgr.cpp:21:89: error:\
    \ no matching function for call to 'sort(std::vector<long int>::iterator, std::vector<long\
    \ int>::iterator, sort_array(std::vector<long int>)::__lambda0)'\n         std::sort(arr.begin(),\
    \ arr.end(), [](long long a, long long b) { return a > b; });\n              \
    \                                                                           ^\n\
    /tmp/tmpuw9kylgr.cpp:21:89: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/algorithm:62:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:64,\n\
    \                 from /tmp/tmpuw9kylgr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note: template<class _RAIter> void std::sort(_RAIter, _RAIter)\n     sort(_RandomAccessIterator\
    \ __first, _RandomAccessIterator __last)\n     ^\n/usr/include/c++/4.8.2/bits/stl_algo.h:5447:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpuw9kylgr.cpp:21:89:\
    \ note:   candidate expects 2 arguments, 3 provided\n         std::sort(arr.begin(),\
    \ arr.end(), [](long long a, long long b) { return a > b; });\n              \
    \                                                                           ^\n\
    In file included from /usr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : arr) {\n        sum += i;\n     \
    \   count += 1;\n    }\n    long long int max = 0;\n    for (long long int i :\
    \ arr) {\n        if (i == 1) {\n            max = i;\n        }\n    }\n    long\
    \ long int min = 0;\n    for (long long int i : arr) {\n        if (i == 0) {\n\
    \            min = i;\n        }\n    }\n    long long int mid = sum / 2;\n  \
    \  long long int mid2 = sum / 2;\n    long long int mid3 = sum / 2;\n    long\
    \ long int mid4 = sum / 2;\n    long long int mid5 = sum / 2;\n    long long int\
    \ mid6 = sum / 2;\n    long long int mid7 = sum / 2;\n    long long int mid8 =\
    \ sum / 2;\n    long long int mid9 = sum / 2;\n    long long int mid10 = sum /\
    \ 2;\n    long long int mid11 = sum / 2;\n    long long int mid12 = sum / 2;\n\
    \    long long int mid13 = sum / 2;\n    long long int mid14 = sum / 2;\n    long\
    \ long int mid15 = sum / 2;\n    long long int mid16 = sum / 2;\n    long long\
    \ int mid17 = sum / 2;\n    long long int mid18 = sum / 2;\n    long long int\
    \ mid19 = sum / 2;\n    long long int mid20 = sum / 2;\n    long long int mid21\
    \ = sum / 2;\n    long long int mid22 = sum / 2;\n    long long int mid23 = sum\
    \ / 2;\n    long long int mid24 = sum / 2;\n    long long int mid25 = sum / 2;\n\
    \    long long int mid26 = sum / 2;\n    long long int mid27 = sum / 2;\n    long\
    \ long int mid28 = sum / 2;\n    long long int mid29 = sum / 2;\n    long long\
    \ int mid30 = sum / 2;\n    long long int mid31 = sum / 2;\n    long long int\
    \ mid32 = sum / 2;\n    long long int mid33 = sum / 2;\n    long long int mid34\
    \ = sum / 2;\n    long long int mid35 = sum / 2;\n    long long int mid36 = sum\
    \ / 2;\n    long long int mid37 = sum / 2;\n    long long int mid38 = sum / 2;\n\
    \    long long int mid39 = sum / 2;\n    \n}\nint main() {\n    auto candidate\
    \ = sort_array;\n    assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n    assert(candidate((std::vector<long>({(long)-2, (long)-3, (long)-4,\
    \ (long)-5, (long)-6}))) == (std::vector<long>({(long)-4, (long)-2, (long)-6,\
    \ (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1, (long)0,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1, (long)2,\
    \ (long)4, (long)3})));\n    assert(candidate((std::vector<long>())) == (std::vector<long>()));\n\
    \    assert(candidate((std::vector<long>({(long)2, (long)5, (long)77, (long)4,\
    \ (long)5, (long)3, (long)5, (long)7, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)2,\
    \ (long)2, (long)4, (long)4, (long)3, (long)3, (long)5, (long)5, (long)5, (long)7,\
    \ (long)77})));\n    assert(candidate((std::vector<long>({(long)3, (long)6, (long)44,\
    \ (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32, (long)3, (long)5,\
    \ (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp0wso7z3g.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmp0wso7z3g.cpp:17:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmp0wso7z3g.cpp:22:28: error: range-based 'for' loops are\
    \ not allowed in C++98 mode\n     for (long long int i : arr) {\n            \
    \                ^\n/tmp/tmp0wso7z3g.cpp:28:28: error: range-based 'for' loops\
    \ are not allowed in C++98 mode\n     for (long long int i : arr) {\n        \
    \                    ^\n/tmp/tmp0wso7z3g.cpp: In function 'int main()':\n/tmp/tmp0wso7z3g.cpp:75:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp0wso7z3g.cpp:2:\n/tmp/tmp0wso7z3g.cpp:76:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmp0wso7z3g.cpp:76:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmp0wso7z3g.cpp:76:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmp0wso7z3g.cpp:76:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp0wso7z3g.cpp:76:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// In this Kata, you have\
    \ to sort an array of non-negative integers according to\n// number of ones in\
    \ their binary representation in ascending order.\n// For similar number of ones,\
    \ sort based on decimal value.\n// It must be implemented like this:\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5}))\n// >>> sort_array((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6})))\n// (std::vector<long>({(long)-6,\
    \ (long)-5, (long)-4, (long)-3, (long)-2}))\n// >>> sort_array((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4})))\n// (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)3, (long)4}))\nstd::vector<long> sort_array(std::vector<long>\
    \ arr) {\n    // Write your code here\n    long long int sum = 0;\n    long long\
    \ int count = 0;\n    for (long long int i : arr) {\n        sum += i;\n     \
    \   count += 1;\n    }\n    long long int temp = sum;\n    long long int temp2\
    \ = count;\n    long long int temp3 = temp;\n    long long int temp4 = temp2;\n\
    \    long long int temp5 = temp3;\n    long long int temp6 = temp4;\n    long\
    \ long int temp7 = temp5;\n    long long int temp8 = temp6;\n    long long int\
    \ temp9 = temp7;\n    long long int temp10 = temp8;\n    long long int temp11\
    \ = temp9;\n    long long int temp12 = temp10;\n    long long int temp13 = temp11;\n\
    \    long long int temp14 = temp12;\n    long long int temp15 = temp13;\n    long\
    \ long int temp16 = temp14;\n    long long int temp17 = temp15;\n    long long\
    \ int temp18 = temp16;\n    long long int temp19 = temp17;\n    long long int\
    \ temp20 = temp18;\n    long long int temp21 = temp19;\n    long long int temp22\
    \ = temp20;\n    long long int temp23 = temp21;\n    long long int temp24 = temp22;\n\
    \    long long int temp25 = temp23;\n    long long int temp26 = temp24;\n    long\
    \ long int temp27 = temp25;\n    long long int temp28 = temp26;\n    long long\
    \ int temp29 = temp27;\n    long long int temp30 = temp28;\n    long long int\
    \ temp31 = temp29;\n    long long int temp32 = temp30;\n    long long int temp33\
    \ = temp31;\n    long long int temp34 = temp32;\n    long long int temp35 = temp33;\n\
    \    long long int temp36 = temp34;\n    long long int temp37 = temp35;\n    long\
    \ long int temp38 = temp36;\n    long long int temp39 = temp37;\n    long long\
    \ int temp40 = temp38;\n    long long int temp41 = temp39;\n    long long int\
    \ temp42 = temp40;\n    long long int temp43 = temp41;\n    long long int temp44\
    \ = temp42;\n    long long int temp45 = temp43;\n    long long int temp46 = temp44;\n\
    \    long long \n}\nint main() {\n    auto candidate = sort_array;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)5, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5})));\n    assert(candidate((std::vector<long>({(long)-2,\
    \ (long)-3, (long)-4, (long)-5, (long)-6}))) == (std::vector<long>({(long)-4,\
    \ (long)-2, (long)-6, (long)-5, (long)-3})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)0, (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)0, (long)1,\
    \ (long)2, (long)4, (long)3})));\n    assert(candidate((std::vector<long>()))\
    \ == (std::vector<long>()));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)5, (long)77, (long)4, (long)5, (long)3, (long)5, (long)7, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)2, (long)4, (long)4, (long)3,\
    \ (long)3, (long)5, (long)5, (long)5, (long)7, (long)77})));\n    assert(candidate((std::vector<long>({(long)3,\
    \ (long)6, (long)44, (long)12, (long)32, (long)5}))) == (std::vector<long>({(long)32,\
    \ (long)3, (long)5, (long)6, (long)12, (long)44})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)8, (long)16, (long)32}))) == (std::vector<long>({(long)2, (long)4,\
    \ (long)8, (long)16, (long)32})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfnc694db.cpp: In function 'std::vector<long int> sort_array(std::vector<long\
    \ int>)':\n/tmp/tmpfnc694db.cpp:17:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : arr) {\n                \
    \            ^\n/tmp/tmpfnc694db.cpp:68:1: error: expected unqualified-id before\
    \ '}' token\n }\n ^\n/tmp/tmpfnc694db.cpp: In function 'int main()':\n/tmp/tmpfnc694db.cpp:70:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = sort_array;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfnc694db.cpp:2:\n/tmp/tmpfnc694db.cpp:71:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5, (long)2,\
    \ (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5})));\n                                        ^\n/tmp/tmpfnc694db.cpp:71:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)5,\
    \ (long)2, (long)3, (long)4}))) == (std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5})));\n                                                    \
    \                                  ^\n/tmp/tmpfnc694db.cpp:71:86: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n/tmp/tmpfnc694db.cpp:71:86: error: no matching function for call to\
    \ 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfnc694db.cpp:71:86:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfnc694db.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vec"
  stdout: ''
