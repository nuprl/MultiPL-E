language: cpp
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if (sum\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcopk_2_2.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpcopk_2_2.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpcopk_2_2.cpp: In function 'int main()':\n/tmp/tmpcopk_2_2.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcopk_2_2.cpp:2:\n/tmp/tmpcopk_2_2.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpcopk_2_2.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpcopk_2_2.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpcopk_2_2.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcopk_2_2.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcopk_2_2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument ded"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum == 0)\
    \ {\n        return false;\n    }\n    long long ans = 0;\n    for (long long\
    \ i : l) {\n        ans += i;\n        if (ans == 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpooi8a72j.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpooi8a72j.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpooi8a72j.cpp:25:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : l) {\n                        ^\n/tmp/tmpooi8a72j.cpp:\
    \ In function 'int main()':\n/tmp/tmpooi8a72j.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = pairs_sum_to_zero;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpooi8a72j.cpp:2:\n/tmp/tmpooi8a72j.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpooi8a72j.cpp:35:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpooi8a72j.cpp:35:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpooi8a72j.cpp:35:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpooi8a72j.cpp:35:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpooi8a72j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    int n = l.size();\n\
    \    if (n == 0)\n        return false;\n    long long sum = 0;\n    for (long\
    \ long i = 0; i < n; i++) {\n        sum += l[i];\n    }\n    if (sum == 0)\n\
    \        return false;\n    long long sum2 = 0;\n    for (long long i = 0; i <\
    \ n; i++) {\n        sum2 += l[i];\n    }\n    if (sum2 == 0)\n        return\
    \ true;\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi0mugwsu.cpp: In function 'int main()':\n/tmp/tmpi0mugwsu.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi0mugwsu.cpp:2:\n/tmp/tmpi0mugwsu.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpi0mugwsu.cpp:36:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpi0mugwsu.cpp:36:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpi0mugwsu.cpp:36:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpi0mugwsu.cpp:36:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpi0mugwsu.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi0mugwsu.cpp:2:\n/tmp/tmpi0mugwsu.cp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    long long int count = 0;\n    for (long long int i : l) {\n      \
    \  sum += i;\n        count += 1;\n    }\n    if (count == 0) {\n        return\
    \ false;\n    }\n    long long int sum2 = 0;\n    for (long long int i : l) {\n\
    \        sum2 += i;\n    }\n    if (sum == sum2) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpg4q5qnty.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpg4q5qnty.cpp:19:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpg4q5qnty.cpp:27:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpg4q5qnty.cpp: In function 'int main()':\n/tmp/tmpg4q5qnty.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpg4q5qnty.cpp:2:\n/tmp/tmpg4q5qnty.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpg4q5qnty.cpp:37:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpg4q5qnty.cpp:37:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpg4q5qnty.cpp:37:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpg4q5qnty.cpp:37:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpg4q5qnty.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    long long\
    \ int count = 0;\n    for (long long int i : l) {\n        if (i == 0) {\n   \
    \         count++;\n        }\n    }\n    if (count == 0) {\n        return false;\n\
    \    }\n    long long int max_sum = sum;\n    for (long long int i : l) {\n  \
    \      if (i != 0) {\n            max_sum -= i;\n        }\n    }\n    if (max_sum\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv9w34enz.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpv9w34enz.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpv9w34enz.cpp:22:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpv9w34enz.cpp:31:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpv9w34enz.cpp: In function 'int main()':\n/tmp/tmpv9w34enz.cpp:42:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv9w34enz.cpp:2:\n/tmp/tmpv9w34enz.cpp:43:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpv9w34enz.cpp:43:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpv9w34enz.cpp:43:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpv9w34enz.cpp:43:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpv9w34enz.cpp:43:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv9w34enz.cpp:2:\n/usr/include/c++/4.8"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    long long\
    \ int count = 0;\n    for (long long int i : l) {\n        if (sum == i) {\n \
    \           count++;\n        }\n    }\n    if (count == 2) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpaqu4_dip.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpaqu4_dip.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpaqu4_dip.cpp:22:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpaqu4_dip.cpp: In function 'int main()':\n/tmp/tmpaqu4_dip.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaqu4_dip.cpp:2:\n/tmp/tmpaqu4_dip.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpaqu4_dip.cpp:34:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpaqu4_dip.cpp:34:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpaqu4_dip.cpp:34:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpaqu4_dip.cpp:34:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpaqu4_dip.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum == 0)\
    \ {\n        return false;\n    }\n    long long ans = 0;\n    for (long long\
    \ i : l) {\n        ans += i;\n        if (ans == 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpooi8a72j.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpooi8a72j.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpooi8a72j.cpp:25:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : l) {\n                        ^\n/tmp/tmpooi8a72j.cpp:\
    \ In function 'int main()':\n/tmp/tmpooi8a72j.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = pairs_sum_to_zero;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpooi8a72j.cpp:2:\n/tmp/tmpooi8a72j.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpooi8a72j.cpp:35:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpooi8a72j.cpp:35:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpooi8a72j.cpp:35:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpooi8a72j.cpp:35:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpooi8a72j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // write your code\
    \ here\n    long long int sum = 0;\n    long long int count = 0;\n    for (long\
    \ long int i : l) {\n        sum += i;\n        count += 1;\n    }\n    if (count\
    \ == 1) {\n        if (sum == 0) {\n            return true;\n        }\n    }\n\
    \    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp3gk8m47f.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmp3gk8m47f.cpp:20:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmp3gk8m47f.cpp: In function 'int main()':\n/tmp/tmp3gk8m47f.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp3gk8m47f.cpp:2:\n/tmp/tmp3gk8m47f.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp3gk8m47f.cpp:33:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp3gk8m47f.cpp:33:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp3gk8m47f.cpp:33:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp3gk8m47f.cpp:33:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp3gk8m47f.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument ded"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if (sum\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcopk_2_2.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpcopk_2_2.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpcopk_2_2.cpp: In function 'int main()':\n/tmp/tmpcopk_2_2.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcopk_2_2.cpp:2:\n/tmp/tmpcopk_2_2.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpcopk_2_2.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpcopk_2_2.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpcopk_2_2.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcopk_2_2.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcopk_2_2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument ded"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if (sum\
    \ == 0)\n        return false;\n    long long int sum2 = 0;\n    for (long long\
    \ int i : l) {\n        sum2 += i;\n        if (sum2 == sum)\n            return\
    \ false;\n    }\n    return true;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphmxuvyob.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmphmxuvyob.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmphmxuvyob.cpp:24:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmphmxuvyob.cpp: In function 'int main()':\n/tmp/tmphmxuvyob.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphmxuvyob.cpp:2:\n/tmp/tmphmxuvyob.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmphmxuvyob.cpp:33:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmphmxuvyob.cpp:33:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphmxuvyob.cpp:33:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmphmxuvyob.cpp:33:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphmxuvyob.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum == 0)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgqwhhzf.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpbgqwhhzf.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpbgqwhhzf.cpp: In function 'int main()':\n/tmp/tmpbgqwhhzf.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgqwhhzf.cpp:2:\n/tmp/tmpbgqwhhzf.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpbgqwhhzf.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpbgqwhhzf.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpbgqwhhzf.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgqwhhzf.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgqwhhzf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    long long int count = 0;\n    for (long long int i : l) {\n      \
    \  sum += i;\n        count += 1;\n    }\n    if (count == 1) {\n        return\
    \ false;\n    }\n    long long int sum2 = 0;\n    for (long long int i : l) {\n\
    \        sum2 += i;\n    }\n    if (sum == sum2) {\n        return true;\n   \
    \ }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpc472g1vc.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpc472g1vc.cpp:19:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpc472g1vc.cpp:27:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpc472g1vc.cpp: In function 'int main()':\n/tmp/tmpc472g1vc.cpp:36:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpc472g1vc.cpp:2:\n/tmp/tmpc472g1vc.cpp:37:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpc472g1vc.cpp:37:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpc472g1vc.cpp:37:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpc472g1vc.cpp:37:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpc472g1vc.cpp:37:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpc472g1vc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum == 0)\
    \ {\n        return false;\n    }\n    long long ans = 0;\n    for (long long\
    \ i : l) {\n        ans += i;\n        if (ans == 0) {\n            return true;\n\
    \        }\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpooi8a72j.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpooi8a72j.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpooi8a72j.cpp:25:24: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (long long i : l) {\n                        ^\n/tmp/tmpooi8a72j.cpp:\
    \ In function 'int main()':\n/tmp/tmpooi8a72j.cpp:34:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = pairs_sum_to_zero;\n          ^\nIn file\
    \ included from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpooi8a72j.cpp:2:\n/tmp/tmpooi8a72j.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpooi8a72j.cpp:35:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpooi8a72j.cpp:35:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpooi8a72j.cpp:35:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpooi8a72j.cpp:35:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpooi8a72j.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \   }\n    if (sum == 0) {\n        return false;\n    }\n    long long count\
    \ = 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n\
    \        if (sum == 0) {\n            count++;\n        }\n    }\n    if (count\
    \ == l.size()) {\n        return true;\n    }\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphy2_7av3.cpp: In function 'int main()':\n/tmp/tmphy2_7av3.cpp:37:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphy2_7av3.cpp:2:\n/tmp/tmphy2_7av3.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmphy2_7av3.cpp:38:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmphy2_7av3.cpp:38:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmphy2_7av3.cpp:38:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmphy2_7av3.cpp:38:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphy2_7av3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphy2_7av3.cpp:2:\n/tmp/tmphy2_7av3.cp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \   }\n    if (sum == 0) {\n        return true;\n    }\n    return false;\n}\n\
    int main() {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5qvrf3vw.cpp: In function 'int main()':\n/tmp/tmp5qvrf3vw.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5qvrf3vw.cpp:2:\n/tmp/tmp5qvrf3vw.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmp5qvrf3vw.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmp5qvrf3vw.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmp5qvrf3vw.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp5qvrf3vw.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp5qvrf3vw.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5qvrf3vw.cpp:2:\n/tmp/tmp5qvrf3vw.cp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i = 0; i < l.size(); i++) {\n        sum += l[i];\n \
    \   }\n    if (sum == 0)\n        return true;\n    return false;\n}\nint main()\
    \ {\n    auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp5suq58y.cpp: In function 'int main()':\n/tmp/tmpp5suq58y.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp5suq58y.cpp:2:\n/tmp/tmpp5suq58y.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpp5suq58y.cpp:27:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpp5suq58y.cpp:27:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpp5suq58y.cpp:27:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpp5suq58y.cpp:27:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpp5suq58y.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp5suq58y.cpp:2:\n/tmp/tmpp5suq58y.cp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long int sum\
    \ = 0;\n    for (long long int i : l) {\n        sum += i;\n    }\n    if (sum\
    \ == 0) {\n        return true;\n    }\n    return false;\n}\nint main() {\n \
    \   auto candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcopk_2_2.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpcopk_2_2.cpp:18:28: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long int i : l) {\n                  \
    \          ^\n/tmp/tmpcopk_2_2.cpp: In function 'int main()':\n/tmp/tmpcopk_2_2.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpcopk_2_2.cpp:2:\n/tmp/tmpcopk_2_2.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpcopk_2_2.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpcopk_2_2.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpcopk_2_2.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpcopk_2_2.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpcopk_2_2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument ded"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum == 0)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgqwhhzf.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpbgqwhhzf.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpbgqwhhzf.cpp: In function 'int main()':\n/tmp/tmpbgqwhhzf.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgqwhhzf.cpp:2:\n/tmp/tmpbgqwhhzf.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpbgqwhhzf.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpbgqwhhzf.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpbgqwhhzf.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgqwhhzf.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgqwhhzf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/s"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    // Write your code\
    \ here.\n    long long sum = 0;\n    long long count = 0;\n    for (long long\
    \ i = 0; i < l.size(); i++) {\n        sum += l[i];\n        if (sum == 0) {\n\
    \            count++;\n        }\n    }\n    if (count == 2) {\n        return\
    \ true;\n    }\n    return false;\n}\nint main() {\n    auto candidate = pairs_sum_to_zero;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)3, (long)5, (long)0})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)1, (long)3, (long)-2,\
    \ (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwvlzjv6f.cpp: In function 'int main()':\n/tmp/tmpwvlzjv6f.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwvlzjv6f.cpp:2:\n/tmp/tmpwvlzjv6f.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpwvlzjv6f.cpp:33:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpwvlzjv6f.cpp:33:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpwvlzjv6f.cpp:33:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpwvlzjv6f.cpp:33:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpwvlzjv6f.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwvlzjv6f.cpp:2:\n/tmp/tmpwvlzjv6f.cp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// pairs_sum_to_zero takes\
    \ a list of integers as an input.\n// it returns True if there are two distinct\
    \ elements in the list that\n// sum to zero, and False otherwise.\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7})))\n// (false)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7})))\n// (true)\n// >>> pairs_sum_to_zero((std::vector<long>({(long)1})))\n\
    // (false)\nbool pairs_sum_to_zero(std::vector<long> l) {\n    long long sum =\
    \ 0;\n    for (long long i : l) {\n        sum += i;\n    }\n    if (sum == 0)\
    \ {\n        return true;\n    }\n    return false;\n}\nint main() {\n    auto\
    \ candidate = pairs_sum_to_zero;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)5, (long)0}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)3, (long)-2, (long)1}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)7}))) == (false));\n    assert(candidate((std::vector<long>({(long)2,\
    \ (long)4, (long)-5, (long)3, (long)5, (long)7}))) == (true));\n    assert(candidate((std::vector<long>({(long)1})))\
    \ == (false));\n    assert(candidate((std::vector<long>({(long)-3, (long)9, (long)-1,\
    \ (long)3, (long)2, (long)30}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)3, (long)2, (long)31}))) == (true));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)30}))) == (false));\n    assert(candidate((std::vector<long>({(long)-3,\
    \ (long)9, (long)-1, (long)4, (long)2, (long)31}))) == (false));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbgqwhhzf.cpp: In function 'bool pairs_sum_to_zero(std::vector<long\
    \ int>)':\n/tmp/tmpbgqwhhzf.cpp:18:24: error: range-based 'for' loops are not\
    \ allowed in C++98 mode\n     for (long long i : l) {\n                      \
    \  ^\n/tmp/tmpbgqwhhzf.cpp: In function 'int main()':\n/tmp/tmpbgqwhhzf.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = pairs_sum_to_zero;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbgqwhhzf.cpp:2:\n/tmp/tmpbgqwhhzf.cpp:28:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3, (long)5,\
    \ (long)0}))) == (false));\n                                        ^\n/tmp/tmpbgqwhhzf.cpp:28:77:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)3,\
    \ (long)5, (long)0}))) == (false));\n                                        \
    \                                     ^\n/tmp/tmpbgqwhhzf.cpp:28:77: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n/tmp/tmpbgqwhhzf.cpp:28:77: error: no matching function for call\
    \ to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbgqwhhzf.cpp:28:77:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpbgqwhhzf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/s"
  stdout: ''
