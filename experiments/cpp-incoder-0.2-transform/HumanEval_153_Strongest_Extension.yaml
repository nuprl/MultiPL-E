name: HumanEval_153_Strongest_Extension
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// You will be given the name\
  \ of a class (a string) and a list of extensions.\n// The extensions are to be used\
  \ to load additional classes to the class. The\n// strength of the extension is\
  \ as follows: Let CAP be the number of the uppercase\n// letters in the extension's\
  \ name, and let SM be the number of lowercase letters \n// in the extension's name,\
  \ the strength is given by the fraction CAP - SM. \n// You should find the strongest\
  \ extension and return a string in this \n// format: ClassName.StrongestExtensionName.\n\
  // If there are two or more extensions with the same strength, you should\n// choose\
  \ the one that comes first in the list.\n// For example, if you are given \"Slices\"\
  \ as the class and a list of the\n// extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed']\
  \ then you should\n// return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the\
  \ strongest extension \n// (its strength is -1).\n// Example:\n// >>> Strongest_Extension((\"\
  my_class\"), (std::vector<std::string>({(std::string)\"AA\", (std::string)\"Be\"\
  , (std::string)\"CC\"})))\n// (\"my_class.AA\")\nstd::string Strongest_Extension(std::string\
  \ class_name, std::vector<std::string> extensions) {\n"
tests: "}\nint main() {\n    auto candidate = Strongest_Extension;\n    assert(candidate((\"\
  Watashi\"), (std::vector<std::string>({(std::string)\"tEN\", (std::string)\"niNE\"\
  , (std::string)\"eIGHt8OKe\"}))) == (\"Watashi.eIGHt8OKe\"));\n    assert(candidate((\"\
  Boku123\"), (std::vector<std::string>({(std::string)\"nani\", (std::string)\"NazeDa\"\
  , (std::string)\"YEs.WeCaNe\", (std::string)\"32145tggg\"}))) == (\"Boku123.YEs.WeCaNe\"\
  ));\n    assert(candidate((\"__YESIMHERE\"), (std::vector<std::string>({(std::string)\"\
  t\", (std::string)\"eMptY\", (std::string)\"nothing\", (std::string)\"zeR00\", (std::string)\"\
  NuLl__\", (std::string)\"123NoooneB321\"}))) == (\"__YESIMHERE.NuLl__\"));\n   \
  \ assert(candidate((\"K\"), (std::vector<std::string>({(std::string)\"Ta\", (std::string)\"\
  TAR\", (std::string)\"t234An\", (std::string)\"cosSo\"}))) == (\"K.TAR\"));\n  \
  \  assert(candidate((\"__HAHA\"), (std::vector<std::string>({(std::string)\"Tab\"\
  , (std::string)\"123\", (std::string)\"781345\", (std::string)\"-_-\"}))) == (\"\
  __HAHA.123\"));\n    assert(candidate((\"YameRore\"), (std::vector<std::string>({(std::string)\"\
  HhAas\", (std::string)\"okIWILL123\", (std::string)\"WorkOut\", (std::string)\"\
  Fails\", (std::string)\"-_-\"}))) == (\"YameRore.okIWILL123\"));\n    assert(candidate((\"\
  finNNalLLly\"), (std::vector<std::string>({(std::string)\"Die\", (std::string)\"\
  NowW\", (std::string)\"Wow\", (std::string)\"WoW\"}))) == (\"finNNalLLly.WoW\"));\n\
  \    assert(candidate((\"_\"), (std::vector<std::string>({(std::string)\"Bb\", (std::string)\"\
  91245\"}))) == (\"_.Bb\"));\n    assert(candidate((\"Sp\"), (std::vector<std::string>({(std::string)\"\
  671235\", (std::string)\"Bb\"}))) == (\"Sp.671235\"));\n}\n"
completions: ["    // Write your code here\n    std::string strongest_extension =\
    \ \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto &ext : extensions){\n\
    \        cap += ext.length();\n        sm += ext.length()-1;\n    }\n    float\
    \ strength = cap - sm;\n    for(auto &ext : extensions){\n        if(ext.length()\
    \ == cap){\n            strongest_extension += class_name + \".\" + ext;\n   \
    \     }\n        else if(ext.length() == sm){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() > cap && ext.length() > sm){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() < cap && ext.length() < sm){\n            strongest_extension\
    \ += class_name + ext.substr(0,1) + \".\" + ext.substr(1);\n        }\n      \
    \  else if(ext.length() == cap && ext.length() < sm){\n            strongest_extension\
    \ += class_name + \".\" + ext;\n        }\n        else if(ext.length() == sm\
    \ && ext.length() > cap){\n            strongest_extension += class_name + ext.substr(0,1)\
    \ + \".\" + ext.substr(1);\n        }\n        else if(ext.length() == sm && ext.length()\
    \ < cap){\n            strongest_extension += class_name + ext.substr(0,1) + \"\
    .\" + ext.substr(1);\n        }\n        else if(ext.length() > cap && ext.length()\
    \ == sm){\n            strongest_extension += class_name + ext.substr(0,1) + \"\
    .\" + ext.substr(1);\n        }\n        else if(ext.length() < cap && ext.length()\
    \ == sm){\n            strongest_extension += class_name + ext.substr(0,1) + \"\
    .\" + ext.substr(1);\n        }\n        else if(ext.length() == cap && ext.length()\
    \ > sm){\n            strongest_extension += class_name + ext.substr(0,1) + \"\
    .\" + ext.substr(1);\n        }\n        else if(ext.length() == sm && ext.length()\
    \ == cap){\n            strongest_extension += class_name + ext.substr(0,1) +\
    \ \".\" + ext.substr(1);\n        }\n        else if(ext.length() > cap && ext.length()\
    \ == sm){\n            strongest_extension += class_name + ext.substr(0,1) + \"\
    .\" + ext.substr(1);\n        }\n        else if(ext.length() < cap && ext.length()\
    \ == sm){\n            strongest_extension += class_name + ext.substr(0,1) + \"\
    .\" + ext.substr(1);\n        }\n        else if(ext.length() == sm && ext.length()\
    \ > cap){\n            strongest_extension += class_name + ext.substr(0,1) + \"\
    .\" + ext.substr(1);\n        }\n        else if(ext.length() == sm ", "    //\
    \ Your code here\n    \n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for(auto &extension : extensions) {\n        cap\
    \ += (extension.at(0) - 'A');\n        sm += (extension.at(1) - 'a');\n    }\n\
    \    \n    double strength = cap - sm;\n    \n    for(auto &extension : extensions)\
    \ {\n        if(strength == (extension.at(0) - 'A') - (extension.at(1) - 'a'))\
    \ {\n            strongest_extension = class_name + \".\" + extension;\n     \
    \       break;\n        }\n    }\n    \n    return strongest_extension;", "  \
    \  // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    \n    for (auto &extension : extensions) {\n        auto cap = extension.find_first_of('A');\n\
    \        auto sm = extension.find_first_of('l');\n        auto strength = cap\
    \ - sm;\n        if (strength > 0) {\n            strongest_extension += class_name\
    \ + \".\" + extension;\n        }\n    }\n    \n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    \n    for (auto ext : extensions) {\n       \
    \ cap += ext.length();\n        sm += ext.length();\n    }\n    \n    float strength\
    \ = cap - sm;\n    \n    for (auto ext : extensions) {\n        if (ext.length()\
    \ == strength) {\n            strongest_extension = class_name + \".\" + ext;\n\
    \        }\n    }\n    \n    return strongest_extension;", "    // Write your\
    \ code here\n    \n    std::string strongest_extension = \"\";\n    \n    for(int\
    \ i = 0; i < extensions.size(); i++) {\n        std::string extension = extensions[i];\n\
    \        \n        int cap = extension.find_first_of('A');\n        int sm = extension.find_first_of('l');\n\
    \        \n        int strength = cap - sm;\n        \n        if(strength > 0)\
    \ {\n            strongest_extension += class_name + \".\" + extension;\n    \
    \    }\n    }\n    \n    return strongest_extension;", "    // Your code here\n\
    \    std::string strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n\
    \    for (auto &ext : extensions) {\n        cap += ext.length();\n        sm\
    \ += ext.length();\n    }\n    cap = cap - sm;\n    if (cap > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &ext : extensions)\
    \ {\n        if (ext.length() < strongest_extension.length()) {\n            strongest_extension\
    \ = class_name + \".\" + ext;\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    std::string strongest_extension = \"\";\n    int cap\
    \ = 0;\n    int sm = 0;\n    for (auto &extension : extensions) {\n        cap\
    \ += (extension.at(0) - 'A');\n        sm += (extension.at(1) - 'a');\n    }\n\
    \    float strength = cap - sm;\n    if (strength > 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[0];\n    }\n    for (auto &extension : extensions)\
    \ {\n        if (strength > 0) {\n            if (extension.at(0) - 'A' > strongest_extension.at(0)\
    \ - 'A') {\n                strongest_extension = class_name + \".\" + extension;\n\
    \            }\n        }\n    }\n    return strongest_extension;", "    // Write\
    \ your code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n\
    \    int sm = 0;\n    for (auto &ext : extensions) {\n        cap += ext.length();\n\
    \        sm += ext.length();\n    }\n    float strength = cap - sm;\n    if (strength\
    \ > 0) {\n        strongest_extension = class_name + \".\" + extensions[0];\n\
    \    }\n    for (int i = 1; i < extensions.size(); i++) {\n        if (strength\
    \ > 0) {\n            strongest_extension = class_name + \".\" + extensions[i];\n\
    \        }\n    }\n    return strongest_extension;", "    // Write your code here\n\
    \    \n    std::string extension_strength;\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    \n    for (auto extension : extensions) {\n        cap_counter++;\n\
    \        auto cap = extension.substr(0, 1);\n        sm_counter++;\n        auto\
    \ sm = extension.substr(1, 1);\n        \n        if (cap == sm) {\n         \
    \   extension_strength += extension;\n        }\n    }\n    \n    if (cap_counter\
    \ > sm_counter) {\n        extension_strength += class_name;\n    }\n    \n  \
    \  return extension_strength;", "    // Your code here\n    \n    std::string\
    \ strongest_extension = \"\";\n    int cap = 0;\n    int sm = 0;\n    for(auto\
    \ &ext : extensions) {\n        cap += ext.length();\n        sm += ext.length()\
    \ - ext.length();\n    }\n    \n    float strength = cap - sm;\n    \n    for(auto\
    \ &ext : extensions) {\n        if(ext.length() == strongest_extension.length())\
    \ {\n            if(strength > ext.length() - ext.length()) {\n              \
    \  strongest_extension = ext;\n            }\n        }\n    }\n    \n    return\
    \ class_name + \".\" + strongest_extension;", "    // Your code here\n    \n \
    \   std::string strongest_extension = \"\";\n    int cap_counter = 0;\n    int\
    \ sm_counter = 0;\n    \n    for (auto extension : extensions) {\n        cap_counter\
    \ += extension.at(0) - 'A';\n        sm_counter += extension.at(1) - 'a';\n  \
    \  }\n    \n    if (cap_counter > sm_counter) {\n        strongest_extension =\
    \ class_name + extensions[0];\n    } else {\n        strongest_extension = class_name\
    \ + extensions[1];\n    }\n    \n    return strongest_extension;", "    int cap_num\
    \ = 0, sm_num = 0;\n    for (auto &ext : extensions) {\n        cap_num += ext.length();\n\
    \        sm_num += ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n\
    \    }\n    double strength = cap_num - sm_num;\n    double max_strength = -1;\n\
    \    for (auto &ext : extensions) {\n        double ext_strength = ext.length()\
    \ - ext.find_first_not_of(ext.begin(), ext.end());\n        if (ext_strength >\
    \ max_strength) {\n            max_strength = ext_strength;\n        }\n    }\n\
    \    if (max_strength == -1) {\n        return class_name;\n    }\n    double\
    \ strength_diff = strength - max_strength;\n    double max_strength_diff = -1;\n\
    \    for (auto &ext : extensions) {\n        double ext_strength = ext.length()\
    \ - ext.find_first_not_of(ext.begin(), ext.end());\n        if (ext_strength >\
    \ max_strength) {\n            max_strength = ext_strength;\n        }\n     \
    \   double ext_diff = ext_strength - max_strength;\n        if (ext_diff > max_strength_diff)\
    \ {\n            max_strength_diff = ext_diff;\n        }\n    }\n    if (max_strength_diff\
    \ == -1) {\n        return class_name;\n    }\n    double strength_diff = strength\
    \ - max_strength;\n    double max_strength_diff = -1;\n    for (auto &ext : extensions)\
    \ {\n        double ext_strength = ext.length() - ext.find_first_not_of(ext.begin(),\
    \ ext.end());\n        if (ext_strength > max_strength) {\n            max_strength\
    \ = ext_strength;\n        }\n        double ext_diff = ext_strength - max_strength;\n\
    \        if (ext_diff > max_strength_diff) {\n            max_strength_diff =\
    \ ext_diff;\n        }\n    }\n    if (max_strength_diff == -1) {\n        return\
    \ class_name;\n    }\n    double strength_diff = strength - max_strength;\n  \
    \  double max_strength_diff = -1;\n    for (auto &ext : extensions) {\n      \
    \  double ext_strength = ext.length() - ext.find_first_not_of(ext.begin(), ext.end());\n\
    \        if (ext_strength > max_strength) {\n            max_strength = ext_strength;\n\
    \        }\n        double ext_diff = ext_strength - max_strength;\n        if\
    \ (ext_diff > max_strength_diff) {\n            max_strength_diff = ext_diff;\n\
    \        }\n    }\n    if (max_strength_diff == -1) {\n        return class_name;\n\
    \    }\n    double strength_diff = strength - max_strength;\n    double max_strength_diff\
    \ = -1;\n    for (auto &ext : extensions) {\n        double ext_strength = ext.length()\
    \ - ext.find_first_not_of(ext.begin(), ext.end());\n        if (ext_strength >\
    \ max_strength) {\n            max_", "    int cap_extensions = 0, sm_extensions\
    \ = 0;\n    for (auto ext : extensions) {\n        if (ext.at(0) == ext.at(1).toupper())\
    \ {\n            cap_extensions++;\n        } else {\n            sm_extensions++;\n\
    \        }\n    }\n    double strength = cap_extensions - sm_extensions;\n   \
    \ if (strength > 0) {\n        return class_name + \".\" + extensions[extensions.size()\
    \ - 1].substr(0, extensions[extensions.size() - 1].find_first_of(\"0123456789\"\
    )) + \".\" + extensions[extensions.size() - 1].substr(extensions[extensions.size()\
    \ - 1].find_first_of(\"0123456789\") + 1);\n    }\n    return class_name + \"\
    .\" + extensions[extensions.size() - 1];", "    int cap_letters = 0, sm_letters\
    \ = 0;\n    for (auto &ext : extensions) {\n        cap_letters += ext.length();\n\
    \        sm_letters += ext.length();\n    }\n    int strength = cap_letters -\
    \ sm_letters;\n    for (auto &ext : extensions) {\n        if (ext.length() ==\
    \ strength) {\n            return class_name + \".\" + ext;\n        }\n    }\n\
    \    return class_name;", "    int cap_num = 0, sm_num = 0;\n    for (auto &ext\
    \ : extensions) {\n        if (ext.size() >= cap_num && ext.size() <= sm_num)\
    \ {\n            cap_num = ext.size();\n            sm_num = ext.size();\n   \
    \     }\n        else if (ext.size() > sm_num) {\n            sm_num = ext.size();\n\
    \        }\n    }\n    double cap_frac = cap_num - sm_num;\n    double sm_frac\
    \ = cap_num - sm_num;\n    if (cap_frac > sm_frac) {\n        cap_frac = sm_frac;\n\
    \    }\n    std::string strongest_ext;\n    if (cap_frac > 0.5) {\n        strongest_ext\
    \ = class_name + \".\" + extensions[0];\n    }\n    else if (cap_frac > 0.25)\
    \ {\n        strongest_ext = class_name + \".\" + extensions[1];\n    }\n    else\
    \ if (cap_frac > 0.10) {\n        strongest_ext = class_name + \".\" + extensions[2];\n\
    \    }\n    else {\n        strongest_ext = class_name + \".\" + extensions[3];\n\
    \    }\n    return strongest_ext;", "    // Write your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_extension = 0;\n    int sml_extension\
    \ = 0;\n    for (auto extension : extensions) {\n        cap_extension = std::count_if(extension.begin(),\
    \ extension.end(), [](char c) {return std::toupper(c) == c; });\n        sml_extension\
    \ = std::count_if(extension.begin(), extension.end(), [](char c) {return std::tolower(c)\
    \ == c; });\n        if (cap_extension - sml_extension > 0) {\n            strongest_extension\
    \ = class_name + \".\" + extension;\n        }\n    }\n    return strongest_extension;",
  "    // Your code here\n    \n    std::string strongest_extension = \"\";\n    int\
    \ cap = 0;\n    int sm = 0;\n    \n    for (auto &ext : extensions) {\n      \
    \  cap += ext.length();\n        sm += ext.length();\n    }\n    \n    int strength\
    \ = cap - sm;\n    \n    if (strength > 0) {\n        for (auto &ext : extensions)\
    \ {\n            if (ext.length() == strength) {\n                strongest_extension\
    \ = class_name + ext;\n                break;\n            }\n        }\n    }\n\
    \    \n    return strongest_extension;", "    // Your code here\n    std::string\
    \ strongest_extension = \"\";\n    int cap_counter = 0;\n    int sm_counter =\
    \ 0;\n    for(auto extension : extensions) {\n        if(extension.at(0) == class_name[0])\
    \ {\n            cap_counter++;\n        }\n        if(extension.at(1) == class_name[1])\
    \ {\n            sm_counter++;\n        }\n    }\n    float strength = cap_counter\
    \ - sm_counter;\n    if(strength > 0) {\n        strongest_extension = class_name\
    \ + \".\" + extensions[0];\n    }\n    else if(strength < 0) {\n        strongest_extension\
    \ = class_name + \".\" + extensions[extensions.size()-1];\n    }\n    return strongest_extension;",
  "    // Write your code here\n    \n    std::string strongest_extension = \"\";\n\
    \    int cap = 0;\n    int sm = 0;\n    \n    for (auto ext : extensions) {\n\
    \        cap += ext.length();\n        sm += ext.length();\n    }\n    \n    float\
    \ strength = cap - sm;\n    \n    for (auto ext : extensions) {\n        if (ext.length()\
    \ == strongest_extension.length()) {\n            if (ext.length() < strongest_extension.length())\
    \ {\n                strongest_extension = ext;\n            }\n        }\n  \
    \  }\n    \n    return class_name + \".\" + strongest_extension;", "    // Your\
    \ code here\n    std::string strongest_extension = \"\";\n    int cap = 0;\n \
    \   int sm = 0;\n    for (int i = 0; i < extensions.size(); i++) {\n        cap\
    \ = cap + toupper(extensions[i][0]) - toupper(extensions[i][0]);\n        sm =\
    \ sm + tolower(extensions[i][0]) - tolower(extensions[i][0]);\n    }\n    float\
    \ strength = cap - sm;\n    for (int i = 0; i < extensions.size(); i++) {\n  \
    \      if (strength == cap - toupper(extensions[i][0]) - toupper(extensions[i][0]))\
    \ {\n            strongest_extension = class_name + \".\" + extensions[i];\n \
    \           break;\n        }\n    }\n    return strongest_extension;"]
stop_tokens:
- "\n}"
