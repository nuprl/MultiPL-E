language: cpp
name: HumanEval_161_solve
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a'\
    \ && s[i]<='z'){\n            res+=toupper(s[i]);\n        }\n        else if(s[i]>='A'\
    \ && s[i]<='Z'){\n            res+=tolower(s[i]);\n        }\n        else{\n\
    \            res+=s[i];\n        }\n    }\n    return res;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpwcs75vdb.cpp: In function 'int main()':\n/tmp/tmpwcs75vdb.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = solve;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpwcs75vdb.cpp:2:\n/tmp/tmpwcs75vdb.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (auto &c : s) {\n        if (c == 'a' || c\
    \ == 'A') {\n            ans = ans.replace(c, c == 'a' ? 'A' : 'a');\n       \
    \ }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n  \
    \  assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpigj4lfuv.cpp: In function 'std::string solve(std::string)':\n/tmp/tmpigj4lfuv.cpp:17:16:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \ for (auto &c : s) {\n                ^\n/tmp/tmpigj4lfuv.cpp:17:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : s) {\n      \
    \              ^\n/tmp/tmpigj4lfuv.cpp:19:54: error: no matching function for\
    \ call to 'std::basic_string<char>::replace(int&, char)'\n             ans = ans.replace(c,\
    \ c == 'a' ? 'A' : 'a');\n                                                   \
    \   ^\n/tmp/tmpigj4lfuv.cpp:19:54: note: candidates are:\nIn file included from\
    \ /usr/include/c++/4.8.2/string:52:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpigj4lfuv.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1429:7:\
    \ note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\n       replace(size_type __pos, size_type __n, const basic_string&\
    \ __str)\n       ^\n/usr/include/c++/4.8.2/bits/basic_string.h:1429:7: note: \
    \  candidate expects 3 arguments, 2 provided\n/usr/include/c++/4.8.2/bits/basic_string.h:1451:7:\
    \ note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::basic_string<_CharT, _Traits, _Alloc>::size_type, std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::basic_st"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpinzlqzuz.cpp: In function 'std::string solve(std::string)':\n/tmp/tmpinzlqzuz.cpp:19:62:\
    \ error: no matching function for call to 'toupper(std::basic_string<char>)'\n\
    \             ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n                                                        \
    \      ^\n/tmp/tmpinzlqzuz.cpp:19:62: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/cctype:42:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpinzlqzuz.cpp:2:\n/usr/include/ctype.h:128:12: note:\
    \ int toupper(int)\n extern int toupper (int __c) __THROW;\n            ^\n/usr/include/ctype.h:128:12:\
    \ note:   no known conversion for argument 1 from 'std::basic_string<char>' to\
    \ 'int'\nIn file included from /usr/include/c++/4.8.2/bits/basic_ios.h:37:0,\n\
    \                 from /usr/include/c++/4.8.2/ios:44,\n                 from /usr/include/c++/4.8.2/istream:38,\n\
    \                 from /usr/include/c++/4.8.2/sstream:38,\n                 from\
    \ /usr/include/c++/4.8.2/complex:45,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:66,\n\
    \                 from /tmp/tmpinzlqzuz.cpp:2:\n/usr/include/c++/4.8.2/bits/locale_facets.h:2596:5:\
    \ note: template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\n\
    \     toupper(_CharT __c, const locale& __loc)\n     ^\n/usr/include/c++/4.8.2/bits/locale_facets.h:2596:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpinzlqzuz.cpp:19:62:\
    \ note:   candidate expects 2 arguments, 1 provided\n             ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n          \
    \                                                    ^\n/tmp/tmpinzlqzuz.cpp:\
    \ In function 'int main()':\n/tmp/tmpinzlqzuz.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = solve;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \            "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            res+=toupper(s[i]);\n        }\n        else{\n            res+=s[i];\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjso3o9qs.cpp: In function 'int main()':\n/tmp/tmpjso3o9qs.cpp:28:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = solve;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpjso3o9qs.cpp:2:\n/tmp/tmpjso3o9qs.cpp:29:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.replace(i, 1, toupper(s[i]));\n            ans.replace(i,\
    \ 2, tolower(s[i]));\n        } else {\n            ans.replace(i, 1, s[i]);\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = solve;\n\
    \    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\"\
    )) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp_ybxd3eq.cpp: In function 'std::string solve(std::string)':\n/tmp/tmp_ybxd3eq.cpp:19:43:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        ans.replace(i, 1, toupper(s[i]));\n                                 \
    \          ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n    \
    \             from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_ybxd3eq.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1496:7:\
    \ error:   initializing argument 3 of 'std::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::basic_string<_CharT, _Traits, _Alloc>::replace(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]' [-fpermissive]\n       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n       ^\n/tmp/tmp_ybxd3eq.cpp:20:43: error: invalid\
    \ conversion from 'int' to 'const char*' [-fpermissive]\n             ans.replace(i,\
    \ 2, tolower(s[i]));\n                                           ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:52:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_ybxd3eq.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1496:7:\
    \ error:   initializing argument 3 of 'std::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::basic_string<_CharT, _Traits, _Alloc>::replace(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]' [-fpermissive]\n       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(isalpha(s[i])){\n\
    \            char c = toupper(s[i]);\n            s[i] = c;\n            res+=c;\n\
    \        }\n        else{\n            res+=s[i];\n        }\n    }\n    return\
    \ res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2dtdi9jh.cpp: In function 'int main()':\n/tmp/tmp2dtdi9jh.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = solve;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2dtdi9jh.cpp:2:\n/tmp/tmp2dtdi9jh.cpp:31:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (auto &c : s) {\n        if (std::isalpha(c))\
    \ {\n            ans = ans.replace(c, std::toupper(c));\n        } else {\n  \
    \          ans = ans.replace(c, std::tolower(c));\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgbdu97af.cpp: In function 'std::string solve(std::string)':\n/tmp/tmpgbdu97af.cpp:17:16:\
    \ error: ISO C++ forbids declaration of 'c' with no type [-fpermissive]\n    \
    \ for (auto &c : s) {\n                ^\n/tmp/tmpgbdu97af.cpp:17:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &c : s) {\n      \
    \              ^\n/tmp/tmpgbdu97af.cpp:19:49: error: no matching function for\
    \ call to 'std::basic_string<char>::replace(int&, int)'\n             ans = ans.replace(c,\
    \ std::toupper(c));\n                                                 ^\n/tmp/tmpgbdu97af.cpp:19:49:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpgbdu97af.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1429:7:\
    \ note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::basic_string<_CharT,\
    \ _Traits, _Alloc>&) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]\n       replace(size_type __pos, size_type __n, const basic_string&\
    \ __str)\n       ^\n/usr/include/c++/4.8.2/bits/basic_string.h:1429:7: note: \
    \  candidate expects 3 arguments, 2 provided\n/usr/include/c++/4.8.2/bits/basic_string.h:1451:7:\
    \ note: std::basic_string<_CharT, _Traits, _Alloc>& std::basic_string<_CharT,\
    \ _Traits, _Alloc>::replace(std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ std::basic_string<_CharT, _Traits, _Alloc>::size_type, const std::basic_string<_CharT,\
    \ _Traits, _Alloc>&, std::basic_string<_CharT, _Traits, _Alloc>::size_type, std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>; std::basic_string<_CharT"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            char c = toupper(s[i]);\n            s[i] = c;\n            c\
    \ = tolower(c);\n            s[i] = c;\n        }\n    }\n    res.assign(s);\n\
    \    return res;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jbufnbe.cpp: In function 'int main()':\n/tmp/tmp5jbufnbe.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = solve;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5jbufnbe.cpp:2:\n/tmp/tmp5jbufnbe.cpp:30:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n     \
    \   if (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp10wb9tju.cpp: In function 'std::string solve(std::string)':\n/tmp/tmp10wb9tju.cpp:19:62:\
    \ error: no matching function for call to 'toupper(std::basic_string<char>)'\n\
    \             ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n                                                        \
    \      ^\n/tmp/tmp10wb9tju.cpp:19:62: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/cctype:42:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp10wb9tju.cpp:2:\n/usr/include/ctype.h:128:12: note:\
    \ int toupper(int)\n extern int toupper (int __c) __THROW;\n            ^\n/usr/include/ctype.h:128:12:\
    \ note:   no known conversion for argument 1 from 'std::basic_string<char>' to\
    \ 'int'\nIn file included from /usr/include/c++/4.8.2/bits/basic_ios.h:37:0,\n\
    \                 from /usr/include/c++/4.8.2/ios:44,\n                 from /usr/include/c++/4.8.2/istream:38,\n\
    \                 from /usr/include/c++/4.8.2/sstream:38,\n                 from\
    \ /usr/include/c++/4.8.2/complex:45,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:66,\n\
    \                 from /tmp/tmp10wb9tju.cpp:2:\n/usr/include/c++/4.8.2/bits/locale_facets.h:2596:5:\
    \ note: template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\n\
    \     toupper(_CharT __c, const locale& __loc)\n     ^\n/usr/include/c++/4.8.2/bits/locale_facets.h:2596:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp10wb9tju.cpp:19:62:\
    \ note:   candidate expects 2 arguments, 1 provided\n             ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n          \
    \                                                    ^\n/tmp/tmp10wb9tju.cpp:\
    \ In function 'int main()':\n/tmp/tmp10wb9tju.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = solve;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \            "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (auto &i : s) {\n        if (isalpha(i)) {\n\
    \            ans = ans.replace(i.tolower(), i.toupper());\n        } else {\n\
    \            ans = ans.replace(i.toupper(), i.tolower());\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_7j7p_3_.cpp: In function 'std::string solve(std::string)':\n/tmp/tmp_7j7p_3_.cpp:17:16:\
    \ error: ISO C++ forbids declaration of 'i' with no type [-fpermissive]\n    \
    \ for (auto &i : s) {\n                ^\n/tmp/tmp_7j7p_3_.cpp:17:20: error: range-based\
    \ 'for' loops are not allowed in C++98 mode\n     for (auto &i : s) {\n      \
    \              ^\n/tmp/tmp_7j7p_3_.cpp:19:33: error: request for member 'tolower'\
    \ in 'i', which is of non-class type 'int'\n             ans = ans.replace(i.tolower(),\
    \ i.toupper());\n                                 ^\n/tmp/tmp_7j7p_3_.cpp:19:46:\
    \ error: request for member 'toupper' in 'i', which is of non-class type 'int'\n\
    \             ans = ans.replace(i.tolower(), i.toupper());\n                 \
    \                             ^\n/tmp/tmp_7j7p_3_.cpp:21:33: error: request for\
    \ member 'toupper' in 'i', which is of non-class type 'int'\n             ans\
    \ = ans.replace(i.toupper(), i.tolower());\n                                 ^\n\
    /tmp/tmp_7j7p_3_.cpp:21:46: error: request for member 'tolower' in 'i', which\
    \ is of non-class type 'int'\n             ans = ans.replace(i.toupper(), i.tolower());\n\
    \                                              ^\n/tmp/tmp_7j7p_3_.cpp: In function\
    \ 'int main()':\n/tmp/tmp_7j7p_3_.cpp:27:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = solve;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_7j7p_3_.cpp:2:\n/tmp/tmp_7j7p_3_.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] == 'a' || s[i] == 'A') {\n            ans[i] = 'A';\n        } else if\
    \ (s[i] == 'b' || s[i] == 'B') {\n            ans[i] = 'B';\n        } else if\
    \ (s[i] == 'c' || s[i] == 'C') {\n            ans[i] = 'C';\n        } else if\
    \ (s[i] == 'd' || s[i] == 'D') {\n            ans[i] = 'D';\n        } else if\
    \ (s[i] == 'e' || s[i] == 'E') {\n            ans[i] = 'E';\n        } else if\
    \ (s[i] == 'f' || s[i] == 'F') {\n            ans[i] = 'F';\n        } else if\
    \ (s[i] == 'g' || s[i] == 'G') {\n            ans[i] = 'G';\n        } else if\
    \ (s[i] == 'h' || s[i] == 'H') {\n            ans[i] = 'H';\n        } else if\
    \ (s[i] == 'i' || s[i] == 'I') {\n            ans[i] = 'I';\n        } else if\
    \ (s[i] == 'j' || s[i] == 'J') {\n            ans[i] = 'J';\n        } else if\
    \ (s[i] == 'k' || s[i] == 'K') {\n            ans[i] = 'K';\n        } else if\
    \ (s[i] == 'l' || s[i] == 'L') {\n            ans[i] = 'L';\n        } else if\
    \ (s[i] == 'm' || s[i] == 'M') {\n            ans[i] = 'M';\n        } else if\
    \ (s[i] == 'n' || s[i] == 'N') {\n            ans[i] = 'N';\n        } else if\
    \ (s[i] == 'o' || s[i] == 'O') {\n            ans[i] = 'O';\n        } else if\
    \ (s[i] == 'p' || s[i] == 'P') {\n            ans[i] = 'P';\n        } else if\
    \ (s[i] == 'q' || s[i] == 'Q') {\n            ans[i] = 'Q';\n        } else if\
    \ (s[i] == 'r' || s[i] == 'R') {\n            ans[i] = 'R';\n        } else if\
    \ (s[i] == 's' || s[i] == 'S') {\n            ans[i] = 'S';\n        } else if\
    \ (s[i] == 't' || s[i] == 'T') {\n            ans[i] = 'T';\n        } else if\
    \ (s[i] == 'u' || s[i] == 'U') {\n            ans[i] = 'U';\n        } else if\
    \ (s[i] == 'v' || s[i] == 'V') {\n            ans[i] = 'V';\n        } else if\
    \ (s[i] == 'w' || s[i] == 'W') {\n            ans[i] = 'W';\n        } else if\
    \ (s[i] == 'x' || s[i] == 'X') {\n            ans[i] = 'X';\n        } else if\
    \ (s[i] == 'y' || s[i] == 'Y') {\n            ans[i] = 'Y';\n        } else if\
    \ (s[i] == 'z' || s[i] == 'Z') {\n            ans[i] = 'Z';\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"\
    AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n \
    \   assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\"))\
    \ == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"));\n\
    \    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"#$a^D\"\
    )) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp24jl9ysl.cpp: In function 'int main()':\n/tmp/tmp24jl9ysl.cpp:75:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = solve;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp24jl9ysl.cpp:2:\n/tmp/tmp24jl9ysl.cpp:76:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = \"\";\n    for(char c : s) {\n        if(c == 'a' || c\
    \ == 'A') {\n            ans += \"A\";\n        } else if(c == 'b' || c == 'B')\
    \ {\n            ans += \"B\";\n        } else if(c == 'c' || c == 'C') {\n  \
    \          ans += \"C\";\n        } else if(c == 'd' || c == 'D') {\n        \
    \    ans += \"D\";\n        } else if(c == 'e' || c == 'E') {\n            ans\
    \ += \"E\";\n        } else if(c == 'f' || c == 'F') {\n            ans += \"\
    F\";\n        } else if(c == 'g' || c == 'G') {\n            ans += \"G\";\n \
    \       } else if(c == 'h' || c == 'H') {\n            ans += \"H\";\n       \
    \ } else if(c == 'i' || c == 'I') {\n            ans += \"I\";\n        } else\
    \ if(c == 'j' || c == 'J') {\n            ans += \"J\";\n        } else if(c ==\
    \ 'k' || c == 'K') {\n            ans += \"K\";\n        } else if(c == 'l' ||\
    \ c == 'L') {\n            ans += \"L\";\n        } else if(c == 'm' || c == 'M')\
    \ {\n            ans += \"M\";\n        } else if(c == 'n' || c == 'N') {\n  \
    \          ans += \"N\";\n        } else if(c == 'o' || c == 'O') {\n        \
    \    ans += \"O\";\n        } else if(c == 'p' || c == 'P') {\n            ans\
    \ += \"P\";\n        } else if(c == 'q' || c == 'Q') {\n            ans += \"\
    Q\";\n        } else if(c == 'r' || c == 'R') {\n            ans += \"R\";\n \
    \       } else if(c == 's' || c == 'S') {\n            ans += \"S\";\n       \
    \ } else if(c == 't' || c == 'T') {\n            ans += \"T\";\n        } else\
    \ if(c == 'u' || c == 'U') {\n            ans += \"U\";\n        } else if(c ==\
    \ 'v' || c == 'V') {\n            ans += \"V\";\n        } else if(c == 'w' ||\
    \ c == 'W') {\n            ans += \"W\";\n        } else if(c == 'x' || c == 'X')\
    \ {\n            ans += \"X\";\n        } else if(c == 'y' || c == 'Y') {\n  \
    \          ans += \"Y\";\n        } else if(c == 'z' || c == 'Z') {\n        \
    \    ans += \"Z\";\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpbujh6afg.cpp: In function 'std::string solve(std::string)':\n/tmp/tmpbujh6afg.cpp:17:18:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for(char\
    \ c : s) {\n                  ^\n/tmp/tmpbujh6afg.cpp: In function 'int main()':\n\
    /tmp/tmpbujh6afg.cpp:75:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = solve;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbujh6afg.cpp:2:\n/tmp/tmpbujh6afg.cpp:76:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = \"\";\n    for(int i = 0; i < s.size(); i++) {\n      \
    \  if(isalpha(s[i])) {\n            ans += toupper(s[i]);\n        } else {\n\
    \            ans += s[i];\n        }\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n\
    \    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"ab\"\
    )) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpw3_52ljg.cpp: In function 'int main()':\n/tmp/tmpw3_52ljg.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = solve;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw3_52ljg.cpp:2:\n/tmp/tmpw3_52ljg.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8flxc_gw.cpp: In function 'std::string solve(std::string)':\n/tmp/tmp8flxc_gw.cpp:19:62:\
    \ error: no matching function for call to 'toupper(std::basic_string<char>)'\n\
    \             ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n                                                        \
    \      ^\n/tmp/tmp8flxc_gw.cpp:19:62: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/cctype:42:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:35,\n\
    \                 from /tmp/tmp8flxc_gw.cpp:2:\n/usr/include/ctype.h:128:12: note:\
    \ int toupper(int)\n extern int toupper (int __c) __THROW;\n            ^\n/usr/include/ctype.h:128:12:\
    \ note:   no known conversion for argument 1 from 'std::basic_string<char>' to\
    \ 'int'\nIn file included from /usr/include/c++/4.8.2/bits/basic_ios.h:37:0,\n\
    \                 from /usr/include/c++/4.8.2/ios:44,\n                 from /usr/include/c++/4.8.2/istream:38,\n\
    \                 from /usr/include/c++/4.8.2/sstream:38,\n                 from\
    \ /usr/include/c++/4.8.2/complex:45,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:66,\n\
    \                 from /tmp/tmp8flxc_gw.cpp:2:\n/usr/include/c++/4.8.2/bits/locale_facets.h:2596:5:\
    \ note: template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\n\
    \     toupper(_CharT __c, const locale& __loc)\n     ^\n/usr/include/c++/4.8.2/bits/locale_facets.h:2596:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmp8flxc_gw.cpp:19:62:\
    \ note:   candidate expects 2 arguments, 1 provided\n             ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n          \
    \                                                    ^\n/tmp/tmp8flxc_gw.cpp:\
    \ In function 'int main()':\n/tmp/tmp8flxc_gw.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = solve;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \            "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for(int i = 0; i < s.size(); i++) {\n        if(isalpha(s[i]))\
    \ {\n            ans.at(i) = toupper(s[i]);\n        } else {\n            ans.at(i)\
    \ = s[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"));\n    assert(candidate((\"\
    1234\")) == (\"4321\"));\n    assert(candidate((\"ab\")) == (\"AB\"));\n    assert(candidate((\"\
    #a@C\")) == (\"#A@c\"));\n    assert(candidate((\"#AsdfW^45\")) == (\"#aSDFw^45\"\
    ));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"));\n    assert(candidate((\"\
    #$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"#ccc\")) == (\"#CCC\"));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpaw15gayh.cpp: In function 'int main()':\n/tmp/tmpaw15gayh.cpp:27:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = solve;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpaw15gayh.cpp:2:\n/tmp/tmpaw15gayh.cpp:28:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string res;\n    for(int i=0;i<s.size();i++){\n        if(s[i]>='a'\
    \ && s[i]<='z'){\n            res+=std::toupper(s[i]);\n        }\n        else\
    \ if(s[i]>='A' && s[i]<='Z'){\n            res+=std::tolower(s[i]);\n        }\n\
    \        else{\n            res+=s[i];\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp53yfs2jr.cpp: In function 'int main()':\n/tmp/tmp53yfs2jr.cpp:31:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = solve;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp53yfs2jr.cpp:2:\n/tmp/tmp53yfs2jr.cpp:32:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (s[i] == 'a' || s[i] == 'A') {\n            ans = ans.substr(0, i) + ans.substr(i\
    \ + 1, ans.size() - i - 1);\n        }\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) == (\"aSdF\"\
    ));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp34_m4ikk.cpp: In function 'int main()':\n/tmp/tmp34_m4ikk.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = solve;\n    \
    \      ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n       \
    \          from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp34_m4ikk.cpp:2:\n/tmp/tmp34_m4ikk.cpp:26:30: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"AsDf\"\
    )) == (\"aSdF\"));\n                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (int i = 0; i < s.size(); i++) {\n        if\
    \ (isalpha(s[i])) {\n            ans = ans.substr(0, i) + toupper(ans.substr(i,\
    \ 1)) + ans.substr(i + 1, ans.size());\n        }\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\")) ==\
    \ (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpinzlqzuz.cpp: In function 'std::string solve(std::string)':\n/tmp/tmpinzlqzuz.cpp:19:62:\
    \ error: no matching function for call to 'toupper(std::basic_string<char>)'\n\
    \             ans = ans.substr(0, i) + toupper(ans.substr(i, 1)) + ans.substr(i\
    \ + 1, ans.size());\n                                                        \
    \      ^\n/tmp/tmpinzlqzuz.cpp:19:62: note: candidates are:\nIn file included\
    \ from /usr/include/c++/4.8.2/cctype:42:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:35,\n\
    \                 from /tmp/tmpinzlqzuz.cpp:2:\n/usr/include/ctype.h:128:12: note:\
    \ int toupper(int)\n extern int toupper (int __c) __THROW;\n            ^\n/usr/include/ctype.h:128:12:\
    \ note:   no known conversion for argument 1 from 'std::basic_string<char>' to\
    \ 'int'\nIn file included from /usr/include/c++/4.8.2/bits/basic_ios.h:37:0,\n\
    \                 from /usr/include/c++/4.8.2/ios:44,\n                 from /usr/include/c++/4.8.2/istream:38,\n\
    \                 from /usr/include/c++/4.8.2/sstream:38,\n                 from\
    \ /usr/include/c++/4.8.2/complex:45,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:66,\n\
    \                 from /tmp/tmpinzlqzuz.cpp:2:\n/usr/include/c++/4.8.2/bits/locale_facets.h:2596:5:\
    \ note: template<class _CharT> _CharT std::toupper(_CharT, const std::locale&)\n\
    \     toupper(_CharT __c, const locale& __loc)\n     ^\n/usr/include/c++/4.8.2/bits/locale_facets.h:2596:5:\
    \ note:   template argument deduction/substitution failed:\n/tmp/tmpinzlqzuz.cpp:19:62:\
    \ note:   candidate expects 2 arguments, 1 provided\n             ans = ans.substr(0,\
    \ i) + toupper(ans.substr(i, 1)) + ans.substr(i + 1, ans.size());\n          \
    \                                                    ^\n/tmp/tmpinzlqzuz.cpp:\
    \ In function 'int main()':\n/tmp/tmpinzlqzuz.cpp:25:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = solve;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \            "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n     \
    \   if (isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n    \
    \        ans.replace(i, 2, tolower(s[i]));\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19c8grhr.cpp: In function 'std::string solve(std::string)':\n/tmp/tmp19c8grhr.cpp:19:43:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        ans.replace(i, 1, toupper(s[i]));\n                                 \
    \          ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n    \
    \             from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp19c8grhr.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1496:7:\
    \ error:   initializing argument 3 of 'std::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::basic_string<_CharT, _Traits, _Alloc>::replace(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]' [-fpermissive]\n       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n       ^\n/tmp/tmp19c8grhr.cpp:20:43: error: invalid\
    \ conversion from 'int' to 'const char*' [-fpermissive]\n             ans.replace(i,\
    \ 2, tolower(s[i]));\n                                           ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:52:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp19c8grhr.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1496:7:\
    \ error:   initializing argument 3 of 'std::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::basic_string<_CharT, _Traits, _Alloc>::replace(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]' [-fpermissive]\n       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a string\
    \ s.\n// if s[i] is a letter, reverse its case from lower to upper or vise versa,\
    \ \n// otherwise keep it as it is.\n// If the string contains no letters, reverse\
    \ the string.\n// The function should return the resulted string.\n// Examples\n\
    // >>> solve((\"1234\"))\n// (\"4321\")\n// >>> solve((\"ab\"))\n// (\"AB\")\n\
    // >>> solve((\"#a@C\"))\n// (\"#A@c\")\nstd::string solve(std::string s) {\n\
    \    std::string ans = s;\n    for (size_t i = 0; i < s.size(); i++) {\n     \
    \   if (isalpha(s[i])) {\n            ans.replace(i, 1, toupper(s[i]));\n    \
    \        ans.replace(i, 2, tolower(s[i]));\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = solve;\n    assert(candidate((\"AsDf\"))\
    \ == (\"aSdF\"));\n    assert(candidate((\"1234\")) == (\"4321\"));\n    assert(candidate((\"\
    ab\")) == (\"AB\"));\n    assert(candidate((\"#a@C\")) == (\"#A@c\"));\n    assert(candidate((\"\
    #AsdfW^45\")) == (\"#aSDFw^45\"));\n    assert(candidate((\"#6@2\")) == (\"2@6#\"\
    ));\n    assert(candidate((\"#$a^D\")) == (\"#$A^d\"));\n    assert(candidate((\"\
    #ccc\")) == (\"#CCC\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp19c8grhr.cpp: In function 'std::string solve(std::string)':\n/tmp/tmp19c8grhr.cpp:19:43:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        ans.replace(i, 1, toupper(s[i]));\n                                 \
    \          ^\nIn file included from /usr/include/c++/4.8.2/string:52:0,\n    \
    \             from /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp19c8grhr.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1496:7:\
    \ error:   initializing argument 3 of 'std::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::basic_string<_CharT, _Traits, _Alloc>::replace(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]' [-fpermissive]\n       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n       ^\n/tmp/tmp19c8grhr.cpp:20:43: error: invalid\
    \ conversion from 'int' to 'const char*' [-fpermissive]\n             ans.replace(i,\
    \ 2, tolower(s[i]));\n                                           ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:52:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp19c8grhr.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.h:1496:7:\
    \ error:   initializing argument 3 of 'std::basic_string<_CharT, _Traits, _Alloc>&\
    \ std::basic_string<_CharT, _Traits, _Alloc>::replace(std::basic_string<_CharT,\
    \ _Traits, _Alloc>::size_type, std::basic_string<_CharT, _Traits, _Alloc>::size_type,\
    \ const _CharT*) [with _CharT = char; _Traits = std::char_traits<char>; _Alloc\
    \ = std::allocator<char>; std::basic_string<_CharT, _Traits, _Alloc>::size_type\
    \ = long unsigned int]' [-fpermissive]\n       replace(size_type __pos, size_type\
    \ __n1, const _CharT* __s)\n "
  stdout: ''
