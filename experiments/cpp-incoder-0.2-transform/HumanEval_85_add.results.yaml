language: cpp
name: HumanEval_85_add
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    long k = 0;\n    while (i < n) {\n    \
    \    if (i % 2 == 0) {\n            sum += lst[i];\n        }\n        i += 2;\n\
    \    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpetk7_q6r.cpp: In function 'int main()':\n/tmp/tmpetk7_q6r.cpp:22:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpetk7_q6r.cpp:2:\n/tmp/tmpetk7_q6r.cpp:23:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpetk7_q6r.cpp:23:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpetk7_q6r.cpp:23:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpetk7_q6r.cpp:23:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpetk7_q6r.cpp:24:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpetk7_q6r.cpp:24:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpetk7_q6r.cpp:24:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpetk7_q6r.cpp:24:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_ais1p9.cpp: In function 'int main()':\n/tmp/tmp4_ais1p9.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp4_ais1p9.cpp:2:\n/tmp/tmp4_ais1p9.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp4_ais1p9.cpp:19:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp4_ais1p9.cpp:19:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4_ais1p9.cpp:19:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp4_ais1p9.cpp:20:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp4_ais1p9.cpp:20:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp4_ais1p9.cpp:20:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4_ais1p9.cpp:20:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for\
    \ (long i : lst) {\n        sum += i;\n    }\n    for (long i : lst) {\n     \
    \   if (i % 2 == 0) {\n            ans += sum;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqgall1cm.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmpqgall1cm.cpp:10:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpqgall1cm.cpp:13:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : lst) {\n                   ^\n/tmp/tmpqgall1cm.cpp: In function 'int main()':\n\
    /tmp/tmpqgall1cm.cpp:21:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = add;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqgall1cm.cpp:2:\n/tmp/tmpqgall1cm.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpqgall1cm.cpp:22:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpqgall1cm.cpp:22:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqgall1cm.cpp:22:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpqgall1cm.cpp:23:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpqgall1cm.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 1) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoz8yxved.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for\
    \ (long i : lst) {\n        if (i % 2 == 0) {\n            sum += i;\n       \
    \ }\n    }\n    for (long i : lst) {\n        if (i % 2 == 1) {\n            ans\
    \ += sum - i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5njclwpf.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    long\
    \ n = lst.size();\n    for (int i = 0; i < n; i++) {\n        sum += lst[i];\n\
    \        if (i % 2 == 0) {\n            ans += sum;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp58qp31n7.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for\
    \ (long i : lst) {\n        sum += i;\n    }\n    for (long i : lst) {\n     \
    \   if (i % 2 == 0) {\n            ans += sum;\n        }\n        sum += i;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpco2rsqic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for\
    \ (long i : lst) {\n        sum += i;\n    }\n    for (long i : lst) {\n     \
    \   if (i % 2 == 0) {\n            ans += sum;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqgall1cm.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmpqgall1cm.cpp:10:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (long i : lst) {\n                   ^\n/tmp/tmpqgall1cm.cpp:13:19:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (long\
    \ i : lst) {\n                   ^\n/tmp/tmpqgall1cm.cpp: In function 'int main()':\n\
    /tmp/tmpqgall1cm.cpp:21:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = add;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqgall1cm.cpp:2:\n/tmp/tmpqgall1cm.cpp:22:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpqgall1cm.cpp:22:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpqgall1cm.cpp:22:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqgall1cm.cpp:22:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpqgall1cm.cpp:23:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpqgall1cm.cpp:23:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwhx42zwj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 1) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgdakeg5f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 1) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgdakeg5f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 1) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpwhx42zwj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    while (i < n) {\n        if (lst[i] % 2 == 0) {\n      \
    \      ans += lst[i];\n        }\n        i += 2;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_2jlafsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    while (i < n) {\n        if (lst[i] % 2 == 0) {\n      \
    \      ans += lst[i];\n        }\n        i += 2;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp_2jlafsz.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for\
    \ (long i : lst) {\n        if (i % 2 == 0) {\n            sum += i;\n       \
    \ }\n    }\n    for (long i : lst) {\n        if (i % 2 == 1) {\n            ans\
    \ += sum;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmps9g56278.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_ais1p9.cpp: In function 'int main()':\n/tmp/tmp4_ais1p9.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp4_ais1p9.cpp:2:\n/tmp/tmp4_ais1p9.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp4_ais1p9.cpp:19:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp4_ais1p9.cpp:19:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4_ais1p9.cpp:19:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp4_ais1p9.cpp:20:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp4_ais1p9.cpp:20:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp4_ais1p9.cpp:20:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4_ais1p9.cpp:20:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_ais1p9.cpp: In function 'int main()':\n/tmp/tmp4_ais1p9.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp4_ais1p9.cpp:2:\n/tmp/tmp4_ais1p9.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp4_ais1p9.cpp:19:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp4_ais1p9.cpp:19:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4_ais1p9.cpp:19:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp4_ais1p9.cpp:20:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp4_ais1p9.cpp:20:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp4_ais1p9.cpp:20:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4_ais1p9.cpp:20:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long n = lst.size();\n\
    \    for(long i = 0; i < n; i++) {\n        if(lst[i] % 2 == 0) {\n          \
    \  ans += lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6,\
    \ (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp4w4ufjf6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 1) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvxsynxxj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 1) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgdakeg5f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    while (i < n) {\n        if (lst[i] % 2 == 0) {\n      \
    \      ans += lst[i];\n        }\n        i += 1;\n    }\n    return ans;\n}\n\
    int main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpby7qiz28.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 1) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvxsynxxj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for(auto\
    \ i : lst) {\n        sum += i;\n    }\n    for(auto i : lst) {\n        if(i\
    \ % 2 == 0) {\n            ans += sum;\n        }\n        sum += i;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp320ifwsu.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for\
    \ (long i : lst) {\n        sum += i;\n        if (sum % 2 == 0) {\n         \
    \   ans += i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpq1pyyxr6.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long n = lst.size();\n\
    \    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            ans\
    \ += lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplur4ddoy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    while (i < n) {\n        if (i % 2 == 0) {\n           \
    \ sum += lst[i];\n        }\n        i++;\n    }\n    return sum;\n}\nint main()\
    \ {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp61ktjgon.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long n = lst.size();\n\
    \    for (long i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            ans\
    \ += lst[i];\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmplur4ddoy.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 1) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvxsynxxj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long n = lst.size();\n\
    \    long i = 0;\n    long j = 0;\n    while (i < n) {\n        if (lst[i] % 2\
    \ == 0) {\n            ans += lst[i];\n            i++;\n        } else {\n  \
    \          j = i + 1;\n            while (j < n && lst[j] % 2 == 0) {\n      \
    \          j++;\n            }\n            ans += lst[j] - lst[i];\n        \
    \    i = j;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpix54z96q.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    long sum = 0;\n    for\
    \ (long i : lst) {\n        sum += i;\n    }\n    for (long i : lst) {\n     \
    \   if (i % 2 == 0) {\n            ans += sum;\n        }\n        sum += i;\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpco2rsqic.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 1) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpoz8yxved.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 1) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgdakeg5f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    long n = lst.size();\n\
    \    for (int i = 0; i < n; i++) {\n        if (i % 2 == 0) {\n            sum\
    \ += lst[i];\n        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate\
    \ = add;\n    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_ais1p9.cpp: In function 'int main()':\n/tmp/tmp4_ais1p9.cpp:18:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmp4_ais1p9.cpp:2:\n/tmp/tmp4_ais1p9.cpp:19:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp4_ais1p9.cpp:19:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp4_ais1p9.cpp:19:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4_ais1p9.cpp:19:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp4_ais1p9.cpp:20:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp4_ais1p9.cpp:20:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmp4_ais1p9.cpp:20:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp4_ais1p9.cpp:20:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 1) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpgdakeg5f.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 1) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "In file included from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/algorithm:61:0,\n\
    \                 from /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/x86_64-pc-linux-gnu/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpvxsynxxj.cpp:2:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_OI std::__copy_move_a(_II, _II, _OI)\u2019:\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueTypeI)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ error: there are no arguments to \u2018__is_trivially_copyable\u2019 that depend\
    \ on a template parameter, so a declaration of \u2018__is_trivially_copyable\u2019\
    \ must be available [-fpermissive]\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:398:65:\
    \ note: (if you use \u2018-fpermissive\u2019, G++ will accept your code, but allowing\
    \ the use of an undeclared name is deprecated)\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:403:40:\
    \ error: \u2018__simple\u2019 cannot appear in a constant-expression\n       return\
    \ std::__copy_move<_IsMove, __simple,\n                                      \
    \  ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:404:19:\
    \ error: template argument 2 is invalid\n          _Category>::__copy_m(__first,\
    \ __last, __result);\n                   ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:\
    \ In function \u2018_BI2 std::__copy_move_backward_a(_BI1, _BI1, _BI2)\u2019:\n\
    /shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: expected primary-expression before \u2018)\u2019 token\n       const\
    \ bool __simple = (__is_trivially_copyable(_ValueType1)\n                    \
    \                                             ^\n/shared/centos7/gcc/9.2.0-skylake/include/c++/9.2.0/bits/stl_algobase.h:600:65:\
    \ error: there are no arguments to \u2018__is_tri"
  stdout: ''
  timestamp: 1659800029
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            ans += lst[i];\n\
    \        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbdmo9d5u.cpp: In function 'int main()':\n/tmp/tmpbdmo9d5u.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmpbdmo9d5u.cpp:2:\n/tmp/tmpbdmo9d5u.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmpbdmo9d5u.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmpbdmo9d5u.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmpbdmo9d5u.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmpbdmo9d5u.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpbdmo9d5u.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            sum += i;\n        }\n    }\n    return\
    \ sum;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5g66iiao.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmp5g66iiao.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmp5g66iiao.cpp:\
    \ In function 'int main()':\n/tmp/tmp5g66iiao.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5g66iiao.cpp:2:\n/tmp/tmp5g66iiao.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmp5g66iiao.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp5g66iiao.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmp5g66iiao.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmp5g66iiao.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long ans = 0;\n    for (long i : lst) {\n\
    \        if (i % 2 == 0) {\n            ans += i;\n        }\n    }\n    return\
    \ ans;\n}\nint main() {\n    auto candidate = add;\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)88}))) == (88));\n    assert(candidate((std::vector<long>({(long)4, (long)5,\
    \ (long)6, (long)7, (long)2, (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmph5ktezf9.cpp: In function 'long int add(std::vector<long int>)':\n\
    /tmp/tmph5ktezf9.cpp:9:19: error: range-based 'for' loops are not allowed in C++98\
    \ mode\n     for (long i : lst) {\n                   ^\n/tmp/tmph5ktezf9.cpp:\
    \ In function 'int main()':\n/tmp/tmph5ktezf9.cpp:17:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = add;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmph5ktezf9.cpp:2:\n/tmp/tmph5ktezf9.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmph5ktezf9.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmph5ktezf9.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmph5ktezf9.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmph5ktezf9.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Given a non-empty list\
    \ of integers lst. add the even elements that are at odd indices..\n// Examples:\n\
    // >>> add((std::vector<long>({(long)4, (long)2, (long)6, (long)7})))\n// (2)\n\
    long add(std::vector<long> lst) {\n    long sum = 0;\n    for (long i = 0; i <\
    \ lst.size(); i++) {\n        if (i % 2 == 0) {\n            sum += lst[i];\n\
    \        }\n    }\n    return sum;\n}\nint main() {\n    auto candidate = add;\n\
    \    assert(candidate((std::vector<long>({(long)4, (long)88}))) == (88));\n  \
    \  assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7, (long)2,\
    \ (long)122}))) == (122));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)0, (long)6, (long)7}))) == (0));\n    assert(candidate((std::vector<long>({(long)4,\
    \ (long)4, (long)6, (long)8}))) == (12));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphqh3ueex.cpp: In function 'int main()':\n/tmp/tmphqh3ueex.cpp:17:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = add;\n      \
    \    ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n         \
    \        from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n \
    \                from /tmp/tmphqh3ueex.cpp:2:\n/tmp/tmphqh3ueex.cpp:18:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                        ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                            ^\n/tmp/tmphqh3ueex.cpp:18:60:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:18:62: error: 'candidate' was not\
    \ declared in this scope\n     assert(candidate((std::vector<long>({(long)4, (long)88})))\
    \ == (88));\n                                                              ^\n\
    /tmp/tmphqh3ueex.cpp:19:40: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)4,\
    \ (long)5, (long)6, (long)7, (long)2, (long)122}))) == (122));\n             \
    \                           ^\n/tmp/tmphqh3ueex.cpp:19:97: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    \     assert(candidate((std::vector<long>({(long)4, (long)5, (long)6, (long)7,\
    \ (long)2, (long)122}))) == (122));\n                                        \
    \                                                         ^\n/tmp/tmphqh3ueex.cpp:19:97:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphqh3ueex.cpp:19:97: error: no matching function\
    \ for call to 'std::vector"
  stdout: ''
