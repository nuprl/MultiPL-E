name: HumanEval_64_vowels_count
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Write a function vowels_count\
  \ which takes a string representing\n// a word as input and returns the number of\
  \ vowels in the string.\n// Vowels in this case are 'a', 'e', 'i', 'o', 'u'. Here,\
  \ 'y' is also a\n// vowel, but only when it is at the end of the given word.\n//\
  \ Example:\n// >>> vowels_count((\"abcde\"))\n// (2)\n// >>> vowels_count((\"ACEDY\"\
  ))\n// (3)\nlong vowels_count(std::string s) {\n"
tests: "}\nint main() {\n    auto candidate = vowels_count;\n    assert(candidate((\"\
  abcde\")) == (2));\n    assert(candidate((\"Alone\")) == (3));\n    assert(candidate((\"\
  key\")) == (2));\n    assert(candidate((\"bye\")) == (1));\n    assert(candidate((\"\
  keY\")) == (2));\n    assert(candidate((\"bYe\")) == (1));\n    assert(candidate((\"\
  ACEDY\")) == (3));\n}\n"
completions: ["    long count = 0;\n    for(auto &c : s) {\n        if(c == 'a' ||\
    \ c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n    \
    \    }\n    }\n    return count;", "    long vowels = 0;\n    for (auto c : s)\
    \ {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n\
    \            vowels++;\n        }\n    }\n    return vowels;", "    long vowels\
    \ = 0;\n    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' ||\
    \ c == 'o' || c == 'u') {\n            vowels++;\n        }\n    }\n    return\
    \ vowels;", "    long vowels = 0;\n    long len = s.length();\n    long i = 0;\n\
    \    while (i < len) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u') {\n            vowels++;\n        }\n       \
    \ i++;\n    }\n    return vowels;", "    long count = 0;\n    for (int i = 0;\
    \ i < s.size(); i++) {\n        if (s[i] == 'a' || s[i] == 'e' || s[i] == 'i'\
    \ || s[i] == 'o' || s[i] == 'u') {\n            count++;\n        }\n    }\n \
    \   return count;", "    long count = 0;\n    for(auto &c: s) {\n        if(c\
    \ == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n\
    \        }\n    }\n    return count;", "    long count = 0;\n    for(auto &i :\
    \ s) {\n        if(i == 'a' || i == 'e' || i == 'i' || i == 'o' || i == 'u')\n\
    \            count++;\n    }\n    return count;", "    long count = 0;\n    for\
    \ (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o' ||\
    \ c == 'u') {\n            count++;\n        }\n    }\n    return count;", " \
    \   long count = 0;\n    for(int i = 0; i < s.length(); i++) {\n        if(s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n    \
    \        count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (char c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (int i = 0; i < s.length(); i++) {\n        if (s[i]\
    \ == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o' || s[i] == 'u') {\n    \
    \        count++;\n        }\n    }\n    return count;", "    long count = 0;\n\
    \    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            count++;\n        }\n    }\n    return count;",
  "    long count = 0;\n    for (auto &c : s) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            count++;\n        }\n  \
    \  }\n    return count;", "    long count = 0;\n    for(int i = 0; i < s.length();\
    \ i++) {\n        if(s[i] == 'a' || s[i] == 'e' || s[i] == 'i' || s[i] == 'o'\
    \ || s[i] == 'u') {\n            count++;\n        }\n    }\n    return count;",
  "    long vowels = 0;\n    for (char c : s) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            vowels++;\n        }\n \
    \   }\n    return vowels;", "    long count = 0;\n    for (char c : s) {\n   \
    \     if (c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n      \
    \      count++;\n        }\n    }\n    return count;", "    long vowels = 0;\n\
    \    for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c ==\
    \ 'o' || c == 'u') {\n            vowels++;\n        }\n    }\n    return vowels;",
  "    long vowels = 0;\n    for (auto &c : s) {\n        if (c == 'a' || c == 'e'\
    \ || c == 'i' || c == 'o' || c == 'u') {\n            vowels++;\n        }\n \
    \   }\n    return vowels;", "    long count = 0;\n    for(char c : s) {\n    \
    \    if(c == 'a' || c == 'e' || c == 'i' || c == 'o' || c == 'u') {\n        \
    \    count++;\n        }\n    }\n    return count;", "    long vowels = 0;\n \
    \   for (auto c : s) {\n        if (c == 'a' || c == 'e' || c == 'i' || c == 'o'\
    \ || c == 'u') {\n            vowels++;\n        }\n    }\n    return vowels;"]
stop_tokens:
- "\n}"
