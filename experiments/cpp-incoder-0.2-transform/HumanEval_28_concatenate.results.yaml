language: cpp
name: HumanEval_28_concatenate
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto it = strings.begin(); it\
    \ != strings.end(); ++it)\n        result += *it;\n    return result;\n}\nint\
    \ main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgdw_shou.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpgdw_shou.cpp:10:15: error: 'it' does not name a type\n     for\
    \ (auto it = strings.begin(); it != strings.end(); ++it)\n               ^\n/tmp/tmpgdw_shou.cpp:10:37:\
    \ error: expected ';' before 'it'\n     for (auto it = strings.begin(); it !=\
    \ strings.end(); ++it)\n                                     ^\n/tmp/tmpgdw_shou.cpp:10:37:\
    \ error: 'it' was not declared in this scope\n/tmp/tmpgdw_shou.cpp: In function\
    \ 'int main()':\n/tmp/tmpgdw_shou.cpp:15:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = concatenate;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgdw_shou.cpp:2:\n/tmp/tmpgdw_shou.cpp:16:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpgdw_shou.cpp:17:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpgdw_shou.cpp:17:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpgdw_shou.cpp:17:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgdw_shou.cpp:17:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgdw_shou.cpp:17:102:\
    \ note: candidates are:\nIn file included from /usr/include/c+"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (auto &s : strings) {\n    result +=\
    \ s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvg_no5y5.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpvg_no5y5.cpp:10:14: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n   for (auto &s : strings) {\n              ^\n\
    /tmp/tmpvg_no5y5.cpp:10:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (auto &s : strings) {\n                  ^\n/tmp/tmpvg_no5y5.cpp:\
    \ In function 'int main()':\n/tmp/tmpvg_no5y5.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvg_no5y5.cpp:2:\n/tmp/tmpvg_no5y5.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpvg_no5y5.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpvg_no5y5.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpvg_no5y5.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvg_no5y5.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvg_no5y5.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 fr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (auto s : strings) {\n    result +=\
    \ s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpmyz5x9kd.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpmyz5x9kd.cpp:10:13: error: 's' does not name a type\n   for (auto\
    \ s : strings) {\n             ^\n/tmp/tmpmyz5x9kd.cpp:13:3: error: expected ';'\
    \ before 'return'\n   return result;\n   ^\n/tmp/tmpmyz5x9kd.cpp:13:3: error:\
    \ expected primary-expression before 'return'\n/tmp/tmpmyz5x9kd.cpp:13:3: error:\
    \ expected ';' before 'return'\n/tmp/tmpmyz5x9kd.cpp:13:3: error: expected primary-expression\
    \ before 'return'\n/tmp/tmpmyz5x9kd.cpp:13:3: error: expected ')' before 'return'\n\
    /tmp/tmpmyz5x9kd.cpp: In function 'int main()':\n/tmp/tmpmyz5x9kd.cpp:16:10: error:\
    \ 'candidate' does not name a type\n     auto candidate = concatenate;\n     \
    \     ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n        \
    \         from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpmyz5x9kd.cpp:2:\n/tmp/tmpmyz5x9kd.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpmyz5x9kd.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpmyz5x9kd.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpmyz5x9kd.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpmyz5x9kd.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer l"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (auto it = strings.begin(); it != strings.end();\
    \ ++it) {\n    result += *it;\n  }\n  return result;\n}\nint main() {\n    auto\
    \ candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpbn304ijh.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpbn304ijh.cpp:10:13: error: 'it' does not name a type\n   for (auto\
    \ it = strings.begin(); it != strings.end(); ++it) {\n             ^\n/tmp/tmpbn304ijh.cpp:10:35:\
    \ error: expected ';' before 'it'\n   for (auto it = strings.begin(); it != strings.end();\
    \ ++it) {\n                                   ^\n/tmp/tmpbn304ijh.cpp:10:35: error:\
    \ 'it' was not declared in this scope\n/tmp/tmpbn304ijh.cpp: In function 'int\
    \ main()':\n/tmp/tmpbn304ijh.cpp:16:10: error: 'candidate' does not name a type\n\
    \     auto candidate = concatenate;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpbn304ijh.cpp:2:\n/tmp/tmpbn304ijh.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpbn304ijh.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpbn304ijh.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpbn304ijh.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpbn304ijh.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpbn304ijh.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4."
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11op7mn8.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp11op7mn8.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp11op7mn8.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp11op7mn8.cpp:\
    \ In function 'int main()':\n/tmp/tmp11op7mn8.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp11op7mn8.cpp:2:\n/tmp/tmp11op7mn8.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp11op7mn8.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11op7mn8.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp11op7mn8.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp11op7mn8.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp11op7mn8.cpp:\
    \ In function 'int main()':\n/tmp/tmp11op7mn8.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp11op7mn8.cpp:2:\n/tmp/tmp11op7mn8.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp11op7mn8.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11op7mn8.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp11op7mn8.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp11op7mn8.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp11op7mn8.cpp:\
    \ In function 'int main()':\n/tmp/tmp11op7mn8.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp11op7mn8.cpp:2:\n/tmp/tmp11op7mn8.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp11op7mn8.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto it = strings.begin(); it\
    \ != strings.end(); ++it) {\n        result += *it;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxcgwvss1.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpxcgwvss1.cpp:10:15: error: 'it' does not name a type\n     for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n               ^\n\
    /tmp/tmpxcgwvss1.cpp:10:37: error: expected ';' before 'it'\n     for (auto it\
    \ = strings.begin(); it != strings.end(); ++it) {\n                          \
    \           ^\n/tmp/tmpxcgwvss1.cpp:10:37: error: 'it' was not declared in this\
    \ scope\n/tmp/tmpxcgwvss1.cpp: In function 'int main()':\n/tmp/tmpxcgwvss1.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxcgwvss1.cpp:2:\n/tmp/tmpxcgwvss1.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpxcgwvss1.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpxcgwvss1.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpxcgwvss1.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpxcgwvss1.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxcgwvss1.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/includ"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto it = strings.begin(); it\
    \ != strings.end(); ++it)\n        result += *it;\n    return result;\n}\nint\
    \ main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgdw_shou.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpgdw_shou.cpp:10:15: error: 'it' does not name a type\n     for\
    \ (auto it = strings.begin(); it != strings.end(); ++it)\n               ^\n/tmp/tmpgdw_shou.cpp:10:37:\
    \ error: expected ';' before 'it'\n     for (auto it = strings.begin(); it !=\
    \ strings.end(); ++it)\n                                     ^\n/tmp/tmpgdw_shou.cpp:10:37:\
    \ error: 'it' was not declared in this scope\n/tmp/tmpgdw_shou.cpp: In function\
    \ 'int main()':\n/tmp/tmpgdw_shou.cpp:15:10: error: 'candidate' does not name\
    \ a type\n     auto candidate = concatenate;\n          ^\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgdw_shou.cpp:2:\n/tmp/tmpgdw_shou.cpp:16:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpgdw_shou.cpp:17:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpgdw_shou.cpp:17:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpgdw_shou.cpp:17:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpgdw_shou.cpp:17:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgdw_shou.cpp:17:102:\
    \ note: candidates are:\nIn file included from /usr/include/c+"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11op7mn8.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp11op7mn8.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp11op7mn8.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp11op7mn8.cpp:\
    \ In function 'int main()':\n/tmp/tmp11op7mn8.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp11op7mn8.cpp:2:\n/tmp/tmp11op7mn8.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp11op7mn8.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuen36etm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpuen36etm.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpuen36etm.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuen36etm.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuen36etm.cpp: In function 'int main()':\n/tmp/tmpuen36etm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuen36etm.cpp:2:\n/tmp/tmpuen36etm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpuen36etm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpuen36etm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpuen36etm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuen36etm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11op7mn8.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp11op7mn8.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp11op7mn8.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp11op7mn8.cpp:\
    \ In function 'int main()':\n/tmp/tmp11op7mn8.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp11op7mn8.cpp:2:\n/tmp/tmp11op7mn8.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp11op7mn8.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuen36etm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpuen36etm.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpuen36etm.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuen36etm.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuen36etm.cpp: In function 'int main()':\n/tmp/tmpuen36etm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuen36etm.cpp:2:\n/tmp/tmpuen36etm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpuen36etm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpuen36etm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpuen36etm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuen36etm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto it = strings.begin(); it\
    \ != strings.end(); ++it) {\n        result += *it;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxcgwvss1.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpxcgwvss1.cpp:10:15: error: 'it' does not name a type\n     for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n               ^\n\
    /tmp/tmpxcgwvss1.cpp:10:37: error: expected ';' before 'it'\n     for (auto it\
    \ = strings.begin(); it != strings.end(); ++it) {\n                          \
    \           ^\n/tmp/tmpxcgwvss1.cpp:10:37: error: 'it' was not declared in this\
    \ scope\n/tmp/tmpxcgwvss1.cpp: In function 'int main()':\n/tmp/tmpxcgwvss1.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxcgwvss1.cpp:2:\n/tmp/tmpxcgwvss1.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpxcgwvss1.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpxcgwvss1.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpxcgwvss1.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpxcgwvss1.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxcgwvss1.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/includ"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n  std::string result;\n  for (auto &s : strings) {\n    result +=\
    \ s;\n  }\n  return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvg_no5y5.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpvg_no5y5.cpp:10:14: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n   for (auto &s : strings) {\n              ^\n\
    /tmp/tmpvg_no5y5.cpp:10:18: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n   for (auto &s : strings) {\n                  ^\n/tmp/tmpvg_no5y5.cpp:\
    \ In function 'int main()':\n/tmp/tmpvg_no5y5.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpvg_no5y5.cpp:2:\n/tmp/tmpvg_no5y5.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpvg_no5y5.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpvg_no5y5.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpvg_no5y5.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpvg_no5y5.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpvg_no5y5.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 fr"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuen36etm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpuen36etm.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpuen36etm.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuen36etm.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuen36etm.cpp: In function 'int main()':\n/tmp/tmpuen36etm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuen36etm.cpp:2:\n/tmp/tmpuen36etm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpuen36etm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpuen36etm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpuen36etm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuen36etm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto &s : strings) {\n       \
    \ result += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = concatenate;\n    assert(candidate((std::vector<std::string>())) == (\"\"\
    ));\n    assert(candidate((std::vector<std::string>({(std::string)\"x\", (std::string)\"\
    y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp11op7mn8.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmp11op7mn8.cpp:10:16: error: ISO C++ forbids declaration of 's'\
    \ with no type [-fpermissive]\n     for (auto &s : strings) {\n              \
    \  ^\n/tmp/tmp11op7mn8.cpp:10:20: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &s : strings) {\n                    ^\n/tmp/tmp11op7mn8.cpp:\
    \ In function 'int main()':\n/tmp/tmp11op7mn8.cpp:16:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = concatenate;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp11op7mn8.cpp:2:\n/tmp/tmp11op7mn8.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmp11op7mn8.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmp11op7mn8.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmp11op7mn8.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n           "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto it = strings.begin(); it\
    \ != strings.end(); ++it) {\n        result += *it;\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = concatenate;\n    assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxcgwvss1.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpxcgwvss1.cpp:10:15: error: 'it' does not name a type\n     for\
    \ (auto it = strings.begin(); it != strings.end(); ++it) {\n               ^\n\
    /tmp/tmpxcgwvss1.cpp:10:37: error: expected ';' before 'it'\n     for (auto it\
    \ = strings.begin(); it != strings.end(); ++it) {\n                          \
    \           ^\n/tmp/tmpxcgwvss1.cpp:10:37: error: 'it' was not declared in this\
    \ scope\n/tmp/tmpxcgwvss1.cpp: In function 'int main()':\n/tmp/tmpxcgwvss1.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpxcgwvss1.cpp:2:\n/tmp/tmpxcgwvss1.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpxcgwvss1.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpxcgwvss1.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpxcgwvss1.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpxcgwvss1.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initializer list>)'\n/tmp/tmpxcgwvss1.cpp:18:102:\
    \ note: candidates are:\nIn file included from /usr/includ"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuen36etm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpuen36etm.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpuen36etm.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuen36etm.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuen36etm.cpp: In function 'int main()':\n/tmp/tmpuen36etm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuen36etm.cpp:2:\n/tmp/tmpuen36etm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpuen36etm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpuen36etm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpuen36etm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuen36etm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Concatenate list of strings\
    \ into a single string\n// >>> concatenate((std::vector<std::string>()))\n// (\"\
    \")\n// >>> concatenate((std::vector<std::string>({(std::string)\"a\", (std::string)\"\
    b\", (std::string)\"c\"})))\n// (\"abc\")\nstd::string concatenate(std::vector<std::string>\
    \ strings) {\n    std::string result;\n    for (auto s : strings) {\n        result\
    \ += s;\n    }\n    return result;\n}\nint main() {\n    auto candidate = concatenate;\n\
    \    assert(candidate((std::vector<std::string>())) == (\"\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\", (std::string)\"w\", (std::string)\"\
    k\"}))) == (\"xyzwk\"));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpuen36etm.cpp: In function 'std::string concatenate(std::vector<std::basic_string<char>\
    \ >)':\n/tmp/tmpuen36etm.cpp:10:15: error: 's' does not name a type\n     for\
    \ (auto s : strings) {\n               ^\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ ';' before 'return'\n     return result;\n     ^\n/tmp/tmpuen36etm.cpp:13:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpuen36etm.cpp:13:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpuen36etm.cpp:13:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpuen36etm.cpp: In function 'int main()':\n/tmp/tmpuen36etm.cpp:16:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = concatenate;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpuen36etm.cpp:2:\n/tmp/tmpuen36etm.cpp:17:50: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((std::vector<std::string>()))\
    \ == (\"\"));\n                                                  ^\n/tmp/tmpuen36etm.cpp:18:47:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<std::string>({(std::string)\"\
    x\", (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n             \
    \                                  ^\n/tmp/tmpuen36etm.cpp:18:102: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enabled by\
    \ default]\n     assert(candidate((std::vector<std::string>({(std::string)\"x\"\
    , (std::string)\"y\", (std::string)\"z\"}))) == (\"xyz\"));\n                \
    \                                                                            \
    \          ^\n/tmp/tmpuen36etm.cpp:18:102: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n/tmp/tmpuen36etm.cpp:18:102:\
    \ error: no matching function for call to 'std::vector<std::basic_string<char>\
    \ >::vector(<brace-enclosed initi"
  stdout: ''
