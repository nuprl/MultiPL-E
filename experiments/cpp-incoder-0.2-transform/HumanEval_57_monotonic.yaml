name: HumanEval_57_monotonic
language: cpp
prompt: "#include<assert.h>\n#include<bits/stdc++.h>\n// Return True is list elements\
  \ are monotonically increasing or decreasing.\n// >>> monotonic((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)20})))\n// (true)\n// >>> monotonic((std::vector<long>({(long)1,\
  \ (long)20, (long)4, (long)10})))\n// (false)\n// >>> monotonic((std::vector<long>({(long)4,\
  \ (long)1, (long)0, (long)-10})))\n// (true)\nbool monotonic(std::vector<long> l)\
  \ {\n"
tests: "}\nint main() {\n    auto candidate = monotonic;\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)10}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)4, (long)20}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)20, (long)4, (long)10}))) == (false));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)0, (long)-10}))) == (true));\n    assert(candidate((std::vector<long>({(long)4,\
  \ (long)1, (long)1, (long)0}))) == (true));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)2, (long)5, (long)60}))) == (false));\n    assert(candidate((std::vector<long>({(long)1,\
  \ (long)2, (long)3, (long)4, (long)5, (long)60}))) == (true));\n    assert(candidate((std::vector<long>({(long)9,\
  \ (long)9, (long)9, (long)9}))) == (true));\n}\n"
completions: ["    long long ans = 0, l = l.size();\n    for (long long i = 0; i <\
    \ l; i++) {\n        long long curr = l[i];\n        if (curr < ans)\n       \
    \     return false;\n        ans = curr;\n    }\n    return true;", "    long\
    \ long ans = 0;\n    long long l = l.size();\n    for (long long i = 0; i < l;\
    \ i++) {\n        long long curr = l[i];\n        long long next = l[(i + 1) %\
    \ l];\n        if (curr > next) {\n            ans = 1;\n            break;\n\
    \        }\n    }\n    return ans == 0;", "    long long ans = 0, i = 0;\n   \
    \ for (; i < l.size() - 1; i++) {\n        if (l[i] > l[i + 1]) {\n          \
    \  ans = l[i];\n            break;\n        }\n    }\n    if (ans == 0) return\
    \ false;\n    for (; i < l.size(); i++) {\n        if (l[i] < ans) ans = l[i];\n\
    \    }\n    return true;", "    long long ans = 0;\n    for (long long i = 0;\
    \ i < l.size(); i++) {\n        if (l[i] < l[i - 1]) {\n            ans = 1;\n\
    \            break;\n        }\n        if (l[i] > l[i - 1]) {\n            ans\
    \ = 0;\n            break;\n        }\n    }\n    return ans == 1;", "    long\
    \ long ans = 0;\n    long long i = 0;\n    long long j = l.size() - 1;\n    while\
    \ (i < j) {\n        long long mid = (i + j) / 2;\n        if (l[mid] < l[mid+1])\
    \ {\n            ans = mid;\n            i = mid + 1;\n        } else {\n    \
    \        j = mid;\n        }\n    }\n    return ans == 0;", "    long long ans\
    \ = 0, n = l.size();\n    for (long long i = 0; i < n; i++) {\n        long long\
    \ cur = l[i];\n        if (cur < ans)\n            return false;\n        ans\
    \ = cur;\n    }\n    return true;", "    long long ans = 0, cur = l[0], prev =\
    \ l[0];\n    for (long long i = 0; i < l.size(); i++) {\n        if (l[i] < prev)\
    \ {\n            return false;\n        }\n        prev = cur;\n        cur =\
    \ l[i];\n    }\n    return true;", "    long long ans = 0, curr = 0, prev = 0;\n\
    \    for (long long i = 0; i < l.size(); i++) {\n        prev = curr;\n      \
    \  curr = l[i];\n        if (curr < prev) {\n            ans = false;\n      \
    \      break;\n        }\n        ans = true;\n    }\n    return ans;", "    long\
    \ long ans = 0, i = 0;\n    for (; i < l.size(); i++) {\n        long long curr\
    \ = l[i];\n        if (curr < ans) {\n            ans = curr;\n        }\n   \
    \ }\n    return ans == 0;", "    long long int max = 0, min = std::numeric_limits<long\
    \ long int>::max();\n    for (long long int i : l) {\n        if (i > max) {\n\
    \            max = i;\n        } else if (i < min) {\n            min = i;\n \
    \       }\n    }\n    return max >= min;", "    long long ans = 0, cur = l[0],\
    \ prev = l[0];\n    for (long i = 1; i < l.size(); i++) {\n        if (l[i] <\
    \ prev) {\n            return false;\n        }\n        prev = cur;\n       \
    \ cur = l[i];\n    }\n    return true;", "    long long ans = 0;\n    long long\
    \ l = l.size();\n    for(long long i = 0; i < l; i++) {\n        long long cur\
    \ = l[i];\n        long long prev = l[i - 1];\n        if(cur < prev) {\n    \
    \        ans = 1;\n            break;\n        }\n        if(cur > prev) {\n \
    \           ans = 0;\n            break;\n        }\n    }\n    return ans;",
  "    long long ans = 0;\n    for (long long i = 0; i < l.size(); i++) {\n      \
    \  long long curr = l[i];\n        long long prev = l[i - 1];\n        if (curr\
    \ < prev) {\n            ans = 1;\n            break;\n        }\n    }\n    return\
    \ ans == 1;", "    long long ans = 0, l = 0, r = l.size() - 1;\n    while (l <=\
    \ r) {\n        long mid = l + (r - l) / 2;\n        if (l[mid] <= r[mid]) {\n\
    \            ans = mid;\n            l = mid + 1;\n        } else {\n        \
    \    r = mid - 1;\n        }\n    }\n    return ans == l.size() - 1;", "    long\
    \ long ans = 0, n = l.size();\n    for (long long i = 0; i < n; ++i) {\n     \
    \   long long curr = l[i];\n        long long prev = l[i - 1];\n        if (curr\
    \ < prev) {\n            ans = 1;\n            break;\n        }\n    }\n    return\
    \ ans == 1;", "    long long ans = 0;\n    long long n = l.size();\n    for (long\
    \ long i = 0; i < n; i++) {\n        long long j = i;\n        while (j > 0 &&\
    \ l[j-1] > l[j]) {\n            ans = l[j];\n            j--;\n        }\n   \
    \     l[j] = ans;\n    }\n    return ans == 0;", "    long long ans = 0;\n   \
    \ for (long long i = 0; i < l.size(); i++) {\n        long long cur = l[i];\n\
    \        if (cur < ans)\n            return false;\n        if (cur > ans)\n \
    \           return true;\n        ans = cur;\n    }\n    return true;", "    long\
    \ long ans = l[0];\n    for (long long i = 1; i < l.size(); i++) {\n        if\
    \ (l[i] < ans)\n            return false;\n        ans = l[i];\n    }\n    return\
    \ true;", "    long long int max = 0, min = INT_MAX;\n    for (long long int i\
    \ : l) {\n        if (i < min) min = i;\n        if (i > max) max = i;\n    }\n\
    \    if (min == max) return true;\n    return false;", "    long long int ans\
    \ = 0;\n    long long int max = std::numeric_limits<long long int>::max();\n \
    \   for (long long int i : l) {\n        if (i > max) {\n            return false;\n\
    \        }\n        if (i < 0) {\n            return false;\n        }\n     \
    \   ans += i;\n    }\n    return ans == 0;"]
stop_tokens:
- "\n}"
