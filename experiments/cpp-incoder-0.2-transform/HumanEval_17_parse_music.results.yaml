language: cpp
name: HumanEval_17_parse_music
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long last_beat = 0;\n\
    \    long last_note = 0;\n    long last_note_beat = 0;\n    long note_duration\
    \ = 0;\n    long note_duration2 = 0;\n    long note_duration3 = 0;\n    long note_duration4\
    \ = 0;\n    long note_duration5 = 0;\n    long note_duration6 = 0;\n    long note_duration7\
    \ = 0;\n    long note_duration8 = 0;\n    long note_duration9 = 0;\n    long note_duration10\
    \ = 0;\n    long note_duration11 = 0;\n    long note_duration12 = 0;\n    long\
    \ note_duration13 = 0;\n    long note_duration14 = 0;\n    long note_duration15\
    \ = 0;\n    long note_duration16 = 0;\n    long note_duration17 = 0;\n    long\
    \ note_duration18 = 0;\n    long note_duration19 = 0;\n    long note_duration20\
    \ = 0;\n    long note_duration21 = 0;\n    long note_duration22 = 0;\n    long\
    \ note_duration23 = 0;\n    long note_duration24 = 0;\n    long note_duration25\
    \ = 0;\n    long note_duration26 = 0;\n    long note_duration27 = 0;\n    long\
    \ note_duration28 = 0;\n    long note_duration29 = 0;\n    long note_duration30\
    \ = 0;\n    long note_duration31 = 0;\n    long note_duration32 = 0;\n    long\
    \ note_duration33 = 0;\n    long note_duration34 = 0;\n    long note_duration35\
    \ = 0;\n    long note_duration36 = 0;\n    long note_duration37 = 0;\n    long\
    \ note_duration38 = 0;\n    long note_duration39 = 0;\n    long note_duration40\
    \ = 0;\n    long note_duration41 = 0;\n    long note_duration42 = 0;\n    long\
    \ note_duration43 = 0;\n    long note_duration44 = 0;\n    long note_duration45\
    \ = 0;\n    long note_duration46 = 0;\n    long note_duration47 = 0;\n    long\
    \ note_duration48 = 0;\n    long note_duration49 = 0;\n    long note_duration50\
    \ = 0;\n    long note_duration51 = 0;\n    long note_duration52 = 0;\n    long\
    \ note_duration53 = 0;\n    long note_duration54 = 0;\n    long note_duration55\
    \ = 0;\n    long note_duration56 = 0;\n    long note_duration57 = 0;\n    long\
    \ note_duration58 = 0;\n    long note_duration59 = 0;\n    long note_duration60\
    \ = 0;\n    long note_duration61 = 0;\n    long note_duration62 = 0;\n    long\
    \ note_duration63 = 0;\n    long note_duration64 = 0;\n    long note_duration65\
    \ = 0;\n    long note_duration66 = 0;\n    long note_duration67 = 0;\n    long\
    \ note_duration68 = 0;\n    long note_duration69\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpll_wsj8a.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpll_wsj8a.cpp:88:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpll_wsj8a.cpp: In function 'int main()':\n/tmp/tmpll_wsj8a.cpp:90:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = parse_music;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpll_wsj8a.cpp:2:\n/tmp/tmpll_wsj8a.cpp:91:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpll_wsj8a.cpp:92:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpll_wsj8a.cpp:92:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpll_wsj8a.cpp:92:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpll_wsj8a.cpp:92:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpll_wsj8a.cpp:92:93:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpll_wsj8a.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long last_beat = 0;\n\
    \    bool is_note = false;\n    bool is_last_note = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beat = false;\n    bool is_last_beat = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat = false;\n    bool is_last_beat = false;\n\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp1q0nstyz.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmp1q0nstyz.cpp:20:10: error: redeclaration of 'bool is_last_beat'\n    \
    \ bool is_last_beat = false;\n          ^\n/tmp/tmp1q0nstyz.cpp:19:10: error:\
    \ 'bool is_last_beat' previously declared here\n     bool is_last_beat = false;\n\
    \          ^\n/tmp/tmp1q0nstyz.cpp:21:10: error: redeclaration of 'bool is_last_beat'\n\
    \     bool is_last_beat = false;\n          ^\n/tmp/tmp1q0nstyz.cpp:19:10: error:\
    \ 'bool is_last_beat' previously declared here\n     bool is_last_beat = false;\n\
    \          ^\n/tmp/tmp1q0nstyz.cpp:22:10: error: redeclaration of 'bool is_last_beat'\n\
    \     bool is_last_beat = false;\n          ^\n/tmp/tmp1q0nstyz.cpp:19:10: error:\
    \ 'bool is_last_beat' previously declared here\n     bool is_last_beat = false;\n\
    \          ^\n/tmp/tmp1q0nstyz.cpp:23:10: error: redeclaration of 'bool is_last_beat'\n\
    \     bool is_last_beat = false;\n          ^\n/tmp/tmp1q0nstyz.cpp:19:10: error:\
    \ 'bool is_last_beat' previously declared here\n     bool is_last_beat = false;\n\
    \          ^\n/tmp/tmp1q0nstyz.cpp:24:10: error: redeclaration of 'bool is_last_beat'\n\
    \     bool is_last_beat = false;\n          ^\n/tmp/tmp1q0nstyz.cpp:19:10: error:\
    \ 'bool is_last_beat' previously declared here\n     bool is_last_beat = false;\n\
    \          ^\n/tmp/tmp1q0nstyz.cpp:25:10: error: redeclaration of 'bool is_last_beat'\n\
    \     bool is_last_beat = false;\n          ^\n/tmp/tmp1q0nstyz.cpp:19:10: error:\
    \ 'bool is_last_beat' previously declared here\n     bool is_last_beat = false;\n\
    \          ^\n/tmp/tmp1q0nstyz.cpp:26:10: error: redeclaration of 'bool is_last_beat'\n\
    \     bool is_last_beat = false;\n          ^\n/tmp/tmp1q0nstyz.cpp:19:10: error:\
    \ 'bool is_last_beat' previously declared here\n     bool is_last_beat = false;\n\
    \          ^\n/tmp/tmp1q0nstyz.cpp:27:10: error: redeclaration of 'bool is_last_beat'\n\
    \     bool is_last_beat = false;\n          ^\n/tmp/tmp1q0nstyz.cpp:19:10: error:\
    \ 'bool is_last_beat' previously declared here\n     bool is_last_beat = false;\n\
    \          ^\n/tmp/tmp1q0nstyz.cpp:28:10: error: redeclara"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long beats = 0;\n   \
    \ long notes = 0;\n    long note = 0;\n    long note_count = 0;\n    long note_length\
    \ = 0;\n    long note_length_count = 0;\n    long note_length = 0;\n    long note_length_count2\
    \ = 0;\n    long note_length2 = 0;\n    long note_length_count3 = 0;\n    long\
    \ note_length3 = 0;\n    long note_length_count4 = 0;\n    long note_length4 =\
    \ 0;\n    long note_length_count5 = 0;\n    long note_length5 = 0;\n    long note_length_count6\
    \ = 0;\n    long note_length6 = 0;\n    long note_length_count7 = 0;\n    long\
    \ note_length7 = 0;\n    long note_length_count8 = 0;\n    long note_length8 =\
    \ 0;\n    long note_length_count9 = 0;\n    long note_length9 = 0;\n    long note_length_count10\
    \ = 0;\n    long note_length10 = 0;\n    long note_length_count11 = 0;\n    long\
    \ note_length11 = 0;\n    long note_length_count12 = 0;\n    long note_length12\
    \ = 0;\n    long note_length_count13 = 0;\n    long note_length13 = 0;\n    long\
    \ note_length_count14 = 0;\n    long note_length14 = 0;\n    long note_length_count15\
    \ = 0;\n    long note_length15 = 0;\n    long note_length_count16 = 0;\n    long\
    \ note_length16 = 0;\n    long note_length_count17 = 0;\n    long note_length17\
    \ = 0;\n    long note_length_count18 = 0;\n    long note_length18 = 0;\n    long\
    \ note_length_count19 = 0;\n    long note_length19 = 0;\n    long note_length_count20\
    \ = 0;\n    long note_length20 = 0;\n    long note_length_count21 = 0;\n    long\
    \ note_length21 = 0;\n    long note_length_count22 = 0;\n    long note_length22\
    \ = 0;\n    long note_length_count23 = 0;\n    long note_length23 = 0;\n    long\
    \ note_length_count24 = 0;\n    long note_length24 = 0;\n    long note_length_count25\
    \ = 0;\n    long note_length25 = 0;\n    long note_length_count26 = 0;\n    long\
    \ note_length26 = 0;\n    long note_length_count27 = 0;\n    long note_length27\
    \ = 0;\n    long note_length_count28 = 0;\n    long note_length28 = 0;\n    long\
    \ note_length_count29 = 0;\n    long note_length29 = 0;\n    long note_length_count30\
    \ = 0;\n    long note_length30 = 0;\n    long note_length_count31 = 0;\n    long\
    \ note_length31 = 0;\n    long note_length_count32 = 0;\n    long note_length32\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqtyjmpbe.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpqtyjmpbe.cpp:16:10: error: conflicting declaration 'long int beats'\n\
    \     long beats = 0;\n          ^\n/tmp/tmpqtyjmpbe.cpp:13:23: error: 'beats'\
    \ has a previous declaration as 'std::vector<long int> beats'\n     std::vector<long>\
    \ beats;\n                       ^\n/tmp/tmpqtyjmpbe.cpp:18:10: error: conflicting\
    \ declaration 'long int note'\n     long note = 0;\n          ^\n/tmp/tmpqtyjmpbe.cpp:14:17:\
    \ error: 'note' has a previous declaration as 'std::string note'\n     std::string\
    \ note;\n                 ^\n/tmp/tmpqtyjmpbe.cpp:22:10: error: redeclaration\
    \ of 'long int note_length'\n     long note_length = 0;\n          ^\n/tmp/tmpqtyjmpbe.cpp:20:10:\
    \ error: 'long int note_length' previously declared here\n     long note_length\
    \ = 0;\n          ^\n/tmp/tmpqtyjmpbe.cpp:85:1: error: expected initializer before\
    \ '}' token\n }\n ^\n/tmp/tmpqtyjmpbe.cpp: In function 'int main()':\n/tmp/tmpqtyjmpbe.cpp:87:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = parse_music;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqtyjmpbe.cpp:2:\n/tmp/tmpqtyjmpbe.cpp:88:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpqtyjmpbe.cpp:89:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpqtyjmpbe.cpp:89:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpqtyjmpbe.c"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beats_counter = 0;\n    long last_beat\
    \ = 0;\n    for (auto c : music_string) {\n        if (c == 'o') {\n         \
    \   note = note.empty() ? \"o\" : note + \"o\";\n            beats_counter = 0;\n\
    \            last_beat = 0;\n        } else if (c == '|') {\n            note\
    \ = note.empty() ? \"o\" : note + \"o\";\n            beats_counter = 0;\n   \
    \         last_beat = 0;\n        } else if (c == ' ') {\n            note = note.empty()\
    \ ? \"o\" : note + \"o\";\n            beats_counter = 0;\n            last_beat\
    \ = 0;\n        } else if (c == '.') {\n            note = note.empty() ? \"o\"\
    \ : note + \"o\";\n            beats_counter = 0;\n            last_beat = 0;\n\
    \        } else {\n            note = note.empty() ? \"o\" : note + \"o\";\n \
    \           beats_counter = 0;\n            last_beat = 0;\n        }\n      \
    \  if (last_beat != beats_counter) {\n            beats.push_back(beats_counter);\n\
    \        }\n        last_beat = beats_counter;\n    }\n    return beats;\n}\n\
    int main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"))\
    \ == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpk33ehzvm.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpk33ehzvm.cpp:17:15: error: 'c' does not name a type\n     for (auto c\
    \ : music_string) {\n               ^\n/tmp/tmpk33ehzvm.cpp:44:5: error: expected\
    \ ';' before 'return'\n     return beats;\n     ^\n/tmp/tmpk33ehzvm.cpp:44:5:\
    \ error: expected primary-expression before 'return'\n/tmp/tmpk33ehzvm.cpp:44:5:\
    \ error: expected ';' before 'return'\n/tmp/tmpk33ehzvm.cpp:44:5: error: expected\
    \ primary-expression before 'return'\n/tmp/tmpk33ehzvm.cpp:44:5: error: expected\
    \ ')' before 'return'\n/tmp/tmpk33ehzvm.cpp: In function 'int main()':\n/tmp/tmpk33ehzvm.cpp:47:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = parse_music;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpk33ehzvm.cpp:2:\n/tmp/tmpk33ehzvm.cpp:48:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpk33ehzvm.cpp:49:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpk33ehzvm.cpp:49:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpk33ehzvm.cpp:49:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpk33ehzvm.cpp:49:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpk33ehzvm.cpp:49:93:\
    \ note: candidates are:\nIn file included from /usr/include/c++/"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long last_beat = 0;\n\
    \    bool is_note = false;\n    bool is_last_note = false;\n    bool is_last_beat\
    \ = false;\n    bool is_last_beat_in_note = false;\n    bool is_last_beat_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note = false;\n\
    \    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note = false;\n\
    \    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n    bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp4kneh23o.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmp4kneh23o.cpp:28:10: error: redeclaration of 'bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\n\
    \     bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n          ^\n/tmp/tmp4kneh23o.cpp:27:10: error: 'bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\
    \ previously declared here\n     bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n          ^\n/tmp/tmp4kneh23o.cpp:32:10: error: redeclaration of 'bool\
    \ is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\n\
    \     bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n          ^\n/tmp/tmp4kneh23o.cpp:31:10: error: 'bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\
    \ previously declared here\n     bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n          ^\n/tmp/tmp4kneh23o.cpp:34:10: error: redeclaration of 'bool\
    \ is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\n\
    \     bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n          ^\n/tmp/tmp4kneh23o.cpp:33:10: error: 'bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\
    \ previously declared here\n     bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note\
    \ = false;\n          ^\n/tmp/tmp4kneh23o.cpp:35:10: error: redeclaration of 'bool\
    \ is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_note'\n\
    \     bool is_last_beat_in_note_in_note_in_note_in_note_in_note_in_note_in_note_in_no"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string current_note;\n    long current_beat = 0;\n    long\
    \ current_note_length = 0;\n    bool last_note = false;\n    bool last_note_type\
    \ = false;\n    bool last_note_type2 = false;\n    bool last_note_type3 = false;\n\
    \    bool last_note_type4 = false;\n    bool last_note_type5 = false;\n    bool\
    \ last_note_type6 = false;\n    bool last_note_type7 = false;\n    bool last_note_type8\
    \ = false;\n    bool last_note_type9 = false;\n    bool last_note_type10 = false;\n\
    \    bool last_note_type11 = false;\n    bool last_note_type12 = false;\n    bool\
    \ last_note_type13 = false;\n    bool last_note_type14 = false;\n    bool last_note_type15\
    \ = false;\n    bool last_note_type16 = false;\n    bool last_note_type17 = false;\n\
    \    bool last_note_type18 = false;\n    bool last_note_type19 = false;\n    bool\
    \ last_note_type20 = false;\n    bool last_note_type21 = false;\n    bool last_note_type22\
    \ = false;\n    bool last_note_type23 = false;\n    bool last_note_type24 = false;\n\
    \    bool last_note_type25 = false;\n    bool last_note_type26 = false;\n    bool\
    \ last_note_type27 = false;\n    bool last_note_type28 = false;\n    bool last_note_type29\
    \ = false;\n    bool last_note_type30 = false;\n    bool last_note_type31 = false;\n\
    \    bool last_note_type32 = false;\n    bool last_note_type33 = false;\n    bool\
    \ last_note_type34 = false;\n    bool last_note_type35 = false;\n    bool last_note_type36\
    \ = false;\n    bool last_note_type37 = false;\n    bool last_note_type38 = false;\n\
    \    bool last_note_type39 = false;\n    bool last_note_type40 = false;\n    bool\
    \ last_note_type41 = false;\n    bool last_note_type42 = false;\n    bool last_note_type43\
    \ = false;\n    bool last_note_type44 = false;\n    bool last_note_type45 = false;\n\
    \    bool last_note_type46 = false;\n    bool last_note_type47 = false;\n    bool\
    \ last_note_type48 = false;\n    bool last_note_type49 = false;\n    bool last_note_type50\
    \ = false;\n    bool last_note_type51 = false;\n    bool last_note_type52 = false;\n\
    \    bool last_note_type53 = false;\n    bool last_note_type54 = false;\n    bool\
    \ last_note_type55 = false;\n    bool last_note_type56 = false;\n    bool last_note_type57\
    \ = false;\n    bool last_note_type58 = false;\n    bool last_note_type59 = false;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdz8fet9o.cpp: In function 'int main()':\n/tmp/tmpdz8fet9o.cpp:79:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = parse_music;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdz8fet9o.cpp:2:\n/tmp/tmpdz8fet9o.cpp:80:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpdz8fet9o.cpp:81:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpdz8fet9o.cpp:81:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpdz8fet9o.cpp:81:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpdz8fet9o.cpp:81:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpdz8fet9o.cpp:81:93:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpdz8fet9o.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file incl"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long last_beat = 0;\n\
    \    bool is_note = false;\n    for (char c : music_string) {\n        if (c ==\
    \ 'o') {\n            note = \"o\";\n            is_note = true;\n           \
    \ beat = 0;\n            last_beat = 0;\n        } else if (c == '|') {\n    \
    \        note = \"o|\";\n            is_note = true;\n            beat = 0;\n\
    \            last_beat = 0;\n        } else if (c == ' ') {\n            note\
    \ = \".\";\n            is_note = false;\n            beat = 0;\n            last_beat\
    \ = 0;\n        } else if (is_note) {\n            if (c == '.') {\n         \
    \       beat += 1;\n                last_beat = beat;\n            } else if (c\
    \ == 'o') {\n                beat += 1;\n                last_beat = beat;\n \
    \           } else if (c == '|') {\n                beat += 1;\n             \
    \   last_beat = beat;\n            }\n        }\n    }\n    beats.push_back(last_beat);\n\
    \    return beats;\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfiwbw40t.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpfiwbw40t.cpp:18:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : music_string) {\n                   ^\n/tmp/tmpfiwbw40t.cpp:\
    \ In function 'int main()':\n/tmp/tmpfiwbw40t.cpp:51:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = parse_music;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfiwbw40t.cpp:2:\n/tmp/tmpfiwbw40t.cpp:52:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpfiwbw40t.cpp:53:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpfiwbw40t.cpp:53:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpfiwbw40t.cpp:53:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpfiwbw40t.cpp:53:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpfiwbw40t.cpp:53:93:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfiwbw40t.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long beats = 0;\n   \
    \ long notes = 0;\n    long note = 0;\n    long note_value = 0;\n    long note_length\
    \ = 0;\n    long note_length_value = 0;\n    long note_length_value2 = 0;\n  \
    \  long note_length_value3 = 0;\n    long note_length_value4 = 0;\n    long note_length_value5\
    \ = 0;\n    long note_length_value6 = 0;\n    long note_length_value7 = 0;\n \
    \   long note_length_value8 = 0;\n    long note_length_value9 = 0;\n    long note_length_value10\
    \ = 0;\n    long note_length_value11 = 0;\n    long note_length_value12 = 0;\n\
    \    long note_length_value13 = 0;\n    long note_length_value14 = 0;\n    long\
    \ note_length_value15 = 0;\n    long note_length_value16 = 0;\n    long note_length_value17\
    \ = 0;\n    long note_length_value18 = 0;\n    long note_length_value19 = 0;\n\
    \    long note_length_value20 = 0;\n    long note_length_value21 = 0;\n    long\
    \ note_length_value22 = 0;\n    long note_length_value23 = 0;\n    long note_length_value24\
    \ = 0;\n    long note_length_value25 = 0;\n    long note_length_value26 = 0;\n\
    \    long note_length_value27 = 0;\n    long note_length_value28 = 0;\n    long\
    \ note_length_value29 = 0;\n    long note_length_value30 = 0;\n    long note_length_value31\
    \ = 0;\n    long note_length_value32 = 0;\n    long note_length_value33 = 0;\n\
    \    long note_length_value34 = 0;\n    long note_length_value35 = 0;\n    long\
    \ note_length_value36 = 0;\n    long note_length_value37 = 0;\n    long note_length_value38\
    \ = 0;\n    long note_length_value39 = 0;\n    long note_length_value40 = 0;\n\
    \    long note_length_value41 = 0;\n    long note_length_value42 = 0;\n    long\
    \ note_length_value43 = 0;\n    long note_length_value44 = 0;\n    long note_length_value45\
    \ = 0;\n    long note_length_value46 = 0;\n    long note_length_value47 = 0;\n\
    \    long note_length_value48 = 0;\n    long note_length_value49 = 0;\n    long\
    \ note_length_value50 = 0;\n    long note_length_value51 = 0;\n    long note_length_value52\
    \ = 0;\n    long note_length_value53 = 0;\n    long note_length_value54 = 0;\n\
    \    long note_length_value55 = 0;\n    long note_length_value56 = 0;\n    long\
    \ note_length_value57 = 0;\n    long note_length_value58 = 0;\n    long note_length_value59\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp9ftwm_be.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmp9ftwm_be.cpp:16:10: error: conflicting declaration 'long int beats'\n\
    \     long beats = 0;\n          ^\n/tmp/tmp9ftwm_be.cpp:13:23: error: 'beats'\
    \ has a previous declaration as 'std::vector<long int> beats'\n     std::vector<long>\
    \ beats;\n                       ^\n/tmp/tmp9ftwm_be.cpp:18:10: error: conflicting\
    \ declaration 'long int note'\n     long note = 0;\n          ^\n/tmp/tmp9ftwm_be.cpp:14:17:\
    \ error: 'note' has a previous declaration as 'std::string note'\n     std::string\
    \ note;\n                 ^\n/tmp/tmp9ftwm_be.cpp: In function 'int main()':\n\
    /tmp/tmp9ftwm_be.cpp:83:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = parse_music;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp9ftwm_be.cpp:2:\n/tmp/tmp9ftwm_be.cpp:84:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmp9ftwm_be.cpp:85:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmp9ftwm_be.cpp:85:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmp9ftwm_be.cpp:85:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp9ftwm_be.cpp:85:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmp9ftwm_be.cpp:85:93:\
    \ note: candidates are:\nIn file include"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string current_note;\n    long current_beat = 0;\n    long\
    \ current_beats_length = 0;\n    long current_note_length = 0;\n    for (char\
    \ c : music_string) {\n        if (c == 'o') {\n            current_note = current_note.empty()\
    \ ? \"o\" : current_note;\n            current_beats_length += current_note_length;\n\
    \            current_note_length = 0;\n            current_beat = 0;\n       \
    \ } else if (c == '|') {\n            current_note = current_note.empty() ? \"\
    o\" : current_note;\n            current_beats_length += current_note_length;\n\
    \            current_note_length = 0;\n            current_beat = 1;\n       \
    \ } else if (c == ' ') {\n            current_note = current_note.empty() ? \"\
    o\" : current_note;\n            current_beats_length += current_note_length;\n\
    \            current_note_length = 0;\n        } else {\n            current_note_length++;\n\
    \        }\n    }\n    beats.push_back(current_beats_length);\n    return beats;\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpgc_ef2k_.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpgc_ef2k_.cpp:18:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : music_string) {\n                   ^\n/tmp/tmpgc_ef2k_.cpp:\
    \ In function 'int main()':\n/tmp/tmpgc_ef2k_.cpp:41:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = parse_music;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpgc_ef2k_.cpp:2:\n/tmp/tmpgc_ef2k_.cpp:42:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpgc_ef2k_.cpp:43:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpgc_ef2k_.cpp:43:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpgc_ef2k_.cpp:43:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpgc_ef2k_.cpp:43:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpgc_ef2k_.cpp:43:93:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpgc_ef2k_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long beats = 0;\n   \
    \ long notes = 0;\n    long note = 0;\n    long note_value = 0;\n    long note_value2\
    \ = 0;\n    long note_value3 = 0;\n    long note_value4 = 0;\n    long note_value5\
    \ = 0;\n    long note_value6 = 0;\n    long note_value7 = 0;\n    long note_value8\
    \ = 0;\n    long note_value9 = 0;\n    long note_value10 = 0;\n    long note_value11\
    \ = 0;\n    long note_value12 = 0;\n    long note_value13 = 0;\n    long note_value14\
    \ = 0;\n    long note_value15 = 0;\n    long note_value16 = 0;\n    long note_value17\
    \ = 0;\n    long note_value18 = 0;\n    long note_value19 = 0;\n    long note_value20\
    \ = 0;\n    long note_value21 = 0;\n    long note_value22 = 0;\n    long note_value23\
    \ = 0;\n    long note_value24 = 0;\n    long note_value25 = 0;\n    long note_value26\
    \ = 0;\n    long note_value27 = 0;\n    long note_value28 = 0;\n    long note_value29\
    \ = 0;\n    long note_value30 = 0;\n    long note_value31 = 0;\n    long note_value32\
    \ = 0;\n    long note_value33 = 0;\n    long note_value34 = 0;\n    long note_value35\
    \ = 0;\n    long note_value36 = 0;\n    long note_value37 = 0;\n    long note_value38\
    \ = 0;\n    long note_value39 = 0;\n    long note_value40 = 0;\n    long note_value41\
    \ = 0;\n    long note_value42 = 0;\n    long note_value43 = 0;\n    long note_value44\
    \ = 0;\n    long note_value45 = 0;\n    long note_value46 = 0;\n    long note_value47\
    \ = 0;\n    long note_value48 = 0;\n    long note_value49 = 0;\n    long note_value50\
    \ = 0;\n    long note_value51 = 0;\n    long note_value52 = 0;\n    long note_value53\
    \ = 0;\n    long note_value54 = 0;\n    long note_value55 = 0;\n    long note_value56\
    \ = 0;\n    long note_value57 = 0;\n    long note_value58 = 0;\n    long note_value59\
    \ = 0;\n    long note_value60 = 0;\n    long note_value61 = 0;\n    long note_value62\
    \ = 0;\n    long note_value63 = 0;\n    long note_value64 = 0;\n    long note_value65\
    \ = 0;\n    long note_value66 = 0;\n    long note_value67 = 0;\n    long note_value68\
    \ = 0;\n    long note_value69 = 0;\n    long \n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpp_02tkn7.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpp_02tkn7.cpp:16:10: error: conflicting declaration 'long int beats'\n\
    \     long beats = 0;\n          ^\n/tmp/tmpp_02tkn7.cpp:13:23: error: 'beats'\
    \ has a previous declaration as 'std::vector<long int> beats'\n     std::vector<long>\
    \ beats;\n                       ^\n/tmp/tmpp_02tkn7.cpp:18:10: error: conflicting\
    \ declaration 'long int note'\n     long note = 0;\n          ^\n/tmp/tmpp_02tkn7.cpp:14:17:\
    \ error: 'note' has a previous declaration as 'std::string note'\n     std::string\
    \ note;\n                 ^\n/tmp/tmpp_02tkn7.cpp:89:1: error: expected unqualified-id\
    \ before '}' token\n }\n ^\n/tmp/tmpp_02tkn7.cpp: In function 'int main()':\n\
    /tmp/tmpp_02tkn7.cpp:91:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = parse_music;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp_02tkn7.cpp:2:\n/tmp/tmpp_02tkn7.cpp:92:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpp_02tkn7.cpp:93:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpp_02tkn7.cpp:93:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpp_02tkn7.cpp:93:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpp_02tkn7.cpp:93:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed init"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long beats = 0;\n   \
    \ long notes = 0;\n    long last_note = 0;\n    long last_beat = 0;\n    long\
    \ last_beats = 0;\n    long last_notes = 0;\n    long last_last_note = 0;\n  \
    \  long last_last_beat = 0;\n    long last_last_beats = 0;\n    long last_last_notes\
    \ = 0;\n    long last_last_last_note = 0;\n    long last_last_last_beat = 0;\n\
    \    long last_last_last_beats = 0;\n    long last_last_last_notes = 0;\n    long\
    \ last_last_last_last_note = 0;\n    long last_last_last_last_beat = 0;\n    long\
    \ last_last_last_last_beats = 0;\n    long last_last_last_last_notes = 0;\n  \
    \  long last_last_last_last_last_note = 0;\n    long last_last_last_last_last_beat\
    \ = 0;\n    long last_last_last_last_last_beats = 0;\n    long last_last_last_last_last_notes\
    \ = 0;\n    long last_last_last_last_last_last_note = 0;\n    long last_last_last_last_last_last_beat\
    \ = 0;\n    long last_last_last_last_last_last_beats = 0;\n    long last_last_last_last_last_last_notes\
    \ = 0;\n    long last_last_last_last_last_last_last_note = 0;\n    long last_last_last_last_last_last_last_beat\
    \ = 0;\n    long last_last_last_last_last_last_last_beats = 0;\n    long last_last_last_last_last_last_last_notes\
    \ = 0;\n    long last_last_last_last_last_last_last_note = 0;\n    long last_last_last_last_last_last_last_beat\
    \ = 0;\n    long last_last_last_last_last_last_last_beats = 0;\n    long last_last_last_last_last_last_last_notes\
    \ = 0;\n    long last_last_last_last_last_last_last_last_note = 0;\n    long last_last_last_last_last_last_last_last_beat\
    \ = 0;\n    long last_last_last_last_last_last_last_last_beats = 0;\n    long\
    \ last_last_last_last_last_last_last_last_notes = 0;\n    long last_last_last_last_last_last_last_last_note\
    \ = 0;\n    long last_last_last_last_last_last_last_last_beat = 0;\n    long last_last_last_last_last_last_last_last_beats\
    \ = 0;\n    long last_last_last_last_last_last_last_last_notes = 0;\n    long\
    \ last_last_last_last_last_last_last_last_note = 0;\n    long last_last_last_last_last_last_last_last_beat\
    \ = 0;\n    long last_last_last_last_last_last_last_last_beats = 0;\n    long\
    \ last_last_last_last_last_last_last_last_notes = 0;\n    long last_last_last_last_last_last_last_last_last_note\
    \ = 0;\n    long last_last_last_last_last_last_last_last_beat = 0;\n    long \n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpjmzq2lcr.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpjmzq2lcr.cpp:16:10: error: conflicting declaration 'long int beats'\n\
    \     long beats = 0;\n          ^\n/tmp/tmpjmzq2lcr.cpp:13:23: error: 'beats'\
    \ has a previous declaration as 'std::vector<long int> beats'\n     std::vector<long>\
    \ beats;\n                       ^\n/tmp/tmpjmzq2lcr.cpp:46:10: error: redeclaration\
    \ of 'long int last_last_last_last_last_last_last_note'\n     long last_last_last_last_last_last_last_note\
    \ = 0;\n          ^\n/tmp/tmpjmzq2lcr.cpp:42:10: error: 'long int last_last_last_last_last_last_last_note'\
    \ previously declared here\n     long last_last_last_last_last_last_last_note\
    \ = 0;\n          ^\n/tmp/tmpjmzq2lcr.cpp:47:10: error: redeclaration of 'long\
    \ int last_last_last_last_last_last_last_beat'\n     long last_last_last_last_last_last_last_beat\
    \ = 0;\n          ^\n/tmp/tmpjmzq2lcr.cpp:43:10: error: 'long int last_last_last_last_last_last_last_beat'\
    \ previously declared here\n     long last_last_last_last_last_last_last_beat\
    \ = 0;\n          ^\n/tmp/tmpjmzq2lcr.cpp:48:10: error: redeclaration of 'long\
    \ int last_last_last_last_last_last_last_beats'\n     long last_last_last_last_last_last_last_beats\
    \ = 0;\n          ^\n/tmp/tmpjmzq2lcr.cpp:44:10: error: 'long int last_last_last_last_last_last_last_beats'\
    \ previously declared here\n     long last_last_last_last_last_last_last_beats\
    \ = 0;\n          ^\n/tmp/tmpjmzq2lcr.cpp:49:10: error: redeclaration of 'long\
    \ int last_last_last_last_last_last_last_notes'\n     long last_last_last_last_last_last_last_notes\
    \ = 0;\n          ^\n/tmp/tmpjmzq2lcr.cpp:45:10: error: 'long int last_last_last_last_last_last_last_notes'\
    \ previously declared here\n     long last_last_last_last_last_last_last_notes\
    \ = 0;\n          ^\n/tmp/tmpjmzq2lcr.cpp:54:10: error: redeclaration of 'long\
    \ int last_last_last_last_last_last_last_last_note'\n     long last_last_last_last_last_last_last_last_note\
    \ = 0;\n          ^\n/tmp/tmpjmzq2lcr.cpp:50:10: error: 'long int last_last_last_last_last_last_last_last_note'\
    \ previously declared here\n "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string current_note;\n    long current_beat = 0;\n    long\
    \ current_beats_length = 0;\n    long current_note_length = 0;\n    bool is_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_beat = false;\n \
    \   bool is_last_beats_length = false;\n    bool is_last_note_length = false;\n\
    \    bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n    bool is_last_note = false;\n    bool is_last_note = false;\n \
    \   bool is_last_note = false;\n    bool is_last_note = false;\n    bool is_last_note\
    \ = false;\n\n}\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\
    \")) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqecde2ep.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpqecde2ep.cpp:23:10: error: redeclaration of 'bool is_last_note'\n    \
    \ bool is_last_note = false;\n          ^\n/tmp/tmpqecde2ep.cpp:19:10: error:\
    \ 'bool is_last_note' previously declared here\n     bool is_last_note = false;\n\
    \          ^\n/tmp/tmpqecde2ep.cpp:24:10: error: redeclaration of 'bool is_last_note'\n\
    \     bool is_last_note = false;\n          ^\n/tmp/tmpqecde2ep.cpp:19:10: error:\
    \ 'bool is_last_note' previously declared here\n     bool is_last_note = false;\n\
    \          ^\n/tmp/tmpqecde2ep.cpp:25:10: error: redeclaration of 'bool is_last_note'\n\
    \     bool is_last_note = false;\n          ^\n/tmp/tmpqecde2ep.cpp:19:10: error:\
    \ 'bool is_last_note' previously declared here\n     bool is_last_note = false;\n\
    \          ^\n/tmp/tmpqecde2ep.cpp:26:10: error: redeclaration of 'bool is_last_note'\n\
    \     bool is_last_note = false;\n          ^\n/tmp/tmpqecde2ep.cpp:19:10: error:\
    \ 'bool is_last_note' previously declared here\n     bool is_last_note = false;\n\
    \          ^\n/tmp/tmpqecde2ep.cpp:27:10: error: redeclaration of 'bool is_last_note'\n\
    \     bool is_last_note = false;\n          ^\n/tmp/tmpqecde2ep.cpp:19:10: error:\
    \ 'bool is_last_note' previously declared here\n     bool is_last_note = false;\n\
    \          ^\n/tmp/tmpqecde2ep.cpp:28:10: error: redeclaration of 'bool is_last_note'\n\
    \     bool is_last_note = false;\n          ^\n/tmp/tmpqecde2ep.cpp:19:10: error:\
    \ 'bool is_last_note' previously declared here\n     bool is_last_note = false;\n\
    \          ^\n/tmp/tmpqecde2ep.cpp:29:10: error: redeclaration of 'bool is_last_note'\n\
    \     bool is_last_note = false;\n          ^\n/tmp/tmpqecde2ep.cpp:19:10: error:\
    \ 'bool is_last_note' previously declared here\n     bool is_last_note = false;\n\
    \          ^\n/tmp/tmpqecde2ep.cpp:30:10: error: redeclaration of 'bool is_last_note'\n\
    \     bool is_last_note = false;\n          ^\n/tmp/tmpqecde2ep.cpp:19:10: error:\
    \ 'bool is_last_note' previously declared here\n     bool is_last_note = false;\n\
    \          ^\n/tmp/tmpqecde2ep.cpp:31:10: error: redeclara"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long last_beat = 0;\n\
    \    bool is_note = false;\n    bool is_last_note = false;\n    bool is_last_beat\
    \ = false;\n    for (auto c : music_string) {\n        if (c == 'o') {\n     \
    \       note = \"o\";\n            is_note = true;\n            beat = 0;\n  \
    \          last_beat = 0;\n            is_last_note = false;\n            is_last_beat\
    \ = false;\n        } else if (c == '|') {\n            note = \"o|\";\n     \
    \       is_note = true;\n            beat = 0;\n            last_beat = 0;\n \
    \           is_last_note = false;\n            is_last_beat = false;\n       \
    \ } else if (c == ' ') {\n            note = \".\";\n            is_note = true;\n\
    \            beat = 0;\n            last_beat = 0;\n            is_last_note =\
    \ false;\n            is_last_beat = false;\n        } else if (c == '.') {\n\
    \            note = \".\";\n            is_note = true;\n            beat = 0;\n\
    \            last_beat = 0;\n            is_last_note = false;\n            is_last_beat\
    \ = false;\n        } else if (c == 'o|') {\n            note = \"o|\";\n    \
    \        is_note = true;\n            beat = 0;\n            last_beat = 0;\n\
    \            is_last_note = false;\n            is_last_beat = false;\n      \
    \  } else if (c == '.|') {\n            note = \".|\";\n            is_note =\
    \ true;\n            beat = 0;\n            last_beat = 0;\n            is_last_note\
    \ = false;\n            is_last_beat = false;\n        } else if (c == '|') {\n\
    \            note = \"o|\";\n            is_note = true;\n            beat = 0;\n\
    \            last_beat = 0;\n            is_last_note = false;\n            is_last_beat\
    \ = false;\n        } else if (c == 'o|.') {\n            note = \"o|\";\n   \
    \         is_note = true;\n            beat = 0;\n            last_beat = 0;\n\
    \            is_last_note = false;\n            is_last_beat = false;\n      \
    \  } else if (c == 'o|.|') {\n            note = \"o|\";\n            is_note\
    \ = true;\n            beat = 0;\n            last_beat = 0;\n            is_last_note\
    \ = false;\n            is_last_beat = false;\n        } else if (c == 'o|.|.')\
    \ {\n            note = \"o|\";\n            is_note = true;\n            beat\
    \ = 0;\n            last_beat = 0;\n            is_last_note = false;\n      \
    \      is_last_beat = false;\n        } else if (c == 'o|.|.|') {\n          \
    \  note = \"o|\";\n            is_note = true;\n            beat = 0;\n      \
    \      last_beat = 0;\n            is_last_note = false;\n            is_last_beat\
    \ = false;\n        } else if (c == 'o|.|.|.') {\n            note = \"o|\";\n\
    \            is_note = true;\n            beat = 0;\n            last_beat = 0;\n\
    \            is_last_note = false;\n            is_last_beat = false;\n      \
    \  } else if (c == 'o|.|.|.|') {\n            note = \"o|\";\n            is_note\n\
    }\nint main() {\n    auto candidate = parse_music;\n    assert(candidate((\"\"\
    )) == (std::vector<long>()));\n    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpvdwqe6vg.cpp:49:25: warning: multi-character character constant\
    \ [-Wmultichar]\n         } else if (c == 'o|') {\n                         ^\n\
    /tmp/tmpvdwqe6vg.cpp:56:25: warning: multi-character character constant [-Wmultichar]\n\
    \         } else if (c == '.|') {\n                         ^\n/tmp/tmpvdwqe6vg.cpp:70:25:\
    \ warning: multi-character character constant [-Wmultichar]\n         } else if\
    \ (c == 'o|.') {\n                         ^\n/tmp/tmpvdwqe6vg.cpp:77:25: warning:\
    \ multi-character character constant [-Wmultichar]\n         } else if (c == 'o|.|')\
    \ {\n                         ^\n/tmp/tmpvdwqe6vg.cpp:84:25: warning: character\
    \ constant too long for its type [enabled by default]\n         } else if (c ==\
    \ 'o|.|.') {\n                         ^\n/tmp/tmpvdwqe6vg.cpp:91:25: warning:\
    \ character constant too long for its type [enabled by default]\n         } else\
    \ if (c == 'o|.|.|') {\n                         ^\n/tmp/tmpvdwqe6vg.cpp:98:25:\
    \ warning: character constant too long for its type [enabled by default]\n   \
    \      } else if (c == 'o|.|.|.') {\n                         ^\n/tmp/tmpvdwqe6vg.cpp:105:25:\
    \ warning: character constant too long for its type [enabled by default]\n   \
    \      } else if (c == 'o|.|.|.|') {\n                         ^\n/tmp/tmpvdwqe6vg.cpp:\
    \ In function 'std::vector<long int> parse_music(std::string)':\n/tmp/tmpvdwqe6vg.cpp:20:15:\
    \ error: 'c' does not name a type\n     for (auto c : music_string) {\n      \
    \         ^\n/tmp/tmpvdwqe6vg.cpp:116:1: error: expected ';' at end of input\n\
    \ }\n ^\n/tmp/tmpvdwqe6vg.cpp:116:1: error: expected primary-expression at end\
    \ of input\n/tmp/tmpvdwqe6vg.cpp:116:1: error: expected ';' at end of input\n\
    /tmp/tmpvdwqe6vg.cpp:116:1: error: expected primary-expression at end of input\n\
    /tmp/tmpvdwqe6vg.cpp:116:1: error: expected ')' at end of input\n/tmp/tmpvdwqe6vg.cpp:116:1:\
    \ error: expected statement at end of input\n/tmp/tmpvdwqe6vg.cpp:116:1: error:\
    \ expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long beats = 0;\n   \
    \ long notes = 0;\n    long note = 0;\n    long notes_length = 0;\n    long notes_length2\
    \ = 0;\n    long notes_length3 = 0;\n    long notes_length4 = 0;\n    long notes_length5\
    \ = 0;\n    long notes_length6 = 0;\n    long notes_length7 = 0;\n    long notes_length8\
    \ = 0;\n    long notes_length9 = 0;\n    long notes_length10 = 0;\n    long notes_length11\
    \ = 0;\n    long notes_length12 = 0;\n    long notes_length13 = 0;\n    long notes_length14\
    \ = 0;\n    long notes_length15 = 0;\n    long notes_length16 = 0;\n    long notes_length17\
    \ = 0;\n    long notes_length18 = 0;\n    long notes_length19 = 0;\n    long notes_length20\
    \ = 0;\n    long notes_length21 = 0;\n    long notes_length22 = 0;\n    long notes_length23\
    \ = 0;\n    long notes_length24 = 0;\n    long notes_length25 = 0;\n    long notes_length26\
    \ = 0;\n    long notes_length27 = 0;\n    long notes_length28 = 0;\n    long notes_length29\
    \ = 0;\n    long notes_length30 = 0;\n    long notes_length31 = 0;\n    long notes_length32\
    \ = 0;\n    long notes_length33 = 0;\n    long notes_length34 = 0;\n    long notes_length35\
    \ = 0;\n    long notes_length36 = 0;\n    long notes_length37 = 0;\n    long notes_length38\
    \ = 0;\n    long notes_length39 = 0;\n    long notes_length40 = 0;\n    long notes_length41\
    \ = 0;\n    long notes_length42 = 0;\n    long notes_length43 = 0;\n    long notes_length44\
    \ = 0;\n    long notes_length45 = 0;\n    long notes_length46 = 0;\n    long notes_length47\
    \ = 0;\n    long notes_length48 = 0;\n    long notes_length49 = 0;\n    long notes_length50\
    \ = 0;\n    long notes_length51 = 0;\n    long notes_length52 = 0;\n    long notes_length53\
    \ = 0;\n    long notes_length54 = 0;\n    long notes_length55 = 0;\n    long notes_length56\
    \ = 0;\n    long notes_length57 = 0;\n    long notes_length58 = 0;\n    long notes_length59\
    \ = 0;\n    long notes_length60 = 0;\n    long notes_length\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5rgf0e2q.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmp5rgf0e2q.cpp:16:10: error: conflicting declaration 'long int beats'\n\
    \     long beats = 0;\n          ^\n/tmp/tmp5rgf0e2q.cpp:13:23: error: 'beats'\
    \ has a previous declaration as 'std::vector<long int> beats'\n     std::vector<long>\
    \ beats;\n                       ^\n/tmp/tmp5rgf0e2q.cpp:18:10: error: conflicting\
    \ declaration 'long int note'\n     long note = 0;\n          ^\n/tmp/tmp5rgf0e2q.cpp:14:17:\
    \ error: 'note' has a previous declaration as 'std::string note'\n     std::string\
    \ note;\n                 ^\n/tmp/tmp5rgf0e2q.cpp:80:1: error: expected initializer\
    \ before '}' token\n }\n ^\n/tmp/tmp5rgf0e2q.cpp: In function 'int main()':\n\
    /tmp/tmp5rgf0e2q.cpp:82:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = parse_music;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5rgf0e2q.cpp:2:\n/tmp/tmp5rgf0e2q.cpp:83:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmp5rgf0e2q.cpp:84:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmp5rgf0e2q.cpp:84:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmp5rgf0e2q.cpp:84:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmp5rgf0e2q.cpp:84:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initial"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long last_beat = 0;\n\
    \    bool is_note = false;\n    for (auto c : music_string) {\n        if (c ==\
    \ 'o') {\n            note = note.empty() ? \"o\" : note + \"o\";\n          \
    \  beat = 0;\n            is_note = true;\n            last_beat = 0;\n      \
    \  } else if (c == '|') {\n            note = note.empty() ? \"o\" : note + \"\
    |\";\n            beat = 0;\n            is_note = true;\n            last_beat\
    \ = 0;\n        } else if (c == ' ') {\n            note = note.empty() ? \"o\"\
    \ : note + \" \";\n            beat = 0;\n            is_note = true;\n      \
    \      last_beat = 0;\n        } else if (c == '.') {\n            note = note.empty()\
    \ ? \"o\" : note + \".\";\n            beat = 0;\n            is_note = true;\n\
    \            last_beat = 0;\n        } else if (c == '.') {\n            note\
    \ = note.empty() ? \"o\" : note + \".\";\n            beat = 0;\n            is_note\
    \ = true;\n            last_beat = 0;\n        } else if (c == '.') {\n      \
    \      note = note.empty() ? \"o\" : note + \".\";\n            beat = 0;\n  \
    \          is_note = true;\n            last_beat = 0;\n        } else if (c ==\
    \ '.') {\n            note = note.empty() ? \"o\" : note + \".\";\n          \
    \  beat = 0;\n            is_note = true;\n            last_beat = 0;\n      \
    \  } else if (c == '.') {\n            note = note.empty() ? \"o\" : note + \"\
    .\";\n            beat = 0;\n            is_note = true;\n            last_beat\
    \ = 0;\n        } else if (c == '.') {\n            note = note.empty() ? \"o\"\
    \ : note + \".\";\n            beat = 0;\n            is_note = true;\n      \
    \      last_beat = 0;\n        } else if (c == '.') {\n            note = note.empty()\
    \ ? \"o\" : note + \".\";\n            beat = 0;\n            is_note = true;\n\
    \            last_beat = 0;\n        } else if (c == '.') {\n            note\
    \ = note.empty() ? \"o\" : note + \".\";\n            beat = 0;\n            is_note\
    \ = true;\n            last_beat = 0;\n        } else if (c == '.') {\n      \
    \      note = note.empty() ? \"o\" : note + \".\";\n            beat = 0;\n  \
    \          is_note = true;\n            last_beat = 0;\n        } else if (c ==\
    \ '.') {\n            note = note.empty() ? \"o\" : note + \".\";\n          \
    \  beat = 0;\n            is_note = true;\n            last_beat = 0;\n      \
    \  } else if (c == '.') {\n            note = note.empty() ? \"o\" : note + \"\
    .\";\n            beat = 0;\n            is_note = true;\n            last_beat\
    \ = 0;\n        } else if (c == '.') {\n            note = note.empty() ? \"o\"\
    \ : note + \".\";\n            beat = 0;\n            is_\n}\nint main() {\n \
    \   auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi8a0pdnl.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpi8a0pdnl.cpp:18:15: error: 'c' does not name a type\n     for (auto c\
    \ : music_string) {\n               ^\n/tmp/tmpi8a0pdnl.cpp:101:1: error: expected\
    \ ';' at end of input\n }\n ^\n/tmp/tmpi8a0pdnl.cpp:101:1: error: expected primary-expression\
    \ at end of input\n/tmp/tmpi8a0pdnl.cpp:101:1: error: expected ';' at end of input\n\
    /tmp/tmpi8a0pdnl.cpp:101:1: error: expected primary-expression at end of input\n\
    /tmp/tmpi8a0pdnl.cpp:101:1: error: expected ')' at end of input\n/tmp/tmpi8a0pdnl.cpp:101:1:\
    \ error: expected statement at end of input\n/tmp/tmpi8a0pdnl.cpp:101:1: error:\
    \ expected '}' at end of input\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long last_beat = 0;\n\
    \    long last_note = 0;\n    long note_count = 0;\n    long note_length = 0;\n\
    \    bool is_last_note = false;\n    bool is_last_note_in_chord = false;\n   \
    \ bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note_in_chord = false;\n    bool is_last_note_in_chord = false;\n\
    \    bool is_last_note\n}\nint main() {\n    auto candidate = parse_music;\n \
    \   assert(candidate((\"\")) == (std::vector<long>()));\n    assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \   assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1, (long)1,\
    \ (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\")) == (std::vector<long>({(long)2,\
    \ (long)2, (long)1, (long)1, (long)4, (long)4, (long)4, (long)4})));\n    assert(candidate((\"\
    o| .| o| .| o o| o o|\")) == (std::vector<long>({(long)2, (long)1, (long)2, (long)1,\
    \ (long)4, (long)2, (long)4, (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp54t3p2pu.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmp54t3p2pu.cpp:22:10: error: redeclaration of 'bool is_last_note_in_chord'\n\
    \     bool is_last_note_in_chord = false;\n          ^\n/tmp/tmp54t3p2pu.cpp:21:10:\
    \ error: 'bool is_last_note_in_chord' previously declared here\n     bool is_last_note_in_chord\
    \ = false;\n          ^\n/tmp/tmp54t3p2pu.cpp:23:10: error: redeclaration of 'bool\
    \ is_last_note_in_chord'\n     bool is_last_note_in_chord = false;\n         \
    \ ^\n/tmp/tmp54t3p2pu.cpp:21:10: error: 'bool is_last_note_in_chord' previously\
    \ declared here\n     bool is_last_note_in_chord = false;\n          ^\n/tmp/tmp54t3p2pu.cpp:24:10:\
    \ error: redeclaration of 'bool is_last_note_in_chord'\n     bool is_last_note_in_chord\
    \ = false;\n          ^\n/tmp/tmp54t3p2pu.cpp:21:10: error: 'bool is_last_note_in_chord'\
    \ previously declared here\n     bool is_last_note_in_chord = false;\n       \
    \   ^\n/tmp/tmp54t3p2pu.cpp:25:10: error: redeclaration of 'bool is_last_note_in_chord'\n\
    \     bool is_last_note_in_chord = false;\n          ^\n/tmp/tmp54t3p2pu.cpp:21:10:\
    \ error: 'bool is_last_note_in_chord' previously declared here\n     bool is_last_note_in_chord\
    \ = false;\n          ^\n/tmp/tmp54t3p2pu.cpp:26:10: error: redeclaration of 'bool\
    \ is_last_note_in_chord'\n     bool is_last_note_in_chord = false;\n         \
    \ ^\n/tmp/tmp54t3p2pu.cpp:21:10: error: 'bool is_last_note_in_chord' previously\
    \ declared here\n     bool is_last_note_in_chord = false;\n          ^\n/tmp/tmp54t3p2pu.cpp:27:10:\
    \ error: redeclaration of 'bool is_last_note_in_chord'\n     bool is_last_note_in_chord\
    \ = false;\n          ^\n/tmp/tmp54t3p2pu.cpp:21:10: error: 'bool is_last_note_in_chord'\
    \ previously declared here\n     bool is_last_note_in_chord = false;\n       \
    \   ^\n/tmp/tmp54t3p2pu.cpp:28:10: error: redeclaration of 'bool is_last_note_in_chord'\n\
    \     bool is_last_note_in_chord = false;\n          ^\n/tmp/tmp54t3p2pu.cpp:21:10:\
    \ error: 'bool is_last_note_in_chord' previously declared here\n     bool is_last_note_in_chord\
    \ = false;\n          ^\n/tmp/tmp54t3p2pu.cpp:29:10: erro"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long note_count = 0;\n\
    \    bool is_note = false;\n    for (char c : music_string) {\n        if (c ==\
    \ 'o') {\n            is_note = true;\n            note_count = 0;\n         \
    \   beat = 0;\n            note = c;\n        } else if (c == '|') {\n       \
    \     is_note = false;\n            note_count = 0;\n            beat = 0;\n \
    \           note = c;\n        } else if (is_note) {\n            note_count +=\
    \ 1;\n            beat += note_count;\n            note_count = 0;\n         \
    \   note = c;\n        } else {\n            beat += 1;\n        }\n    }\n  \
    \  beats.push_back(beat);\n    return beats;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpl19u4n0a.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpl19u4n0a.cpp:18:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : music_string) {\n                   ^\n/tmp/tmpl19u4n0a.cpp:\
    \ In function 'int main()':\n/tmp/tmpl19u4n0a.cpp:42:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = parse_music;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpl19u4n0a.cpp:2:\n/tmp/tmpl19u4n0a.cpp:43:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpl19u4n0a.cpp:44:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpl19u4n0a.cpp:44:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpl19u4n0a.cpp:44:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpl19u4n0a.cpp:44:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpl19u4n0a.cpp:44:93:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpl19u4n0a.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long last_beat = 0;\n\
    \    bool last_note = false;\n    for (char c : music_string) {\n        if (c\
    \ == 'o') {\n            if (last_note) {\n                beats.push_back(beat\
    \ - last_beat);\n                last_beat = 0;\n                last_note = false;\n\
    \            }\n            beat = 0;\n            note = \"o\";\n           \
    \ last_note = true;\n        } else if (c == '|') {\n            if (last_note)\
    \ {\n                beats.push_back(beat - last_beat);\n                last_beat\
    \ = 0;\n                last_note = false;\n            }\n            beat =\
    \ 0;\n            note = \"o|\";\n            last_note = true;\n        } else\
    \ if (c == ' ') {\n            if (last_note) {\n                beats.push_back(beat\
    \ - last_beat);\n                last_beat = 0;\n                last_note = false;\n\
    \            }\n            beat = 0;\n            note = \".\";\n           \
    \ last_note = true;\n        } else {\n            beat += 1;\n            last_note\
    \ = false;\n        }\n    }\n    if (last_note) {\n        beats.push_back(beat\
    \ - last_beat);\n    }\n    return beats;\n}\nint main() {\n    auto candidate\
    \ = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n  \
    \  assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4,\
    \ (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnnmmgtdc.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpnnmmgtdc.cpp:18:19: error: range-based 'for' loops are not allowed in\
    \ C++98 mode\n     for (char c : music_string) {\n                   ^\n/tmp/tmpnnmmgtdc.cpp:\
    \ In function 'int main()':\n/tmp/tmpnnmmgtdc.cpp:57:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = parse_music;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnnmmgtdc.cpp:2:\n/tmp/tmpnnmmgtdc.cpp:58:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpnnmmgtdc.cpp:59:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpnnmmgtdc.cpp:59:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpnnmmgtdc.cpp:59:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpnnmmgtdc.cpp:59:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpnnmmgtdc.cpp:59:93:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpnnmmgtdc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long last_beat = 0;\n\
    \    long last_note = 0;\n    long last_note_length = 0;\n    long note_length\
    \ = 0;\n    long note_length2 = 0;\n    long note_length3 = 0;\n    long note_length4\
    \ = 0;\n    long note_length5 = 0;\n    long note_length6 = 0;\n    long note_length7\
    \ = 0;\n    long note_length8 = 0;\n    long note_length9 = 0;\n    long note_length10\
    \ = 0;\n    long note_length11 = 0;\n    long note_length12 = 0;\n    long note_length13\
    \ = 0;\n    long note_length14 = 0;\n    long note_length15 = 0;\n    long note_length16\
    \ = 0;\n    long note_length17 = 0;\n    long note_length18 = 0;\n    long note_length19\
    \ = 0;\n    long note_length20 = 0;\n    long note_length21 = 0;\n    long note_length22\
    \ = 0;\n    long note_length23 = 0;\n    long note_length24 = 0;\n    long note_length25\
    \ = 0;\n    long note_length26 = 0;\n    long note_length27 = 0;\n    long note_length28\
    \ = 0;\n    long note_length29 = 0;\n    long note_length30 = 0;\n    long note_length31\
    \ = 0;\n    long note_length32 = 0;\n    long note_length33 = 0;\n    long note_length34\
    \ = 0;\n    long note_length35 = 0;\n    long note_length36 = 0;\n    long note_length37\
    \ = 0;\n    long note_length38 = 0;\n    long note_length39 = 0;\n    long note_length40\
    \ = 0;\n    long note_length41 = 0;\n    long note_length42 = 0;\n    long note_length43\
    \ = 0;\n    long note_length44 = 0;\n    long note_length45 = 0;\n    long note_length46\
    \ = 0;\n    long note_length47 = 0;\n    long note_length48 = 0;\n    long note_length49\
    \ = 0;\n    long note_length50 = 0;\n    long note_length51 = 0;\n    long note_length52\
    \ = 0;\n    long note_length53 = 0;\n    long note_length54 = 0;\n    long note_length55\
    \ = 0;\n    long note_length56 = 0;\n    long note_length57 = 0;\n    long note_length58\
    \ = 0;\n    long note_length59 = 0;\n    long note_length60 = 0;\n    long note_length61\
    \ = 0;\n    long note_length62 = 0;\n    long note_length63 = 0;\n    long note_length64\
    \ = 0;\n    long note_length65 = 0;\n    long note_length66 = 0;\n    long note_length67\
    \ = 0;\n    long note_length68 = 0;\n    long note_length69\n}\nint main() {\n\
    \    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv_mmki58.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpv_mmki58.cpp:88:1: error: expected initializer before '}' token\n }\n\
    \ ^\n/tmp/tmpv_mmki58.cpp: In function 'int main()':\n/tmp/tmpv_mmki58.cpp:90:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = parse_music;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpv_mmki58.cpp:2:\n/tmp/tmpv_mmki58.cpp:91:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpv_mmki58.cpp:92:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpv_mmki58.cpp:92:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpv_mmki58.cpp:92:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpv_mmki58.cpp:92:93: error: no matching function for call to 'std::vector<long\
    \ int>::vector(<brace-enclosed initializer list>)'\n/tmp/tmpv_mmki58.cpp:92:93:\
    \ note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpv_mmki58.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterato"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Input to this function\
    \ is a string representing musical notes in a special ASCII format.\n// Your task\
    \ is to parse this string and return list of integers corresponding to how many\
    \ beats does each\n// not last.\n// Here is a legend:\n// 'o' - whole note, lasts\
    \ four beats\n// 'o|' - half note, lasts two beats\n// '.|' - quater note, lasts\
    \ one beat\n// >>> parse_music((\"o o| .| o| o| .| .| .| .| o o\"))\n// (std::vector<long>({(long)4,\
    \ (long)2, (long)1, (long)2, (long)2, (long)1, (long)1, (long)1, (long)1, (long)4,\
    \ (long)4}))\nstd::vector<long> parse_music(std::string music_string) {\n    std::vector<long>\
    \ beats;\n    std::string note;\n    long beat = 0;\n    long last_beat = 0;\n\
    \    long last_note = 0;\n    for (auto c : music_string) {\n        if (c ==\
    \ 'o') {\n            note = note.empty() ? \"o\" : note;\n            beats.push_back(beat);\n\
    \            beat = 0;\n            last_note = note;\n            last_beat =\
    \ beat;\n        } else if (c == '|') {\n            note = note.empty() ? \"\
    o\" : note;\n            beats.push_back(beat);\n            beat = 0;\n     \
    \       last_note = note;\n            last_beat = beat;\n        } else if (c\
    \ == ' ') {\n            note = note.empty() ? \"o\" : note;\n            beats.push_back(beat);\n\
    \            beat = 0;\n            last_note = note;\n            last_beat =\
    \ beat;\n        } else {\n            beat += 1;\n            note += c;\n  \
    \      }\n    }\n    beats.push_back(beat);\n    return beats;\n}\nint main()\
    \ {\n    auto candidate = parse_music;\n    assert(candidate((\"\")) == (std::vector<long>()));\n\
    \    assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\".| .| .| .|\")) == (std::vector<long>({(long)1,\
    \ (long)1, (long)1, (long)1})));\n    assert(candidate((\"o| o| .| .| o o o o\"\
    )) == (std::vector<long>({(long)2, (long)2, (long)1, (long)1, (long)4, (long)4,\
    \ (long)4, (long)4})));\n    assert(candidate((\"o| .| o| .| o o| o o|\")) ==\
    \ (std::vector<long>({(long)2, (long)1, (long)2, (long)1, (long)4, (long)2, (long)4,\
    \ (long)2})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpngz4juq0.cpp: In function 'std::vector<long int> parse_music(std::string)':\n\
    /tmp/tmpngz4juq0.cpp:18:15: error: 'c' does not name a type\n     for (auto c\
    \ : music_string) {\n               ^\n/tmp/tmpngz4juq0.cpp:42:5: error: expected\
    \ ';' before 'beats'\n     beats.push_back(beat);\n     ^\n/tmp/tmpngz4juq0.cpp:42:25:\
    \ error: could not convert 'beats.std::vector<_Tp, _Alloc>::push_back<long int,\
    \ std::allocator<long int> >((*(const value_type*)(& beat)))' from 'void' to 'bool'\n\
    \     beats.push_back(beat);\n                         ^\n/tmp/tmpngz4juq0.cpp:43:5:\
    \ error: expected primary-expression before 'return'\n     return beats;\n   \
    \  ^\n/tmp/tmpngz4juq0.cpp:43:5: error: expected ')' before 'return'\n/tmp/tmpngz4juq0.cpp:\
    \ In function 'int main()':\n/tmp/tmpngz4juq0.cpp:46:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = parse_music;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpngz4juq0.cpp:2:\n/tmp/tmpngz4juq0.cpp:47:26: error:\
    \ 'candidate' was not declared in this scope\n     assert(candidate((\"\")) ==\
    \ (std::vector<long>()));\n                          ^\n/tmp/tmpngz4juq0.cpp:48:56:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((\"o o o o\")) == (std::vector<long>({(long)4,\
    \ (long)4, (long)4, (long)4})));\n                                           \
    \             ^\n/tmp/tmpngz4juq0.cpp:48:93: warning: extended initializer lists\
    \ only available with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((\"\
    o o o o\")) == (std::vector<long>({(long)4, (long)4, (long)4, (long)4})));\n \
    \                                                                            \
    \                ^\n/tmp/tmpngz4juq0.cpp:48:93: warning: extended initializer\
    \ lists only available with -std=c++11 or -std=gnu++11 [enabled by default]\n\
    /tmp/tmpngz4juq0.cpp:48:93: error: no matching function for call to 'std::vector<long\
    \ in"
  stdout: ''
