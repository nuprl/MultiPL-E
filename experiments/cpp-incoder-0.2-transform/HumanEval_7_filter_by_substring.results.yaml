language: cpp
name: HumanEval_7_filter_by_substring
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jwemkor.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp5jwemkor.cpp:10:16: error: ISO C++ forbids declaration of 's' with no\
    \ type [-fpermissive]\n     for (auto &s : strings) {\n                ^\n/tmp/tmp5jwemkor.cpp:10:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &s : strings) {\n                    ^\n/tmp/tmp5jwemkor.cpp:11:15: error: request\
    \ for member 'find' in 's', which is of non-class type 'int'\n         if (s.find(substring)\
    \ != std::string::npos) {\n               ^\n/tmp/tmp5jwemkor.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp5jwemkor.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::ba"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jwemkor.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp5jwemkor.cpp:10:16: error: ISO C++ forbids declaration of 's' with no\
    \ type [-fpermissive]\n     for (auto &s : strings) {\n                ^\n/tmp/tmp5jwemkor.cpp:10:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &s : strings) {\n                    ^\n/tmp/tmp5jwemkor.cpp:11:15: error: request\
    \ for member 'find' in 's', which is of non-class type 'int'\n         if (s.find(substring)\
    \ != std::string::npos) {\n               ^\n/tmp/tmp5jwemkor.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp5jwemkor.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::ba"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jwemkor.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp5jwemkor.cpp:10:16: error: ISO C++ forbids declaration of 's' with no\
    \ type [-fpermissive]\n     for (auto &s : strings) {\n                ^\n/tmp/tmp5jwemkor.cpp:10:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &s : strings) {\n                    ^\n/tmp/tmp5jwemkor.cpp:11:15: error: request\
    \ for member 'find' in 's', which is of non-class type 'int'\n         if (s.find(substring)\
    \ != std::string::npos) {\n               ^\n/tmp/tmp5jwemkor.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp5jwemkor.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::ba"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jwemkor.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp5jwemkor.cpp:10:16: error: ISO C++ forbids declaration of 's' with no\
    \ type [-fpermissive]\n     for (auto &s : strings) {\n                ^\n/tmp/tmp5jwemkor.cpp:10:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &s : strings) {\n                    ^\n/tmp/tmp5jwemkor.cpp:11:15: error: request\
    \ for member 'find' in 's', which is of non-class type 'int'\n         if (s.find(substring)\
    \ != std::string::npos) {\n               ^\n/tmp/tmp5jwemkor.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp5jwemkor.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::ba"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jwemkor.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp5jwemkor.cpp:10:16: error: ISO C++ forbids declaration of 's' with no\
    \ type [-fpermissive]\n     for (auto &s : strings) {\n                ^\n/tmp/tmp5jwemkor.cpp:10:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &s : strings) {\n                    ^\n/tmp/tmp5jwemkor.cpp:11:15: error: request\
    \ for member 'find' in 's', which is of non-class type 'int'\n         if (s.find(substring)\
    \ != std::string::npos) {\n               ^\n/tmp/tmp5jwemkor.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp5jwemkor.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::ba"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &string : strings) {\n        if (string.find(substring) != std::string::npos)\
    \ {\n            result.push_back(string);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcid_8n19.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmpcid_8n19.cpp:10:16: error: ISO C++ forbids declaration of 'string' with\
    \ no type [-fpermissive]\n     for (auto &string : strings) {\n              \
    \  ^\n/tmp/tmpcid_8n19.cpp:10:25: error: range-based 'for' loops are not allowed\
    \ in C++98 mode\n     for (auto &string : strings) {\n                       \
    \  ^\n/tmp/tmpcid_8n19.cpp:11:20: error: request for member 'find' in 'string',\
    \ which is of non-class type 'int'\n         if (string.find(substring) != std::string::npos)\
    \ {\n                    ^\n/tmp/tmpcid_8n19.cpp:12:36: error: invalid user-defined\
    \ conversion from 'int' to 'const value_type& {aka const std::basic_string<char>&}'\
    \ [-fpermissive]\n             result.push_back(string);\n                   \
    \                 ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmpcid_8n19.cpp:12:36:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(string);\n                                    ^\nIn\
    \ file included from /usr/include/c++/4.8.2/string:53:0,\n                 from\
    \ /usr/include/c++/4.8.2/bitset:47,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmpcid_8n19.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argume"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Filter an input list of\
    \ strings only for ones that contain given substring\n// >>> filter_by_substring((std::vector<std::string>()),\
    \ (\"a\"))\n// (std::vector<std::string>())\n// >>> filter_by_substring((std::vector<std::string>({(std::string)\"\
    abc\", (std::string)\"bacd\", (std::string)\"cde\", (std::string)\"array\"})),\
    \ (\"a\"))\n// (std::vector<std::string>({(std::string)\"abc\", (std::string)\"\
    bacd\", (std::string)\"array\"}))\nstd::vector<std::string> filter_by_substring(std::vector<std::string>\
    \ strings, std::string substring) {\n    std::vector<std::string> result;\n  \
    \  for (auto &s : strings) {\n        if (s.find(substring) != std::string::npos)\
    \ {\n            result.push_back(s);\n        }\n    }\n    return result;\n\
    }\nint main() {\n    auto candidate = filter_by_substring;\n    assert(candidate((std::vector<std::string>()),\
    \ (\"john\")) == (std::vector<std::string>()));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"xxy\", (std::string)\"john doe\",\
    \ (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xxx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"xxxAAA\", (std::string)\"xxx\"})));\n    assert(candidate((std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"asd\", (std::string)\"aaaxxy\", (std::string)\"john doe\"\
    , (std::string)\"xxxAAA\", (std::string)\"xxx\"})), (\"xx\")) == (std::vector<std::string>({(std::string)\"\
    xxx\", (std::string)\"aaaxxy\", (std::string)\"xxxAAA\", (std::string)\"xxx\"\
    })));\n    assert(candidate((std::vector<std::string>({(std::string)\"grunt\"\
    , (std::string)\"trumpet\", (std::string)\"prune\", (std::string)\"gruesome\"\
    })), (\"run\")) == (std::vector<std::string>({(std::string)\"grunt\", (std::string)\"\
    prune\"})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5jwemkor.cpp: In function 'std::vector<std::basic_string<char>\
    \ > filter_by_substring(std::vector<std::basic_string<char> >, std::string)':\n\
    /tmp/tmp5jwemkor.cpp:10:16: error: ISO C++ forbids declaration of 's' with no\
    \ type [-fpermissive]\n     for (auto &s : strings) {\n                ^\n/tmp/tmp5jwemkor.cpp:10:20:\
    \ error: range-based 'for' loops are not allowed in C++98 mode\n     for (auto\
    \ &s : strings) {\n                    ^\n/tmp/tmp5jwemkor.cpp:11:15: error: request\
    \ for member 'find' in 's', which is of non-class type 'int'\n         if (s.find(substring)\
    \ != std::string::npos) {\n               ^\n/tmp/tmp5jwemkor.cpp:12:31: error:\
    \ invalid user-defined conversion from 'int' to 'const value_type& {aka const\
    \ std::basic_string<char>&}' [-fpermissive]\n             result.push_back(s);\n\
    \                               ^\nIn file included from /usr/include/c++/4.8.2/string:53:0,\n\
    \                 from /usr/include/c++/4.8.2/bitset:47,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n             \
    \    from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ note: candidate is: std::basic_string<_CharT, _Traits, _Alloc>::basic_string(const\
    \ _CharT*, const _Alloc&) [with _CharT = char; _Traits = std::char_traits<char>;\
    \ _Alloc = std::allocator<char>] <near match>\n     basic_string<_CharT, _Traits,\
    \ _Alloc>::\n     ^\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5: note:\
    \   no known conversion for argument 1 from 'int' to 'const char*'\n/tmp/tmp5jwemkor.cpp:12:31:\
    \ error: invalid conversion from 'int' to 'const char*' [-fpermissive]\n     \
    \        result.push_back(s);\n                               ^\nIn file included\
    \ from /usr/include/c++/4.8.2/string:53:0,\n                 from /usr/include/c++/4.8.2/bitset:47,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:65,\n\
    \                 from /tmp/tmp5jwemkor.cpp:2:\n/usr/include/c++/4.8.2/bits/basic_string.tcc:212:5:\
    \ error:   initializing argument 1 of 'std::basic_string<_CharT, _Traits, _Alloc>::ba"
  stdout: ''
