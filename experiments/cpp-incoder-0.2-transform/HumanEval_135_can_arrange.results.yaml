language: cpp
name: HumanEval_135_can_arrange
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // Your code here\n  \
    \  long ans = -1;\n    long curr = 0;\n    long max = 0;\n    long min = 0;\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n  \
    \          max = arr[i];\n            ans = i;\n        }\n        if (arr[i]\
    \ < min) {\n            min = arr[i];\n        }\n    }\n    if (ans == -1) {\n\
    \        return -1;\n    }\n    long diff = max - min;\n    for (long i = 0; i\
    \ < arr.size(); i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n\
    \            ans = i;\n        }\n        if (arr[i] < min) {\n            min\
    \ = arr[i];\n        }\n    }\n    if (diff == 0) {\n        return ans;\n   \
    \ }\n    long mid = min + (diff / 2);\n    long left = 0;\n    long right = arr.size()\
    \ - 1;\n    while (left < right) {\n        while (arr[left] < mid) {\n      \
    \      left++;\n        }\n        while (arr[right] > mid) {\n            right--;\n\
    \        }\n        if (left < right) {\n            long temp = arr[left];\n\
    \            arr[left] = arr[right];\n            arr[right] = temp;\n       \
    \     left++;\n            right--;\n        }\n    }\n    return ans;\n}\nint\
    \ main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpiqu8hex_.cpp: In function 'int main()':\n/tmp/tmpiqu8hex_.cpp:64:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiqu8hex_.cpp:2:\n/tmp/tmpiqu8hex_.cpp:65:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpiqu8hex_.cpp:65:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpiqu8hex_.cpp:65:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpiqu8hex_.cpp:65:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpiqu8hex_.cpp:65:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpiqu8hex_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpiqu8hex_.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    long\
    \ max = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            ans = i;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_sdyb39f.cpp: In function 'int main()':\n/tmp/tmp_sdyb39f.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_sdyb39f.cpp:2:\n/tmp/tmp_sdyb39f.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp_sdyb39f.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp_sdyb39f.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_sdyb39f.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_sdyb39f.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_sdyb39f.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_sdyb39f.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // Your code here\n  \
    \  long ans = -1;\n    long max = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ ans = i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfyki1kvm.cpp: In function 'int main()':\n/tmp/tmpfyki1kvm.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfyki1kvm.cpp:2:\n/tmp/tmpfyki1kvm.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpfyki1kvm.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpfyki1kvm.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpfyki1kvm.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpfyki1kvm.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpfyki1kvm.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpfyki1kvm.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // Your code here\n  \
    \  long ans = -1;\n    long max = 0;\n    long min = 0;\n    long mid = 0;\n \
    \   for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n   \
    \         max = arr[i];\n            mid = i;\n        }\n        if (arr[i] <\
    \ min) {\n            min = arr[i];\n        }\n    }\n    if (max > min) {\n\
    \        ans = mid;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpryherg8c.cpp: In function 'int main()':\n/tmp/tmpryherg8c.cpp:33:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpryherg8c.cpp:2:\n/tmp/tmpryherg8c.cpp:34:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpryherg8c.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpryherg8c.cpp:34:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpryherg8c.cpp:34:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpryherg8c.cpp:34:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpryherg8c.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpryherg8c.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    for\
    \ (long i = 0; i < arr.size(); i++) {\n        if (arr[i] <= arr[i + 1]) {\n \
    \           ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_bnxd4ud.cpp: In function 'int main()':\n/tmp/tmp_bnxd4ud.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_bnxd4ud.cpp:2:\n/tmp/tmp_bnxd4ud.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp_bnxd4ud.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp_bnxd4ud.cpp:24:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_bnxd4ud.cpp:24:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_bnxd4ud.cpp:24:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_bnxd4ud.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_bnxd4ud.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // Your code here\n  \
    \  long ans = -1;\n    long temp;\n    for (long i = 0; i < arr.size() - 1; i++)\
    \ {\n        if (arr[i] > arr[i + 1]) {\n            temp = arr[i];\n        \
    \    arr[i] = arr[i + 1];\n            arr[i + 1] = temp;\n        }\n    }\n\
    \    for (long i = 0; i < arr.size(); i++) {\n        if (arr[i] != arr[i + 1])\
    \ {\n            ans = i;\n            break;\n        }\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpqtdxht5t.cpp: In function 'int main()':\n/tmp/tmpqtdxht5t.cpp:32:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqtdxht5t.cpp:2:\n/tmp/tmpqtdxht5t.cpp:33:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpqtdxht5t.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpqtdxht5t.cpp:33:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpqtdxht5t.cpp:33:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpqtdxht5t.cpp:33:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpqtdxht5t.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpqtdxht5t.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // Your code here\n  \
    \  long ans = -1;\n    long max = arr[0];\n    long min = 0;\n    for (long i\
    \ = 0; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max =\
    \ arr[i];\n        }\n        if (arr[i] < min) {\n            min = arr[i];\n\
    \        }\n    }\n    if (max > min) {\n        ans = i;\n    }\n    return ans;\n\
    }\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpe4io_l1t.cpp: In function 'long int can_arrange(std::vector<long\
    \ int>)':\n/tmp/tmpe4io_l1t.cpp:26:15: error: name lookup of 'i' changed for ISO\
    \ 'for' scoping [-fpermissive]\n         ans = i;\n               ^\n/tmp/tmpe4io_l1t.cpp:26:15:\
    \ note: (if you use '-fpermissive' G++ will accept your code)\n/tmp/tmpe4io_l1t.cpp:\
    \ In function 'int main()':\n/tmp/tmpe4io_l1t.cpp:31:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = can_arrange;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpe4io_l1t.cpp:2:\n/tmp/tmpe4io_l1t.cpp:32:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpe4io_l1t.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpe4io_l1t.cpp:32:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpe4io_l1t.cpp:32:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpe4io_l1t.cpp:32:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpe4io_l1t.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    long\
    \ max_val = arr[0];\n    long min_val = arr[0];\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max_val) {\n            max_val = arr[i];\n   \
    \     }\n        if (arr[i] < min_val) {\n            min_val = arr[i];\n    \
    \    }\n    }\n    if (max_val >= min_val) {\n        ans = max_val;\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpj22s4kna.cpp: In function 'int main()':\n/tmp/tmpj22s4kna.cpp:30:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj22s4kna.cpp:2:\n/tmp/tmpj22s4kna.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpj22s4kna.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpj22s4kna.cpp:31:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpj22s4kna.cpp:31:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpj22s4kna.cpp:31:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpj22s4kna.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpj22s4kna.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    long\
    \ max = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            ans = i;\n            max = arr[i];\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprrin3n74.cpp: In function 'int main()':\n/tmp/tmprrin3n74.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrin3n74.cpp:2:\n/tmp/tmprrin3n74.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmprrin3n74.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmprrin3n74.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprrin3n74.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprrin3n74.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprrin3n74.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrin3n74.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // Your code here\n  \
    \  long ans = -1;\n    long max = arr[0];\n    long max_idx = -1;\n    for (long\
    \ i = 1; i < arr.size(); i++) {\n        if (arr[i] > max) {\n            max\
    \ = arr[i];\n            max_idx = i;\n        }\n    }\n    if (max_idx != -1)\
    \ {\n        ans = max_idx;\n    }\n    return ans;\n}\nint main() {\n    auto\
    \ candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptr0d7nlz.cpp: In function 'int main()':\n/tmp/tmptr0d7nlz.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptr0d7nlz.cpp:2:\n/tmp/tmptr0d7nlz.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmptr0d7nlz.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmptr0d7nlz.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmptr0d7nlz.cpp:30:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmptr0d7nlz.cpp:30:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmptr0d7nlz.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmptr0d7nlz.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // Your code here\n  \
    \  long ans = -1;\n    long max = arr[0];\n    long cur = arr[0];\n    long cnt\
    \ = 0;\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i] > max)\
    \ {\n            max = arr[i];\n            ans = i;\n        }\n        if (arr[i]\
    \ == cur) {\n            cnt++;\n        }\n        cur = arr[i];\n    }\n   \
    \ if (cnt > 1) {\n        ans = -1;\n    }\n    return ans;\n}\nint main() {\n\
    \    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp6b1w5r90.cpp: In function 'int main()':\n/tmp/tmp6b1w5r90.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6b1w5r90.cpp:2:\n/tmp/tmp6b1w5r90.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp6b1w5r90.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp6b1w5r90.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp6b1w5r90.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp6b1w5r90.cpp:35:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp6b1w5r90.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp6b1w5r90.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    long\
    \ max = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            max = arr[i];\n            ans = i;\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp_sdyb39f.cpp: In function 'int main()':\n/tmp/tmp_sdyb39f.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_sdyb39f.cpp:2:\n/tmp/tmp_sdyb39f.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp_sdyb39f.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp_sdyb39f.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp_sdyb39f.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp_sdyb39f.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp_sdyb39f.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp_sdyb39f.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // Your code here\n  \
    \  long ans = -1;\n    long max = arr[0];\n    long cur = arr[0];\n    for(long\
    \ i = 1; i < arr.size(); i++) {\n        if(arr[i] > max) {\n            max =\
    \ arr[i];\n            cur = arr[i];\n        }\n    }\n    if(max > cur) {\n\
    \        ans = i;\n    }\n    return ans;\n}\nint main() {\n    auto candidate\
    \ = can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpi32s99ki.cpp: In function 'long int can_arrange(std::vector<long\
    \ int>)':\n/tmp/tmpi32s99ki.cpp:24:15: error: name lookup of 'i' changed for ISO\
    \ 'for' scoping [-fpermissive]\n         ans = i;\n               ^\n/tmp/tmpi32s99ki.cpp:24:15:\
    \ note: (if you use '-fpermissive' G++ will accept your code)\n/tmp/tmpi32s99ki.cpp:\
    \ In function 'int main()':\n/tmp/tmpi32s99ki.cpp:29:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = can_arrange;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpi32s99ki.cpp:2:\n/tmp/tmpi32s99ki.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpi32s99ki.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpi32s99ki.cpp:30:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpi32s99ki.cpp:30:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpi32s99ki.cpp:30:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpi32s99ki.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n       "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    long\
    \ max_val = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max_val) {\n            max_val = arr[i];\n            ans = i;\n        }\n\
    \    }\n    return ans;\n}\nint main() {\n    auto candidate = can_arrange;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4, (long)3,\
    \ (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpyubym_w5.cpp: In function 'int main()':\n/tmp/tmpyubym_w5.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyubym_w5.cpp:2:\n/tmp/tmpyubym_w5.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpyubym_w5.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpyubym_w5.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpyubym_w5.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpyubym_w5.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpyubym_w5.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpyubym_w5.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    long\
    \ max = arr[0];\n    long max_index = -1;\n    for (long i = 1; i < arr.size();\
    \ i++) {\n        if (arr[i] > max) {\n            max = arr[i];\n           \
    \ max_index = i;\n        }\n    }\n    if (max_index != -1) {\n        long index\
    \ = max_index;\n        for (long i = max_index + 1; i < arr.size(); i++) {\n\
    \            if (arr[i] > arr[index]) {\n                index = i;\n        \
    \    }\n        }\n        ans = index;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphmxo42o_.cpp: In function 'int main()':\n/tmp/tmphmxo42o_.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphmxo42o_.cpp:2:\n/tmp/tmphmxo42o_.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmphmxo42o_.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmphmxo42o_.cpp:35:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphmxo42o_.cpp:35:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphmxo42o_.cpp:35:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphmxo42o_.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphmxo42o_.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    long\
    \ max = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            ans = i;\n            max = arr[i];\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprrin3n74.cpp: In function 'int main()':\n/tmp/tmprrin3n74.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrin3n74.cpp:2:\n/tmp/tmprrin3n74.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmprrin3n74.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmprrin3n74.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprrin3n74.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprrin3n74.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprrin3n74.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrin3n74.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    // Your code here\n  \
    \  long ans = -1;\n    long max = 0;\n    for (long i = 0; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max) {\n            max = arr[i];\n            ans =\
    \ i;\n        }\n    }\n    return ans;\n}\nint main() {\n    auto candidate =\
    \ can_arrange;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpz0y1s6jf.cpp: In function 'int main()':\n/tmp/tmpz0y1s6jf.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz0y1s6jf.cpp:2:\n/tmp/tmpz0y1s6jf.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmpz0y1s6jf.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmpz0y1s6jf.cpp:26:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpz0y1s6jf.cpp:26:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpz0y1s6jf.cpp:26:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpz0y1s6jf.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpz0y1s6jf.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    long\
    \ max = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            ans = i;\n            max = arr[i];\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprrin3n74.cpp: In function 'int main()':\n/tmp/tmprrin3n74.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrin3n74.cpp:2:\n/tmp/tmprrin3n74.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmprrin3n74.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmprrin3n74.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprrin3n74.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprrin3n74.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprrin3n74.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrin3n74.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    long\
    \ max = arr[0];\n    long index = 0;\n    for (long i = 1; i < arr.size(); i++)\
    \ {\n        if (arr[i] > max) {\n            ans = index;\n            max =\
    \ arr[i];\n        }\n        index++;\n    }\n    return ans;\n}\nint main()\
    \ {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2ni2dkbx.cpp: In function 'int main()':\n/tmp/tmp2ni2dkbx.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2ni2dkbx.cpp:2:\n/tmp/tmp2ni2dkbx.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmp2ni2dkbx.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmp2ni2dkbx.cpp:27:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp2ni2dkbx.cpp:27:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp2ni2dkbx.cpp:27:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp2ni2dkbx.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2ni2dkbx.cpp:2:\n/tmp/t"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// Create a function which\
    \ returns the largest index of an element which\n// is not greater than or equal\
    \ to the element immediately preceding it. If\n// no such element exists then\
    \ return -1. The given array will not contain\n// duplicate values.\n// Examples:\n\
    // >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)4, (long)3, (long)5})))\n\
    // (3)\n// >>> can_arrange((std::vector<long>({(long)1, (long)2, (long)3})))\n\
    // (-1)\nlong can_arrange(std::vector<long> arr) {\n    long ans = -1;\n    long\
    \ max = arr[0];\n    for (long i = 1; i < arr.size(); i++) {\n        if (arr[i]\
    \ > max) {\n            ans = i;\n            max = arr[i];\n        }\n    }\n\
    \    return ans;\n}\nint main() {\n    auto candidate = can_arrange;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)3, (long)5}))) == (3));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)4, (long)5}))) == (-1));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)4, (long)2, (long)5, (long)6, (long)7, (long)8, (long)9, (long)10})))\
    \ == (2));\n    assert(candidate((std::vector<long>({(long)4, (long)8, (long)5,\
    \ (long)7, (long)3}))) == (4));\n    assert(candidate((std::vector<long>())) ==\
    \ (-1));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmprrin3n74.cpp: In function 'int main()':\n/tmp/tmprrin3n74.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = can_arrange;\n\
    \          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n   \
    \              from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrin3n74.cpp:2:\n/tmp/tmprrin3n74.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)4,\
    \ (long)3, (long)5}))) == (3));\n                                        ^\n/tmp/tmprrin3n74.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)4, (long)3, (long)5}))) == (3));\n                                   \
    \                                                   ^\n/tmp/tmprrin3n74.cpp:25:86:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmprrin3n74.cpp:25:86: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmprrin3n74.cpp:25:86: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmprrin3n74.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIterator __last,\n         ^\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note:   template argument deduction/substitution failed:\nIn file included from\
    \ /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmprrin3n74.cpp:2:\n/tmp/t"
  stdout: ''
