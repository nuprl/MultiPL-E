language: cpp
name: HumanEval_152_compare
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long long sum = 0;\n    long long sum2 = 0;\n    long\
    \ long sum3 = 0;\n    long long sum4 = 0;\n    long long sum5 = 0;\n    long long\
    \ sum6 = 0;\n    long long sum7 = 0;\n    long long sum8 = 0;\n    long long sum9\
    \ = 0;\n    long long sum10 = 0;\n    long long sum11 = 0;\n    long long sum12\
    \ = 0;\n    long long sum13 = 0;\n    long long sum14 = 0;\n    long long sum15\
    \ = 0;\n    long long sum16 = 0;\n    long long sum17 = 0;\n    long long sum18\
    \ = 0;\n    long long sum19 = 0;\n    long long sum20 = 0;\n    long long sum21\
    \ = 0;\n    long long sum22 = 0;\n    long long sum23 = 0;\n    long long sum24\
    \ = 0;\n    long long sum25 = 0;\n    long long sum26 = 0;\n    long long sum27\
    \ = 0;\n    long long sum28 = 0;\n    long long sum29 = 0;\n    long long sum30\
    \ = 0;\n    long long sum31 = 0;\n    long long sum32 = 0;\n    long long sum33\
    \ = 0;\n    long long sum34 = 0;\n    long long sum35 = 0;\n    long long sum36\
    \ = 0;\n    long long sum37 = 0;\n    long long sum38 = 0;\n    long long sum39\
    \ = 0;\n    long long sum40 = 0;\n    long long sum41 = 0;\n    long long sum42\
    \ = 0;\n    long long sum43 = 0;\n    long long sum44 = 0;\n    long long sum45\
    \ = 0;\n    long long sum46 = 0;\n    long long sum47 = 0;\n    long long sum48\
    \ = 0;\n    long long sum49 = 0;\n    long long sum50 = 0;\n    long long sum51\
    \ = 0;\n    long long sum52 = 0;\n    long long sum53 = 0;\n    long long sum54\
    \ = 0;\n    long long sum55 = 0;\n    long long sum56 = 0;\n    long long sum57\
    \ = 0;\n    long long sum58 = 0;\n    long long sum59 = 0;\n    long long sum60\
    \ = 0;\n    long long sum61 = 0;\n    long long sum62 = 0;\n    long long sum63\
    \ = 0;\n    long long sum64 = 0;\n    long long sum65 = 0;\n    long long sum66\
    \ = 0;\n    long long sum67 = 0;\n    long long sum68 = 0;\n    long long sum69\
    \ = 0;\n    long long sum70 = 0;\n    long long sum71 = 0;\n    long long sum72\
    \ = 0;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp8vavnud7.cpp: In function 'int main()':\n/tmp/tmp8vavnud7.cpp:92:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp8vavnud7.cpp:2:\n/tmp/tmp8vavnud7.cpp:93:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp8vavnud7.cpp:93:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp8vavnud7.cpp:93:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp8vavnud7.cpp:93:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp8vavnud7.cpp:93:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp8vavnud7.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpctb4ymts.cpp: In function 'int main()':\n/tmp/tmpctb4ymts.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpctb4ymts.cpp:2:\n/tmp/tmpctb4ymts.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpctb4ymts.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpctb4ymts.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpctb4ymts.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpctb4ymts.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpctb4ymts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpctb4ymts.cpp: In function 'int main()':\n/tmp/tmpctb4ymts.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpctb4ymts.cpp:2:\n/tmp/tmpctb4ymts.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpctb4ymts.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpctb4ymts.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpctb4ymts.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpctb4ymts.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpctb4ymts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long diff = 0;\n    for (size_t i = 0; i < game.size(); ++i) {\n        diff\
    \ = std::abs(game[i] - guess[i]);\n        if (diff == 0) {\n            result[i]\
    \ = 0;\n        } else {\n            result[i] = diff;\n        }\n    }\n  \
    \  return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmphe3lpdxl.cpp: In function 'int main()':\n/tmp/tmphe3lpdxl.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmphe3lpdxl.cpp:2:\n/tmp/tmphe3lpdxl.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmphe3lpdxl.cpp:30:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmphe3lpdxl.cpp:30:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmphe3lpdxl.cpp:30:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmphe3lpdxl.cpp:30:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmphe3lpdxl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(game.size());\n\
    \    long score = 0;\n    long guess = 0;\n    for (size_t i = 0; i < game.size();\
    \ i++) {\n        if (game[i] == guess[i]) {\n            score++;\n        }\
    \ else {\n            guess = abs(game[i] - guess[i]);\n        }\n        result[i]\
    \ = guess;\n    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp125yv1k5.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmp125yv1k5.cpp:18:10: error: declaration\
    \ of 'long int guess' shadows a parameter\n     long guess = 0;\n          ^\n\
    /tmp/tmp125yv1k5.cpp:20:31: error: invalid types 'long int[size_t {aka long unsigned\
    \ int}]' for array subscript\n         if (game[i] == guess[i]) {\n          \
    \                     ^\n/tmp/tmp125yv1k5.cpp:23:42: error: invalid types 'long\
    \ int[size_t {aka long unsigned int}]' for array subscript\n             guess\
    \ = abs(game[i] - guess[i]);\n                                          ^\n/tmp/tmp125yv1k5.cpp:\
    \ In function 'int main()':\n/tmp/tmp125yv1k5.cpp:30:10: error: 'candidate' does\
    \ not name a type\n     auto candidate = compare;\n          ^\nIn file included\
    \ from /usr/include/c++/4.8.2/cassert:43:0,\n                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp125yv1k5.cpp:2:\n/tmp/tmp125yv1k5.cpp:31:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp125yv1k5.cpp:31:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp125yv1k5.cpp:31:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp125yv1k5.cpp:31:95: error:"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long diff = 0;\n    for (size_t i = 0; i < guess.size();\
    \ i++) {\n        diff = abs(game[i] - guess[i]);\n        if (diff == 0) {\n\
    \            result[i] = 0;\n        } else {\n            result[i] = diff;\n\
    \        }\n        score += diff;\n    }\n    if (score == 0) {\n        return\
    \ result;\n    } else {\n        return result;\n    }\n}\nint main() {\n    auto\
    \ candidate = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2,\
    \ (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpt47bmpy3.cpp: In function 'int main()':\n/tmp/tmpt47bmpy3.cpp:35:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpt47bmpy3.cpp:2:\n/tmp/tmpt47bmpy3.cpp:36:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpt47bmpy3.cpp:36:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpt47bmpy3.cpp:36:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpt47bmpy3.cpp:36:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpt47bmpy3.cpp:36:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpt47bmpy3.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (long i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpctb4ymts.cpp: In function 'int main()':\n/tmp/tmpctb4ymts.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpctb4ymts.cpp:2:\n/tmp/tmpctb4ymts.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpctb4ymts.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpctb4ymts.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpctb4ymts.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpctb4ymts.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpctb4ymts.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    for (size_t i = 0; i < guess.size(); i++) {\n   \
    \     result[i] = abs(game[i] - guess[i]);\n    }\n    return result;\n}\nint\
    \ main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp1anr_un2.cpp: In function 'int main()':\n/tmp/tmp1anr_un2.cpp:24:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp1anr_un2.cpp:2:\n/tmp/tmp1anr_un2.cpp:25:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp1anr_un2.cpp:25:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp1anr_un2.cpp:25:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp1anr_un2.cpp:25:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp1anr_un2.cpp:25:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp1anr_un2.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    for (size_t i = 0; i < guess.size(); i++) {\n      \
    \  score += game[i] - guess[i];\n        result[i] = abs(score);\n    }\n    return\
    \ result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmplnyn2zee.cpp: In function 'int main()':\n/tmp/tmplnyn2zee.cpp:25:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmplnyn2zee.cpp:2:\n/tmp/tmplnyn2zee.cpp:26:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmplnyn2zee.cpp:26:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmplnyn2zee.cpp:26:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmplnyn2zee.cpp:26:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmplnyn2zee.cpp:26:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmplnyn2zee.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long diff = 0;\n    for(int i\
    \ = 0; i < game.size(); i++) {\n        if(game[i] == guess[i]) {\n          \
    \  score = 0;\n            diff = 0;\n        }\n        else {\n            score\
    \ = abs(game[i] - guess[i]);\n            diff = abs(game[i] - guess[i]);\n  \
    \      }\n        result[i] = score;\n    }\n    return result;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpkw9n0chr.cpp: In function 'int main()':\n/tmp/tmpkw9n0chr.cpp:34:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpkw9n0chr.cpp:2:\n/tmp/tmpkw9n0chr.cpp:35:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpkw9n0chr.cpp:35:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpkw9n0chr.cpp:35:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpkw9n0chr.cpp:35:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpkw9n0chr.cpp:35:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpkw9n0chr.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long diff = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long A =\
    \ 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n   \
    \ long F = 0;\n    long G = 0;\n    long H = 0;\n    long I = 0;\n    long J =\
    \ 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n   \
    \ long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S =\
    \ 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n   \
    \ long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long AA = 0;\n    long BB\
    \ = 0;\n    long CC = 0;\n    long DD = 0;\n    long EE = 0;\n    long FF = 0;\n\
    \    long GG = 0;\n    long HH = 0;\n    long II = 0;\n    long JJ = 0;\n    long\
    \ KK = 0;\n    long LL = 0;\n    long MM = 0;\n    long NN = 0;\n    long OO =\
    \ 0;\n    long PP = 0;\n    long QQ = 0;\n    long RR = 0;\n    long SS = 0;\n\
    \    long TT = 0;\n    long UU = 0;\n    long VV = 0;\n    long WW = 0;\n    long\
    \ XX = 0;\n    long YY = 0;\n    long ZZ = 0;\n    long AAA = 0;\n    long BBB\
    \ = 0;\n    long CCC = 0;\n    long DDD = 0;\n    long EEE = 0;\n    long FFF\
    \ = 0;\n    long GGG = 0;\n    long HHH = 0;\n    long III = 0;\n    long JJJ\
    \ = 0;\n    long KKK = 0;\n    long LLL = 0;\n    long MMM = 0;\n    long NNN\
    \ = 0;\n    long OOO = 0;\n    long PPP = 0;\n    long QQQ = 0;\n    long RRR\
    \ = 0;\n    long SSS = 0;\n    long TTT = 0;\n    long UUU = 0;\n    long VVV\
    \ = 0;\n    long WWW = 0;\n    long XXX\n}\nint main() {\n    auto candidate =\
    \ compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpb6yde0f8.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpb6yde0f8.cpp:114:1: error: expected\
    \ initializer before '}' token\n }\n ^\n/tmp/tmpb6yde0f8.cpp: In function 'int\
    \ main()':\n/tmp/tmpb6yde0f8.cpp:116:10: error: 'candidate' does not name a type\n\
    \     auto candidate = compare;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpb6yde0f8.cpp:2:\n/tmp/tmpb6yde0f8.cpp:117:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpb6yde0f8.cpp:117:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpb6yde0f8.cpp:117:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpb6yde0f8.cpp:117:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpb6yde0f8.cpp:117:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpb6yde0f8.cpp:2:\n/usr/include/c++/4.8.2/bi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long sum = 0;\n    long diff = 0;\n    long max =\
    \ 0;\n    long min = 0;\n    long mid = 0;\n    long mid2 = 0;\n    long mid3\
    \ = 0;\n    long mid4 = 0;\n    long mid5 = 0;\n    long mid6 = 0;\n    long mid7\
    \ = 0;\n    long mid8 = 0;\n    long mid9 = 0;\n    long mid10 = 0;\n    long\
    \ mid11 = 0;\n    long mid12 = 0;\n    long mid13 = 0;\n    long mid14 = 0;\n\
    \    long mid15 = 0;\n    long mid16 = 0;\n    long mid17 = 0;\n    long mid18\
    \ = 0;\n    long mid19 = 0;\n    long mid20 = 0;\n    long mid21 = 0;\n    long\
    \ mid22 = 0;\n    long mid23 = 0;\n    long mid24 = 0;\n    long mid25 = 0;\n\
    \    long mid26 = 0;\n    long mid27 = 0;\n    long mid28 = 0;\n    long mid29\
    \ = 0;\n    long mid30 = 0;\n    long mid31 = 0;\n    long mid32 = 0;\n    long\
    \ mid33 = 0;\n    long mid34 = 0;\n    long mid35 = 0;\n    long mid36 = 0;\n\
    \    long mid37 = 0;\n    long mid38 = 0;\n    long mid39 = 0;\n    long mid40\
    \ = 0;\n    long mid41 = 0;\n    long mid42 = 0;\n    long mid43 = 0;\n    long\
    \ mid44 = 0;\n    long mid45 = 0;\n    long mid46 = 0;\n    long mid47 = 0;\n\
    \    long mid48 = 0;\n    long mid49 = 0;\n    long mid50 = 0;\n    long mid51\
    \ = 0;\n    long mid52 = 0;\n    long mid53 = 0;\n    long mid54 = 0;\n    long\
    \ mid55 = 0;\n    long mid56 = 0;\n    long mid57 = 0;\n    long mid58 = 0;\n\
    \    long mid59 = 0;\n    long mid60 = 0;\n    long mid61 = 0;\n    long mid62\
    \ = 0;\n    long mid63 = 0;\n    long mid64 = 0;\n    long mid65 = 0;\n    long\
    \ mid66 = 0;\n    long mid67 = 0;\n    long mid68 = 0;\n    long mid69 = 0;\n\
    \    long mid70 = 0;\n    long mid71 = 0;\n    long mid72 = 0;\n    long mid73\
    \ = 0;\n    long mid74 = 0;\n    long mid75 = 0;\n    long mid76 = 0;\n    long\
    \ mid77 = 0;\n    long mid78 = 0;\n    long mid79 = 0;\n    long mid80 = 0;\n\
    \    long mid\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpw04cufjy.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpw04cufjy.cpp:103:1: error: expected\
    \ initializer before '}' token\n }\n ^\n/tmp/tmpw04cufjy.cpp: In function 'int\
    \ main()':\n/tmp/tmpw04cufjy.cpp:105:10: error: 'candidate' does not name a type\n\
    \     auto candidate = compare;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpw04cufjy.cpp:2:\n/tmp/tmpw04cufjy.cpp:106:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpw04cufjy.cpp:106:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpw04cufjy.cpp:106:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpw04cufjy.cpp:106:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpw04cufjy.cpp:106:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpw04cufjy.cpp:2:\n/usr/include/c++/4.8.2/bi"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    long score = 0;\n    long guess = 0;\n    long score2 = 0;\n    long guess2\
    \ = 0;\n    long diff = 0;\n    long diff2 = 0;\n    long diff3 = 0;\n    long\
    \ diff4 = 0;\n    long diff5 = 0;\n    long diff6 = 0;\n    long diff7 = 0;\n\
    \    long diff8 = 0;\n    long diff9 = 0;\n    long diff10 = 0;\n    long diff11\
    \ = 0;\n    long diff12 = 0;\n    long diff13 = 0;\n    long diff14 = 0;\n   \
    \ long diff15 = 0;\n    long diff16 = 0;\n    long diff17 = 0;\n    long diff18\
    \ = 0;\n    long diff19 = 0;\n    long diff20 = 0;\n    long diff21 = 0;\n   \
    \ long diff22 = 0;\n    long diff23 = 0;\n    long diff24 = 0;\n    long diff25\
    \ = 0;\n    long diff26 = 0;\n    long diff27 = 0;\n    long diff28 = 0;\n   \
    \ long diff29 = 0;\n    long diff30 = 0;\n    long diff31 = 0;\n    long diff32\
    \ = 0;\n    long diff33 = 0;\n    long diff34 = 0;\n    long diff35 = 0;\n   \
    \ long diff36 = 0;\n    long diff37 = 0;\n    long diff38 = 0;\n    long diff39\
    \ = 0;\n    long diff40 = 0;\n    long diff41 = 0;\n    long diff42 = 0;\n   \
    \ long diff43 = 0;\n    long diff44 = 0;\n    long diff45 = 0;\n    long diff46\
    \ = 0;\n    long diff47 = 0;\n    long diff48 = 0;\n    long diff49 = 0;\n   \
    \ long diff50 = 0;\n    long diff51 = 0;\n    long diff52 = 0;\n    long diff53\
    \ = 0;\n    long diff54 = 0;\n    long diff55 = 0;\n    long diff56 = 0;\n   \
    \ long diff57 = 0;\n    long diff58 = 0;\n    long diff59 = 0;\n    long diff60\
    \ = 0;\n    long diff61 = 0;\n    long diff62 = 0;\n    long diff63 = 0;\n   \
    \ long diff64 = 0;\n    long diff65 = 0;\n    long diff66 = 0;\n    long diff67\
    \ = 0;\n    long diff68 = 0;\n    long diff69 = 0;\n    long diff70 = 0;\n   \
    \ long diff71 = 0;\n    long diff72 = 0;\n    long diff73 = 0;\n    long diff74\
    \ = 0;\n    long diff75 = 0;\n    long diff76 = 0;\n    long diff77 = 0;\n   \
    \ long diff78 = 0;\n    long diff79 = 0;\n    long diff80 = 0;\n    long diff81\
    \ = 0;\n    \n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp51grejzc.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmp51grejzc.cpp:18:10: error: declaration\
    \ of 'long int guess' shadows a parameter\n     long guess = 0;\n          ^\n\
    /tmp/tmp51grejzc.cpp: In function 'int main()':\n/tmp/tmp51grejzc.cpp:105:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp51grejzc.cpp:2:\n/tmp/tmp51grejzc.cpp:106:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp51grejzc.cpp:106:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp51grejzc.cpp:106:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp51grejzc.cpp:106:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp51grejzc.cpp:106:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    std::vector<long> result(guess.size());\n\
    \    for (size_t i = 0; i < guess.size(); i++) {\n        result[i] = abs(game[i]\
    \ - guess[i]);\n    }\n    return result;\n}\nint main() {\n    auto candidate\
    \ = compare;\n    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpu8itnjga.cpp: In function 'int main()':\n/tmp/tmpu8itnjga.cpp:23:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpu8itnjga.cpp:2:\n/tmp/tmpu8itnjga.cpp:24:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpu8itnjga.cpp:24:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpu8itnjga.cpp:24:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpu8itnjga.cpp:24:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpu8itnjga.cpp:24:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpu8itnjga.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long long int sum = 0;\n    for(int i = 0; i < guess.size();\
    \ i++) {\n        sum += game[i]-guess[i];\n        result[i] = sum;\n    }\n\
    \    return result;\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp24_9ctkb.cpp: In function 'int main()':\n/tmp/tmp24_9ctkb.cpp:26:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp24_9ctkb.cpp:2:\n/tmp/tmp24_9ctkb.cpp:27:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp24_9ctkb.cpp:27:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmp24_9ctkb.cpp:27:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmp24_9ctkb.cpp:27:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmp24_9ctkb.cpp:27:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmp24_9ctkb.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result;\n    long score;\n    long diff;\n    long diff2;\n    long diff3;\n\
    \    long diff4;\n    long diff5;\n    long diff6;\n    long diff7;\n    long\
    \ diff8;\n    long diff9;\n    long diff10;\n    long diff11;\n    long diff12;\n\
    \    long diff13;\n    long diff14;\n    long diff15;\n    long diff16;\n    long\
    \ diff17;\n    long diff18;\n    long diff19;\n    long diff20;\n    long diff21;\n\
    \    long diff22;\n    long diff23;\n    long diff24;\n    long diff25;\n    long\
    \ diff26;\n    long diff27;\n    long diff28;\n    long diff29;\n    long diff30;\n\
    \    long diff31;\n    long diff32;\n    long diff33;\n    long diff34;\n    long\
    \ diff35;\n    long diff36;\n    long diff37;\n    long diff38;\n    long diff39;\n\
    \    long diff40;\n    long diff41;\n    long diff42;\n    long diff43;\n    long\
    \ diff44;\n    long diff45;\n    long diff46;\n    long diff47;\n    long diff48;\n\
    \    long diff49;\n    long diff50;\n    long diff51;\n    long diff52;\n    long\
    \ diff53;\n    long diff54;\n    long diff55;\n    long diff56;\n    long diff57;\n\
    \    long diff58;\n    long diff59;\n    long diff60;\n    long diff61;\n    long\
    \ diff62;\n    long diff63;\n    long diff64;\n    long diff65;\n    long diff66;\n\
    \    long diff67;\n    long diff68;\n    long diff69;\n    long diff70;\n    long\
    \ diff71;\n    long diff72;\n    long diff73;\n    long diff74;\n    long diff75;\n\
    \    long diff76;\n    long diff77;\n    long diff78;\n    long diff79;\n    long\
    \ diff80;\n    long diff81;\n    long diff82;\n    long diff83;\n    long diff84;\n\
    \    long diff85;\n    long diff86;\n\n}\nint main() {\n    auto candidate = compare;\n\
    \    assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4,\
    \ (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0,\
    \ (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0,\
    \ (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpy0q4b5yc.cpp: In function 'int main()':\n/tmp/tmpy0q4b5yc.cpp:108:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpy0q4b5yc.cpp:2:\n/tmp/tmpy0q4b5yc.cpp:109:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpy0q4b5yc.cpp:109:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpy0q4b5yc.cpp:109:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpy0q4b5yc.cpp:109:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpy0q4b5yc.cpp:109:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpy0q4b5yc.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _Inp"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long guess = 0;\n    long diff\
    \ = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n \
    \   long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n    long q\
    \ = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n \
    \   long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n    long z\
    \ = 0;\n    long A = 0;\n    long B = 0;\n    long C = 0;\n    long D = 0;\n \
    \   long E = 0;\n    long F = 0;\n    long G = 0;\n    long H = 0;\n    long I\
    \ = 0;\n    long J = 0;\n    long K = 0;\n    long L = 0;\n    long M = 0;\n \
    \   long N = 0;\n    long O = 0;\n    long P = 0;\n    long Q = 0;\n    long R\
    \ = 0;\n    long S = 0;\n    long T = 0;\n    long U = 0;\n    long V = 0;\n \
    \   long W = 0;\n    long X = 0;\n    long Y = 0;\n    long Z = 0;\n    long a\
    \ = 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n \
    \   long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j\
    \ = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n \
    \   long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s\
    \ = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n \
    \   long x = 0;\n    long y = 0;\n    long z = 0;\n    long A = 0;\n    long B\
    \ = 0;\n    long C = 0;\n    long D = 0;\n    long E = 0;\n    long F = 0;\n \
    \   long G = 0;\n    long H = 0;\n    long I = 0;\n    long J = 0;\n    long K\
    \ = 0;\n    long L = 0;\n    long M = 0;\n    long N = 0;\n    long O = 0;\n \
    \   long P = 0;\n    long Q = 0;\n    long R = 0;\n    long S = 0;\n    long T\
    \ = 0;\n    long U = 0;\n    long V = 0;\n    long W = 0;\n    long X = 0;\n \
    \   long Y = 0;\n    long Z = 0;\n    long a = 0;\n    long b = 0;\n}\nint main()\
    \ {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpjbun7nel.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpjbun7nel.cpp:19:10: error: declaration\
    \ of 'long int guess' shadows a parameter\n     long guess = 0;\n          ^\n\
    /tmp/tmpjbun7nel.cpp:73:10: error: redeclaration of 'long int i'\n     long i\
    \ = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:21:10: error: 'long int i' previously\
    \ declared here\n     long i = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:74:10: error:\
    \ redeclaration of 'long int j'\n     long j = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:22:10:\
    \ error: 'long int j' previously declared here\n     long j = 0;\n          ^\n\
    /tmp/tmpjbun7nel.cpp:75:10: error: redeclaration of 'long int k'\n     long k\
    \ = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:23:10: error: 'long int k' previously\
    \ declared here\n     long k = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:76:10: error:\
    \ redeclaration of 'long int l'\n     long l = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:24:10:\
    \ error: 'long int l' previously declared here\n     long l = 0;\n          ^\n\
    /tmp/tmpjbun7nel.cpp:77:10: error: redeclaration of 'long int m'\n     long m\
    \ = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:25:10: error: 'long int m' previously\
    \ declared here\n     long m = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:78:10: error:\
    \ redeclaration of 'long int n'\n     long n = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:26:10:\
    \ error: 'long int n' previously declared here\n     long n = 0;\n          ^\n\
    /tmp/tmpjbun7nel.cpp:79:10: error: redeclaration of 'long int o'\n     long o\
    \ = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:27:10: error: 'long int o' previously\
    \ declared here\n     long o = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:80:10: error:\
    \ redeclaration of 'long int p'\n     long p = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:28:10:\
    \ error: 'long int p' previously declared here\n     long p = 0;\n          ^\n\
    /tmp/tmpjbun7nel.cpp:81:10: error: redeclaration of 'long int q'\n     long q\
    \ = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:29:10: error: 'long int q' previously\
    \ declared here\n     long q = 0;\n          ^\n/tmp/tmpjbun7nel.cpp:82:10: error:\
    \ redeclaration of"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(guess.size());\n    long score = 0;\n    for (long i = 0; i < guess.size();\
    \ i++) {\n        if (game[i] == guess[i]) {\n            result[i] = 0;\n   \
    \     } else {\n            result[i] = abs(game[i] - guess[i]);\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpp6uhjkbl.cpp: In function 'int main()':\n/tmp/tmpp6uhjkbl.cpp:29:10:\
    \ error: 'candidate' does not name a type\n     auto candidate = compare;\n  \
    \        ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n     \
    \            from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpp6uhjkbl.cpp:2:\n/tmp/tmpp6uhjkbl.cpp:30:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmpp6uhjkbl.cpp:30:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                                                      ^\n/tmp/tmpp6uhjkbl.cpp:30:95:\
    \ warning: extended initializer lists only available with -std=c++11 or -std=gnu++11\
    \ [enabled by default]\n/tmp/tmpp6uhjkbl.cpp:30:95: error: no matching function\
    \ for call to 'std::vector<long int>::vector(<brace-enclosed initializer list>)'\n\
    /tmp/tmpp6uhjkbl.cpp:30:95: note: candidates are:\nIn file included from /usr/include/c++/4.8.2/vector:64:0,\n\
    \                 from /usr/include/c++/4.8.2/queue:61,\n                 from\
    \ /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:85,\n             \
    \    from /tmp/tmpp6uhjkbl.cpp:2:\n/usr/include/c++/4.8.2/bits/stl_vector.h:398:9:\
    \ note: template<class _InputIterator> std::vector<_Tp, _Alloc>::vector(_InputIterator,\
    \ _InputIterator, const allocator_type&)\n         vector(_InputIterator __first,\
    \ _InputIter"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long diff = 0;\n    long guess\
    \ = 0;\n    long game = 0;\n    long i = 0;\n    long j = 0;\n    for (i = 0;\
    \ i < game.size(); i++) {\n        game = game[i];\n        guess = guess[i];\n\
    \        score = abs(guess - game);\n        if (guess == game) {\n          \
    \  result[i] = 0;\n        } else {\n            result[i] = score;\n        }\n\
    \    }\n    return result;\n}\nint main() {\n    auto candidate = compare;\n \
    \   assert(candidate((std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)5,\
    \ (long)1})), (std::vector<long>({(long)1, (long)2, (long)3, (long)4, (long)2,\
    \ (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0, (long)0, (long)3,\
    \ (long)3})));\n    assert(candidate((std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})), (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmp4_g2qdym.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmp4_g2qdym.cpp:20:10: error: declaration\
    \ of 'long int guess' shadows a parameter\n     long guess = 0;\n          ^\n\
    /tmp/tmp4_g2qdym.cpp:21:10: error: declaration of 'long int game' shadows a parameter\n\
    \     long game = 0;\n          ^\n/tmp/tmp4_g2qdym.cpp:24:26: error: request\
    \ for member 'size' in 'game', which is of non-class type 'long int'\n     for\
    \ (i = 0; i < game.size(); i++) {\n                          ^\n/tmp/tmp4_g2qdym.cpp:25:22:\
    \ error: invalid types 'long int[long int]' for array subscript\n         game\
    \ = game[i];\n                      ^\n/tmp/tmp4_g2qdym.cpp:26:24: error: invalid\
    \ types 'long int[long int]' for array subscript\n         guess = guess[i];\n\
    \                        ^\n/tmp/tmp4_g2qdym.cpp: In function 'int main()':\n\
    /tmp/tmp4_g2qdym.cpp:37:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = compare;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp4_g2qdym.cpp:2:\n/tmp/tmp4_g2qdym.cpp:38:40: warning:\
    \ extended initializer lists only available with -std=c++11 or -std=gnu++11 [enabled\
    \ by default]\n     assert(candidate((std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)5, (long)1})), (std::vector<long>({(long)1, (long)2, (long)3,\
    \ (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0, (long)0, (long)0,\
    \ (long)0, (long)3, (long)3})));\n                                        ^\n\
    /tmp/tmp4_g2qdym.cpp:38:95: warning: extended initializer lists only available\
    \ with -std=c++11 or -std=gnu++11 [enabled by default]\n     assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n                         \
    \                                          "
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// I think we all remember\
    \ that feeling when the result of some long-awaited\n// event is finally known.\
    \ The feelings and thoughts you have at that moment are\n// definitely worth noting\
    \ down and comparing.\n// Your task is to determine if a person correctly guessed\
    \ the results of a number of matches.\n// You are given two arrays of scores and\
    \ guesses of equal length, where each index shows a match. \n// Return an array\
    \ of the same length denoting how far off each guess was. If they have guessed\
    \ correctly,\n// the value is 0, and if not, the value is the absolute difference\
    \ between the guess and the score.\n// example:\n// >>> compare((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2})))\n// (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3}))\n// >>> compare((std::vector<long>({(long)0,\
    \ (long)5, (long)0, (long)0, (long)0, (long)4})), (std::vector<long>({(long)4,\
    \ (long)1, (long)1, (long)0, (long)0, (long)-2})))\n// (std::vector<long>({(long)4,\
    \ (long)4, (long)1, (long)0, (long)0, (long)6}))\nstd::vector<long> compare(std::vector<long>\
    \ game, std::vector<long> guess) {\n    // Your code here\n    std::vector<long>\
    \ result(game.size());\n    long score = 0;\n    long diff = 0;\n    long i =\
    \ 0;\n    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n   \
    \ long n = 0;\n    long o = 0;\n    long p = 0;\n    long q = 0;\n    long r =\
    \ 0;\n    long s = 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n   \
    \ long w = 0;\n    long x = 0;\n    long y = 0;\n    long z = 0;\n    long a =\
    \ 0;\n    long b = 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n   \
    \ long f = 0;\n    long g = 0;\n    long h = 0;\n    long i = 0;\n    long j =\
    \ 0;\n    long k = 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n   \
    \ long o = 0;\n    long p = 0;\n    long q = 0;\n    long r = 0;\n    long s =\
    \ 0;\n    long t = 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n   \
    \ long x = 0;\n    long y = 0;\n    long z = 0;\n    long a = 0;\n    long b =\
    \ 0;\n    long c = 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n   \
    \ long g = 0;\n    long h = 0;\n    long i = 0;\n    long j = 0;\n    long k =\
    \ 0;\n    long l = 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n   \
    \ long p = 0;\n    long q = 0;\n    long r = 0;\n    long s = 0;\n    long t =\
    \ 0;\n    long u = 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n   \
    \ long y = 0;\n    long z = 0;\n    long a = 0;\n    long b = 0;\n    long c =\
    \ 0;\n    long d = 0;\n    long e = 0;\n    long f = 0;\n    long g = 0;\n   \
    \ long h = 0;\n    long i = 0;\n    long j = 0;\n    long k = 0;\n    long l =\
    \ 0;\n    long m = 0;\n    long n = 0;\n    long o = 0;\n    long p = 0;\n   \
    \ long q = 0;\n    long r = 0;\n    long s = 0;\n    long t = 0;\n    long u =\
    \ 0;\n    long v = 0;\n    long w = 0;\n    long x = 0;\n    long y = 0;\n   \
    \ long z = 0;\n    long a = 0;\n    long b = 0;\n    long c = 0;\n    long d =\
    \ 0;\n\n}\nint main() {\n    auto candidate = compare;\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})), (std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)2, (long)-2}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)3, (long)3})));\n    assert(candidate((std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})), (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0}))) == (std::vector<long>({(long)0,\
    \ (long)0, (long)0, (long)0, (long)0, (long)0})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3})), (std::vector<long>({(long)-1, (long)-2, (long)-3}))) ==\
    \ (std::vector<long>({(long)2, (long)4, (long)6})));\n    assert(candidate((std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)5})), (std::vector<long>({(long)-1, (long)2, (long)3,\
    \ (long)4}))) == (std::vector<long>({(long)2, (long)0, (long)0, (long)1})));\n\
    }\n"
  status: SyntaxError
  stderr: "/tmp/tmpzfw3triv.cpp: In function 'std::vector<long int> compare(std::vector<long\
    \ int>, std::vector<long int>)':\n/tmp/tmpzfw3triv.cpp:46:10: error: redeclaration\
    \ of 'long int i'\n     long i = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:20:10:\
    \ error: 'long int i' previously declared here\n     long i = 0;\n          ^\n\
    /tmp/tmpzfw3triv.cpp:47:10: error: redeclaration of 'long int j'\n     long j\
    \ = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:21:10: error: 'long int j' previously\
    \ declared here\n     long j = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:48:10: error:\
    \ redeclaration of 'long int k'\n     long k = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:22:10:\
    \ error: 'long int k' previously declared here\n     long k = 0;\n          ^\n\
    /tmp/tmpzfw3triv.cpp:49:10: error: redeclaration of 'long int l'\n     long l\
    \ = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:23:10: error: 'long int l' previously\
    \ declared here\n     long l = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:50:10: error:\
    \ redeclaration of 'long int m'\n     long m = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:24:10:\
    \ error: 'long int m' previously declared here\n     long m = 0;\n          ^\n\
    /tmp/tmpzfw3triv.cpp:51:10: error: redeclaration of 'long int n'\n     long n\
    \ = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:25:10: error: 'long int n' previously\
    \ declared here\n     long n = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:52:10: error:\
    \ redeclaration of 'long int o'\n     long o = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:26:10:\
    \ error: 'long int o' previously declared here\n     long o = 0;\n          ^\n\
    /tmp/tmpzfw3triv.cpp:53:10: error: redeclaration of 'long int p'\n     long p\
    \ = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:27:10: error: 'long int p' previously\
    \ declared here\n     long p = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:54:10: error:\
    \ redeclaration of 'long int q'\n     long q = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:28:10:\
    \ error: 'long int q' previously declared here\n     long q = 0;\n          ^\n\
    /tmp/tmpzfw3triv.cpp:55:10: error: redeclaration of 'long int r'\n     long r\
    \ = 0;\n          ^\n/tmp/tmpzfw3triv.cpp:29:10: error: 'long int r' previously\
    \ declared here\n    "
  stdout: ''
