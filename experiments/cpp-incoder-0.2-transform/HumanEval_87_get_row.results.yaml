language: cpp
name: HumanEval_87_get_row
results:
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> row;\n    std::vector<std::tuple<long, long>> col;\n    for (auto &v\
    \ : lst) {\n        if (std::find(v.begin(), v.end(), x) != v.end()) {\n     \
    \       row.push_back(v);\n        }\n    }\n    for (auto &v : row) {\n     \
    \   col.clear();\n        for (auto &v2 : v) {\n            if (std::find(v2.begin(),\
    \ v2.end(), x) != v2.end()) {\n                col.push_back(v2);\n          \
    \  }\n        }\n        res.push_back(std::make_tuple(std::get<0>(col), std::get<1>(col)));\n\
    \    }\n    std::sort(res.begin(), res.end(), [](std::tuple<long, long> a, std::tuple<long,\
    \ long> b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) { return std::get<1>(a)\
    \ < std::get<1>(b); });\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpv5qzh8gj.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpv5qzh8gj.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpv5qzh8gj.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpv5qzh8gj.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpv5qzh8gj.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu54qtnm6.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpu54qtnm6.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpu54qtnm6.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpu54qtnm6.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpu54qtnm6.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size() - 1, col.size() - 1));\n\
    \            }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](auto\
    \ &a, auto &b) { return std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(),\
    \ res.end(), [](auto &a, auto &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpu54qtnm6.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpu54qtnm6.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpu54qtnm6.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpu54qtnm6.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpu54qtnm6.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    // Write your code here\n    std::vector<std::tuple<long,\
    \ long>> res;\n    for(auto &row : lst) {\n        for(auto &col : row) {\n  \
    \          if(col == x) {\n                res.emplace_back(std::make_tuple(row.size()\
    \ - 1, col.size() - 1));\n            }\n        }\n    }\n    std::sort(res.begin(),\
    \ res.end(), [](std::tuple<long, long> a, std::tuple<long, long> b) { return std::get<0>(a)\
    \ < std::get<0>(b); });\n    std::sort(res.begin(), res.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) { return std::get<1>(a) < std::get<1>(b);\
    \ });\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmptuviqln_.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmptuviqln_.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmptuviqln_.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmptuviqln_.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmptuviqln_.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    std::vector<std::vector<long>>\
    \ res;\n    long n = lst.size();\n    long m = lst[0].size();\n    long i = 0;\n\
    \    long j = 0;\n    long k = 0;\n    long l = 0;\n    long m1 = 0;\n    long\
    \ m2 = 0;\n    long m3 = 0;\n    long m4 = 0;\n    long m5 = 0;\n    long m6 =\
    \ 0;\n    long m7 = 0;\n    long m8 = 0;\n    long m9 = 0;\n    long m10 = 0;\n\
    \    long m11 = 0;\n    long m12 = 0;\n    long m13 = 0;\n    long m14 = 0;\n\
    \    long m15 = 0;\n    long m16 = 0;\n    long m17 = 0;\n    long m18 = 0;\n\
    \    long m19 = 0;\n    long m20 = 0;\n    long m21 = 0;\n    long m22 = 0;\n\
    \    long m23 = 0;\n    long m24 = 0;\n    long m25 = 0;\n    long m26 = 0;\n\
    \    long m27 = 0;\n    long m28 = 0;\n    long m29 = 0;\n    long m30 = 0;\n\
    \    long m31 = 0;\n    long m32 = 0;\n    long m33 = 0;\n    long m34 = 0;\n\
    \    long m35 = 0;\n    long m36 = 0;\n    long m37 = 0;\n    long m38 = 0;\n\
    \    long m39 = 0;\n    long m40 = 0;\n    long m41 = 0;\n    long m42 = 0;\n\
    \    long m43 = 0;\n    long m44 = 0;\n    long m45 = 0;\n    long m46 = 0;\n\
    \    long m47 = 0;\n    long m48 = 0;\n    long m49 = 0;\n    long m50 = 0;\n\
    \    long m51 = 0;\n    long m52 = 0;\n    long m53 = 0;\n    long m54 = 0;\n\
    \    long m55 = 0;\n    long m56 = 0;\n    long m57 = 0;\n    long m58 = 0;\n\
    \    long m59 = 0;\n    long m60 = 0;\n    long m61 = 0;\n    long m62 = 0;\n\
    \    long m63 = 0;\n    long m64 = 0;\n    long m65 = 0;\n    long m66 = 0;\n\
    \    long m67 = 0;\n    long m68 = 0;\n    long m69 = 0;\n    long m70 = 0;\n\
    \    long m71 = 0;\n    long m72 = 0;\n    long m73 = 0;\n    long m74 = 0;\n\
    \    long m75 = 0;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpdcdzhqxz.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpdcdzhqxz.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpdcdzhqxz.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpdcdzhqxz.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpdcdzhqxz.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n/tmp/tmpdcdzhqxz.cpp: In function 'int main()':\n\
    /tmp/tmpdcdzhqxz.cpp:106:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = get_row;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpdcdzhqxz.cpp:2:\n/tmp/tmpdcdzhqxz.cpp:107:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n                   \
    \                                ^\n/tmp/tmpdcdzhqxz.cpp:107:53: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [e"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    std::vector<std::vector<long>>\
    \ res;\n    std::vector<std::vector<long>> res2;\n    std::vector<std::vector<long>>\
    \ res3;\n    std::vector<std::vector<long>> res4;\n    std::vector<std::vector<long>>\
    \ res5;\n    std::vector<std::vector<long>> res6;\n    std::vector<std::vector<long>>\
    \ res7;\n    std::vector<std::vector<long>> res8;\n    std::vector<std::vector<long>>\
    \ res9;\n    std::vector<std::vector<long>> res10;\n    std::vector<std::vector<long>>\
    \ res11;\n    std::vector<std::vector<long>> res12;\n    std::vector<std::vector<long>>\
    \ res13;\n    std::vector<std::vector<long>> res14;\n    std::vector<std::vector<long>>\
    \ res15;\n    std::vector<std::vector<long>> res16;\n    std::vector<std::vector<long>>\
    \ res17;\n    std::vector<std::vector<long>> res18;\n    std::vector<std::vector<long>>\
    \ res19;\n    std::vector<std::vector<long>> res20;\n    std::vector<std::vector<long>>\
    \ res21;\n    std::vector<std::vector<long>> res22;\n    std::vector<std::vector<long>>\
    \ res23;\n    std::vector<std::vector<long>> res24;\n    std::vector<std::vector<long>>\
    \ res25;\n    std::vector<std::vector<long>> res26;\n    std::vector<std::vector<long>>\
    \ res27;\n    std::vector<std::vector<long>> res28;\n    std::vector<std::vector<long>>\
    \ res29;\n    std::vector<std::vector<long>> res30;\n    std::vector<std::vector<long>>\
    \ res31;\n    std::vector<std::vector<long>> res32;\n    std::vector<std::vector<long>>\
    \ res33;\n    std::vector<std::vector<long>> res34;\n    std::vector<std::vector<long>>\
    \ res35;\n    std::vector<std::vector<long>> res36;\n    std::vector<std::vector<long>>\
    \ res37;\n    std::vector<std::vector<long>> res38;\n    std::vector<std::vector<long>>\
    \ res39;\n    std::vector<std::vector<long>> res40;\n    std::vector<std::vector<long>>\
    \ res41;\n    std::vector<std::vector<long>> res42;\n    std::vector<std::vector<long>>\
    \ res43;\n    std::vector<std::vector<long>> res44;\n    std::vector<std::vector<long>>\
    \ res45;\n    std::vector<std::vector<long>> res46;\n    std::vector<std::vector<long>>\
    \ res47;\n    std::vector<std::vector<long>> res48;\n    std::vector<std::vector<long>>\
    \ res49;\n    std::vector<std::vector<long>> res50;\n    std::vector<std::vector<long>>\
    \ res51;\n    std::vector<std::vector<long>> res52;\n    std::vector<std::vector<long>>\
    \ res53;\n    std::vector<std::vector<long>> res54;\n    std::vector<std::vector<long>>\
    \ res55;\n    std::vector<std::vector<long>> res56;\n    std::vector<\n}\nint\
    \ main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpnb3afwj4.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpnb3afwj4.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpnb3afwj4.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpnb3afwj4.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpnb3afwj4.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n/tmp/tmpnb3afwj4.cpp: In function 'int main()':\n\
    /tmp/tmpnb3afwj4.cpp:81:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = get_row;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpnb3afwj4.cpp:2:\n/tmp/tmpnb3afwj4.cpp:82:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n                   \
    \                                ^\n/tmp/tmpnb3afwj4.cpp:82:53: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enab"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ temp;\n    long row = 0;\n    long col = 0;\n    for (auto &i : lst) {\n   \
    \     temp.push_back(i);\n        if (i == x) {\n            res.push_back(std::make_tuple(row,\
    \ col));\n        }\n        ++col;\n        if (col == i) {\n            row++;\n\
    \            col = 0;\n        }\n    }\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<0>(a) < std::get<0>(b); });\n    std::sort(res.begin(), res.end(),\
    \ [](const std::tuple<long, long> &a, const std::tuple<long, long> &b) { return\
    \ std::get<1>(a) < std::get<1>(b); });\n    return res;\n}\nint main() {\n   \
    \ auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmphgyt1t2m.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmphgyt1t2m.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmphgyt1t2m.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmphgyt1t2m.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmphgyt1t2m.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ temp;\n    std::vector<std::vector<long>> temp2;\n    std::vector<std::vector<long>>\
    \ temp3;\n    std::vector<std::vector<long>> temp4;\n    std::vector<std::vector<long>>\
    \ temp5;\n    std::vector<std::vector<long>> temp6;\n    std::vector<std::vector<long>>\
    \ temp7;\n    std::vector<std::vector<long>> temp8;\n    std::vector<std::vector<long>>\
    \ temp9;\n    std::vector<std::vector<long>> temp10;\n    std::vector<std::vector<long>>\
    \ temp11;\n    std::vector<std::vector<long>> temp12;\n    std::vector<std::vector<long>>\
    \ temp13;\n    std::vector<std::vector<long>> temp14;\n    std::vector<std::vector<long>>\
    \ temp15;\n    std::vector<std::vector<long>> temp16;\n    std::vector<std::vector<long>>\
    \ temp17;\n    std::vector<std::vector<long>> temp18;\n    std::vector<std::vector<long>>\
    \ temp19;\n    std::vector<std::vector<long>> temp20;\n    std::vector<std::vector<long>>\
    \ temp21;\n    std::vector<std::vector<long>> temp22;\n    std::vector<std::vector<long>>\
    \ temp23;\n    std::vector<std::vector<long>> temp24;\n    std::vector<std::vector<long>>\
    \ temp25;\n    std::vector<std::vector<long>> temp26;\n    std::vector<std::vector<long>>\
    \ temp27;\n    std::vector<std::vector<long>> temp28;\n    std::vector<std::vector<long>>\
    \ temp29;\n    std::vector<std::vector<long>> temp30;\n    std::vector<std::vector<long>>\
    \ temp31;\n    std::vector<std::vector<long>> temp32;\n    std::vector<std::vector<long>>\
    \ temp33;\n    std::vector<std::vector<long>> temp34;\n    std::vector<std::vector<long>>\
    \ temp35;\n    std::vector<std::vector<long>> temp36;\n    std::vector<std::vector<long>>\
    \ temp37;\n    std::vector<std::vector<long>> temp38;\n    std::vector<std::vector<long>>\
    \ temp39;\n    std::vector<std::vector<long>> temp40;\n    std::vector<std::vector<long>>\
    \ temp41;\n    std::vector<std::vector<long>> temp42;\n    std::vector<std::vector<long>>\
    \ temp43;\n    std::vector<std::vector<long>> temp44;\n    std::vector<std::vector<long>>\
    \ temp45;\n    std::vector<std::vector<long>> temp46;\n    std::vector<std::vector<long>>\
    \ temp47;\n    std::vector<std::vector<long>> temp48;\n    std::vector<std::vector<long>>\
    \ temp49;\n    std::vector<std::vector<long>> temp50;\n    std::vector<std::vector<long>>\
    \ temp51;\n    std::vector<std::vector<long>> temp52;\n    std::vector<std::vector<long>>\
    \ temp53;\n    std::vector<std::vector<long>> temp54;\n    std::vector<std::vector<long>>\
    \ temp55;\n    std::vector<std::vector<long>> temp56;\n    \n}\nint main() {\n\
    \    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5w_fjr1_.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmp5w_fjr1_.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmp5w_fjr1_.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmp5w_fjr1_.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmp5w_fjr1_.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n/tmp/tmp5w_fjr1_.cpp: In function 'int main()':\n\
    /tmp/tmp5w_fjr1_.cpp:81:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = get_row;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5w_fjr1_.cpp:2:\n/tmp/tmp5w_fjr1_.cpp:82:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n                   \
    \                                ^\n/tmp/tmp5w_fjr1_.cpp:82:53: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enab"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> row;\n    std::vector<std::tuple<long, long>> col;\n    std::vector<std::tuple<long,\
    \ long>> temp;\n    std::vector<std::tuple<long, long>> temp2;\n    std::vector<std::tuple<long,\
    \ long>> temp3;\n    std::vector<std::tuple<long, long>> temp4;\n    std::vector<std::tuple<long,\
    \ long>> temp5;\n    std::vector<std::tuple<long, long>> temp6;\n    std::vector<std::tuple<long,\
    \ long>> temp7;\n    std::vector<std::tuple<long, long>> temp8;\n    std::vector<std::tuple<long,\
    \ long>> temp9;\n    std::vector<std::tuple<long, long>> temp10;\n    std::vector<std::tuple<long,\
    \ long>> temp11;\n    std::vector<std::tuple<long, long>> temp12;\n    std::vector<std::tuple<long,\
    \ long>> temp13;\n    std::vector<std::tuple<long, long>> temp14;\n    std::vector<std::tuple<long,\
    \ long>> temp15;\n    std::vector<std::tuple<long, long>> temp16;\n    std::vector<std::tuple<long,\
    \ long>> temp17;\n    std::vector<std::tuple<long, long>> temp18;\n    std::vector<std::tuple<long,\
    \ long>> temp19;\n    std::vector<std::tuple<long, long>> temp20;\n    std::vector<std::tuple<long,\
    \ long>> temp21;\n    std::vector<std::tuple<long, long>> temp22;\n    std::vector<std::tuple<long,\
    \ long>> temp23;\n    std::vector<std::tuple<long, long>> temp24;\n    std::vector<std::tuple<long,\
    \ long>> temp25;\n    std::vector<std::tuple<long, long>> temp26;\n    std::vector<std::tuple<long,\
    \ long>> temp27;\n    std::vector<std::tuple<long, long>> temp28;\n    std::vector<std::tuple<long,\
    \ long>> temp29;\n    std::vector<std::tuple<long, long>> temp30;\n    std::vector<std::tuple<long,\
    \ long>> temp31;\n    std::vector<std::tuple<long, long>> temp32;\n    std::vector<std::tuple<long,\
    \ long>> temp33;\n    std::vector<std::tuple<long, long>> temp34;\n    std::vector<std::tuple<long,\
    \ long>> temp35;\n    std::vector<std::tuple<long, long>> temp36;\n    std::vector<std::tuple<long,\
    \ long>> temp37;\n    std::vector<std::tuple<long, long>> temp38;\n    std::vector<std::tuple<long,\
    \ long>> temp39;\n    std::vector<std::tuple<long, long>> temp40;\n    std::vector<std::tuple<long,\
    \ long>> temp41;\n    std::vector<std::tuple<long, long\n}\nint main() {\n   \
    \ auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmppvnm18g4.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmppvnm18g4.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmppvnm18g4.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmppvnm18g4.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmppvnm18g4.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n/tmp/tmppvnm18g4.cpp: In function 'int main()':\n\
    /tmp/tmppvnm18g4.cpp:66:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = get_row;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmppvnm18g4.cpp:2:\n/tmp/tmppvnm18g4.cpp:67:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n                   \
    \                                ^\n/tmp/tmppvnm18g4.cpp:67:53: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enab"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ temp;\n    long cnt = 0;\n    for(auto &row : lst) {\n        for(auto &val\
    \ : row) {\n            if(val == x) {\n                res.push_back(std::make_tuple(cnt,\
    \ row.size() - 1));\n                temp.push_back(row);\n                cnt++;\n\
    \            }\n        }\n    }\n    for(auto &row : temp) {\n        std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a > b; });\n        std::sort(row.rbegin(),\
    \ row.rend(), [](long a, long b) { return b > a; });\n        std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a < b; });\n        std::sort(row.rbegin(),\
    \ row.rend(), [](long a, long b) { return b < a; });\n        std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a > b; });\n        std::sort(row.rbegin(),\
    \ row.rend(), [](long a, long b) { return b > a; });\n        std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a < b; });\n        std::sort(row.rbegin(),\
    \ row.rend(), [](long a, long b) { return b < a; });\n        std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a > b; });\n        std::sort(row.rbegin(),\
    \ row.rend(), [](long a, long b) { return b > a; });\n        std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a < b; });\n        std::sort(row.rbegin(),\
    \ row.rend(), [](long a, long b) { return b < a; });\n        std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a > b; });\n        std::sort(row.rbegin(),\
    \ row.rend(), [](long a, long b) { return b > a; });\n        std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a < b; });\n        std::sort(row.rbegin(),\
    \ row.rend(), [](long a, long b) { return b < a; });\n        std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a > b; });\n        std::sort(row.rbegin(),\
    \ row.rend(), [](long a, long b) { return b > a; });\n        std::sort(row.begin(),\
    \ row.end(), [](long a, long b) { return a < b; });\n        std::sort(row.rbegin(),\
    \ row.rend(), [](long a, long b) { return b < a; });\n        std::\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpeolvcmi7.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpeolvcmi7.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpeolvcmi7.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpeolvcmi7.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpeolvcmi7.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    std::vector<std::vector<long>>\
    \ res;\n    std::vector<std::vector<long>> rows;\n    std::vector<std::vector<long>>\
    \ cols;\n    std::vector<std::vector<long>> row;\n    std::vector<std::vector<long>>\
    \ col;\n    std::vector<std::vector<long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    std::vector<std::vector<long>>\
    \ res;\n    std::vector<std::vector<long>> rows;\n    std::vector<std::vector<long>>\
    \ cols;\n    std::vector<std::vector<long>> row;\n    std::vector<std::vector<long>>\
    \ col;\n    std::vector<std::vector<long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    std::vector<std::vector<long>>\
    \ res;\n    std::vector<std::vector<long>> rows;\n    std::vector<std::vector<long>>\
    \ cols;\n    std::vector<std::vector<long>> row;\n    std::vector<std::vector<long>>\
    \ col;\n    std::vector<std::vector<long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    std::vector<std::vector<long>>\
    \ res;\n    std::vector<std::vector<long>> rows;\n    std::vector<std::vector<long>>\
    \ cols;\n    std::vector<std::vector<long>> row;\n    std::vector<std::vector<long>>\
    \ col;\n    std::vector<std::vector<long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    std::vector<std::vector<long>>\
    \ res;\n    std::vector<std::vector<long>> rows;\n    std::vector<std::vector<long>>\
    \ cols;\n    std::vector<std::vector<long>> row;\n    std::vector<std::vector<long>>\
    \ col;\n    std::vector<std::vector<long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    std::vector<std::vector<long>>\
    \ res;\n    std::vector<std::vector<long>> rows;\n    std::vector<std::vector<long>>\
    \ cols;\n    std::vector<std::vector<long>> row;\n    std::vector<std::vector<long>>\
    \ col;\n    std::vector<std::vector<long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ row;\n    std::vector<std::vector<long>> col;\n    std::vector<\n}\nint main()\
    \ {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpr90dhr2v.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpr90dhr2v.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpr90dhr2v.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpr90dhr2v.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpr90dhr2v.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n/tmp/tmpr90dhr2v.cpp: In function 'int main()':\n\
    /tmp/tmpr90dhr2v.cpp:87:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = get_row;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpr90dhr2v.cpp:2:\n/tmp/tmpr90dhr2v.cpp:88:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n                   \
    \                                ^\n/tmp/tmpr90dhr2v.cpp:88:53: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enab"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    for (auto &row : lst) {\n        rows.push_back(row);\n    }\n  \
    \  std::sort(rows.begin(), rows.end(), [](std::vector<long> &a, std::vector<long>\
    \ &b) { return a.size() > b.size(); });\n    for (auto &row : rows) {\n      \
    \  std::sort(row.begin(), row.end(), [](long &a, long &b) { return a > b; });\n\
    \    }\n    for (auto &row : rows) {\n        for (auto &elem : row) {\n     \
    \       if (elem == x) {\n                res.push_back(std::make_tuple(row.size()\
    \ - 1, row.size() - 1));\n            }\n        }\n    }\n    return res;\n}\n\
    int main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpfb5un1iy.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpfb5un1iy.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpfb5un1iy.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpfb5un1iy.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpfb5un1iy.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ temp;\n    std::vector<std::vector<long>> temp2;\n    std::vector<std::vector<long>>\
    \ temp3;\n    std::vector<std::vector<long>> temp4;\n    std::vector<std::vector<long>>\
    \ temp5;\n    std::vector<std::vector<long>> temp6;\n    std::vector<std::vector<long>>\
    \ temp7;\n    std::vector<std::vector<long>> temp8;\n    std::vector<std::vector<long>>\
    \ temp9;\n    std::vector<std::vector<long>> temp10;\n    std::vector<std::vector<long>>\
    \ temp11;\n    std::vector<std::vector<long>> temp12;\n    std::vector<std::vector<long>>\
    \ temp13;\n    std::vector<std::vector<long>> temp14;\n    std::vector<std::vector<long>>\
    \ temp15;\n    std::vector<std::vector<long>> temp16;\n    std::vector<std::vector<long>>\
    \ temp17;\n    std::vector<std::vector<long>> temp18;\n    std::vector<std::vector<long>>\
    \ temp19;\n    std::vector<std::vector<long>> temp20;\n    std::vector<std::vector<long>>\
    \ temp21;\n    std::vector<std::vector<long>> temp22;\n    std::vector<std::vector<long>>\
    \ temp23;\n    std::vector<std::vector<long>> temp24;\n    std::vector<std::vector<long>>\
    \ temp25;\n    std::vector<std::vector<long>> temp26;\n    std::vector<std::vector<long>>\
    \ temp27;\n    std::vector<std::vector<long>> temp28;\n    std::vector<std::vector<long>>\
    \ temp29;\n    std::vector<std::vector<long>> temp30;\n    std::vector<std::vector<long>>\
    \ temp31;\n    std::vector<std::vector<long>> temp32;\n    std::vector<std::vector<long>>\
    \ temp33;\n    std::vector<std::vector<long>> temp34;\n    std::vector<std::vector<long>>\
    \ temp35;\n    std::vector<std::vector<long>> temp36;\n    std::vector<std::vector<long>>\
    \ temp37;\n    std::vector<std::vector<long>> temp38;\n    std::vector<std::vector<long>>\
    \ temp39;\n    std::vector<std::vector<long>> temp40;\n    std::vector<std::vector<long>>\
    \ temp41;\n    std::vector<std::vector<long>> temp42;\n    std::vector<std::vector<long>>\
    \ temp43;\n    std::vector<std::vector<long>> temp44;\n    std::vector<std::vector<long>>\
    \ temp45;\n    std::vector<std::vector<long>> temp46;\n    std::vector<std::vector<long>>\
    \ temp47;\n    std::vector<std::vector<long>> temp48;\n    std::vector<std::vector<long>>\
    \ temp49;\n    std::vector<std::vector<long>> temp50;\n    std::vector<std::vector<long>>\
    \ temp51;\n    std::vector<std::vector<long>> temp52;\n    std::vector<std::vector<long>>\
    \ temp53;\n    std::vector<std::vector<long>> temp54;\n    std::vector<std::vector<long>>\
    \ temp55;\n    std::vector<std::vector<long>> temp56;\n    \n}\nint main() {\n\
    \    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5w_fjr1_.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmp5w_fjr1_.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmp5w_fjr1_.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmp5w_fjr1_.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmp5w_fjr1_.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n/tmp/tmp5w_fjr1_.cpp: In function 'int main()':\n\
    /tmp/tmp5w_fjr1_.cpp:81:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = get_row;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5w_fjr1_.cpp:2:\n/tmp/tmp5w_fjr1_.cpp:82:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n                   \
    \                                ^\n/tmp/tmp5w_fjr1_.cpp:82:53: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enab"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::tuple<long,\
    \ long>> temp;\n    long row = 0;\n    long col = 0;\n    for (auto &v : lst)\
    \ {\n        row += v.size();\n    }\n    for (auto &v : lst) {\n        col +=\
    \ v.size();\n    }\n    for (auto &v : lst) {\n        for (auto &v2 : v) {\n\
    \            if (v2 == x) {\n                temp.emplace_back(row, col);\n  \
    \          }\n        }\n    }\n    std::sort(temp.begin(), temp.end(), [](std::tuple<long,\
    \ long> a, std::tuple<long, long> b) {\n        return std::get<0>(a) < std::get<0>(b);\n\
    \    });\n    for (auto &v : temp) {\n        res.emplace_back(std::get<0>(v),\
    \ std::get<1>(v));\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpcvl2p06f.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpcvl2p06f.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpcvl2p06f.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpcvl2p06f.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpcvl2p06f.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    for(auto &row\
    \ : lst) {\n        for(auto &col : row) {\n            if(col == x) {\n     \
    \           res.emplace_back(std::make_tuple(row.size(), col.size()));\n     \
    \       }\n        }\n    }\n    std::sort(res.begin(), res.end(), [](const std::tuple<long,\
    \ long> &a, const std::tuple<long, long> &b) { return std::get<0>(a) < std::get<0>(b);\
    \ });\n    std::sort(res.begin(), res.end(), [](const std::tuple<long, long> &a,\
    \ const std::tuple<long, long> &b) { return std::get<1>(a) < std::get<1>(b); });\n\
    \    return res;\n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo92l9q1p.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpo92l9q1p.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpo92l9q1p.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpo92l9q1p.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpo92l9q1p.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ temp;\n    long row = 0;\n    long col = 0;\n    for (auto &it : lst) {\n  \
    \      if (it == x) {\n            temp.push_back(it);\n            row += 1;\n\
    \        } else {\n            temp.push_back(it);\n            row += 1;\n  \
    \          col += 1;\n        }\n    }\n    temp.push_back(std::make_tuple(row,\
    \ col));\n    std::sort(temp.begin(), temp.end(), [](auto &a, auto &b) {\n   \
    \     return std::get<0>(a) > std::get<0>(b);\n    });\n    std::sort(temp.begin(),\
    \ temp.end(), [](auto &a, auto &b) {\n        return std::get<1>(a) > std::get<1>(b);\n\
    \    });\n    for (auto &it : temp) {\n        res.push_back(std::make_tuple(std::get<0>(it),\
    \ std::get<1>(it)));\n    }\n    return res;\n}\nint main() {\n    auto candidate\
    \ = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpxo9g_5_1.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpxo9g_5_1.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpxo9g_5_1.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpxo9g_5_1.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpxo9g_5_1.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    for (auto &v : lst) {\n\
    \        rows.push_back(v);\n        cols.push_back(v);\n    }\n    sort(rows.begin(),\
    \ rows.end(), [](std::vector<long> &a, std::vector<long> &b) {\n        return\
    \ a.size() > b.size();\n    });\n    sort(cols.begin(), cols.end(), [](std::vector<long>\
    \ &a, std::vector<long> &b) {\n        return a.size() > b.size();\n    });\n\
    \    for (auto &row : rows) {\n        auto it = std::find(row.begin(), row.end(),\
    \ x);\n        if (it != row.end()) {\n            std::tuple<long, long> coord\
    \ = std::make_tuple(std::distance(row.begin(), it), std::distance(row.begin(),\
    \ std::find(row.begin(), row.end(), x)));\n            res.push_back(coord);\n\
    \        }\n    }\n    return res;\n}\nint main() {\n    auto candidate = get_row;\n\
    \    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpq2h45_59.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpq2h45_59.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpq2h45_59.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpq2h45_59.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpq2h45_59.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ temp;\n    long row = 0;\n    long col = 0;\n    long tempRow = 0;\n    long\
    \ tempCol = 0;\n    long tempRow2 = 0;\n    long tempCol2 = 0;\n    long tempRow3\
    \ = 0;\n    long tempCol3 = 0;\n    long tempRow4 = 0;\n    long tempCol4 = 0;\n\
    \    long tempRow5 = 0;\n    long tempCol5 = 0;\n    long tempRow6 = 0;\n    long\
    \ tempCol6 = 0;\n    long tempRow7 = 0;\n    long tempCol7 = 0;\n    long tempRow8\
    \ = 0;\n    long tempCol8 = 0;\n    long tempRow9 = 0;\n    long tempCol9 = 0;\n\
    \    long tempRow10 = 0;\n    long tempCol10 = 0;\n    long tempRow11 = 0;\n \
    \   long tempCol11 = 0;\n    long tempRow12 = 0;\n    long tempCol12 = 0;\n  \
    \  long tempRow13 = 0;\n    long tempCol13 = 0;\n    long tempRow14 = 0;\n   \
    \ long tempCol14 = 0;\n    long tempRow15 = 0;\n    long tempCol15 = 0;\n    long\
    \ tempRow16 = 0;\n    long tempCol16 = 0;\n    long tempRow17 = 0;\n    long tempCol17\
    \ = 0;\n    long tempRow18 = 0;\n    long tempCol18 = 0;\n    long tempRow19 =\
    \ 0;\n    long tempCol19 = 0;\n    long tempRow20 = 0;\n    long tempCol20 = 0;\n\
    \    long tempRow21 = 0;\n    long tempCol21 = 0;\n    long tempRow22 = 0;\n \
    \   long tempCol22 = 0;\n    long tempRow23 = 0;\n    long tempCol23 = 0;\n  \
    \  long tempRow24 = 0;\n    long tempCol24 = 0;\n    long tempRow25 = 0;\n   \
    \ long tempCol25 = 0;\n    long tempRow26 = 0;\n    long tempCol26 = 0;\n    long\
    \ tempRow27 = 0;\n    long tempCol27 = 0;\n    long tempRow28 = 0;\n    long tempCol28\
    \ = 0;\n    long tempRow29 = 0;\n    long tempCol29 = 0;\n    long tempRow30 =\
    \ 0;\n    long tempCol30 = 0;\n    long tempRow31 = 0;\n    long tempCol31 = 0;\n\
    \    long tempRow32 = 0;\n    long tempCol32 = 0;\n    long tempRow33 = 0;\n \
    \   long tempCol33 = 0;\n    long tempRow34 = 0;\n    long tempCol34 = 0;\n  \
    \  long \n}\nint main() {\n    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp2r5jd6wl.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmp2r5jd6wl.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmp2r5jd6wl.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmp2r5jd6wl.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmp2r5jd6wl.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n/tmp/tmp2r5jd6wl.cpp: In function 'int main()':\n\
    /tmp/tmp2r5jd6wl.cpp:96:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = get_row;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp2r5jd6wl.cpp:2:\n/tmp/tmp2r5jd6wl.cpp:97:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n                   \
    \                                ^\n/tmp/tmp2r5jd6wl.cpp:97:53: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enab"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ rows;\n    std::vector<std::vector<long>> cols;\n    std::vector<std::vector<long>>\
    \ temp;\n    std::vector<std::vector<long>> temp2;\n    std::vector<std::vector<long>>\
    \ temp3;\n    std::vector<std::vector<long>> temp4;\n    std::vector<std::vector<long>>\
    \ temp5;\n    std::vector<std::vector<long>> temp6;\n    std::vector<std::vector<long>>\
    \ temp7;\n    std::vector<std::vector<long>> temp8;\n    std::vector<std::vector<long>>\
    \ temp9;\n    std::vector<std::vector<long>> temp10;\n    std::vector<std::vector<long>>\
    \ temp11;\n    std::vector<std::vector<long>> temp12;\n    std::vector<std::vector<long>>\
    \ temp13;\n    std::vector<std::vector<long>> temp14;\n    std::vector<std::vector<long>>\
    \ temp15;\n    std::vector<std::vector<long>> temp16;\n    std::vector<std::vector<long>>\
    \ temp17;\n    std::vector<std::vector<long>> temp18;\n    std::vector<std::vector<long>>\
    \ temp19;\n    std::vector<std::vector<long>> temp20;\n    std::vector<std::vector<long>>\
    \ temp21;\n    std::vector<std::vector<long>> temp22;\n    std::vector<std::vector<long>>\
    \ temp23;\n    std::vector<std::vector<long>> temp24;\n    std::vector<std::vector<long>>\
    \ temp25;\n    std::vector<std::vector<long>> temp26;\n    std::vector<std::vector<long>>\
    \ temp27;\n    std::vector<std::vector<long>> temp28;\n    std::vector<std::vector<long>>\
    \ temp29;\n    std::vector<std::vector<long>> temp30;\n    std::vector<std::vector<long>>\
    \ temp31;\n    std::vector<std::vector<long>> temp32;\n    std::vector<std::vector<long>>\
    \ temp33;\n    std::vector<std::vector<long>> temp34;\n    std::vector<std::vector<long>>\
    \ temp35;\n    std::vector<std::vector<long>> temp36;\n    std::vector<std::vector<long>>\
    \ temp37;\n    std::vector<std::vector<long>> temp38;\n    std::vector<std::vector<long>>\
    \ temp39;\n    std::vector<std::vector<long>> temp40;\n    std::vector<std::vector<long>>\
    \ temp41;\n    std::vector<std::vector<long>> temp42;\n    std::vector<std::vector<long>>\
    \ temp43;\n    std::vector<std::vector<long>> temp44;\n    std::vector<std::vector<long>>\
    \ temp45;\n    std::vector<std::vector<long>> temp46;\n    std::vector<std::vector<long>>\
    \ temp47;\n    std::vector<std::vector<long>> temp48;\n    std::vector<std::vector<long>>\
    \ temp49;\n    std::vector<std::vector<long>> temp50;\n    std::vector<std::vector<long>>\
    \ temp51;\n    std::vector<std::vector<long>> temp52;\n    std::vector<std::vector<long>>\
    \ temp53;\n    std::vector<std::vector<long>> temp54;\n    std::vector<std::vector<long>>\
    \ temp55;\n    std::vector<std::vector<long>> temp56;\n    \n}\nint main() {\n\
    \    auto candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmp5w_fjr1_.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmp5w_fjr1_.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmp5w_fjr1_.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmp5w_fjr1_.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmp5w_fjr1_.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n/tmp/tmp5w_fjr1_.cpp: In function 'int main()':\n\
    /tmp/tmp5w_fjr1_.cpp:81:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = get_row;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmp5w_fjr1_.cpp:2:\n/tmp/tmp5w_fjr1_.cpp:82:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n                   \
    \                                ^\n/tmp/tmp5w_fjr1_.cpp:82:53: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enab"
  stdout: ''
- exit_code: 1
  program: "#include<assert.h>\n#include<bits/stdc++.h>\n// You are given a 2 dimensional\
    \ data, as a nested lists,\n// which is similar to matrix, however, unlike matrices,\n\
    // each row may contain a different number of columns.\n// Given lst, and integer\
    \ x, find integers x in the list,\n// and return list of tuples, [(x1, y1), (x2,\
    \ y2) ...] such that\n// each tuple is a coordinate - (row, columns), starting\
    \ with 0.\n// Sort coordinates initially by rows in ascending order.\n// Also,\
    \ sort coordinates of the row by columns in descending order.\n// Examples:\n\
    // >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1))\n// (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)}))\n// >>> get_row((std::vector<std::vector<long>>()),\
    \ (1))\n// (std::vector<std::tuple<long, long>>())\n// >>> get_row((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3))\n// (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)}))\nstd::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n    std::vector<std::tuple<long, long>> res;\n    std::vector<std::vector<long>>\
    \ temp;\n    std::vector<std::vector<long>> temp2;\n    std::vector<std::vector<long>>\
    \ temp3;\n    std::vector<std::vector<long>> temp4;\n    std::vector<std::vector<long>>\
    \ temp5;\n    std::vector<std::vector<long>> temp6;\n    std::vector<std::vector<long>>\
    \ temp7;\n    std::vector<std::vector<long>> temp8;\n    std::vector<std::vector<long>>\
    \ temp9;\n    std::vector<std::vector<long>> temp10;\n    std::vector<std::vector<long>>\
    \ temp11;\n    std::vector<std::vector<long>> temp12;\n    std::vector<std::vector<long>>\
    \ temp13;\n    std::vector<std::vector<long>> temp14;\n    std::vector<std::vector<long>>\
    \ temp15;\n    std::vector<std::vector<long>> temp16;\n    std::vector<std::vector<long>>\
    \ temp17;\n    std::vector<std::vector<long>> temp18;\n    std::vector<std::vector<long>>\
    \ temp19;\n    std::vector<std::vector<long>> temp20;\n    std::vector<std::vector<long>>\
    \ temp21;\n    std::vector<std::vector<long>> temp22;\n    std::vector<std::vector<long>>\
    \ temp23;\n    std::vector<std::vector<long>> temp24;\n    std::vector<std::vector<long>>\
    \ temp25;\n    std::vector<std::vector<long>> temp26;\n    std::vector<std::vector<long>>\
    \ temp27;\n    std::vector<std::vector<long>> temp28;\n    std::vector<std::vector<long>>\
    \ temp29;\n    std::vector<std::vector<long>> temp30;\n    std::vector<std::vector<long>>\
    \ temp31;\n    std::vector<std::vector<long>> temp32;\n    std::vector<std::vector<long>>\
    \ temp33;\n    std::vector<std::vector<long>> temp34;\n    std::vector<std::vector<long>>\
    \ temp35;\n    std::vector<std::vector<long>> temp36;\n    std::vector<std::vector<long>>\
    \ temp37;\n    std::vector<std::vector<long>> temp38;\n    std::vector<std::vector<long>>\
    \ temp39;\n    std::vector<std::vector<long>> temp40;\n    std::vector<std::vector<long>>\
    \ temp41;\n    std::vector<std::vector<long>> temp42;\n    std::vector<std::vector<long>>\
    \ temp43;\n    std::vector<std::vector<long>> temp44;\n    std::vector<std::vector<long>>\
    \ temp45;\n    std::vector<std::vector<long>> temp46;\n    std::vector<std::vector<long>>\
    \ temp47;\n    std::vector<std::vector<long>> temp48;\n    std::vector<std::vector<long>>\
    \ temp49;\n    std::vector<std::vector<long>> temp50;\n    std::vector<std::vector<long>>\
    \ temp51;\n    std::vector<std::vector<long>> temp52;\n    std::vector<std::vector<long>>\
    \ temp53;\n    std::vector<std::vector<long>> temp54;\n    std::vector<std::vector<long>>\
    \ temp55;\n    std::vector<std::vector<long>> temp56;\n    std::vector<std::vector<long>>\
    \ temp57;\n    std::vector<std::vector<long>> temp58;\n}\nint main() {\n    auto\
    \ candidate = get_row;\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6})})), (2)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 1), (std::tuple<long, long>)std::make_tuple(1,\
    \ 1), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(3,\
    \ 1), (std::tuple<long, long>)std::make_tuple(4, 1), (std::tuple<long, long>)std::make_tuple(5,\
    \ 1)})));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)1, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)1, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)1, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 0), (std::tuple<long, long>)std::make_tuple(2, 1), (std::tuple<long, long>)std::make_tuple(2,\
    \ 0), (std::tuple<long, long>)std::make_tuple(3, 2), (std::tuple<long, long>)std::make_tuple(3,\
    \ 0), (std::tuple<long, long>)std::make_tuple(4, 3), (std::tuple<long, long>)std::make_tuple(4,\
    \ 0), (std::tuple<long, long>)std::make_tuple(5, 4), (std::tuple<long, long>)std::make_tuple(5,\
    \ 0), (std::tuple<long, long>)std::make_tuple(6, 5), (std::tuple<long, long>)std::make_tuple(6,\
    \ 0)})));\n    assert(candidate((std::vector<std::vector<long>>()), (1)) == (std::vector<std::tuple<long,\
    \ long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1})})),\
    \ (2)) == (std::vector<std::tuple<long, long>>()));\n    assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>(),\
    \ (std::vector<long>)std::vector<long>({(long)1}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3})})), (3)) == (std::vector<std::tuple<long, long>>({(std::tuple<long,\
    \ long>)std::make_tuple(2, 2)})));\n}\n"
  status: SyntaxError
  stderr: "/tmp/tmpo9rqwd7m.cpp:18:13: error: 'tuple' is not a member of 'std'\n std::vector<std::tuple<long,\
    \ long>> get_row(std::vector<std::vector<long>> lst, long x) {\n             ^\n\
    /tmp/tmpo9rqwd7m.cpp:18:13: error: 'tuple' is not a member of 'std'\n/tmp/tmpo9rqwd7m.cpp:18:87:\
    \ error: template argument 1 is invalid\n std::vector<std::tuple<long, long>>\
    \ get_row(std::vector<std::vector<long>> lst, long x) {\n                    \
    \                                                                   ^\n/tmp/tmpo9rqwd7m.cpp:18:87:\
    \ error: template argument 2 is invalid\n/tmp/tmpo9rqwd7m.cpp:18:89: error: expected\
    \ unqualified-id before '{' token\n std::vector<std::tuple<long, long>> get_row(std::vector<std::vector<long>>\
    \ lst, long x) {\n                                                           \
    \                              ^\n/tmp/tmpo9rqwd7m.cpp: In function 'int main()':\n\
    /tmp/tmpo9rqwd7m.cpp:80:10: error: 'candidate' does not name a type\n     auto\
    \ candidate = get_row;\n          ^\nIn file included from /usr/include/c++/4.8.2/cassert:43:0,\n\
    \                 from /usr/include/c++/4.8.2/x86_64-redhat-linux/bits/stdc++.h:33,\n\
    \                 from /tmp/tmpo9rqwd7m.cpp:2:\n/tmp/tmpo9rqwd7m.cpp:81:51: error:\
    \ '>>' should be '> >' within a nested template argument list\n     assert(candidate((std::vector<std::vector<long>>({(std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)1, (long)6}), (std::vector<long>)std::vector<long>({(long)1,\
    \ (long)2, (long)3, (long)4, (long)5, (long)1})})), (1)) == (std::vector<std::tuple<long,\
    \ long>>({(std::tuple<long, long>)std::make_tuple(0, 0), (std::tuple<long, long>)std::make_tuple(1,\
    \ 4), (std::tuple<long, long>)std::make_tuple(1, 0), (std::tuple<long, long>)std::make_tuple(2,\
    \ 5), (std::tuple<long, long>)std::make_tuple(2, 0)})));\n                   \
    \                                ^\n/tmp/tmpo9rqwd7m.cpp:81:53: warning: extended\
    \ initializer lists only available with -std=c++11 or -std=gnu++11 [enab"
  stdout: ''
