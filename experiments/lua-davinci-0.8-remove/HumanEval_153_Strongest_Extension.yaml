name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a list of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ list.\n-- For example, if you are given \"Slices\" as the class and a list of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local ext_strength = {}\n  local min_ext_strength = 0\n  local min_ext_index\
    \ = 0\n  for i, extension in ipairs(extensions) do\n    local strength = 0\n \
    \   for i = 1, #extension do\n      if extension:sub(i, i):find(\"%u\") then\n\
    \        strength = strength + 1\n      elseif extension:sub(i, i):find(\"%l\"\
    ) then\n        strength = strength - 1\n      end\n    end\n    table.insert(ext_strength,\
    \ strength)\n    if strength < min_ext_strength then\n      min_ext_strength =\
    \ strength\n      min_ext_index = i\n    end\n  end\n  return class_name .. \"\
    .\" .. extensions[min_ext_index]\nend", "    -- Your code here\n    return class_name\
    \ .. '.' .. extensions[1]\nend", "    -- ...\nend", "\nend", "    local max_strength\
    \ = -math.huge\n    local strongest_extension\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = extension:match('%u+')\n        local sm = extension:match('%l+')\n\
    \        local strength = #cap - #sm\n        if strength > max_strength then\n\
    \            max_strength = strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
  "    local strongest_class_name = class_name\n    local strongest_extension_name\
    \ = ''\n    local strength = 0", "    -- TODO\n    local strongest= 0\n    local\
    \ index=0\n    for i,v in ipairs(extensions) do\n        local cap=0\n       \
    \ local sm=0\n        for a,b in ipairs(v) do\n            if b:match(\"%u\")\
    \ then cap=cap+1\n            elseif b:match(\"%l\") then sm=sm+1\n          \
    \  end\n        end\n        if (cap-sm>strongest) then\n            strongest=cap-sm\n\
    \            index=i\n        end\n    end\n    return class_name..\".\"..extensions[index]\n\
    end", "  -- Calculate the strength of the extensions and return the strongest\
    \ one.\n  --\n  -- Args:\n  --   class_name: A string, the name of the class.\n\
    \  --   extensions: A list of strings, the name of the extensions.\n  -- Returns:\n\
    \  --   A string, ClassName.StrongestExtensionName.", "    -- your code here\n\
    \    local score=0\n    local strongest_extension\n    for i=1,#extensions do\n\
    \        local cap=0\n        local sm=0\n        for j=1,#extensions[i] do\n\
    \            if extensions[i]:sub(j,j):match(\"%u\") then\n                cap=cap+1\n\
    \            elseif extensions[i]:sub(j,j):match(\"%l\") then\n              \
    \  sm=sm+1\n            end\n        end\n        if cap-sm>score then\n     \
    \       score=cap-sm\n            strongest_extension=extensions[i]\n        end\n\
    \    end\n    return class_name..\".\"..strongest_extension\nend", "\tlocal ext\
    \ = extensions[1]\n\tlocal strength = 0\n\tfor _,e in ipairs(extensions) do\n\t\
    \tlocal cap = e:gsub(\"[^A-Z]\",\"\"):len()\n\t\tlocal sm = e:gsub(\"[^a-z]\"\
    ,\"\"):len()\n\t\tlocal str = cap - sm\n\t\tif str > strength then\n\t\t\text\
    \ = e\n\t\t\tstrength = str\n\t\tend\n\tend\n\treturn class_name .. \".\" .. ext\n\
    end", "  -- your code here\nend", "    local class_name = class_name:lower()\n\
    \    local strongest = 0\n    local strongest_name = \"\"\n    for i, v in ipairs(extensions)\
    \ do\n        local strength = 0\n        local name = v:lower()\n        for\
    \ i = 1, #name do\n            if string.match(name, \"%u\") then\n          \
    \      strength = strength + 1\n            elseif string.match(name, \"%l\")\
    \ then\n                strength = strength - 1\n            end\n        end\n\
    \        if strength > strongest then\n            strongest = strength\n    \
    \        strongest_name = v\n        end\n    end\n    if strongest_name == \"\
    \" then\n        return class_name\n    else\n        return class_name .. \"\
    .\" .. strongest_name\n    end\nend", "   assert(type(class_name) == \"string\"\
    )\n   assert(type(extensions) == \"table\")\n   local strongest_extension = extensions[1]\n\
    \   local strongest_extension_strength = 0\n   for _, extension in ipairs(extensions)\
    \ do\n      local strength = 0\n      for _, char in ipairs({extension:byte(1,\
    \ #extension)}) do\n         if char >= 65 and char <= 90 then\n            strength\
    \ = strength + 1\n         elseif char >= 97 and char <= 122 then\n          \
    \  strength = strength - 1\n         end\n      end\n      if strength > strongest_extension_strength\
    \ then\n         strongest_extension_strength = strength\n         strongest_extension\
    \ = extension\n      end\n   end\n   return class_name .. \".\" .. strongest_extension\n\
    end\nassert(Strongest_Extension(\"Slices\", {\"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\"}) == \"Slices.SErviNGSliCes\")", "\t--your code here\n\tlocal max_cap,\
    \ max_sm, strongest_extension = 0, 0, nil\n\tfor _,extension in ipairs(extensions)\
    \ do\n\t\tlocal extension_cap, extension_sm = 0, 0\n\t\tfor c in extension:gmatch(\"\
    %a\") do\n\t\t\tif c:match(\"%u\") then\n\t\t\t\textension_cap = extension_cap\
    \ + 1\n\t\t\telse\n\t\t\t\textension_sm = extension_sm + 1\n\t\t\tend\n\t\tend\n\
    \t\tif extension_cap - extension_sm > max_cap - max_sm then\n\t\t\tmax_cap, max_sm,\
    \ strongest_extension = extension_cap, extension_sm, extension\n\t\tend\n\tend\n\
    \treturn class_name .. \".\" .. strongest_extension\nend", "  local strength =\
    \ -1\n  local str_ext\n  local ini_ext\n  for _, extension in ipairs(extensions)\
    \ do\n    local temp_strength = #extension:match(\"%u\") - #extension:match(\"\
    %l\")\n    if temp_strength > strength then\n      strength = temp_strength\n\
    \      str_ext = extension\n      ini_ext = extension\n    elseif temp_strength\
    \ == strength then\n      str_ext = str_ext:sub(1, #str_ext) .. ', ' .. extension\n\
    \    end\n  end\n  if not str_ext then\n    return class_name\n  elseif #str_ext:match(\"\
    ,\") == nil then\n    return class_name .. '.' .. str_ext\n  else\n    return\
    \ class_name .. '.' .. ini_ext\n  end\nend\nprint(Strongest_Extension(\"AClass\"\
    , {\"AsdfgHdF\", \"aBBBBBbc\", \"ASFasdf\"}))\nprint(Strongest_Extension(\"AClass\"\
    , {\"aBBBBBbc\", \"ASFasdf\", \"AsdfgHdF\"}))\nprint(Strongest_Extension(\"AClass\"\
    , {\"AsdfgHdF\", \"AsdfgHdF\", \"aBBBBBbc\"}))\nprint(Strongest_Extension(\"AClass\"\
    , {\"AsdfgHdF\", \"ASFasdf\", \"aBBBBBbc\"}))", "  -- YOUR CODE HERE\nend", " \
    \ \n  local strongest, strongest_strength = nil, 0\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap, sm = 0, 0\n    for c in extension:gmatch('%a') do\n     \
    \ if c:match('%u') then cap = cap + 1\n      else sm = sm + 1 end\n    end\n \
    \   local strength = cap - sm\n    if strength > strongest_strength or\n     \
    \  (strength == strongest_strength and #extension < #strongest) then\n      strongest,\
    \ strongest_strength = extension, strength\n    end\n  end\n  return strongest\
    \ and class_name .. '.' .. strongest or class_name\nend", "\t-- Your code here\n\
    \tlocal strong = 0\n\tlocal name = ''\n\tfor index, extension in ipairs(extensions)\
    \ do\n\t\tlocal s = #extension:gsub('[^A-Z]', '') - #extension:gsub('[^a-z]',\
    \ '')\n\t\tif s > strong then\n\t\t\tstrong = s\n\t\t\tname = extension\n\t\t\
    end\n\tend\n\treturn class_name .. '.' .. name\nend", "\nend", '    local strongest_name
    = class_name', "  local cap = 0\n  local sm = 0\n  local class_name_length = class_name:len()\n\
    \  local strongest_extension_name = nil\n  for i = 1, #extensions do\n    local\
    \ extension_name = extensions[i]\n    local extension_name_length = extension_name:len()\n\
    \    if extension_name_length ~= class_name_length then\n      for j = 1, extension_name_length\
    \ do\n        local char = extension_name:sub(j, j)\n        if char:find(\"%u\"\
    ) then\n          cap = cap + 1\n        elseif char:find(\"%l\") then\n     \
    \     sm = sm + 1\n        end\n      end\n      if cap ~= 0 then\n        local\
    \ strength = cap - sm\n        if strength < 0 then\n          strongest_extension_name\
    \ = extension_name\n        end\n      end\n    end\n  end\n  if strongest_extension_name\
    \ ~= nil then\n    return class_name .. \".\" .. strongest_extension_name\n  else\n\
    \    return class_name\n  end\nend", "\tlocal function Strength(ext)\n\t\tlocal\
    \ uppercase, lowercase = 0, 0\n\t\tfor i=1,#ext do\n\t\t\tif string.byte(ext,\
    \ i) >= 65 and string.byte(ext, i) <= 90 then\n\t\t\t\tuppercase = uppercase +\
    \ 1\n\t\t\telseif string.byte(ext, i) >= 97 and string.byte(ext, i) <= 122 then\n\
    \t\t\t\tlowercase = lowercase + 1\n\t\t\tend\n\t\tend\n\t\treturn uppercase -\
    \ lowercase\n\tend\n\tlocal strongest_strength, strongest_ext\n\tfor i=1,#extensions\
    \ do\n\t\tlocal strength = Strength(extensions[i])\n\t\tif not strongest_strength\
    \ or strength > strongest_strength then\n\t\t\tstrongest_strength = strength\n\
    \t\t\tstrongest_ext = extensions[i]\n\t\tend\n\tend\n\treturn class_name .. \"\
    .\" .. strongest_ext\nend", "  local strength = {};\n  for i, v in ipairs(extensions)\
    \ do\n    local cap, sm = 0, 0;\n    for c in v:gmatch(\"%u\") do cap = cap +\
    \ 1 end\n    for c in v:gmatch(\"%l\") do sm = sm + 1 end\n    local st = cap\
    \ - sm;\n    if not strength[st] then strength[st] = {} end\n    table.insert(strength[st],\
    \ i);\n  end\n  local best_st = math.min(unpack(strength));\n  return string.format(\"\
    %s.%s\", class_name, extensions[strength[best_st][1]]);\nend", "\nend", "   --\
    \ ...\nend", "    -- YOUR CODE HERE\n    return nil\nend", "\tprint(\"Class: \"\
    \ .. class_name)\n\tprint(\"Extensions: \" .. table.concat(extensions, \", \"\
    ))\n\tlocal strongest_extension = extensions[1]\n\tlocal strongest_extension_strength\
    \ = 0\n\tfor i, extension in ipairs(extensions) do\n\t\tlocal strength = 0\n\t\
    \tfor j = 1, #extension do\n\t\t\tlocal current_char = extension:sub(j, j)\n\t\
    \t\tif current_char:find(\"%u\") then\n\t\t\t\tstrength = strength + 1\n\t\t\t\
    elseif current_char:find(\"%l\") then\n\t\t\t\tstrength = strength - 1\n\t\t\t\
    end\n\t\tend\n\t\tprint(\"Extension: \" .. extension .. \"; Strength: \" .. strength)\n\
    \t\tif strength > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = strength\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn\
    \ class_name .. \".\" .. strongest_extension\nend", "  -- your code here\n  return\n\
    end", "  -- Write your code here:\nend", "    local s_ext = 0;\n    local c_ext\
    \ = 0;\n    local ret = \"\";\n    for _,ext in ipairs(extensions) do\n      \
    \  local cs = 0;\n        local ss = 0;\n        for c in ext:gmatch\".\" do\n\
    \            if c:match\"%u\" then\n                cs = cs + 1;\n           \
    \ elseif c:match\"%l\" then\n                ss = ss + 1;\n            end\n \
    \       end\n        if cs-ss > s_ext then\n            s_ext = cs-ss;\n     \
    \       c_ext = cs;\n            ret = ext;\n        elseif cs-ss == s_ext and\
    \ cs > c_ext then\n            c_ext = cs;\n            ret = ext;\n        end\n\
    \    end\n    return class_name..\".\"..ret;\nend", "  local strongest_name =\
    \ ''\n  local strongest_strength = 0\n  for _, name in ipairs(extensions) do\n\
    \    local uppercase_count = name:len() - name:lower():len()\n    local lowercase_count\
    \ = name:len() - uppercase_count\n    local strength = uppercase_count - lowercase_count\n\
    \    if strength > strongest_strength then\n      strongest_strength = strength\n\
    \      strongest_name = name\n    end\n  end\n  return class_name .. '.' .. strongest_name\n\
    end", "  local selected_strength = -math.huge\n  local strength = 0\n  local selected_extension\
    \ = \"\"\n  for i,extension in ipairs(extensions) do\n    for s in extension:gmatch(\"\
    %u\") do\n      strength = strength + 1\n    end\n    for s in extension:gmatch(\"\
    %l\") do\n      strength = strength - 1\n    end\n    if strength > selected_strength\
    \ then\n      selected_strength = strength\n      selected_extension = extension\n\
    \    end\n    strength = 0\n  end\n  return class_name .. \".\" .. selected_extension\n\
    end", "    -- The strength of an extension is CAP - SM.\n    -- return the strongest\
    \ extension\n    local uppercase_letters = {}\n    local lowercase_letters = {}\n\
    \    local extension_strengths = {}\n    local strongest_extension = {}\n    local\
    \ strongest_extension_name = nil\n    local strongest_extension_strength = 0\n\
    \    local extension_name = nil\n    local extension_strength = 0\n    local exttmp\
    \ = {}\n    -- Construct a table of extension names, CAP numbers, and SM numbers\n\
    \    for i,v in ipairs(extensions) do\n        extension_name = v\n        exttmp\
    \ = {}\n        exttmp[\"name\"] = extension_name\n        exttmp[\"CAP\"] = 0\n\
    \        exttmp[\"SM\"] = 0\n        for c in string.gmatch(extension_name, \"\
    .\") do\n            if string.match(c, \"[A-Z]\") then\n                exttmp[\"\
    CAP\"] = exttmp[\"CAP\"] + 1\n            elseif string.match(c, \"[a-z]\") then\n\
    \                exttmp[\"SM\"] = exttmp[\"SM\"] + 1\n            end\n      \
    \  end\n        exttmp[\"strength\"] = exttmp[\"CAP\"] - exttmp[\"SM\"]\n    \
    \    if exttmp[\"strength\"] > strongest_extension_strength then\n           \
    \ strongest_extension_strength = exttmp[\"strength\"]\n            strongest_extension_name\
    \ = exttmp[\"name\"]\n        end\n        table.insert(extension_strengths, exttmp)\n\
    \    end\n    return class_name .. \".\" .. strongest_extension_name\nend", " \
    \   local strength = 0\n    local strongest = \"\"\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = 0\n        local sm = 0\n        for i = 1, #extension\
    \ do\n            if extension:sub(i, i):match(\"%u\") then\n                cap\
    \ = cap + 1\n            elseif extension:sub(i, i):match(\"%l\") then\n     \
    \           sm = sm + 1\n            end\n        end\n        if cap - sm > strength\
    \ then\n            strength = cap - sm\n            strongest = extension\n \
    \       end\n    end\n    return class_name .. \".\" .. strongest\nend", "  local\
    \ strength = 0\n  local strongest = \"\"\n  for i, extension in ipairs(extensions)\
    \ do\n    local cap = 0\n    local sm = 0\n    for i=1, #extension do\n      if\
    \ string.match(extension:sub(i,i), \"%u\") then\n        cap = cap + 1\n     \
    \ elseif string.match(extension:sub(i,i), \"%l\") then\n        sm = sm + 1\n\
    \      end\n    end\n    local new_strength = cap - sm\n    if new_strength >\
    \ strength then\n      strength = new_strength\n      strongest = extension\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest\nend", "  -- Your code\
    \ here\nend", "\tlocal best_strength = 0\n\tlocal best_extension\n\tfor _, ext\
    \ in ipairs(extensions) do\n\t\tlocal strength = ext:gsub(\"[A-Z]\", \"\"):len()\
    \ - ext:gsub(\"[a-z]\", \"\"):len()\n\t\tif strength > best_strength then\n\t\t\
    \tbest_strength = strength\n\t\t\tbest_extension = ext\n\t\tend\n\tend\n\treturn\
    \ class_name .. \".\" .. best_extension\nend", "    local max_strength = -math.huge\n\
    \    local strongest_extension = nil\n    for _, ext in ipairs(extensions) do\n\
    \        local strength = 0\n        for i = 1, #ext do\n            if ext:sub(i,\
    \ i):upper() == ext:sub(i, i) then\n                strength = strength + 1\n\
    \            else\n                strength = strength - 1\n            end\n\
    \        end\n        if strength > max_strength then\n            max_strength\
    \ = strength\n            strongest_extension = ext\n        end\n    end\n  \
    \  return class_name .. \".\" .. strongest_extension\nend\nassert(Strongest_Extension(\"\
    Slices\", {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"}) == \"Slices.SErviNGSliCes\"\
    )\nassert(Strongest_Extension(\"Slices\", {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    , \"CHeese\"}) == \"Slices.CHeese\")", "  local max_strengt = 0\n  local strongest_extension\
    \ = \"\"\n  for k, v in pairs(extensions) do\n    local s = 0\n    for i = 1,\
    \ #v do\n      if v:sub(i, i):match(\"%u\") then\n        s = s + 1\n      elseif\
    \ v:sub(i, i):match(\"%l\") then\n        s = s - 1\n      end\n    end\n    if\
    \ s > max_strengt then\n      max_strengt = s\n      strongest_extension = v\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_extension\nend", " \
    \   -- Type your code here\nend", "    local strongest_extension_name = \"\"\n\
    \    local strongest_extension_strength = 0\n    for _, extension in ipairs(extensions)\
    \ do\n        local extension_strength = 0\n        for i = 1, #extension do\n\
    \            if extension:sub(i, i):find(\"%u\") then\n                extension_strength\
    \ = extension_strength + 1\n            elseif extension:sub(i, i):find(\"%l\"\
    ) then\n                extension_strength = extension_strength - 1\n        \
    \    end\n        end\n        if extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = extension_strength\n      \
    \      strongest_extension_name = extension\n        end\n    end\n    return\
    \ class_name .. \".\" .. strongest_extension_name\nend", "    local strongest_extension\
    \ = extensions[1]\n    local strongest_extension_strength = 0\n    for i, extension\
    \ in ipairs(extensions) do\n        local extension_strength = 0\n        for\
    \ j = 1, #extension do\n            if extension:byte(j) >= 65 and extension:byte(j)\
    \ <= 90 then\n                extension_strength = extension_strength + 1\n  \
    \          elseif extension:byte(j) >= 97 and extension:byte(j) <= 122 then\n\
    \                extension_strength = extension_strength - 1\n            end\n\
    \        end\n        if strongest_extension_strength < extension_strength then\n\
    \            strongest_extension = extension\n            strongest_extension_strength\
    \ = extension_strength\n        end\n    end\n    return class_name .. \".\" ..\
    \ strongest_extension\nend", "    local best_strength, best_extension = nil, nil\n\
    \    for _,extension in ipairs(extensions) do\n        local strength = 0\n  \
    \      for c in extension:gmatch(\"%a\") do\n            if c:find(\"%u\") then\n\
    \                strength = strength + 1\n            else\n                strength\
    \ = strength - 1\n            end\n        end\n        if strength > best_strength\
    \ then\n            best_strength, best_extension = strength, extension\n    \
    \    end\n    end\n    return class_name .. \".\" .. best_extension\nend", "\t\
    local strongest_extension = \"\"\n\tlocal strength = 0\n\tfor _, extension in\
    \ ipairs(extensions) do\n\t\tlocal cap = string.gsub(extension, \"[^A-Z]\", \"\
    \")\n\t\tlocal sm = string.gsub(extension, \"[^a-z]\", \"\")\n\t\tlocal extension_strength\
    \ = (#cap - #sm) / (#cap + #sm)\n\t\tif extension_strength > strength then\n\t\
    \t\tstrongest_extension = extension\n\t\t\tstrength = extension_strength\n\t\t\
    end\n\tend\n\treturn class_name .. \".\" .. strongest_extension\nend", "  local\
    \ best_strength = -10\n  local best_name = \"\"\n  for i = 1, #extensions do\n\
    \    local name = extensions[i]\n    local strength = 0\n    for j = 1, #name\
    \ do\n      local c = name:sub(j, j)\n      if c:match(\"[A-Z]\") then\n     \
    \   strength = strength + 1\n      elseif c:match(\"[a-z]\") then\n        strength\
    \ = strength - 1\n      end\n    end\n    if strength > best_strength then\n \
    \     best_strength = strength\n      best_name = name\n    end\n  end\n  return\
    \ class_name .. \".\" .. best_name\nend", "\t-- your code here\nend", "    local\
    \ strength = -100;\n    local strongest_ext = \"\";\n    for k,ext in pairs(extensions)\
    \ do\n        local caps = 0;\n        local sm = 0;\n        for i = 1,#ext do\n\
    \            if string.byte(ext,i) >= 65 and string.byte(ext,i) <= 90 then\n \
    \               caps = caps + 1;\n            elseif string.byte(ext,i) >= 97\
    \ and string.byte(ext,i) <= 122 then\n                sm = sm + 1;\n         \
    \   end\n        end\n        local new_strength = caps - sm;\n        if new_strength\
    \ > strength then\n            strength = new_strength;\n            strongest_ext\
    \ = ext;\n        end\n    end\n    return class_name .. \".\" .. strongest_ext;\n\
    end", "\t-- TODO\nend", "\t-- Implement this function.\n\treturn \"ClassName.StrongestExtensionName\"\
    ;\nend", "    local strongest_extension_name = \"\"\n    local strongest_extension_strength\
    \ = -1\n    for i = 1, #extensions do\n        local extension_strength = 0\n\
    \        for j = 1, #extensions[i] do\n            if string.match(extensions[i]:sub(j,\
    \ j), \"%u\") then\n                extension_strength = extension_strength +\
    \ 1\n            elseif string.match(extensions[i]:sub(j, j), \"%l\") then\n \
    \               extension_strength = extension_strength - 1\n            end\n\
    \        end\n        if extension_strength > strongest_extension_strength then\n\
    \            strongest_extension_strength = extension_strength\n            strongest_extension_name\
    \ = extensions[i]\n        end\n    end\n    return class_name .. \".\" .. strongest_extension_name\n\
    end", "   -- write your code here\nend", "\t-- Copy of extensions where the key\
    \ is the strength of the extension \n\t-- and the value is the extension name.\
    \ \n\tlocal strength_name = {}\n\t-- Check all extensions\n\tfor _, ext in ipairs(extensions)\
    \ do\n\t\t-- Get strength of extension\n\t\tlocal strength = Extension_Strength(ext)\n\
    \t\t-- Is the extension stronger than the one we've found?\n\t\tif not strength_name[strength]\
    \ or ext < strength_name[strength] then\n\t\t\t-- Store the extension name with\
    \ its strength\n\t\t\tstrength_name[strength] = ext\n\t\tend\n\tend\n\t-- Check\
    \ if the table is empty\n\tif not next(strength_name) then\n\t\treturn ''\n\t\
    end\n\t-- Get the strength of the strongest extension\n\tlocal strongest_strength\
    \ = table.maxn(strength_name)\n\t-- Return the strongest extension name\n\treturn\
    \ table.concat({class_name, strength_name[strongest_strength]}, '.')\nend", " \
    \ -- Your code here\n  local ext_name = \"\"\n  local strength = -1\n  for i,\
    \ ext in ipairs(extensions) do\n    local new_strength = 0\n    for i=1, string.len(ext)\
    \ do\n      if string.sub(ext, i, i) == string.upper(string.sub(ext, i, i)) then\n\
    \        new_strength = new_strength + 1\n      else\n        new_strength = new_strength\
    \ - 1\n      end\n    end\n    if strength < new_strength then\n      strength\
    \ = new_strength\n      ext_name = ext\n    end\n  end\n  return class_name ..\
    \ \".\" .. ext_name\nend", "  local ext_strength = {}\n  for k, v in ipairs(extensions)\
    \ do\n    local caps = v:match(\"%u+\")\n    local smalls = v:match(\"%l+\")\n\
    \    local strength = caps and #caps or 0 - smalls and #smalls or 0\n    ext_strength[v]\
    \ = strength\n  end\n  table.sort(extensions, function(a, b) return ext_strength[a]\
    \ > ext_strength[b] end)\n  return class_name .. \".\" .. extensions[1]\nend",
  "  local strongest_extension = nil\n  local strongest_strength = nil\n  for i,v\
    \ in ipairs(extensions) do\n    local uppercase = 0\n    local lowercase = 0\n\
    \    for j = 1,#v do\n      if string.match(v, \"%u\") then\n        uppercase\
    \ = uppercase + 1\n      elseif string.match(v, \"%l\") then\n        lowercase\
    \ = lowercase + 1\n      end\n    end\n    local strength = uppercase - lowercase\n\
    \    if not strongest_strength or strength > strongest_strength then\n      strongest_strength\
    \ = strength\n      strongest_extension = v\n    end\n  end\n  return class_name\
    \ .. \".\" .. strongest_extension\nend", "    local strength = 0\n    local strength_ext\
    \ = ''\n    for _,v in ipairs(extensions) do\n        local CAP = #v:match('%u+')\n\
    \        local SM = #v:match('%l+')\n        local current_strength = CAP - SM\n\
    \        if current_strength > strength then\n            strength = current_strength\n\
    \            strength_ext = v\n        end\n    end\n    return class_name ..\
    \ '.' .. strength_ext\nend", "  -- Write your code here.\n  return class_name\n\
    end", "    return class_name .. \".\" .. extensions[1]\nend", "    -- your code\
    \ goes here\n    \n    local maxStrength = -math.huge\n    local maxStrengthExtension\
    \ = ''\n    for k,v in pairs(extensions) do\n        local tempStrength = 0\n\
    \        for i = 1, #v do\n            if (string.sub(v, i, i) == string.upper(string.sub(v,\
    \ i, i))) then\n                tempStrength = tempStrength + 1\n            else\n\
    \                tempStrength = tempStrength - 1\n            end\n        end\n\
    \        if (tempStrength > maxStrength) then\n            maxStrength = tempStrength\n\
    \            maxStrengthExtension = v\n        end\n    end\n    return string.format('%s.%s',\
    \ class_name, maxStrengthExtension)\nend", "  if #extensions == 0 then return\
    \ class_name end\n  local strongest_cap = 0\n  local strongest_sm = 0\n  local\
    \ strongest_extension = ''\n  for i = 1, #extensions do\n    local extension =\
    \ extensions[i]\n    local cap = 0\n    local sm = 0\n    for j = 1, #extension\
    \ do\n      local char = extension:sub(j, j)\n      if char == char:upper() then\n\
    \        cap = cap + 1\n      else\n        sm = sm + 1\n      end\n    end\n\
    \    local extension_strength = cap - sm\n    if extension_strength > strongest_cap\
    \ - strongest_sm then\n      strongest_cap = cap\n      strongest_sm = sm\n  \
    \    strongest_extension = extension\n    end\n  end\n  return class_name .. '.'\
    \ .. strongest_extension\nend", "  local maxStrength = nil;\n  local strongestExtension\
    \ = nil;\n  for i, extension in ipairs(extensions) do\n    local caps = string.len(extension)\
    \ - string.len(string.gsub(extension, \"%u\", \"\"));\n    local smalls = string.len(extension)\
    \ - string.len(string.gsub(extension, \"%l\", \"\"));\n    local strength = caps\
    \ - smalls;\n    if not maxStrength or strength > maxStrength then\n      maxStrength\
    \ = strength;\n      strongestExtension = extension;\n    end\n  end\n  return\
    \ class_name .. \".\" .. strongestExtension;\nend", "  if type(class_name) ~=\
    \ 'string' or type(extensions) ~= 'table' then return nil end\n  local strength\
    \ = 0;\n  local extension = '';\n  for i,v in ipairs(extensions) do\n    local\
    \ s = string.gsub(v, '[^A-Z]', ''):len() - string.gsub(v, '[^a-z]', ''):len()\n\
    \    if s > strength then\n      strength = s\n      extension = v\n    end\n\
    \  end\n  return class_name .. '.' .. extension\nend", "    return nil\nend",
  "    local strongest_extension = extensions[1]\n    local strongest_strength = 0\n\
    \    for i, ext in ipairs(extensions) do\n        local strength = #ext:gsub(\"\
    [^A-Z]\", \"\") - #ext:gsub(\"[^a-z]\", \"\")\n        if strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = ext\n        end\n    end\n    return class_name .. \".\" .. strongest_extension\n\
    end", "    local strongest_extension_name = \"\"\n    local strength = -math.huge\n\
    \    for _, ext in ipairs(extensions) do\n        local upper = ext:gsub(\"[^A-Z]\"\
    ,\"\")\n        local lower = ext:gsub(\"[^a-z]\",\"\")\n        local cur_strength\
    \ = #upper - #lower\n        if cur_strength > strength then\n            strength\
    \ = cur_strength\n            strongest_extension_name = ext\n        end\n  \
    \  end\n    return class_name .. \".\" .. strongest_extension_name\nend", "\t\
    -- prepare an empty list of extensions' strengths\n\tlocal strengths = {}\n\t\
    -- for every extension in the list of extensions, do...\n\tfor _, extension in\
    \ ipairs(extensions) do\n\t\t-- find the number of uppercase letters in the extension\n\
    \t\tlocal cap = extension:gsub(\"[^A-Z]\", \"\"):len()\n\t\t-- find the number\
    \ of lowercase letters in the extension\n\t\tlocal sm = extension:gsub(\"[^a-z]\"\
    , \"\"):len()\n\t\t-- compute the strength of the extension\n\t\tlocal strength\
    \ = cap - sm\n\t\t-- add the strength of the extension to the list of strengths\n\
    \t\tstrengths[#strengths + 1] = strength\n\tend\n\t-- find the index of the strongest\
    \ extension\n\tlocal strongest_idx = 1\n\tfor i = 2, #strengths do\n\t\tif strengths[i]\
    \ > strengths[strongest_idx] then\n\t\t\tstrongest_idx = i\n\t\tend\n\tend\n\t\
    -- return the class and the strongest extension in the format 'ClassName.StrongestExtensionName'\n\
    \treturn class_name .. \".\" .. extensions[strongest_idx]\nend\nprint(Strongest_Extension(\"\
    Slices\", {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"}))", "\tlocal strongest_extension\
    \ = \"\"\n\tlocal strongest_extension_strength = 0\n\tfor i,extension in ipairs(extensions)\
    \ do\n\t\tlocal caps = 0\n\t\tlocal smalls = 0\n\t\tfor i=1, #extension do\n\t\
    \t\tlocal letter = extension:sub(i,i)\n\t\t\tif letter:match(\"%u\") then\n\t\t\
    \t\tcaps = caps + 1\n\t\t\telseif letter:match(\"%l\") then\n\t\t\t\tsmalls =\
    \ smalls + 1\n\t\t\tend\n\t\tend\n\t\tlocal extension_strength = caps - smalls\n\
    \t\tif strongest_extension_strength < extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = extension_strength\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\
    \treturn class_name .. \".\" .. strongest_extension\nend", "\t\n\tlocal strength\
    \ = 0\n\tlocal strongest = \"\"\n\t\n\tfor i = 1, #extensions do\n\t\tlocal CAP\
    \ = string.upper(extensions[i])\n\t\tlocal SM = string.lower(extensions[i])\n\t\
    \t\n\t\tif ((string.len(CAP) - string.len(SM)) / string.len(extensions[i])) >\
    \ strength then\n\t\t\tstrength = ((string.len(CAP) - string.len(SM)) / string.len(extensions[i]))\n\
    \t\t\tstrongest = extensions[i]\n\t\tend\n\tend\n\t\n\treturn class_name .. \"\
    .\" .. strongest\nend", "  local strongest = { value = 0, index = 0 }\n  for k,extension\
    \ in ipairs(extensions) do\n    local upper, lower = 0, 0\n    for i = 1, #extension\
    \ do\n      if extension:sub(i,i):match(\"%u\") then\n        upper = upper +\
    \ 1\n      elseif extension:sub(i,i):match(\"%l\") then\n        lower = lower\
    \ + 1\n      end\n    end\n    local strength = upper - lower\n    if strength\
    \ > strongest.value then\n      strongest.value = strength\n      strongest.index\
    \ = k\n    end\n  end\n  return class_name .. \".\" .. extensions[strongest.index]\n\
    end", "  assert(type(class_name) == \"string\")\n  assert(type(extensions) ==\
    \ \"table\")\n  assert(type(extensions[1]) == \"string\")\n  return \"Slices.SErviNGSliCes\"\
    \nend", "  local strongest_ext = {strength = -99999, name = \"\"}\n  for k, v\
    \ in ipairs(extensions) do\n    local strength = Get_Strength(v)\n    if (strength\
    \ > strongest_ext.strength) then\n      strongest_ext.strength = strength\n  \
    \    strongest_ext.name = v\n    end\n  end\n  return class_name .. \".\" .. strongest_ext.name\n\
    end", "    -- Insert code here\n    local strongest_extension = ''\n    local\
    \ strongest_extension_strength = 0\n    for i = 1, #extensions do\n        local\
    \ caps = 0\n        local lower = 0\n        for j = 1, #extensions[i] do\n  \
    \          if string.match(extensions[i]:sub(j, j), \"%u\") then\n           \
    \     caps = caps + 1\n            elseif string.match(extensions[i]:sub(j, j),\
    \ \"%l\") then\n                lower = lower + 1\n            end\n        end\n\
    \        local strength = caps - lower\n        if strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = strength\n            strongest_extension\
    \ = extensions[i]\n        end\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "\nend", "  local strength = 0\n  local strongest_extension = \"\"\n  for\
    \ k, v in pairs(extensions) do\n    local caps = v:gsub(\"[^A-Z]\", \"\")\n  \
    \  local lowers = v:gsub(\"[^a-z]\", \"\")\n    local current_strength = #caps\
    \ - #lowers\n    if current_strength > strength then\n      strength = current_strength\n\
    \      strongest_extension = v\n    end\n  end\n  return class_name .. \".\" ..\
    \ strongest_extension\nend", "    local max_strength = -math.huge\n    local strongest_extension\
    \ = ''\n    for _, extension in ipairs(extensions) do\n        local caps = extension:gsub('[^A-Z]',\
    \ '')\n        local sms = extension:gsub('[^a-z]', '')\n        local strength\
    \ = #caps - #sms\n        if strength > max_strength then\n            max_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend", "  local max_strength\
    \ = 0\n  local class_extension = \"\"\n  for k,v in pairs(extensions) do\n   \
    \ local up = string.upper(v)\n    local lw = string.lower(v)\n    local strength\
    \ = 0\n    for i = 1, string.len(up) do\n      if string.sub(up, i, i) == string.sub(lw,\
    \ i, i) then\n        break\n      else\n        strength = strength + 1\n   \
    \   end\n    end\n    if strength > max_strength then\n      max_strength = strength\n\
    \      class_extension = up\n    end\n  end\n  return class_name .. \".\" .. class_extension\n\
    end", "\nend", "  local cap = 0\n  local sm = 0\n  local strength = 0\n  local\
    \ strongest = \"\"\n  for _,v in ipairs(extensions) do\n    for i = 1,#v do\n\
    \      if v:sub(i,i):match(\"%u\") then\n        cap = cap + 1\n      elseif v:sub(i,i):match(\"\
    %l\") then\n        sm = sm + 1\n      end\n    end\n    if (cap - sm) > strength\
    \ then\n      strength = cap - sm\n      strongest = v\n    end\n    cap = 0\n\
    \    sm = 0\n  end\n  return class_name .. \".\" .. strongest\nend", "  return\
    \ class_name .. '.' .. extensions[1]\nend", "  local strongest_strength = -100\n\
    \  local strongest_extension_name = \"\"\n  for _,ext in ipairs(extensions) do\n\
    \    local capl = string.len(ext) - string.len(string.gsub(ext, \"[A-Z]\", \"\"\
    ))\n    local smal = string.len(ext) - string.len(string.gsub(ext, \"[a-z]\",\
    \ \"\"))\n    local strength = capl - smal\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension_name =\
    \ ext\n    end\n  end\n  return class_name .. \".\" .. strongest_extension_name\n\
    end", "  local class_name_lc = class_name:lower()\n  local strongest = nil\n \
    \ local strongest_strength = 0\n  for i, ext in ipairs(extensions) do\n    local\
    \ extension_lc = ext:lower()\n    if class_name_lc == extension_lc:sub(1, #class_name_lc)\
    \ then\n      local strength = CalculateStrength(ext)\n      if strength > strongest_strength\
    \ then\n        strongest = ext\n        strongest_strength = strength\n     \
    \ end\n    end\n  end\n  return strongest and class_name .. \".\" .. strongest\
    \ or nil\nend", "\nend", "    local extension_strength = {}\n    for i, v in ipairs(extensions)\
    \ do\n        local upper_letters = 0\n        local lower_letters = 0\n     \
    \   for i2, v2 in ipairs(v) do\n            if v2:find(\"%u\") then\n        \
    \        upper_letters = upper_letters + 1\n            elseif v2:find(\"%l\"\
    ) then\n                lower_letters = lower_letters + 1\n            end\n \
    \       end\n        extension_strength[v] = (upper_letters - lower_letters)\n\
    \    end\n    local strongest_extension = \"\"\n    local strongest_strength =\
    \ 0\n    for i, v in pairs(extension_strength) do\n        if v > strongest_strength\
    \ then\n            strongest_strength = v\n            strongest_extension =\
    \ i\n        end\n    end\n    return class_name .. \".\" .. strongest_extension\n\
    end", "   local str = -math.huge\n   local a = 0\n   local t = {}\n   for i,x\
    \ in ipairs(extensions) do\n      local l = x:len()\n      local up = 0\n    \
    \  local low = 0\n      for i = 1,l do\n         if x:sub(i,i):match(\"%l\") then\n\
    \            low = low + 1\n         elseif x:sub(i,i):match(\"%u\") then\n  \
    \          up = up + 1\n         end\n      end\n      t[i] = up - low\n     \
    \ if t[i] > str then\n         str = t[i]\n         a = i\n      end\n   end\n\
    \   return class_name..\".\"..extensions[a]\nend", "  -- We'll sort by strength\
    \ first, then by name (if necessary)\n  local function sort_func(a, b)\n    local\
    \ a_strength = 0\n    local b_strength = 0\n    -- We'll only sort if they have\
    \ different strength. Otherwise\n    -- we'll just compare by name.\n    for i\
    \ = 1, string.len(a) do\n      if string.match(a, string.sub(a, i, i), 1) == string.upper(string.sub(a,\
    \ i, i)) then\n        a_strength = a_strength + 1\n      else\n        a_strength\
    \ = a_strength - 1\n      end\n    end\n    for i = 1, string.len(b) do\n    \
    \  if string.match(b, string.sub(b, i, i), 1) == string.upper(string.sub(b, i,\
    \ i)) then\n        b_strength = b_strength + 1\n      else\n        b_strength\
    \ = b_strength - 1\n      end\n    end\n    if a_strength == b_strength then\n\
    \      return a < b\n    else\n      return a_strength > b_strength\n    end\n\
    \  end\n  table.sort(extensions, sort_func)\n  return class_name .. \".\" .. extensions[1]\n\
    end", "  local max = 0\n  local max_ext = \"\"\n  for k,v in pairs(extensions)\
    \ do\n    local uppercase, lowercase = v:match(\"([A-Z]*)([a-z]*)\")\n    local\
    \ strength = uppercase:len() - lowercase:len()\n    if strength > max then\n \
    \     max = strength\n      max_ext = v\n    end\n  end\n  return class_name ..\
    \ \".\" .. max_ext\nend", "    local output\n    local strongest = 0\n    for\
    \ i = 1, #extensions do\n        local caps = 0\n        local lower = 0\n   \
    \     for j = 1, #extensions[i] do\n            if (extensions[i]:byte(j) > 64\
    \ and extensions[i]:byte(j) < 91) then\n                caps = caps + 1\n    \
    \        elseif (extensions[i]:byte(j) > 96 and extensions[i]:byte(j) < 123) then\n\
    \                lower = lower + 1\n            end\n        end\n        local\
    \ strength = caps - lower\n        if (strength > strongest) then\n          \
    \  strongest = strength\n            output = class_name .. \".\" .. extensions[i]\n\
    \        end\n    end\n    return output\nend", "    -- your code here\n    return\n\
    end", "    local best_strength = 0\n    local best_extension = \"\"\n    local\
    \ current_strength = 0\n    local lcl = 0\n    local ucl = 0\n    local current_extension\
    \ = \"\"\n    for i,v in ipairs(extensions) do\n        ucl = 0\n        lcl =\
    \ 0\n        current_extension = v\n        for j=1,#current_extension do\n  \
    \          if current_extension:sub(j,j):match(\"%u\") then\n                ucl\
    \ = ucl + 1\n            elseif current_extension:sub(j,j):match(\"%l\") then\n\
    \                lcl = lcl + 1\n            end\n        end\n        current_strength\
    \ = ucl - lcl\n        if current_strength > best_strength then\n            best_strength\
    \ = current_strength\n            best_extension = current_extension\n       \
    \ end\n    end\n    return class_name .. \".\" .. best_extension\nend", "    local\
    \ max_strength = -math.huge\n    local name_of_extension = ''\n    for i = 1,\
    \ #extensions do\n        local CAP = 0\n        local SM = 0\n        for k =\
    \ 1, #extensions[i] do\n            if extensions[i]:sub(k, k):match('%u') then\n\
    \                CAP = CAP + 1\n            elseif extensions[i]:sub(k, k):match('%l')\
    \ then\n                SM = SM + 1\n            end\n        end\n        local\
    \ strength = CAP - SM\n        if strength > max_strength then\n            max_strength\
    \ = strength\n            name_of_extension = extensions[i]\n        end\n   \
    \ end\n    return class_name .. '.' .. name_of_extension\nend", "    local s =\
    \ 0\n    local name = ''\n    for k, v in pairs(extensions) do\n        local\
    \ up = v:gsub('%a', '')\n        local lo = v:gsub('%A', '')\n        local c\
    \ = #up - #lo\n        if c > s then\n            s = c\n            name = v\n\
    \        end\n    end\n    return class_name .. '.' .. name\nend", "    local\
    \ strongest = 0\n    local name = \"\"\n    for _, ext in ipairs(extensions) do\n\
    \        local cap = ext:match(\"%u\")\n        local sm = ext:match(\"%l\")\n\
    \        local strength = cap - sm\n        if strength > strongest then\n   \
    \         strongest = strength\n            name = ext\n        end\n    end\n\
    \    return class_name .. \".\" .. name\nend\nassert(Strongest_Extension(\"Slices\"\
    , {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"}) == \"Slices.SErviNGSliCes\")",
  "    -- Write your code here.\n    local bestStrength = 0\n    local bestExtension\
    \ = ''\n    for i,extension in ipairs(extensions) do\n        local strength =\
    \ 0\n        for j = 1, #extension do\n            if extension:sub(j,j):match('%l')\
    \ then\n                strength = strength - 1\n            else\n          \
    \      strength = strength + 1\n            end\n        end\n        if strength\
    \ > bestStrength then\n            bestStrength = strength\n            bestExtension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. bestExtension\n\
    end", "  local max_strength = -math.huge;\n  local strongest_extension;\n  local\
    \ upper_count;\n  local lower_count;\n  local current_strength;\n  for i = 1,\
    \ #extensions do\n    upper_count = 0;\n    lower_count = 0;\n    for j = 1, #extensions[i]\
    \ do\n      local c = extensions[i]:sub(j, j);\n      if c:match(\"%u\") then\n\
    \        upper_count = upper_count + 1;\n      elseif c:match(\"%l\") then\n \
    \       lower_count = lower_count + 1;\n      end\n    end\n    current_strength\
    \ = upper_count - lower_count;\n    if current_strength > max_strength then\n\
    \      max_strength = current_strength;\n      strongest_extension = extensions[i];\n\
    \    end\n  end\n  return class_name .. \".\" .. strongest_extension;\nend", " \
    \ local strongest = ''\n  local strength = -math.huge\n  for _, extension in ipairs(extensions)\
    \ do\n    local strength_new = (extension:gsub('[^A-Z]', ''):len() -\n       \
    \                   extension:gsub('[^a-z]', ''):len())\n    if strength_new >\
    \ strength then\n      strength = strength_new\n      strongest = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest\nend", "  local name_strength\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap, sm = 0, 0\n\
    \    for char in extension:gmatch(\"%l\") do sm = sm + 1 end\n    for char in\
    \ extension:gmatch(\"%u\") do cap = cap + 1 end\n    name_strength[extension]\
    \ = cap - sm\n  end\n  local strongest = 1\n  for name, strength in pairs(name_strength)\
    \ do\n    if strength > name_strength[extensions[strongest]] then\n      strongest\
    \ = name\n    end\n  end\n  return class_name .. \".\" .. strongest\nend", " \
    \   -- your code here\nend", "  local strongest_ext, strongest_ext_strength =\
    \ nil, 0\n  for i,ext in ipairs(extensions) do\n    local strength = ((ext:gsub(\"\
    [^A-Z]\", \"\"):len() - ext:gsub(\"[^a-z]\", \"\"):len()) / #ext)\n    if strength\
    \ > strongest_ext_strength then\n      strongest_ext_strength = strength\n   \
    \   strongest_ext = ext\n    end\n  end\n  return class_name .. \".\" .. strongest_ext\n\
    end\nprint(Strongest_Extension(\"Slices\", { \"SErviNGSliCes\", \"Cheese\", \"\
    StuFfed\" }))", "    local best_extension = \"\"\n    local best_extension_strength\
    \ = 0\n    for _, ext in ipairs(extensions) do\n        local CAP = #string.gsub(ext,\
    \ \"%l\", \"\")\n        local SM = #string.gsub(ext, \"%u\", \"\")\n        local\
    \ strength = CAP - SM\n        if strength > best_extension_strength then\n  \
    \          best_extension_strength = strength\n            best_extension = ext\n\
    \        end\n    end\n    return class_name .. \".\" .. best_extension\nend",
  "  -- Your code here!\nend\nprint(Strongest_Extension(\"Slices\", {\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"}))", "    local strongest_strength = 0\n    local strongest_extension\
    \ = nil\n    for i = 1, #extensions do\n        local extension = extensions[i]\n\
    \        local caps = 0\n        local sm = 0\n        for j = 1, #extension do\n\
    \            local c = extension:sub(j, j)\n            if c:upper() == c then\n\
    \                caps = caps + 1\n            else\n                sm = sm +\
    \ 1\n            end\n        end\n        local strength = caps - sm\n      \
    \  if strength > strongest_strength then\n            strongest_strength = strength\n\
    \            strongest_extension = extension\n        end\n    end\n    return\
    \ class_name .. \".\" .. strongest_extension\nend", "    if(extensions == nil)\
    \ then return nil end\n    local strongest_extension = extensions[1]\n    local\
    \ strongest_extension_strength = string.len(string.gsub(strongest_extension, \"\
    %l\", \"\")) - string.len(string.gsub(strongest_extension, \"%u\", \"\"))\n  \
    \  for i = 2, #extensions do\n        local strength = string.len(string.gsub(extensions[i],\
    \ \"%l\", \"\")) - string.len(string.gsub(extensions[i], \"%u\", \"\"))\n    \
    \    if(strength > strongest_extension_strength) then\n            strongest_extension\
    \ = extensions[i]\n            strongest_extension_strength = strength\n     \
    \   end\n    end\n    return class_name .. \".\" .. strongest_extension\nend",
  "  -- code here\nend", "  print(class_name)\n  print(extensions)\n  local strength\
    \ = 0\n  local name = \"\"\n  local stren\n  for i = 1, #extensions do\n    local\
    \ cap = 0\n    local sm = 0\n    for j = 1, string.len(extensions[i]) do\n   \
    \   local str = string.sub(extensions[i], j, j)\n      if string.match(str, \"\
    [A-Z]\") then\n        cap = cap + 1\n      elseif string.match(str, \"[a-z]\"\
    ) then\n        sm = sm + 1\n      end\n    end\n    if cap == 0 then\n      stren\
    \ = 0\n    else\n      stren = cap - sm\n    end\n    if stren > strength then\n\
    \      strength = stren\n      name = extensions[i]\n    end\n  end\n  return\
    \ class_name .. \".\" .. name\nend\nprint(Strongest_Extension(\"Slices\", {'SErviNGSliCes',\
    \ 'Cheese', 'StuFfed'}))", "  -- your code here\n  if not class_name or not extensions\
    \ then\n    return nil\n  end\n  local max_strength = 0\n  local max_strength_extension\
    \ = nil\n  for i, v in ipairs(extensions) do\n    local strength = 0\n    for\
    \ i, v in ipairs(v) do\n      if v:match(\"%u\") then\n        strength = strength\
    \ + 1\n      elseif v:match(\"%l\") then\n        strength = strength - 1\n  \
    \    end\n    end\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_strength_extension = v\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_strength_extension\nend", "  local function strength(name)\n    local\
    \ cap, sm = 0, 0\n    for i = 1, #name do\n      local c = name:sub(i, i)\n  \
    \    if c:match('[A-Z]') then cap = cap + 1 end\n      if c:match('[a-z]') then\
    \ sm = sm + 1 end\n    end\n    return cap - sm\n  end\n  local name, str = nil,\
    \ 0\n  for _, e in ipairs(extensions) do\n    local s = strength(e)\n    if s\
    \ > str then\n      name, str = e, s\n    end\n  end\n  return class_name .. '.'\
    \ .. name\nend", '    if #extensions == 0 then return class_name end', "\tlocal\
    \ strongest = {strength = 0, name = ''}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal strength = 0\n\t\tfor _, ch in ipairs(extension) do\n\t\t\tif\
    \ string.match(ch, '[A-Z]') then\n\t\t\t\tstrength = strength + 1\n\t\t\telseif\
    \ string.match(ch, '[a-z]') then\n\t\t\t\tstrength = strength - 1\n\t\t\tend\n\
    \t\tend\n\t\tif strength > strongest.strength then\n\t\t\tstrongest.strength =\
    \ strength\n\t\t\tstrongest.name = extension\n\t\tend\n\tend\n\treturn class_name\
    \ .. '.' .. strongest.name\nend", "\t-- Write your code here\n\tlocal strength\
    \ = {};\n\tlocal lowest = 0;\n\tlocal idx = 0;\n\t\n\tfor i,ext in ipairs(extensions)\
    \ do\n\t\tlocal CAP = 0;\n\t\tlocal SM = 0;\n\t\t\n\t\tfor j=1,string.len(ext)\
    \ do\n\t\t\tif string.sub(ext,j,j) == string.upper(string.sub(ext,j,j)) then\n\
    \t\t\t\tCAP = CAP + 1;\n\t\t\telse\n\t\t\t\tSM = SM + 1;\n\t\t\tend\n\t\tend\n\
    \t\t\n\t\tstrength[i] = CAP - SM;\n\t\t\n\t\tif i == 1 then\n\t\t\tlowest = strength[i];\n\
    \t\t\tidx = i;\n\t\telse\n\t\t\tif strength[i] < lowest then\n\t\t\t\tlowest =\
    \ strength[i];\n\t\t\t\tidx = i;\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn class_name\
    \ .. \".\" .. extensions[idx];\nend", "    local class_name = class_name\n   \
    \ local strongest_extension = nil\n    local strength = 0\n    for i = 1, #extensions\
    \ do\n        local ext_strength = 0\n        local caps = 0\n        local sms\
    \ = 0\n        for j = 1, #extensions[i] do\n            if string.find(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    , string.sub(extensions[i], j, j)) then\n                caps = caps + 1\n   \
    \         else\n                sms = sms + 1\n            end\n        end\n\
    \        ext_strength = caps - sms\n        if ext_strength > strength then\n\
    \            strength = ext_strength\n            strongest_extension = extensions[i]\n\
    \        end\n    end\n    return class_name .. \".\" .. strongest_extension\n\
    end", "\tlocal ext_strength = {}\n\tlocal new_ext_name = {}\n\tlocal max_strength\
    \ = 0\n\tlocal strongest_extension = \"\"\n\tfor i = 1, #extensions do\n\t\tlocal\
    \ cap = 0\n\t\tlocal sm = 0\n\t\tlocal ext_name = extensions[i]\n\t\tfor j = 1,\
    \ #ext_name do\n\t\t\tif string.match(ext_name, string.char(ext_name:byte(j)),\
    \ j) == string.upper(string.char(ext_name:byte(j))) then\n\t\t\t\tcap = cap +\
    \ 1\n\t\t\telse\n\t\t\t\tsm = sm + 1\n\t\t\tend\n\t\tend\n\t\tnew_ext_name[i]\
    \ = string.sub(ext_name, 1, 1):upper() .. string.sub(ext_name, 2, #ext_name)\n\
    \t\text_strength[i] = cap - sm\n\t\tif ext_strength[i] > max_strength then\n\t\
    \t\tmax_strength = ext_strength[i]\n\t\t\tstrongest_extension = new_ext_name[i]\n\
    \t\tend\n\tend\n\treturn class_name .. \".\" .. strongest_extension\nend", "\t\
    local cap, sm = 0, 0\n\tlocal class_name_cap, class_name_sm = 0, 0\n\tlocal max\
    \ = 0\n\tlocal name = \"\"\n\tfor i, extension in ipairs(extensions) do\n\t\t\
    cap, sm = 0, 0\n\t\tfor char in extension:gmatch(\"%a\") do\n\t\t\tif char:match(\"\
    %u\") then\n\t\t\t\tcap = cap + 1\n\t\t\telseif char:match(\"%l\") then\n\t\t\t\
    \tsm = sm + 1\n\t\t\tend\n\t\tend\n\t\tif max < cap - sm then\n\t\t\tmax = cap\
    \ - sm\n\t\t\tname = extension\n\t\tend\n\tend\n\treturn class_name .. \".\" ..\
    \ name\nend", "\tlocal classes = {}\n\tlocal strongest_extension = nil\n\tlocal\
    \ strongest_extension_name = nil\n\tlocal strongest_extension_strength = 0", "\t\
    local strongest_extension = nil\n\tlocal stength = nil\n\tfor i, extension in\
    \ ipairs(extensions) do\n\t\tlocal cap, sm = 0, 0\n\t\tfor _, char in ipairs(extension)\
    \ do\n\t\t\tif char:match(\"[A-Z]\") then\n\t\t\t\tcap = cap + 1\n\t\t\telseif\
    \ char:match(\"[a-z]\") then\n\t\t\t\tsm = sm + 1\n\t\t\tend\n\t\tend\n\t\tif\
    \ not stength or cap - sm > stength then\n\t\t\tstength = cap - sm\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\tif strongest_extension then\n\t\treturn class_name\
    \ .. \".\" .. strongest_extension\n\tend\nend", "    local strongest_extension\
    \ = nil\n    local strongest_extension_name = nil\n    local strongest_strength\
    \ = nil\n    for _, extension in ipairs(extensions) do\n        local CAP = 0\n\
    \        local SM = 0\n        for i = 1, #extension do\n            local char\
    \ = extension:sub(i, i)\n            if string.match(char, '[A-Z]') then\n   \
    \             CAP = CAP + 1\n            elseif string.match(char, '[a-z]') then\n\
    \                SM = SM + 1\n            end\n        end\n        local strength\
    \ = CAP - SM\n        if not strongest_strength or strength > strongest_strength\
    \ then\n            strongest_strength = strength\n            strongest_extension\
    \ = extension\n        end\n    end\n    if not strongest_extension then\n   \
    \     return nil\n    end\n    return class_name .. '.' .. strongest_extension\n\
    end", "    local strong_extension = \"\"\n    local strength = 0\n    for i =\
    \ 1, #extensions do\n        local strength_of_extension = 0\n        local num_capital_letters\
    \ = 0\n        local num_small_letters = 0\n        local extension = extensions[i]\n\
    \        for j = 1, #extension do\n            local ch = extension:sub(j, j)\n\
    \            if ch == ch:upper() then\n                num_capital_letters = num_capital_letters\
    \ + 1\n            elseif ch == ch:lower() then\n                num_small_letters\
    \ = num_small_letters + 1\n            end\n        end\n        strength_of_extension\
    \ = num_capital_letters - num_small_letters\n        if strength_of_extension\
    \ > strength then\n            strength = strength_of_extension\n            strong_extension\
    \ = extension\n        end\n    end\n    return class_name .. \".\" .. strong_extension\n\
    end", "\t-- body\n\tlocal strong = 0\n\tlocal result = \"\"\n\tlocal cap = 0\n\
    \tlocal sm = 0\n\tlocal stre = 0\n\tfor _,val in ipairs(extensions) do\n\t\tcap\
    \ = 0\n\t\tsm = 0\n\t\tfor i = 1, #val do\n\t\t\tif string.match(val:sub(i,i),'%u')\
    \ then\n\t\t\t\tcap = cap + 1\n\t\t\telseif string.match(val:sub(i,i),'%l') then\n\
    \t\t\t\tsm = sm + 1\n\t\t\tend\n\t\tend\n\t\tstre = cap - sm\n\t\tif stre > strong\
    \ then\n\t\t\tstrong = stre\n\t\t\tresult = class_name .. '.' .. val\n\t\tend\n\
    \tend\n\treturn result\nend", "  -- Your code goes here\nend", "  local class_name_cap_nums\
    \ = class_name:upper():gsub(\"[^A-Z]\", \"\")\n  local class_name_sm_nums = class_name:lower():gsub(\"\
    [^a-z]\", \"\")\n  local class_name_cap_num = class_name_cap_nums:len()\n  local\
    \ class_name_sm_num = class_name_sm_nums:len()\n  local class_strength = class_name_cap_num\
    \ - class_name_sm_num\n  local strongest_ext_name = class_name\n  local strongest_ext_strength\
    \ = class_strength\n  for _, ext in ipairs(extensions) do\n    local ext_cap_nums\
    \ = ext:upper():gsub(\"[^A-Z]\", \"\")\n    local ext_sm_nums = ext:lower():gsub(\"\
    [^a-z]\", \"\")\n    local ext_cap_num = ext_cap_nums:len()\n    local ext_sm_num\
    \ = ext_sm_nums:len()\n    local ext_strength = ext_cap_num - ext_sm_num\n   \
    \ if ext_strength > strongest_ext_strength then\n      strongest_ext_name = ext\n\
    \      strongest_ext_strength = ext_strength\n    end\n  end\n  return class_name\
    \ .. \".\" .. strongest_ext_name\nend", "  local result = class_name\n  local\
    \ max_strength = 0\n  for i, extension in ipairs(extensions) do\n    local strength\
    \ = 0\n    for j, letter in ipairs(extension) do\n      if letter >= 'A' and letter\
    \ <= 'Z' then\n        strength = strength + 1\n      elseif letter >= 'a' and\
    \ letter <= 'z' then\n        strength = strength - 1\n      end\n    end\n  \
    \  if strength > max_strength then\n      max_strength = strength\n      result\
    \ = result .. '.' .. extension\n    end\n  end\n  return result\nend", "\tlocal\
    \ strongest = {name = nil, strength = -1}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal s = 0\n\t\tfor i = 1, #extension do\n\t\t\tif extension:sub(i,\
    \ i):find(\"%u\") then\n\t\t\t\ts = s + 1\n\t\t\telseif extension:sub(i, i):find(\"\
    %l\") then\n\t\t\t\ts = s - 1\n\t\t\tend\n\t\tend\n\t\tif s > strongest.strength\
    \ then\n\t\t\tstrongest.name = extension\n\t\t\tstrongest.strength = s\n\t\tend\n\
    \tend\n\treturn class_name .. \".\" .. strongest.name\nend", "\t-- [1] -> get\
    \ number of CAP letters from each string\n\tlocal cap_nums = {}\n\tfor k,v in\
    \ pairs(extensions) do\n\t\tlocal cap_num = 0\n\t\tfor i=1, string.len(v) do\n\
    \t\t\tlocal c = string.sub(v, i, i)\n\t\t\tif string.find(c, \"[A-Z]\") then\n\
    \t\t\t\tcap_num = cap_num + 1\n\t\t\tend\n\t\tend\n\t\tcap_nums[k] = cap_num\n\
    \tend\n\t\n\t-- [2] -> get number of small letters from each string\n\tlocal sm_nums\
    \ = {}\n\tfor k,v in pairs(extensions) do\n\t\tlocal sm_num = 0\n\t\tfor i=1,\
    \ string.len(v) do\n\t\t\tlocal c = string.sub(v, i, i)\n\t\t\tif string.find(c,\
    \ \"[a-z]\") then\n\t\t\t\tsm_num = sm_num + 1\n\t\t\tend\n\t\tend\n\t\tsm_nums[k]\
    \ = sm_num\n\tend\n\t\n\t-- [3] -> find the strongest extension\n\tlocal strongest_ext\
    \ = nil\n\tlocal strength = 0\n\tfor k,v in pairs(extensions) do\n\t\tlocal cap_num\
    \ = cap_nums[k]\n\t\tlocal sm_num = sm_nums[k]\n\t\tlocal cur_strength = (cap_num\
    \ - sm_num) / string.len(v)\n\t\tif cur_strength > strength then\n\t\t\tstrongest_ext\
    \ = v\n\t\t\tstrength = cur_strength\n\t\tend\n\tend\n\t\n\treturn class_name\
    \ .. \".\" .. strongest_ext\nend", "    local extensions_strength = {}\n    for\
    \ i, extension in ipairs(extensions) do\n        local cap = string.len(extension:gsub(\"\
    [^A-Z]\", \"\"))\n        local sm = string.len(extension:gsub(\"[^a-z]\", \"\"\
    ))\n        extensions_strength[i] = {index = i, strength = cap - sm}\n    end\n\
    \    table.sort(extensions_strength, function(a, b) return a.strength > b.strength\
    \ end)\n    return class_name .. \".\" .. extensions[extensions_strength[1].index]\n\
    end", "\tlocal strength, winner = -9999999999, nil\n\tfor _, v in ipairs(extensions)\
    \ do\n\t\tlocal cap, sm = v:gsub(\"[^A-Z]\", \"\"), v:gsub(\"[^a-z]\", \"\")\n\
    \t\tlocal s = cap:len() - sm:len()\n\t\tif s > strength then\n\t\t\tstrength,\
    \ winner = s, v\n\t\tend\n\tend\n\treturn class_name .. \".\" .. winner\nend",
  "    local ext_str = {}\n    local ext_i = {}\n    local max_str = -math.huge\n\
    \    local max_ext = nil\n    for i,e in ipairs(extensions) do\n        local\
    \ str_strength = 0\n        local str_small = 0\n        for j=1,#e do\n     \
    \       local c = e:sub(j,j)\n            if c:find('%u') then\n             \
    \   str_strength = str_strength + 1\n            elseif c:find('%l') then\n  \
    \              str_small = str_small + 1\n            end\n        end\n     \
    \   local strength = str_strength - str_small\n        if strength == max_str\
    \ then\n            ext_str[#ext_str+1] = e\n            ext_i[#ext_i+1] = i\n\
    \        elseif strength > max_str then\n            ext_str = {e}\n         \
    \   ext_i = {i}\n            max_str = strength\n        end\n    end\n    return\
    \ class_name .. '.' .. ext_str[select_min(ext_i)]\nend", "  local class_table\
    \ = {}\n  local max_strength = 0\n  local max_index = 0\n  for i,extension in\
    \ ipairs(extensions) do\n    local cap = 0\n    local sm = 0\n    for c in extension:gmatch\"\
    .\" do\n      if c:match\"%u\" then\n        cap = cap + 1\n      elseif c:match\"\
    %l\" then\n        sm = sm + 1\n      end\n    end\n    if cap - sm > max_strength\
    \ then\n      max_strength = cap - sm\n      max_index = i\n    end\n  end\n \
    \ return class_name .. \".\" .. extensions[max_index]\nend", "  -- Your code here\n\
    end", "  local strongest_extension = extensions[1]\n  local strongest_strength\
    \ = 0\n  for index, extension in ipairs(extensions) do\n    local strength = ClassStrength(extension)\n\
    \    if strength > strongest_strength then\n      strongest_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return string.format(\"\
    %s.%s\", class_name, strongest_extension)\nend", "    local strength = 0\n   \
    \ local strongest_extension = ''\n    for i = 1, #extensions do\n        local\
    \ caps = 0\n        local smalls = 0\n        for i = 1, #extensions[i] do\n \
    \           if extensions[i]:sub(i, i):match('%u') then\n                caps\
    \ = caps + 1\n            elseif extensions[i]:sub(i, i):match('%l') then\n  \
    \              smalls = smalls + 1\n            end\n        end\n        local\
    \ current_strength = caps - smalls\n        if current_strength > strength then\n\
    \            strength = current_strength\n            strongest_extension = extensions[i]\n\
    \        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
  "    local strongest_extension = \"\"\n    local strongest_strength = -100000\n\
    \    for _, extension in ipairs(extensions) do\n        local cap = 0\n      \
    \  local sm = 0\n        for c in extension:gmatch\".\" do\n            if c:match(\"\
    %u\") then\n                cap = cap + 1\n            elseif c:match(\"%l\")\
    \ then\n                sm = sm + 1\n            end\n        end\n        local\
    \ strength = cap - sm\n        if strength > strongest_strength then\n       \
    \     strongest_strength = strength\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name .. \".\" .. strongest_extension\n\
    end", end, "\t\n\t-- write your code here\n\t\nend", "  local class_name = class_name\n\
    \  local extensions = extensions\n  local strong_extension = \"\"\n  local strong_strength\
    \ = 0\n  for _,v in ipairs(extensions) do\n    local strength = 0\n    for i =\
    \ 1, string.len(v) do\n      if string.match(v:sub(i,i), \"[A-Z]\") then\n   \
    \     strength = strength + 1\n      elseif string.match(v:sub(i,i), \"[a-z]\"\
    ) then\n        strength = strength - 1\n      end\n    end\n    if strength >\
    \ strong_strength then\n      strong_strength = strength\n      strong_extension\
    \ = v\n    end\n  end\n  return class_name .. \".\" .. strong_extension\nend",
  "  -- Your code here\nend", "  \n  local function strength(extension)\n    local\
    \ cap, sm = 0, 0\n    for _, letter in pairs(extension) do\n      if string.byte(letter)\
    \ >= 65 and string.byte(letter) <= 90 then\n        cap = cap + 1\n      elseif\
    \ string.byte(letter) >= 97 and string.byte(letter) <= 122 then\n        sm =\
    \ sm + 1\n      end\n    end\n    return cap - sm\n  end\n  \n  local max, index\
    \ = - math.huge, 0\n  for k, extension in pairs(extensions) do\n    local str\
    \ = strength(extension)\n    if str > max then\n      max, index = str, k\n  \
    \  end\n  end\n  return class_name .. \".\" .. extensions[index]\nend", "\tlocal\
    \ _e, _s = nil, -(2^32)\n\tfor i, v in ipairs(extensions) do\n\t\tlocal e = 0\n\
    \t\tfor j = 1, #v do\n\t\t\tif v:sub(j, j):match(\"%a\") then\n\t\t\t\te = e +\
    \ (v:sub(j, j):match(\"%u\") and 1 or -1)\n\t\t\tend\n\t\tend\n\t\tif e > _s then\n\
    \t\t\t_e, _s = v, e\n\t\tend\n\tend\n\treturn _e and class_name .. \".\" .. _e\
    \ or nil\nend\nprint(Strongest_Extension(\"class\", {\"extension\", \"EXTENSION\"\
    , \"extending\", \"EXTENDING\"}))\nprint(Strongest_Extension(\"Slices\", {\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"}))\nprint(Strongest_Extension(\"class\", {\"extension\"\
    , \"EXTENSION\", \"extending\", \"EXTENDING\", \"E\", \"x\", \"T\"}))\nprint(Strongest_Extension(\"\
    class\", {\"NoMoreExtensions\", \"extension\", \"EXTENSION\", \"extending\", \"\
    EXTENDING\", \"E\", \"x\", \"T\"}))", "  local strongest_extension = extensions[1]\n\
    \  local max_strength = 0\n  for i, extension in ipairs(extensions) do\n    local\
    \ upper_count = 0\n    local lower_count = 0\n    for j = 1, #extension do\n \
    \     local c = extension:sub(j, j)\n      if c >= 'A' and c <= 'Z' then\n   \
    \     upper_count = upper_count + 1\n      elseif c >= 'a' and c <= 'z' then\n\
    \        lower_count = lower_count + 1\n      end\n    end\n    local strength\
    \ = upper_count - lower_count\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  -- Your code goes here.\n\
    end", "    local extension_strength = {}\n    for i, v in ipairs(extensions) do\n\
    \        local CAP_counter = 0\n        local SM_counter = 0\n        for j =\
    \ 1, #v do\n            if string.match(v:sub(j, j), \"%u\") then\n          \
    \      CAP_counter = CAP_counter + 1\n            elseif string.match(v:sub(j,\
    \ j), \"%l\") then\n                SM_counter = SM_counter + 1\n            end\n\
    \        end\n        extension_strength[i] = {extension = v, strength = CAP_counter\
    \ - SM_counter}\n    end\n    local max_strength = extension_strength[1].strength\n\
    \    local max_index = 1\n    for i, v in ipairs(extension_strength) do\n    \
    \    if v.strength > max_strength then\n            max_strength = v.strength\n\
    \            max_index = i\n        end\n    end\n    return class_name .. \"\
    .\" .. extension_strength[max_index].extension\nend", "  local strongest_extension\
    \ = 0\n  local extension_name = ''\n  for i = 1, #extensions do\n    local cap_num\
    \ = string.gsub(extensions[i], \"[^A-Z]\", \"\")\n    local sm_num = string.gsub(extensions[i],\
    \ \"[^a-z]\", \"\")\n    local strength = #cap_num - #sm_num\n    if strength\
    \ > strongest_extension then\n      strongest_extension = strength\n      extension_name\
    \ = extensions[i]\n    end\n  end\n  return class_name .. '.' .. extension_name\n\
    end", "  local strongest_extension = ''\n  local strongest_strength = -math.huge\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = #(extension:gsub('[^A-Z]',\
    \ ''))\n    local sm = #(extension:gsub('[^a-z]', ''))\n    local strength = cap\
    \ - sm\n    if strength > strongest_strength then\n      strongest_strength =\
    \ strength\n      strongest_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest_extension\nend", "    -- Hint: You need to be able to find\
    \ the number of uppercase and lowercase\n    -- letters in a string. You may find\
    \ string.find() useful for this.\n    -- For example:\n    --local upper_count\
    \ = 0\n    --local lower_count = 0\n    --local i = 1\n    --while i <= #class_name\
    \ do\n    --    local found, pos = string.find(class_name, \"[A-Z]\", i)\n   \
    \ --    if found then\n    --        upper_count = upper_count + 1\n    --   \
    \     i = pos + 1\n    --    else\n    --        break\n    --    end\n    --end\n\
    \    --i = 1\n    --while i <= #class_name do\n    --    local found, pos = string.find(class_name,\
    \ \"[a-z]\", i)\n    --    if found then\n    --        lower_count = lower_count\
    \ + 1\n    --        i = pos + 1\n    --    else\n    --        break\n    --\
    \    end\n    --end\n    --print(\"upper_count is \" .. upper_count)\n    --print(\"\
    lower_count is \" .. lower_count)\n    --print(\"class_name is \" .. class_name)\n\
    \    --print(\"extensions are:\")\n    --local current_extension\n    --for i,\
    \ current_extension in ipairs(extensions) do\n    --    print(current_extension)\n\
    \    --end\n    --print(\"Length of extensions is \" .. #extensions)\n    --print(\"\
    First element of extensions is \" .. extensions[1])\n    --print(\"Second element\
    \ of extensions is \" .. extensions[2])\n    --print(\"Last element of extensions\
    \ is \" .. extensions[#extensions])\n    --[[\n    -- Hint: Once you find the\
    \ number of upper and lower case letters in the\n    -- string, you may want to\
    \ loop through each element of the extensions\n    -- list and compare each extension\
    \ to the strength of the class.\n    -- You may find that a list of extensions\
    \ with their respective strengths\n    -- is useful.\n    --]]\nend", "    local\
    \ maxStrength = 0\n    local maxExt = ''\n    for i = 1, #extensions do\n    \
    \    local capLetters = 0\n        local smLetters = 0\n        for j = 1, string.len(extensions[i])\
    \ do\n            if string.find(string.upper(extensions[i]), string.sub(extensions[i],\
    \ j, j)) ~= nil then\n                capLetters = capLetters + 1\n          \
    \  else\n                smLetters = smLetters + 1\n            end\n        end\n\
    \        local strength = capLetters - smLetters\n        if strength > maxStrength\
    \ then\n            maxStrength = strength\n            maxExt = extensions[i]\n\
    \        end\n    end\n    return class_name .. '.' .. maxExt\nend", "\t-- your\
    \ code here\nend", "\tlocal class_name = string.upper(class_name)\n\tlocal max\
    \ = 0\n\tlocal res = nil\n\tfor i = 1, #extensions do\n\t\tlocal s = strong(extensions[i])\n\
    \t\tif s > max then\n\t\t\tmax = s\n\t\t\tres = extensions[i]\n\t\tend\n\tend\n\
    \treturn class_name .. \".\" .. res\nend", "  -- your code here\n  if extensions\
    \ == nil then return class_name end\n  local max_val = 0\n  local ret = class_name\n\
    \  for _, ext in ipairs(extensions) do\n    local str = 0\n    for c in ext:gmatch(\"\
    [A-Z]\") do\n      str = str + 1\n    end\n    for c in ext:gmatch(\"[a-z]\")\
    \ do\n      str = str - 1\n    end\n    if str > max_val then\n      max_val =\
    \ str\n      ret = class_name .. \".\" .. ext\n    end\n  end\n  return ret\n\
    end", "\tlocal strongest, extension_cap, extension_sm, strength = 0, 0, 0, 0\n\
    \tlocal strongest_extension\n\tfor _, extension in ipairs(extensions) do\n\t\t\
    extension_cap, extension_sm = 0, 0\n\t\tfor i = 1, #extension do\n\t\t\tif extension:sub(i,\
    \ i):match(\"%u\") then\n\t\t\t\textension_cap = extension_cap + 1\n\t\t\telseif\
    \ extension:sub(i, i):match(\"%l\") then\n\t\t\t\textension_sm = extension_sm\
    \ + 1\n\t\t\tend\n\t\tend\n\t\tstrength = extension_cap - extension_sm\n\t\tif\
    \ strongest < strength then\n\t\t\tstrongest = strength\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\treturn class_name .. \".\" .. strongest_extension\n\
    end", "    local strongest = {strength = -math.huge, index = 0}\n    for i, ext\
    \ in ipairs(extensions) do\n        local strength = 0\n        for i = 1, ext:len()\
    \ do\n            local char = ext:sub(i, i)\n            if char == char:upper()\
    \ then\n                strength = strength + 1\n            else\n          \
    \      strength = strength - 1\n            end\n        end\n        if strength\
    \ > strongest.strength then\n            strongest.strength = strength\n     \
    \       strongest.index = i\n        end\n    end\n    return class_name .. \"\
    .\" .. extensions[strongest.index]\nend", "  -- The strength of the extension\
    \ is as follows: Let CAP be the number of the uppercase\n  -- letters in the extension's\
    \ name, and let SM be the number of lowercase letters \n  -- in the extension's\
    \ name, the strength is given by the fraction CAP - SM. \n  return class_name\
    \ .. \".\" .. ext\nend", "    if not class_name or #class_name == 0 then return\
    \ \"\" end\n    if not extensions or #extensions == 0 then return class_name end\n\
    \    local max_strength = 0\n    local strongest_extension = \"\"\n    for _,\
    \ ext in ipairs(extensions) do\n        local strength = ClassStrength(ext)\n\
    \        if strength > max_strength then\n            max_strength = strength\n\
    \            strongest_extension = ext\n        end\n    end\n    return class_name\
    \ .. \".\" .. strongest_extension\nend", "\tlocal c = class_name\n\tlocal e =\
    \ extensions\n\tlocal a = 0\n\tlocal s = 0\n\tlocal strongest = \"\"\n\tfor i,v\
    \ in ipairs(e) do\n\t\tlocal uppercase = 0\n\t\tlocal lowercase = 0\n\t\tfor j=1,\
    \ string.len(v) do\n\t\t\tif string.sub(v,j,j) == string.upper(string.sub(v,j,j))\
    \ then\n\t\t\t\tuppercase = uppercase + 1\n\t\t\telseif string.sub(v,j,j) == string.lower(string.sub(v,j,j))\
    \ then\n\t\t\t\tlowercase = lowercase + 1\n\t\t\tend\n\t\tend\n\t\tlocal strength\
    \ = uppercase - lowercase\n\t\tif strength > a then\n\t\t\ta = strength\n\t\t\t\
    strongest = v\n\t\tend\n\tend\n\treturn c .. \".\" .. strongest\nend", "\tif class_name\
    \ == nil or extensions == nil then\n\t\treturn nil;\n\tend\n\tif #extensions ==\
    \ 0 then\n\t\treturn class_name;\n\tend\n\t-- body\n\tlocal strongest_extension\
    \ = extensions[1];\n\tlocal strength = nil;\n\tfor i, v in ipairs(extensions)\
    \ do\n\t\tlocal current_strength = get_strength(v);\n\t\tif current_strength ~=\
    \ nil then\n\t\t\tif strength == nil then\n\t\t\t\tstrength = current_strength;\n\
    \t\t\t\tstrongest_extension = v;\n\t\t\telse\n\t\t\t\tif current_strength > strength\
    \ then\n\t\t\t\t\tstrength = current_strength;\n\t\t\t\t\tstrongest_extension\
    \ = v;\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn class_name .. \".\" ..\
    \ strongest_extension;\nend", "\tlocal strongest = {CAP = 0, SM = 0, name = \"\
    \"}", "\tlocal strongest = 0\n\tlocal ext = \"\"\n\tfor k, v in ipairs(extensions)\
    \ do\n\t\tlocal str = v:gsub(\"[%a]\", \"\")\n\t\tlocal cap = v:gsub(\"[^%u]\"\
    , \"\")\n\t\tlocal strength = #cap - #str\n\t\tif strength > strongest then\n\t\
    \t\tstrongest = strength\n\t\t\text = v\n\t\tend\n\tend\n\treturn class_name ..\
    \ \".\" .. ext\nend", "  -- write your code here\nend", "    local strongest =\
    \ \"\"\n    local strength = -math.huge\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap, sm = 0, 0\n        for c in extension:gmatch(\"[A-Z]\"\
    ) do cap = cap + 1 end\n        for c in extension:gmatch(\"[a-z]\") do sm = sm\
    \ + 1 end\n        local new_strength = cap - sm\n        if new_strength > strength\
    \ then\n            strength = new_strength\n            strongest = extension\n\
    \        end\n    end\n    return class_name .. \".\" .. strongest\nend", "  local\
    \ strongest_extension = nil\n  local max_strength = -math.huge\n  for _, ext in\
    \ ipairs(extensions) do\n    local strength = #ext:gsub(\"[^A-Z]\", \"\") - #ext:gsub(\"\
    [^a-z]\", \"\")\n    if strength > max_strength then\n      max_strength = strength\n\
    \      strongest_extension = ext\n    end\n  end\n  return class_name .. \".\"\
    \ .. strongest_extension\nend", "\t\t\t\tlocal strength, strongest = -math.huge,\
    \ \"\"\n\t\t\t\tfor _, ext in ipairs(extensions) do\n\t\t\t\t\t\t\t\tlocal CAP,\
    \ SM = 0, 0\n\t\t\t\t\t\t\t\tfor c in ext:gmatch(\"%u\") do CAP = CAP + 1 end\n\
    \t\t\t\t\t\t\t\tfor c in ext:gmatch(\"%l\") do SM = SM + 1 end\n\t\t\t\t\t\t\t\
    \tif CAP - SM > strength then\n\t\t\t\t\t\t\t\t\t\t\t\tstrength = CAP - SM\n\t\
    \t\t\t\t\t\t\t\t\t\t\tstrongest = ext\n\t\t\t\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\
    \treturn (\"%s.%s\"):format(class_name, strongest)\nend", "  local str = '';\n\
    \  local first = true;\n  local strength = 0;\n  local ext = '';\n  for k, v in\
    \ pairs(extensions) do\n    local cap = string.gsub(v, '[a-z]', '');\n    local\
    \ sm = string.gsub(v, '[A-Z]', '');\n    local str = (#cap - #sm);\n    if(strength\
    \ < str) then\n      strength = str;\n      ext = v;\n    end\n  end\n  return\
    \ class_name .. '.' .. ext;\nend", "    local strongest = ''\n    local strongest_strength\
    \ = 0\n    for _, extension in ipairs(extensions) do\n        local sm = 0\n \
    \       local cap = 0\n        for _, c in ipairs(extension) do\n            if\
    \ string.match(c, '[A-Z]') then\n                cap = cap + 1\n            elseif\
    \ string.match(c, '[a-z]') then\n                sm = sm + 1\n            end\n\
    \        end\n        local strength = cap - sm\n        if strength > strongest_strength\
    \ then\n            strongest = extension\n            strongest_strength = strength\n\
    \        end\n    end\n    return class_name .. '.' .. strongest\nend", "  local\
    \ highest_strength = 0\n  local strongest_extension = \"no extensions\"\n  for\
    \ extension in extensions do\n    --print(extension)\n    local strength = 0\n\
    \    local strength_num = 0\n    local strength_let = 0\n    for i = 1, string.len(extension)\
    \ do\n      if extension:sub(i,i):match(\"%u\") then\n        strength_num = strength_num\
    \ + 1\n      elseif extension:sub(i,i):match(\"%l\") then\n        strength_let\
    \ = strength_let + 1\n      end\n    end\n    strength = strength_num - strength_let\n\
    \    if strength > highest_strength then\n      highest_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ \".\" .. strongest_extension\nend", "  -- Your solution here.\nend", "\tlocal\
    \ strongest_extension_name = \"\"\n\tlocal strongest_extension_strength = 0\n\t\
    local current_extension_strength = 0\n\tlocal current_extension_name = \"\"\n\t\
    for i = 1, #extensions do\n\t\tlocal current_extension_name = extensions[i]\n\t\
    \tcurrent_extension_strength = 0\n\t\tfor index = 1, #current_extension_name do\n\
    \t\t\tif string.find(current_extension_name:sub(index, index), \"[A-Z]\") then\n\
    \t\t\t\tcurrent_extension_strength = current_extension_strength + 1\n\t\t\telseif\
    \ string.find(current_extension_name:sub(index, index), \"[a-z]\") then\n\t\t\t\
    \tcurrent_extension_strength = current_extension_strength - 1\n\t\t\tend\n\t\t\
    end\n\t\tif current_extension_strength > strongest_extension_strength then\n\t\
    \t\tstrongest_extension_strength = current_extension_strength\n\t\t\tstrongest_extension_name\
    \ = current_extension_name\n\t\tend\n\tend\n\treturn (class_name .. \".\" .. strongest_extension_name)\n\
    end", "\t-- get strongest extension\nend\nassert(Strongest_Extension(\"Slices\"\
    , {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"}) == \"Slices.SErviNGSliCes\")",
  "    local strength, strongest_extension = 0, nil\n    for _, extension in ipairs(extensions)\
    \ do\n        local CAP, SM = 0, 0\n        for _, c in ipairs(extension) do\n\
    \            if c >= 'A' and c <= 'Z' then\n                CAP = CAP + 1\n  \
    \          elseif c >= 'a' and c <= 'z' then\n                SM = SM + 1\n  \
    \          end\n        end\n        local s = CAP - SM\n        if s > strength\
    \ then\n            strength = s\n            strongest_extension = extension\n\
    \        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
  "    local strongest = {name = nil, strength = -math.huge}\n    for _, ext in ipairs(extensions)\
    \ do\n        local cap, sm = 0, 0\n        for _, c in ipairs(ext) do\n     \
    \       if c:match(\"%u\") then cap = cap + 1\n            elseif c:match(\"%l\"\
    ) then sm = sm + 1 end\n        end\n        local strength = cap - sm\n     \
    \   if strength > strongest.strength then\n            strongest.name = ext\n\
    \            strongest.strength = strength\n        end\n    end\n    return class_name\
    \ .. \".\" .. strongest.name\nend", "    local strongest = {extension = \"\",\
    \ strength = 0}\n    for i,v in ipairs(extensions) do\n        local sm, cap =\
    \ 0, 0\n        for c in v:gmatch(\"%a\") do\n            if c:find(\"%u\") then\
    \ cap = cap + 1\n            else sm = sm + 1 end\n        end\n        local\
    \ strength = cap - sm\n        if strength > strongest.strength then\n       \
    \     strongest.extension = v\n            strongest.strength = strength\n   \
    \     end\n    end\n    return class_name .. \".\" .. strongest.extension\nend\n\
    print(Strongest_Extension(\"Slices\", {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    }))", "  local strongest_extension_name = \"\"\n  local strongest_extension_strength\
    \ = 0", "  local s_max, name_max = nil, nil\n  for _, ext in ipairs(extensions)\
    \ do\n    local s, name = 0, 0\n    for i = 1, #ext do\n      if ext:sub(i, i):lower()\
    \ == ext:sub(i, i) then\n        s = s - 1\n      else\n        s = s + 1\n  \
    \    end\n    end\n    if s_max == nil or s > s_max then\n      s_max, name_max\
    \ = s, ext\n    end\n  end\n  return class_name .. \".\" .. name_max\nend", " \
    \ local str = {}\n  for i = 1, #extensions do\n    str[i] = {cap = 0, sm = 0,\
    \ value = extensions[i]}\n    for j = 1, #extensions[i] do\n      local a = extensions[i]:sub(j,\
    \ j)\n      if a:match(\"[A-Z]\") then\n        str[i].cap = str[i].cap + 1\n\
    \      elseif a:match(\"[a-z]\") then\n        str[i].sm = str[i].sm + 1\n   \
    \   end\n    end\n    str[i].strength = str[i].cap - str[i].sm\n  end\n  table.sort(str,\
    \ function(a, b) return a.strength > b.strength end)\n  return class_name .. \"\
    .\" .. str[1].value\nend", "    local bestExt, bestStrength = nil, -1/0\n    for\
    \ _, ext in ipairs(extensions) do\n        local caps, sms = 0, 0\n        for\
    \ letter in ext:gmatch(\"[A-Z]\") do caps = caps + 1 end\n        for letter in\
    \ ext:gmatch(\"[a-z]\") do sms = sms + 1 end\n        local strength = caps -\
    \ sms\n        if strength > bestStrength then\n            bestStrength = strength\n\
    \            bestExt = ext\n        end\n    end\n    return class_name .. \"\
    .\" .. bestExt\nend", "  -- code here\nend", "\t-- local function get_strength(extension)\n\
    \t-- \tlocal uppercase_count = 0\n\t-- \tlocal lowercase_count = 0\n\t-- \tfor\
    \ letter in extension:gmatch('%l') do\n\t-- \t\tlowercase_count = lowercase_count\
    \ + 1\n\t-- \tend\n\t-- \tfor letter in extension:gmatch('%u') do\n\t-- \t\tuppercase_count\
    \ = uppercase_count + 1\n\t-- \tend\n\t-- \treturn uppercase_count - lowercase_count\n\
    \t-- end\n\t--\n\t-- local function get_name(extension)\n\t-- \treturn class_name\
    \ .. '.' .. extension\n\t-- end\n\t--\n\t-- local maximum_strength = math.max(unpack(table.map(extensions,\
    \ get_strength)))\n\t-- local max_extensions = table.filter(extensions, function(extension)\n\
    \t-- \treturn get_strength(extension) == maximum_strength\n\t-- end)\n\t--\n\t\
    -- return get_name(max_extensions[1])\n\t--\n\t-- The above is the very basic\
    \ algorithm, however, it can be improved by\n\t-- using string.find to reduce\
    \ the number of times that the pattern is\n\t-- called.  But it is still a very\
    \ costly operation.\n\t--\n\t-- For example, if we have the following:\n\t-- \t\
    \tlocal function get_strength(extension)\n\t-- \t\t\tlocal uppercase_count = 0\n\
    \t-- \t\t\tlocal lowercase_count = 0\n\t-- \t\t\tlocal _, extension_length = string.find(extension,\
    \ '%a')\n\t-- \t\t\tlocal position = 1\n\t-- \t\t\twhile position <= extension_length\
    \ do\n\t-- \t\t\t\tif string.find(extension, '%l', position) then\n\t-- \t\t\t\
    \t\tlowercase_count = lowercase_count + 1\n\t-- \t\t\t\telse\n\t-- \t\t\t\t\t\
    uppercase_count = uppercase_count + 1\n\t-- \t\t\t\tend\n\t-- \t", "  -- Your\
    \ code here\n  local class_name_len = 0\n  for _ in class_name:gmatch(\"[A-Z]\"\
    ) do\n    class_name_len = class_name_len + 1\n  end\n  local max_strength = 0\n\
    \  local strongest_ext = \"\"\n  for i = 1, #extensions do\n    local ext_len\
    \ = 0\n    for _ in extensions[i]:gmatch(\"[A-Z]\") do\n      ext_len = ext_len\
    \ + 1\n    end\n    local strength = ext_len - #extensions[i] + class_name_len\n\
    \    if strength > max_strength then\n      max_strength = strength\n      strongest_ext\
    \ = extensions[i]\n    end\n  end\n  return class_name .. \".\" .. strongest_ext\n\
    end", "  local strongest_extension = ''\n  local strongest_strength = -math.huge\n\
    \  for i = 1, #extensions do\n    local extension = extensions[i]\n    local strength\
    \ = 0\n    for j = 1, #extension do\n      local char = extension:sub(j, j)\n\
    \      if char:upper() == char then\n        strength = strength + 1\n      else\n\
    \        strength = strength - 1\n      end\n    end\n    if strength > strongest_strength\
    \ then\n      strongest_strength = strength\n      strongest_extension = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend", "  \
    \  local strongest = \"\";\n    local strongest_strength = -1;\n    for i = 1,\
    \ #extensions do\n        local strength = 0;\n        for j = 1, #extensions[i]\
    \ do\n            if (extensions[i]:byte(j) >= 65 and extensions[i]:byte(j) <=\
    \ 90) then\n                strength = strength + 1;\n            elseif (extensions[i]:byte(j)\
    \ >= 97 and extensions[i]:byte(j) <= 122) then\n                strength = strength\
    \ - 1;\n            end\n        end\n        if (strength > strongest_strength)\
    \ then\n            strongest = extensions[i];\n            strongest_strength\
    \ = strength;\n        end\n    end\n    return class_name .. \".\" .. strongest;\n\
    end", "    local strength_of_extensions = {}\n    for i = 1, #extensions do\n\
    \        local CAP = 0\n        local SM = 0\n        for j = 1, #extensions[i]\
    \ do\n            if extensions[i]:sub(j, j):match(\"%u\") then\n            \
    \    CAP = CAP + 1\n            elseif extensions[i]:sub(j, j):match(\"%l\") then\n\
    \                SM = SM + 1\n            end\n        end\n        strength_of_extensions[i]\
    \ = CAP - SM\n    end\n    local strongest_extension_idx = 1\n    for i = 2, #strength_of_extensions\
    \ do\n        if strength_of_extensions[i] > strength_of_extensions[strongest_extension_idx]\
    \ then\n            strongest_extension_idx = i\n        end\n    end\n    return\
    \ class_name .. \".\" .. extensions[strongest_extension_idx]\nend", "\tlocal strength\
    \ = 0\n\tlocal index = 1\n\tfor i, v in ipairs(extensions) do\n\t\tlocal local_strength\
    \ = 0\n\t\tfor j in v:gmatch(\"%u\") do\n\t\t\tlocal_strength = local_strength\
    \ + 1\n\t\tend\n\t\tfor j in v:gmatch(\"%l\") do\n\t\t\tlocal_strength = local_strength\
    \ - 1\n\t\tend\n\t\tif local_strength > strength then\n\t\t\tstrength = local_strength\n\
    \t\t\tindex = i\n\t\tend\n\tend\n\treturn class_name .. \".\" .. extensions[index]\n\
    end", "    -- your code here\nend", "    local strength = -math.huge\n    local\
    \ the_extension = nil\n    for i, extension in ipairs(extensions) do\n       \
    \ local cap = 0\n        local sm = 0\n        for j = 1, #extension do\n    \
    \        local c = extension:sub(j, j)\n            if c >= 'A' and c <= 'Z' then\n\
    \                cap = cap + 1\n            elseif c >= 'a' and c <= 'z' then\n\
    \                sm = sm + 1\n            end\n        end\n        local s =\
    \ cap - sm\n        if s > strength then\n            strength = s\n         \
    \   the_extension = extension\n        end\n    end\n    return string.format(\"\
    %s.%s\", class_name, the_extension)\nend\nassert(Strongest_Extension(\"Slices\"\
    , {\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"}) == \"Slices.SErviNGSliCes\")\n\
    assert(Strongest_Extension(\"Super\", {\"SuPeRmAn\", \"Super\", \"SuperMaN\"})\
    \ == \"Super.SuPeRmAn\")\nassert(Strongest_Extension(\"Super\", {\"SuPeRmAn\"\
    , \"Super\", \"SuperMaN\", \"Superman\"}) == \"Super.SuPeRmAn\")\nassert(Strongest_Extension(\"\
    Super\", {\"SuPeRmAn\", \"Super\", \"SuperMaN\", \"Superman\", \"SupermanScales\"\
    }) == \"Super.SupermanScales\")\nassert(Strongest_Extension(\"Super\", {\"SuperManScales\"\
    , \"Super\", \"SuperMaN\", \"Superman\", \"SupermanScales\"}) == \"Super.SuperManScales\"\
    )", "  local class_name_extensions = {}\n  local strongest_extension = 0\n  local\
    \ strength = 0\n  for i,v in ipairs(extensions) do\n    class_name_extensions[i]\
    \ = {}\n    local upper = string.gsub(v, \"%l\", \"\")\n    local lower = string.gsub(v,\
    \ \"%u\", \"\")\n    strength = #upper - #lower\n    if strength > strongest_extension\
    \ then\n      strongest_extension = strength\n      class_name_extensions[i][1]\
    \ = v\n      class_name_extensions[i][2] = strength\n    end\n  end\n  for i,v\
    \ in ipairs(class_name_extensions) do\n    if v[2] == strongest_extension then\n\
    \      return class_name .. \".\" .. v[1]\n    end\n  end\nend", "    -- your\
    \ code here\nend", "    local strong_extension_name = class_name\n    local strength\
    \ = -math.huge\n    for _, e in ipairs(extensions) do\n        local new_strength\
    \ = (e:upper():gsub(\"[^A-Z]\", \"\"):len() - e:lower():gsub(\"[^a-z]\", \"\"\
    ):len())\n        if new_strength > strength then\n            strength = new_strength\n\
    \            strong_extension_name = e\n        end\n    end\n    return strong_extension_name\n\
    end", "  local strongest = ''\n  local strength = -math.huge\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = extension:gsub('[^A-Z]', ''):len()\n\
    \    local sm = extension:gsub('[^a-z]', ''):len()\n    local str = cap - sm\n\
    \    if str > strength then\n      strength = str\n      strongest = extension\n\
    \    end\n  end\n  return class_name .. '.' .. strongest\nend", "   -- Your code\
    \ here\nend", "\t-- body\n\tlocal ret = class_name\n\tlocal max_strength = 0\n\
    \tfor _, e in ipairs(extensions) do\n\t\tlocal n = 0\n\t\tfor i = 1, #e do\n\t\
    \t\tlocal ch = e:sub(i, i)\n\t\t\tif string.match(ch, '[A-Z]') then\n\t\t\t\t\
    n = n + 1\n\t\t\telseif string.match(ch, '[a-z]') then\n\t\t\t\tn = n - 1\n\t\t\
    \tend\n\t\tend\n\t\tif n > max_strength then\n\t\t\tmax_strength = n\n\t\t\tret\
    \ = class_name .. '.' .. e\n\t\tend\n\tend\n\treturn ret\nend\nprint(Strongest_Extension('Slices',\
    \ {'SErviNGSliCes', 'Cheese', 'StuFfed'}))", "    local strongest_extension =\
    \ nil;\n    local strength = 0;\n    for i, ext in ipairs(extensions) do\n   \
    \     local cap = ext:gsub(\"%l+\", \"\"):len();\n        local sm = ext:gsub(\"\
    %u+\", \"\"):len();\n        local current_strength = cap - sm;\n        if (current_strength\
    \ > strength) then\n            strength = current_strength;\n            strongest_extension\
    \ = ext;\n        end\n    end\n    return class_name .. \".\" .. strongest_extension;\n\
    end", "    extensions = extensions or {}\n    if extensions[1] == nil then\n \
    \       return class_name\n    end\n    local cap = 0\n    local sm = 0\n    local\
    \ i = 1\n    local max = 0\n    local max_i = 0\n    while extensions[i] ~= nil\
    \ do\n        local j = 1\n        while extensions[i]:sub(j,j) ~= '' do\n   \
    \         if extensions[i]:sub(j,j):find('%u') then\n                cap = cap\
    \ + 1\n            elseif extensions[i]:sub(j,j):find('%l') then\n           \
    \     sm = sm + 1\n            end\n            j = j + 1\n        end\n     \
    \   if (cap - sm) > max then\n            max = cap - sm\n            max_i =\
    \ i\n        end\n        cap = 0\n        sm = 0\n        i = i + 1\n    end\n\
    \    return class_name .. '.' .. extensions[max_i]\nend", "\tlocal strength =\
    \ -100;\n\tlocal strongest = class_name;\n\tlocal strong_ext;\n\tlocal cap = 0;\n\
    \tlocal sm = 0;\n\tlocal s = 0;\n\tfor _, ext in ipairs(extensions) do\n\t\tlocal\
    \ cap = 0;\n\t\tlocal sm = 0;\n\t\tlocal s = 0;\n\t\tfor i=1,#ext do\n\t\t\tif\
    \ (string.match(ext, '[A-Z]')) then\n\t\t\t\tcap = cap + 1;\n\t\t\telseif (string.match(ext,\
    \ '[a-z]')) then\n\t\t\t\tsm = sm + 1;\n\t\t\tend\n\t\tend\n\t\ts = cap - sm;\n\
    \t\tif (s > strength) then\n\t\t\tstrength = s;\n\t\t\tstrongest = class_name;\n\
    \t\t\tstrong_ext = ext;\n\t\tend\n\tend\n\treturn strongest .. '.' .. strong_ext;\n\
    end", "  -- Your code here\n  return \"string\"\nend", "  local strongest_extension\
    \ = extensions[1]\n  local strongest_strength = Get_Strength(strongest_extension)\n\
    \  for i = 2, #extensions do\n    local strength = Get_Strength(extensions[i])\n\
    \    if strength > strongest_strength then\n      strongest_extension = extensions[i]\n\
    \      strongest_strength = strength\n    end\n  end\n  return class_name .. \"\
    .\" .. strongest_extension\nend", "    local strongest = {extension = \"\", strength\
    \ = 0}\n    for _, extension in ipairs(extensions) do\n        local caps = 0\n\
    \        local smalls = 0\n        for _, char in ipairs(extension) do\n     \
    \       if char >= \"A\" and char <= \"Z\" then\n                caps = caps +\
    \ 1\n            elseif char >= \"a\" and char <= \"z\" then\n               \
    \ smalls = smalls + 1\n            end\n        end\n        local strength =\
    \ caps - smalls\n        if strength > strongest.strength then\n            strongest.extension\
    \ = extension\n            strongest.strength = strength\n        end\n    end\n\
    \    return class_name .. \".\" .. strongest.extension\nend", "  return \"Slices.SErviNGSliCes\"\
    \nend", "    -- Your code goes here\nend", "\tlocal strongest = nil\n\tlocal strongest_strength\
    \ = nil\n\tfor i, extension in ipairs(extensions) do\n\t\tlocal strength = 0\n\
    \t\tfor i = 1, #extension do\n\t\t\tlocal c = extension:sub(i, i)\n\t\t\tif c:find('%u')\
    \ then\n\t\t\t\tstrength = strength + 1\n\t\t\telseif c:find('%l') then\n\t\t\t\
    \tstrength = strength - 1\n\t\t\tend\n\t\tend\n\t\tif strength == strongest_strength\
    \ then\n\t\t\tif extension < strongest then\n\t\t\t\tstrongest = extension\n\t\
    \t\tend\n\t\telseif strength > strongest_strength then\n\t\t\tstrongest = extension\n\
    \t\t\tstrongest_strength = strength\n\t\tend\n\tend\n\treturn class_name .. '.'\
    \ .. strongest\nend", "  return (class_name .. '.error')\nend", "    -- your code\
    \ here\n    return \"\"\nend", "    local cur_strength = 0;\n    local cur_strength_name\
    \ = '';\n    for i = 1, #extensions do\n        local uppercase_letters = 0;\n\
    \        local lowercase_letters = 0;\n        for j = 1, #extensions[i] do\n\
    \            if extensions[i]:sub(j, j):match('[A-Z]') then\n                uppercase_letters\
    \ = uppercase_letters + 1;\n            elseif extensions[i]:sub(j, j):match('[a-z]')\
    \ then\n                lowercase_letters = lowercase_letters + 1;\n         \
    \   end\n        end\n        local strength = uppercase_letters - lowercase_letters;\n\
    \        if strength > cur_strength then\n            cur_strength = strength;\n\
    \            cur_strength_name = extensions[i];\n        end\n    end\n    return\
    \ class_name .. '.' .. cur_strength_name;\nend", "    -- [[TODO]]\nend", "   \
    \ local strength, ix = 0, 0\n    for k, ext in ipairs(extensions) do\n       \
    \ local cap, sm = 0, 0\n        for i = 1, #ext do\n            if ext:sub(i,\
    \ i):match(\"%l\") then sm = sm + 1\n            else cap = cap + 1 end\n    \
    \    end\n        local str = cap - sm\n        if str > strength then strength,\
    \ ix = str, k end\n    end\n    return class_name .. \".\" .. extensions[ix]\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
