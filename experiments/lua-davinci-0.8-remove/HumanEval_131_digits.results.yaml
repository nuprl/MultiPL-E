language: lua
name: HumanEval_131_digits
results:
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  return n % 10 * digits(math.floor(n\
    \ / 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpolukwbev.lua:9:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpolukwbev.lua:9: in upvalue 'digits'\n\
    \t/tmp/tmpolukwbev.lua:9: in upvalue 'digits'\n\t/tmp/tmpolukwbev.lua:9: in upvalue\
    \ 'digits'\n\t/tmp/tmpolukwbev.lua:9: in upvalue 'digits'\n\t/tmp/tmpolukwbev.lua:9:\
    \ in upvalue 'digits'\n\t/tmp/tmpolukwbev.lua:9: in upvalue 'digits'\n\t/tmp/tmpolukwbev.lua:9:\
    \ in upvalue 'digits'\n\t/tmp/tmpolukwbev.lua:9: in upvalue 'digits'\n\t/tmp/tmpolukwbev.lua:9:\
    \ in upvalue 'digits'\n\t...\t(skipping 333294 levels)\n\t/tmp/tmpolukwbev.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpolukwbev.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.300 seconds, 0 successes, 1 error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local d = 0\n  for x in tostring(n):gmatch(\"\
    .\") do\n    if x % 2 == 1 then\n      d = d * x\n    end\n  end\n  return d\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfo6t1xs.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpwfo6t1xs.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local res = 1\n    while\
    \ n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n   \
    \         res = res * digit\n        end\n        n = math.floor(n / 10)\n   \
    \ end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1h3mbd5g.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1h3mbd5g.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  -- determine the sign of\
    \ n\n  local sig = 1\n  if n < 0 then\n    sig = -1\n    n = -n\n  end\n  local\
    \ prod = 1\n  while n > 0 do\n    local d = n % 10\n    n = (n - d) / 10\n   \
    \ if d % 2 == 1 then\n      prod = prod * d\n    end\n  end\n  return sig * prod\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz457x4be.lua:35:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpz457x4be.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local ans = 1\n    for\
    \ digit in tostring(n):gmatch(\"%d\") do\n        local ndigit = tonumber(digit)\n\
    \        if ndigit % 2 == 1 then\n            ans = ans * ndigit\n        end\n\
    \    end\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplp7_z6lj.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplp7_z6lj.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local prod = 1\n    while\
    \ n > 0 do\n        local n1 = n % 10\n        if (n1 % 2) ~= 0 then\n       \
    \     prod = prod * n1\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx13x1jcl.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx13x1jcl.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local s = 0\n    for i\
    \ in string.gmatch(n, \"%d\") do\n        if (i % 2 ~= 0) then\n            s\
    \ = s + i\n        end\n    end\n    return s\nend\ndigits(1234)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdg3pkgm.lua:25:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpbdg3pkgm.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local product = 1\n   \
    \ while n > 0 do\n        if n % 2 == 1 then\n            product = product *\
    \ (n % 10)\n        end\n        n = math.floor(n / 10)\n    end\n    return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk4grnhta.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk4grnhta.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local result = 1\n    local\
    \ num = string.format(\"%d\", n)\n    for i = 1, #num do\n        local digit\
    \ = tonumber(string.sub(num, i, i))\n        if digit % 2 ~= 0 then\n        \
    \    result = result * digit\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2rptxue.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk2rptxue.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  return reduce(\n    function(x,\
    \ a) return x * a end,\n    function(a)    return a % 2 ~= 0 end,\n    n)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpogp2yeqh.lua:9:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmpogp2yeqh.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpogp2yeqh.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local s = tostring(n)\n\
    \    local p = 1\n    for i = 1, #s do\n        local d = s:sub(i, i)\n      \
    \  local v = tonumber(d)\n        if v % 2 == 1 then\n            p = p * v\n\
    \        end\n    end\n    return p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdta_24me.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdta_24me.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 0
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then\n      \
    \  return 0\n    else\n        local nums = {}\n        while n ~= 0 do\n    \
    \        local r = n % 10\n            if r % 2 == 1 then\n                table.insert(nums,\
    \ r)\n            end\n            n = math.floor(n / 10)\n        end\n     \
    \   if #nums == 0 then\n            return 0\n        else\n            local\
    \ prod = 1\n            for _,v in ipairs(nums) do\n                prod = prod\
    \ * v\n            end\n            return prod\n        end\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then\n      \
    \  return 0\n    else\n        local k = n % 10\n        return (k % 2 == 1) and\
    \ k or 0 + digits(math.floor(n / 10))\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1qxehy8.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpc1qxehy8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal function iter(n, acc)\n\
    \t\tif n == 0 then\n\t\t\treturn acc\n\t\telse\n\t\t\tlocal d = n % 10\n\t\t\t\
    if d % 2 == 1 then\n\t\t\t\treturn iter(math.floor(n / 10), acc * d)\n\t\t\telse\n\
    \t\t\t\treturn iter(math.floor(n / 10), acc)\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ iter(n, 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3wr0_oku.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3wr0_oku.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then\n      \
    \  return 0\n    else\n        if (n % 2) ~= 0 then\n            return ((n %\
    \ 10) * digits(math.floor(n / 10)))\n        else\n            return digits(math.floor(n\
    \ / 10))\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71wvgw05.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp71wvgw05.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n < 10 then\n      \
    \  return n % 2 == 1 and n or 0\n    else\n        return (n % 10 % 2 == 1 and\
    \ n % 10 or 0) * digits(math.floor(n / 10))\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwl5ogbwd.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpwl5ogbwd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      product\
    \ = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tubu9aa.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6tubu9aa.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local t = {}\n  for i in\
    \ tostring(n):gmatch('%d') do\n    t[#t+1] = tonumber(i)\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyo5_v59.lua:19:\
    \ expected: 5, actual: {5}\nstack traceback:\n\t/tmp/tmpgyo5_v59.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local result = 1\n    while\
    \ n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n   \
    \         result = result * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbyl68df.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprbyl68df.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal r = 1\n\twhile n >\
    \ 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tr = r * d\n\t\tend\n\
    \t\tn = math.floor(n / 10)\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafk7hoi8.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpafk7hoi8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  -- TODO\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmz_hesgm.lua:15:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpmz_hesgm.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local d = 1\n    while\
    \ n > 0 do\n        if math.fmod(n, 2) == 1 then\n            d = d * (n % 10)\n\
    \        end\n        n = math.floor(n / 10)\n    end\n    return d\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74emxxuf.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp74emxxuf.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\t-- TODO: return the digits\
    \ of a number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeywsmcjw.lua:15:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpeywsmcjw.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local total = 1\n  while\
    \ n > 0 do\n    local last = n % 10\n    if last % 2 == 1 then\n      total =\
    \ total * last\n    end\n    n = (n - last) / 10\n  end\n  return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfbb9rpc.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpnfbb9rpc.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then\n      \
    \  return 0\n    else\n        local x = n % 10\n        if x % 2 == 0 then\n\
    \            return digits(n // 10)\n        else\n            return x * digits(n\
    \ // 10)\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa16zyr2l.lua:24:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpa16zyr2l.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n < 10 then\n    return\
    \ n % 2 == 1 and n or 0\n  else\n    local r = n % 10\n    return (r % 2 == 1\
    \ and r or 0) * digits(math.floor(n / 10))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwd08es9s.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpwd08es9s.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local total = 1\n    local\
    \ multiplier = 1\n    while n > 0 do\n        multiplier = n % 10\n        if\
    \ multiplier % 2 == 1 then\n            total = total * multiplier\n        end\n\
    \        n = math.floor(n / 10)\n    end\n    return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqo7rtth0.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqo7rtth0.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local k = 0\n  while n >\
    \ 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n      k = k + r\n    end\n\
    \    n = math.floor(n / 10)\n  end\n  return k\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqi3dh8qp.lua:26:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpqi3dh8qp.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local result = 1\n  while\
    \ n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then result = result * d end\n\
    \    n = math.floor(n / 10)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnt4uccq.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcnt4uccq.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local res = 1\n    while\
    \ n ~= 0 do\n        local digit = n % 10\n        if digit % 2 ~= 0 then\n  \
    \          res = res * digit\n        end\n        n = math.floor(n / 10)\n  \
    \  end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzisjjx6h.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzisjjx6h.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local mult = 1\n    while\
    \ n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n   \
    \         mult = mult * digit\n        end\n        n = (n - digit) / 10\n   \
    \ end\n    return mult\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6w1y2s22.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6w1y2s22.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local prod = 1\n    for\
    \ i = 1, #tostring(n) do\n        prod = prod * tonumber(tostring(n):sub(i, i))\n\
    \    end\n    return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxehmditi.lua:20:\
    \ expected: 5, actual: 20\nstack traceback:\n\t/tmp/tmpxehmditi.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n<10 then\n        return\
    \ n%2==1 and n or 0\n    else\n        return (n%10%2==1 and n%10 or 0)*digits(n//10)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86050llr.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp86050llr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local val = 1\n  while n\
    \ > 0 do\n    local digit = n % 10\n    if digit % 2 ~= 0 then\n      val = val\
    \ * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return val\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwk08u_bc.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwk08u_bc.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\treturn 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4l4spsjf.lua:15:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp4l4spsjf.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local n1, n2 = n, 0\n  while\
    \ n1 > 0 do\n    local r = n1 % 10\n    if r % 2 == 1 then\n      n2 = n2 * r\n\
    \    end\n    n1 = n1 // 10\n  end\n  return n2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgm8soi4.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpzgm8soi4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 0
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local prod = 1\n    local\
    \ even = 0\n    for d in tostring(n):gmatch(\"%d\") do\n        d = tonumber(d)\n\
    \        if d % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       prod = prod * d\n        end\n    end\n    if even == string.len(tostring(n))\
    \ then\n        return 0\n    else\n        return prod\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug9gtgn3.lua:15:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpug9gtgn3.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local t = {}\n    for i\
    \ = 0, #t do\n        if n % 2 == 1 then\n            return i\n        end\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9lj2s30.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpf9lj2s30.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n < 10 then return n%2\
    \ == 1 and n or 0 end\n    return digits(n // 10) + digits(n % 10) * (10 ^ (math.floor(math.log10(n))\
    \ // 2))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcy4he63p.lua:19:\
    \ expected: 5, actual: 15.0\nstack traceback:\n\t/tmp/tmpcy4he63p.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local prod = 1\n    while\
    \ n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n   \
    \         prod = prod * digit\n        end\n        n = math.floor(n / 10)\n \
    \   end\n    return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp90cq5i60.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp90cq5i60.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal product = 1\n\twhile\
    \ n > 0 do\n\t\tlocal last_digit = n % 10\n\t\tif last_digit % 2 == 1 then\n\t\
    \t\tproduct = product * last_digit\n\t\tend\n\t\tn = (n - last_digit) / 10\n\t\
    end\n\treturn product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpep27db8m.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpep27db8m.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    n = n < 0 and n * -1 or\
    \ n\n    local pr = 1\n    while n > 0 do\n        local d = n % 10\n        if\
    \ d % 2 ~= 0 then\n            pr = pr * d\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return pr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgh24p6su.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgh24p6su.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal cnt = 1\n\tlocal prod\
    \ = 1\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\t\
    prod = prod * d\n\t\telse\n\t\t\tcnt = cnt + 1\n\t\tend\n\t\tn = (n - d) / 10\n\
    \tend\n\tif cnt == 1 then\n\t\treturn prod\n\telse\n\t\treturn 0\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcyh_4lm.lua:31:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmppcyh_4lm.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local d = 1\n    while\
    \ n > 0 do\n        local r = n % 10\n        if r % 2 ~= 0 then\n           \
    \ d = d * r\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp102a5lnk.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp102a5lnk.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tif n < 10 then\n\t\treturn\
    \ n\n\tend\n\tlocal d, p = 0, 1\n\twhile n > 0 do\n\t\tlocal r = n % 10\n\t\t\
    if r % 2 == 1 then\n\t\t\td = d + p * r\n\t\t\tp = p * 10\n\t\tend\n\t\tn = (n\
    \ - r) / 10\n\tend\n\treturn d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4b8d2o7m.lua:30:\
    \ expected: 5, actual: 51.0\nstack traceback:\n\t/tmp/tmp4b8d2o7m.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local sum = 1\n  while n\
    \ > 0 do\n    d = n % 10\n    if d % 2 ~= 0 then\n      sum = sum * d\n    end\n\
    \    n = math.floor(n / 10)\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfhfb8op.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqfhfb8op.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local s = 0\n    while\
    \ n > 0 do\n        local d = n % 10\n        if is_odd(d) then\n            s\
    \ = s + d\n        end\n        n = math.floor(n / 10)\n    end\n    return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv0jvljfk.lua:12:\
    \ attempt to call a nil value (global 'is_odd')\nstack traceback:\n\t/tmp/tmpv0jvljfk.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpv0jvljfk.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal p = 1\n\twhile n >\
    \ 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tp = p * d\n\t\tend\n\
    \t\tn = (n - d) / 10\n\tend\n\treturn p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedrihdv6.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpedrihdv6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal p = 1\n\twhile n >\
    \ 0 do\n\t\tr = n % 10\n\t\tif r%2 == 1 then\n\t\t\tp = p * r\n\t\tend\n\t\tn\
    \ = math.floor(n/10)\n\tend\n\treturn p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpec97oew6.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpec97oew6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local product = 1\n   \
    \ if n < 0 then n = -n end\n    while n > 0 do\n        local last_digit = n %\
    \ 10\n        if last_digit % 2 == 1 then\n            product = product * last_digit\n\
    \        end\n        n = (n - last_digit) / 10\n    end\n    return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5iz7k7f.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpl5iz7k7f.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal product = 1\n\twhile\
    \ n > 0 do\n\t\tlocal last = n % 10\n\t\tif last % 2 ~= 0 then\n\t\t\tproduct\
    \ = product * last\n\t\tend\n\t\tn = (n - last) / 10\n\tend\n\treturn product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmxcz9x52.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmxcz9x52.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    --write your solution here\n\
    \    if n == 0 then\n        return 0\n    end\n    digit = n % 10\n    if digit\
    \ % 2 == 0 then\n        return digits(n // 10)\n    else\n        return digit\
    \ * digits(n // 10)\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp223thmk2.lua:24:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp223thmk2.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local product = 1\n   \
    \ while n > 0 do\n        local last_digit = n % 10\n        if last_digit % 2\
    \ == 1 then product = product * last_digit end\n        n = math.floor(n / 10)\n\
    \    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5f8p04f.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpa5f8p04f.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local res = 1\n  local c\
    \ = n\n  local d\n  while c > 0 do\n    d = c % 10\n    if d % 2 ~= 0 then\n \
    \     res = res * d\n    end\n    c = c / 10\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfndbxty.lua:25:\
    \ expected: 5, actual: 0.0\nstack traceback:\n\t/tmp/tmpkfndbxty.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local n = n\n    local\
    \ prod = 1\n    while n > 0 do\n        local digit = n % 10\n        if digit\
    \ % 2 == 1 then\n            prod = prod * digit\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeepw9a9.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpgeepw9a9.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    n = n < 0 and -n or n\n\
    \    local d, r = 1, 0\n    while n > 0 do\n        local k = n % 10\n       \
    \ if k % 2 ~= 0 then\n            r = r + k\n        end\n        n = (n - k)\
    \ / 10\n    end\n    return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cwor1pv.lua:27:\
    \ expected: 5, actual: 6.0\nstack traceback:\n\t/tmp/tmp5cwor1pv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal s = tostring(n)\n\t\
    local r = 1\n\tfor i = 1, #s do\n\t\tlocal digit = tonumber(s:sub(i, i))\n\t\t\
    if (digit % 2) == 1 then\n\t\t\tr = r * digit\n\t\tend\n\tend\n\treturn r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo3vjvky8.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpo3vjvky8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 0
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n < 10 then\n    return\
    \ n % 2 == 1 and n or 0\n  else\n    return digits(n // 10) * (n % 10 % 2 == 1\
    \ and n % 10 or 1)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  -- current product of odd\
    \ digits\n  local product = 1\n  while n > 0 do\n    -- extract the last digit\n\
    \    local digit = n % 10\n    if digit % 2 == 1 then\n      -- multiply by the\
    \ odd digit\n      product = product * digit\n    end\n    -- move on to the next\
    \ digit\n    n = math.floor(n / 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk40t0o42.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk40t0o42.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal sum = 1\n\twhile n\
    \ > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tsum = sum * d\n\t\
    \tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3yxdtbl.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_3yxdtbl.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local result = 1\n    while\
    \ n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n   \
    \         result = result * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprbyl68df.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprbyl68df.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local res = 1\n  while n\
    \ > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      res = res * d\n\
    \    end\n    n = (n - d) / 10\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2e9liwo7.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2e9liwo7.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local sum = 1\n    while\
    \ n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n   \
    \         sum = sum * digit\n        end\n        n = math.floor(n / 10)\n   \
    \ end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ynvlzs6.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7ynvlzs6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n == 0 then\n    return\
    \ 0\n  elseif n % 2 == 1 then\n    return n % 10 * digits(math.floor(n / 10))\n\
    \  else\n    return digits(math.floor(n / 10))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uka2byq.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp_uka2byq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local r = 1\n    while\
    \ n ~= 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n          \
    \  r = r * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprsss38wx.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprsss38wx.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local n = n / 10 \n   \
    \ local prod = 1\n    while n > 0 do\n        prod = prod * (n % 10)\n       \
    \ n = n / 10\n    end\n    return prod\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gjoxlb1.lua:21:\
    \ expected: 5, actual: 0.0\nstack traceback:\n\t/tmp/tmp4gjoxlb1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local prod = 1\n  while n\
    \ > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      prod = prod * d\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2llguw0c.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2llguw0c.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local t = {}\n    for a\
    \ in tostring(n):gmatch(\"%d\") do\n        table.insert(t, tonumber(a))\n   \
    \ end\n    local odd = 0\n    for _, a in ipairs(t) do\n        if a % 2 == 1\
    \ then\n            odd = odd + a\n        end\n    end\n    return odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpny232dqp.lua:28:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpny232dqp.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local prod = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n           \
    \ prod = prod * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc26589dl.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpc26589dl.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local product = 1\n   \
    \ while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n     \
    \       product = product * d\n        end\n        n = math.floor(n / 10)\n \
    \   end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkw39s3qh.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkw39s3qh.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local sum = 1\n    for\
    \ d in string.gmatch(n,\"%d\") do\n        local num = tonumber(d)\n        if\
    \ num % 2 == 1 then\n            sum = sum * num\n        end\n    end\n    return\
    \ sum\nend\nassert(digits(1) == 1)\nassert(digits(4) == 0)\nassert(digits(123456789)\
    \ == 945)\nassert(digits(332424) == 4)\nassert(digits(2) == 0)\nassert(digits(333333333333333)\
    \ == 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp7vnkxg5x.lua:19: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp7vnkxg5x.lua:19: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n == 0 then\n    return\
    \ 0\n  elseif n % 2 == 1 then\n    return n % 10 * digits(math.floor(n / 10))\n\
    \  else\n    return digits(math.floor(n / 10))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_uka2byq.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp_uka2byq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    n = n or 0\n    local ret\
    \ = 1\n    while n > 0 do\n        local d = n % 10\n        if d % 2 ~= 0 then\n\
    \            ret = ret * d\n        end\n        n = math.floor(n / 10)\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5k5727l.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk5k5727l.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local result = 1\n  for char\
    \ in n:gmatch(\"%d\") do\n    local x = tonumber(char)\n    if x%2 ~= 0 then\n\
    \      result = result * x\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjs4wihay.lua:10:\
    \ attempt to index a number value (local 'n')\nstack traceback:\n\t/tmp/tmpjs4wihay.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjs4wihay.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local function product(x,\
    \ y)\n        return x * y\n    end\n    local function compose(f, g)\n      \
    \  return function(x)\n            return f(g(x))\n        end\n    end\n    local\
    \ function is_odd(x)\n        return x % 2 == 1\n    end\n    local function is_even(x)\n\
    \        return x % 2 == 0\n    end\n    local function filter(f, xs)\n      \
    \  local result = {}\n        for _, x in ipairs(xs) do\n            if f(x) then\n\
    \                table.insert(result, x)\n            end\n        end\n     \
    \   return result\n    end\n    local function to_digits(n)\n        local result\
    \ = {}\n        while n > 0 do\n            table.insert(result, 1, n % 10)\n\
    \            n = (n - n % 10) / 10\n        end\n        return result\n    end\n\
    \    local function fold(f, xs, init)\n        local result = init\n        for\
    \ _, x in ipairs(xs) do\n            result = f(result, x)\n        end\n    \
    \    return result\n    end\n    local function is_empty(xs)\n        return next(xs)\
    \ == nil\n    end\n    local product_of_odd_digits = compose(fold(product, init=1),\
    \ filter(is_odd))\n    local digits = to_digits(n)\n    local product = product_of_odd_digits(digits)\n\
    \    return is_empty(digits) and 0 or product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwnbydrhf.lua:50: '')'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local res = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if (d % 2 == 1) then\n         \
    \   res = res * d\n        end\n        n = (n - d) / 10\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacy2ilb5.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpacy2ilb5.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    -- Given a positive integer\
    \ n, \n    -- return the product of the odd digits.\n    local result = 1\n  \
    \  while n > 0 do\n        local digit = n % 10\n        n = math.floor(n / 10)\n\
    \        if digit % 2 == 1 then\n            result = result * digit\n       \
    \ end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv1kvbo41.lua:31:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpv1kvbo41.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n < 10 then\n      \
    \  return n\n    elseif n % 2 == 0 then\n        return digits(n // 10)\n    else\n\
    \        return n % 10 * digits(n // 10)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhvf5bk6.lua:27:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpyhvf5bk6.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local d = 0\n  while n >\
    \ 0 do\n    local m = n % 10\n    if m % 2 == 1 then\n      d = d + m\n    end\n\
    \    n = math.floor(n / 10)\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzmntqhqx.lua:26:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpzmntqhqx.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local ret = 1\n    for\
    \ i = 1, #tostring(n) do\n        local digit = tonumber(string.sub(tostring(n),\
    \ i, i))\n        if digit % 2 ~= 0 then\n            ret = ret * digit\n    \
    \    end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm849se9p.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpm849se9p.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local accum = 1\n  for i\
    \ = 1, string.len(n) do\n    local digit = tonumber(string.sub(n, i, i))\n   \
    \ if digit % 2 == 1 then\n      accum = accum * digit\n    end\n  end\n  return\
    \ accum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7qnj9nsb.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7qnj9nsb.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local r = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n           \
    \ r = r * d\n        end\n        n = (n - d) / 10\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9ig81ts.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq9ig81ts.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local res = 1\n    while\
    \ n > 0 do\n        d = n % 10\n        if d % 2 == 1 then\n            res =\
    \ res * d\n        end\n        n = math.floor(n / 10)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpksmc811b.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpksmc811b.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local function odd(a)\n\
    \        if a % 2 == 0 then\n            return 0\n        else\n            return\
    \ a\n        end\n    end\n    local function digit(a)\n        if n == 0 then\n\
    \            return 1\n        else\n            return odd(a % 10) * digit(math.floor(a\
    \ / 10))\n        end\n    end\n    return digit(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzx_abvcu.lua:20:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpzx_abvcu.lua:20: in upvalue 'digit'\n\
    \t/tmp/tmpzx_abvcu.lua:20: in upvalue 'digit'\n\t/tmp/tmpzx_abvcu.lua:20: in upvalue\
    \ 'digit'\n\t/tmp/tmpzx_abvcu.lua:20: in upvalue 'digit'\n\t/tmp/tmpzx_abvcu.lua:20:\
    \ in upvalue 'digit'\n\t/tmp/tmpzx_abvcu.lua:20: in upvalue 'digit'\n\t/tmp/tmpzx_abvcu.lua:20:\
    \ in upvalue 'digit'\n\t/tmp/tmpzx_abvcu.lua:20: in upvalue 'digit'\n\t/tmp/tmpzx_abvcu.lua:20:\
    \ in upvalue 'digit'\n\t...\t(skipping 333294 levels)\n\t/tmp/tmpzx_abvcu.lua:20:\
    \ in function </tmp/tmpzx_abvcu.lua:16>\n\t(...tail calls...)\n\t/tmp/tmpzx_abvcu.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.250 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local total = 1\n    while\
    \ n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n   \
    \         total = total * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptxva1y9u.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmptxva1y9u.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal function aux(m,c)\n\
    \t\tif m==0 then return c\n\t\telse \n\t\t\tif (m%10)%2==1 then\n\t\t\t\tc = c*(m%10)\n\
    \t\t\tend\n\t\t\treturn aux(math.floor(m/10),c)\n\t\tend\n\tend\n\treturn aux(n,1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsrbk0xi.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpvsrbk0xi.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local prod = 1\n    while\
    \ n > 0 do\n        local m = n % 10\n        if m % 2 == 1 then\n           \
    \ prod = prod * m\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1_zpmr0.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpe1_zpmr0.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then\n      \
    \  return 0\n    else\n        local m = n % 10\n        if m % 2 == 0 then\n\
    \            return digits(math.floor(n / 10))\n        else\n            return\
    \ m * digits(math.floor(n / 10))\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqjsnjt8.lua:24:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpaqjsnjt8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal p = 1\n\tfor i in tostring(n):gmatch('.')\
    \ do\n\t\tlocal n = tonumber(i)\n\t\tif n % 2 ~= 0 then\n\t\t\tp = p * n\n\t\t\
    end\n\tend\n\treturn p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjl7pmc5l.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpjl7pmc5l.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then return 0\
    \ end\n    return not isEven(n%10) and (n%10 * digits(math.floor(n/10))) or digits(math.floor(n/10))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq0i69mv3.lua:10:\
    \ attempt to call a nil value (global 'isEven')\nstack traceback:\n\t/tmp/tmpq0i69mv3.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpq0i69mv3.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      product\
    \ = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tubu9aa.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6tubu9aa.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then return 0\
    \ end\n    local s = n % 10\n    local r = math.floor(n / 10)\n    if s % 2 ==\
    \ 0 then\n        return digits(r)\n    else\n        return s * digits(r)\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkr0wcxn.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmphkr0wcxn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local s = 0\n    while\
    \ n > 0 do\n        local m = n % 10\n        if m % 2 == 1 then s = s + m end\n\
    \        n = math.floor(n / 10)\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8oy8x2k.lua:24:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpp8oy8x2k.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local prod = 1\n  while n\
    \ > 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n      prod = prod * r\n\
    \    end\n    n = math.floor(n / 10)\n  end\n  return prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwxb_6tn.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcwxb_6tn.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal result = 1\n\twhile\
    \ n > 0 do\n\t\tlocal digit = n % 10\n\t\tif digit % 2 == 1 then\n\t\t\tresult\
    \ = result * digit\n\t\tend\n\t\tn = (n - digit) / 10\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_zqmx9nd.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_zqmx9nd.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local res = 1\n    local\
    \ tmp = math.abs(n)\n    while(tmp ~= 0) do\n        if(tmp % 2 == 1) then\n \
    \           res = res * (tmp % 10)\n        end\n        tmp = math.floor(tmp\
    \ / 10)\n    end\n    return res\nend\nassert(digits(1) == 1)\nassert(digits(4)\
    \ == 0)\nassert(digits(221) == 2)\nassert(digits(22222) == 0)\nassert(digits(13579)\
    \ == 3 * 5 * 7 * 9)\nassert(digits(0) == 0)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpsqrjz9w3.lua:20: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpsqrjz9w3.lua:20: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823697
- exit_code: 0
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n < 10 then\n      \
    \  return n % 2 == 1 and n or 0\n    else\n        return digits(n // 10) * (n\
    \ % 10 % 2 == 1 and n % 10 or 1)\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal result = 1\n\twhile\
    \ n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\t\t\tresult = result\
    \ * d\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxn31d1zz.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxn31d1zz.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local total = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if (digit % 2) == 1 then\n      total\
    \ = total * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk36jz1j8.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk36jz1j8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local s = tostring(n)\n\
    \    local p = 1\n    for i = 1, #s do\n        local d = s:sub(i, i)\n      \
    \  local f = tonumber(d)\n        if f % 2 == 1 then\n            p = p * f\n\
    \        end\n    end\n    return p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpucb8qoiq.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpucb8qoiq.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then product = product\
    \ * digit end\n    n = math.floor(n / 10)\n  end\n  return product\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzbha626.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxzbha626.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local val = 1\n  while n\
    \ > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      val = val * d\n\
    \    end\n    n = (n - d) / 10\n  end\n  return val\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkcesboj3.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpkcesboj3.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n <= 0 then\n    return\
    \ 0\n  elseif is_odd(n % 10) then\n    return (n % 10) * digits(math.floor(n /\
    \ 10))\n  else\n    return digits(math.floor(n / 10))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_ahb6p46.lua:11:\
    \ attempt to call a nil value (global 'is_odd')\nstack traceback:\n\t/tmp/tmp_ahb6p46.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp_ahb6p46.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tif n < 1 then\n\t\treturn\
    \ 0\n\tend\n\t\n\tlocal product = 1\n\twhile n > 0 do\n\t\tlocal digit = n % 10\n\
    \t\tif digit % 2 == 1 then\n\t\t\tproduct = product * digit\n\t\tend\n\t\tn =\
    \ (n - digit) / 10\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpht354qqe.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpht354qqe.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then return 0\
    \ end\n    local x = n % 10\n    if x % 2 == 0 then\n        return digits(math.floor(n\
    \ / 10))\n    else\n        return x * digits(math.floor(n / 10))\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29lkyjmr.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp29lkyjmr.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local res = 1\n    local\
    \ str = tostring(n)\n    for i = 1, #str do\n        local digit = tonumber(str:sub(i,\
    \ i))\n        if math.fmod(digit, 2) ~= 0 then\n            res = res * digit\n\
    \        end\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsffbxrcl.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsffbxrcl.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local ret = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n           \
    \ ret = ret * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq57lswa6.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpq57lswa6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  -- TODO: Implement this function\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrrfrix0.lua:15:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmphrrfrix0.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 0
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local str = tostring(n)\n\
    \    local t = {}\n    for i = 1, #str do\n        local c = str:sub(i, i)\n \
    \       if c == '1' or c == '3' or c == '5' or c == '7' or c == '9' then\n   \
    \         t[#t + 1] = tonumber(c)\n        end\n    end\n    if #t == 0 then\n\
    \        return 0\n    end\n    local result = 1\n    for i = 1, #t do\n     \
    \   result = result * t[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tif (n == 0) then return 0\
    \ end\n\tif (n % 2 == 1) then return n * digits(math.floor(n / 10)) end\n\treturn\
    \ digits(math.floor(n / 10))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps5sufykc.lua:17:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmps5sufykc.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    -- If n is 0, return 0\n\
    \    if n == 0 then\n        return 0\n    end\n    -- Check for odd digits and\
    \ add to the product\n    local product = 1\n    local digit\n    while n > 0\
    \ do\n        digit = n % 10\n        if digit % 2 == 1 then\n            product\
    \ = product * digit\n        end\n        n = math.floor(n / 10)\n    end\n  \
    \  return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfevpfrh.lua:35:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpnfevpfrh.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal n, pro = n, 1\n\twhile\
    \ n > 0 do\n\t\tlocal digit = n % 10\n\t\tif digit % 2 ~= 0 then\n\t\t\tpro =\
    \ pro * digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn pro\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpci0miir9.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpci0miir9.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  -- your code here\n  return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppslv40vx.lua:16:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmppslv40vx.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local accum = 1\n  for d\
    \ in tostring(n):gmatch('%d') do\n    local d = tonumber(d)\n    if d % 2 == 1\
    \ then\n      accum = accum * d\n    end\n  end\n  return accum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3hk5rh_l.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3hk5rh_l.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      product\
    \ = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tubu9aa.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6tubu9aa.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local sum = 1\n  while n\
    \ ~= 0 do\n    local last = n % 10\n    if last % 2 ~= 0 then\n      sum = sum\
    \ * last\n    end\n    n = (n - last) / 10\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8fvzdu8.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpw8fvzdu8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local sum = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n           \
    \ sum = sum * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmrh2rjb.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpbmrh2rjb.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local p = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n           \
    \ p = p * d\n        end\n        n = (n - d) / 10\n    end\n    return p\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98q4ep7b.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp98q4ep7b.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      product\
    \ = product * digit\n    end\n    n = (n - digit) / 10\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5hebkekc.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp5hebkekc.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  n = n % 10\n  if n == 0 then\n\
    \    return 0\n  elseif n % 2 == 0 then\n    return 0 + digits(math.floor(n /\
    \ 10))\n  else\n    return n + digits(math.floor(n / 10))\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv70r4or2.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpv70r4or2.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n == 0 then return 0 end\n\
    \  local a = math.abs(n)\n  local sum = 1\n  while a > 0 do\n    local d = a %\
    \ 10\n    if d % 2 == 1 then\n      sum = sum * d\n    end\n    a = math.floor(a\
    \ / 10)\n  end\n  return sum\nend\nprint(digits(13579))\nprint(digits(2468))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "945\n1\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpi3ucrt.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprpi3ucrt.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    n = tonumber(n)\n    if\
    \ n < 0 then n = -n end\n    if n == 0 then return 0 end\n    local ret = 1\n\
    \    while n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then ret\
    \ = ret * d end\n        n = math.floor(n / 10)\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7122vdos.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7122vdos.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n < 1 then return 0\
    \ end\n    local prod = 1\n    while n > 0 do\n        local lsd = n % 10\n  \
    \      if lsd % 2 == 1 then prod = prod * lsd end\n        n = math.floor(n /\
    \ 10)\n    end\n    return prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7g2di3pa.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7g2di3pa.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal p = 1\n\twhile n >\
    \ 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 ~= 0 then\n\t\t\tp = p * d\n\t\tend\n\
    \t\tn = math.floor(n / 10)\n\tend\n\treturn p\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplz2wgszd.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmplz2wgszd.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal product = 1\n\twhile\
    \ n > 0 do\n\t\tlocal digit = n % 10\n\t\tif digit % 2 == 1 then\n\t\t\tproduct\
    \ = product * digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprxce17lo.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprxce17lo.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local result = 1\n    for\
    \ i = 1, #tostring(n) do\n        local digit = tonumber(tostring(n):sub(i, i))\n\
    \        if digit % 2 ~= 0 then\n            result = result * digit\n       \
    \ end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpml8flnh7.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpml8flnh7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\n  while\
    \ n > 0 do\n    if n % 2 == 1 then\n      product = product * (n % 10)\n    end\n\
    \    n = math.floor(n / 10)\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmetcad1h.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpmetcad1h.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal res = 1\n\twhile n\
    \ ~= 0 do\n\t\tlocal r = n % 10\n\t\tif r % 2 ~= 0 then\n\t\t\tres = res * r\n\
    \t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl46_lyuq.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpl46_lyuq.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local product = 1\n   \
    \ local ones, tens, hundreds, thousands, tens_thousands = 0, 0, 0, 0, 0\n    local\
    \ even = true\n    thousands = math.floor(n / 10000)\n    tens_thousands = math.floor(n\
    \ / 1000)\n    hundreds = math.floor(n / 100)\n    tens = math.floor(n / 10)\n\
    \    ones = n % 10\n    if n == 0 then\n        even = false\n    end\n    if\
    \ thousands ~= 0 then\n        if thousands % 2 ~= 0 then\n            product\
    \ = product * thousands\n            even = false\n        end\n    end\n    if\
    \ tens_thousands ~= 0 then\n        if tens_thousands % 2 ~= 0 then\n        \
    \    product = product * tens_thousands\n            even = false\n        end\n\
    \    end\n    if hundreds ~= 0 then\n        if hundreds % 2 ~= 0 then\n     \
    \       product = product * hundreds\n            even = false\n        end\n\
    \    end\n    if tens ~= 0 then\n        if tens % 2 ~= 0 then\n            product\
    \ = product * tens\n            even = false\n        end\n    end\n    if ones\
    \ ~= 0 then\n        if ones % 2 ~= 0 then\n            product = product * ones\n\
    \            even = false\n        end\n    end\n    if even then\n        product\
    \ = 0\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1q_8ejro.lua:62:\
    \ expected: 5, actual: 2505\nstack traceback:\n\t/tmp/tmp1q_8ejro.lua:62: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal num = 0\n\twhile n\
    \ ~= 0 do\n\t\tlocal digit = n % 10\n\t\tif digit % 2 ~= 0 then\n\t\t\tnum = num\
    \ * 10 + digit\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zp4u7px.lua:26:\
    \ expected: 5, actual: 15\nstack traceback:\n\t/tmp/tmp4zp4u7px.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\t-- Convert to string and\
    \ table\n\tlocal str = tostring(n)\n\tlocal tbl = {}\n\tfor i = 1, #str do\n\t\
    \ttbl[i] = str:sub(i, i)\n\tend\n\t-- Find product of odd digits\n\tlocal product\
    \ = 1\n\tfor i = 1, #tbl do\n\t\tif tonumber(tbl[i]) % 2 ~= 0 then\n\t\t\tproduct\
    \ = product * tonumber(tbl[i])\n\t\tend\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_lew4jg.lua:34:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpr_lew4jg.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n == 0 then\n    return\
    \ 0\n  else\n    local d = n % 10\n    if d % 2 == 0 then\n      return digits(n\
    \ // 10)\n    else\n      return d * digits(n // 10)\n    end\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4yf3pwy_.lua:24:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp4yf3pwy_.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk1zc0aid.lua:23: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then return 0\
    \ end\n    local r = n % 10\n    if r % 2 == 0 then return digits(n // 10) end\n\
    \    return r * digits(n // 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvudid_2.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpmvudid_2.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local r = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if d % 2 ~= 0 then\n           \
    \ r = r * d\n        end\n        n = math.floor(n / 10)\n    end\n    return\
    \ r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprya8pe0w.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmprya8pe0w.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local function helper(n,\
    \ ans)\n        if n == 0 then\n            return ans\n        else\n       \
    \     local digit = n % 10\n            if digit % 2 == 1 then\n             \
    \   return helper(n // 10, ans * digit)\n            else\n                return\
    \ helper(n // 10, ans)\n            end\n        end\n    end\n    return helper(n,\
    \ 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3awqdanq.lua:33:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp3awqdanq.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    n = string.format(\"%i\"\
    , n)\n    if n == \"\" then\n        return 0\n    else\n        local x = tonumber(n:sub(1,1))\n\
    \        if x % 2 == 0 then\n            return digits(n:sub(2))\n        else\n\
    \            return x * digits(n:sub(2))\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptra3nac2.lua:9:\
    \ bad argument #2 to 'format' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmptra3nac2.lua:9: in upvalue 'digits'\n\t/tmp/tmptra3nac2.lua:17: in local\
    \ 'candidate'\n\t/tmp/tmptra3nac2.lua:25: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal prod = 1\n\tlocal q\
    \ = n\n\twhile q > 0 do\n\t\tlocal d = q % 10\n\t\tif d % 2 == 1 then\n\t\t\t\
    prod = prod * d\n\t\tend\n\t\tq = math.floor(q / 10)\n\tend\n\treturn prod\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2onkzugj.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2onkzugj.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local total = 1\n  for i\
    \ in tostring(n):gmatch(\".\") do\n    local d = tonumber(i)\n    if d%2 == 1\
    \ then\n      total = total * d\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdixyhlvb.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdixyhlvb.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local d = 0\n  for i in tostring(n):gmatch(\"\
    %d\") do\n    i = tonumber(i)\n    if i % 2 == 1 then\n      d = d + i\n    end\n\
    \  end\n  return d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnc7jmz6.lua:25:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmphnc7jmz6.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n < 10 then return n end\n\
    \  local p = 1\n  local q = 1\n  while n > 10 do\n    p = n % 10\n    if p % 2\
    \ == 1 then q = q * p end\n    n = n / 10\n  end\n  return q * n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19q1ga3p.lua:24:\
    \ expected: 5, actual: 5.4\nstack traceback:\n\t/tmp/tmp19q1ga3p.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    -- For example:\n    --\
    \ >>> log(10)\n    -- 3.32192809488736\n    -- >>> log(10, 10)\n    -- 1\n   \
    \ local l = math.log(n, 10) + 1\n    local k = 0\n    for i = 1, l do\n      \
    \  -- For example:\n        -- >>> floor(83 / 10)\n        -- 8\n        -- >>>\
    \ floor(83 / 10) * 10\n        -- 80\n        -- >>> floor(83 / 10) * 10 == 83\n\
    \        -- false\n        -- >>> 83 - 80\n        -- 3\n        local digit =\
    \ (n - n % 10) / 10\n        n = n - digit\n        -- n = n - (n - n % 10) /\
    \ 10\n        if n % 2 ~= 0 then\n            k = k + 1\n        end\n    end\n\
    \    return k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3siwuwd_.lua:39:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp3siwuwd_.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local product = 1\n   \
    \ for i in string.gmatch(tostring(n), \"%d\") do\n        local num = tonumber(i)\n\
    \        if num % 2 ~= 0 then\n            product = product * num\n        end\n\
    \    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_wpmq1tl.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp_wpmq1tl.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal m = 1\n\twhile n >\
    \ 0 do\n\t\tlocal digit = n % 10\n\t\tif digit % 2 == 1 then\n\t\t\tm = m * digit\n\
    \t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnl0el90n.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpnl0el90n.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local result = 1\n  while\
    \ n > 0 do\n    local remainder = n % 10\n    if remainder % 2 == 1 then\n   \
    \   result = result * remainder\n    end\n    n = (n - remainder) / 10\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylk0irc3.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpylk0irc3.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tif n < 10 then return n end\n\
    \tlocal m = digits(math.floor(n / 10))\n\tlocal d = n % 10\n\tif d % 2 == 0 then\
    \ return m else return m * d end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9cyd1w5x.lua:24:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmp9cyd1w5x.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: -1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal i, d, p = 0, n, 1\n\
    \twhile i ~= -1 do\n\t\ti, d = math.modf(d)\n\t\tif i % 2 ~= 0 then\n\t\t\tp =\
    \ p * d\n\t\tend\n\tend\n\treturn p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659823702
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n <= 0 then\n      \
    \  return 0\n    end\n    local res = 1\n    while n > 0 do\n        local digit\
    \ = n % 10\n        if digit % 2 == 1 then\n            res = res * digit\n  \
    \      end\n        n = (n - digit) / 10\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx4cuoghy.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpx4cuoghy.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local r = 1\n    if n ==\
    \ 0 then\n        return 0\n    end\n    while n > 0 do\n        local d = n %\
    \ 10\n        if d % 2 == 1 then\n            r = r * d\n        end\n       \
    \ n = math.floor(n / 10)\n    end\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7r8c6ufs.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7r8c6ufs.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug9gtgn3.lua:15:\
    \ expected: 5, actual: nil\nstack traceback:\n\t/tmp/tmpug9gtgn3.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local oddDigits = 1\n  while\
    \ n > 0 do\n    -- Odd digit check and product formation\n    local digit = n\
    \ % 10\n    if digit % 2 == 1 then\n      oddDigits = oddDigits * digit\n    end\n\
    \    n = math.floor(n / 10)\n  end\n  return oddDigits\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzztk2d2e.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpzztk2d2e.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      product\
    \ = product * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tubu9aa.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp6tubu9aa.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local sum = 1\n  while n\
    \ > 0 do\n    local digit = n % 10\n    if (digit % 2 == 1) then\n      sum =\
    \ sum * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcpthjcr8.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpcpthjcr8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\n  for\
    \ digit in string.gmatch(tostring(n), '%d') do\n    if tonumber(digit) % 2 ~=\
    \ 0 then\n      product = product * tonumber(digit)\n    end\n  end\n  return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom18d90t.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpom18d90t.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    n = math.abs(n)\n    local\
    \ d = 1\n    while n > 0 do\n        if n % 2 == 1 then\n            d = d * (n\
    \ % 10)\n        end\n        n = math.floor(n / 10)\n    end\n    return d\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesd7sk60.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpesd7sk60.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local digit = 0\n  while\
    \ n > 0 do\n    digit = n % 10\n    if digit % 2 == 1 then\n      return digit\n\
    \    end\n    n = (n - digit) / 10\n  end\n  return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1jr_po8.lua:26:\
    \ expected: 5, actual: 1.0\nstack traceback:\n\t/tmp/tmpj1jr_po8.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n < 10 then\n    return\
    \ n\n  else\n    local last = n % 10\n    if last % 2 == 1 then\n      return\
    \ last * digits(math.floor(n / 10))\n    else\n      return digits(math.floor(n\
    \ / 10))\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpktel1ezb.lua:30:\
    \ expected: 0, actual: 2\nstack traceback:\n\t/tmp/tmpktel1ezb.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then return 0\
    \ end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg5d98mc5.lua:23: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local result = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkbt4xg1y.lua:23: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\n  for\
    \ i in tostring(n):gmatch(\"%d\") do\n    i = tonumber(i)\n    if i % 2 == 1 then\n\
    \      product = product * i\n    end\n  end\n  return product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5i1esas.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpv5i1esas.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local res = 1\n  while n\
    \ > 0 do\n    local mod = n % 10\n    if mod % 2 == 1 then\n      res = res *\
    \ mod\n    end\n    n = math.floor(n / 10)\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqtpvml35.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqtpvml35.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal prod = 1\n\twhile n\
    \ > 0 do\n\t\tlocal r = n % 10\n\t\tif r % 2 == 1 then\n\t\t\tprod = prod * r\n\
    \t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5e_k6fv.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpv5e_k6fv.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 0
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local r = 1\n    local\
    \ f = 0\n    while n > 0 do\n        if (n % 2) ~= 0 then\n            r = r *\
    \ (n % 10)\n            f = 1\n        end\n        n = math.floor(n / 10)\n \
    \   end\n    if f == 0 then\n        return 0\n    else\n        return r\n  \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local k = 0\n    while\
    \ n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n   \
    \         k = k + digit\n        end\n        n = (n - digit) / 10\n    end\n\
    \    return k\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx11hcb48.lua:26:\
    \ expected: 5, actual: 6.0\nstack traceback:\n\t/tmp/tmpx11hcb48.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n < 10 then return n end\n\
    \  local d = n % 10\n  return d * digits(floor(n / 10))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4r1gge_y.lua:11:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp4r1gge_y.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp4r1gge_y.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n < 10 then\n      \
    \  return n % 2 == 1 and n or 0\n    else\n        local odd_digit = digits(n\
    \ % 10)\n        local even_digits = digits(math.floor(n / 10))\n        return\
    \ odd_digit * even_digits\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_49ys3in.lua:22:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp_49ys3in.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local p = 1\n  for d in tostring(n):gmatch('%d')\
    \ do\n    local v = tonumber(d)\n    if v%2 == 1 then\n      p = p * v\n    end\n\
    \  end\n  return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp028kuq4w.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp028kuq4w.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n == 0 then\n    return\
    \ 0\n  else\n    local digit = n % 10\n    if digit % 2 == 0 then\n      return\
    \ digits(n/10)\n    else\n      return digit * digits(n/10)\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxu18ld_4.lua:24:\
    \ expected: 5, actual: 0.0\nstack traceback:\n\t/tmp/tmpxu18ld_4.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if (n % 2 == 0) then\n  \
    \  return 0\n  else\n    return n\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuf546ms.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpiuf546ms.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local t = {}\n  local j =\
    \ 1\n  while n > 0 do\n    local d = n % 10\n    if d % 2 == 1 then\n      t[j]\
    \ = d\n      j = j + 1\n    end\n    n = (n - d) / 10\n  end\n  return mult(t)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_zqz111.lua:19:\
    \ attempt to call a nil value (global 'mult')\nstack traceback:\n\t/tmp/tmpr_zqz111.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpr_zqz111.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tif n < 1 then return 0 end\n\
    \tlocal ret = 1\n\twhile n > 0 do\n\t\tlocal d = n % 10\n\t\tif d % 2 == 1 then\n\
    \t\t\tret = ret * d\n\t\tend\n\t\tn = math.floor(n / 10)\n\tend\n\treturn ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtjk479q.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxtjk479q.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local product = 1\n   \
    \ for i = 1, string.len(n) do\n        if tonumber(string.sub(n, i, i)) % 2 ~=\
    \ 0 then\n            product = product * tonumber(string.sub(n, i, i))\n    \
    \    end\n    end\n    return product\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9h7bgm9h.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9h7bgm9h.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local s = tostring(n)\n \
    \ local d = 1\n  for c in s:gmatch\".\" do\n    local i = tonumber(c)\n    if\
    \ i%2 == 1 then\n      d = d * i\n    end\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn2qp2z0l.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpn2qp2z0l.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal sum = 1\n\twhile n\
    \ > 0 do\n\t\tif n % 2 ~= 0 then\n\t\t\tsum = sum * (n % 10)\n\t\tend\n\t\tn =\
    \ n / 10\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmodegmwe.lua:22:\
    \ expected: 5, actual: 0.0\nstack traceback:\n\t/tmp/tmpmodegmwe.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    assert(type(n) == \"number\"\
    , \"Expected number at argument 1\")\n    local product = 1\n    repeat\n    \
    \    local d = n % 10\n        if d % 2 == 1 then\n            product = product\
    \ * d\n        end\n        n = math.floor(n / 10)\n    until n == 0\n    return\
    \ product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphy2erc4s.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmphy2erc4s.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n == 0 then return 0 end\n\
    \  local result = 1\n  if n % 2 == 1 then\n    result = n % 10\n  end\n  return\
    \ result * digits(math.floor(n / 10))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66354wc3.lua:20:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp66354wc3.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local p = 1\n  while n >\
    \ 0 do\n    local r = n % 10\n    if r % 2 == 1 then\n      p = p * r\n    end\n\
    \    n = (n - r) / 10\n  end\n  return p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwi0y2pu5.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpwi0y2pu5.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  n = n - n % 2\n  while n\
    \ > 1 do\n    n = n / 10\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe13xmfkm.lua:19:\
    \ expected: 5, actual: 0.4\nstack traceback:\n\t/tmp/tmpe13xmfkm.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local total = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n      total\
    \ = total * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return total\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeyrn12m8.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpeyrn12m8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local sum = 1\n    while\
    \ n > 0 do\n        local d = n % 10\n        if d % 2 == 1 then\n           \
    \ sum = sum * d\n        end\n        n = (n - d) / 10\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo17cxvph.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpo17cxvph.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  if n == 0 then\n    return\
    \ 0\n  else\n    local m = n % 10\n    if m % 2 == 0 then\n      return digits(n\
    \ / 10)\n    else\n      return digits(n / 10) * m\n    end\n  end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkv4wwjbh.lua:24:\
    \ expected: 5, actual: 0.0\nstack traceback:\n\t/tmp/tmpkv4wwjbh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local odd_digits = 1\n  while\
    \ n > 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then odd_digits =\
    \ odd_digits * digit end\n    n = math.floor(n / 10)\n  end\n  return odd_digits\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp87_my86i.lua:27:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp87_my86i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local t = {}\n    local\
    \ s = tostring(n)\n    for i = 1, #s do\n        local x = tonumber(s:sub(i, i))\n\
    \        if x % 2 == 1 then\n            table.insert(t, x)\n        end\n   \
    \ end\n    if #t == 0 then\n        return 0\n    else\n        return table.reduce(t,\
    \ \"*\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptvnyb587.lua:20:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmptvnyb587.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmptvnyb587.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local s = 0\n    if n ==\
    \ 0 then\n        return 0\n    else\n        while n ~= 0 do\n            local\
    \ d = n % 10\n            if d % 2 == 1 then\n                s = s + d\n    \
    \        end\n            n = math.floor(n / 10)\n        end\n        return\
    \ s\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpssb00hon.lua:30:\
    \ expected: 5, actual: 6\nstack traceback:\n\t/tmp/tmpssb00hon.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local result = 1\n    while\
    \ n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n   \
    \         result = result * digit\n        end\n        n = (n - digit) / 10\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxev_uho9.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpxev_uho9.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\n  for\
    \ digit in tostring(n):gmatch(\".\") do\n    digit = tonumber(digit)\n    if digit\
    \ % 2 == 1 then\n      product = product * digit\n    end\n  end\n  return product\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfw0k8hmt.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpfw0k8hmt.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n <= 0 then\n      \
    \  return 0\n    end\n    local result = 1\n    while n > 0 do\n        local\
    \ digit = n % 10\n        if digit % 2 == 1 then\n            result = result\
    \ * digit\n        end\n        n = (n - digit) / 10\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
    \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n\
    \    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagehn8vw.lua:32:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpagehn8vw.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal prod = 1\n\tfor i in\
    \ tostring(n):gmatch(\".\") do\n\t\ti = tonumber(i)\n\t\tif i % 2 == 1 then\n\t\
    \t\tprod = prod * i\n\t\tend\n\tend\n\treturn prod\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpudhxlf0d.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpudhxlf0d.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local prod = 1\n  local digit\
    \ = 0\n  while (n > 0) do\n    digit = n % 10\n    if (digit % 2 == 1) then\n\
    \      prod = prod * digit\n    end\n    n = math.floor(n / 10)\n  end\n  return\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1rd_pgnh.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp1rd_pgnh.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal product = 1\n\twhile\
    \ n > 0 do\n\t\tproduct = product * ((n % 10) % 2 == 1 and n % 10 or 1)\n\t\t\
    n = math.floor(n / 10)\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wrdi5be.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7wrdi5be.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    if n == 0 then return 0\
    \ end\n    local x = n % 10\n    if x % 2 == 0 then\n        return digits(n //\
    \ 10)\n    else\n        return x * digits(n // 10)\n    end\nend\ndigits(123)\n\
    digits(4)\ndigits(0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyceu8h1i.lua:24:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpyceu8h1i.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    product = 1\n    while\
    \ n > 0 do\n        local digit = n % 10\n        if digit % 2 == 1 then\n   \
    \         product = product * digit\n        end\n        n = math.floor(n / 10)\n\
    \    end\n    return product\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpurbzsptt.lua:29:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpurbzsptt.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  n = n * 1\n  local prod =\
    \ 1\n  while n ~= 0 do\n    local digit = n % 10\n    if digit % 2 == 1 then\n\
    \      prod = prod * digit\n    end\n    n = (n - digit) / 10\n  end\n  return\
    \ prod\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyop1j4ya.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpyop1j4ya.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    local p = 1\n    while\
    \ n > 0 do\n        if n % 2 ~= 0 then p = p * (n % 10) end\n        n = math.floor(n\
    \ / 10)\n    end\n    return p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = digits\n    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54),\
    \ 5)\n    lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014),\
    \ 5)\n    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
    \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjcof7asi.lua:26:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpjcof7asi.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  return n % 10 == 0 and 0\
    \ or n % 2 == 0 and digits(n / 10) or (n % 10) * digits(n / 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1xtjfda.lua:15:\
    \ expected: 5, actual: 0.0\nstack traceback:\n\t/tmp/tmpi1xtjfda.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal sum = 1;\n\tlocal check\
    \ = string.len(n);\n\tfor i = 1, check do\n\t\tlocal x = string.sub(n, i, i);\n\
    \t\tsum = sum * x;\n\tend\n\treturn sum;\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dh8ityd.lua:22:\
    \ expected: 5, actual: 20\nstack traceback:\n\t/tmp/tmp8dh8ityd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n  local product = 1\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk1zc0aid.lua:23: ''end'' expected (to close ''function'' at
    line 8) near <eof>

    '
  stdout: ''
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n\tlocal product = 1\n\twhile\
    \ n > 0 do\n\t\tif n % 2 == 1 then\n\t\t\tproduct = product * (n % 10)\n\t\tend\n\
    \t\tn = math.floor(n / 10)\n\tend\n\treturn product\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk03x2k3t.lua:28:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpk03x2k3t.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
- exit_code: 1
  program: "-- Given a positive integer n, return the product of the odd digits.\n\
    -- Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1) \n-- 1\n\
    -- >>> digits(4) \n-- 0\nlocal function digits(n)\n    n = n * 1 -- Forcibly convert\
    \ n to number\n    local prod = 1\n    while n > 0 do\n        local d = n % 10\n\
    \        if d % 2 == 1 then\n            prod = prod * d\n        end\n      \
    \  n = (n - d) / 10\n    end\n    return prod\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = digits\n    lu.assertEquals(candidate(5),\
    \ 5)\n    lu.assertEquals(candidate(54), 5)\n    lu.assertEquals(candidate(120),\
    \ 1)\n    lu.assertEquals(candidate(5014), 5)\n    lu.assertEquals(candidate(98765),\
    \ 315)\n    lu.assertEquals(candidate(5576543), 2625)\n    lu.assertEquals(candidate(2468),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qr0_rad.lua:30:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp2qr0_rad.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823697
