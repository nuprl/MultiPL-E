language: lua
name: HumanEval_80_is_happy
results:
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local i = 1\n    local c = 0\n    local n = #s\n    while i <= n do\n   \
    \     if i + 2 <= n and s[i] ~= s[i + 1] and s[i] ~= s[i + 2] and s[i + 1] ~=\
    \ s[i + 2] then\n            c = c + 1\n            i = i + 3\n        else\n\
    \            i = i + 1\n        end\n    end\n    return c > 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x6smtol.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3x6smtol.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return s:len() >= 3 and s:match('(.)%1%1') == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1dmye7kg.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1dmye7kg.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local i = 1\n  while i <= #s do\n    if #s - i < 2 then return true end\n \
    \   if s:sub(i, i + 2):byte(1) == s:sub(i, i + 2):byte(2) then return false end\n\
    \    if s:sub(i, i + 2):byte(1) == s:sub(i, i + 2):byte(3) then return false end\n\
    \    if s:sub(i, i + 2):byte(2) == s:sub(i, i + 2):byte(3) then return false end\n\
    \    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5efwp4r.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpl5efwp4r.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if s:len() < 3 then\n        return false\n    end\n    local c = s:sub(1,\
    \ 3)\n    return not c:find(c:sub(1, 1), 2)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjk80dpkb.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjk80dpkb.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return string.find(s, '^(%w%w%w)%1.*$') == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk46ajvgx.lua:12:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk46ajvgx.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- your code here\n  if s:len() < 3 then\n    return false\n  end\n  for i\
    \ = 1, s:len() - 2 do\n    if s:sub(i, i + 2):match('(.).%1.%1') then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqb4pp230.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqb4pp230.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if s == \"\" or string.len(s) < 3 then\n        return false\n    end\n \
    \   for i = 1, string.len(s) - 2 do\n        if string.sub(s, i, i) == string.sub(s,\
    \ i + 1, i + 1)\n            or string.sub(s, i, i) == string.sub(s, i + 2, i\
    \ + 2)\n            or string.sub(s, i + 1, i + 1) == string.sub(s, i + 2, i +\
    \ 2) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local len = #s\n    if len < 3 then\n        return false\n    end\n    local\
    \ char1 = s:sub(1,1)\n    local char2 = s:sub(2,2)\n    local char3 = s:sub(3,3)\n\
    \    for i = 4, len, 1 do\n        if char1 == char2 or char1 == char3 or char2\
    \ == char3 then\n            return false\n        end\n        char1 = char2\n\
    \        char2 = char3\n        char3 = s:sub(i,i)\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y1lt0_8.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2y1lt0_8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return s:match('^(?:(.)(.)(.)).*%1%2%3$') and true or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4r35z0ek.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4r35z0ek.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local n = string.len(s)\n  if n < 3 then return false end\n  for i = 1, n -\
    \ 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i +\
    \ 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return #s >= 3 and s:match(\"^(%a)%1%1\") == nil\nend\nassert(is_happy(\"\
    abcabcabc\") == true)\nassert(is_happy(\"abccbaabccba\") == false)\nassert(is_happy(\"\
    abccbacbccba\") == true)\nassert(is_happy(\"abc\") == false)\nassert(is_happy(\"\
    aaa\") == false)\nassert(is_happy(\"aaaa\") == false)\nassert(is_happy(\"aaaaa\"\
    ) == true)\nassert(is_happy(\"aaaaaa\") == false)\nassert(is_happy(\"aaaaaaa\"\
    ) == false)\nassert(is_happy(\"aaaaaaaa\") == true)\nassert(is_happy(\"aaaaaaaaa\"\
    ) == false)\nassert(is_happy(\"aaaaaaaaaa\") == false)\nassert(is_happy(\"aaaaaaaaaaa\"\
    ) == true)\nassert(is_happy(\"aaaaaaaaaaaa\") == false)\nassert(is_happy(\"aaaaaaaaaaaaa\"\
    ) == false)\nassert(is_happy(\"aaaaaaaaaaaaaa\") == true)\nassert(is_happy(\"\
    aaaaaaaaaaaaaaa\") == false)\nassert(is_happy(\"aaaaaaaaaaaaaaaa\") == false)\n\
    assert(is_happy(\"aaaaaaaaaaaaaaaaa\") == true)\nassert(is_happy(\"aaaaaaaaaaaaaaaaaa\"\
    ) == false)\nassert(is_happy(\"aaaaaaaaaaaaaaaaaaa\") == false)\nassert(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaa\") == true)\nassert(is_happy(\"aaaaaaaaaaaaaaaaaaaaa\") ==\
    \ false)\nassert(is_happy(\"aaaaaaaaaaaaaaaaaaaaaa\") == false)\nassert(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaa\") == true)\nassert(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaa\"\
    ) == false)\nassert(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaa\") == false)\nassert(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaa\") == true)\nassert(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaa\"\
    ) == false)\nassert(is_happy(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == false)\nassert(is_happy(\"\
    aaaaaaaaaaaaaaaaaaaaaaaaaaaaa\") == true)\nassert(is_happy(\"aaaaaaaaaaaa\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpum5yv_5l.lua:39: unfinished string near ''"aaaaaaaaaaaa''

    '
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqy1onfws.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpqy1onfws.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- check the length\n    if s:len() < 3 then\n        return false\n    end\n\
    \    -- check the consecutive letters\n    for i = 1, #s - 2 do\n        if s:sub(i,\
    \ i + 2):match('(.)%1') then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp197146vc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp197146vc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  for i = 1, #s - 2 do\n    if s:sub(i, i\
    \ + 2) == s:sub(i + 1, i + 3) then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh7xh853.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxh7xh853.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n\
    \      return false\n    end\n  end\n  return #s >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfg_80sm9.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfg_80sm9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  return string.len(s) >= 3 and not s:match(\"(.).%1.%1\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd1qa9dpy.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd1qa9dpy.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local t = {}\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2) ~= s:sub(i\
    \ + 1, i + 3) then\n            table.insert(t, s:sub(i, i + 2))\n        end\n\
    \    end\n    return #t == #s - 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wvlbvlv.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9wvlbvlv.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if s:len() < 3 then\n        return false\n    end\n    local three = s:sub(1,\
    \ 3)\n    if three:sub(1, 1) == three:sub(2, 2) then\n        return false\n \
    \   end\n    if three:sub(1, 1) == three:sub(3, 3) then\n        return false\n\
    \    end\n    if three:sub(2, 2) == three:sub(3, 3) then\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxn4vma9.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsxn4vma9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    -- split in 3 letter chunks\n\
    \    local chunks = string_chunks(s, 3)\n    -- check that they are different\n\
    \    local last\n    for i, chunk in ipairs(chunks) do\n        if last and chunk\
    \ == last then\n            return false\n        end\n        last = chunk\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1pj5sppd.lua:10:\
    \ attempt to call a nil value (global 'string_chunks')\nstack traceback:\n\t/tmp/tmp1pj5sppd.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp1pj5sppd.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n\
    \        if s:sub(i, i + 2):find(s:sub(i, i)) then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnvcp6uw.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmnvcp6uw.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  for i = 1, #s - 2 do\n    if s:sub(i, i\
    \ + 2) == s:sub(i + 1, i + 3) then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh7xh853.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxh7xh853.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  local i = 0\n  while i < #s do\n    if s:sub(i+1,\
    \ i+3) == s:sub(i+2, i+4) then return false end\n    i = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2sfxgq5.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo2sfxgq5.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal i, j = 1, 4\n\tfor j = 4, #s do\n\t\tlocal c = s:sub(i, j)\n\t\tif #c\
    \ == 3 and c:match('(.)%1') then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1i51a_2.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph1i51a_2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- write your code here\n    -- print(#s)\n    if #s < 3 then\n        return\
    \ false\n    end\n    for i = 1, #s - 2 do\n        if s:sub(i, i + 2) == s:sub(i\
    \ + 1, i + 3) then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9pu8lxe.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt9pu8lxe.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \   if #s < 3 then return false end\n   local letters = {}\n   for i = 1, #s -\
    \ 2 do\n      local l = s:sub(i, i + 2)\n      if letters[l] then return false\
    \ end\n      letters[l] = true\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeydzd2co.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpeydzd2co.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    for i = 1, #s - 2 do\n        if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gk9c65w.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9gk9c65w.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local prev_char\n    local chars = {}\n    local s_len = #s\n    if s_len\
    \ < 3 then\n        return false\n    end\n    for i = 1, #s do\n        local\
    \ char = s:sub(i, i)\n        if prev_char and chars[prev_char] and chars[prev_char]\
    \ == char then\n            return false\n        end\n        prev_char = char\n\
    \        chars[char] = prev_char\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5fl4nw0.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo5fl4nw0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tif not s or #s < 3 then return false end\n\tlocal i = 0\n\tfor c in s:gmatch(\"\
    .\") do\n\t\ti = i + 1\n\t\tif c == s:sub(i, i + 2) then return false end\n\t\
    end\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgev932ir.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgev932ir.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n\
    \      return false\n    end\n  end\n  return #s >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfg_80sm9.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfg_80sm9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local n = s:len()\n  if n < 3 then return false end\n  local i = 1\n  while\
    \ i <= n - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i\
    \ + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n      return\
    \ false\n    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal t = {}\n\tfor i = 1, #s - 2 do\n\t\tlocal l, m, r = s:sub(i, i), s:sub(i\
    \ + 1, i + 1), s:sub(i + 2, i + 2)\n\t\tif l == m or l == r or m == r then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx78ytz8.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsx78ytz8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal n = #s\n\tif n < 3 then\n\t\treturn false\n\tend\n\tfor i = 1, n - 2 do\n\
    \t\tif s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok9bjjsv.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpok9bjjsv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local i = 1\n    while i + 2 <= #s do\n        if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n            return false\n        end\n        i =\
    \ i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9p9c7jya.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9p9c7jya.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tfor i = 1, #s-2 do\n\t\tif s:sub(i, i+2) == s:sub(i+1, i+3) then\n\t\t\treturn\
    \ false\n\t\tend\n\tend\n\treturn #s >= 3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprshxb_by.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprshxb_by.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local i = 0\n    local m = #s\n    local c1, c2, c3\n    repeat\n       \
    \ c1 = s:sub(i + 1, i + 1)\n        c2 = s:sub(i + 2, i + 2)\n        c3 = s:sub(i\
    \ + 3, i + 3)\n        i = i + 1\n    until i >= m - 2 or (c1 ~= c2 and c2 ~=\
    \ c3 and c1 ~= c3)\n    return i < m - 2\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh5j2bq1.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplh5j2bq1.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- checking the validity of the string\n    if string.len(s) < 3 then\n \
    \       return false\n    end\n    -- checking if every 3 consecutive letters\
    \ are distinct\n    -- or not by comparing the substring of length 3 with\n  \
    \  -- the substring of length 1\n    for i = 1, string.len(s) - 2 do\n       \
    \ if string.sub(s, i, i + 2) == string.sub(s, i + 1, i + 3) then\n           \
    \ return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllg9tnrl.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpllg9tnrl.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \   -- check if the given string is at least 3 chars long\n   if string.len(s)\
    \ < 3 then\n      return false\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7kha08bj.lua:24: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return (#s >= 3 and s:match('([a-zA-Z])%1%1') == nil)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hmal87t.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6hmal87t.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n\
    \        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2,\
    \ i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s<3 then return false end\n  for i=1,#s-2 do\n    if s:sub(i,i+2)==s:sub(i+1,i+3)\
    \ then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekthlygk.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpekthlygk.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tif #s < 3 then return false end\n\tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i +\
    \ 2) == s:sub(i + 1, i + 3) then return false end\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqbcdjea.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbqbcdjea.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- check if s is a string with length at least 3,\n    -- and check if all\
    \ the 3 consecutive letters are different:\n    if type(s) ~= \"string\" or #s\
    \ < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n        if\
    \ s:sub(i, i) == s:sub(i + 1, i + 1) or\n           s:sub(i, i) == s:sub(i + 2,\
    \ i + 2) or\n           s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n    \
    \        return false\n        end\n    end\n    return true\nend\nassert(is_happy(\"\
    Eyyy\") == true)\nassert(is_happy(\"abba\") == false)\nassert(is_happy(\"c\")\
    \ == false)\nassert(is_happy(\"abca\") == true)\nassert(is_happy(\"Happy\") ==\
    \ true)\nassert(is_happy(\"12321\") == false)\nassert(is_happy(\"aabcaa\") ==\
    \ false)\nassert(is_happy(\"abcabcabcabcabc\") == true)\nassert(is_happy(\"abcabc\"\
    ) == false)\nassert(is_happy(\"aabaab\") == false)\nassert(is_happy(\"aaaa\")\
    \ == false)\nassert(is_happy(\"aaabbb\") == false)\nassert(is_happy(\"aaabbbccc\"\
    ) == true)\nassert(is_happy(\"aaabbbcccaa\") == false)\nassert(is_happy(\"aaabbbcccaaa\"\
    ) == false)\nassert(is_happy(\"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptq01e852.lua:35: unfinished string near ''"abcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabcabc''

    '
  stdout: ''
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n\
    \        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2,\
    \ i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if type(s) ~= 'string' then return false end\n    return #s >= 3 and not\
    \ s:match '%1.%1.%1'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph58mgdm_.lua:7:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmph58mgdm_.lua:7: in local\
    \ 'candidate'\n\t/tmp/tmph58mgdm_.lua:15: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- check if the given string is happy\n    local prev = s:sub(1, 3)\n   \
    \ for i = 4, #s do\n        local curr = s:sub(i - 2, i)\n        if curr == prev\
    \ then\n            return false\n        end\n        prev = curr\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo3u4t0q.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdo3u4t0q.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    for i = 3, #s do\n        if s:sub(i - 2, i) == s:sub(i - 1, i + 1) then\n\
    \            return false\n        end\n    end\n    return #s >= 3\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpel6ieplr.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpel6ieplr.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local len = string.len(s)\n    if len < 3 then\n        return false\n  \
    \  end\n    for i = 1, len - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) and s:sub(i, i) == s:sub(i + 2, i + 2) then\n            return false\n \
    \       end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkecd437.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvkecd437.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return #s >= 3 and (#s == 3 or not s:match('.-((.)%2%2).-'))\nend\nassert(not\
    \ is_happy \"abca\")\nassert(is_happy \"abcaa\")\nassert(is_happy \"abcab\")\n\
    assert(not is_happy \"aaaa\")\nassert(not is_happy \"aaaaa\")\nassert(is_happy\
    \ \"aaaaaa\")\nassert(not is_happy \"abcdefga\")\nassert(is_happy \"abcdefgabc\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpsd1v_d22.lua:8: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpsd1v_d22.lua:8: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local i, l = 0, #s\n  while i < l do\n    if l < 3 then return false end\n\
    \    if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then return false end\n    i =\
    \ i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu9bzo872.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu9bzo872.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n\
    \        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2,\
    \ i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nassert(not is_happy(\"\"))\nassert(not is_happy(\"a\"))\nassert(not is_happy(\"\
    aa\"))\nassert(not is_happy(\"aaa\"))\nassert(not is_happy(\"abac\"))\nassert(is_happy(\"\
    aba\"))\nassert(is_happy(\"ababababa\"))\nassert(is_happy(\"ababababaab\"))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmprknuvnhz.lua:21: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmprknuvnhz.lua:21: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal n = #s\n\tif n < 3 then\n\t\treturn false\n\tend\n\tfor i = 1, n - 2 do\n\
    \t\tif s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend\nassert(not is_happy\"aaabbb\")\nassert(not is_happy\"\
    aaabbbc\")\nassert(is_happy\"abcabcabc\")\nassert(not is_happy\"abcabcabcdef\"\
    )\nassert(not is_happy\"abcabcabcdef\")\nassert(not is_happy\"abcabcabcdefg\"\
    )\nassert(not is_happy\"aaaaaaaaaaa\")\nassert(is_happy\"abcabc\")\nassert(is_happy\"\
    abc\")\nassert(not is_happy\"abcd\")\nassert(not is_happy\"ab\")\nassert(not is_happy\"\
    \")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpxec79f8l.lua:17: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpxec79f8l.lua:17: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  for i = 3, #s do\n    if s:sub(i - 2, i)\
    \ == s:sub(i - 1, i + 1) then return false end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1zmg73t.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph1zmg73t.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local n = s:len()\n  if n < 3 then return false end\n  for i = 1, n - 2 do\n\
    \    if s:sub(i, i + 2):match('(.)%1%1') then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp8ri7hdi.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpp8ri7hdi.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  local a, b, c = string.byte(s, 1, 3)\n \
    \ local h = {a, b, c}\n  local t = {}\n  local ok = true\n  for i = 4, #s do\n\
    \    local d = string.byte(s, i)\n    ok = ok and (t[d] or 0) == 0\n    t[d] =\
    \ t[d] and t[d] + 1 or 1\n    local x = h[1]\n    h[1] = h[2]\n    h[2] = h[3]\n\
    \    h[3] = d\n    if ok and t[x] == 1 and t[h[2]] == 1 and t[h[3]] == 1 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptfv5h9pl.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptfv5h9pl.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  return s:len() >= 3 and not s:find('(..).*%1')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxgg7yay.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcxgg7yay.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \t-- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2kkxug3.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpl2kkxug3.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  for i = 1, #s - 2 do\n    if s:sub(i, i\
    \ + 2) == s:sub(i + 1, i + 3) then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh7xh853.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxh7xh853.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    for i = 1, #s - 2 do\n        local c = s:sub(i, i + 2)\n        if c:find(s:sub(i,\
    \ i), 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphhz6pth7.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphhz6pth7.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  for i = 1, #s-2 do\n    if s:sub(i, i+2) == s:sub(i+1, i+3) then\n      return\
    \ false\n    end\n  end\n  return #s >= 3\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptcs9l3e_.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptcs9l3e_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  for i = 1, #s - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) and s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nassert(is_happy(\"aabbcc\"))\nassert(not is_happy(\"aabbbcc\"))\n\
    assert(not is_happy(\"aabbccc\"))\nassert(not is_happy(\"aabcc\"))\nassert(not\
    \ is_happy(\"abcc\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp9w01rxxv.lua:16: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp9w01rxxv.lua:16: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n\
    \        if s:sub(i, i) == s:sub(i + 1, i + 1) and s:sub(i, i) == s:sub(i + 2,\
    \ i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb_wp9gj.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppb_wp9gj.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  for i = 1, #s - 2 do\n    if s:sub(i, i\
    \ + 2) == s:sub(i + 1, i + 3) then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh7xh853.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxh7xh853.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local n = #s\n  for i = 1, n - 2 do\n    local a, b, c = s:sub(i, i), s:sub(i\
    \ + 1, i + 1), s:sub(i + 2, i + 2)\n    if a == b or b == c or a == c then\n \
    \     return false\n    end\n  end\n  return n >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local result = false\n    if string.len(s) > 2 then\n        local function\
    \ check_happy(s, i)\n            local str = string.sub(s, i, i + 2)\n       \
    \     return str:match('(%w)%1%1') == nil\n        end\n        result = true\n\
    \        for i = 1, string.len(s) - 2 do\n            if not check_happy(s, i)\
    \ then\n                result = false\n                break\n            end\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxc8wtgh.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvxc8wtgh.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if type(s) == 'string' and s:len() >= 3 then\n    for i = 1, s:len() - 2 do\n\
    \      if s:sub(i, i + 2):find(s:sub(i, i), 1, true) then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88fzlch0.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp88fzlch0.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return #s >= 3 and not string.find(s, '(.)%1%1')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5owthut.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi5owthut.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return\n        #s >= 3 and s:match(\"(%a)(%a)(%a)\") ~= nil and -- at least\
    \ 3 consecutive letters\n        s:match(\"(%a)(%a)%1\") == nil and -- not 3 consecutive\
    \ equal letters\n        s:match(\"(%a)(%a)%2\") == nil -- not 3 consecutive equal\
    \ letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- this function will have a chain of functions:\n    -- chain([f, g, h])\
    \ == chain([f, chain([g, h])])\n    -- chain([f, g, h]) == chain([f, g, h])\n\
    \    local function chain(fs)\n        return function(x)\n            for _,\
    \ f in ipairs(fs) do\n                x = f(x)\n            end\n            return\
    \ x\n        end\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpalpz1jh3.lua:31: ''end'' expected (to close ''function'' at
    line 5) near <eof>

    '
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kw6vped.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp3kw6vped.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  return type(s) == 'string' and s:len() >= 3 and s:match('^(%w)(%w)(%w)') ~=\
    \ nil and s:match('^(%w)(%w)(%w)') ~= s:match('^(%w)(%w)(%w)')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0ynzgaf.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpi0ynzgaf.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    local ia, ib, ic = s:byte(1,3)\n\
    \    for i = 4, #s do\n        ia, ib, ic = ib, ic, s:byte(i)\n        if ia ==\
    \ ib or ib == ic or ia == ic then\n            return false\n        end\n   \
    \ end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnamm8vo7.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnamm8vo7.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- the length of s\n    local len = #s\n    if len < 3 then\n        return\
    \ false\n    end\n    for i = 1, len - 2 do\n        if s:sub(i, i) == s:sub(i\
    \ + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) ==\
    \ s:sub(i + 2, i + 2) then\n            return false\n        end\n    end\n \
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local i = 1\n    while i < #s - 1 do\n        if s:sub(i, i + 2):find(\"\
    (.)%1%1\") then\n            return false\n        end\n        i = i + 1\n  \
    \  end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0s2emvd5.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0s2emvd5.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal prev2, prev, curr = \"\", \"\", \"\"\n\tfor i=1,s:len() do\n\t\tprev2\
    \ = prev\n\t\tprev = curr\n\t\tcurr = s:sub(i,i)\n\t\tif prev2 == curr then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10x0fwrw.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp10x0fwrw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  for i = 1, #s - 2 do\n    if s:sub(i, i)\
    \ == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1,\
    \ i + 1) == s:sub(i + 2, i + 2) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if string.len(s) < 3 then\n        return false\n    end\n    local i = 1\n\
    \    while i <= string.len(s) - 2 do\n        if string.sub(s, i, i + 2) == string.sub(s,\
    \ i + 1, i + 3) then\n            return false\n        end\n        i = i + 1\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhkc0ukg.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprhkc0ukg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local ans = false\n  if type(s) == \"string\" and #s >= 3 then\n    local i\
    \ = 1\n    while i < #s do\n      if s:sub(i, i+2) == s:sub(i+1, i+3) then\n \
    \       ans = false\n        break\n      else\n        ans = true\n      end\n\
    \      i = i + 1\n    end\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbyil4fvh.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbyil4fvh.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n\
    \        if s:sub(i, i + 2):match(\"%1\") then\n            return false\n   \
    \     end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqdn__yz8.lua:10:\
    \ invalid capture index %1\nstack traceback:\n\t/tmp/tmpqdn__yz8.lua:10: in local\
    \ 'candidate'\n\t/tmp/tmpqdn__yz8.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return s:gsub('(.)%1%1','') == '' and #s >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzj64o2ko.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzj64o2ko.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoyrw2ci.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmphoyrw2ci.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local n = #s\n  if n < 3 then return false end\n  for i = 1, n - 2 do\n   \
    \ if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then return false end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodzvc2ng.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpodzvc2ng.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- check the string is happy or not\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4b9cvslo.lua:13:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp4b9cvslo.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local a, b, c = s:sub(1, 1), s:sub(2, 2), s:sub(3, 3)\n    return s:len()\
    \ >= 3 and a ~= b and b ~= c and a ~= c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu58vw8xn.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu58vw8xn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    for i = 3, #s do\n        if s:sub(i-2, i) == s:sub(i-1, i+1) then\n    \
    \        return false\n        end\n    end\n    return #s >= 3\nend\nassert(is_happy('happy')\
    \ == true)\nassert(is_happy('unhappy') == false)\nassert(is_happy('ahpy') == false)\n\
    assert(is_happy('hhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhhh') == false)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpm57h7qje.lua:14: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpm57h7qje.lua:14: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local prev = s:sub(1, 2)\n  for i = 4, #s do\n    local next = s:sub(i - 2,\
    \ i)\n    if prev == next then\n      return false\n    end\n    prev = next\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ln2ic4j.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7ln2ic4j.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    for i = 1, #s - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) and s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnruhj47.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphnruhj47.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- s = s:lower()\n    local l = string.len(s)\n    if l < 3 then\n      \
    \  return false\n    end\n    for i = 1, l - 2 do\n        if s:sub(i, i + 2)\
    \ == s:sub(i + 1, i + 3) then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt19zkhz.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt19zkhz.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local left = 1\n  local right = 3\n  while right <= #s do\n    if s:sub(left,\
    \ left) == s:sub(right, right) or\n      s:sub(left + 1, left + 1) == s:sub(right,\
    \ right) or\n      s:sub(left + 2, left + 2) == s:sub(right, right) then\n   \
    \   return false\n    end\n    left = left + 1\n    right = right + 1\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24u1mhrf.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp24u1mhrf.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn #s >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuvuq1sm.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcuvuq1sm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if type(s) ~= 'string' then\n        return false\n    end\n    local length\
    \ = #s\n    if length < 3 then\n        return false\n    end\n    for i = 1,\
    \ length - 2 do\n        if s:sub(i, i + 2) == 'aaa' or s:sub(i, i + 2) == 'bbb'\
    \ or s:sub(i, i + 2) == 'ccc' then\n            return false\n        end\n  \
    \  end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5mlk66v.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph5mlk66v.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    for i = 3, #s do\n   \
    \     if s:sub(i - 2, i) == s:sub(i - 1, i + 1) then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcp0cwxhq.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcp0cwxhq.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    for i = 1, #s-2 do\n        if s:sub(i, i+2) == s:sub(i+1, i+3) then\n  \
    \          return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xrkzo3j.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2xrkzo3j.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal last = ''\n\tfor i = #s, 3, -1 do\n\t\tlocal b = s:sub(i - 2, i)\n\t\t\
    if b == last then\n\t\t\treturn false\n\t\tend\n\t\tlast = b\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb6uz1mu.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsb6uz1mu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local prev = s:sub(1, 3)\n    for i = 4, #s - 2 do\n        local sub = s:sub(i,\
    \ i + 2)\n        if sub == prev then\n            return \"No\"\n        end\n\
    \        prev = sub\n    end\n    return \"Yes\"\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ep80vca.lua:20:\
    \ expected: false, actual: \"Yes\"\nstack traceback:\n\t/tmp/tmp7ep80vca.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tif #s < 3 then return false end\n\tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i +\
    \ 2) == s:sub(i + 1, i + 3) then return false end\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqbcdjea.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbqbcdjea.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local l = string.len(s)\n    if l < 3 then\n        return false\n    end\n\
    \    local c = string.sub(s, 1, 3)\n    if string.match(c, \"(.)%1\") then\n \
    \       return false\n    end\n    for i = 4, l - 2 do\n        local t = string.sub(s,\
    \ i, i + 2)\n        if t == c then\n            return false\n        end\n \
    \   end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_knhqrbm.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_knhqrbm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  return string.len(s) >= 3 and string.match(s, \"^(.)%1%1\") == nil and string.match(s,\
    \ \"(.)%1%1$\") == nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplm58pd5k.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplm58pd5k.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- if length of string is less than 3, then this string is not happy\n  \
    \  if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n \
    \       -- check if 3 consecutive letters are different from each other\n    \
    \    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i + 2, i +\
    \ 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local i = 1\n    local n = #s\n    while i <= n do\n        if (n - i + 1)\
    \ < 3 then\n            return false\n        end\n        local q = s:sub(i,\
    \ i+2)\n        if q:match(\"(.).%1\") then\n            return false\n      \
    \  end\n        i = i + 3\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzgnyojy.lua:26:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgzgnyojy.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if string.len(s) < 3 then return false end\n  for i = 1, string.len(s) - 2\
    \ do\n    if string.sub(s, i, i) == string.sub(s, i + 1, i + 1) then\n      if\
    \ string.sub(s, i, i) == string.sub(s, i + 2, i + 2) then\n        return false\n\
    \      end\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit_cs_n9.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpit_cs_n9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  --[[\n  if s:match '^(%w)%1%1' then return\
    \ false end\n  for i = 2, #s-1 do\n    if s:sub(i, i+2):match '^(%w)%1%1' then\
    \ return false end\n  end\n  --]]\n  for i = 1, #s-2 do\n    if s:sub(i, i+2):match\
    \ '^(%w)%1%1' then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnxelcs4.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdnxelcs4.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- return true\n  if string.len(s) < 3 then\n    return false\n  end\n  --\
    \ return true\n  if string.len(s) == 3 then\n    return true\n  end\n  -- TODO:\
    \ determine if the string is happy.\n  -- return true\n  for i = 3, string.len(s)\
    \ do\n    local x, y, z = string.sub(s, i - 2, i - 2), string.sub(s, i - 1, i\
    \ - 1), string.sub(s, i, i)\n    if x == y or y == z or x == z then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_tbbr4p.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6_tbbr4p.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if s:len() < 3 then\n        return false\n    end\n    local x, y, z = s:byte(1,3)\n\
    \    for i = 4, s:len() do\n        x, y, z = y, z, s:byte(i)\n        if x ==\
    \ y or y == z or z == x then\n            return false\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlpegi84.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdlpegi84.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \t-- if a string is not three characters it can't be happy\n\tif #s < 3 then\n\
    \t\treturn false\n\tend\n\tlocal seen = {}\n\tfor i = 1, #s do\n\t\t-- if this\
    \ is the last letter, there's nothing to check\n\t\tif i == #s then\n\t\t\tbreak\n\
    \t\tend\n\t\tlocal this, next = s:sub(i, i), s:sub(i + 1, i + 1)\n\t\t-- if this\
    \ is the first letter of a three letter sequence we need to check if the next\
    \ two are distinct\n\t\tif i % 3 == 1 then\n\t\t\tlocal match = next .. s:sub(i\
    \ + 2, i + 2)\n\t\t\tif seen[match] then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\
    \tseen[match] = true\n\t\tend\n\t\t-- otherwise we check if this letter is the\
    \ same as the next one\n\t\tif this == next then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbib2khxe.lua:43:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbib2khxe.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  for i = 1, #s - 2 do\n    local x = s:sub(i, i)\n    local y = s:sub(i + 1,\
    \ i + 1)\n    local z = s:sub(i + 2, i + 2)\n    if x == y or y == z or z == x\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzi7ydhvv.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzi7ydhvv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  for i = 1, s:len() - 2 do\n    if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_83y52wp.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_83y52wp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdj4in0k.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpzdj4in0k.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local t = {}\n  for i = 1, #s - 2 do\n    if not t[s:sub(i, i + 2)] then\n\
    \      t[s:sub(i, i + 2)] = true\n    else\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06pb56gc.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp06pb56gc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- Write your code here\n    -- To print results to the standard output you\
    \ can use print\n    -- Example: print(\"Hello world!\")\n    -- your code here\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vtc1a5l.lua:15:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp1vtc1a5l.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local n = #s\n    if n < 3 then\n        return false\n    end\n    local\
    \ one = s:sub(1,1)\n    local two = s:sub(2,2)\n    local three = s:sub(3,3)\n\
    \    if one == two or one == three or two == three then\n        return false\n\
    \    end\n    local happy = true\n    for i = 3, n-2 do\n        one = two\n \
    \       two = three\n        three = s:sub(i+1,i+1)\n        if one == two or\
    \ one == three or two == three then\n            happy = false\n            break\n\
    \        end\n    end\n    return happy\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp336u46xv.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp336u46xv.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4c_bmg8.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpe4c_bmg8.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if string.len(s) < 3 then\n        return false\n    end\n    local s = s:lower()\n\
    \    for i = 1, string.len(s) - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i\
    \ + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i\
    \ + 2, i + 2) then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if string.len(s) < 3 then\n        return false\n    end\n    for i = 1,\
    \ string.len(s) - 2 do\n        if string.sub(s, i, i + 2) == string.sub(s, i\
    \ + 1, i + 3) then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zhg00k7.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1zhg00k7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- Implementation goes here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb0x673ws.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpb0x673ws.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    for i = 1, #s - 2 do\n        if string.sub(s, i, i + 2) == string.sub(s,\
    \ i + 1, i + 3) then\n            return false\n        end\n    end\n    return\
    \ #s >= 3\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa96arxz3.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa96arxz3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local str_len = s:len()\n    if str_len < 3 then\n        return false\n\
    \    end\n    -- \u0421\u0440\u0430\u0432\u043D\u0438\u0432\u0430\u0435\u043C\
    \ \u043F\u043E\u0441\u043B\u0435\u0434\u043E\u0432\u0430\u0442\u0435\u043B\u044C\
    \u043D\u043E\u0441\u0442\u0438 \u0441\u0438\u043C\u0432\u043E\u043B\u043E\u0432\
    \ \u0438 \u043F\u0440\u043E\u0432\u0435\u0440\u044F\u0435\u043C \u043D\u0430 \u0440\
    \u0430\u0432\u0435\u043D\u0441\u0442\u0432\u043E.\n    for i = 1, str_len - 2\
    \ do\n        if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48l3z7kr.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp48l3z7kr.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    for i = 1, #s - 2 do\n        if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gk9c65w.lua:17:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9gk9c65w.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local n = s:len()\n  if n < 3 then return false end\n  for i = 1, n - 2 do\n\
    \    if s:sub(i, i) == s:sub(i + 1, i + 1) and s:sub(i, i) == s:sub(i + 2, i +\
    \ 2) then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4w1whwq.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpi4w1whwq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if s:len() < 3 then\n        return false\n    end\n    local set = {}\n\
    \    for i = 1, s:len() do\n        local next_set = {}\n        for j = 1, 3\
    \ do\n            if s:len() >= i + j - 1 then\n                next_set[s:sub(i\
    \ + j - 1, i + j - 1)] = true\n            end\n        end\n        if set[next_set]\
    \ then\n            return false\n        end\n        set[next_set] = true\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsd2euure.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsd2euure.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return #s >= 3 and (s:gsub(\"(.)%1%1\",\"\") == s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzs99hrhy.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzs99hrhy.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnitmbpvf.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpnitmbpvf.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local d = {}\n    local i = 1\n    while i <= #s do\n        if d[string.sub(s,\
    \ i, i+2)] then\n            return false\n        end\n        d[string.sub(s,\
    \ i, i+2)] = true\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf9svx214.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpf9svx214.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \treturn (string.len(s) >= 3) and (string.sub(s, 3, 3) ~= string.sub(s, 2, 2))\
    \ and (string.sub(s, 3, 3) ~= string.sub(s, 1, 1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_5zgxqm.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv_5zgxqm.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  return #s > 2 and not string.find(s, '...(.)%1')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09o518d7.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp09o518d7.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- s=\"abcdabcdabcdabcdabcd\"\n    -- print(string.len(s))\n    -- print(string.byte(s))\n\
    \    if string.len(s) < 3 then\n        return false\n    end\n    -- print(string.byte(s,1,1))\n\
    \    -- print(string.byte(s,2,2))\n    -- print(string.byte(s,3,3))\n    -- print(string.byte(s,4,4))\n\
    \    for i = 1, string.len(s) - 2 do\n        -- if(string.byte(s,i,i)==string.byte(s,i+1,i+1)\
    \ and string.byte(s,i,i)==string.byte(s,i+2,i+2)) then\n        if string.byte(s,\
    \ i, i) == string.byte(s, i + 1, i + 1) and string.byte(s, i, i) == string.byte(s,\
    \ i + 2, i + 2) then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmkdphml.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplmkdphml.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal rep = {}\n\tfor i = 1, #s - 2 do\n\t\tlocal sub = s:sub(i, i + 2)\n\t\t\
    if rep[sub] then\n\t\t\treturn false\n\t\tend\n\t\trep[sub] = true\n\tend\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7kqepscs.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7kqepscs.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal prev_char, prev_prev_char = s:sub(1, 1), s:sub(2, 2)\n\tfor i = 3, #s\
    \ do\n\t\tlocal char = s:sub(i, i)\n\t\tif char == prev_char or char == prev_prev_char\
    \ then\n\t\t\treturn false\n\t\tend\n\t\tprev_prev_char = prev_char\n\t\tprev_char\
    \ = char\n\tend\n\treturn true\nend\nassert(is_happy(\"robert\") == true)\nassert(is_happy(\"\
    robb\") == false)\nassert(is_happy(\"robertt\") == false)\nassert(is_happy(\"\
    aabbc\") == true)\nassert(is_happy(\"aabbca\") == false)\nassert(is_happy(\"aabbcc\"\
    ) == false)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpygwo0tgu.lua:20: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpygwo0tgu.lua:20: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  local tbl = {}\n  for i = 1, #s do\n   \
    \ local n = s:sub(i, i+2)\n    if #n == 3 then\n      if tbl[n] then return false\
    \ end\n      tbl[n] = true\n    end\n  end\n  return true\nend\nprint(is_happy(\"\
    fghj\")) -- true\nprint(is_happy(\"fghja\")) -- false\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "true\ntrue\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v9chpsj.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4v9chpsj.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn #s >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuvuq1sm.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcuvuq1sm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9r6jh1gb.lua:12:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9r6jh1gb.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- check that length >= 3\n    if string.len(s) < 3 then\n        return\
    \ false\n    end\n    -- check every substring of length 3\n    for i = 1, string.len(s)\
    \ - 2 do\n        local sub = string.sub(s, i, i + 2)\n        -- if any two of\
    \ the three chars are equal, it's not happy\n        if sub:match(\"([^%c])(.*)%1\"\
    ) then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal l, f = string.len(s), 0\n\tif l < 3 then return false end\n\tfor i = 0,\
    \ l - 3 do\n\t\tf = string.find(s, string.sub(s, i + 1, i + 3), i + 2)\n\t\tif\
    \ f then return false end\n\tend\n\treturn true\nend\nprint(is_happy(\"aabb\"\
    ), is_happy(\"abcc\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "true\ttrue\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppgztvc5z.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppgztvc5z.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  \n  local happy = false\n  local count = 0\n  local str = {}\n  local s = string.lower(s)\n\
    \  \n  for i=1, #s do\n    if s[i] == ' ' then\n      count = count + 1\n    else\n\
    \      str[i-count] = s[i]\n    end\n  end\n  \n  if #str >= 3 then\n    for i=1,\
    \ #str-2 do\n      if str[i] ~= str[i+1] and str[i] ~= str[i+2] and str[i+1] ~=\
    \ str[i+2] then\n        happy = true\n      else\n        happy = false\n   \
    \     break\n      end\n    end\n  end\n  \n  return happy\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpahxw9wmu.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpahxw9wmu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  return #s >= 3 and s:find(\"(...)%1\") == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfrfrd75.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcfrfrd75.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyur_dm0.lua:11:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmppyur_dm0.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    --\n    local len = #s\n    if len < 3 then\n        return false\n    end\n\
    \    for i = 1, len - 2 do\n        if s:sub(i, i + 2) == s:sub(i + 1, i + 3)\
    \ then\n            return false\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvutyl3ed.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvutyl3ed.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  for i = 1, #s - 2 do\n    if s:sub(i, i\
    \ + 2) == s:sub(i + 1, i + 3) then return false end\n  end\n  return true\nend\n\
    print(is_happy(\"abcabcabc\")) --> false\nprint(is_happy(\"abcabcabca\")) -->\
    \ true\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "true\ntrue\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvu8nqxg6.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvu8nqxg6.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \t-- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb2ap0h23.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpb2ap0h23.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal letters = {}\n\tfor i = 1, #s do\n\t\tletters[i] = s:sub(i, i)\n\tend\n\
    \tlocal check = 0\n\tfor i = 3, #letters do\n\t\tif letters[i] == letters[i -\
    \ 1] and letters[i] == letters[i - 2] then\n\t\t\tcheck = 1\n\t\tend\n\tend\n\t\
    if check == 1 then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend\nreturn\
    \ is_happy\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0dxtot_5.lua:23: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    local n = #s\n    local\
    \ i = 1\n    while i < n do\n        if s:sub(i, i+2) == s:sub(i+1, i+3) then\n\
    \            return false\n        end\n        i = i + 1\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkfixexih.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkfixexih.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local seen = {}\n    for c in s:gmatch('%a') do\n        if #seen == 3 then\n\
    \            table.remove(seen, 1)\n        end\n        table.insert(seen, c)\n\
    \        if #seen == 3 and seen[1] == seen[2] and seen[2] == seen[3] then\n  \
    \          return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllf2h7yl.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpllf2h7yl.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  for i = 1, #s - 2 do\n    if s:sub(i, i\
    \ + 2) == s:sub(i + 1, i + 3) then return false end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxh7xh853.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxh7xh853.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n\
    \        if s:sub(i, i + 2):match(\"(.)%1%1\") then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_xpqji1.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo_xpqji1.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tif #s < 3 then return false end\n\tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i +\
    \ 2) == s:sub(i + 1, i + 3) then return false end\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqbcdjea.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbqbcdjea.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local dict = {}\n    local prev_char\n    local count = 0\n    for i = 1,\
    \ string.len(s) do\n        if i > 3 then\n            dict[prev_char] = dict[prev_char]\
    \ - 1\n            if dict[prev_char] == 0 then\n                dict[prev_char]\
    \ = nil\n            end\n        end\n        local c = string.sub(s, i, i)\n\
    \        if dict[c] == nil then\n            dict[c] = 1\n        else\n     \
    \       dict[c] = dict[c] + 1\n        end\n        if dict[c] > 1 then\n    \
    \        return false\n        end\n        prev_char = c\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvk8a80v.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxvk8a80v.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- return true if |s| >= 3 and every 3 consecutive letters are distinct\n \
    \ local count = 0\n  local s_len = #s\n  for i = 1, s_len do\n    if s_len - i\
    \ > 3 and s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n      return false\n  \
    \  end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpq4xm9e.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkpq4xm9e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n\t\
    \t\treturn false\n\t\tend\n\tend\n\treturn #s >= 3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcuvuq1sm.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcuvuq1sm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local len = string.len(s)\n    if len < 3 then\n        return false\n  \
    \  end\n    for i = 1, len - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i +\
    \ 1) or s:sub(i, i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i +\
    \ 2, i + 2) then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return #s >= 3 and #s % 3 == 0 and not string.match(s, \"([^\"..s:sub(1,1)..\"\
    ])\"..string.rep(\"%1\", #s/3-1))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpds335qoj.lua:14:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpds335qoj.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- Write the body of this function\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp37k64cj.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp37k64cj.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if string.len(s) < 3 then return false end\n  for i = 1, string.len(s)-2 do\n\
    \    if string.sub(s, i, i+2) == string.sub(s, i+1, i+3) then return false end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7my16g95.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7my16g95.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp413nce41.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp413nce41.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n\
    \        if s:sub(i, i + 2):match(\"^(.)%1%1$\") then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9nl3ale.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq9nl3ale.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  for i = 1, #s-2 do\n    local a, b, c = s:sub(i, i), s:sub(i+1, i+1), s:sub(i+2,\
    \ i+2)\n    if a == b or b == c or a == c then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9395ohda.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9395ohda.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyur_dm0.lua:11:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmppyur_dm0.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \   local count = 1\n   if #s < 3 then return false end\n   while #s > 2 do\n\
    \      if s:sub(1, 3) == s:sub(2, 4) then return false end\n      s = s:sub(2)\n\
    \      count = count + 1\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_slhlb5m.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_slhlb5m.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if not s or s:len() < 3 then\n        return false\n    end\n    for i =\
    \ 1, s:len() - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i,\
    \ i) == s:sub(i + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local chars = s:gmatch(\".\")\n  local last1, last2, last3\n  for c in chars\
    \ do\n    if c == last1 or c == last2 or c == last3 then\n      return false\n\
    \    end\n    last1, last2, last3 = last2, last3, c\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0b44l569.lua:20:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0b44l569.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- check if string is of length at least 3\n  if s:len() < 3 then\n    return\
    \ false\n  end\n  -- loop through the string\n  for i = 1,s:len()-2 do\n    --\
    \ check if three consecutive letters are distinct\n    if s:sub(i,i) == s:sub(i+1,i+1)\
    \ or s:sub(i,i) == s:sub(i+2,i+2) or s:sub(i+1,i+1) == s:sub(i+2,i+2) then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  local i = 0\n  while i < #s do\n    if s:sub(i+1,\
    \ i+3) == s:sub(i+3, i+5) then return false end\n    i = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0a8qrcu.lua:21:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_0a8qrcu.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal t = {}\n\tfor i = 1, string.len(s) - 2 do\n\t\tlocal a, b, c = string.sub(s,\
    \ i, i), string.sub(s, i + 1, i + 1), string.sub(s, i + 2, i + 2)\n\t\tif t[a]\
    \ or t[b] or t[c] then\n\t\t\treturn false\n\t\tend\n\t\tt[a] = true\n\t\tt[b]\
    \ = true\n\t\tt[c] = true\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6s2up8m.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe6s2up8m.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9r6jh1gb.lua:12:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9r6jh1gb.lua:12:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if s:len()<3 then return false end\n  for i=1,s:len()-2 do\n    if s:sub(i,i)==s:sub(i+1,i+1)\
    \ and s:sub(i,i)==s:sub(i+2,i+2) then return false end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppi62pb9t.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppi62pb9t.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  return s:len() >= 3 and s:gsub('(.)%1%1', ''):len() == s:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyvon8byq.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyvon8byq.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- some code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i2gz4ho.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_i2gz4ho.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzdj4in0k.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmpzdj4in0k.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  for i = 3, #s do\n    if s:sub(i - 2, i)\
    \ == s:sub(i - 1, i + 1) then return false end\n  end\n  return true\nend\nassert(not\
    \ is_happy('hihi'))\nassert(is_happy('aha'))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpk32pywlj.lua:12: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpk32pywlj.lua:12: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return string.len(s) >= 3 and not string.find(s, \"(.)%1%1\")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3ibdezo.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx3ibdezo.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    return s:len() > 2 and s:match'(.).%1.%1' == nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkajv6vmy.lua:15:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkajv6vmy.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local happy = false\n    local i = 0\n    local j = 0\n    local k = 0\n\
    \    for i = 0, s:len() - 3 do\n        j = i + 1\n        k = j + 1\n       \
    \ if s:sub(i, i) ~= s:sub(j, j) and s:sub(i, i) ~= s:sub(k, k) and s:sub(j, j)\
    \ ~= s:sub(k, k) then\n            happy = true\n        else\n            happy\
    \ = false\n            break\n        end\n    end\n    return happy\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmw9dnw8.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkmw9dnw8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- if length of s is less than 3\n    if #s < 3 then\n        return false\n\
    \    end\n    -- check every 3 consecutive letters\n    for i = 1, #s-2 do\n \
    \       if s:sub(i, i+2) == s:sub(i+1, i+3) then\n            return false\n \
    \       end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnvp_o1yf.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnvp_o1yf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if not s or s:len() < 3 then\n        return false\n    end\n    local last\
    \ = s:sub(1,3)\n    for i = 4, #s do\n        local cur = s:sub(i,i+2)\n     \
    \   if cur == last then\n            return false\n        end\n        last =\
    \ cur\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz11b5pmh.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz11b5pmh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tif #s < 3 then return false end\n\tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i +\
    \ 2) == s:sub(i + 1, i + 3) then return false end\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqbcdjea.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbqbcdjea.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local last, last2, last3\n  local function next()\n    last, last2, last3 =\
    \ s:sub(1,1), s:sub(2,2), s:sub(3,3)\n    s = s:sub(2)\n  end\n  next()\n  while\
    \ #s >= 2 do\n    if last == last2 or last == last3 or last2 == last3 then\n \
    \     return false\n    end\n    next()\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7kgiefr.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj7kgiefr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    --local happy = true\n    if s:len() < 3 then\n        return false\n   \
    \ end\n    for i = 1, s:len() - 2 do\n        local slice = s:sub(i, i + 2)\n\
    \        --print(slice)\n        if slice:sub(1, 1) == slice:sub(2, 2) or slice:sub(1,\
    \ 1) == slice:sub(3, 3) or slice:sub(2, 2) == slice:sub(3, 3) then\n         \
    \   return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- TODO: Check if a string is happy\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgr6at7a.lua:15:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpdgr6at7a.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    local result = true\n\
    \    for i = 1, #s - 2 do\n        if s:sub(i, i + 2):match(\"(.)%1%1\") then\n\
    \            result = false\n            break\n        end\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjqw74r6g.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpjqw74r6g.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- return false\n  if #s < 3 then return false end\n  for i = 1, #s - 2 do\n\
    \    if s:sub(i, i + 2) == '111' or s:sub(i, i + 2) == '000' then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphq1_3tu1.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphq1_3tu1.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal l = #s\n\tlocal p = s:gsub(\"(.)%1%1\",\"\")\n\treturn #p >= l - 2\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsr3hi7e.lua:14:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqsr3hi7e.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \t-- local good = true\n\tfor i = 1, #s - 2 do\n\t\tif s:sub(i, i + 2) == s:sub(i\
    \ + 1, i + 3) then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr_00z51d.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpr_00z51d.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \tlocal i, l = 1, #s\n\twhile i <= l - 2 do\n\t\tif s:sub(i, i + 2):match('(.).%1%1')\
    \ then\n\t\t\treturn false\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgyjmxsf3.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgyjmxsf3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \t-- code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rs02zwm.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp4rs02zwm.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- length\n    if not s:len() >= 3 then\n        return false\n    end\n\
    \    -- consecutive\n    local temp = {}\n    local c = {}\n    local l = 1\n\
    \    for i = 1, s:len() do\n        temp[i] = s:sub(i, i)\n        if not c[temp[i]]\
    \ then\n            c[temp[i]] = true\n            l = l + 1\n        end\n  \
    \  end\n    if s:len() ~= l then\n        return false\n    end\n    -- every\
    \ 3 consecutive\n    for i = 1, s:len() do\n        if temp[i + 2] then\n    \
    \        if temp[i] == temp[i + 1] and temp[i + 1] == temp[i + 2] then\n     \
    \           return false\n            end\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp02h0f2e9.lua:7:\
    \ attempt to compare number with boolean\nstack traceback:\n\t/tmp/tmp02h0f2e9.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp02h0f2e9.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local n = #s\n    if n < 3 then\n        return false\n    end\n    for i\
    \ = 1, n - 2 do\n        if s:sub(i, i + 2) == s:sub(i + 1, i + 3) then\n    \
    \        return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpts7vhkvw.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpts7vhkvw.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyur_dm0.lua:11:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmppyur_dm0.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- @todo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7o815ii.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmp_7o815ii.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local t = {}\n    for i = 1, #s do\n        local c = s:sub(i, i)\n     \
    \   if t[c] then\n            return false\n        end\n        t[c] = true\n\
    \    end\n    return #s >= 3\nend\nassert(is_happy(\"abccab\"))\nassert(not is_happy(\"\
    abccdab\"))\nassert(not is_happy(\"abccaab\"))\nassert(not is_happy(\"abccbab\"\
    ))\nassert(not is_happy(\"abccacab\"))\nassert(not is_happy(\"aaaaab\"))\nassert(not\
    \ is_happy(\"aaaa\"))\nassert(not is_happy(\"aaa\"))\nassert(is_happy(\"ababa\"\
    ))\nassert(is_happy(\"ab\"))\nassert(is_happy(\"abcabcabc\"))\nassert(not is_happy(\"\
    abcabcabca\"))\nassert(not is_happy(\"abcabcabcab\"))\nassert(not is_happy(\"\
    abcabcabcabc\"))\nassert(not is_happy(\"abccabccabccabcc\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpqofvmis_.lua:16: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpqofvmis_.lua:16: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyur_dm0.lua:11:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmppyur_dm0.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptidf0kgy.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmptidf0kgy.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  -- return s:len() >= 3 and s:match(\"(%a)(%a)(%a)\") == nil\n  return s:len()\
    \ >= 3 and s:match(\"(%w)(%w)%1\") == nil\nend\nprint(is_happy(\"happy\"), \"\
    true\")\nprint(is_happy(\"unhappy\"), \"false\")\nprint(is_happy(\"happyy\"),\
    \ \"false\")\nprint(is_happy(\"yyyy\"), \"false\")\nprint(is_happy(\"yy\"), \"\
    false\")\nprint(is_happy(\"yh\"), \"false\")\nprint(is_happy(\"hh\"), \"false\"\
    )\nprint(is_happy(\"yhh\"), \"false\")\nprint(is_happy(\"hhh\"), \"false\")\n\
    print(is_happy(\"xhx\"), \"false\")\nprint(is_happy(\"ppy\"), \"true\")\nprint(is_happy(\"\
    pyp\"), \"true\")\nprint(is_happy(\"ppyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_happy(\"ppyyy\"\
    ), \"false\")\nprint(is_happy(\"ppyyy\"), \"false\")\nprint(is_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr9zqe0wt.lua:45: '')'' expected (to close ''('' at line 44)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  local t={}\n  local flag=false\n  local c=0\n  for i=1,#s do\n    t[i]=s:sub(i,i)\n\
    \  end\n  for i=1,#t-2 do\n    if (t[i]~=t[i+1]) and (t[i]~=t[i+2]) and (t[i+1]~=t[i+2])\
    \ then\n      flag=true\n    else\n      flag=false\n      c=c+1\n    end\n  end\n\
    \  if c==0 then\n    return true\n  else\n    return false\n  end\nend\nprint(is_happy(\"\
    aaa\"))\nprint(is_happy(\"aaabbb\"))\nprint(is_happy(\"ababab\"))\nprint(is_happy(\"\
    aabbb\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "false\nfalse\nfalse\nfalse\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpqdlowfgk.lua:34: expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqdlowfgk.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    local last_chars = {}\n\
    \    for i = 1, #s do\n        if last_chars[1] == s:sub(i, i) then\n        \
    \    return false\n        end\n        for j = 1, #last_chars do\n          \
    \  last_chars[j] = last_chars[j + 1]\n        end\n        last_chars[#last_chars]\
    \ = s:sub(i, i)\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpctds_4f4.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpctds_4f4.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphoyrw2ci.lua:12:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmphoyrw2ci.lua:12: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if s:len() < 3 then\n        return false\n    end\n    for i = 1, s:len()\
    \ - 2 do\n        if s:sub(i, i) == s:sub(i + 1, i + 1) or s:sub(i, i) == s:sub(i\
    \ + 2, i + 2) or s:sub(i + 1, i + 1) == s:sub(i + 2, i + 2) then\n           \
    \ return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if #s < 3 then return false end\n  local i = 1\n  while i <= #s do\n    if\
    \ s:sub(i, i+2) == 'aaa' or s:sub(i, i+2) == 'bbb' or s:sub(i, i+2) == 'ccc' or\
    \ s:sub(i, i+2) == 'ddd' or s:sub(i, i+2) == 'eee' or s:sub(i, i+2) == 'fff' or\
    \ s:sub(i, i+2) == 'ggg' or s:sub(i, i+2) == 'hhh' or s:sub(i, i+2) == 'iii' or\
    \ s:sub(i, i+2) == 'jjj' or s:sub(i, i+2) == 'kkk' or s:sub(i, i+2) == 'lll' or\
    \ s:sub(i, i+2) == 'mmm' or s:sub(i, i+2) == 'nnn' or s:sub(i, i+2) == 'ooo' or\
    \ s:sub(i, i+2) == 'ppp' or s:sub(i, i+2) == 'qqq' or s:sub(i, i+2) == 'rrr' or\
    \ s:sub(i, i+2) == 'sss' or s:sub(i, i+2) == 'ttt' or s:sub(i, i+2) == 'uuu' or\
    \ s:sub(i, i+2) == 'vvv' or s:sub(i, i+2) == 'www' or s:sub(i, i+2) == 'xxx' or\
    \ s:sub(i, i+2) == 'yyy' or s:sub(i, i+2) == 'zzz' then\n      return false\n\
    \    end\n    i = i + 1\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ua5fcit.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5ua5fcit.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    local x = s:len()\n    if x < 3 then\n        return false\n    end\n   \
    \ local i = 1\n    while i < x - 2 do\n        if s:sub(i, i) == s:sub(i + 1,\
    \ i + 1) or s:sub(i, i) == s:sub(i + 2, i + 2) then\n            return false\n\
    \        end\n        i = i + 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wnhgc1y.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7wnhgc1y.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if #s < 3 then\n        return false\n    end\n    for i = 1, #s - 2 do\n\
    \        if s:sub(i, i) == s:sub(i + 1, i + 1) then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_969saeb.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_969saeb.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \  if s:len()<3 then return false end\n  for i=1,#s-2 do\n    if s:sub(i,i+2)==s:sub(i+1,i+3)\
    \ then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = is_happy\n    lu.assertEquals(candidate('a'),\
    \ false)\n    lu.assertEquals(candidate('aa'), false)\n    lu.assertEquals(candidate('abcd'),\
    \ true)\n    lu.assertEquals(candidate('aabb'), false)\n    lu.assertEquals(candidate('adb'),\
    \ true)\n    lu.assertEquals(candidate('xyy'), false)\n    lu.assertEquals(candidate('iopaxpoi'),\
    \ true)\n    lu.assertEquals(candidate('iopaxioi'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnw3fh7s.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptnw3fh7s.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
    \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppyur_dm0.lua:11:\
    \ expected: false, actual: nil\nstack traceback:\n\t/tmp/tmppyur_dm0.lua:11: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- You are given a string s.\n-- Your task is to check if the string is\
    \ happy or not.\n-- A string is happy if its length is at least 3 and every 3\
    \ consecutive letters are distinct\n-- For example:\nlocal function is_happy(s)\n\
    \    if string.len(s) < 3 then\n        return false\n    end\n    for i = 1,\
    \ string.len(s) - 2 do\n        if string.sub(s, i, i + 2) == string.sub(s, i\
    \ + 1, i + 3) then\n            return false\n        end\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = is_happy\n    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
    \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
    \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
    \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1zhg00k7.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1zhg00k7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822278
