name: HumanEval_88_sort_array
language: lua
prompt: "-- Given an array of non-negative integers, return a copy of the given array\
  \ after sorting,\n-- you will sort the given array in ascending order if the sum(\
  \ first index value, last index value) is odd,\n-- or sort it in descending order\
  \ if the sum( first index value, last index value) is even.\n-- Note:\n-- * don't\
  \ change the given array.\n-- Examples:\nlocal function sort_array(array)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_array\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({5}), {5})\n\
  \    lu.assertEquals(candidate({2, 4, 3, 0, 1, 5}), {0, 1, 2, 3, 4, 5})\n    lu.assertEquals(candidate({2,\
  \ 4, 3, 0, 1, 5, 6}), {6, 5, 4, 3, 2, 1, 0})\n    lu.assertEquals(candidate({2,\
  \ 1}), {1, 2})\n    lu.assertEquals(candidate({15, 42, 87, 32, 11, 0}), {0, 11,\
  \ 15, 32, 42, 87})\n    lu.assertEquals(candidate({21, 14, 23, 11}), {23, 21, 14,\
  \ 11})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local even_sum = 0\n    local odd_sum = 0\n    for i = 1, #array\
    \ do\n        if i % 2 == 0 then\n            even_sum = even_sum + array[i]\n\
    \        else\n            odd_sum = odd_sum + array[i]\n        end\n    end\n\
    \    local sum = even_sum + odd_sum\n    local function compare(a, b)\n      \
    \  if sum % 2 == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, compare)\n    return array\n\
    end", "  local function to_odd(a, b)\n    if ((a + b) % 2) == 0 then\n      return\
    \ a > b\n    else\n      return a < b\n    end\n  end\n  table.sort(array, to_odd)\n\
    \  return array\nend", "    local odd_indexes, even_indexes = {}, {}\n    for\
    \ i, v in ipairs(array) do\n        if (i + v) % 2 == 0 then\n            table.insert(even_indexes,\
    \ v)\n        else\n            table.insert(odd_indexes, v)\n        end\n  \
    \  end\n    table.sort(odd_indexes)\n    table.sort(even_indexes, function(a,\
    \ b) return a > b end)\n    local sorted_array = {}\n    for i, v in ipairs(array)\
    \ do\n        if (i + v) % 2 == 0 then\n            table.insert(sorted_array,\
    \ table.remove(even_indexes, 1))\n        else\n            table.insert(sorted_array,\
    \ table.remove(odd_indexes, 1))\n        end\n    end\n    return sorted_array\n\
    end", "  --[[\n  local array = {1, 1, 6, 5, 4, 3, 2, 3, 2, 4, 1, 5, 6, 6, 2, 5,\
    \ 1, 6, 4, 5, 2, 5, 4, 4, 2, 3, 2, 3, 3, 4, 2, 5, 4, 1, 2, 3, 1, 4, 2, 5, 2, 1,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5, 2, 5,\
    \ 2,", "  local odd = {}\n  local even = {}\n  local t = {}\n  for i, v in ipairs(array)\
    \ do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd,\
    \ v)\n    end\n  end\n  table.sort(odd)\n  table.sort(even, function(a, b) return\
    \ a > b end)\n  for i, v in ipairs(array) do\n    if v % 2 == 0 then\n      table.insert(t,\
    \ even[1])\n      table.remove(even, 1)\n    else\n      table.insert(t, odd[1])\n\
    \      table.remove(odd, 1)\n    end\n  end\n  return t\nend", "    local counter\
    \ = #array\n    while counter > 0 do\n        local min, min_index\n        for\
    \ i, v in ipairs(array) do\n            if not min or min > v then\n         \
    \       min = v\n                min_index = i\n            end\n        end\n\
    \        array[min_index] = false\n        if array[counter] then\n          \
    \  if (min_index + counter) % 2 == 0 then\n                array[counter], array[min_index]\
    \ = array[min_index], array[counter]\n            end\n        else\n        \
    \    array[min_index] = min\n        end\n        counter = counter - 1\n    end\n\
    \    return array\nend", "  local odd = {}\n  local even = {}\n  for i,v in ipairs(array)\
    \ do\n    if v % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd,\
    \ v)\n    end\n  end\n  table.sort(odd)\n  table.sort(even, function(a,b) return\
    \ a > b end)\n  for i,v in ipairs(odd) do\n    array[i] = v\n  end\n  for i,v\
    \ in ipairs(even) do\n    array[#odd + i] = v\n  end\n  return array\nend", " \
    \ if #array == 0 then return {} end\n  -- odd, sort in ascending order\n  if (array[1]\
    \ + array[#array]) % 2 == 1 then\n    table.sort(array)\n  -- even, sort in descending\
    \ order\n  else\n    table.sort(array, function(a, b) return a > b end)\n  end\n\
    \  return array\nend", "    local even_indexes = {}\n    local odd_indexes = {}\n\
    \    for i = 1, #array do\n        if i % 2 == 0 then\n            even_indexes[#even_indexes\
    \ + 1] = array[i]\n        else\n            odd_indexes[#odd_indexes + 1] = array[i]\n\
    \        end\n    end\n    table.sort(even_indexes)\n    table.sort(odd_indexes,\
    \ function(a, b) return a > b end)\n    for i = 1, #array do\n        if i % 2\
    \ == 0 then\n            array[i] = even_indexes[1]\n            table.remove(even_indexes,\
    \ 1)\n        else\n            array[i] = odd_indexes[1]\n            table.remove(odd_indexes,\
    \ 1)\n        end\n    end\n    return array\nend", "  -- your code here\nend",
  "  local l = #array\n  local front = 0\n  local back = l\n  local odds = {}\n  local\
    \ evens = {}\n  for i = 1, l do\n    if array[i] % 2 == 0 then\n      table.insert(evens,\
    \ array[i])\n    else\n      table.insert(odds, array[i])\n    end\n  end\n  table.sort(odds)\n\
    \  table.sort(evens, function(a, b) return a > b end)\n  if l % 2 == 0 then\n\
    \    back = back - 1\n  end\n  local new_array = {}\n  for i = 1, l / 2 do\n \
    \   table.insert(new_array, odds[i])\n    table.insert(new_array, evens[i])\n\
    \  end\n  return new_array\nend", "  local function sum(x, y)\n    return x +\
    \ y\n  end\n  local sum = sum(array[1], array[#array])\n  local order = sum %\
    \ 2 == 0 and 'asc' or 'desc'\n  local array = copy_and_change_order(array, order)\n\
    \  return array\nend", "  local len = #array\n  if len == 0 then return array\
    \ end\n  local sum = array[1] + array[len]\n  if sum % 2 == 0 then\n    table.sort(array,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(array, function(a,\
    \ b) return a < b end)\n  end\n  return array\nend\nassert(table.concat(sort_array({1,\
    \ 2, 3, 4, 5}), ',') == '2,4,3,5,1')\nassert(table.concat(sort_array({1, 3, 5,\
    \ 4, 2}), ',') == '1,3,5,2,4')\nassert(table.concat(sort_array({1, 2, 3, 4, 5,\
    \ 6}), ',') == '2,4,6,3,5,1')\nassert(table.concat(sort_array({1, 4, 2, 5, 3,\
    \ 6}), ',') == '1,4,3,5,2,6')\nassert(table.concat(sort_array({}), ',') == '')",
  "    local sum = 0\n    for i, v in ipairs(array) do\n        sum = sum + v\n  \
    \  end\n    table.sort(array, function(a, b)\n        if sum % 2 == 0 then\n \
    \           return a > b\n        else\n            return a < b\n        end\n\
    \    end)\n    return array\nend", "  local first = array[1]\n  local last = array[#array]\n\
    \  local sum = first + last\n  local sort_odd_even = sum % 2 == 0 and \"<\" or\
    \ \">\"\n  table.sort(array, function(a, b) return a > b end)\n  return array\n\
    end", "    local a={}\n    local b={}\n    for k,v in pairs(array) do\n      \
    \  if v%2==0 then\n            table.insert(a,v)\n        else\n            table.insert(b,v)\n\
    \        end\n    end\n    table.sort(a)\n    table.sort(b,function(a,b) return\
    \ a>b end)\n    local j=1\n    local k=1\n    for i=1,#array do\n        if array[i]%2==0\
    \ then\n            array[i]=a[j]\n            j=j+1\n        else\n         \
    \   array[i]=b[k]\n            k=k+1\n        end\n    end\n    return array\n\
    end\nprint(table.concat(sort_array({1,2,3,4,5,6,7,8,9}), \",\"))", "  local len\
    \ = #array\n  local odd = {}\n  local even = {}\n  local result = {}\n  for i\
    \ = 1, len do\n    if array[i] % 2 == 0 then\n      table.insert(even, array[i])\n\
    \    else\n      table.insert(odd, array[i])\n    end\n  end\n  table.sort(odd)\n\
    \  table.sort(even, function(a, b) return a > b end)\n  for i = 1, len do\n  \
    \  if i % 2 == 0 then\n      table.insert(result, even[1])\n      table.remove(even,\
    \ 1)\n    else\n      table.insert(result, odd[1])\n      table.remove(odd, 1)\n\
    \    end\n  end\n  return result\nend", "    local odd_array = {}\n    local even_array\
    \ = {}\n    local odd_array_size = 0\n    local even_array_size = 0\n    for i\
    \ = 1, #array do\n        if array[i] % 2 == 0 then\n            even_array_size\
    \ = even_array_size + 1\n            even_array[even_array_size] = array[i]\n\
    \        else\n            odd_array_size = odd_array_size + 1\n            odd_array[odd_array_size]\
    \ = array[i]\n        end\n    end\n    table.sort(odd_array)\n    table.sort(even_array,\
    \ function(a, b) return a > b end)\n    local result = {}\n    for i = 1, odd_array_size\
    \ do\n        result[i] = odd_array[i]\n    end\n    for i = 1, even_array_size\
    \ do\n        result[odd_array_size + i] = even_array[i]\n    end\n    return\
    \ result\nend\nassert(table.eq(sort_array({4, 2, 6, 1, 3, 5}), {2, 6, 4, 1, 3,\
    \ 5}))\nassert(table.eq(sort_array({2, 6, 8, 1, 3, 5}), {2, 6, 8, 1, 3, 5}))\n\
    assert(table.eq(sort_array({1, 3, 5, 7, 2, 4, 6, 8}), {2, 4, 6, 8, 1, 3, 5, 7}))\n\
    assert(table.eq(sort_array({1, 2, 3, 4, 5, 6, 7, 8}), {1, 3, 5, 7, 2, 4, 6, 8}))",
  "    local array_length = #array\n    local sum = array[1] + array[array_length]\n\
    \    local index = 1\n    local change = false\n    if sum % 2 == 0 then\n   \
    \     while index < array_length do\n            local j = index + 1\n       \
    \     while j <= array_length do\n                if array[index] < array[j] then\n\
    \                    local temp = array[index]\n                    array[index]\
    \ = array[j]\n                    array[j] = temp\n                    change\
    \ = true\n                end\n                j = j + 1\n            end\n  \
    \          if change then\n                change = false\n            else\n\
    \                index = index + 1\n            end\n        end\n    else\n \
    \       while index < array_length do\n            local j = index + 1\n     \
    \       while j <= array_length do\n                if array[index] > array[j]\
    \ then\n                    local temp = array[index]\n                    array[index]\
    \ = array[j]\n                    array[j] = temp\n                    change\
    \ = true\n                end\n                j = j + 1\n            end\n  \
    \          if change then\n                change = false\n            else\n\
    \                index = index + 1\n            end\n        end\n    end\n  \
    \  return array\nend", "  local sum = array[1] + array[#array]\n  if sum % 2 ==\
    \ 0 then\n    table.sort(array, function(a, b) return a > b end)\n  else\n   \
    \ table.sort(array)\n  end\n  return array\nend", "    local len=#array\n    if\
    \ len==0 then return end\n    local function qsort(array,l,r)\n        if l<r\
    \ then\n            local i,j,x=l,r,array[l]\n            while i<j do\n     \
    \           while i<j and array[j]>=x do j=j-1 end\n                if i<j then\
    \ array[i]=array[j] i=i+1 end\n                while i<j and array[i]<=x do i=i+1\
    \ end\n                if i<j then array[j]=array[i] j=j-1 end\n            end\n\
    \            array[i]=x\n            qsort(array,l,i-1)\n            qsort(array,i+1,r)\n\
    \        end\n    end\n    if (array[1]+array[len])%2==0 then\n        qsort(array,1,len)\n\
    \    else\n        qsort(array,1,len)\n        for i=1,len//2 do\n           \
    \ array[i],array[len-i+1]=array[len-i+1],array[i]\n        end\n    end\n    return\
    \ array\nend\nreturn sort_array", "  local isOdd = ((array[1] + array[#array])\
    \ % 2 == 1)\n  table.sort(array, function(a, b)\n    if isOdd then\n      return\
    \ a < b\n    else\n      return a > b\n    end\n  end)\n  return array\nend",
  "  local sum = array[1] + array[#array]\n  local comp = function(a, b)\n    return\
    \ (sum % 2 == 0 and a > b) or (sum % 2 ~= 0 and a < b)\n  end\n  return table.sort(array,\
    \ comp)\nend", "    local copy = {}\n    for i = 1, #array do\n        copy[i]\
    \ = array[i]\n    end\n    if #array == 0 then\n        return copy\n    end\n\
    \    local idx_sum = array[1] + array[#array]\n    local compare\n    if idx_sum\
    \ % 2 == 0 then\n        compare = function(a, b) return a > b end\n    else\n\
    \        compare = function(a, b) return a < b end\n    end\n    for i = 1, #copy\
    \ - 1 do\n        for j = i + 1, #copy do\n            if compare(copy[i], copy[j])\
    \ then\n                copy[i], copy[j] = copy[j], copy[i]\n            end\n\
    \        end\n    end\n    return copy\nend", "    table.sort(array, function(a,\
    \ b)\n        local x = array[1] + array[#array]\n        if x % 2 == 0 then\n\
    \            return a > b\n        else\n            return a < b\n        end\n\
    \    end)\n    return array\nend", "\nend", "    --sum( first index value, last\
    \ index value) is odd.\n    local count = 1\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        -- sort it in descending order\n        while\
    \ count < #array do\n            local i = count\n            while i > 1 and\
    \ array[i] > array[i - 1] do\n                array[i], array[i - 1] = array[i\
    \ - 1], array[i]\n                i = i - 1\n            end\n            count\
    \ = count + 1\n        end\n    else\n        -- sort it in ascending order\n\
    \        while count < #array do\n            local i = count\n            while\
    \ i > 1 and array[i] < array[i - 1] do\n                array[i], array[i - 1]\
    \ = array[i - 1], array[i]\n                i = i - 1\n            end\n     \
    \       count = count + 1\n        end\n    end\n    return array\nend", "   \
    \ local i = 1\n    local j = #array\n    local ai = array[i]\n    local aj = array[j]\n\
    \    local sum = ai + aj\n    local is_odd = (sum % 2 == 1)\n    local temp",
  "    local sum, sort\n    sum = 0\n    for i = 1, #array do\n        sum = sum +\
    \ array[i]\n    end\n    if sum % 2 == 0 then\n        sort = function(a, b)\n\
    \            return a > b\n        end\n    else\n        sort = function(a, b)\n\
    \            return a < b\n        end\n    end\n    table.sort(array, sort)\n\
    \    return array\nend", "    local function swap(t, i, j)\n        t[i], t[j]\
    \ = t[j], t[i]\n    end\n    local function sort(t, left, right)\n        if left\
    \ < right then\n            local temp = t[left]\n            local i = left +\
    \ 1\n            local j = right\n            while i <= j do\n              \
    \  while i <= j and t[i] < temp do\n                    i = i + 1\n          \
    \      end\n                while i <= j and t[j] > temp do\n                \
    \    j = j - 1\n                end\n                if i <= j then\n        \
    \            swap(t, i, j)\n                    i = i + 1\n                  \
    \  j = j - 1\n                end\n            end\n            swap(t, left,\
    \ j)\n            sort(t, left, j - 1)\n            sort(t, j + 1, right)\n  \
    \      end\n    end\n    if array and #array > 1 then\n        local left = 1\n\
    \        local right = #array\n        if (array[left] + array[right]) % 2 ==\
    \ 0 then\n            while left < right do\n                swap(array, left,\
    \ right)\n                left = left + 1\n                right = right - 1\n\
    \            end\n        end\n        sort(array, left, right)\n    end\n   \
    \ return array\nend", "    local sums_of_indexes = {}\n    for i = 1, #array do\n\
    \        sums_of_indexes[i] = array[i] + array[#array - i + 1]\n    end\n    local\
    \ new_array = {}\n    for i = 1, #array do\n        local min_or_max_index\n \
    \       local min_or_max_value\n        for j = 1, #array do\n            if sums_of_indexes[j]\
    \ then\n                local value = sums_of_indexes[j]\n                if not\
    \ min_or_max_value or\n                   (sums_of_indexes[i] % 2 == 0 and value\
    \ > min_or_max_value) or\n                   (sums_of_indexes[i] % 2 == 1 and\
    \ value < min_or_max_value) then\n                    min_or_max_index = j\n \
    \                   min_or_max_value = value\n                end\n          \
    \  end\n        end\n        new_array[i] = array[min_or_max_index]\n        sums_of_indexes[min_or_max_index]\
    \ = nil\n    end\n    return new_array\nend", "    local result = {}\n    for\
    \ i = 1, #array do\n        result[i] = array[i]\n    end\n    if #array > 0 then\n\
    \        if (result[1] + result[#result]) % 2 == 0 then\n            table.sort(result,\
    \ function(a, b) return a > b end)\n        else\n            table.sort(result,\
    \ function(a, b) return a < b end)\n        end\n    end\n    return result\n\
    end", "    if array == nil or #array == 0 then\n        return array\n    end\n\
    \    local function partit(arr, lo, hi)\n        local i = lo + 1\n        local\
    \ j = hi\n        local pivot = arr[lo]\n        while true do\n            while\
    \ arr[i] < pivot do\n                i = i + 1\n            end\n            while\
    \ arr[j] > pivot do\n                j = j - 1\n            end\n            if\
    \ i >= j then\n                break\n            end\n            arr[i], arr[j]\
    \ = arr[j], arr[i]\n            i = i + 1\n            j = j - 1\n        end\n\
    \        arr[lo], arr[j] = arr[j], arr[lo]\n        return j\n    end\n    local\
    \ function quicksort(arr, lo, hi)\n        if lo < hi then\n            local\
    \ j = partit(arr, lo, hi)\n            quicksort(arr, lo, j - 1)\n           \
    \ quicksort(arr, j + 1, hi)\n        end\n    end\n    local function reverse(arr,\
    \ lo, hi)\n        while lo < hi do\n            arr[lo], arr[hi] = arr[hi], arr[lo]\n\
    \            lo = lo + 1\n            hi = hi - 1\n        end\n    end\n    local\
    \ sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n        quicksort(array,\
    \ 1, #array)\n        reverse(array, 1, #array)\n    else\n        quicksort(array,\
    \ 1, #array)\n    end\n    return array\nend", "  local sum = array[1] + array[#array]\n\
    \  table.sort(array, function(a, b)\n    if sum % 2 == 0 then\n      return a\
    \ > b\n    else\n      return a < b\n    end\n  end)\n  return array\nend", " \
    \ if array:len() < 2 then return array end\n  local function sort(x, y)\n    local\
    \ t = array[1] + array[-1]\n    return (t % 2 == 0 and x > y) or (t % 2 == 1 and\
    \ x < y)\n  end\n  return table.sort(array, sort)\nend", "    local first, last\
    \ = array[1], array[#array]\n    local ascending = (first + last) % 2 == 1\n \
    \   table.sort(array, function(a, b)\n        if ascending then\n            return\
    \ a < b\n        else\n            return a > b\n        end\n    end)\n    return\
    \ array\nend", "  local function odd_or_even(num)\n    return num % 2 == 0\n \
    \ end\n  local function sum_index(arr)\n    return arr[1] + arr[#arr]\n  end\n\
    \  local function sort_descending(a, b)\n    return a > b\n  end\n  local function\
    \ sort_ascending(a, b)\n    return a < b\n  end\n  if odd_or_even(sum_index(array))\
    \ then\n    table.sort(array, sort_descending)\n  else\n    table.sort(array,\
    \ sort_ascending)\n  end\n  return array\nend", "  -- your code here\n  return\
    \ {}\nend", "    local left, right = array[1], array[#array]\n    local sum =\
    \ left + right\n    local sorted_array = {}\n    if sum % 2 == 0 then\n      \
    \  table.sort(array, function(a, b) return a > b end)\n    else\n        table.sort(array,\
    \ function(a, b) return a < b end)\n    end\n    for k, v in ipairs(array) do\n\
    \        sorted_array[k] = v\n    end\n    return sorted_array\nend", "    local\
    \ even = false\n    local odd = false\n    for _, v in ipairs(array) do\n    \
    \    if v % 2 == 0 then\n            even = true\n        else\n            odd\
    \ = true\n        end\n    end\n    if even and odd then\n        if (array[1]\
    \ + array[#array]) % 2 == 0 then\n            table.sort(array, function(a, b)\
    \ return a > b end)\n        else\n            table.sort(array, function(a, b)\
    \ return a < b end)\n        end\n    end\n    return array\nend", "    local\
    \ helper_fn = function(a, b)\n        if a + b == 1 then\n            return a\
    \ > b\n        else\n            return a < b\n        end\n    end\n    return\
    \ table.sort(array, helper_fn)\nend", "  local f = function(a, b)\n    local sum\
    \ = a + b\n    if sum % 2 == 0 then\n      return a > b\n    else\n      return\
    \ a < b\n    end\n  end\n  table.sort(array, f)\n  return array\nend", "  local\
    \ first = array[1]\n  local last = array[#array]\n  local sum = first + last\n\
    \  return sum % 2 == 0 and table.sort(array, function(a, b) return a > b end)\
    \ or table.sort(array)\nend", "    local tmp = {}\n    if array and #array > 0\
    \ then\n        local sum = array[1] + array[#array]\n        if sum % 2 == 0\
    \ then\n            for i = 1, #array do\n                table.insert(tmp, array[i])\n\
    \            end\n            table.sort(tmp, function(a, b) return a > b end)\n\
    \        else\n            for i = 1, #array do\n                table.insert(tmp,\
    \ array[i])\n            end\n            table.sort(tmp)\n        end\n    end\n\
    \    return tmp\nend", "\nend", "    local function asc(a, b)\n        return\
    \ a < b\n    end\n    local function desc(a, b)\n        return a > b\n    end\n\
    \    local is_even = ((array[1] + array[#array]) % 2) == 0\n    table.sort(array,\
    \ is_even and desc or asc)\n    return array\nend", "    local tmp\n    for i\
    \ = 1, #array do\n        for j = i + 1, #array do\n            if ((array[i]\
    \ + array[#array]) % 2 ~= 0 and array[i] > array[j]) or ((array[i] + array[#array])\
    \ % 2 == 0 and array[i] < array[j]) then\n                tmp = array[i]\n   \
    \             array[i] = array[j]\n                array[j] = tmp\n          \
    \  end\n        end\n    end\n    return array\nend\nassert(compare_tables(sort_array({3,\
    \ 2, 4, 1}), {4, 2, 1, 3}))\nassert(compare_tables(sort_array({3, 2, 1, 4}), {4,\
    \ 3, 2, 1}))\nassert(compare_tables(sort_array({3, 2, 2, 4}), {4, 3, 2, 2}))\n\
    assert(compare_tables(sort_array({3, 2, 2, 1}), {2, 2, 1, 3}))\nassert(compare_tables(sort_array({-5,\
    \ 1, -1, 2, 0, -3}), {-3, 2, -1, -5, 0, 1}))\nprint(\"DONE!\")", "  --# Implement\
    \ your function here\nend", "    local function comparator(a, b)\n        if ((a\
    \ + b) % 2) == 0 then\n            return a > b\n        else\n            return\
    \ a < b\n        end\n    end\n    table.sort(array, comparator)\n    return array\n\
    end", "  local f = function(a, b)\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n      return a > b\n    else\n      return a < b\n\
    \    end\n  end\n  table.sort(array, f)\n  return array\nend", "    local function\
    \ sum_even(a, b)\n        return a + b\n    end\n    local function sum_odd(a,\
    \ b)\n        return b - a\n    end\n    local l = #array\n    local s = array[1]\
    \ + array[l]\n    local fun = s % 2 == 0 and sum_even or sum_odd\n    return table.sort(array,\
    \ fun)\nend", "\nend", "    local front = 1\n    local back = #array\n    local\
    \ copy = {}\n    local is_even = (array[front] + array[back]) % 2 == 0\n    while\
    \ front <= back do\n        if is_even then\n            copy[#copy + 1] = array[back]\n\
    \            back = back - 1\n        else\n            copy[#copy + 1] = array[front]\n\
    \            front = front + 1\n        end\n    end\n    return copy\nend", " \
    \   local function sum(t)\n        local s = 0\n        for i, v in ipairs(t)\
    \ do\n            s = s + v\n        end\n        return s\n    end\n    local\
    \ function qsort(t)\n        if #t <= 1 then\n            return t\n        end\n\
    \        local tmp = {}\n        local pivot = t[1]\n        for i = 2, #t do\n\
    \            if t[i] < pivot then\n                table.insert(tmp, t[i])\n \
    \           end\n        end\n        table.insert(tmp, pivot)\n        for i\
    \ = 2, #t do\n            if t[i] >= pivot then\n                table.insert(tmp,\
    \ t[i])\n            end\n        end\n        return tmp\n    end\n    if sum(array)\
    \ % 2 == 0 then\n        return qsort(array)\n    else\n        local t = qsort(array)\n\
    \        local r = {}\n        for i = #t, 1, -1 do\n            table.insert(r,\
    \ t[i])\n        end\n        return r\n    end\nend\nassert(sort_array({1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9}) == {1, 3, 5, 7, 9, 8, 6, 4, 2})\nassert(sort_array({1,\
    \ 11, 2, 10, 3, 12, 4, 5, 6, 7, 8, 9}) == {1, 3, 5, 7, 9, 11, 12, 10, 8, 6, 4,\
    \ 2})\nassert(sort_array({1, 2, 3, 4, 5, 6, 7, 8, 9, 0}) == {0, 2, 4, 6, 8, 9,\
    \ 7, 5, 3, 1})\nassert(sort_array({1, 2, 3, 5, 6, 7, 8, 9, 10, 0}) == {0, 2, 4,\
    \ 6, 8, 10, 9, 7, 5, 3, 1})\nassert(sort_array({1, 11, 2, 10, 3, 12, 4, 15, 6,\
    \ 7, 8, 9}) == {1, 3, 5, 7, 9, 11, 15, 12, 10, 8, 6, 4})\n", "    local sum =\
    \ array[1] + array[#array]\n    local asc = sum % 2 == 1", "    local t = table.pack(table.unpack(array))\n\
    \    local sum = (t[1] + t[#t]) % 2\n    --print(unpack(t))\n    if sum ~= 0 then\n\
    \        table.sort(t, function(a, b) return a < b end)\n    else\n        table.sort(t,\
    \ function(a, b) return a > b end)\n    end\n    return t\nend", "  if #array\
    \ <= 1 then return array end\n  local sum = array[1] + array[#array]\n  table.sort(array,\
    \ function(a, b)\n    if sum % 2 == 0 then\n      return a > b\n    else\n   \
    \   return a < b\n    end\n  end)\n  return array\nend", "    if #array % 2 ==\
    \ 0 then\n        table.sort(array, function(a, b) return a > b end)\n    else\n\
    \        table.sort(array, function(a, b) return a < b end)\n    end\n    return\
    \ array\nend", "    local odd = {}\n    local even = {}\n    local array = array\n\
    \    for i = 1, #array do\n        if array[i] % 2 == 0 then\n            table.insert(even,\
    \ array[i])\n        else\n            table.insert(odd, array[i])\n        end\n\
    \    end\n    local sortodd = {}\n    local sorteven = {}\n    for i = 1, #odd\
    \ do\n        sortodd[i] = table.remove(odd, 1)\n    end\n    for i = 1, #even\
    \ do\n        sorteven[i] = table.remove(even, 1)\n    end\n    table.sort(sortodd)\n\
    \    table.sort(sorteven)\n    table.sort(sorteven, function(a, b) return a >\
    \ b end)\n    if #sortodd % 2 == 0 then\n        table.sort(sortodd, function(a,\
    \ b) return a > b end)\n    end\n    for i = 1, #sortodd do\n        table.insert(array,\
    \ sortodd[i])\n    end\n    for i = 1, #sorteven do\n        table.insert(array,\
    \ sorteven[i])\n    end\n    return array\nend", "  local len = #array\n  local\
    \ sum = array[1] + array[len]\n  if sum % 2 == 0 then\n    -- even\n    table.sort(array,\
    \ function(a, b) return a > b end)\n  else\n    -- odd\n    table.sort(array,\
    \ function(a, b) return a < b end)\n  end\n  return array\nend", "\tlocal a, b\
    \ = array[1], array[#array]\n\tlocal index = (a + b) % 2 == 0 and -1 or 1\n\t\
    local function cmp(a, b)\n\t\treturn (a + b) % 2 == 0 and a < b or a > b\n\tend\n\
    \ttable.sort(array, cmp)\n\treturn array\nend", "    local sum, r = array[1] +\
    \ array[#array], array\n    for i = 2, #array do\n        for j = #array, i, -1\
    \ do\n            if r[j - 1] > r[j] then\n                r[j - 1], r[j] = r[j],\
    \ r[j - 1]\n            end\n        end\n    end\n    if (sum % 2 == 0) then\n\
    \        for i = 1, #array / 2 do\n            r[i], r[#array - i + 1] = r[#array\
    \ - i + 1], r[i]\n        end\n    end\n    return r\nend", "  local s = 0\n \
    \ for k,v in pairs(array) do\n    s = s + v\n  end\n  if s % 2 == 0 then\n   \
    \ table.sort(array, function(a,b) return a>b end)\n  else\n    table.sort(array,\
    \ function(a,b) return a<b end)\n  end\n  return array\nend", "  if #array ==\
    \ 0 then return {} end\n  local i1, i2 = 1, #array\n  local sum = array[i1] +\
    \ array[i2]\n  if sum % 2 == 0 then\n    i1, i2 = i2, i1\n  end\n  for i = 2,\
    \ #array - 1 do\n    local v = array[i]\n    if i1 == i then\n      if v > array[i1\
    \ - 1] then\n        i1 = i1 - 1\n      elseif v < array[i1 + 1] then\n      \
    \  i1 = i1 + 1\n      end\n    elseif i2 == i then\n      if v > array[i2 - 1]\
    \ then\n        i2 = i2 - 1\n      elseif v < array[i2 + 1] then\n        i2 =\
    \ i2 + 1\n      end\n    elseif i1 == i - 1 then\n      if v > array[i1 - 1] then\n\
    \        i1 = i1 - 1\n      elseif v < array[i1 + 1] then\n        i1 = i1 + 1\n\
    \      end\n    elseif i2 == i - 1 then\n      if v > array[i2 - 1] then\n   \
    \     i2 = i2 - 1\n      elseif v < array[i2 + 1] then\n        i2 = i2 + 1\n\
    \      end\n    elseif i1 == i + 1 then\n      if v > array[i1 - 1] then\n   \
    \     i1 = i1 - 1\n      elseif v < array[i1 + 1] then\n        i1 = i1 + 1\n\
    \      end\n    elseif i2 == i + 1 then\n      if v > array[i2 - 1] then\n   \
    \     i2 = i2 - 1\n      elseif v < array[i2 + 1] then\n        i2 = i2 + 1\n\
    \      end\n    end\n  end\n  return {array[i1], array[i2]}\nend", "  local odd_ind\
    \ = {}\n  local even_ind = {}\n  local odd_arr = {}\n  local even_arr = {}\n \
    \ for i = 1, #array do\n    if array[i] % 2 == 0 then\n      table.insert(even_ind,i)\n\
    \      table.insert(even_arr,array[i])\n    else\n      table.insert(odd_ind,i)\n\
    \      table.insert(odd_arr,array[i])\n    end\n  end\n  table.sort(odd_arr)\n\
    \  table.sort(even_arr,function(a,b) return a>b end)\n  for i = 1, #odd_ind do\n\
    \    array[odd_ind[i]] = odd_arr[i]\n  end\n  for i = 1, #even_ind do\n    array[even_ind[i]]\
    \ = even_arr[i]\n  end\n  return array\nend", "    local last = #array\n    local\
    \ function is_odd(idx)\n        return idx % 2 == 1\n    end\n    local function\
    \ is_even(idx)\n        return idx % 2 == 0\n    end\n    local function is_even_sum(idx)\n\
    \        return (idx + last) % 2 == 0\n    end\n    local function is_odd_sum(idx)\n\
    \        return (idx + last) % 2 == 1\n    end\n    local function swap(idx, jdx)\n\
    \        array[idx], array[jdx] = array[jdx], array[idx]\n    end\n    local function\
    \ sort_ascending(idx)\n        for jdx = idx + 1, last do\n            if array[idx]\
    \ > array[jdx] then\n                swap(idx, jdx)\n            end\n       \
    \ end\n    end\n    local function sort_descending(idx)\n        for jdx = idx\
    \ + 1, last do\n            if array[idx] < array[jdx] then\n                swap(idx,\
    \ jdx)\n            end\n        end\n    end\n    for idx = 1, last do\n    \
    \    if is_odd(idx) then\n            if is_even_sum(idx) then\n             \
    \   sort_ascending(idx)\n            else\n                sort_descending(idx)\n\
    \            end\n        else\n            if is_even_sum(idx) then\n       \
    \         sort_descending(idx)\n            else\n                sort_ascending(idx)\n\
    \            end\n        end\n    end\n    return array\nend\nprint(#(sort_array({1,\
    \ 2, 3, 4, 5})))\nprint(#(sort_array({5, 3, 2, 8, 1, 4})))\nprint(#(sort_array({5,\
    \ 3, 1, 8, 0})))\nprint(#(sort_array({5, 3, 1, -8, 0})))", "\tlocal len = #array\n\
    \tlocal l, r = 1, len\n\tlocal temp = {}\n\tlocal even = (array[1] + array[len])\
    \ % 2 == 0\n\twhile l <= r do\n\t\tlocal a = array[l]\n\t\tlocal b = array[r]\n\
    \t\tif even then\n\t\t\tif a < b then\n\t\t\t\ttemp[#temp + 1] = b\n\t\t\t\tr\
    \ = r - 1\n\t\t\telse\n\t\t\t\ttemp[#temp + 1] = a\n\t\t\t\tl = l + 1\n\t\t\t\
    end\n\t\telse\n\t\t\tif a > b then\n\t\t\t\ttemp[#temp + 1] = b\n\t\t\t\tr = r\
    \ - 1\n\t\t\telse\n\t\t\t\ttemp[#temp + 1] = a\n\t\t\t\tl = l + 1\n\t\t\tend\n\
    \t\tend\n\tend\n\tfor i = 1, len do\n\t\tarray[i] = temp[i]\n\tend\n\treturn array\n\
    end\nassert(equals(sort_array({6, 2, 3, 4, 5}), {2, 5, 3, 4, 6}))\nassert(equals(sort_array({6,\
    \ 2, 3, 4, 5, 1}), {1, 5, 3, 4, 6, 2}))\nassert(equals(sort_array({0, 1, 2, 3,\
    \ 4, 5}), {5, 1, 3, 4, 0, 2}))\nassert(equals(sort_array({0, 1, 2, 3, 4, 5, 6}),\
    \ {5, 1, 3, 4, 0, 2, 6}))", "  local copy_array = tlutils.copy_array(array)\n\
    \  local need_sort = true\n  local sum = 0\n  for i = 1, #copy_array do\n    sum\
    \ = sum + copy_array[i]\n  end\n  if sum % 2 == 0 then\n    need_sort = false\n\
    \  end\n  table.sort(copy_array, function(a, b)\n    if need_sort then\n     \
    \ return a > b\n    else\n      return a < b\n    end\n  end)\n  return copy_array\n\
    end", end, "  local function compare(left, right)\n    local sum = left + right\n\
    \    if sum % 2 == 0 then\n      return left > right\n    else\n      return left\
    \ < right\n    end\n  end\n  local copy = table.copy(array)\n  table.sort(copy,\
    \ compare)\n  return copy\nend", "  local function sorter(a, b)\n    local a_sum\
    \ = a[1] + a[#a]\n    local b_sum = b[1] + b[#b]\n    if a_sum == b_sum then\n\
    \      return a < b\n    elseif a_sum % 2 == 0 then\n      return false\n    elseif\
    \ b_sum % 2 == 0 then\n      return true\n    else\n      return a_sum < b_sum\n\
    \    end\n  end\n  local result = table.copy(array)\n  table.sort(result, sorter)\n\
    \  return result\nend", "  local function array_sum(array)\n    local result =\
    \ 0\n    for _, v in ipairs(array) do\n      result = result + v\n    end\n  \
    \  return result\n  end\n  local result = {}\n  for i, v in ipairs(array) do\n\
    \    result[i] = v\n  end\n  if array_sum(array) % 2 == 0 then\n    table.sort(result,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(result, function(a,\
    \ b) return a < b end)\n  end\n  return result\nend", "    local total = 0\n \
    \   for i = 1, #array do\n        total = total + array[i]\n    end\n    if total\
    \ % 2 == 0 then\n        -- \u5076\u6570\u500B\u306A\u3089\u964D\u9806\u306B\u30BD\
    \u30FC\u30C8\n        table.sort(array, function(a, b) return a > b end)\n   \
    \ else\n        -- \u5947\u6570\u500B\u306A\u3089\u6607\u9806\u306B\u30BD\u30FC\
    \u30C8\n        table.sort(array, function(a, b) return a < b end)\n    end\n\
    \    return array\nend", "    local l = #array\n    local t = {}\n    for i =\
    \ 1, l do\n        local f = (array[1] + array[l]) % 2\n        local c = 1\n\
    \        for _, v in ipairs(array) do\n            if not t[c] then\n        \
    \        t[c] = v\n            elseif ((f == 1 and t[c] > v) or (f == 0 and t[c]\
    \ < v)) then\n                local p = c\n                while p > 0 and ((f\
    \ == 1 and t[p] > v) or (f == 0 and t[p] < v)) do\n                    t[p + 1]\
    \ = t[p]\n                    p = p - 1\n                end\n               \
    \ t[p + 1] = v\n            else\n                t[c + 1] = v\n            end\n\
    \            c = c + 1\n        end\n        array = t\n        t = {}\n    end\n\
    \    return array\nend", "  return {}\nend", "    local sum = 0\n    for i = 1,\
    \ #array do\n        sum = sum + array[i]\n    end\n    if sum % 2 == 0 then\n\
    \        table.sort(array, function(x, y) return x > y end)\n    else\n      \
    \  table.sort(array, function(x, y) return x < y end)\n    end\n    return array\n\
    end", "    return {}\nend", "    local odds = {}\n    local evens = {}\n    local\
    \ totals = {}\n    local results = {}\n    for i = 1, #array do\n        if i\
    \ % 2 == 0 then\n            table.insert(evens, array[i])\n        else\n   \
    \         table.insert(odds, array[i])\n        end\n    end\n    local even_sum\
    \ = 0\n    local odd_sum = 0\n    for i = 1, #evens do\n        even_sum = even_sum\
    \ + evens[i]\n    end\n    for i = 1, #odds do\n        odd_sum = odd_sum + odds[i]\n\
    \    end\n    local total_sum = even_sum + odd_sum\n    if total_sum % 2 == 0\
    \ then\n        table.sort(evens, function(a, b) return a > b end)\n        table.sort(odds,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(evens)\n    \
    \    table.sort(odds)\n    end\n    table.insert(totals, odds)\n    table.insert(totals,\
    \ evens)\n    for i = 1, #totals do\n        for j = 1, #totals[i] do\n      \
    \      table.insert(results, totals[i][j])\n        end\n    end\n    return results\n\
    end", "    local sum = array[1] + array[#array]\n    local target = 1\n    if\
    \ sum % 2 == 0 then\n        target = #array\n    end\n    local mark = 1\n  \
    \  while mark ~= target do\n        local mark_value = array[mark]\n        local\
    \ tmp = array[mark]\n        local i = mark + 1\n        while i <= #array do\n\
    \            if tmp < array[i] then\n                array[mark] = array[i]\n\
    \                array[i] = tmp\n                tmp = array[mark]\n         \
    \   end\n            i = i + 1\n        end\n        mark = mark + 1\n    end\n\
    \    return array\nend", "    local first = array[1]\n    local last = array[#array]\n\
    \    if (first + last) % 2 == 0 then\n        table.sort(array, function(a, b)\
    \ return a > b end)\n    else\n        table.sort(array)\n    end\n    return\
    \ array\nend", "  return {}\nend\nreturn sort_array", "    local ret = {}\n  \
    \  for i = 1, #array do\n        ret[i] = array[i]\n    end\n    local a = array[1]\n\
    \    local b = array[#array]\n    if (a + b) % 2 == 0 then\n        table.sort(ret,\
    \ function(x, y) return x > y end)\n    else\n        table.sort(ret, function(x,\
    \ y) return x < y end)\n    end\n    return ret\nend", "    local sum = array[1]\
    \ + array[#array]\n    local odd = false\n    if sum % 2 == 1 then\n        odd\
    \ = true\n    end\n    local newArray = table.clone(array)\n    table.sort(newArray,\
    \ function(a, b)\n        if odd then\n            return a > b\n        else\n\
    \            return a < b\n        end\n    end)\n    return newArray\nend", " \
    \ local function sort(a, b)\n    local n = a + b\n    return n % 2 == 0 and a\
    \ > b or a < b\n  end\n  return array:sort(sort)\nend", end, "    local sum =\
    \ 0\n    for i, v in ipairs(array) do\n        sum = sum + v\n    end\n    local\
    \ is_odd = sum % 2 ~= 0\n    table.sort(array, function(a, b)\n        if is_odd\
    \ then\n            return a < b\n        else\n            return a > b\n   \
    \     end\n    end)\n    return array\nend", "    local n = #array\n    local\
    \ d = (array[1] + array[n]) % 2\n    local sorted = table.copy(array)\n    table.sort(sorted,\
    \ function(a, b)\n        if d == (a + b) % 2 then\n            return a < b\n\
    \        else\n            return d == 1\n        end\n    end)\n    return sorted\n\
    end", "    return {123, 456, 789}\nend", "    if #array <= 1 then\n        return\
    \ array\n    end\n    local odd_indexes = {}\n    local even_indexes = {}\n  \
    \  for i, v in ipairs(array) do\n        if i % 2 == 0 then\n            table.insert(even_indexes,\
    \ v)\n        else\n            table.insert(odd_indexes, v)\n        end\n  \
    \  end\n    table.sort(odd_indexes)\n    table.sort(even_indexes, function(a,\
    \ b) return a > b end)\n    local result = {}\n    for i, v in ipairs(array) do\n\
    \        if i % 2 == 0 then\n            table.insert(result, even_indexes[#even_indexes])\n\
    \            table.remove(even_indexes, #even_indexes)\n        else\n       \
    \     table.insert(result, odd_indexes[#odd_indexes])\n            table.remove(odd_indexes,\
    \ #odd_indexes)\n        end\n    end\n    return result\nend", "  local new_array\
    \ = table.clone(array)\n  local size = #new_array\n  local i, j\n  if (new_array[1]\
    \ + new_array[size]) % 2 == 0 then\n    table.sort(new_array, function(a, b) return\
    \ a > b end)\n  else\n    table.sort(new_array, function(a, b) return a < b end)\n\
    \  end\n  return new_array\nend", "  local temp\n  local i = 0\n  if (array[1]\
    \ + array[#array]) % 2 == 0 then\n    while i <= #array do\n      j = i + 1\n\
    \      while j <= #array do\n        if array[i] < array[j] then\n          temp\
    \ = array[i]\n          array[i] = array[j]\n          array[j] = temp\n     \
    \   end\n        j = j + 1\n      end\n      i = i + 1\n    end\n  else\n    while\
    \ i <= #array do\n      j = i + 1\n      while j <= #array do\n        if array[i]\
    \ > array[j] then\n          temp = array[i]\n          array[i] = array[j]\n\
    \          array[j] = temp\n        end\n        j = j + 1\n      end\n      i\
    \ = i + 1\n    end\n  end\n  return array\nend", "  if #array < 2 then return\
    \ array end\n  local new_array = {}\n  local sum_even_odd\n  for i,v in ipairs(array)\
    \ do\n    if new_array[i] == nil then new_array[i] = {} end\n    new_array[i]\
    \ = v\n  end\n  sum_even_odd = (new_array[1] + new_array[#new_array]) % 2\n  for\
    \ i=1,#new_array do\n    for j=i+1,#new_array do\n      if sum_even_odd == 0 then\n\
    \        if new_array[i] < new_array[j] then\n          new_array[i], new_array[j]\
    \ = new_array[j], new_array[i]\n        end\n      else\n        if new_array[i]\
    \ > new_array[j] then\n          new_array[i], new_array[j] = new_array[j], new_array[i]\n\
    \        end\n      end\n    end\n  end\n  return new_array\nend", "\nend", " \
    \   local function sort_asc(a, b)\n        return a < b\n    end\n    local function\
    \ sort_desc(a, b)\n        return a > b\n    end\n    local function sum_of_first_and_last(array)\n\
    \        return array[1] + array[#array]\n    end\n    local is_even = sum_of_first_and_last(array)\
    \ % 2 == 0\n    local copy = {}\n    for i, v in ipairs(array) do\n        copy[i]\
    \ = v\n    end\n    if is_even then\n        table.sort(copy, sort_desc)\n   \
    \ else\n        table.sort(copy, sort_asc)\n    end\n    return copy\nend", " \
    \ local odd_indices = {}\n  local even_indices = {}\n  for i, v in ipairs(array)\
    \ do\n    if v % 2 == 0 then\n      table.insert(even_indices, i)\n    else\n\
    \      table.insert(odd_indices, i)\n    end\n  end\n  if #odd_indices % 2 ==\
    \ 0 then\n    table.sort(odd_indices)\n    table.sort(even_indices, function(a,\
    \ b) return a > b end)\n  else\n    table.sort(odd_indices, function(a, b) return\
    \ a > b end)\n    table.sort(even_indices)\n  end\n  local result = {}\n  for\
    \ i, v in ipairs(odd_indices) do\n    result[v] = array[v]\n  end\n  for i, v\
    \ in ipairs(even_indices) do\n    result[v] = array[v]\n  end\n  return result\n\
    end", "    local sum = 0\n    for k, v in pairs(array) do\n        sum = sum +\
    \ k + v\n    end\n    if sum % 2 == 0 then\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(array, function(a, b) return\
    \ a < b end)\n    end\n    return array\nend", "    if #array == 0 then\n    \
    \    return array\n    end\n    local sum = array[1] + array[#array]\n    if sum\
    \ % 2 == 0 then\n        table.sort(array, function(a, b) return a > b end)\n\
    \    else\n        table.sort(array, function(a, b) return a < b end)\n    end\n\
    \    return array\nend", "  -- your code here\n  local first = array[1]\n  local\
    \ last = array[#array]\n  local res = {}\n  if (first + last) % 2 == 0 then\n\
    \    for i=1,#array do\n      res[i] = array[#array-i+1]\n    end\n  else\n  \
    \  for i=1,#array do\n      res[i] = array[i]\n    end\n  end\n  return res\n\
    end", "    table.sort(array, function(a, b)\n        if (a % 2 == 0 and b % 2\
    \ == 0) or (a % 2 ~= 0 and b % 2 ~= 0) then\n            return a < b\n      \
    \  else\n            return a > b\n        end\n    end)\n    return array\nend",
  "\nend", "    if #array == 0 then\n        return {}\n    end\n    local odd_sum,\
    \ even_sum = 0, 0\n    for i = 1, #array do\n        if array[i] % 2 == 0 then\n\
    \            even_sum = even_sum + array[i]\n        else\n            odd_sum\
    \ = odd_sum + array[i]\n        end\n    end\n    local sorted_array = {}\n  \
    \  if odd_sum + array[1] < even_sum + array[#array] then\n        for i = 1, #array\
    \ do\n            sorted_array[i] = array[#array - i + 1]\n        end\n    else\n\
    \        for i = 1, #array do\n            sorted_array[i] = array[i]\n      \
    \  end\n    end\n    table.sort(sorted_array)\n    return sorted_array\nend",
  "  local e = array[#array]\n  local b = array[1]\n  local t = (e + b) % 2\n  local\
    \ m = {}\n  for k, v in ipairs(array) do\n    m[k] = v\n  end\n  if t == 0 then\n\
    \    table.sort(m, function(a, b) return a > b end)\n  else\n    table.sort(m,\
    \ function(a, b) return a < b end)\n  end\n  return m\nend", "    local sum =\
    \ array[1] + array[#array]\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend", "\nend", "    return\
    \ #array == 0 and {} or\n            {{descend = function(a, b) return a > b end,\n\
    \            ascend = function(a, b) return a < b end}[(array[1] + array[#array])\
    \ % 2 == 0 and 'descend' or 'ascend'](table.unpack(array))}\nend", "    local\
    \ sum = array[1] + array[#array]\n    table.sort(array, function(a, b) return\
    \ sum % 2 == 0 and a > b or a < b end)\n    return array\nend", "    local sum_arr\
    \ = table.array_sum(array)\n    if sum_arr % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend", "    local get_sum =\
    \ function(array)\n        local sum = 0\n        for _, v in ipairs(array) do\n\
    \            sum = sum + v\n        end\n        return sum\n    end\n    local\
    \ total = get_sum(array)\n    local get_reverse_order = function(val)\n      \
    \  return val % 2 == 0\n    end\n    local sort_func = function(a, b)\n      \
    \  return get_reverse_order(total) and (a > b) or (a < b)\n    end\n    table.sort(array,\
    \ sort_func)\n    return array\nend", "    local first, last = array[1], array[#array]\n\
    \    local sum = first + last\n    local sorted = {}\n    for k,v in pairs(array)\
    \ do sorted[k] = v end\n    table.sort(sorted, function(a,b)\n        return sum\
    \ % 2 == 0 and a > b or a < b\n    end)\n    return sorted\nend\nreturn {\n  \
    \  sort_array = sort_array,\n}", "    if #array == 0 then\n        return {}\n\
    \    end\n    if #array == 1 then\n        return array\n    end\n    local odd,\
    \ even = {}\n    local s = array[1] + array[#array]\n    local f = s % 2 == 0\
    \ and 1 or -1\n    local function juge(a, b)\n        return f * (a - b)\n   \
    \ end\n    for i, v in ipairs(array) do\n        if v % 2 == 0 then\n        \
    \    table.insert(even, v)\n        else\n            table.insert(odd, v)\n \
    \       end\n    end\n    table.sort(odd, juge)\n    table.sort(even, juge)\n\
    \    local i, j = 1, 1\n    local k = 1\n    while k <= #array do\n        if\
    \ k % 2 == 1 then\n            array[k] = odd[i]\n            i = i + 1\n    \
    \    else\n            array[k] = even[j]\n            j = j + 1\n        end\n\
    \        k = k + 1\n    end\n    return array\nend", "  local sum, t = array[1]\
    \ + array[#array], {}\n  for i = 1, #array do\n    if sum % 2 == 1 then\n    \
    \  table.insert(t, array[i])\n    else\n      table.insert(t, 1, array[i])\n \
    \   end\n  end\n  return t\nend", "  if #array == 0 then return array end\n  local\
    \ head = table.remove(array, 1)\n  local last = table.remove(array, #array)\n\
    \  local sum = head + last\n  if sum % 2 == 0 then\n    table.sort(array, function(a,\
    \ b) return a > b end)\n  else\n    table.sort(array, function(a, b) return a\
    \ < b end)\n  end\n  table.insert(array, 1, head)\n  table.insert(array, last)\n\
    \  return array\nend", "    local sum = array[1] + array[#array]\n    if sum %\
    \ 2 == 0 then\n        table.sort(array, function(a, b) return a > b end)\n  \
    \  else\n        table.sort(array, function(a, b) return a < b end)\n    end\n\
    \    return array\nend", "  -- your code here\n  local index_sum = 0\n  for i,\
    \ v in ipairs(array) do\n    index_sum = index_sum + i\n  end\n  local function\
    \ index_sum_is_odd()\n    return (index_sum % 2) == 1\n  end\n  local comp_table\
    \ = {greater_than = {}, less_than = {}}\n  local insert_table = {}\n  for i, v\
    \ in ipairs(array) do\n    if v % 2 == 1 then\n      if index_sum_is_odd() then\n\
    \        insert_table = comp_table.greater_than\n      else\n        insert_table\
    \ = comp_table.less_than\n      end\n    else\n      if index_sum_is_odd() then\n\
    \        insert_table = comp_table.less_than\n      else\n        insert_table\
    \ = comp_table.greater_than\n      end\n    end\n    table.insert(insert_table,\
    \ v)\n  end\n  table.sort(comp_table.greater_than)\n  table.sort(comp_table.less_than,\
    \ function(a, b) return a > b end)\n  local sorted_array = {}\n  for i, v in ipairs(comp_table.greater_than)\
    \ do\n    table.insert(sorted_array, v)\n  end\n  for i, v in ipairs(comp_table.less_than)\
    \ do\n    table.insert(sorted_array, v)\n  end\n  return sorted_array\nend", " \
    \   local _, even = 0, true\n    if array == nil or #array == 0 then\n       \
    \ return array\n    end\n    if array[1] + array[#array] % 2 == 0 then\n     \
    \   even = false\n    end\n    local a1, a2 = 1, #array\n    while a1 < a2 do\n\
    \        if array[a1] > array[a2] then\n            array[a1], array[a2] = array[a2],\
    \ array[a1]\n        end\n        if even then\n            a1 = a1 + 1\n    \
    \    else\n            a2 = a2 - 1\n        end\n    end\n    return array\nend",
  "  local odd_numbers = {}\n  local even_numbers = {}\n  local result = {}\n  local\
    \ array_sum = array[1] + array[#array]\n  for i,v in ipairs(array) do\n    if\
    \ v % 2 == 0 then\n      table.insert(even_numbers, v)\n    else\n      table.insert(odd_numbers,\
    \ v)\n    end\n  end\n  if array_sum % 2 == 0 then\n    table.sort(even_numbers,\
    \ function(a,b) return a > b end)\n    table.sort(odd_numbers, function(a,b) return\
    \ a > b end)\n  else\n    table.sort(even_numbers)\n    table.sort(odd_numbers)\n\
    \  end\n  for i,v in ipairs(array) do\n    if v % 2 == 0 then\n      result[i]\
    \ = even_numbers[1]\n      table.remove(even_numbers, 1)\n    else\n      result[i]\
    \ = odd_numbers[1]\n      table.remove(odd_numbers, 1)\n    end\n  end\n  return\
    \ result\nend", "  local function odd_even(a, b)\n    local sum = a[1] + a[#a]\n\
    \    if sum % 2 == 0 then\n      return b > a\n    else\n      return b < a\n\
    \    end\n  end\n  local res = {}\n  for k, v in pairs(array) do\n    res[k] =\
    \ v\n  end\n  table.sort(res, odd_even)\n  return res\nend", "    local function\
    \ parity(x)\n        return (x % 2 == 0) and 1 or -1\n    end\n    table.sort(array,\
    \ function(a, b)\n        local order = parity(a + b)\n        return a * order\
    \ < b * order\n    end)\n    return array\nend", "    local even = {}\n    local\
    \ odd = {}\n    local res = {}\n    local sum = array[1] + array[#array]\n   \
    \ local is_asc = sum % 2 == 0", "    -- your code here\n    if not array or #array\
    \ == 0 then\n        return {}\n    end\n    local total = array[1] + array[#array]\n\
    \    if total % 2 == 0 then\n        table.sort(array, function(a, b) return a\
    \ > b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend", "    local odd_sum = (array[1] + array[#array])\
    \ % 2 == 1\n    local new_array = {}\n    for i = 1, #array do\n        new_array[i]\
    \ = array[i]\n    end\n    table.sort(new_array, function(a, b)\n        if odd_sum\
    \ then\n            return a < b\n        else\n            return a > b\n   \
    \     end\n    end)\n    return new_array\nend", "\tlocal result = {}\n\tlocal\
    \ temp   = {}\n\tlocal sum    = array[1] + array[#array]\n\tlocal size   = #array\n\
    \tlocal index  = 1\n\t\n\tfor index = 1, size do\n\t\ttable.insert(result, array[index])\n\
    \tend\n\t\n\tfor index = 1, size do\n\t\ttable.insert(temp, result[index])\n\t\
    end\n\t\n\tif sum % 2 == 0 then\n\t\ttable.sort(temp, function(a, b) return a\
    \ > b end)\n\telse\n\t\ttable.sort(temp, function(a, b) return a < b end)\n\t\
    end\n\t\n\tfor index = 1, size do\n\t\tresult[index] = temp[index]\n\tend\n\t\n\
    \treturn result\nend", "    local function sum_odd_even(a,b)\n        local sum\
    \ = (a+b)%2\n        if sum == 0 then return true else return false end\n    end\n\
    \    local sum = sum_odd_even(array[1],array[#array])\n    if sum then\n     \
    \   local sorted = table.sort(array,function(a,b) return a>b end)\n        return\
    \ sorted\n    else\n        local sorted = table.sort(array,function(a,b) return\
    \ a<b end)\n        return sorted\n    end\nend", "    local sum = array[1] +\
    \ array[#array]\n    local compare = sum % 2 == 0 and function(a, b) return a\
    \ > b end or function(a, b) return a < b end\n    table.sort(array, compare)\n\
    \    return array\nend", "  -- create a table that holds the odd numbers\n  local\
    \ odd_numbers = {}\n  -- create a table that holds the even numbers\n  local even_numbers\
    \ = {}\n  -- iterate through the array to get the odd numbers\n  for i, item in\
    \ ipairs(array) do\n    if item % 2 == 1 then\n      odd_numbers[#odd_numbers\
    \ + 1] = item\n    else\n      even_numbers[#even_numbers + 1] = item\n    end\n\
    \  end\n  -- sort the odd numbers\n  table.sort(odd_numbers)\n  -- sort the even\
    \ numbers\n  table.sort(even_numbers, function(a, b) return a > b end)\n  -- iterate\
    \ through the odd numbers and update the index\n  for i, item in ipairs(odd_numbers)\
    \ do\n    array[i] = item\n  end\n  -- iterate through the even numbers and update\
    \ the index\n  for i, item in ipairs(even_numbers) do\n    array[#odd_numbers\
    \ + i] = item\n  end\n  -- return the array\n  return array\nend", "  local ret\
    \ = {}\n  for i = 1, #array do\n    ret[i] = array[i]\n  end\n  if (#array + array[1]\
    \ + array[#array]) % 2 == 0 then\n    table.sort(ret, function(a, b) return a\
    \ > b end)\n  else\n    table.sort(ret)\n  end\n  return ret\nend", "    local\
    \ sum = 0\n    for i, v in ipairs(array) do\n        sum = sum + v\n    end\n\
    \    if sum % 2 == 0 then\n        -- even\n        local function compare(a,\
    \ b)\n            return a > b\n        end\n        table.sort(array, compare)\n\
    \    else\n        -- odd\n        local function compare(a, b)\n            return\
    \ a < b\n        end\n        table.sort(array, compare)\n    end\n    return\
    \ array\nend", "    -- return an empty array if the given array is empty.\n  \
    \  if #array == 0 then\n        return {}\n    end\n    -- get the first and last\
    \ index value of the given array.\n    local first_index_value = array[1]\n  \
    \  local last_index_value = array[#array]\n    -- sort the given array.\n    table.sort(array)\n\
    \    -- return the result if the sum( first index value, last index value) is\
    \ odd,\n    -- or return the given array in descending order if the sum( first\
    \ index value, last index value) is even.\n    if (first_index_value + last_index_value)\
    \ % 2 == 0 then\n        local reversed_array = {}\n        local index = #array\n\
    \        while index > 0 do\n            reversed_array[#reversed_array + 1] =\
    \ array[index]\n            index = index - 1\n        end\n        return reversed_array\n\
    \    else\n        return array\n    end\nend", "    if not array or #array <\
    \ 2 then\n        return array\n    end\n    local function odd_even_pos(index)\n\
    \        return index % 2 == 0\n    end\n    local function odd_even_sum(a, b)\n\
    \        return a + b % 2 == 0\n    end\n    local function odd_even_sort(x, y)\n\
    \        if x ~= y then\n            return odd_even_sum(x, y) and x > y or x\
    \ < y\n        end\n    end\n    local size = #array\n    for k, v in ipairs(array)\
    \ do\n        if odd_even_pos(k) ~= odd_even_sum(k, size) then\n            table.sort(array,\
    \ odd_even_sort)\n            break\n        end\n    end\n    return array\n\
    end", "    local function d(x, y)\n        if (#array % 2 == 0) then\n       \
    \     return x > y\n        else\n            return x < y\n        end\n    end\n\
    \    return table.sort(array, d)\nend", "    if sum(array[1], array[-1]) % 2 ==\
    \ 0 then\n        -- sort in descending order if the sum( first index value, last\
    \ index value) is even.\n        table.sort(array, function(a, b) return a > b\
    \ end)\n    else\n        -- sort in ascending order if the sum( first index value,\
    \ last index value) is odd.\n        table.sort(array, function(a, b) return a\
    \ < b end)\n    end\n    return array\nend", "  local flag = (array[1] + array[#array])\
    \ % 2\n  local res = {}\n  for _, v in ipairs(array) do\n    if (v % 2 == flag)\
    \ then\n      table.insert(res, v)\n    end\n  end\n  local function compare(a,\
    \ b)\n    if (flag == 0) then\n      return a > b\n    else\n      return a <\
    \ b\n    end\n  end\n  table.sort(res, compare)\n  for i, v in ipairs(array) do\n\
    \    if (v % 2 == flag) then\n      array[i] = table.remove(res, 1)\n    end\n\
    \  end\n  return array\nend", "    if not array then\n        return nil\n   \
    \ end\n    local count = 0\n    for i, v in ipairs(array) do\n        count =\
    \ count + v\n    end\n    if count % 2 == 0 then\n        table.sort(array, function(a,\
    \ b) return a > b end)\n    else\n        table.sort(array, function(a, b) return\
    \ a < b end)\n    end\n    return array\nend", "  -- body\n  local sum_index =\
    \ array[1] + array[#array]\n  if sum_index % 2 == 0 then\n    table.sort(array,\
    \ function(a, b) return a < b end)\n  else\n    table.sort(array, function(a,\
    \ b) return a > b end)\n  end\n  return array\nend", "    if #array == 0 then\n\
    \        return array\n    end\n    local i, j = 1, #array\n    if (array[i] +\
    \ array[j]) % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend", "    local result = {}\n    for i = 1, #array\
    \ do\n        result[i] = array[i]\n    end\n    -- 1. if the sum( first index\
    \ value, last index value) is odd\n    if (#array + 1) % 2 == 1 then\n       \
    \ table.sort(result, function(a, b) return a < b end)\n    -- 2. if the sum( first\
    \ index value, last index value) is even\n    else\n        table.sort(result,\
    \ function(a, b) return a > b end)\n    end\n    return result\nend", "    local\
    \ sum = array[1] + array[#array]\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend", "    local result = {}\n\
    \    local sorted = {}\n    local size = #array\n    local val\n    local inc\
    \ = size", "    -- your code here\n    -- sum( first index value, last index value)\n\
    \    -- is odd?\n    local a = {}\n    if #array == 0 then\n        return array\n\
    \    end\n    if ((array[1] + array[#array]) % 2) == 1 then\n        for i = 1,\
    \ #array do\n            local t = i\n            for j = i + 1, #array do\n \
    \               if array[j] < array[t] then\n                    t = j\n     \
    \           end\n            end\n            if t ~= i then\n               \
    \ array[i], array[t] = array[t], array[i]\n            end\n        end\n    else\n\
    \        for i = 1, #array do\n            local t = i\n            for j = i\
    \ + 1, #array do\n                if array[j] > array[t] then\n              \
    \      t = j\n                end\n            end\n            if t ~= i then\n\
    \                array[i], array[t] = array[t], array[i]\n            end\n  \
    \      end\n    end\n    return array\nend", "  -- return the sorted array\nend",
  "    local odd_index_array, even_index_array = {}, {}\n    for i, v in ipairs(array)\
    \ do\n        if i % 2 == 0 then\n            table.insert(even_index_array, v)\n\
    \        else\n            table.insert(odd_index_array, v)\n        end\n   \
    \ end\n    table.sort(odd_index_array)\n    table.sort(even_index_array, function(a,\
    \ b) return a > b end)\n    local result = {}\n    for i, v in ipairs(array) do\n\
    \        if i % 2 == 0 then\n            table.insert(result, even_index_array[#even_index_array])\n\
    \            table.remove(even_index_array, #even_index_array)\n        else\n\
    \            table.insert(result, odd_index_array[#odd_index_array])\n       \
    \     table.remove(odd_index_array, #odd_index_array)\n        end\n    end\n\
    \    return result\nend", "  local sort_asc = false\n  local new_array = {}\n\
    \  local total = 0\n  if #array == 0 then\n    return array\n  end\n  if (array[1]\
    \ + array[#array]) % 2 == 0 then\n    sort_asc = true\n  end\n  for i, v in ipairs(array)\
    \ do\n    if sort_asc then\n      if v % 2 == 0 then\n        table.insert(new_array,\
    \ 1, v)\n      else\n        table.insert(new_array, v)\n      end\n    else\n\
    \      if v % 2 == 0 then\n        table.insert(new_array, v)\n      else\n  \
    \      table.insert(new_array, 1, v)\n      end\n    end\n  end\n  for i, v in\
    \ ipairs(new_array) do\n    total = total + 1\n  end\n  return new_array\nend",
  "end\nassert(deepcompare(sort_array({1, 2, 3, 4, 5}), {5, 3, 1, 2, 4}))\nassert(deepcompare(sort_array({5,\
    \ 3, 2, 8, 1, 4}), {1, 3, 8, 5, 2, 4}))\nassert(deepcompare(sort_array({2, 22,\
    \ 37, 11, 4, 1, 5, 0}), {22, 4, 5, 2, 11, 37, 0, 1}))\nassert(deepcompare(sort_array({1,\
    \ 111, 11, 11, 2, 1, 5, 0}), {1, 5, 11, 2, 11, 111, 0, 1}))\nassert(deepcompare(sort_array({1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9}), {9, 7, 5, 3, 1, 2, 4, 6, 8}))\nassert(deepcompare(sort_array({0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9}), {9, 7, 5, 3, 1, 0, 2, 4, 6, 8}))\nassert(deepcompare(sort_array({0,\
    \ 1, 2, 3, 4, 9, 8, 7, 6, 5}), {5, 3, 1, 0, 2, 4, 8, 6, 7, 9}))\nprint(\"<PASSED>\"\
    )", "  local function swap(array, i, j)\n    local temp = array[i]\n    array[i]\
    \ = array[j]\n    array[j] = temp\n  end\n  local n = #array\n  local odd_odd\
    \ = (array[1] % 2 == 1) and (array[n] % 2 == 1)\n  local even_even = (array[1]\
    \ % 2 == 0) and (array[n] % 2 == 0)\n  local odd_even = (array[1] % 2 == 1) and\
    \ (array[n] % 2 == 0)\n  local even_odd = (array[1] % 2 == 0) and (array[n] %\
    \ 2 == 1)\n  for i = 1, n - 1 do\n    for j = i + 1, n do\n      if odd_odd then\n\
    \        if array[i] > array[j] then\n          swap(array, i, j)\n        end\n\
    \      elseif even_even then\n        if array[i] < array[j] then\n          swap(array,\
    \ i, j)\n        end\n      elseif odd_even then\n        if array[i] % 2 == 0\
    \ and array[j] % 2 == 0 then\n          if array[i] < array[j] then\n        \
    \    swap(array, i, j)\n          end\n        elseif array[i] % 2 == 1 and array[j]\
    \ % 2 == 1 then\n          if array[i] > array[j] then\n            swap(array,\
    \ i, j)\n          end\n        end\n      elseif even_odd then\n        if array[i]\
    \ % 2 == 0 and array[j] % 2 == 0 then\n          if array[i] > array[j] then\n\
    \            swap(array, i, j)\n          end\n        elseif array[i] % 2 ==\
    \ 1 and array[j] % 2 == 1 then\n          if array[i] < array[j] then\n      \
    \      swap(array, i, j)\n          end\n        end\n      end\n    end\n  end\n\
    \  return array\nend", "  local sum = 0\n  for k, v in pairs(array) do\n    sum\
    \ = sum + v\n  end\n  if sum % 2 == 0 then\n    table.sort(array, function(a,\
    \ b) return a > b end)\n  else\n    table.sort(array, function(a, b) return a\
    \ < b end)\n  end\n  return array\nend", "    local function sortfunc(a, b)\n\
    \        if (a + b) % 2 == 0 then\n            return a > b\n        else\n  \
    \          return a < b\n        end\n    end\n    table.sort(array, sortfunc)\n\
    \    return array\nend", "    local _, s = pcall(table.sort, array)\n    if not\
    \ s then\n        return\n    end\n    local x = array[1] + array[#array]\n  \
    \  if x % 2 == 0 then\n        table.sort(array, function(a, b) return a > b end)\n\
    \    else\n        table.sort(array, function(a, b) return a < b end)\n    end\n\
    \    return array\nend", "  local len = #array\n  local is_odd = (array[1] + array[len])\
    \ % 2 == 1\n  local i, j = 1, len\n  while i < j do\n    while array[i] % 2 ==\
    \ 1 == is_odd do\n      i = i + 1\n    end\n    while array[j] % 2 == 0 == is_odd\
    \ do\n      j = j - 1\n    end\n    if i < j then\n      array[i], array[j] =\
    \ array[j], array[i]\n    end\n  end\n  if is_odd then\n    array = table.reverse(array)\n\
    \  end\n  return array\nend", "    local sum = 0\n    for i = 1, #array do\n \
    \       sum = sum + array[i]\n    end\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend", "  local function sorter(a,\
    \ b)\n    local sum = a + b\n    return ((sum % 2 == 0) and b <= a) or ((sum %\
    \ 2 ~= 0) and b >= a)\n  end\n  table.sort(array, sorter)\n  return array\nend",
  "  local sum = array[1] + array[#array]\n  if sum % 2 == 0 then\n    table.sort(array,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(array)\n  end\n  return\
    \ array\nend", "    local sum = array[1] + array[#array]\n    local function compare(x,\
    \ y)\n        return x > y\n    end\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ compare)\n    else\n        table.sort(array)\n    end\n    return array\nend",
  "  local flag = {}\n  local length = #array\n  for i = 1, length do\n    if (i ==\
    \ 1 or i == length) and array[i] % 2 ~= 0 then\n      flag[i] = true\n    end\n\
    \  end\n  if length % 2 == 0 then\n    table.sort(array, function(a, b) return\
    \ a > b end)\n  else\n    table.sort(array)\n  end\n  for k, v in pairs(flag)\
    \ do\n    local tmp = array[k]\n    array[k] = array[#array]\n    array[#array]\
    \ = tmp\n  end\n  return array\nend", "  --your code here\n  return array\nend",
  "    local result = {}\n    local first = array[1]\n    local last = array[#array]\n\
    \    local sum = first + last\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    for k, v in ipairs(array) do\n        result[k]\
    \ = v\n    end\n    return result\nend", "  -- your code here\n  local size =\
    \ #array\n  local sum = array[1] + array[size]\n  if (sum % 2 == 0) then\n   \
    \ table.sort(array, function(a, b) return a > b end)\n  else\n    table.sort(array,\
    \ function(a, b) return a < b end)\n  end\n  return array\nend", "  for k, v in\
    \ pairs(array) do\n    if (k + v) % 2 == 0 then\n      -- TODO\n    end\n  end\n\
    end", "  local odd_sum = function (sum)\n    return sum % 2 == 1\n  end\n  local\
    \ even_sum = function (sum)\n    return sum % 2 == 0\n  end\n  if array[1] + array[#array]\
    \ % 2 == 1 then\n    table.sort(array, odd_sum)\n  else\n    table.sort(array,\
    \ even_sum)\n  end\n  return array\nend", "    if #array == 0 then\n        return\
    \ {}\n    end\n    local odd_idx, even_idx = 1, 1\n    local odd_array, even_array\
    \ = {}, {}\n    for i = 1, #array do\n        if array[i] % 2 == 0 then\n    \
    \        even_array[even_idx] = array[i]\n            even_idx = even_idx + 1\n\
    \        else\n            odd_array[odd_idx] = array[i]\n            odd_idx\
    \ = odd_idx + 1\n        end\n    end\n    -- sort array\n    table.sort(odd_array)\n\
    \    table.sort(even_array, function(a, b) return a > b end)\n    -- merge\n \
    \   local res_idx = 1\n    for i = 1, #odd_array do\n        array[res_idx] =\
    \ odd_array[i]\n        res_idx = res_idx + 1\n    end\n    for i = 1, #even_array\
    \ do\n        array[res_idx] = even_array[i]\n        res_idx = res_idx + 1\n\
    \    end\n    if (array[1] + array[#array]) % 2 == 0 then\n        return array\n\
    \    else\n        local res = {}\n        for i = #array, 1, -1 do\n        \
    \    res[#array - i + 1] = array[i]\n        end\n        return res\n    end\n\
    end", "    local len = #array\n    local sum = array[1] + array[len]\n    local\
    \ res = {}\n    local a1, a2 = array[1], array[len]\n    for k, v in ipairs(array)\
    \ do\n        if k ~= 1 and k ~= len then\n            res[#res + 1] = v\n   \
    \     end\n    end\n    table.sort(res, function(a, b)\n        if sum % 2 ==\
    \ 0 then\n            return a > b\n        else\n            return a < b\n \
    \       end\n    end)\n    table.insert(res, 1, a1)\n    table.insert(res, a2)\n\
    \    return res\nend\nprint(table.concat(sort_array({-90, -19, 0, 2, 12, 29, 38,\
    \ 5, 5, 6, 7, 8, 9, 10, 65, 89}), \", \"))", "    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n        table.sort(array, function(a, b) return a >\
    \ b end)\n    else\n        table.sort(array, function(a, b) return a < b end)\n\
    \    end\n    return array\nend", "    -- what is the sum of the first and last\
    \ index?\n    local index_sum = array[1] + array[#array]\n    -- odd sum: sort\
    \ in ascending order, even sum: sort in descending order\n    local sort_order\
    \ = index_sum % 2 == 0 and 1 or 0\n    -- do the actual sorting\n    table.sort(array,\
    \ function(a, b)\n        if sort_order == 0 then\n            return a < b\n\
    \        else\n            return a > b\n        end\n    end)\n    -- return\
    \ the sorted array\n    return array\nend", "  local function isOdd(num)\n   \
    \ return math.abs(num % 2) == 1\n  end\n  local function isEven(num)\n    return\
    \ math.abs(num % 2) == 0\n  end\n  local function comp(x, y)\n    if isOdd(x +\
    \ y) then\n      return x < y\n    else\n      return x > y\n    end\n  end\n\
    \  table.sort(array, comp)\n  return array\nend", "\tif array == nil or #array\
    \ == 0 then\n\t\treturn {}\n\tend\n\t\n\tlocal is_even_sum = (array[1] + array[#array])\
    \ % 2 == 0\n\tif is_even_sum then\n\t\ttable.sort(array, function(v1, v2) return\
    \ v1 > v2 end)\n\telse\n\t\ttable.sort(array, function(v1, v2) return v1 < v2\
    \ end)\n\tend\n\t\n\treturn array\nend", "  -- code here\n  local result = {}\n\
    \  local length = #array\n  for i=1, length do\n    if (i+length) % 2 == 0 then\n\
    \      table.insert(result, 1, array[i])\n    else\n      table.insert(result,\
    \ array[i])\n    end\n  end\n  return result\nend", "  local sum = array[1] +\
    \ array[#array]\n  if sum % 2 == 0 then\n    return sort(array, function(a, b)\
    \ return a > b end)\n  else\n    return sort(array, function(a, b) return a <\
    \ b end)\n  end\nend", "    for i = 1, #array do\n        for j = i + 1, #array\
    \ do\n            if (i + #array) % 2 == 0 then\n                if array[i] <\
    \ array[j] then\n                    array[i], array[j] = array[j], array[i]\n\
    \                end\n            else\n                if array[i] > array[j]\
    \ then\n                    array[i], array[j] = array[j], array[i]\n        \
    \        end\n            end\n        end\n    end\n    return array\nend", " \
    \   local len = #array\n    local sum = array[1] + array[len]\n    local direction\
    \ = ((sum % 2) == 0) and (1) or (-1)\n    table.sort(array, function(a, b)\n \
    \       return a * direction < b * direction\n    end)\n    return array\nend",
  "  -- TODO: implement your code here\nend", "  local sum = array[1] + array[#array]\n\
    \  local n = #array\n  if sum % 2 == 0 then\n    for i = 1, n/2 do\n      array[i],\
    \ array[n - i + 1] = array[n - i + 1], array[i]\n    end\n  end\n  table.sort(array)\n\
    \  return array\nend", "    for i = 1, #array - 1 do\n        for j = i + 1, #array\
    \ do\n            if (math.fmod(i + #array, 2) == 0 and array[i] < array[j]) or\n\
    \                    (math.fmod(i + #array, 2) ~= 0 and array[i] > array[j]) then\n\
    \                array[i], array[j] = array[j], array[i]\n            end\n  \
    \      end\n    end\n    return array\nend", "  if array:empty() then\n    return\
    \ {}\n  end\n  local array_copy = array:copy()\n  local len = array_copy:len()\n\
    \  local first = array_copy[1]\n  local last = array_copy[len]\n  local is_odd\
    \ = (first + last) % 2 == 1\n  array_copy:sort(is_odd)\n  return array_copy\n\
    end", "\nend", "    local function swap(t, i, j)\n        local tmp = t[i]\n \
    \       t[i] = t[j]\n        t[j] = tmp\n    end\n    local function odd_even_sort(t,\
    \ dir)\n        for i = 1, #t - 1 do\n            for j = i + 1, #t do\n     \
    \           if dir(t[i], t[j]) then\n                    swap(t, i, j)\n     \
    \           end\n            end\n        end\n    end\n    local last = #array\n\
    \    if last % 2 == 0 then\n        odd_even_sort(array, function(a, b) return\
    \ a > b end)\n    else\n        odd_even_sort(array, function(a, b) return a <\
    \ b end)\n    end\n    return array\nend", "    local arr = {}\n    for i, e in\
    \ ipairs(array) do\n        arr[i] = e\n    end\n    local sum = arr[1] + arr[#arr]\n\
    \    local isodd = sum % 2 == 1\n    local function cmp(a, b)\n        if isodd\
    \ then\n            return a < b\n        else\n            return a > b\n   \
    \     end\n    end\n    table.sort(arr, cmp)\n    return arr\nend", "  local result\
    \ = {}\n  local odd_sum_indexes = {}\n  local even_sum_indexes = {}\n  for i =\
    \ 1, #array do\n    if ((i + array[i]) % 2 == 0) then\n      table.insert(even_sum_indexes,\
    \ i)\n    else\n      table.insert(odd_sum_indexes, i)\n    end\n  end\n  table.sort(odd_sum_indexes,\
    \ function(a, b) return array[a] < array[b] end)\n  table.sort(even_sum_indexes,\
    \ function(a, b) return array[a] > array[b] end)\n  for i = 1, #odd_sum_indexes\
    \ do\n    result[i] = array[odd_sum_indexes[i]]\n  end\n  for i = 1, #even_sum_indexes\
    \ do\n    result[#odd_sum_indexes + i] = array[even_sum_indexes[i]]\n  end\n \
    \ return result\nend\nprint(#sort_array({1, 3, 4, 5, 6}))\nprint(#sort_array({3,\
    \ 1, 5, 6, 4}))\nprint(#sort_array({1, 1, 1, 1, 1}))\nprint(#sort_array({5, 3,\
    \ 1, 6, 2, 4}))\nprint(#sort_array({0, 1, 2, 3, 4, 5}))\nprint(#sort_array({3,\
    \ 4, 5, 6, 7, 8}))\nprint(#sort_array({2, 3, 4, 5, 6, 7}))\nprint(#sort_array({1,\
    \ 2, 3, 4, 5, 6}))\nprint(#sort_array({1, 4, 3, 6, 5, 8}))\nprint(#sort_array({0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9}))\nprint(#sort_array({3, 6, 5, 4, 7, 8, 9, 0, 1,\
    \ 2}))\nprint(#sort_array({4, 7, 6, 5, 8, 9, 0, 1, 2, 3}))\n", "  local index1,\
    \ index2 = 0, #array\n  local even_odd = (#array + 1) % 2\n  local function compare(x,\
    \ y)\n    return (x % 2 == even_odd and y % 2 == even_odd and x < y) or\n    \
    \  (x % 2 ~= even_odd and y % 2 ~= even_odd and x > y) or\n      x % 2 == even_odd\n\
    \  end\n  table.sort(array, compare)\n  return array\nend", "\treturn {}\nend",
  "  local sum = array[1] + array[#array]\n  local function comp(a, b)\n    if sum\
    \ % 2 == 0 then\n      return a > b\n    else\n      return a < b\n    end\n \
    \ end\n  table.sort(array, comp)\n  return array\nend", "    -- use bubble sort\n\
    \    local odd_sum = (array[1] + array[#array]) % 2\n    local n = #array\n  \
    \  local swapped\n    repeat\n        swapped = false\n        for i = 1, n -\
    \ 1 do\n            if odd_sum == ((array[i] + array[i + 1]) % 2) then\n     \
    \           if odd_sum == 0 then\n                    if array[i] < array[i +\
    \ 1] then\n                        array[i], array[i + 1] = array[i + 1], array[i]\n\
    \                        swapped = true\n                    end\n           \
    \     else\n                    if array[i] > array[i + 1] then\n            \
    \            array[i], array[i + 1] = array[i + 1], array[i]\n               \
    \         swapped = true\n                    end\n                end\n     \
    \       end\n        end\n        n = n - 1\n    until swapped == false\n    return\
    \ array\nend", "  if #array > 0 then\n    local sum = array[1] + array[#array]\n\
    \    if sum % 2 == 0 then\n      table.sort(array, function(a, b) return a > b\
    \ end)\n    else\n      table.sort(array, function(a, b) return a < b end)\n \
    \   end\n  end\n  return array\nend", end, "  -- body\n  local len = #array\n\
    \  local sum = array[1] + array[len]\n  if sum % 2 == 0 then\n    return table.sort(array,\
    \ function(v1, v2) return v1 > v2 end)\n  else\n    return table.sort(array, function(v1,\
    \ v2) return v1 < v2 end)\n  end\nend", "    if #array < 2 then\n        return\
    \ array\n    end\n    local sum = array[1] + array[#array]\n    local sort_type\
    \ = sum % 2 == 0 and 'd' or 'a'\n    table.sort(array, function(a, b)\n      \
    \  if sort_type == 'a' then\n            return a < b\n        else\n        \
    \    return a > b\n        end\n    end)\n    return array\nend", "    local size\
    \ = #array\n    local sum = array[1] + array[size]\n    local result = {}\n  \
    \  for i, v in ipairs(array) do\n        result[i] = v\n    end\n    if sum %\
    \ 2 == 0 then\n        table.sort(result, function(a, b) return a > b end)\n \
    \   else\n        table.sort(result, function(a, b) return a < b end)\n    end\n\
    \    return result\nend", "  local s = 0\n  for i = 1, #array do\n    s = s +\
    \ array[i]\n  end\n  local function compare(a, b)\n    return a < b\n  end\n \
    \ if (s % 2) == 0 then\n    table.sort(array, compare)\n  else\n    table.sort(array,\
    \ function(a, b) return a > b end)\n  end\n  return array\nend", "    local sum\
    \ = array[1] + array[#array]\n    if sum % 2 == 0 then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend", "    local function my_odd_sort(a,\
    \ b)\n        if a % 2 == 1 and b % 2 == 1 then\n            return a < b\n  \
    \      elseif a % 2 == 0 and b % 2 == 0 then\n            return a > b\n     \
    \   else\n            return a % 2 == 1\n        end\n    end\n    local function\
    \ my_even_sort(a, b)\n        if a % 2 == 1 and b % 2 == 1 then\n            return\
    \ a > b\n        elseif a % 2 == 0 and b % 2 == 0 then\n            return a <\
    \ b\n        else\n            return a % 2 == 1\n        end\n    end\n    local\
    \ function my_sort(a, b)\n        if array[1] + array[#array] % 2 == 1 then\n\
    \            return my_odd_sort(a, b)\n        else\n            return my_even_sort(a,\
    \ b)\n        end\n    end\n    table.sort(array, my_sort)\n    return array\n\
    end", "  local odds = {}\n  local evens = {}\n  for i = 1, #array do\n    if i\
    \ % 2 == 0 then\n      evens[#evens + 1] = array[i]\n    else\n      odds[#odds\
    \ + 1] = array[i]\n    end\n  end\n  table.sort(odds)\n  table.sort(evens, function(a,\
    \ b) return a > b end)\n  for i = 1, #odds do\n    array[2 * i - 1] = odds[i]\n\
    \  end\n  for i = 1, #evens do\n    array[2 * i] = evens[i]\n  end\n  return array\n\
    end", "    if array == nil or #array == 0 then\n        return array\n    end\n\
    \    local is_odd = (array[1] + array[#array]) % 2 ~= 0\n    local function sort_func(a,\
    \ b)\n        return is_odd and a < b or a > b\n    end\n    table.sort(array,\
    \ sort_func)\n    return array\nend", "    local first = array[1]\n    local last\
    \ = array[#array]\n    if ((first + last) % 2 == 0) then\n        table.sort(array,\
    \ function(a, b) return a > b end)\n    else\n        table.sort(array, function(a,\
    \ b) return a < b end)\n    end\n    return array\nend\nreturn sort_array", " \
    \ local index = 1\n  local last = #array\n  local result = {}\n  local result_index\
    \ = 1\n  local sum = array[index] + array[last]\n  local add = sum % 2 == 0 and\
    \ -1 or 1\n  while index <= last do\n    result[result_index] = array[index]\n\
    \    result[#result - result_index + 1] = array[last]\n    index = index + 1\n\
    \    last = last - 1\n    result_index = result_index + 1\n  end\n  return result\n\
    end", "  local even = {}\n  local odd = {}\n  for i, v in ipairs(array) do\n \
    \   if i % 2 == 0 then\n      table.insert(even, v)\n    else\n      table.insert(odd,\
    \ v)\n    end\n  end\n  table.sort(even)\n  table.sort(odd, function(a, b) return\
    \ a > b end)\n  for i, v in ipairs(array) do\n    if i % 2 == 0 then\n      array[i]\
    \ = even[i/2]\n    else\n      array[i] = odd[(i-1)/2 + 1]\n    end\n  end\n \
    \ return array\nend\nassert(table.concat(sort_array({5, 3, 2, 8, 1, 4}), \",\"\
    ) == \"1,3,2,8,5,4\")\nassert(table.concat(sort_array({5, 3, 1, 8, 0}), \",\"\
    ) == \"1,3,5,8,0\")\nassert(table.concat(sort_array({}), \",\") == \"\")", " \
    \   local n = #array\n    local fn = function(a, b)\n        if ((a + n) % 2 ==\
    \ 0 and (b + n) % 2 == 0) or ((a + n) % 2 == 1 and (b + n) % 2 == 1) then\n  \
    \          return a < b\n        else\n            return a > b\n        end\n\
    \    end\n    table.sort(array, fn)\n    return array\nend", "    local odd_indices,\
    \ even_indices = {}, {}\n    for index, value in ipairs(array) do\n        if\
    \ math.fmod(index, 2) == 0 then\n            table.insert(even_indices, {\n  \
    \              index = index,\n                value = value\n            })\n\
    \        else\n            table.insert(odd_indices, {\n                index\
    \ = index,\n                value = value\n            })\n        end\n    end\n\
    \    local function sort_and_put_back(t)\n        table.sort(t, function(a, b)\n\
    \            return a.value < b.value\n        end)\n        for _, index_value\
    \ in ipairs(t) do\n            array[index_value.index] = index_value.value\n\
    \        end\n    end\n    local is_ascending = math.fmod(array[1] + array[#array],\
    \ 2) == 0\n    if is_ascending then\n        sort_and_put_back(odd_indices)\n\
    \        sort_and_put_back(even_indices)\n    else\n        sort_and_put_back(even_indices)\n\
    \        sort_and_put_back(odd_indices)\n    end\n    return array\nend", "\t\
    if not array or #array < 2 then\n\t\treturn array\n\tend\n\tlocal function  odd(\
    \ n )\n\t\treturn n % 2 == 1\n\tend\n\tlocal function compare(a, b)\n\t\treturn\
    \ (odd(a) and odd(b) and a > b) or (not odd(a) and not odd(b) and a < b)\n\tend\n\
    \ttable.sort(array, compare)\n\treturn array\nend", "  local odd_values = {}\n\
    \  local even_values = {}\n  local odd_values_idx = 1\n  local even_values_idx\
    \ = 1\n  local left_value = array[1]\n  local right_value = array[#array]\n  local\
    \ sum = left_value + right_value\n  local sorted_array = {}\n  local idx = 1\n\
    \  local flag = false\n  if sum % 2 == 0 then\n    for i = 1, #array do\n    \
    \  if array[i] % 2 == 0 then\n        even_values[even_values_idx] = array[i]\n\
    \        even_values_idx = even_values_idx + 1\n      else\n        odd_values[odd_values_idx]\
    \ = array[i]\n        odd_values_idx = odd_values_idx + 1\n      end\n    end\n\
    \    for i = #odd_values, 1, -1 do\n      sorted_array[idx] = odd_values[i]\n\
    \      idx = idx + 1\n    end\n    flag = true\n  else\n    for i = 1, #array\
    \ do\n      if array[i] % 2 == 0 then\n        even_values[even_values_idx] =\
    \ array[i]\n        even_values_idx = even_values_idx + 1\n      else\n      \
    \  odd_values[odd_values_idx] = array[i]\n        odd_values_idx = odd_values_idx\
    \ + 1\n      end\n    end\n    for i = 1, #odd_values do\n      sorted_array[idx]\
    \ = odd_values[i]\n      idx = idx + 1\n    end\n    flag = false\n  end\n  if\
    \ flag then\n    for i = #even_values, 1, -1 do\n      sorted_array[idx] = even_values[i]\n\
    \      idx = idx + 1\n    end\n  else\n    for i = 1, #even_values do\n      sorted_array[idx]\
    \ = even_values[i]\n      idx = idx + 1\n    end\n  end\n  return sorted_array\n\
    end", "\tif #array < 2 then\n\t\treturn array\n\tend\n\tlocal sum = array[1] +\
    \ array[#array]\n\tlocal odd = sum % 2 == 1\n\tlocal function key(item)\n\t\t\
    return item * (odd and 1 or -1)\n\tend\n\ttable.sort(array, function(a, b)\n\t\
    \treturn key(a) < key(b)\n\tend)\n\treturn array\nend", "    local first = array[1]\n\
    \    local last = array[#array]\n    if (first + last) % 2 == 0 then\n       \
    \ table.sort(array, function(a, b) return a > b end)\n    else\n        table.sort(array)\n\
    \    end\n    return array\nend", "  if (not array) or #array < 2 then return\
    \ array end\n  if (array[1] + array[#array]) % 2 == 0 then\n    table.sort(array,\
    \ function(a, b) return a > b end)\n  else\n    table.sort(array, function(a,\
    \ b) return a < b end)\n  end\n  return array\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
