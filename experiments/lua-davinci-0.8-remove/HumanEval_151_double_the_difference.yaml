name: HumanEval_151_double_the_difference
language: lua
prompt: "-- Given a list of numbers, return the sum of squares of the numbers\n--\
  \ in the list that are odd. Ignore numbers that are negative or not integers.\n\
  -- If the input list is empty, return 0.\nlocal function double_the_difference(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = double_the_difference\n\
  \    lu.assertEquals(candidate({}), 0)\n    lu.assertEquals(candidate({5, 4}), 25)\n\
  \    lu.assertEquals(candidate({0.1, 0.2, 0.3}), 0)\n    lu.assertEquals(candidate({-10,\
  \ -20, -30}), 0)\n    lu.assertEquals(candidate({-1, -2, 8}), 0)\n    lu.assertEquals(candidate({0.2,\
  \ 3, 5}), 34)\n    lu.assertEquals(candidate({-9, -7, -5, -3, -1, 1, 3, 5, 7, 9}),\
  \ 165)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local sum = 0\n    for _,v in ipairs(lst) do\n        if type(v)\
    \ == \"number\" and (v >= 0) and (v % 2 == 1) then\n            sum = sum + v*v\n\
    \        end\n    end\n    return sum\nend", "    local sum = 0\n    for i, v\
    \ in ipairs(lst) do\n        if v % 2 == 1 then\n            sum = sum + v * v\n\
    \        end\n    end\n    return sum\nend", "    return (sum_of_squares_of_odds(lst)\
    \ - sum_of_squares_of_evens(lst)) * 2\nend", "  local sum = 0\n  for i, num in\
    \ ipairs(lst) do\n    if type(num) == \"number\" and num > 0 and math.floor(num)\
    \ == num then\n      if num % 2 == 1 then\n        sum = sum + num * num\n   \
    \   end\n    end\n  end\n  return sum\nend", "    local sum = 0\n    for _, v\
    \ in ipairs(lst) do\n        if type(v) == \"number\" and v >= 0 and v % 2 ==\
    \ 1 then\n            sum = sum + v * v\n        end\n    end\n    return sum\n\
    end", "    local result = 0\n    for i, v in ipairs(lst) do\n        if v % 2\
    \ == 1 then\n            result = result + v * v\n        end\n    end\n    return\
    \ result\nend", "\t-- YOUR CODE HERE\n\treturn 0\nend", "\tlocal sum = 0\n\tfor\
    \ i, v in ipairs(lst) do\n\t\tif type(v) == \"number\" and v > 0 and v % 2 ==\
    \ 1 then\n\t\t\tsum = sum + v * v\n\t\tend\n\tend\n\treturn sum\nend", "    local\
    \ sum = 0\n    for _,v in ipairs(lst) do\n        if v > 1 and v%2 == 1 then\n\
    \            sum = sum + v*v\n        end\n    end\n    return sum\nend", "  \
    \  -- YOUR CODE HERE\n    return 0\nend", "    -- Calculate the sum of the squares\
    \ of the odd numbers in the list, using a foldr\n    local odd_sum = foldr(\n\
    \        -- The function applied to each element of the list to produce the next\
    \ value of the accumulator\n        function(x, acc)\n            -- Do not count\
    \ elements that are negative or non-integers\n            if x < 0 or not is_integer(x)\
    \ then\n                return acc\n            end\n            -- Include odd\
    \ numbers in the accumulator\n            if is_odd(x) then\n                return\
    \ acc + x^2\n            end\n            -- Ignore even numbers\n           \
    \ return acc\n        end,\n        -- The initial value of the accumulator\n\
    \        0,\n        -- The list to fold over\n        lst\n    )\n    -- Calculate\
    \ the sum of the squares of the even numbers in the list, using a foldr\n    local\
    \ even_sum = foldr(\n        -- The function applied to each element of the list\
    \ to produce the next value of the accumulator\n        function(x, acc)\n   \
    \         -- Do not count elements that are negative or non-integers\n       \
    \     if x < 0 or not is_integer(x) then\n                return acc\n       \
    \     end\n            -- Include even numbers in the accumulator\n          \
    \  if is_even(x) then\n                return acc + x^2\n            end\n   \
    \         -- Ignore odd numbers\n            return acc\n        end,\n      \
    \  -- The initial value of the accumulator\n        0,\n        -- The list to\
    \ fold over\n        lst\n    )\n    -- Return the difference between the two\
    \ sums, doubled\n    return 2 * (odd_sum - even_sum)\nend", "    local sum = 0\n\
    \    for k,v in pairs(lst) do\n        sum = sum + (v * v)\n    end\n    return\
    \ sum\nend", "  -- Your code here\nend", "    local sum_odd_squares = 0\n    for\
    \ i = 1, #lst do\n        local element = lst[i]\n        if element > 0 and math.floor(element)\
    \ == element then\n            if element % 2 == 1 then\n                sum_odd_squares\
    \ = sum_odd_squares + element^2\n            end\n        end\n    end\n    return\
    \ sum_odd_squares\nend", "  return sum_squares(filter(lst, is_odd)) - sum_squares(filter(lst,\
    \ is_even))\nend", "  local function square(x)\n    return x * x\n  end\n  local\
    \ function is_positive_int(x)\n    return (type(x) == \"number\") and x > 0 and\
    \ (x%1 == 0)\n  end\n  local function is_odd(x)\n    return (x % 2 == 1)\n  end\n\
    \  local sum = 0\n  for _, v in ipairs(lst) do\n    if is_positive_int(v) and\
    \ is_odd(v) then\n      sum = sum + square(v)\n    end\n  end\n  return sum\n\
    end", "\tlocal function diff(a, b)\n\t\treturn (a - b) * 2\n\tend\n\treturn foldr(diff,\
    \ 0, lst)\nend", "    sum = 0\n    for i,v in ipairs(lst) do\n        if v ~=\
    \ math.floor(v) or v < 0 then\n            goto continue\n        end\n      \
    \  if v % 2 == 1 then\n            sum = sum + v * v\n        end\n        ::continue::\n\
    \    end\n    return sum\nend", "  return _.reduce(lst, _.add, 0)\nend", "  local\
    \ sum = 0\n  for _, n in ipairs(lst) do\n    local diff = n - 2\n    if diff %\
    \ 2 == 0 then\n      sum = sum + (diff * diff)\n    end\n  end\n  return sum\n\
    end", "    if table.getn(lst) < 2 then\n        return 0\n    end\n    return\
    \ ((lst[1] - lst[2]) * 2)\nend", "  local sum = 0\n  for _, n in ipairs(lst) do\n\
    \    if type(n) == \"number\" and n % 2 == 1 and n >= 0 then\n      sum = sum\
    \ + (n * n)\n    end\n  end\n  return sum\nend", "    local total = 0\n    for\
    \ i = 1, #lst do\n        local num = lst[i]\n        if type(num) == \"number\"\
    \ and num % 2 == 1 and num >= 0 then\n            total = total + num * num\n\
    \        end\n    end\n    return total\nend", "    local new_lst = {}\n    for\
    \ i, v in ipairs(lst) do\n        if type(v) == \"number\" and v >= 0 and math.floor(v)\
    \ == v then\n            if v % 2 == 1 then\n                table.insert(new_lst,\
    \ v^2)\n            end\n        end\n    end\n    return table.concat(new_lst,\
    \ \",\")\nend", "\t-- Write your code here!\n\treturn 0\nend", "    -- YOUR CODE\
    \ HERE\n    return nil\nend", "    local result = 0\n    -- TODO: implement the\
    \ function\n    return result\nend", "    local double_sum = 0\n    local sum\
    \ = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 then\n          \
    \  double_sum = double_sum + v * v\n            sum = sum + v\n        end\n \
    \   end\n    return double_sum - 2 * sum\nend", "  -- YOUR CODE HERE\n  local\
    \ count=0\n  for i,v in ipairs(lst) do\n    if(v%2==1) then\n      count=count+v*v\n\
    \    end\n  end\n  return count\nend", "  return 2 * (sum_of_positive_evens(lst)\
    \ - sum_of_odd_squares(lst))\nend", "    local sum = 0\n    for _, e in ipairs(lst)\
    \ do\n        if type(e) == \"number\" and e > 0 and e == math.floor(e) then\n\
    \            sum = sum + e ^ 2\n        end\n    end\n    return sum\nend", " \
    \ -- YOUR CODE HERE\n  local diffs = {}\n  local count = 1\n  while lst[count]\
    \ ~= nil do\n    if lst[count] % 2 == 1 then\n      diffs[count] = (lst[count]\
    \ * lst[count])\n    end\n    count = count + 1\n  end\n  return sum(diffs)\n\
    end", "  -- Replace this with your code\n  return 0\nend", "    local diff = 0\n\
    \    if #lst > 0 then\n        -- The first number is the old value, the second\
    \ the new.\n        -- To get the difference, we have to subtract the second from\
    \ the first.\n        diff = lst[2] - lst[1]\n    end\n    -- The difference is\
    \ incremented by its own value.\n    return diff + diff\nend", "\tlocal sum =\
    \ 0\n\tfor i,v in ipairs(lst) do\n\t\tif type(v) == \"number\" and math.floor(v)\
    \ == v and v >= 0 then\n\t\t\tif v % 2 == 1 then\n\t\t\t\tsum = sum + (v^2)\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn sum\nend", "    local sum = 0\n    for i, v\
    \ in ipairs(lst) do\n        if v > 0 and v % 2 == 1 then\n            sum = sum\
    \ + v * v\n        end\n    end\n    return sum\nend", "    local double = 2 *\
    \ difference(lst)\n    return double\nend", "    local tot = 0\n    for i = 1,\
    \ #lst - 1 do\n        tot = tot + (lst[i] - lst[i + 1]) * 2\n    end\n    return\
    \ tot\nend", "    return lst\nend", "  -- TODO implement this function\nend",
  "  local sum = 0\n  for i, v in ipairs(lst) do\n    if v > 0 and v % 2 == 1 then\n\
    \      sum = sum + v^2\n    end\n  end\n  return sum\nend", "    local sum = 0\n\
    \    for _,v in ipairs(lst) do\n        if type(v) == \"number\" and v > 0 and\
    \ v % 2 == 1 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum\nend", "    local sum = 0\n    for _, n in ipairs(lst) do\n        if n\
    \ > 0 and n % 2 == 1 then\n            sum = sum + n * n\n        end\n    end\n\
    \    return sum\nend\nassert(double_the_difference({2, 4, 6, 8}) == 0)\nassert(double_the_difference({3,\
    \ 5, 7, 9}) == 164)\nassert(double_the_difference({0, 2, -4, -6, 8}) == 0)\nassert(double_the_difference({2.5,\
    \ 3.5, 4.5, 7.5}) == 85)\nassert(double_the_difference({}) == 0)", "  -- TODO:\
    \ Fill in here.\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if v>0 and\
    \ math.floor(v)==v then\n      if v%2 == 1 then\n        sum = sum + v*v\n   \
    \   end\n    end\n  end\n  return sum\nend", "  local sum = 0\n  local count =\
    \ 0\n  for i,v in ipairs(lst) do\n    if type(v) == \"number\" and v > 0 and v%2\
    \ == 1 then\n      sum = sum + v*v\n      count = count + 1\n    end\n  end\n\
    \  return (sum - (sum/count))*2\nend", "  -- TODO: Implement the function.\n \
    \ -- See the tests for reference.\n  local sum = 0\n  for i, n in ipairs(lst)\
    \ do\n    if n % 2 == 1 then\n      sum = sum + n * n\n    end\n  end\n  return\
    \ sum\nend", "\tlocal sum = 0\n\tfor i, v in ipairs(lst) do\n\t\tif v > 0 and\
    \ math.type(v) == \"integer\" then\n\t\t\tif v % 2 == 1 then\n\t\t\t\tsum = sum\
    \ + (v * v)\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend", "    -- YOUR CODE\
    \ HERE\n    local sum = 0\n    for i = 1,#lst do\n      if lst[i] % 2 == 1 then\n\
    \        sum = sum + lst[i] * lst[i]\n      end\n    end\n    return sum\nend",
  "\tlocal diff = 0\n\t\n\t-- Your code here\n\t\n\treturn diff\nend", "  local sum\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 then\n      sum = sum + lst[i]\
    \ * lst[i]\n    end\n  end\n  return sum\nend", "    local sum = 0\n    for _,\
    \ x in ipairs(lst) do\n        if x % 2 == 1 then\n            sum = sum + x *\
    \ x\n        end\n    end\n    return sum\nend", "    local sum = 0\n    for _,v\
    \ in ipairs(lst) do\n        if v % 2 == 1 then\n            sum = sum + v*v\n\
    \        end\n    end\n    return sum\nend\nassert(double_the_difference({2, -4,\
    \ 3, -9, -2, 5}) == 89)\nassert(double_the_difference({-2, 4, -6, 8, -10}) ==\
    \ 0)\nassert(double_the_difference({}) == 0)", "    -- TODO: Write code here to\
    \ do the task.\n    -- Solution:\n    -- Check if the list is empty.\n    -- If\
    \ so, return 0.\n    -- If not, go through the list and return the sum of the\
    \ squares of the\n    -- odd numbers.\n    local d = 0\n    if #lst > 0 then\n\
    \        for i,j in ipairs(lst) do\n            if j%2 == 1 then\n           \
    \     d = d + j^2\n            end\n        end\n    end\n    return d\nend",
  "  --[[\n    >>> double_the_difference({1,2,3,4,5})\n    44\n    >>> double_the_difference({1,-3,3,4,5,7})\n\
    \    22\n    >>> double_the_difference({1,1,1,1,1,1})\n    0\n    >>> double_the_difference({})\n\
    \    0\n  ]]\n  local sum = 0\n  for i,v in ipairs(lst) do\n    if v > 0 and math.floor(v)\
    \ == v then\n      sum = sum + v^2\n    end\n  end\n  return sum*2\nend", "\t\
    local sum = 0\n\tfor _, v in ipairs(lst) do\n\t\tif type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n\t\t\tsum = sum + v^2\n\t\tend\n\tend\n\treturn sum\n\
    end", "    local function add_squares(acc, v)\n        if (type(v) == \"number\"\
    \ and v % 2 == 1 and v >= 0) then\n            return acc + v * v\n        else\n\
    \            return acc\n        end\n    end\n    return lst:reduce(add_squares,\
    \ 0)\nend", "    sum = 0\n    for i, v in ipairs(lst) do\n        if v < 0 or\
    \ v % 1 ~= 0 then\n            goto continue\n        end\n        if v % 2 ==\
    \ 1 then\n            sum = sum + (v * v)\n        end\n        ::continue::\n\
    \    end\n    return sum\nend", "\tlocal sum = 0\n\tfor _, number in ipairs(lst)\
    \ do\n\t\tif type(number) == \"number\" and number >= 0 and number % 2 == 1 then\n\
    \t\t\tsum = sum + (number * number)\n\t\tend\n\tend\n\treturn sum\nend", "  --\
    \ YOUR CODE HERE\n  local sum = 0\n  for i,v in ipairs(lst) do\n  \tsum = sum\
    \ + v\n  end\n  return sum\nend", "    local max_num = -math.huge\n    local min_num\
    \ = math.huge\n    local function check_if_number(num)\n        if type(num) ==\
    \ \"number\" and num > -math.huge and num < math.huge then\n            return\
    \ true\n        else\n            return false\n        end\n    end\n    for\
    \ _, num in ipairs(lst) do\n        if check_if_number(num) then\n           \
    \ if num > max_num then\n                max_num = num\n            end\n    \
    \        if num < min_num then\n                min_num = num\n            end\n\
    \        end\n    end\n    return 2 * (max_num - min_num)\nend", "    return 2\
    \ * (max(lst) - min(lst))\nend\nassert(double_the_difference{1, 5, 3, 2, 8} ==\
    \ 16)\nassert(double_the_difference{2, 4, 6, 8} == 0)\nassert(double_the_difference{-5,\
    \ -3, -1, 3, 5} == 12)\nassert(double_the_difference{-12} == 0)\nassert(double_the_difference{}\
    \ == 0)", "\tlocal new = {}\n\tfor i = 1, #lst do\n\t\tlocal a = lst[i]\n\t\t\
    if not (type(a) == \"number\" and a >= 0 and a % 1 == 0) then\n\t\t\ttable.insert(new,\
    \ a)\n\t\telse\n\t\t\ttable.insert(new, 2 * a)\n\t\tend\n\tend\n\treturn new\n\
    end", "  local total = 0\n  for _, num in ipairs(lst) do\n    -- Add code here\n\
    \  end\n  return total\nend", "    local sum = 0\n    for _, v in ipairs(lst)\
    \ do\n        if type(v) == \"number\" and v > 0 and math.floor(v) == v then\n\
    \            if v % 2 == 1 then\n                sum = sum + v * v\n         \
    \   end\n        end\n    end\n    return sum\nend", "  local sum = 0\n  for _,\
    \ n in ipairs(lst) do\n    if n < 0 then\n      n = -n\n    end\n    if (n % 2)\
    \ == 1 then\n      sum = sum + n * n\n    end\n  end\n  return sum\nend", "  \
    \  if lst == nil then\n        return 0\n    end\n    if lst[1] % 2 == 0 then\n\
    \        return double_the_difference(tail(lst))\n    end\n    if lst[1] < 0 then\n\
    \        return double_the_difference(tail(lst))\n    end\n    if math.floor(lst[1])\
    \ ~= lst[1] then\n        return double_the_difference(tail(lst))\n    end\n \
    \   return lst[1] * lst[1] + double_the_difference(tail(lst))\nend", "    -- YOUR\
    \ CODE HERE\n    sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 then\n\
    \            sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\n\
    end", "  local max_element = table.maxn(lst)\n  local min_element = 1\n  for i\
    \ = 1, table.maxn(lst) do\n    if (lst[i] < lst[min_element]) then\n      min_element\
    \ = i\n    end\n    if (lst[i] > lst[max_element]) then\n      max_element = i\n\
    \    end\n  end\n  local difference = lst[max_element] - lst[min_element]\n  return\
    \ difference * 2\nend", "\tlocal sum = 0\n\tfor i, v in ipairs(lst) do\n\t\tif\
    \ v < 0 then\n\t\t\tv = -v\n\t\tend\n\t\tif math.floor(v) == v then\n\t\t\tif\
    \ v % 2 == 1 then\n\t\t\t\tsum = sum + v * v\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ sum\nend", "    local sum = 0\n    for i, v in ipairs(lst) do\n        if type(v)\
    \ == \"number\" and v % 2 == 1 and v >= 0 then\n            sum = sum + v * v\n\
    \        end\n    end\n    return sum\nend", '  -- TODO', "  local sum = 0\n \
    \ for _,v in ipairs(lst) do\n    if type(v) == \"number\" and v%2 == 1 and v >=\
    \ 0 then\n      sum = sum + v^2\n    end\n  end\n  return sum\nend", "  -- YOUR\
    \ CODE HERE\n  return lst\nend", "  local sum_of_odd_square = 0\n  local last_max_number\
    \ = nil\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 then\n      sum_of_odd_square\
    \ = sum_of_odd_square + v * v\n    end\n    if last_max_number == nil or v > last_max_number\
    \ then\n      last_max_number = v\n    end\n  end\n  return last_max_number -\
    \ sum_of_odd_square\nend", "    local acc = 0\n    for i = 1, #lst do\n      \
    \  if lst[i] % 2 == 1 then\n            acc = acc + lst[i] ^ 2\n        end\n\
    \    end\n    return acc\nend", '    local sum = 0', "    -- lst : list of numbers\n\
    \    -- returns : number\n    sum_of_squares = 0\n    for i = 1, #lst do\n   \
    \     if not (lst[i] % 2 == 0) then\n            sum_of_squares = sum_of_squares\
    \ + lst[i] * lst[i]\n        end\n    end\n    return sum_of_squares\nend", " \
    \ -- YOUR CODE HERE\n  if lst == nil then\n    return 0\n  end\n  local sum =\
    \ 0\n  for i,v in ipairs(lst) do\n    if type(v) == \"number\" and v % 2 == 1\
    \ and v >= 0 then\n      sum = sum + v * v\n    end\n  end\n  return sum\nend",
  "  -- TODO: implement me\nend", "  local sum = 0\n  for i = 1, #lst do\n    if type(lst[i])\
    \ == \"number\" and lst[i] >= 0 and math.floor(lst[i]) == lst[i] then\n      if\
    \ lst[i] % 2 == 1 then\n        sum = sum + lst[i] * lst[i]\n      end\n    end\n\
    \  end\n  return sum\nend", "  local sum = 0\n  for i = 1, #lst do\n    local\
    \ val = lst[i]\n    if type(val) == \"number\" and val >= 0 and math.floor(val)\
    \ == val then\n      sum = sum + val * val\n    end\n  end\n  return sum\nend",
  "    local double_the_difference = 0\n    for i = 1, #lst do\n        local a =\
    \ lst[i]\n        for i = 1, #lst do\n            local b = lst[i]\n         \
    \   if a ~= b then\n                double_the_difference = double_the_difference\
    \ + a - b\n            end\n        end\n    end\n    return double_the_difference\n\
    end", "  return 2 * the_difference(lst)\nend", "    local result = 0\n    for\
    \ _, n in ipairs(lst) do\n        if (type(n) == \"number\") and (n % 2 == 1)\
    \ then\n            result = result + n * n\n        end\n    end\n    return\
    \ result\nend", "  return ((sum(lst)^2)-sum_of_squares(lst))*2\nend", "  local\
    \ sum = 0\n  local count = 0\n  local product = 0\n  for _, num in ipairs(lst)\
    \ do\n    if type(num) == \"number\" and num > 0 and math.floor(num) == num then\n\
    \      sum = sum + (num * num)\n      count = count + 1\n    end\n  end\n  product\
    \ = (count * (count + 1))/2\n  return product * sum\nend", "    local double =\
    \ 0\n    for i = 1, #lst - 1 do\n        if lst[i] == lst[i + 1] then\n      \
    \      double = double + lst[i] * 2\n        end\n    end\n    return double\n\
    end", "\tlocal sum = 0\n\tfor _, n in ipairs(lst) do\n\t\tif type(n) == \"number\"\
    \ and n >= 0 and math.floor(n) == n then\n\t\t\tsum = sum + (n * n)\n\t\tend\n\
    \tend\n\treturn sum\nend\nassert(double_the_difference({3,4,5,6,7,8,9}) == 283)\n\
    assert(double_the_difference({2,2.5,3,4,5}) == 97)\nassert(double_the_difference({1,1,1,1,1})\
    \ == 5)\nassert(double_the_difference({}) == 0)\nassert(double_the_difference({-3,3,-3,3})\
    \ == 18)\nassert(double_the_difference({3.7,3.9,3.7,3.9}) == 7)\nassert(double_the_difference({-1,0,1,2,3})\
    \ == 15)\nassert(double_the_difference({-1,-2,-3,-4,-5}) == 0)\nassert(double_the_difference({-2.5,-1.5,-1,-0.5,0,0.5,1,1.5,2.5})\
    \ == 29)\nassert(double_the_difference({-3.5,-3.4,-3.3,-3.2,-3.1,-3,-2.9,-2.8,-2.7})\
    \ == 35)\nassert(double_the_difference({5.5,5.5,5.5,5.5,5.5,5.5,5.5,5.5,5.5})\
    \ == 225)\nassert(double_the_difference({-5,-5,-5,-5,-5,-5,-5,-5,-5}) == 0)\n\
    assert(double_the_difference({-7,-8,-9,-10,-11,-12,-13,-14,-15}) == 0)\nassert(double_the_difference({7,8,9,10,11,12,13,14,15})\
    \ == 1225)\nassert(double_the_difference({-15,-14,-", "    local sum = 0\n   \
    \ for i, v in ipairs(lst) do\n        sum = sum + 2 * (v - get_average(lst))\n\
    \    end\n    return sum\nend", "  -- TODO: return the double of the difference\
    \ of the maximum and minimum\n  -- number in the list, ignoring non-integer and\
    \ negative numbers in the list.\n  -- If the input list is empty, return 0.\n\
    end", "    local i = 0\n    local sum = 0\n    while i < #lst do\n        i =\
    \ i + 1\n        if is_odd(lst[i]) then\n            sum = sum + (lst[i] * lst[i])\n\
    \        end\n    end\n    return sum\nend", "    local accum = 0\n    for i,\
    \ v in ipairs(lst) do\n        if is_positive_integer(v) then\n            accum\
    \ = accum + v ^ 2\n        end\n    end\n    return accum\nend", '    local sum
    = 0', "  local total = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 then\n\
    \      total = total + lst[i] * lst[i]\n    end\n  end\n  return total\nend",
  "    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 then\n  \
    \          sum = sum + lst[i] * lst[i]\n        end\n    end\n    return sum\n\
    end", '    local result = 0', "  if not lst or #lst == 0 then return 0 end\n \
    \ local sum = 0\n  for _, n in ipairs(lst) do\n    if n >= 0 and n % 1 == 0 and\
    \ n % 2 == 1 then\n      sum = sum + n * n\n    end\n  end\n  return sum\nend",
  "  local total = 0\n  local last = 0\n  for i, val in ipairs(lst) do\n    if i ==\
    \ 1 then\n      last = val\n    else\n      total = total + 2 * (val - last)\n\
    \      last = val\n    end\n  end\n  return total\nend", "  local sum = 0\n  for\
    \ i = 1, #lst do\n    local num = lst[i]\n    if num > 0 and math.floor(num) ==\
    \ num then\n      sum = sum + (num ^ 2)\n    end\n  end\n  return sum\nend", " \
    \ local result = 0\n  for i,value in ipairs(lst) do\n    if type(value) == \"\
    number\" and math.floor(value) == value and value > 0 then\n      result = result\
    \ + (value - 1)^2\n    end\n  end\n  return result\nend", "    local odd_square_sum\
    \ = 0\n    local even_square_sum = 0\n    for k, v in pairs(lst) do\n        if\
    \ type(v) == \"number\" and math.floor(v) == v and v >= 0 then\n            if\
    \ v % 2 == 0 then\n                even_square_sum = even_square_sum + v * v\n\
    \            else\n                odd_square_sum = odd_square_sum + v * v\n \
    \           end\n        end\n    end\n    return 2 * (odd_square_sum - even_square_sum)\n\
    end", "\t\n\tlocal i = 1\n\tlocal sum = 0\n\t\n\twhile lst[i] do\n\t\tif math.abs(lst[i])\
    \ % 2 == 1 then\n\t\t\tsum = sum + (lst[i] * lst[i])\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\t\n\treturn sum\n\t\nend", "  local result = 0\n  for i = 1, #lst do\n\
    \    local n = lst[i]\n    if type(n) == \"number\" and math.floor(n) == n and\
    \ n > 0 then\n      if n % 2 == 1 then\n        result = result + (n * n)\n  \
    \    end\n    end\n  end\n  return result\nend", "  -- TODO: implement double_the_difference\n\
    \  return 0\nend", "  local sum = 0\n  for i = 1, #lst do\n    if math.fmod(lst[i],\
    \ 2) == 1 then\n      sum = sum + lst[i]^2\n    end\n  end\n  return sum\nend",
  "    local double_nums = { }\n    for _, v in ipairs(lst) do\n        table.insert(double_nums,\
    \ v * 2)\n    end\n    return double_nums\nend", "\tlocal product = 0\n\tfor i,\
    \ v in ipairs(lst) do\n\t\tif v%2 == 1 then\n\t\t\tproduct = product + v*v\n\t\
    \tend\n\tend\n\treturn product\nend", "    local total = 0\n    for _, n in ipairs(lst)\
    \ do\n        if type(n) == \"number\" and n % 2 == 1 and n >= 0 then\n      \
    \      total = total + n * n\n        end\n    end\n    return total\nend", "\t\
    local double_diff = 0\n\tfor i,v in ipairs(lst) do\n\t\tdouble_diff = double_diff\
    \ + (2 * (i - v))\n\tend\n\treturn double_diff\nend", "  -- Define a function\
    \ that squares a number\n  local function square(n)\n    return n * n\n  end",
  "\tlocal sum = 0\n\tfor i, v in ipairs(lst) do\n\t\tif type(v) == \"number\" and\
    \ v > 0 and v % 2 == 1 then\n\t\t\tsum = sum + v*v\n\t\tend\n\tend\n\treturn sum\n\
    end", "  local difference = 0\n  for _,v in ipairs(lst) do\n    if type(v) ==\
    \ \"number\" and v > 0 and math.floor(v) == v then\n      difference = difference\
    \ + v^2\n    end\n  end\n  return difference * 2\nend", "\tlocal diff = 0\n\t\
    local first = 0\n\tlocal second = 0\n\tlocal third = 0\n\tlocal count = 0\n\t\
    for _, n in ipairs(lst) do\n\t\tcount = count + 1\n\t\tif count == 1 then\n\t\t\
    \tfirst = n\n\t\telseif count == 2 then\n\t\t\tsecond = n\n\t\telseif count ==\
    \ 3 then\n\t\t\tthird = n\n\t\tend\n\tend\n\t\n\tif count == 0 then\n\t\treturn\
    \ 0\n\telseif count == 1 then\n\t\treturn 2 * first\n\telseif count == 2 then\n\
    \t\treturn 2 * (second - first)\n\telse\n\t\treturn 2 * (third - second)\n\tend\n\
    end", "  -- Fill this in\nend", "  -- BEGIN CODE\n  sum = 0\n  for k,v in pairs(lst)\
    \ do\n    if v%2 ~= 0 then\n      sum = sum + v*v\n    end\n  end\n  return sum\n\
    \  -- END CODE\nend", "    -- Your code here\n    local sum = 0\n    for _,num\
    \ in ipairs(lst) do\n        if num % 2 == 1 then\n            sum = sum + num\
    \ * num\n        end\n    end\n    return sum\nend", "    local sum = 0\n    for\
    \ _, n in ipairs(lst) do\n        if n % 2 == 1 then\n            n = n * n\n\
    \            sum = sum + n\n        end\n    end\n    return sum\nend", "\tlocal\
    \ lst2 = lst:clone()\n\tlocal lst3 = lst:clone()\n\tlst:map(function(x)\n\t\t\
    return x * 2\n\tend)\n\tlocal sum = lst:foldl(0, function(acc, y)\n\t\treturn\
    \ acc + y\n\tend)\n\tlst2:map(function(x)\n\t\treturn x * x\n\tend)\n\tlocal sum2\
    \ = lst2:foldl(0, function(acc, y)\n\t\treturn acc + y\n\tend)\n\tlst3:map(function(x)\n\
    \t\treturn x * x * x\n\tend)\n\tlocal sum3 = lst3:foldl(0, function(acc, y)\n\t\
    \treturn acc + y\n\tend)\n\treturn {sum = sum, sum2 = sum2, sum3 = sum3}\nend",
  "  return utils.reduce(lst,\n    function(num, memo)\n      if type(num) == \"number\"\
    \ and num % 2 == 1 then\n        return memo + num * num\n      else\n       \
    \ return memo\n      end\n    end,\n    0)\nend", "    local difference = 0\n\
    \    local num_odds = 0\n    for _, num in ipairs(lst) do\n        if type(num)\
    \ == \"number\" and math.floor(num) == num and num > 0 then\n            num_odds\
    \ = num_odds + 1\n            if num % 2 == 1 then\n                difference\
    \ = difference + num\n            end\n        end\n    end\n    return num_odds\
    \ - difference\nend", "    -- ...\nend", "    sum = 0\n    for i,v in ipairs(lst)\
    \ do\n        if not (v % 2 == 0) then\n            sum = sum + (v * v)\n    \
    \    end\n    end\n    return sum\nend", "  --[[\n  local function is_odd(x)\n\
    \    return x % 2 == 1\n  end\n  --]]\n  --[[\n  local function is_odd(x)\n  \
    \  return x % 2 == 1\n  end\n  --]]\n  local function is_odd(x)\n    return x\
    \ % 2 == 1\n  end\n  local function is_whole(x)\n    return x % 1 == 0\n  end\n\
    \  local function is_nonnegative(x)\n    return x >= 0\n  end\n  local function\
    \ square(x)\n    return x * x\n  end\n  local function square_if(f, x)\n    if\
    \ f(x) then\n      return square(x)\n    else\n      return 0\n    end\n  end\n\
    \  local function sum(a, b)\n    return a + b\n  end\n  --[[\n  local function\
    \ is_odd(x)\n    return x % 2 == 1\n  end\n  --]]\n  local function square_if_odd(x)\n\
    \    return square_if(is_odd, x)\n  end\n  local function square_if_odd_and_nonnegative_and_whole(x)\n\
    \    return square_if(function(x) return is_odd(x) and is_nonnegative(x) and is_whole(x)\
    \ end, x)\n  end\n  --[[\n  local function is_odd(x)\n    return x % 2 == 1\n\
    \  end\n  --]]\n  local function square_odd_nonnegative_whole_numbers(lst)\n \
    \   return map(square_if_odd_and_nonnegative_and_whole, lst)\n  end\n  local function\
    \ sum_squares(lst)\n    return fold(sum, 0, square_odd_nonnegative_whole_numbers(lst))\n\
    \  end\n  return sum_squares(lst)\nend", "    local list_sum = 0\n    local squares_sum\
    \ = 0\n    for i, num in ipairs(lst) do\n        if num % 2 == 1 and num >= 0\
    \ and num % 1 == 0 then\n            list_sum = list_sum + num\n            squares_sum\
    \ = squares_sum + (num * num)\n        end\n    end\n    return (list_sum * list_sum)\
    \ - squares_sum\nend", "  local count = 0\n  for _, item in ipairs(lst) do\n \
    \   if type(item) == \"number\" and math.floor(item) == item and item >= 0 then\n\
    \      count = count + item ^ 2\n    end\n  end\n  return count\nend", "    local\
    \ dif = 0\n    for i, v in ipairs(lst) do\n        dif = dif + (v - (i - 1))\n\
    \    end\n    return dif * 2\nend\nassert_equal(28, double_the_difference({1,\
    \ 4, 6, 8, 11}))\nassert_equal(12, double_the_difference({2, 3, 5, 6, 8}))\nassert_equal(2,\
    \ double_the_difference({0, 2, 4, 6, 8}))\nassert_equal(0, double_the_difference({1,\
    \ 3, 5, 7, 9}))\nassert_equal(0, double_the_difference({}))", "    local sum =\
    \ 0\n    for i, j in ipairs(lst) do\n        if type(j) == \"number\" and not\
    \ math.type(j) and j % 2 == 1 then\n            sum = sum + j * j\n        end\n\
    \    end\n    return sum\nend", "    -- TODO\nend", "  local output = 0\n  for\
    \ k, v in pairs(lst) do\n    if type(v) == \"number\" and v % 2 == 1 then\n  \
    \    output = output + v * v\n    end\n  end\n  return output\nend", "    local\
    \ ret = 0\n    for _,num in ipairs(lst) do\n        if math.fmod(num,2) ~= 0 then\n\
    \            ret = ret + num * num\n        end\n    end\n    return ret\nend",
  "    local max = 0\n    local min = 0\n    local first = true\n    for i, num in\
    \ ipairs(lst) do\n        if num < min or first then\n            min = num\n\
    \        end\n        if num > max or first then\n            max = num\n    \
    \    end\n        first = false\n    end\n    return (max - min) * 2\nend", " \
    \   return 0\nend", "  local sum = 0\n  for _, v in ipairs(lst) do\n    if type(v)\
    \ == \"number\" and v > 0 and math.floor(v) == v then\n      sum = sum + v * v\n\
    \    end\n  end\n  return sum\nend", "\tlocal sum_of_differences = 0", "  local\
    \ sum = 0\n  for k, v in pairs(lst) do\n    if type(v) == \"number\" and math.floor(v)\
    \ == v and v > 0 then\n      if v % 2 == 1 then\n        sum = sum + v^2\n   \
    \   end\n    end\n  end\n  return sum\nend", "    local sum = 0\n    for i,v in\
    \ ipairs(lst) do\n        if v ~= nil and type(v) == \"number\" and v > 0 and\
    \ math.floor(v) == v then\n            if v % 2 == 1 then\n                sum\
    \ = sum + v * v\n            end\n        end\n    end\n    return sum\nend",
  "    return {}\nend", "  local total = 0\n  for i, v in ipairs(lst) do\n    if i\
    \ % 2 == 0 then\n      total = total + (v - lst[i - 1]) * 2\n    end\n  end\n\
    \  return total\nend", "\tlocal sum = 0\n\tfor i,v in ipairs(lst) do\n\t\tif v\
    \ % 2 == 1 then\n\t\t\tsum = sum + v*v\n\t\tend\n\tend\n\treturn sum\nend", " \
    \   local product = 1\n    local c = 1\n    local max = 0\n    local min = 0\n\
    \    local d = 0\n    for _, v in ipairs(lst) do\n        if v % 2 == 1 then\n\
    \            c = v^2\n            if c > max then\n                max = c\n \
    \           end\n            if min == 0 then\n                min = c\n     \
    \       elseif c < min then\n                min = c\n            end\n      \
    \  end\n    end\n    d = max - min\n    if d > 0 then\n        return d * 2\n\
    \    else\n        return 0\n    end\nend", "  local sum = 0\n  for i, v in ipairs(lst)\
    \ do\n    if type(v) == \"number\" and math.floor(v) == v and v > 0 then\n   \
    \   if math.floor(v) % 2 == 1 then\n        sum = sum + (v*v)\n      end\n   \
    \ end\n  end\n  return sum\nend", "    local sum_of_squares = 0\n    for _, x\
    \ in ipairs(lst) do\n        if type(x) == \"number\" and x >= 0 and x % 2 ==\
    \ 1 then\n            sum_of_squares = sum_of_squares + x * x\n        end\n \
    \   end\n    return sum_of_squares\nend", "  -- YOUR CODE HERE\n  local result\
    \ = 0\n  local sum = 0\n  local square = 0\n  for i, num in ipairs(lst) do\n \
    \   if math.floor(num) == num and num > 0 then\n      sum = sum + num\n      square\
    \ = square + num * num\n    end\n  end\n  result = 2 * (sum * sum - square)\n\
    \  return result\nend", "    return reduce(lst, function(x,y) return math.abs(x-y)\
    \ end) * 2\nend", "    local sum = 0\n    local count = 0\n    local i = 1\n \
    \   while i <= #lst do\n        if (lst[i] % 2 == 1) and (type(lst[i]) == \"number\"\
    ) and (lst[i] >= 0) then\n            sum = sum + lst[i] * lst[i]\n          \
    \  count = count + 1\n        end\n        i = i + 1\n    end\n    return count\
    \ == 0 and 0 or (sum - (sum / count))\nend", "    local total = 0\n    for _,\
    \ val in ipairs(lst) do\n        if val > 0 and math.floor(val) == val then\n\
    \            if val % 2 == 1 then\n                total = total + val * val\n\
    \            end\n        end\n    end\n    return total\nend", "  local sum =\
    \ 0\n  local len = #lst\n  for i = 1, len, 1 do\n    if lst[i] % 2 == 1 then\n\
    \      sum = sum + lst[i] ^ 2\n    end\n  end\n  return sum\nend", "    --[[ Return\
    \ the sum of squares of the numbers in the list that are odd.\n    Ignore numbers\
    \ that are negative or not integers. If the input list is\n    empty, return 0.\n\
    \    ]]--\n    local result = 0\n    -- Your code goes here!\n    -- result =\
    \ 0\n    -- for i,v in ipairs(lst) do\n    --     if type(v) == \"number\" and\
    \ v > 0 and v%2 == 1 then\n    --         result = result + v^2\n    --     end\n\
    \    -- end\n    -- return result\n    return lst\n        :filter(function(v)\n\
    \            return type(v) == \"number\" and v > 0 and v%2 == 1\n        end)\n\
    \        :map(function(v)\n            return v^2\n        end)\n        :foldl(function(a,b)\n\
    \            return a+b\n        end, 0)\nend", "    return lst\nend", "    --\
    \ YOUR CODE HERE\n    local sum = 0\n    for i, v in ipairs(lst) do\n        if\
    \ v % 2 == 1 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum\nend", "\tlocal s = 0\n\tfor i, v in ipairs(lst) do\n\t\tif math.mod(v,\
    \ 2) == 1 then\n\t\t\ts = s + v * v\n\t\tend\n\tend\n\treturn s\nend", "\t-- Create\
    \ a variable to store the doubles of differences\n\tlocal doubles = {}\n\t-- Iterate\
    \ through the list and double the differences of the adjacent numbers\n\tfor i=1,\
    \ #lst-1 do\n\t\t-- Append to the list the doubled difference of adjacent numbers\n\
    \t\ttable.insert(doubles, 2*(lst[i+1]-lst[i]))\n\tend\n\t-- Return the list of\
    \ doubles\n\treturn doubles\nend", "    -- TODO: define this function!\n    --\
    \ The line below is just a placeholder and may be changed or removed.\n    return\
    \ nil\nend", "    local sum = 0\n    for i = 1, #lst do\n        local num = lst[i]\n\
    \        if (num % 2 == 1) then\n            sum = sum + num * num\n        end\n\
    \    end\n    return sum\nend", "    local sum = 0\n    for i = 1, #lst do\n \
    \       if (type(lst[i]) == \"number\") and (lst[i] % 2 == 1) then\n         \
    \   sum = sum + (lst[i] * lst[i])\n        end\n    end\n    return sum\nend",
  "    local s = 0\n    for _, n in ipairs(lst) do\n        if n % 2 == 1 then\n \
    \           s = s + n^2\n        end\n    end\n    return s\nend", "    local\
    \ sum = 0\n    for _, v in ipairs(lst) do\n        if (v % 2 == 1) then\n    \
    \        sum = sum + v * v\n        end\n    end\n    return sum\nend", "  --\
    \ PUT YOUR CODE HERE\n  local sum = 0\n  for k, v in pairs(lst) do\n    if type(v)\
    \ == \"number\" and v > 0 and math.floor(v) == v then\n      if v % 2 == 1 then\n\
    \        sum = sum + v^2\n      end\n    end\n  end\n  return sum\nend", "   \
    \ local sum = 0\n    for _, v in ipairs(lst) do\n        if math.type(v) == \"\
    integer\" and v >= 0 then\n            sum = sum + v * v\n        end\n    end\n\
    \    return sum\nend", "\treturn 2 * (sum_list(lst) - sum_odd_squares(lst))\n\
    end", "\tlocal result = 0\n\tfor k, v in pairs(lst) do\n\t\tif v % 2 == 1 then\n\
    \t\t\tresult = result + v^2\n\t\tend\n\tend\n\treturn result\nend", "  local sum\
    \ = 0\n  for i, n in ipairs(lst) do\n    if n % 2 == 1 then\n      sum = sum +\
    \ n * n\n    end\n  end\n  return sum\nend", "    local sum = 0\n    for i = 1,\
    \ #lst do\n        local value = lst[i]\n        if type(value) == \"number\"\
    \ and value % 2 == 1 then\n            sum = sum + value^2\n        end\n    end\n\
    \    return sum\nend", '  local result = 0', "    local sum_of_squares = 0\n \
    \   local i = 1\n    while i <= #lst do\n        local num = lst[i]\n        if\
    \ num > 0 and num == math.floor(num) and num % 2 == 1 then\n            sum_of_squares\
    \ = sum_of_squares + num * num\n        end\n        i = i + 1\n    end\n    return\
    \ sum_of_squares\nend", "    local sum = 0\n    for k, v in pairs(lst) do\n  \
    \      if type(v) == \"number\" and v >= 0 and v%2 == 1 then\n            sum\
    \ = sum + v*v\n        end\n    end\n    return sum\nend", "\tlocal sum = 0\n\t\
    for _, val in ipairs(lst) do\n\t\tif (val % 2 == 1) then\n\t\t\tsum = sum + val\
    \ * val\n\t\tend\n\tend\n\treturn sum\nend", "    local diff = 0\n    local temp\
    \ = 0\n    for i, v in ipairs(lst) do\n        if (type(v) == \"number\") and\
    \ (v >= 0) and (v % 2 == 1) then\n            diff = diff + v\n        end\n \
    \   end\n    temp = diff * 2\n    return temp\nend", "    local diff, rem = 0,\
    \ 0\n    for i, v in ipairs(lst) do\n        diff = diff + v\n        rem = rem\
    \ + v * v\n    end\n    return diff * 2 - rem\nend", "  if lst == nil then return\
    \ 0 end\n  local total = 0\n  for i = 1, #lst do\n    local val = lst[i]\n   \
    \ if val >= 0 and val % 1 == 0 and val % 2 == 1 then\n      total = total + (val\
    \ * val)\n    end\n  end\n  return total\nend", "  local sum = 0\n  for _, number\
    \ in ipairs(lst) do\n    if is_int(number) and number >= 0 then\n      sum = sum\
    \ + number^2\n    end\n  end\n  return sum\nend\nassert(double_the_difference({3,\
    \ -1, 2.5, 0, -2, 1.75}) == 25)\nassert(double_the_difference({2, 3, -4, 5}) ==\
    \ 74)\nassert(double_the_difference({}) == 0)\nprint(\"Passed!\")", "  -- YOUR\
    \ CODE HERE\n  local difference = 0\n  for i, v in ipairs(lst) do\n    if math.floor(v)\
    \ == v and v > 0 then\n      if v % 2 == 1 then\n        difference = difference\
    \ + (v * v)\n      end\n    end\n  end\n  return difference\nend", "    -- Determine\
    \ the double_the_difference of the list.\n    -- Return 0 if the list is empty.\n\
    \    return 0\nend", "  local sum = 0\n  for _,v in ipairs(lst) do\n    if (v\
    \ % 2) == 1 then\n      sum = sum + v*v\n    end\n  end\n  return sum\nend", " \
    \ local result = 0\n  for _, n in ipairs(lst) do\n    if n > 0 and n % 2 == 1\
    \ then\n      result = result + n * n\n    end\n  end\n  return result\nend",
  "    local diffs = {}\n    for i = 1, #lst - 1 do\n        diffs[i] = lst[i+1] -\
    \ lst[i]\n    end\n    local doubled_diffs = {}\n    for i = 1, #diffs do\n  \
    \      doubled_diffs[i] = diffs[i] * 2\n    end\n    return doubled_diffs\nend",
  "\tlocal a = 0\n\tlocal b = 0\n\tfor _, value in ipairs(lst) do\n\t\tif (value >\
    \ 0) and (value%2==0) then\n\t\t\ta = a + value\n\t\telseif (value > 0) and (value%2==1)\
    \ then\n\t\t\tb = b + value\n\t\tend\n\tend\n\treturn a - 2*b\nend", "    -- YOUR\
    \ CODE HERE\n    local sum = 0\n    for _, v in ipairs(lst) do\n        if v %\
    \ 2 == 1 then\n            sum = sum + v * v\n        end\n    end\n    return\
    \ sum\nend", "\tif #lst == 0 then\n\t\treturn 0\n\tend\n\treturn dbl_diff(lst,\
    \ 1)\nend", "\tlocal sum = 0\n\tfor _,i in ipairs(lst) do\n\t\tif type(i) == \"\
    number\" and (i >= 0) and (i%2 == 1) then\n\t\t\tsum = sum + i*i\n\t\tend\n\t\
    end\n\treturn sum\nend", "    local sum = 0\n    for i, v in ipairs(lst) do\n\
    \        if v % 2 == 1 then\n            sum = sum + v*v\n        end\n    end\n\
    \    return sum\nend", "  if not lst then\n    error('double_the_difference: lst\
    \ is nil')\n  end\n  if #lst < 2 then\n    error('double_the_difference: lst must\
    \ have at least 2 values')\n  end\n  local diff = math.abs(lst[1] - lst[2])\n\
    \  return diff * 2\nend", "  -- TODO: Implement this\nend", "  local function\
    \ is_odd(n)\n    return type(n) == \"number\" and n % 2 == 1\n  end\n  local function\
    \ sum_squares(total, n)\n    return total + n * n\n  end\n  return reduce(sum_squares,\
    \ 0, filter(is_odd, lst))\nend", "    -- your code here\nend", "  return reduce(operator.add,\
    \ map(operator.mul, map(operator.sub, lst, range(1, #lst)), range(1, #lst)), 0)\n\
    end", "    local sum = 0\n    for i = 1, #lst do\n        if (lst[i] % 2 == 1)\
    \ then\n            sum = sum + lst[i]^2\n        end\n    end\n    return sum\n\
    end", "  -- Empty list should return 0.\n  -- Negative numbers should be ignored.\n\
    \  -- Fractions should be ignored.\n  -- Odd numbers should be doubled.\n  --\
    \ Even numbers should be ignored.\n  -- (c:cs) means the first value is c and\
    \ the remaining ones are cs.\n  if #lst == 0 then\n    return 0\n  elseif lst[1]\
    \ < 0 or lst[1] % 1 ~= 0 then\n    return double_the_difference(table.remove(lst,\
    \ 1))\n  elseif lst[1] % 2 == 0 then\n    return double_the_difference(table.remove(lst,\
    \ 1))\n  else\n    return lst[1] * 2 + double_the_difference(table.remove(lst,\
    \ 1))\n  end\nend", "  -- YOUR CODE HERE\n  return 0\nend", "\tlocal newlst =\
    \ {}\n\tlocal count = 1\n\tfor x in pairs(lst) do\n\t\tnewlst[count] = 2*(x -\
    \ lst[x])\n\t\tcount = count + 1\n\tend\n\treturn newlst\nend", "    if type(lst)\
    \ ~= \"table\" then\n        return nil\n    end\n    local sum = 0\n    for i,\
    \ v in ipairs(lst) do\n        if type(v) == \"number\" and v >= 0 and v % 1 ==\
    \ 0 then\n            if v % 2 == 1 then\n                sum = sum + v * v\n\
    \            end\n        end\n    end\n    return sum\nend", "    -- Replace\
    \ this stub with the correct implementation.\nend", "  local function helper(lst,\
    \ acc)\n    if lst == nil then\n      return acc\n    elseif type(lst.first) ~=\
    \ \"number\" then\n      return helper(lst.rest, acc)\n    elseif lst.first <\
    \ 0 then\n      return helper(lst.rest, acc)\n    elseif lst.first%2 == 0 then\n\
    \      return helper(lst.rest, acc)\n    else\n      return helper(lst.rest, acc\
    \ + lst.first * lst.first)\n    end\n  end\n  return helper(lst, 0)\nend", " \
    \   local x = 0\n    local i = 1\n    while lst[i] ~= nil do\n        if type(lst[i])\
    \ == \"number\" and math.floor(lst[i]) == lst[i] and lst[i] >= 0 then\n      \
    \      x = x + 2 * math.abs(lst[i])\n        end\n        i = i + 1\n    end\n\
    \    return x\nend", "    -- YOUR CODE HERE\n    if #lst == 0 then\n        return\
    \ 0\n    end\n    local first, second, third = 0, 0, 0\n    for i = 1, #lst do\n\
    \        if lst[i]%2 == 1 then\n            first = first + lst[i]\n        end\n\
    \    end\n    for i = 1, #lst do\n        if lst[i]%2 == 1 then\n            second\
    \ = second + lst[i]^2\n        end\n    end\n    third = first^2 - second\n  \
    \  return third\nend", "    local sum = 0\n    for i, x in ipairs(lst) do\n  \
    \      if type(x) == \"number\" and math.floor(x) == x and x > 0 then\n      \
    \      local square = x * x\n            if square % 2 == 1 then\n           \
    \     sum = sum + square\n            end\n        end\n    end\n    return sum\n\
    end", "    local function double_diff(min, max)\n        return (max - min) *\
    \ 2\n    end\n    return reduce(double_diff, lst)\nend", "  -- YOUR CODE HERE\n\
    \  return 0\nend", "  local s = 0\n  for _, v in ipairs(lst) do\n    if type(v)\
    \ == \"number\" and v >= 0 and math.floor(v) == v then\n      s = s + v * v\n\
    \    end\n  end\n  return s\nend", "    local sum = 0\n    for _, x in ipairs(lst)\
    \ do\n        if isInteger(x) and x > 0 then\n            sum = sum + x * x\n\
    \        end\n    end\n    return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
