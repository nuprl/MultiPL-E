language: lua
name: HumanEval_86_anti_shuffle
results:
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:split(' ')\n    local result = {}\n    for i,word in ipairs(words)\
    \ do\n        table.insert(result, table.concat(word:chars():sort(), ''))\n  \
    \  end\n    return table.concat(result, ' ')\nend\nassert(anti_shuffle('Hello\
    \ World') == 'ehllo dlorw')\nassert(anti_shuffle('The quick brown fox jumps over\
    \ the lazy dog') ==\n       'behinorw chkmpsu jxouy efhoqt vdeerz atgw')\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp4tes8cul.lua:8: attempt to call a nil value (method 'split')\n\
    stack traceback:\n\t/tmp/tmp4tes8cul.lua:8: in local 'anti_shuffle'\n\t/tmp/tmp4tes8cul.lua:15:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return s:gsub(\"%w+\", function(w)\n        return w:gsub(\".\", function(c)\n\
    \            return string.char(c:byte() + 1)\n        end)\n    end)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yvr6195.lua:18:\
    \ expected: \"Hi\"\nactual: \"Ij\"\nstack traceback:\n\t/tmp/tmp0yvr6195.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {};\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ table.concat(table.sort(iter.list(w))) );\n  end\n  return table.concat(words,\
    \ \" \");\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2_3pap7u.lua:10:\
    \ attempt to index a nil value (global 'iter')\nstack traceback:\n\t/tmp/tmp2_3pap7u.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp2_3pap7u.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  if not s then return nil end\n  local t = {}\n  for word in s:gmatch('[^%s]+')\
    \ do\n    table.insert(t, word:gsub('.', function(c)\n      return string.char(string.byte(c))\n\
    \    end))\n  end\n  return table.concat(t, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp54jmd9lb.lua:11:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp54jmd9lb.lua:11: in local 'candidate'\n\t/tmp/tmp54jmd9lb.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  --TODO: Implement your function here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy2njsz9i.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpy2njsz9i.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local t={}\n  for w in s:gmatch(\"%S+\") do\n    local t2={}\n    for c in\
    \ w:gmatch(\".\") do\n      table.insert(t2, c)\n    end\n    table.sort(t2)\n\
    \    table.insert(t, table.concat(t2))\n  end\n  return table.concat(t,\" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ table.concat(w:gmatch(\".\"), \"\"))\n    end\n    table.sort(words)\n    return\
    \ table.concat(words, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzwloh1pa.lua:10:\
    \ bad argument #1 to 'concat' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpzwloh1pa.lua:10: in local 'candidate'\n\t/tmp/tmpzwloh1pa.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal words = {}\n\tlocal w\n\tfor w in s:gmatch(\"%w+\") do\n\t\ttable.insert(words,\
    \ w)\n\tend\n\treturn table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1j71bsa0.lua:20:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp1j71bsa0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for word in s:gmatch(\"[^%s]+\") do\n        table.insert(words,\
    \ word)\n    end\n    for i, word in ipairs(words) do\n        words[i] = word:gsub(\"\
    .\", function(c)\n            return string.char(string.byte(c))\n        end)\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97bxj2zd.lua:24:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp97bxj2zd.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- Write your code here\n    local t = {}\n    s = s .. \" \"\n    local\
    \ i = 1\n    while i <= #s do\n        local c = s:sub(i, i)\n        if c ==\
    \ \" \" then\n            table.insert(t, c)\n            i = i + 1\n        else\n\
    \            local j = i\n            while j <= #s and s:sub(j, j) ~= \" \" do\n\
    \                j = j + 1\n            end\n            local sub = s:sub(i,\
    \ j - 1)\n            local word = {}\n            for k = 1, #sub do\n      \
    \          table.insert(word, sub:sub(k, k))\n            end\n            table.sort(word)\n\
    \            table.insert(t, table.concat(word))\n            i = j\n        end\n\
    \    end\n    return table.concat(t)\nend\nassert(anti_shuffle(\"I am a student\"\
    ) == \"aI aam adeinstt\")\nassert(anti_shuffle(\"So cool!\") == \"!coloS\")\n\
    assert(anti_shuffle(\"\") == \"\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmptbeohngu.lua:34: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmptbeohngu.lua:34: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxasshhg.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxxasshhg.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tfor k, v in pairs(s:gmatch(\"%S+\")) do\n\t\tlocal chars = {}\n\t\tfor c in\
    \ v:gmatch(\".\") do\n\t\t\ttable.insert(chars, c)\n\t\tend\n\t\ttable.sort(chars)\n\
    \t\ts = s:gsub(v, table.concat(chars), 1)\n\tend\n\treturn s\nend\nassert(anti_shuffle(\"\
    antidisestablishmentarianism\") == \"aaaabeiiimnnnnsstttt\")\nassert(anti_shuffle(\"\
    the quick brown fox jumps over the lazy dog\") == \"ehhttkkllooqrrsuw  bcdffjmnooppxx\
    \ yvzz\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpnu36vta2.lua:8: bad argument #1 to 'for iterator' (table expected,\
    \ got function)\nstack traceback:\n\t[C]: in function 'next'\n\t/tmp/tmpnu36vta2.lua:8:\
    \ in local 'anti_shuffle'\n\t/tmp/tmpnu36vta2.lua:18: in main chunk\n\t[C]: in\
    \ ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  return sort(split(s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwihkpfpv.lua:8:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpwihkpfpv.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwihkpfpv.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ word)\n  end\n  local anti = {}\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local chars = {}\n    for c in word:gmatch(\".\") do\n      table.insert(chars,\
    \ c)\n    end\n    table.sort(chars)\n    table.insert(anti, table.concat(chars))\n\
    \  end\n  return table.concat(anti, \" \")\nend\nassert(anti_shuffle(\"a cat\"\
    ) == \"a act\")\nassert(anti_shuffle(\"as soon as possible\") == \"as aoopnss\
    \ soon\")\nassert(anti_shuffle(\"abc cab\") == \"abc abc\")\nassert(anti_shuffle(\"\
    abc cab cba\") == \"abc abc abc\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp_9w9u1b_.lua:25: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp_9w9u1b_.lua:25: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal t = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\ttable.insert(t, table.concat(split(w:lower())))\n\
    \tend\n\treturn table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpensmetnk.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpensmetnk.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpensmetnk.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal result = {}\n\tlocal lst = {}\n\tfor word in s:gmatch(\"[^%s]+\") do\n\
    \t\ttable.insert(lst, word)\n\tend\n\tfor i, word in ipairs(lst) do\n\t\ttable.insert(result,\
    \ word:gsub(\".\", function(c)\n\t\t\treturn string.char(string.byte(c))\n\t\t\
    end))\n\tend\n\treturn table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2ic0pkj1.lua:14:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp2ic0pkj1.lua:14: in local 'candidate'\n\t/tmp/tmp2ic0pkj1.lua:24: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return s:gsub('[^%s]+', function(w)\n        return w:gsub('.', function(c)\n\
    \            return {c}\n        end):sort():concat()\n    end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz0n17yy2.lua:9:\
    \ invalid replacement value (a table)\nstack traceback:\n\t/tmp/tmpz0n17yy2.lua:9:\
    \ in function </tmp/tmpz0n17yy2.lua:8>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmpz0n17yy2.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpz0n17yy2.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   local elements = string.split(s, \" \")\n   for i, e in ipairs(elements) do\n\
    \      elements[i] = string.split(e, \"\")\n      table.sort(elements[i])\n  \
    \    elements[i] = table.concat(elements[i])\n   end\n   return table.concat(elements,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppdp1dhss.lua:8:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmppdp1dhss.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmppdp1dhss.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local t = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(t,\
    \ w:gsub(\".\", function(c) return string.char(255 - string.byte(c)) end))\n \
    \   end\n    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnvzoj_xq.lua:10:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpnvzoj_xq.lua:10: in local 'candidate'\n\t/tmp/tmpnvzoj_xq.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local lst = {}\n  local order = function(a, b)\n    local a_lst = {}\n    local\
    \ b_lst = {}\n    local a_str = \"\"\n    local b_str = \"\"\n    for i=1, string.len(a)\
    \ do\n      table.insert(a_lst, string.byte(a, i))\n    end\n    for i=1, string.len(b)\
    \ do\n      table.insert(b_lst, string.byte(b, i))\n    end\n    table.sort(a_lst)\n\
    \    table.sort(b_lst)\n    for i=1, #a_lst do\n      a_str = a_str .. string.char(a_lst[i])\n\
    \    end\n    for i=1, #b_lst do\n      b_str = b_str .. string.char(b_lst[i])\n\
    \    end\n    return a_str < b_str\n  end\n  for w in string.gmatch(s, \"%S+\"\
    ) do\n    table.insert(lst, w)\n  end\n  table.sort(lst, order)\n  return table.concat(lst,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppe584mae.lua:41:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmppe584mae.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local t = {}\n  for word in s:gmatch(\"%S+\") do\n    t[#t+1] = word:gsub(\"\
    (.)\", function(a) return table.concat(string.sort(a), \"\") end)\n  end\n  return\
    \ table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzuzqxput.lua:10:\
    \ attempt to call a nil value (field 'sort')\nstack traceback:\n\t/tmp/tmpzuzqxput.lua:10:\
    \ in function </tmp/tmpzuzqxput.lua:10>\n\t[C]: in function 'string.gsub'\n\t\
    /tmp/tmpzuzqxput.lua:10: in local 'candidate'\n\t/tmp/tmpzuzqxput.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local t = s:split(\" \")\n  local res = {}\n  for i, w in ipairs(t) do\n  \
    \  local chars = {}\n    for c in w:gmatch(\".\") do\n      table.insert(chars,\
    \ c)\n    end\n    table.sort(chars)\n    res[i] = table.concat(chars)\n  end\n\
    \  return table.concat(res, \" \")\nend\nassert(anti_shuffle(\"it is more than\
    \ a bird it is a plane\") == \"a a beiiinrttt ddeehmnprs\")\nassert(anti_shuffle(\"\
    is more than a bird it is a plane\") == \"a a beiiinrttt ddeehmnprs\")\nassert(anti_shuffle(\"\
    it is more than a bird it is a\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"\
    it is more than a bird it is\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"\
    it is more than a bird it\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"\
    it is more than a bird\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"\
    it is more than a\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"\
    it is more than\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"it\
    \ is more\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"it is\")\
    \ == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"it\") == \"a a beiiinrttt\
    \ ddeehmnps\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpdhx7wob1.lua:8: attempt to call a nil value (method 'split')\n\
    stack traceback:\n\t/tmp/tmpdhx7wob1.lua:8: in local 'anti_shuffle'\n\t/tmp/tmpdhx7wob1.lua:20:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local tab = string_split(s)\n  local res = {}\n  for i,w in ipairs(tab) do\n\
    \    table.insert(res,string_join(string_sort(w)))\n  end\n  return string_join(res)\n\
    end\nassert(anti_shuffle(\"abds\") == \"abds\")\nassert(anti_shuffle(\"\") ==\
    \ \"\")\nassert(anti_shuffle(\"I am not a hacker\") == \"I am not a acehkrr\"\
    )\nassert(anti_shuffle(\"abc dgbgfefa\") == \"abc aeffggb\")\nassert(anti_shuffle(\"\
    the abc is awesome\") == \"the abc aeemosw\")\nassert(anti_shuffle(\"the quick\
    \ brown fox jumps over the lazy dog\") == \"ehkortu ahoctbe ejmpsu vzzey dg\"\
    )\nassert(anti_shuffle(\"this is not a code challenge\") == \"ehhilnoo stta acde\"\
    )\nassert(anti_shuffle(\"a rose by any other name smells as sweet\") == \"a abdehklorr\
    \ swstee\")\nassert(anti_shuffle(\"this is a sample sentence\") == \"ehilnst \
    \ aaaeeimps\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpt62pibxl.lua:8: attempt to call a nil value (global 'string_split')\n\
    stack traceback:\n\t/tmp/tmpt62pibxl.lua:8: in local 'anti_shuffle'\n\t/tmp/tmpt62pibxl.lua:15:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local tab = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(tab, word)\n\
    \  end\n  local newtab = {}\n  for _,word in ipairs(tab) do\n    table.insert(newtab,\
    \ word:gsub(\"(.)\", function(c) return c .. \" \" end))\n  end\n  local res =\
    \ \"\"\n  for _,word in ipairs(newtab) do\n    res = res .. \" \" .. word:gsub(\"\
    (.)\", function(c) return c:upper() end)\n  end\n  return res:sub(2)\nend\nassert(anti_shuffle(\"\
    hello how are you\") == \"E H HLLO OW RSTU\")\nassert(anti_shuffle(\"abcd efgh\
    \ ijkl mnop\") == \"A B C D E F G H I J K L M N O P\")\nassert(anti_shuffle(\"\
    Hello world!\") == \"! D E H L L O R W\")\nassert(anti_shuffle(\"i am a student\"\
    ) == \"A A D E I M N S T T U\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpatbw1sic.lua:14: bad argument #2 to 'insert' (number expected,\
    \ got string)\nstack traceback:\n\t[C]: in function 'table.insert'\n\t/tmp/tmpatbw1sic.lua:14:\
    \ in local 'anti_shuffle'\n\t/tmp/tmpatbw1sic.lua:22: in main chunk\n\t[C]: in\
    \ ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local result = \"\"\n  for word in s:gmatch(\"%S+\") do\n    local w = {}\n\
    \    for i = 1, #word do\n      w[#w + 1] = word:sub(i, i)\n    end\n    table.sort(w)\n\
    \    local word = table.concat(w)\n    result = result .. word .. \" \"\n  end\n\
    \  return result:sub(1, #result - 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxasshhg.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpxxasshhg.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal tab = {}\n\tlocal tmp = \"\"\n\tfor i in s:gmatch(\"%S+\") do\n\t\tif\
    \ not tab[i] then\n\t\t\ttable.insert(tab, i)\n\t\t\ttmp = tmp .. \" \" .. i\n\
    \t\tend\n\tend\n\treturn tmp:sub(2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiufk4p_k.lua:23:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpiufk4p_k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local xs = {}\n  for w in s:gmatch(\"[^%s]+\") do\n    table.insert(xs, w:gsub(\"\
    .\", function(x) return x .. (x:byte() % 10) end))\n  end\n  return table.concat(xs,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7liy9axe.lua:10:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp7liy9axe.lua:10: in local 'candidate'\n\t/tmp/tmp7liy9axe.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_osgge0_.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp_osgge0_.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqga5z0v5.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqga5z0v5.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    s = s:gsub('%s+', '_')\n    return s:gsub('%a+', function(s)\n        local\
    \ t = {}\n        for i = 1, #s do\n            table.insert(t, s:sub(i, i))\n\
    \        end\n        table.sort(t)\n        return table.concat(t)\n    end):gsub('_',\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj_4ttfy6.lua:26:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wdlor!!!\"\nstack traceback:\n\
    \t/tmp/tmpj_4ttfy6.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4ag3yb4.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpt4ag3yb4.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local table = {}\n    local count = 1\n    local word = \"\"\n    local current\
    \ = \"\"\n    local last = \"\"\n    local new_s = \"\"\n    for i=1, #s do\n\
    \        current = string.sub(s, i, i)\n        if current ~= \" \" then\n   \
    \         word = word .. current\n        else\n            table[count] = word\n\
    \            word = \"\"\n            count = count + 1\n        end\n    end\n\
    \    table[count] = word\n    for i=1, #table do\n        for j=1, #table[i] do\n\
    \            for k=j+1, #table[i] do\n                if string.byte(string.sub(table[i],\
    \ j, j)) > string.byte(string.sub(table[i], k, k)) then\n                    local\
    \ temp = string.sub(table[i], j, j)\n                    table[i] = string.sub(table[i],\
    \ 1, j-1) .. string.sub(table[i], k, k) .. string.sub(table[i], j+1, k-1) .. temp\
    \ .. string.sub(table[i], k+1, #table[i])\n                end\n            end\n\
    \        end\n    end\n    for i=1, #table do\n        if i == 1 then\n      \
    \      new_s = table[i]\n        else\n            new_s = new_s .. \" \" .. table[i]\n\
    \        end\n    end\n    return new_s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {}\n  for w in s:gmatch \"%S+\" do\n    table.insert(words, w)\n\
    \  end\n  table.sort(words, function(a, b)\n    return a:lower() < b:lower()\n\
    \  end)\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplvrc_w3u.lua:22:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmplvrc_w3u.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local t = {}\n  for w in s:gmatch(\"%S+\") do\n    t[#t+1] = w:gsub(\".\",\
    \ function(c) return c .. \"%0\" end):gsub(\"(.)%1+\", \"%1\")\n  end\n  return\
    \ table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnq6zo_bl.lua:18:\
    \ expected: \"Hi\"\nactual: \"H%0i%0\"\nstack traceback:\n\t/tmp/tmpnq6zo_bl.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local word = \"\"\n    local word_table = {}\n    local letter = \"\"\n \
    \   local letter_table = {}\n    for i = 1, string.len(s) do\n        if string.sub(s,\
    \ i, i) ~= \" \" then\n            word = word .. string.sub(s, i, i)\n      \
    \  else\n            table.insert(word_table, word)\n            word = \"\"\n\
    \        end\n    end\n    table.insert(word_table, word)\n    for i = 1, #word_table\
    \ do\n        for j = 1, string.len(word_table[i]) do\n            table.insert(letter_table,\
    \ string.sub(word_table[i], j, j))\n        end\n        table.sort(letter_table)\n\
    \        for k = 1, #letter_table do\n            letter = letter .. letter_table[k]\n\
    \        end\n        word_table[i] = letter\n        letter = \"\"\n        letter_table\
    \ = {}\n    end\n    s = \"\"\n    for i = 1, #word_table do\n        s = s ..\
    \ word_table[i] .. \" \"\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa1dx7212.lua:43:\
    \ expected: \"Hi\"\nactual: \"Hi \"\nstack traceback:\n\t/tmp/tmpa1dx7212.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    local sorted = \"\"\n    local pos = 1\n    local i\
    \ = 1\n    while pos <= string.len(s) do\n        local new_pos = string.find(s,\
    \ \" \", pos)\n        if new_pos == nil then\n            new_pos = string.len(s)\
    \ + 1\n        end\n        local word = string.sub(s, pos, new_pos - 1)\n   \
    \     words[i] = word\n        i = i + 1\n        pos = new_pos + 1\n    end\n\
    \    for i = 1, #words do\n        local word = words[i]\n        local new_word\
    \ = word\n        for j = 1, #word do\n            local substring = string.sub(word,\
    \ j, j)\n            for k = j + 1, #word do\n                local substring2\
    \ = string.sub(word, k, k)\n                if substring > substring2 then\n \
    \                   new_word = string.sub(new_word, 1, j - 1) .. substring2 ..\
    \ string.sub(new_word, j + 1, k - 1) .. substring .. string.sub(new_word, k +\
    \ 1)\n                    substring = substring2\n                end\n      \
    \      end\n        end\n        sorted = sorted .. new_word\n        if i < #words\
    \ then\n            sorted = sorted .. \" \"\n        end\n    end\n    return\
    \ sorted\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2ilr7kb.lua:48:\
    \ expected: \"bemnru\"\nactual: \"bbbmer\"\nstack traceback:\n\t/tmp/tmpm2ilr7kb.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {}\n  for w in s:gmatch(\"[^%s]+\") do\n    table.insert(words,\
    \ table.concat(util.order(w)))\n  end\n  return table.concat(words, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjupp5gku.lua:10:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpjupp5gku.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpjupp5gku.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local parts = {}\n  for part in s:gmatch(\"%S+\") do\n    table.insert(parts,\
    \ part)\n  end\n  for k, v in ipairs(parts) do\n    parts[k] = string.gsub(parts[k],\
    \ \"%w\", function(c)\n      return string.char(tonumber(string.format(\"%d\"\
    , c), 36))\n    end)\n  end\n  return table.concat(parts, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi181c1pc.lua:14:\
    \ bad argument #2 to 'format' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpi181c1pc.lua:14: in function </tmp/tmpi181c1pc.lua:13>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpi181c1pc.lua:13: in local 'candidate'\n\t/tmp/tmpi181c1pc.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local res = ''\n    for word in s:gmatch('%S+') do\n        res = res ..\
    \ word:gsub('(.)', function(c) return c .. '+' end):gsub('%++', function(c) return\
    \ string.char(c:byte()) end) .. ' '\n    end\n    return res:sub(1, -2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa69g2_7o.lua:18:\
    \ expected: \"Hi\"\nactual: \"H+i+\"\nstack traceback:\n\t/tmp/tmpa69g2_7o.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   return s:gsub(\"%S+\", function(s)\n      return s:gsub(\".\", \"%1\"):gsub(\"\
    (.)(.*)\", function(a,b)\n         return b:gsub(\".\", \"%0\"..a)\n      end)\n\
    \   end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd7cecqvb.lua:18:\
    \ expected: \"Hi\"\nactual: \"iH\"\nstack traceback:\n\t/tmp/tmpd7cecqvb.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return (\n        s:gsub(\"%S+\", function(w)\n            return w:gsub(\"\
    (.)\", \"%1\\0\"):sort():gsub(\"\\0\", \"\")\n        end)\n    )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzsff0j3_.lua:10:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmpzsff0j3_.lua:10:\
    \ in function </tmp/tmpzsff0j3_.lua:9>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmpzsff0j3_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpzsff0j3_.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   return \"Not implemented yet\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb1pzse7.lua:14:\
    \ expected: \"Hi\"\nactual: \"Not implemented yet\"\nstack traceback:\n\t/tmp/tmpgb1pzse7.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local parts = s:split(\" \")\n    local sorted = {}\n    for _, word in ipairs(parts)\
    \ do\n        table.insert(sorted, word:sort())\n    end\n    return table.concat(sorted,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkjsjb4j3.lua:8:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpkjsjb4j3.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkjsjb4j3.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local r = {}\n    for w in s:gmatch('%S+') do\n        r[#r+1] = w:gsub('.',\
    \ function(c) return ' '..c:byte() end):sub(2)\n    end\n    return table.concat(r,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6bgtwap.lua:18:\
    \ expected: \"Hi\"\nactual: \"72 105\"\nstack traceback:\n\t/tmp/tmpn6bgtwap.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  return (s:gsub(\"%S+\", function(w)\n    return w:gsub(\".\", function(c)\n\
    \      return c .. \"\\0\"\n    end):gsub(\"%z%z+\", \"\\0\"):gsub(\"%z\", \"\"\
    ):gsub(\"\\0\", \"\"):reverse()\n  end))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptqgpx1ju.lua:18:\
    \ expected: \"Hi\"\nactual: \"iH\"\nstack traceback:\n\t/tmp/tmptqgpx1ju.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    error(\"Not implemented\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpge8dyxm6.lua:8:\
    \ Not implemented\nstack traceback:\n\t/tmp/tmpge8dyxm6.lua:8: in local 'candidate'\n\
    \t/tmp/tmpge8dyxm6.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for w in s:gmatch('%w+') do table.insert(words, w)\
    \ end\n    table.sort(words, function(a, b) return a < b end)\n    local num_spaces\
    \ = #s - #words + 1\n    local spaces = {}\n    for i = 1, num_spaces do table.insert(spaces,\
    \ ' ') end\n    table.sort(spaces, function(a, b) return a < b end)\n    local\
    \ out = {}\n    for _, w in ipairs(words) do\n        local chars = {}\n     \
    \   for c in w:gmatch('.') do table.insert(chars, c) end\n        table.sort(chars,\
    \ function(a, b) return a < b end)\n        table.insert(out, table.concat(chars))\n\
    \    end\n    table.sort(out, function(a, b) return a < b end)\n    local final\
    \ = {}\n    for i = 1, #out do\n        table.insert(final, out[i])\n        table.insert(final,\
    \ spaces[i])\n    end\n    return table.concat(final)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx3x63va.lua:34:\
    \ expected: \"Hi\"\nactual: \"Hi \"\nstack traceback:\n\t/tmp/tmpnx3x63va.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {}\n  for word in s:gmatch('%w+') do\n    local w = {}\n    for\
    \ char in word:gmatch('.') do\n      table.insert(w, char)\n    end\n    table.sort(w)\n\
    \    table.insert(words, table.concat(w))\n  end\n  return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm2ch4o2o.lua:27:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wdlor\"\nstack traceback:\n\t\
    /tmp/tmpm2ch4o2o.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local result = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(result,\
    \ word:gsub(\"(.)\", function(char)\n            return char:byte()\n        end))\n\
    \    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppa3xeatc.lua:10:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmppa3xeatc.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppa3xeatc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpnfphef.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmprpnfphef.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tif not s then return nil end\n\tlocal t = {}\n\tlocal temp = \"\"\n\tlocal index\
    \ = 1\n\tfor i = 1, string.len(s) do\n\t\tif string.sub(s, i, i) == \" \" then\n\
    \t\t\tt[index] = temp\n\t\t\tindex = index + 1\n\t\t\ttemp = \"\"\n\t\telse\n\t\
    \t\ttemp = temp .. string.sub(s, i, i)\n\t\tend\n\tend\n\tt[index] = temp\n\t\
    for i = 1, #t do\n\t\tt[i] = t[i]:reverse()\n\tend\n\ttemp = \"\"\n\tfor i = 1,\
    \ #t do\n\t\ttemp = temp .. \" \" .. t[i]\n\tend\n\treturn temp:sub(2)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzpb7fl30.lua:35:\
    \ expected: \"Hi\"\nactual: \"iH\"\nstack traceback:\n\t/tmp/tmpzpb7fl30.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- TODO: Implement this function.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwyiv48n.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpzwyiv48n.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local wds = {}\n    for w in s:gmatch(\"%w+\") do\n        wds[#wds+1] =\
    \ table.concat(table.sort(w:totable()))\n    end\n    return table.concat(wds,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldthjbhp.lua:10:\
    \ attempt to call a nil value (method 'totable')\nstack traceback:\n\t/tmp/tmpldthjbhp.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpldthjbhp.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvp56ntmj.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpvp56ntmj.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local output = {}\n    for word in s:gmatch(\"%S+\") do\n        local letters\
    \ = {}\n        for letter in word:gmatch(\".\") do\n            table.insert(letters,\
    \ letter)\n        end\n        table.sort(letters)\n        local new_word =\
    \ table.concat(letters)\n        table.insert(output, new_word)\n    end\n   \
    \ return table.concat(output, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for match in string.gmatch(s, '%S+') do\n        table.insert(words,\
    \ match)\n    end\n    for i = 1, #words do\n        local chars = {}\n      \
    \  for j = 1, #words[i] do\n            table.insert(chars, words[i]:sub(j, j))\n\
    \        end\n        table.sort(chars)\n        words[i] = table.concat(chars)\n\
    \    end\n    return table.concat(words, ' ')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return s:gsub('%w+', function(w)\n        return w:gsub('.', function(c)\n\
    \            return c .. table.concat(table.sort{w:gsub(c, ''):gsub('.', ' ')})\n\
    \        end)\n    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with string

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpnfphef.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmprpnfphef.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local function sorted_string(s)\n    local s_table = {}\n    for i = 1, #s\
    \ do\n      table.insert(s_table, s:sub(i, i))\n    end\n    table.sort(s_table)\n\
    \    return table.concat(s_table)\n  end\n  local words = {}\n  for i in s:gmatch(\"\
    %S+\") do\n    table.insert(words, sorted_string(i))\n  end\n  return table.concat(words,\
    \ \" \")\nend\nprint(anti_shuffle(\"pon tol\"))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: 'nop lot

    .

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local ws, r = {}, {}\n    for w in s:gmatch(\"%w+\") do\n        table.insert(ws,\
    \ w)\n    end\n    for k, v in ipairs(ws) do\n        table.insert(r, table.concat(v:chars():sort()))\n\
    \    end\n    return table.concat(r, \" \")\nend\nassert(anti_shuffle(\"example\
    \ string\") == \"eelmppx aegrst\")\nassert(anti_shuffle(\"Pikachu, I choose you!\"\
    ) == \"aaccehhiikku, I ehoosu !\")\nassert(anti_shuffle(\"I heard the pastor sing\
    \ live verses easily.\") ==\n       \"I deehor ae abprst ielnstv iesvry.\")\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpzfdzxuvy.lua:13: attempt to call a nil value (method 'chars')\n\
    stack traceback:\n\t/tmp/tmpzfdzxuvy.lua:13: in local 'anti_shuffle'\n\t/tmp/tmpzfdzxuvy.lua:17:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprpnfphef.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmprpnfphef.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- define a function that sorts the characters in a string in ascending order\n\
    \    local function sort(str)\n        local chars = {}\n        for c in str:gmatch\"\
    .\" do table.insert(chars, c) end\n        table.sort(chars)\n        return table.concat(chars)\n\
    \    end\n    -- define a function that scans a string from left to right\n  \
    \  -- and returns the first word it meets\n    local function scan(str)\n    \
    \    local space, start, stop = str:find(\" \")\n        if space then\n     \
    \       return str:sub(1, space - 1), str:sub(space + 1)\n        else\n     \
    \       return str, \"\"\n        end\n    end\n    -- define a function that\
    \ 'sorts' the words in a string\n    local function sort_words(str)\n        local\
    \ new_str = \"\"\n        while #str > 0 do\n            local word, remain =\
    \ scan(str)\n            new_str = new_str .. sort(word) .. \" \"\n          \
    \  str = remain\n        end\n        return new_str\n    end\n    -- get the\
    \ words, sort them and return them\n    return sort_words(s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7qmo237.lua:42:\
    \ expected: \"Hi\"\nactual: \"Hi \"\nstack traceback:\n\t/tmp/tmpa7qmo237.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {}\n  local temp_word = {}\n  local to_return = {}\n  local temp_char\n\
    \  local key\n  local val\n  local i\n  local j\n  local l\n  local l2\n  local\
    \ temp\n  l = s:len()\n  for i = 1, l do\n    if s:sub(i, i) == \" \" then\n \
    \     temp = \"\"\n      for j = 1, #temp_word do\n        temp = temp .. temp_word[j]\n\
    \      end\n      words[#words + 1] = temp\n      temp_word = {}\n    else\n \
    \     temp_word[#temp_word + 1] = s:sub(i, i)\n    end\n  end\n  temp = \"\"\n\
    \  for j = 1, #temp_word do\n    temp = temp .. temp_word[j]\n  end\n  words[#words\
    \ + 1] = temp\n  for i = 1, #words do\n    l2 = words[i]:len()\n    temp_word\
    \ = {}\n    for j = 1, l2 do\n      temp_word[j] = words[i]:sub(j, j)\n    end\n\
    \    table.sort(temp_word)\n    to_return[#to_return + 1] = temp_word\n  end\n\
    \  temp = \"\"\n  for i = 1, #to_return do\n    l2 = #to_return[i]\n    for j\
    \ = 1, l2 do\n      temp = temp .. to_return[i][j]\n    end\n    if i ~= #to_return\
    \ then\n      temp = temp .. \" \"\n    end\n  end\n  return temp\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4ag3yb4.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpt4ag3yb4.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- print(\">>> \" .. s)\n  local words = {}\n  -- convert string to table of\
    \ words\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n \
    \ end\n  -- sort each word\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local letters = {}\n    for letter in word:gmatch(\".\") do\n      table.insert(letters,\
    \ letter)\n    end\n    table.sort(letters)\n    -- print(\">>> \", i, word, table.concat(letters))\n\
    \    words[i] = table.concat(letters)\n  end\n  return table.concat(words, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for i in s:gmatch('%S+') do\n        local chars =\
    \ {}\n        for j in i:gmatch('.') do\n            table.insert(chars, j)\n\
    \        end\n        table.sort(chars)\n        table.insert(words, table.concat(chars))\n\
    \    end\n    return table.concat(words, ' ')\nend\nassert(anti_shuffle('hello')\
    \ == 'ehllo')\nassert(anti_shuffle('I love lua') == 'I elov lau')\nassert(anti_shuffle('welcome\
    \ to my world') == 'eeeelcmmno  t omywlrld')\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp3p23ktp8.lua:20: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp3p23ktp8.lua:20: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local result = {}\n    local word_start_idx = 1\n    local word_end_idx =\
    \ 1\n    local word\n    local ascii_values\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7jo51wh1.lua:26: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for w in s:gmatch(\"%S+\") do table.insert(words, w)\
    \ end\n    for i, w in ipairs(words) do\n        words[i] = table.concat(\n  \
    \          table.sort(w:split(\"\"), function(a, b) return a:byte() < b:byte()\
    \ end))\n    end\n    return table.concat(words, \" \")\nend\nassert(anti_shuffle(\"\
    hello world\") == \"ehllo dlorw\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp4x6d9e_6.lua:12: attempt to call a nil value (method 'split')\n\
    stack traceback:\n\t/tmp/tmp4x6d9e_6.lua:12: in local 'anti_shuffle'\n\t/tmp/tmp4x6d9e_6.lua:16:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local function sort_string(s)\n    table.sort(s, function(a, b) return a:byte()\
    \ < b:byte() end)\n    return table.concat(s)\n  end\n  return (s:gsub(\"%S+\"\
    , sort_string))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbw6_7wnn.lua:9:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpbw6_7wnn.lua:9: in function </tmp/tmpbw6_7wnn.lua:8>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpbw6_7wnn.lua:12: in local 'candidate'\n\t/tmp/tmpbw6_7wnn.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal map = {}\n\tfor i=1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tif c == ' '\
    \ then\n\t\t\tc = true\n\t\tend\n\t\ttable.insert(map, c)\n\tend\n\tfor i=1, #map\
    \ do\n\t\tlocal c = map[i]\n\t\tif type(c) == 'string' then\n\t\t\tlocal arr =\
    \ {}\n\t\t\tfor i=1, #c do\n\t\t\t\ttable.insert(arr, c:sub(i,i))\n\t\t\tend\n\
    \t\t\ttable.sort(arr)\n\t\t\tmap[i] = table.concat(arr)\n\t\tend\n\tend\n\treturn\
    \ table.concat(map)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lidu1ej.lua:34:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp_lidu1ej.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbbys23y5.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpbbys23y5.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for word in s:gmatch(\"%S+\") do table.insert(words,\
    \ word) end\n    local res = {}\n    for i = 1, #words do\n        local tmp =\
    \ {}\n        for c in words[i]:gmatch(\".\") do table.insert(tmp, c) end\n  \
    \      table.sort(tmp)\n        table.insert(res, table.concat(tmp))\n    end\n\
    \    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return s:gsub('%S+', function(w)\n        return w:gsub('(.)', function(c)\n\
    \            return string.format('%02x', c:byte()) .. c\n        end):gsub('(%x%x)(.)',\
    \ function(a, b)\n            return b .. a\n        end)\n    end)\nend\nassertEquals('4aA\
    \ 56bB 78C', anti_shuffle('Ab 45 Ba 68C'))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp9npby21j.lua:16: attempt to call a nil value (global 'assertEquals')\n\
    stack traceback:\n\t/tmp/tmp9npby21j.lua:16: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local function ordered_insert(res, word)\n        local t = { word:byte(1,\
    \ #word) }\n        table.sort(t)\n        local nw = string.char(unpack(t))\n\
    \        table.insert(res, nw)\n    end\n    local res = {}\n    for word in s:gmatch(\"\
    %S+\") do\n        ordered_insert(res, word)\n    end\n    return table.concat(res,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz4n2esgu.lua:11:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpz4n2esgu.lua:11:\
    \ in local 'ordered_insert'\n\t/tmp/tmpz4n2esgu.lua:16: in local 'candidate'\n\
    \t/tmp/tmpz4n2esgu.lua:24: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local map = {}\n    local order = {}\n    local last = nil\n    local res\
    \ = {}\n    for v in s:gmatch(\"%S+\") do\n        if not map[v] then\n      \
    \      map[v] = #order + 1\n            order[#order + 1] = v\n        end\n \
    \       res[#res + 1] = map[v]\n        res[#res + 1] = ' '\n    end\n    table.remove(res)\n\
    \    return table.concat(res)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46ttvsqa.lua:27:\
    \ expected: \"Hi\"\nactual: \"1\"\nstack traceback:\n\t/tmp/tmp46ttvsqa.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    local current_word = {}\n    for char in s:gmatch('.')\
    \ do\n        if char ~= ' ' then\n            table.insert(current_word, char)\n\
    \        else\n            if #current_word > 0 then\n                table.insert(words,\
    \ table.concat(current_word))\n                current_word = {}\n           \
    \ end\n            table.insert(words, ' ')\n        end\n    end\n    if #current_word\
    \ > 0 then\n        table.insert(words, table.concat(current_word))\n    end\n\
    \    return table.concat(words)\nend\nassert(anti_shuffle('hello world') == 'ehllo\
    \ dlorw')\nassert(anti_shuffle('hello') == 'ehllo')\nassert(anti_shuffle('hello\
    \ world wtf') == 'ehllo dlorw ftw')\nassert(anti_shuffle('ahh no') == 'ahh no')\n\
    assert(anti_shuffle('oop') == 'oop')\nassert(anti_shuffle(' ah no ') == ' ah no\
    \ ')\nassert(anti_shuffle(' a h n o ') == ' a h n o ')\nassert(anti_shuffle('a\
    \ h n o') == 'a h n o')\nassert(anti_shuffle(' a h n o') == ' a h n o')\nassert(anti_shuffle('\
    \ a h n o ') == ' a h n o ')\nassert(anti_shuffle('a h n o ') == 'a h n o ')\n\
    assert(anti_shuffle(' a h n o') == ' a h n o')\nassert(anti_shuffle('a hn o')\
    \ == 'a hn o')\nassert(anti_shuffle('a hn o ') == 'a hn o ')\nassert(anti_shuffle('\
    \ a hn o') == ' a hn o')\nassert(anti_shuffle(' a hn o ') == ' a hn o ')\nassert(anti_shuffle('\
    \ a hn o  ') == ' a hn o  ')\nassert(anti_shuffle(' a hn o   ') == ' a hn o  \
    \ ')\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp09ikv6hw.lua:26: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp09ikv6hw.lua:26: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  return nil\nend\nassert(anti_shuffle('h w s') == 'h s w')\nassert(anti_shuffle('h\
    \ w   s') == 'h s w')\nassert(anti_shuffle('hello    world  m') == 'ehllo m wdlor')\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpudgdo5hh.lua:10: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpudgdo5hh.lua:10: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local new = {}\n  for w in s:gmatch(\"%S+\") do\n    local unord = {}\n   \
    \ for char in w:gmatch(\".\") do\n      table.insert(unord, char)\n    end\n \
    \   table.sort(unord)\n    table.insert(new, table.concat(unord))\n  end\n  return\
    \ table.concat(new, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- ...\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgp4n78j.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmprgp4n78j.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    for i = 1, #words do\n        words[i] = reorder(words[i])\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpska1nhdd.lua:13:\
    \ attempt to call a nil value (global 'reorder')\nstack traceback:\n\t/tmp/tmpska1nhdd.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpska1nhdd.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal order = {}\n\tlocal words = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\
    \ttable.insert(words,word)\n\t\tlocal arr = {}\n\t\tfor c in word:gmatch(\".\"\
    ) do\n\t\t\ttable.insert(arr,c)\n\t\tend\n\t\ttable.sort(arr)\n\t\ttable.insert(order,table.concat(arr))\n\
    \tend\n\tlocal output = {}\n\tfor i,w in ipairs(words) do\n\t\ttable.insert(output,order[i])\n\
    \t\tif i < #words then\n\t\t\ttable.insert(output,s:match(\"%s+\",#words+i))\n\
    \t\tend\n\tend\n\treturn table.concat(output)\nend\nassert(anti_shuffle(\"\")\
    \ == \"\")\nassert(anti_shuffle(\"a\") == \"a\")\nassert(anti_shuffle(\"a b\"\
    ) == \"a b\")\nassert(anti_shuffle(\"sailor is a man\") == \"ailsor is a mna\"\
    )\nassert(anti_shuffle(\"sailor is a man who is a sailor\") == \"ailsor is a mna\
    \ who is a ailsor\")\nassert(anti_shuffle(\"sailor man sailor\") == \"ailsor amn\
    \ ailsor\")\nassert(anti_shuffle(\"sailor man is\") == \"ailsor amn is\")\nassert(anti_shuffle(\"\
    sailor man is sailor\") == \"ailsor amn is ailsor\")\nassert(anti_shuffle(\"sailor\
    \ man sailor man\") == \"ailsor amn ailsor amn\")\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp74r7627q.lua:30: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp74r7627q.lua:30: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  return (string.gsub(s, \"%S+\", function(w)\n    local t = {}\n    for c in\
    \ string.gmatch(w, \".\") do\n      table.insert(t, c)\n    end\n    table.sort(t)\n\
    \    return table.concat(t)\n  end))\nend\nassertEquals(anti_shuffle(\"abc\"),\
    \ \"abc\")\nassertEquals(anti_shuffle(\"abc def\"), \"abc def\")\nassertEquals(anti_shuffle(\"\
    abc def cba\"), \"abc abc def\")\nassertEquals(anti_shuffle(\"abc def cba xyx\"\
    ), \"abc abc abc def xyx\")\nassertEquals(anti_shuffle(\"abc def cba xyx 123\"\
    ), \"123 abc abc abc def xyx\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp40hr7rh1.lua:17: attempt to call a nil value (global 'assertEquals')\n\
    stack traceback:\n\t/tmp/tmp40hr7rh1.lua:17: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal words = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\treturn table.concat(words, \" \")\nend\nassert(anti_shuffle(\"\
    Hi! How are you?\") == \"Hi! How are you?\")\nassert(anti_shuffle(\"My name is\
    \ test\") == \"My name is test\")\nassert(anti_shuffle(\"Wicked this and that\"\
    ) == \"Wicked this and that\")\nassert(anti_shuffle(\"I am in love with Lua\"\
    ) == \"I am in love with Lua\")\nassert(anti_shuffle(\"How many characters and\
    \ words\") == \"How many characters and words\")\nassert(anti_shuffle(\"This is\
    \ a test on digits 1234567890\") == \"This is a test on digits 1234567890\")\n\
    assert(anti_shuffle(\"CodeEval is awesome\") == \"awesome CodeEval is\")\nassert(anti_shuffle(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"a b c d e f g h i\
    \ j k l m n o p q r s t u v w x y z\")\nassert(anti_shuffle(\"v w x y z a b c\
    \ d e f g h i j k l m n o p q r s t u\") == \"a b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z\")\nassert(anti_shuffle(\"Finally some digits 123456789\"\
    ) == \"Finally some digits 123456789\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp7ckgd7lc.lua:14: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp7ckgd7lc.lua:14: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local res = {}\n  for w in s:gmatch(\"%w+\") do\n    local nw = {}\n    for\
    \ c in w:gmatch(\".\") do\n      nw[#nw+1] = c\n    end\n    table.sort(nw)\n\
    \    res[#res+1] = table.concat(nw)\n  end\n  return table.concat(res, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphgy8tq10.lua:27:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wdlor\"\nstack traceback:\n\t\
    /tmp/tmphgy8tq10.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {}\n  for w in s:gmatch('%S+') do\n    table.insert(words, w)\n\
    \  end\n  for i, v in ipairs(words) do\n    local chars = {}\n    for c in v:gmatch('.')\
    \ do\n      table.insert(chars, c)\n    end\n    table.sort(chars)\n    words[i]\
    \ = table.concat(chars)\n  end\n  return table.concat(words, ' ')\nend\nassert(anti_shuffle('Hello\
    \ World!') == 'deHllloorW!')\nassert(anti_shuffle('O nama') == 'aO amn')\nassert(anti_shuffle('Napisati\
    \ funkciju koja otimaij alfabetizira recenicu') ==\n  'aaacdeefhijilmnnoprstu')\n\
    assert(anti_shuffle('Zadatak za vezbanje') == 'aaabdeeekrzvz')\nassert(anti_shuffle('Znam\
    \ da je vise od jednog resenja') ==\n  'aaadeeeghijjkmmnoooorrsssstu')\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp4j83_rzj.lua:22: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp4j83_rzj.lua:22: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:split(\" \")\n    local result = {}\n    for _, word in ipairs(words)\
    \ do\n        table.insert(result, word:encode():sort():decode())\n    end\n \
    \   return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf6g0gzut.lua:8:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpf6g0gzut.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpf6g0gzut.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    local output = {}\n    local buf = {}\n    local c\
    \ = \"\"\n    local last = \"\"\n    for v in s:gmatch(\"%a+\") do\n        table.insert(words,\
    \ v)\n    end\n    for i = 1, #s do\n        c = s:sub(i, i)\n        if c:match(\"\
    %w\") then\n            table.insert(buf, c)\n        else\n            table.insert(output,\
    \ table.concat(buf))\n            buf = {}\n            table.insert(output, c)\n\
    \        end\n    end\n    for i = 1, #output do\n        if output[i]:match(\"\
    %w\") then\n            last = output[i]\n            table.sort(output[i]:upper():gmatch(\"\
    %w\"))\n            output[i] = table.concat(output[i]:upper():gmatch(\"%w\"))\n\
    \            if last == last:lower() then\n                output[i] = output[i]:lower()\n\
    \            end\n        end\n    end\n    return table.concat(output)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5t6g5mv.lua:42:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpk5t6g5mv.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local parts = {}\n    for part in s:gmatch(\"%S+\") do\n        table.insert(parts,\
    \ part)\n    end\n    local new_parts = {}\n    for _, part in ipairs(parts) do\n\
    \        table.insert(new_parts, table.concat(sort_it(part), \"\"))\n    end\n\
    \    return table.concat(new_parts, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfune6s_4.lua:14:\
    \ attempt to call a nil value (global 'sort_it')\nstack traceback:\n\t/tmp/tmpfune6s_4.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpfune6s_4.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local x = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(x, table.concat(sort(each(word)),\
    \ \"\"))\n  end\n  return table.concat(x, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph7p9i0px.lua:10:\
    \ attempt to call a nil value (global 'each')\nstack traceback:\n\t/tmp/tmph7p9i0px.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmph7p9i0px.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:split(\" \")\n    local sorted_words = {}\n    for i, word\
    \ in ipairs(words) do\n        local _, new_word = word:gsub(\"%a\", function(c)\n\
    \            return string.char(string.byte(c) + 1)\n        end)\n        sorted_words[i]\
    \ = new_word\n    end\n    return table.concat(sorted_words, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplyx8tcgi.lua:8:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmplyx8tcgi.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmplyx8tcgi.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return s:gsub('[%w]*', function(w)\n        return w:gsub('.', function(c)\n\
    \            return string.char(string.byte(c))\n        end)\n    end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1fcusbu.lua:19:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpn1fcusbu.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return string.gsub(s, '%S+', function(w)\n        local t = {}\n        for\
    \ _, c in utf8.codes(w) do\n            table.insert(t, utf8.char(c))\n      \
    \  end\n        table.sort(t)\n        return table.concat(t)\n    end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4708dhx.lua:13:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu4708dhx.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local function sorter(char1, char2)\n        return char1:byte() < char2:byte()\n\
    \    end\n    local new_words = {}\n    for word in s:gmatch(\"%w+\") do\n   \
    \     table.insert(new_words, word:gsub(\".\", \"\") .. word:gsub(\"(.)\", \"\
    %1 \"):gsub(\" \", \"\"):gsub(\".\", \"\") .. word:gsub(\".\", \"\"))\n    end\n\
    \    local new_s = table.concat(new_words, \" \")\n    return new_s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hfmyfr8.lua:22:\
    \ expected: \"Hi\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1hfmyfr8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \t-- TODO: return a string where words are sorted by ascii order.\n\tlocal new_tbl\
    \ = {}\n\tlocal tbl = s:split(\" \")\n\tfor i,v in ipairs(tbl) do\n\t\tnew_tbl[i]\
    \ = v:split(\"\"):sort()\n\tend\n\tlocal str = \"\"\n\tfor i,v in ipairs(new_tbl)\
    \ do\n\t\tstr = str .. table.concat(v) .. \" \"\n\tend\n\treturn str\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvazmcqqj.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpvazmcqqj.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpvazmcqqj.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   --[[\n      if you want a \"real\" test then change the pattern to\n     \
    \ return s:gsub(\"(%w+)\", function(w) return w:gsub(\".\", \"|%0\") end)\n  \
    \ --]]\n   return s:gsub(\"(%w+)\", function(w) return w:gsub(\".\", \"|%0\"):sub(2)\
    \ end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwuq2ea8a.lua:18:\
    \ expected: \"Hi\"\nactual: \"H|i\"\nstack traceback:\n\t/tmp/tmpwuq2ea8a.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   local words = string.gmatch(s, \"%S+\")\n   local result = ''\n   for word\
    \ in words do\n      local letters = {}\n      for char in string.gmatch(word,\
    \ \".\") do\n         table.insert(letters, char)\n      end\n      table.sort(letters)\n\
    \      result = result .. ' ' .. table.concat(letters)\n   end\n   return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpirzlq_dj.lua:24:\
    \ expected: \"Hi\"\nactual: \" Hi\"\nstack traceback:\n\t/tmp/tmpirzlq_dj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \ts = s:gsub(\"(%w+)\", sort_str)\n\treturn s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoitwtdj9.lua:8:\
    \ bad argument #2 to 'gsub' (string/function/table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpoitwtdj9.lua:8: in local 'candidate'\n\t/tmp/tmpoitwtdj9.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local ordered = {}\n  for _,w in pairs(s:split(\" \")) do\n    local ordered_chars\
    \ = {}\n    for _,c in pairs(w:split(\"\")) do\n      table.insert(ordered_chars,\
    \ c)\n    end\n    table.sort(ordered_chars)\n    table.insert(ordered, table.concat(ordered_chars))\n\
    \  end\n  return table.concat(ordered, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_6gyn7gl.lua:9:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp_6gyn7gl.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp_6gyn7gl.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \ts = s:gsub('%s+', ' ')\n\tlocal t = {}\n\tfor w in s:gmatch('%S+') do\n\t\t\
    t[#t+1] = w:gsub('.', function(c) return c .. '%0' end):gsub('%z', '')\n\tend\n\
    \treturn table.concat(t, ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6nheesl.lua:19:\
    \ expected: \"Hi\"\nactual: \"H%0i%0\"\nstack traceback:\n\t/tmp/tmpj6nheesl.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local function comp (a, b)\n    local sort = {}\n    local sa = string.byte(a)\n\
    \    local sb = string.byte(b)\n    sort.sa = sa\n    sort.sb = sb\n    if sa\
    \ < sb then\n      return true\n    elseif sa > sb then\n      return false\n\
    \    else\n      return true\n    end\n  end\n  local getword = {}\n  local word\
    \ = ''\n  local t = {}\n  local answer = ''\n  for i=1, #s do\n    getword[#getword+1]\
    \ = s:sub(i,i)\n  end\n  for i=1, #getword do\n    if getword[i] ~= ' ' then\n\
    \      word = word .. getword[i]\n    else\n      t[#t+1] = word\n      word =\
    \ ''\n    end\n  end\n  for i=1, #t do\n    word = word .. table.sort(t[i], comp)\n\
    \  end\n  for i=1, #word do\n    if word:sub(i,i) == ' ' then\n      answer =\
    \ answer .. ' '\n    else\n      answer = answer .. word:sub(i,i)\n    end\n \
    \ end\n  return answer\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppujmrnpl.lua:54:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmppujmrnpl.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    if type(s) ~= \"string\" then\n        return nil\n    end\n    local words\
    \ = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n\
    \    end\n    local output = \"\"\n    for i, word in ipairs(words) do\n     \
    \   local sorted = {}\n        for c in word:gmatch(\".\") do\n            table.insert(sorted,\
    \ c)\n        end\n        table.sort(sorted)\n        output = output .. table.concat(sorted)\n\
    \        if i < #words then\n            output = output .. \" \"\n        end\n\
    \    end\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \t-- Split the string into an array\n\tlocal tokens = s:split(\" \")\n\t-- Process\
    \ all the items in the array\n\tfor i, token in ipairs(tokens) do\n\t\t-- Split\
    \ the word by character\n\t\tlocal chars = token:split(\"\")\n\t\t-- Sort the\
    \ characters in the word\n\t\tlocal sorted = chars:sort()\n\t\t-- Join the characters\
    \ back into a word\n\t\ttokens[i] = sorted:join(\"\")\n\tend\n\t-- Join the sentence\
    \ back together\n\treturn tokens:join(\" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9r022sxk.lua:9:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp9r022sxk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9r022sxk.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Implement your function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96rwzdm3.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp96rwzdm3.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local ss = s:gsub(\"%S+\", function(w)\n        return table.concat(utils.split(w,\
    \ \"\"), \"\")\n    end)\n    return table.concat(utils.split(ss, \" \"), \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkxpc4tko.lua:9:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmpkxpc4tko.lua:9:\
    \ in function </tmp/tmpkxpc4tko.lua:8>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmpkxpc4tko.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkxpc4tko.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  error(\"TODO\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxh_rf2_u.lua:8:\
    \ TODO\nstack traceback:\n\t/tmp/tmpxh_rf2_u.lua:8: in local 'candidate'\n\t/tmp/tmpxh_rf2_u.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- TODO: implement this function,\n  -- and return the result of your computation\n\
    \  local anti_shuffled = ''\n  for word in s:gmatch(\"%w+\") do\n    for char\
    \ in word:gmatch(\".\") do\n      table.insert(chars, char)\n    end\n    -- chars\
    \ = chars:sort()\n    -- anti_shuffled = chars\n  end\n  -- return anti_shuffled\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1rx0mde1.lua:13:\
    \ bad argument #1 to 'insert' (table expected, got nil)\nstack traceback:\n\t\
    /tmp/tmp1rx0mde1.lua:13: in local 'candidate'\n\t/tmp/tmp1rx0mde1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {}\n  local ans = {}\n  local word = ''\n  for char in s:gmatch('.')\
    \ do\n    if char == ' ' then\n      table.insert(words, word)\n      table.insert(ans,\
    \ ' ')\n      word = ''\n    else\n      word = word .. char\n    end\n  end\n\
    \  table.insert(words, word)\n  for i = 1, #words do\n    local cur_word = words[i]\n\
    \    local cur_word_sort = {}\n    for char in cur_word:gmatch('.') do\n     \
    \ table.insert(cur_word_sort, char)\n    end\n    table.sort(cur_word_sort)\n\
    \    local new_word = ''\n    for j = 1, #cur_word_sort do\n      new_word = new_word\
    \ .. cur_word_sort[j]\n    end\n    ans[i] = new_word\n  end\n  return table.concat(ans)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9k9_te7g.lua:44:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello!!!Wdlor\"\nstack traceback:\n\t\
    /tmp/tmp9k9_te7g.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local l = {}\n    for w in s:gmatch(\"%w+\") do\n        local new_w = {}\n\
    \        for c in w:gmatch(\".\") do\n            new_w[#new_w + 1] = c\n    \
    \    end\n        table.sort(new_w)\n        l[#l + 1] = table.concat(new_w)\n\
    \    end\n    return table.concat(l, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypg4bxi6.lua:27:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wdlor\"\nstack traceback:\n\t\
    /tmp/tmpypg4bxi6.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal words, str = {}\n\tlocal last_i, i = 1, 1\n\twhile i <= #s do\n\t\tif\
    \ s:sub(i, i) == ' ' then\n\t\t\twords[#words + 1] = s:sub(last_i, i - 1)\n\t\t\
    \tlast_i = i + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\twords[#words + 1] = s:sub(last_i,\
    \ i - 1)\n\tfor i = 1, #words do\n\t\tlocal chars = {}\n\t\tfor char in words[i]:gmatch('.')\
    \ do\n\t\t\tchars[#chars + 1] = char\n\t\tend\n\t\ttable.sort(chars)\n\t\twords[i]\
    \ = table.concat(chars)\n\tend\n\treturn table.concat(words, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4ag3yb4.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpt4ag3yb4.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local function sort_str(str)\n        local str_t = {}\n        for ch in\
    \ str:gmatch(\".\") do\n            table.insert(str_t, ch)\n        end\n   \
    \     table.sort(str_t)\n        return table.concat(str_t)\n    end\n    local\
    \ result = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(result,\
    \ sort_str(word))\n    end\n    return table.concat(result, \" \")\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for w in s:gmatch(\"[^%s]+\") do\n        words[#words\
    \ + 1] = w\n    end\n    for i = 1, #words do\n        words[i] = table.concat(words[i]:split())\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv679h297.lua:13:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpv679h297.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpv679h297.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- TODO: implement the function here\nend\nassert(anti_shuffle(\"hello world\
    \ i am a string\") == \"ehllo dlorw i am a gnirst\")\nassert(anti_shuffle(\"Cats\
    \ are great\") == \"aCst are egar\")\nassert(anti_shuffle(\"Wolfenstein 3D is\
    \ not that good\") == \"Weflnotseen 3D is not taht dego\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp59munsmg.lua:10: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp59munsmg.lua:10: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   local result = \"\"\n   local t = {}\n   local function sort_by_char(w)\n\
    \      local t = {}\n      for i = 1, #w do\n         t[i] = string.char(w:byte(i))\n\
    \      end\n      table.sort(t)\n      return table.concat(t)\n   end\n   for\
    \ w in s:gmatch(\"%S+\") do\n      table.insert(t, sort_by_char(w))\n   end\n\
    \   for i = 1, #t do\n      result = result .. t[i] .. \" \"\n   end\n   return\
    \ result:sub(1, #result - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local xs = {}\n    for word in s:gmatch(\"%w+\") do\n        table.insert(xs,\
    \ word:gsub(\".\", function(c)\n            return string.format(\"%03d\", string.byte(c))\n\
    \        end))\n    end\n    return table.concat(xs, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe3xw9x93.lua:10:\
    \ bad argument #2 to 'insert' (position out of bounds)\nstack traceback:\n\t/tmp/tmpe3xw9x93.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpe3xw9x93.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local t = {}\n    for i in s:gmatch(\"%S+\") do\n        table.insert(t,\
    \ table.concat(i:split(\"\"):sort(), \"\"))\n    end\n    return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcp9skpgq.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpcp9skpgq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpcp9skpgq.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return string.gsub(s, \"(%w+)\", function(s)\n        return table.concat(table.sort(utf8.codes(s)))\n\
    \    end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk8r_gdld.lua:9:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpk8r_gdld.lua:9: in function </tmp/tmpk8r_gdld.lua:8>\n\t[C]: in function\
    \ 'string.gsub'\n\t/tmp/tmpk8r_gdld.lua:8: in local 'candidate'\n\t/tmp/tmpk8r_gdld.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   return (string.gsub(s, '(%w+)', function(w)\n      return table.concat(table.sort(string.explode(w,\
    \ '')), '')\n   end))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9jkdeojr.lua:9:\
    \ attempt to call a nil value (field 'explode')\nstack traceback:\n\t/tmp/tmp9jkdeojr.lua:9:\
    \ in function </tmp/tmp9jkdeojr.lua:8>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmp9jkdeojr.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp9jkdeojr.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  return string.gsub(s, \"(%w+)\", function(w)\n    return table.concat(str_to_table(w):sort(),\
    \ \"\")\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps27gbkmo.lua:9:\
    \ attempt to call a nil value (global 'str_to_table')\nstack traceback:\n\t/tmp/tmps27gbkmo.lua:9:\
    \ in function </tmp/tmps27gbkmo.lua:8>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmps27gbkmo.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmps27gbkmo.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local r = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(r,\
    \ w:gsub(\".\", function(c) return string.char(string.byte(c) - 32) end))\n  \
    \  end\n    return table.concat(r, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmp9r1qn1.lua:10:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpmp9r1qn1.lua:10: in local 'candidate'\n\t/tmp/tmpmp9r1qn1.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclb4dihq.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpclb4dihq.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal r, first = {}, true\n\tfor w in s:gmatch(\"%S+\") do\n\t\tif first then\n\
    \t\t\tfirst = false\n\t\telse\n\t\t\ttable.insert(r, \" \")\n\t\tend\n\t\ttable.insert(r,\
    \ table.concat(table.sort(table.pack(w:gmatch(\".\")))))\n\tend\n\treturn table.concat(r)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0b0y1_or.lua:15:\
    \ bad argument #1 to 'concat' (table expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp0b0y1_or.lua:15: in local 'candidate'\n\t/tmp/tmp0b0y1_or.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local ret = {}\n    for i = 1, #words do\n        table.insert(ret,\
    \ {})\n        for letter in words[i]:gmatch(\".\") do\n            table.insert(ret[i],\
    \ letter)\n        end\n        table.sort(ret[i])\n        ret[i] = table.concat(ret[i])\n\
    \    end\n    return table.concat(ret, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local s_table = {}\n    for word in s:gmatch(\"%S+\") do\n        -- sort\
    \ each word\n        local word_table = {}\n        for character in word:gmatch(\"\
    .\") do\n            table.insert(word_table, character)\n        end\n      \
    \  table.sort(word_table)\n        -- place the sorted word in the main table\n\
    \        table.insert(s_table, table.concat(word_table))\n    end\n    return\
    \ table.concat(s_table, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local function compare_chars(a, b)\n        return a < b\n    end\n    local\
    \ words = {}\n    for word in s:gmatch(\"%S+\") do\n        local letters = {}\n\
    \        for letter in word:gmatch(\".\") do\n            table.insert(letters,\
    \ letter)\n        end\n        table.sort(letters, compare_chars)\n        table.insert(words,\
    \ table.concat(letters))\n    end\n    return table.concat(words, \" \")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \ts = string.gsub(s, \"%s+\", \"\") -- remove spaces\n\tlocal t = {} -- create\
    \ new table\n\tfor i = 1, #s do\n\t\ttable.insert(t, s:sub(i, i)) -- add each\
    \ character to the table\n\tend\n\ttable.sort(t) -- sort the table\n\tlocal sorted\
    \ = table.concat(t) -- table to string\n\treturn sorted\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qjb3yiv.lua:25:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"!!!HWdellloor\"\nstack traceback:\n\t\
    /tmp/tmp8qjb3yiv.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- Convert string to a table of words\n  local words = {}\n  for word in s:gmatch(\"\
    %w+\") do\n    words[#words + 1] = word\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl5q1wnsk.lua:26: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local res = \"\"\n    for w in s:gmatch(\"[^%s]+\") do\n        local t =\
    \ {}\n        for c in w:gmatch(\".\") do\n            table.insert(t, c)\n  \
    \      end\n        table.sort(t)\n        res = res .. table.concat(t) .. \"\
    \ \"\n    end\n    return res:sub(1, #res - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   -- Your code goes here!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqxmny0j.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpsqxmny0j.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   local words = {}\n   for word in s:gmatch(\"%S+\") do\n      table.insert(words,\
    \ word)\n   end\n   local function cmp(a, b)\n      if #a == #b then\n       \
    \  return a < b\n      else\n         return #a < #b\n      end\n   end\n   table.sort(words,\
    \ cmp)\n   local result = \"\"\n   for i = 1, #words - 1 do\n      result = result\
    \ .. words[i] .. \" \"\n   end\n   result = result .. words[#words]\n   return\
    \ result\nend\nassert(anti_shuffle \"abc def\" == \"abc def\")\nassert(anti_shuffle\
    \ \"aaa bb cc\" == \"aaa bb cc\")\nassert(anti_shuffle \"   aaa bb cc\" == \"\
    \   aaa bb cc\")\nassert(anti_shuffle \"   aaa bb cc   \" == \"   aaa bb cc  \
    \ \")\nassert(anti_shuffle \"   aaa bb cc eee dddd\" == \"aaa bb cc dddd eee\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpzt9mpxqm.lua:28: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpzt9mpxqm.lua:28: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local s_tokens = {}\n    for token in s:gmatch(\"%S+\") do\n        table.insert(s_tokens,\
    \ token)\n    end\n    return table.concat(s_tokens, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp234qnp33.lua:19:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp234qnp33.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {};\n  for w in s:gmatch(\"%w+\") do\n    table.insert(words,\
    \ w);\n  end\n  table.sort(words, function(a, b)\n    return a:lower() < b:lower();\n\
    \  end);\n  local s = \"\";\n  for _, w in ipairs(words) do\n    s = s .. w ..\
    \ \" \";\n  end\n  return s:sub(1, -2);\nend\nassert(anti_shuffle(\"Hello world\"\
    ) == \"ehllo dlorw\");\nassert(anti_shuffle(\"Hello \") == \"ehllo \");\nassert(anti_shuffle(\"\
    Hello\") == \"ehllo\");\nassert(anti_shuffle(\"tHe wOrlD aS wE kNow iT\") == \"\
    aEiIkNoOrSwTt wd\");\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmptedzdw1r.lua:21: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmptedzdw1r.lua:21: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   -- insert here your code\n   --return\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpug4ft_t3.lua:15:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpug4ft_t3.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local list = {}\n    for w in s:gmatch(\"%S+\") do\n        local l = {}\n\
    \        for c in w:gmatch(\".\") do\n            l[#l+1] = c\n        end\n \
    \       table.sort(l)\n        list[#list+1] = table.concat(l)\n    end\n    return\
    \ table.concat(list, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return s:gsub(\"%S+\", function(w)\n        return w:gsub(\".\", function(c)\n\
    \            return string.char(string.byte(c))\n        end)\n    end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52tkxygj.lua:19:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp52tkxygj.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- TODO: your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9eui9_63.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmp9eui9_63.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = s:split(' ')\n    local result = {}\n    for _, w in ipairs(words)\
    \ do\n        local sorted = {}\n        for i = 1, #w do\n            table.insert(sorted,\
    \ w:sub(i, i))\n        end\n        table.sort(sorted)\n        table.insert(result,\
    \ table.concat(sorted))\n    end\n    return table.concat(result, ' ')\nend\n\
    assert(anti_shuffle(\"odaihgvnao ieidre\") == \"adgghiinnooaaeir\")\nassert(anti_shuffle(\"\
    a b\") == \"a b\")\nassert(anti_shuffle(\"\") == \"\")\nassert(anti_shuffle(\"\
    a aa aab\") == \"a aa ab\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpok_97cg7.lua:8: attempt to call a nil value (method 'split')\n\
    stack traceback:\n\t/tmp/tmpok_97cg7.lua:8: in local 'anti_shuffle'\n\t/tmp/tmpok_97cg7.lua:20:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local function sort(s)\n        local t = {}\n        for c in s:gmatch('.')\
    \ do\n            table.insert(t, c)\n        end\n        table.sort(t)\n   \
    \     return table.concat(t)\n    end\n    local words = {}\n    for w in s:gmatch('%S+')\
    \ do\n        table.insert(words, sort(w))\n    end\n    return table.concat(words,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local t = {}\n  for w in s:gmatch(\"%S+\") do\n    table.insert(t, table.concat(split(w),\
    \ \"\"))\n  end\n  return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp030bc8co.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp030bc8co.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmp030bc8co.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new_s = ''\n    local t = {}\n    local words = {}\n    for w in s:gmatch('%S+')\
    \ do\n        table.insert(words, w)\n    end\n    local sorted_w = {}\n    for\
    \ i, v in ipairs(words) do\n        table.insert(sorted_w, v:lower():gsub('.',\
    \ function(c)\n            table.insert(t, c)\n        end))\n        table.sort(t)\n\
    \        local sorted_word = table.concat(t)\n        t = {}\n        table.insert(sorted_w,\
    \ i, sorted_word)\n    end\n    for i, v in ipairs(sorted_w) do\n        new_s\
    \ = new_s .. v .. ' '\n    end\n    return new_s:sub(1, #new_s - 1)\nend\nassert(anti_shuffle'Hello\
    \ world')  ==  'ehllo dlorw'\nassert(anti_shuffle'This is an example')  ==  'aehilnpsstx'\n\
    assert(anti_shuffle'HeLLo  WOrld  !')  ==  'ehllo dlorw'\nassert(anti_shuffle'Foo\
    \    Bar')  ==  'abfoor'\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzivro70u.lua:29: unexpected symbol near ''==''

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqga5z0v5.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpqga5z0v5.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local res = {}\n    for w in s:gmatch(\"%w+\") do\n        table.insert(res,\
    \ w:gsub(\".\", function(c) return string.char(tonumber(string.byte(c))+1) end))\n\
    \    end\n    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu2vvw2ro.lua:10:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpu2vvw2ro.lua:10: in local 'candidate'\n\t/tmp/tmpu2vvw2ro.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \treturn table.concat(\n\t\ttable.sort(\n\t\t\ttable.map(\n\t\t\t\tstring.split(s,\
    \ ' '),\n\t\t\t\tfunction(w)\n\t\t\t\t\treturn table.concat(table.sort(string.to_array(w)))\n\
    \t\t\t\tend\n\t\t\t)\n\t\t),\n\t\t' '\n\t)\nend\nassert_equal(\n\t'abc abcd aabbcc\
    \ aabbccdd efgh',\n\tanti_shuffle('aabbccdd abc abcd efgh aabbcc')\n)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp7o3jjbnk.lua:11: attempt to call a nil value (field 'split')\n\
    stack traceback:\n\t/tmp/tmp7o3jjbnk.lua:11: in local 'anti_shuffle'\n\t/tmp/tmp7o3jjbnk.lua:22:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local t = {}\n    for w in s:gmatch('%w+') do table.insert(t, w) end\n  \
    \  for i = 1, #t do\n        t[i] = table.concat(tab.sort(str.to_char_list(t[i])),\
    \ '')\n    end\n    return table.concat(t, ' ')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiqugafsv.lua:11:\
    \ attempt to index a nil value (global 'tab')\nstack traceback:\n\t/tmp/tmpiqugafsv.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpiqugafsv.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    local new_words = {}\n    for i,word in ipairs(words) do\n\
    \        local chars = {}\n        for char in word:gmatch(\".\") do\n       \
    \     table.insert(chars, char)\n        end\n        table.sort(chars)\n    \
    \    local new_word = table.concat(chars)\n        table.insert(new_words, new_word)\n\
    \    end\n    return table.concat(new_words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    for index, word in ipairs(words) do\n        local ordered\
    \ = {}\n        for c in word:gmatch(\".\") do\n            table.insert(ordered,\
    \ c)\n        end\n        table.sort(ordered)\n        words[index] = table.concat(ordered)\n\
    \    end\n    return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return ''.join(sorted(s))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6xkxv686.lua:8: ''end'' expected (to close ''function'' at
    line 7) near ''.''

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local str = {}\n    local t = {}\n    local index = 1\n    local word = ''\n\
    \    local word_arr = {}\n    for word in string.gmatch(s, '%S+') do\n       \
    \ table.insert(t, word)\n    end\n    for k,v in pairs(t) do\n        for i =\
    \ 1,string.len(v) do\n            table.insert(word_arr,string.sub(v,i,i))\n \
    \       end\n        table.sort(word_arr)\n        for k,v in pairs(word_arr)\
    \ do\n            word = word .. v\n        end\n        word_arr = {}\n     \
    \   if index < #t then\n            str[index] = word .. ' '\n        else\n \
    \           str[index] = word\n        end\n        word = ''\n        index =\
    \ index + 1\n    end\n    local out = ''\n    for k,v in pairs(str) do\n     \
    \   out = out .. v\n    end\n    return out\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local function sort_chars(word)\n        local chars = {}\n        for i\
    \ = 1, #word do\n            chars[i] = word:sub(i, i)\n        end\n        table.sort(chars)\n\
    \        return table.concat(chars)\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl6msgm_t.lua:29: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  --[[\n  * Split the string into words.\n  * For each word, get an ordered version\
    \ of it.\n  * Join the words back and return the result.\n  --]]\n  local words\
    \ = str_split(s, \" \")\n  for i, word in ipairs(words) do\n    words[i] = order_string(word)\n\
    \  end\n  return table.concat(words, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiglx7jfa.lua:13:\
    \ attempt to call a nil value (global 'str_split')\nstack traceback:\n\t/tmp/tmpiglx7jfa.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpiglx7jfa.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4708dhx.lua:13:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu4708dhx.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local t = {}\n    for i in s:gmatch(\"[^%s]+\") do\n        local j = {}\n\
    \        for k in i:gmatch(\".\") do\n            table.insert(j, k)\n       \
    \ end\n        table.sort(j)\n        table.insert(t, table.concat(j))\n    end\n\
    \    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- string.match only returns the first match\n  -- so we use a table to store\
    \ all matching patterns\n  local words = {}\n  for word in string.gmatch(s, \"\
    %S+\") do\n    table.insert(words, word)\n  end\n  -- sort the characters in each\
    \ word\n  for i = 1, #words do\n    local charTable = {}\n    for char in string.gmatch(words[i],\
    \ \".\") do\n      table.insert(charTable, char)\n    end\n    table.sort(charTable)\n\
    \    words[i] = table.concat(charTable)\n  end\n  return table.concat(words, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {}\n  local input_words = {}\n  local output_words = {}\n  --split\
    \ words\n  for w in s:gmatch(\"%S+\") do\n    table.insert(input_words, w)\n \
    \ end\n  -- sort each word\n  for i = 1, #input_words do\n    local word = \"\"\
    \n    local letters = {}\n    for l in input_words[i]:gmatch(\"%a\") do\n    \
    \  table.insert(letters, l)\n    end\n    table.sort(letters)\n    -- concat letters\n\
    \    for j = 1, #letters do\n      word = word .. letters[j]\n    end\n    table.insert(output_words,\
    \ word)\n  end\n  -- concat sorted words\n  local output = \"\"\n  for i = 1,\
    \ #output_words do\n    output = output .. output_words[i] .. \" \"\n  end\n \
    \ return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa5a5dfps.lua:40:\
    \ expected: \"Hi\"\nactual: \"Hi \"\nstack traceback:\n\t/tmp/tmpa5a5dfps.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new_s = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(new_s,\
    \ word:gsub(\".\", function(char)\n            return char .. string.rep(\" \"\
    , 255 - string.byte(char))\n        end))\n    end\n    return table.concat(new_s,\
    \ \" \")\nend\nassert(anti_shuffle(\"abc def ghi jkl\") == \"abc bcdef cdefd efghi\
    \ fghij ghi jkl\")\nassert(anti_shuffle(\"a b   c d e\") == \"a ab abc  b cd cd\
    \  e\")\nassert(anti_shuffle(\"this is a test\") == \"a aehist ehistt hiiiss issstt\
    \ ssttt t\")\nassert(anti_shuffle(\"\") == \"\")\nassert(anti_shuffle(\" \") ==\
    \ \" \")\nassert(anti_shuffle(\"a\") == \"a\")\nassert(anti_shuffle(\"a \") ==\
    \ \"a \")\nassert(anti_shuffle(\" a\") == \" a\")\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp36cxu7ey.lua:10: bad argument #2 to 'insert' (number expected,\
    \ got string)\nstack traceback:\n\t[C]: in function 'table.insert'\n\t/tmp/tmp36cxu7ey.lua:10:\
    \ in local 'anti_shuffle'\n\t/tmp/tmp36cxu7ey.lua:16: in main chunk\n\t[C]: in\
    \ ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal words = {}\n\tlocal last = 1\n\tfor i = 1, #s do\n\t\tif s:sub(i, i) ==\
    \ ' ' then\n\t\t\twords[#words + 1] = s:sub(last, i - 1)\n\t\t\tlast = i + 1\n\
    \t\tend\n\tend\n\tif last <= #s then\n\t\twords[#words + 1] = s:sub(last)\n\t\
    end\n\tlocal res = {}\n\tfor _, w in ipairs(words) do\n\t\tlocal sorted = {}\n\
    \t\tfor i = 1, #w do\n\t\t\tlocal c = w:sub(i, i)\n\t\t\tsorted[#sorted + 1] =\
    \ c\n\t\tend\n\t\ttable.sort(sorted)\n\t\tres[#res + 1] = table.concat(sorted)\n\
    \tend\n\treturn table.concat(res, ' ')\nend\nassert(anti_shuffle(\"vsovens\")\
    \ == \"enossv\")\nassert(anti_shuffle(\"enossv\") == \"enossv\")\nassert(anti_shuffle(\"\
    enossv vovnes sovens\") == \"enossv enossv enossv\")\nassert(anti_shuffle(\"\"\
    ) == \"\")\nassert(anti_shuffle(\"a\") == \"a\")\nassert(anti_shuffle(\" \") ==\
    \ \" \")\nassert(anti_shuffle(\" a\") == \" a\")\nassert(anti_shuffle(\"ab \"\
    ) == \"ab \")\nassert(anti_shuffle(\" a \") == \" a \")\nassert(anti_shuffle(\"\
    \    \") == \"    \")\nassert(anti_shuffle(\" abc  x   \") == \"abc  x   \")\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpul_nstan.lua:31: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpul_nstan.lua:31: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   local ret = {}\n   local words = s:split(\" \")\n   for i = 1, #words do\n\
    \      local word = words[i]\n      local xs = {}\n      for j = 1, #word do\n\
    \         xs[#xs + 1] = word:sub(j, j)\n      end\n      table.sort(xs)\n    \
    \  local x = \"\"\n      for _, c in ipairs(xs) do\n         x = x .. c\n    \
    \  end\n      ret[#ret + 1] = x\n   end\n   return table.concat(ret, \" \")\n\
    end\nassert(anti_shuffle(\"Oyyyvveee eeearrrss\") == \"Oeeeerrvyv eeearrss\")\n\
    assert(anti_shuffle(\"We are all in the gutter but some of us are looking at the\
    \ stars\") == \"Ww aaee rlll ine ottttr tttttr ee ee eeeeeo fsuu rrrss\")\nassert(anti_shuffle(\"\
    \") == \"\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpx25g2x_k.lua:9: attempt to call a nil value (method 'split')\n\
    stack traceback:\n\t/tmp/tmpx25g2x_k.lua:9: in local 'anti_shuffle'\n\t/tmp/tmpx25g2x_k.lua:25:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4708dhx.lua:13:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpu4708dhx.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {}\n  for word in s:gmatch('%w+') do\n    table.insert(words,\
    \ word)\n  end\n  for i = 1, #words do\n    local w = words[i]\n    words[i] =\
    \ w:gsub('(.)', function(c)\n      return c..'\\1'\n    end)\n    table.sort(words)\n\
    \    words[i] = words[i]:gsub('(.)\\1', '%1')\n  end\n  local res = ''\n  for\
    \ word in s:gmatch('%w+') do\n    res = res..table.remove(words, 1)\n  end\n \
    \ return res\nend\nassert(anti_shuffle('hello world') == 'ehllo dlorw')\nassert(anti_shuffle('apple\
    \ dog') == 'aelpp dgo')\nassert(anti_shuffle('hello world is beautiful') == 'ehllo\
    \ dlorw is eeautifl')\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmphmc5jotk.lua:26: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmphmc5jotk.lua:26: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   if not s:find(\"%S\") then\n      return \"\"\n   end\n   local words = {}\n\
    \   for word in s:gmatch(\"%S+\") do\n      table.insert(words, word)\n   end\n\
    \   local ordered_words = {}\n   for _, word in ipairs(words) do\n      table.insert(ordered_words,\
    \ table.concat(sort(word)))\n   end\n   return table.concat(ordered_words, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmhe7h99s.lua:17:\
    \ attempt to call a nil value (global 'sort')\nstack traceback:\n\t/tmp/tmpmhe7h99s.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpmhe7h99s.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local function word_to_ord(s)\n    local t = {}\n    for i = 1, #s do\n   \
    \   t[#t + 1] = string.byte(s, i)\n    end\n    table.sort(t)\n    local s = \"\
    \"\n    for i = 1, #t do\n      s = s .. string.char(t[i])\n    end\n    return\
    \ s\n  end\n  local function word_from_ord(s)\n    local t = {}\n    for i = 1,\
    \ #s do\n      t[#t + 1] = string.byte(s, i)\n    end\n    table.sort(t)\n   \
    \ local s = \"\"\n    for i = 1, #t do\n      s = s .. string.char(t[i])\n   \
    \ end\n    return s\n  end\n  local t = {}\n  local i = 1\n  while i <= #s do\n\
    \    local r = s:find(\" \", i)\n    if r == nil then\n      r = #s + 1\n    end\n\
    \    t[#t + 1] = word_from_ord(s:sub(i, r - 1))\n    i = r + 1\n  end\n  return\
    \ table.concat(t, \" \")\nend\nassert(anti_shuffle(\"To be or not to be\") ==\
    \ \"bo eoo rnteotb\")\nassert(anti_shuffle(\"Sorting is fun\") == \"noirgsti sfu\"\
    )\nassert(anti_shuffle(\"The cake is a lie\") == \"aehcik lteia ets\")\nassert(anti_shuffle(\"\
    The cake is a lie\") == \"aehcik lteia ets\")\nassert(anti_shuffle(\"aabbccdd\"\
    ) == \"aabbccdd\")\nassert(anti_shuffle(\"aaaaaaaa\") == \"aaaaaaaa\")\nassert(anti_shuffle(\"\
    a\") == \"a\")\nassert(anti_shuffle(\"\") == \"\")\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpqrxhqo5a.lua:44: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpqrxhqo5a.lua:44: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local w = \"\"\n  for x in s:gmatch(\"%S+\") do\n    local l = {}\n    for\
    \ i in x:gmatch(\".\") do table.insert(l, i) end\n    table.sort(l)\n    w = w\
    \ .. table.concat(l) .. \" \"\n  end\n  return w:sub(1, -2)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvp56ntmj.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpvp56ntmj.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tif type(s) ~= \"string\" then\n\t\terror(\"argument must be a string\")\n\t\
    end\n\tlocal t = {}\n\tfor str in s:gmatch(\"%S+\") do\n\t\tlocal arr = {}\n\t\
    \tfor i = 1, #str do\n\t\t\tarr[i] = str:sub(i, i)\n\t\tend\n\t\ttable.sort(arr)\n\
    \t\ttable.insert(t, table.concat(arr))\n\tend\n\treturn table.concat(t, \" \"\
    )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local t = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(t, word:gsub(\"\
    .\", function(c) return c .. string.char(0) end))\n  end\n  table.sort(t)\n  return\
    \ table.concat(t, \" \"):gsub(\"%z\", \"\")\nend\nassert(anti_shuffle(\"Hello\
    \ world!\") == \"deHllloorw!\")\nassert(anti_shuffle(\"aBcD\") == \"aBcD\")\n\
    assert(anti_shuffle(\"  How   are you ? \") == \"  Hhoww   aaree  ?you \")\nassert(anti_shuffle(\"\
    Hello World\") == \"deHllloorW\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp8math3xp.lua:10: bad argument #2 to 'insert' (number expected,\
    \ got string)\nstack traceback:\n\t[C]: in function 'table.insert'\n\t/tmp/tmp8math3xp.lua:10:\
    \ in local 'anti_shuffle'\n\t/tmp/tmp8math3xp.lua:15: in main chunk\n\t[C]: in\
    \ ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  if type(s) ~= \"string\" then\n    return nil\n  end\n  local t = {}\n  for\
    \ word in s:gmatch(\"%S+\") do\n    table.insert(t, word:gsub(\".\", function(c)\n\
    \      return string.char(c:byte() + 1)\n    end))\n  end\n  return table.concat(t,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnpcz19e7.lua:13:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpnpcz19e7.lua:13: in local 'candidate'\n\t/tmp/tmpnpcz19e7.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- your code\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7z5nfpw.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpi7z5nfpw.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal t, i = {}, 1\n\tfor word in s:gmatch(\"%S+\") do\n\t\tt[i] = word\n\t\t\
    i = i + 1\n\tend\n\ttable.sort(t, function(a, b) return a < b end)\n\treturn table.concat(t,\
    \ \" \")\nend\nassert(anti_shuffle(\"You shall not pass!\") == \"aaaeehlllnotpprsssu\"\
    )\nassert(anti_shuffle(\"Hello world!\") == \"dehllloorw\")\nassert(anti_shuffle(\"\
    Make School\") == \"School Make\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpmuqf3k3l.lua:16: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpmuqf3k3l.lua:16: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  s = \"M an k tu ds of\\n\"\n  --> \"M an k tu ds of\\n\"\n  s = \"J a v a \
    \  p r o g r a m m i n g\\n\"\n  --> \"a a a g i i J m m n n o p r r v\\n\"\n\
    \  s = \"M y k id s l ov e g a m e s\\n\"\n  --> \"d e e g i k M l m o s s s v\
    \ y\\n\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmpsx7qa6.lua:19:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpmpsx7qa6.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    local word = \"\"\n    local s_len = #s\n    for i\
    \ = 1, s_len do\n        local c = s:sub(i, i)\n        if c == \" \" then\n \
    \           if #word > 0 then\n                table.insert(words, word)\n   \
    \             word = \"\"\n            end\n            table.insert(words, \"\
    \ \")\n        else\n            word = word .. c\n        end\n    end\n    if\
    \ #word > 0 then\n        table.insert(words, word)\n    end\n    local sorted_words\
    \ = {}\n    for _, word in ipairs(words) do\n        if word == \" \" then\n \
    \           table.insert(sorted_words, word)\n        else\n            local\
    \ letters = {}\n            for i = 1, #word do\n                table.insert(letters,\
    \ word:sub(i, i))\n            end\n            table.sort(letters)\n        \
    \    table.insert(sorted_words, table.concat(letters))\n        end\n    end\n\
    \    return table.concat(sorted_words)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4ag3yb4.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpt4ag3yb4.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(new,\
    \ w:gsub(\"(.)\", \"%1 %1\"):gsub(\" \", \"\"):gsub(\"(.)\", \"%1 \"):sub(1, -2))\n\
    \    end\n    return table.concat(new, \" \")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2tlf2o0.lua:18:\
    \ expected: \"Hi\"\nactual: \"H H i i\"\nstack traceback:\n\t/tmp/tmpw2tlf2o0.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal t = {}\n\tlocal res = \"\"\n\tfor w in s:gmatch(\"%S+\") do\n\t\ttable.insert(t,\
    \ w)\n\tend\n\tfor k, v in ipairs(t) do\n\t\tlocal tmp = {}\n\t\tfor i = 1, #v\
    \ do\n\t\t\ttable.insert(tmp, v:sub(i, i))\n\t\tend\n\t\ttable.sort(tmp)\n\t\t\
    for _, v in ipairs(tmp) do\n\t\t\tres = res .. v\n\t\tend\n\t\tif k ~= #t then\n\
    \t\t\tres = res .. \" \"\n\t\tend\n\tend\n\treturn res\nend\nassert(anti_shuffle(\"\
    Fuck you\") == \"cFkuouy\")\nassert(anti_shuffle(\"Fuck you, you bitch\") == \"\
    cFkuouy,youbitch\")\nassert(anti_shuffle(\"Fuck you, you bitch!\") == \"cFkuouy,youbitch!\"\
    )\nassert(anti_shuffle(\"123 456\") == \"123456\")\nassert(anti_shuffle(\"123\
    \ 456    \") == \"123456\")\nassert(anti_shuffle(\"123 456    789\") == \"123456789\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmppmjmqj7f.lua:28: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmppmjmqj7f.lua:28: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local t = {}\n  for w in s:gmatch(\"[^%s]+\") do\n    local tab = {}\n    for\
    \ c in w:gmatch(\".\") do\n      table.insert(tab, c)\n    end\n    table.sort(tab)\n\
    \    table.insert(t, table.concat(tab))\n  end\n  return table.concat(t, \" \"\
    )\nend\nassert_equal(\"eed dbrns,smmlm sb,\", anti_shumble(\"bees breed,small\
    \ fees\"))\nassert_equal(\"dvt dvt dvt dvt\", anti_shumble(\"dvt dvt dvt dvt\"\
    ))\nassert_equal(\"smmmlm,nnd,brns\", anti_shumble(\"small,and,bees\"))\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpk9n5xbti.lua:19: attempt to call a nil value (global 'anti_shumble')\n\
    stack traceback:\n\t/tmp/tmpk9n5xbti.lua:19: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local words = {}\n  local current = {}\n  local last = #s\n  for i = 1, #s\
    \ do\n    local current_char = s:sub(i, i)\n    if current_char == \" \" then\n\
    \      local word = table.concat(current)\n      table.insert(words, word)\n \
    \     current = {}\n    else\n      table.insert(current, current_char)\n    end\n\
    \  end\n  local last_word = table.concat(current)\n  table.insert(words, last_word)\n\
    \  for i = 1, #words do\n    local sorted = {}\n    for j = 1, #words[i] do\n\
    \      table.insert(sorted, words[i]:sub(j, j))\n    end\n    table.sort(sorted)\n\
    \    words[i] = table.concat(sorted)\n  end\n  return table.concat(words, \" \"\
    )\nend\nprint(anti_shuffle(\"cat dog bat\")) --> abt act adg dgo gto\nprint(anti_shuffle(\"\
    1 2 3 4 5 6 7 8 9 10\")) --> 1 1 10 10 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: 'act dgo abt

    1 2 3 4 5 6 7 8 9 01

    .

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {};\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ table.concat(sort_char(w:lower()), \"\"))\n    end\n    return table.concat(words,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppfp42dnq.lua:10:\
    \ attempt to call a nil value (global 'sort_char')\nstack traceback:\n\t/tmp/tmppfp42dnq.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmppfp42dnq.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local result = {}\n    local tbl = {}\n    for word in s:gmatch(\"%S+\")\
    \ do\n        local newWord = {}\n        for i = 1, #word do\n            table.insert(newWord,\
    \ word:sub(i, i))\n        end\n        table.sort(newWord)\n        local newWordStr\
    \ = table.concat(newWord)\n        table.insert(tbl, newWordStr)\n    end\n  \
    \  return table.concat(tbl, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local function rev(x)\n    local i = 1\n    local j = #x\n    while i < j do\n\
    \      x[i], x[j] = x[j], x[i]\n      i = i + 1\n      j = j - 1\n    end\n  \
    \  return x\n  end\n  local result = {}\n  for t in s:gmatch(\"%S+\") do\n   \
    \ local tmp = {}\n    for c in t:gmatch(\".\") do\n      table.insert(tmp, c)\n\
    \    end\n    table.sort(tmp)\n    table.insert(result, table.concat(rev(tmp)))\n\
    \  end\n  return table.concat(result, \" \")\nend\nassert(anti_shuffle(\"abc\"\
    ) == \"abc\")\nassert(anti_shuffle(\"abc bc ac\") == \"abc cba cba\")\nassert(anti_shuffle(\"\
    abc abc cba\") == \"abc cba cba\")\nassert(anti_shuffle(\"ab cba\") == \"ab abc\"\
    )\nassert(anti_shuffle(\"the lazy fox jumps over the dog\") == \"ehl fzay kox\
    \ spmuj revo eht god\")\nassert(anti_shuffle(\"go hang a salami im a lasagna hog\"\
    ) == \"ghin aaagi aalmm im a aghns sal\")\nassert(anti_shuffle(\"\") == \"\")\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmprvjtnpvh.lua:29: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmprvjtnpvh.lua:29: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    local res = {}\n    for word in s:gmatch(\"[^%s]+\"\
    ) do\n        words[#words + 1] = word\n    end\n    for i,word in ipairs(words)\
    \ do\n        res[i] = table.concat(word:split(\"\"):sort(), \"\")\n    end\n\
    \    return table.concat(res, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12ed0eiy.lua:14:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp12ed0eiy.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp12ed0eiy.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal t = {}\n\tlocal i = 1\n\twhile i <= #s do\n\t\twhile i <= #s and s:byte(i)\
    \ == 32 do\n\t\t\tt[#t + 1] = \" \"\n\t\t\ti = i + 1\n\t\tend\n\t\tlocal start\
    \ = i\n\t\twhile i <= #s and s:byte(i) ~= 32 do\n\t\t\ti = i + 1\n\t\tend\n\t\t\
    local word = s:sub(start, i - 1)\n\t\tlocal sorted_word = word:gsub(\".\", function(c)\n\
    \t\t\treturn string.char(c:byte())\n\t\tend)\n\t\ttable.sort(sorted_word)\n\t\t\
    sorted_word = table.concat(sorted_word)\n\t\tt[#t + 1] = sorted_word\n\tend\n\t\
    return table.concat(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfiu0wetk.lua:23:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpfiu0wetk.lua:23: in local 'candidate'\n\t/tmp/tmpfiu0wetk.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal t = {}\n\tfor w in s:gmatch(\"%w+\") do\n\t\ttable.insert(t, w:gsub(\"\
    (.)\", function(c) return c .. string.byte(c) end))\n\tend\n\ttable.sort(t)\n\t\
    return table.concat(t, \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpggseoa2x.lua:10:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmpggseoa2x.lua:10: in local 'candidate'\n\t/tmp/tmpggseoa2x.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \   local t = {}\n   for w in s:gmatch(\"%S+\") do\n      table.insert(t, w:gsub(\"\
    .\", function(c) return string.char(c:byte()) end))\n   end\n   return table.concat(t,\
    \ \" \")\nend\nprint(anti_shuffle(\"Hello world\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmphdindsfh.lua:10: bad argument #2 to 'insert' (number expected,\
    \ got string)\nstack traceback:\n\t[C]: in function 'table.insert'\n\t/tmp/tmphdindsfh.lua:10:\
    \ in local 'anti_shuffle'\n\t/tmp/tmphdindsfh.lua:14: in main chunk\n\t[C]: in\
    \ ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local new_string = \"\"\n    for word in s:gmatch(\"[^%s]+\") do\n      \
    \  local new_word = {}\n        for char in word:gmatch(\".\") do\n          \
    \  table.insert(new_word,char)\n        end\n        table.sort(new_word)\n  \
    \      new_string = new_string .. table.concat(new_word,\"\") .. \" \"\n    end\n\
    \    return new_string:sub(1,-2)\nend\nassert(anti_shuffle(\"Hello World\") ==\
    \ \"dehllloorw\")\nassert(anti_shuffle(\"abracadabra\") == \"aabbacddr\")\nassert(anti_shuffle(\"\
    coding is fun\") == \"cdeginnoisf\")\nassert(anti_shuffle(\"\") == \"\")\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp1jalbdnl.lua:19: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp1jalbdnl.lua:19: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local words = {}\n    for word in s:gmatch(\"%w+\") do\n        words[#words\
    \ + 1] = word\n    end\n    local result = {}\n    for i, word in ipairs(words)\
    \ do\n        local chars = {}\n        for char in word:gmatch(\".\") do\n  \
    \          chars[#chars + 1] = char\n        end\n        table.sort(chars)\n\
    \        result[i] = table.concat(chars)\n    end\n    return table.concat(result,\
    \ \" \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdo9kb6lm.lua:31:\
    \ expected: \"Hello !!!Wdlor\"\nactual: \"Hello Wdlor\"\nstack traceback:\n\t\
    /tmp/tmpdo9kb6lm.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  -- YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmx75gsj.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpdmx75gsj.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local t = {}\n    for w in s:gmatch('%S+') do\n        table.insert(t, w:gsub('(.)',\
    \ '%1\\0'):sort():gsub('\\0', ''))\n    end\n    return table.concat(t, ' ')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprd4tyleo.lua:10:\
    \ attempt to call a nil value (method 'sort')\nstack traceback:\n\t/tmp/tmprd4tyleo.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmprd4tyleo.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal ret = {}\n\tfor word in s:gmatch('([^%s]+)') do\n\t\tlocal c = {}\n\t\t\
    for i=1,#word do\n\t\t\tc[#c+1] = word:sub(i,i)\n\t\tend\n\t\ttable.sort(c)\n\t\
    \tret[#ret+1] = table.concat(c)\n\tend\n\treturn table.concat(ret, ' ')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 0
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  local chars = {}\n  for word in s:gmatch(\"%S+\") do\n    local chars_in_word\
    \ = {}\n    for c in word:gmatch(\".\") do\n      table.insert(chars_in_word,\
    \ c)\n    end\n    table.sort(chars_in_word)\n    local ordered_word = table.concat(chars_in_word)\n\
    \    table.insert(chars, ordered_word)\n  end\n  return table.concat(chars, \"\
    \ \")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local ans = \"\"\n    local space = \"\"\n    for w in s:gmatch(\"%S+\")\
    \ do\n        ans = ans .. space .. table.concat(w:gmatch(\".\"))\n        space\
    \ = \" \"\n    end\n    return ans\nend\nassert(anti_shuffle(\"a c b d\") == \"\
    a b c d\")\nassert(anti_shuffle(\"a c b d e\") == \"a b c d e\")\nassert(anti_shuffle(\"\
    a c b d e f\") == \"a b c d e f\")\nassert(anti_shuffle(\"a c b d e f g\") ==\
    \ \"a b c d e f g\")\nassert(anti_shuffle(\"a c b  d e f g\") == \"a b c d e f\
    \ g\")\nassert(anti_shuffle(\"This is a test!\") == \"Tihs is a etst!\")\nassert(anti_shuffle(\"\
    Hello world\") == \"deHlll orw\")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpeu_wy3az.lua:11: bad argument #1 to 'concat' (table expected,\
    \ got function)\nstack traceback:\n\t[C]: in function 'table.concat'\n\t/tmp/tmpeu_wy3az.lua:11:\
    \ in local 'anti_shuffle'\n\t/tmp/tmpeu_wy3az.lua:16: in main chunk\n\t[C]: in\
    \ ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fsi0dal.lua:15:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmp6fsi0dal.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal words = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\ttable.sort(words, function(w1, w2)\n\t\tlocal w1_s = w1:gsub(\"\
    %a\", function(c) return c:byte() end)\n\t\tlocal w2_s = w2:gsub(\"%a\", function(c)\
    \ return c:byte() end)\n\t\treturn w1_s < w2_s\n\tend)\n\treturn table.concat(words,\
    \ \" \")\nend\nprint(anti_shuffle(\"hello world !\"))\nprint(anti_shuffle(\"aaaa\
    \ bbb cccc\"))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "hello world\naaaa bbb cccc\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmpglxbd2t_.lua:26: expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\
    \t/tmp/tmpglxbd2t_.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \tlocal r = {}\n\tfor w in s:gmatch(\"%S+\") do\n\t\tlocal t = {}\n\t\tfor c in\
    \ w:gmatch(\".\") do\n\t\t\ttable.insert(t, c)\n\t\tend\n\t\ttable.sort(t)\n\t\
    \ttable.insert(r, table.concat(t))\n\tend\n\treturn table.concat(r, \" \")\nend\n\
    assert(anti_shuffle(\"I love you\") == \"I e l o o v y u\")\nassert(anti_shuffle(\"\
    I lvoe you\") == \"I e l o o v y u\")\nassert(anti_shuffle(\"  I   love you  \"\
    ) == \"  I   e l o o v y u  \")\nassert(anti_shuffle(\"  I   love   you  \") ==\
    \ \"  I   e l o o v   y u  \")\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpbehgun3h.lua:19: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpbehgun3h.lua:19: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local t = {}\n    local result = {}\n    local j = 1\n    for i in string.gmatch(s,\
    \ \"%S+\") do\n        t[j] = i\n        j = j + 1\n    end\n    for i,v in ipairs(t)\
    \ do\n        result[i] = string.gsub(v, \"%a\", function(x) return string.char(tonumber(string.byte(x)))\
    \ end)\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg3i4ze3y.lua:25:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpg3i4ze3y.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    -- Your code goes here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n \
    \   lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd870ljcl.lua:14:\
    \ expected: \"Hi\"\nactual: nil\nstack traceback:\n\t/tmp/tmpd870ljcl.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local result = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(result,\
    \ word:gsub(\".\", function(c)\n            return string.char(tonumber(string.byte(c)))\n\
    \        end))\n    end\n    return table.concat(result, \" \")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = anti_shuffle\n    lu.assertEquals(candidate('Hi'),\
    \ 'Hi')\n    lu.assertEquals(candidate('hello'), 'ehllo')\n    lu.assertEquals(candidate('number'),\
    \ 'bemnru')\n    lu.assertEquals(candidate('abcd'), 'abcd')\n    lu.assertEquals(candidate('Hello\
    \ World!!!'), 'Hello !!!Wdlor')\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi.\
    \ My name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6bugsbn3.lua:10:\
    \ bad argument #2 to 'insert' (number expected, got string)\nstack traceback:\n\
    \t/tmp/tmp6bugsbn3.lua:10: in local 'candidate'\n\t/tmp/tmp6bugsbn3.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    return (s:gsub('(%S+)', function(m) return m:gsub('.', '%%1') end))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pwx28pl.lua:14:\
    \ expected: \"Hi\"\nactual: \"%1%1\"\nstack traceback:\n\t/tmp/tmp7pwx28pl.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = anti_shuffle\n    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvkh9yj1b.lua:15:\
    \ expected: \"ehllo\"\nactual: \"hello\"\nstack traceback:\n\t/tmp/tmpvkh9yj1b.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822217
- exit_code: 1
  program: "-- Write a function that takes a string and returns an ordered version\
    \ of it.\n-- Ordered version of string, is a string where all words (separated\
    \ by space)\n-- are replaced by a new word where all the characters arranged in\n\
    -- ascending order based on ascii value.\n-- Note: You should keep the order of\
    \ words and blank spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n\
    \    local l=split(s)\n    local ans=\"\"\n    for _,v in ipairs(l) do\n     \
    \   local b=\"\"\n        for _,v2 in ipairs(split(v)) do\n            b=b..v2\n\
    \        end\n        ans=ans..sort(b)..\" \"\n    end\n    return ans\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
    \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
    \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
    \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My\
    \ name is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer\
    \ ?ouy')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwdz6sb16.lua:8:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpwdz6sb16.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpwdz6sb16.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822217
