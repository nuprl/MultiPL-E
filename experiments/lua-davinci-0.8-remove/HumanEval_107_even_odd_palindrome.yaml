name: HumanEval_107_even_odd_palindrome
language: lua
prompt: "-- Given a positive integer n, return a tuple that has the number of even\
  \ and odd\n-- integer palindromes that fall within the range(1, n), inclusive.\n\
  -- Example 1:\n-- Explanation:\n-- Integer palindrome are 1, 2, 3. one of them is\
  \ even, and two of them are odd.\n-- Example 2:\n-- Explanation:\n-- Integer palindrome\
  \ are 1, 2, 3, 4, 5, 6, 7, 8, 9, 11. four of them are even, and 6 of them are odd.\n\
  -- Note:\n-- 1. 1 <= n <= 10^3\n-- 2. returned tuple has the number of even and\
  \ odd integer palindromes respectively.\nlocal function even_odd_palindrome(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_palindrome\n\
  \    lu.assertEquals(candidate(123), {8, 13})\n    lu.assertEquals(candidate(12),\
  \ {4, 6})\n    lu.assertEquals(candidate(3), {1, 2})\n    lu.assertEquals(candidate(63),\
  \ {6, 8})\n    lu.assertEquals(candidate(25), {5, 6})\n    lu.assertEquals(candidate(19),\
  \ {4, 6})\n    lu.assertEquals(candidate(9), {4, 5})\n    lu.assertEquals(candidate(1),\
  \ {0, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local even = 0\n    local odd = 0\n    for i = 1, n do\n      \
    \  if i % 10 == 0 then\n            even = even + 1\n        elseif i < 10 then\n\
    \            odd = odd + 1\n        else\n            local s = tostring(i)\n\
    \            local j = 1\n            local k = #s\n            while j < k do\n\
    \                if s:sub(j, j) ~= s:sub(k, k) then\n                    break\n\
    \                end\n                j = j + 1\n                k = k - 1\n \
    \           end\n            if j >= k then\n                if #s % 2 == 0 then\n\
    \                    even = even + 1\n                else\n                 \
    \   odd = odd + 1\n                end\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    local function is_palindrome(x)\n        local\
    \ t, y = {}, x\n        while x > 0 do\n            table.insert(t, x % 10)\n\
    \            x = math.floor(x / 10)\n        end\n        for i = 1, #t / 2 do\n\
    \            if t[i] ~= t[#t - i + 1] then\n                return false\n   \
    \         end\n        end\n        return true\n    end\n    local function count_digit(x)\n\
    \        local c = 0\n        while x > 0 do\n            x = math.floor(x / 10)\n\
    \            c = c + 1\n        end\n        return c\n    end\n    local r1,\
    \ r2 = 0, 0\n    local i = 1\n    while i <= n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                r1 = r1 + 1\n        \
    \    else\n                r2 = r2 + 1\n            end\n        end\n       \
    \ if i == 1 then\n            i = i + 1\n        else\n            local cd =\
    \ count_digit(i)\n            i = i + 10 ^ (cd / 2)\n        end\n    end\n  \
    \  return r1, r2\nend", "  local count_even, count_odd = 0, 0\n  local fn_str\
    \ = function(str)\n    local str_len = #str\n    local half_len = math.floor(str_len\
    \ / 2)\n    local i, j = 1, str_len\n    while i <= half_len do\n      if str:sub(i,\
    \ i) ~= str:sub(j, j) then\n        return false\n      end\n      i = i + 1\n\
    \      j = j - 1\n    end\n    return true\n  end\n  for i = 1, n do\n    if fn_str(tostring(i))\
    \ then\n      if i % 2 == 0 then\n        count_even = count_even + 1\n      else\n\
    \        count_odd = count_odd + 1\n      end\n    end\n  end\n  return count_even,\
    \ count_odd\nend", "    local res = {0, 0}\n    local l = math.floor(math.log10(n))\n\
    \    local n0 = (n / 10) ^ l\n    local n1 = n % (n0 + 1)\n    local n2 = n %\
    \ n0\n    local n3 = n % (n0 / 10)\n    local is_p = function(n)\n        local\
    \ tmp = n\n        local r = 0\n        while tmp > 0 do\n            r = r *\
    \ 10 + tmp % 10\n            tmp = math.floor(tmp / 10)\n        end\n       \
    \ return r == n\n    end\n    for i = 1, l do\n        if i % 2 == 0 then\n  \
    \          res[1] = res[1] + n0\n        else\n            res[2] = res[2] + n0\n\
    \        end\n    end\n    if l % 2 == 0 then\n        res[1] = res[1] + 1\n \
    \   else\n        res[2] = res[2] + 1\n    end\n    if n1 > n2 then\n        if\
    \ l % 2 == 0 then\n            res[1] = res[1] + n2 + 1\n        else\n      \
    \      res[2] = res[2] + n2 + 1\n        end\n    else\n        if l % 2 == 0\
    \ then\n            res[1] = res[1] + n2\n        else\n            res[2] = res[2]\
    \ + n2\n        end\n    end\n    if n3 > 0 then\n        if l % 2 == 0 then\n\
    \            res[1] = res[1] + 1\n        else\n            res[2] = res[2] +\
    \ 1\n        end\n    end\n    return res\nend", "    local function is_palindrome(num)\n\
    \        local num_str = tostring(num)\n        local len = #num_str\n       \
    \ local half = math.floor(len / 2)\n        for i = 1, half do\n            if\
    \ num_str:sub(i, i) ~= num_str:sub(len - i + 1, len - i + 1) then\n          \
    \      return false\n            end\n        end\n        return true\n    end\n\
    \    local even_cnt, odd_cnt = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even_cnt = even_cnt +\
    \ 1\n            else\n                odd_cnt = odd_cnt + 1\n            end\n\
    \        end\n    end\n    return even_cnt, odd_cnt\nend", "    local even, odd\
    \ = 0, 0\n    for i = 1, n do\n        if i == reverse_int(i) then\n         \
    \   if i % 2 == 0 then\n                even = even + 1\n            else\n  \
    \              odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ math.tointeger(i) == math.tointeger(i, 10, 2) then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    local s = tostring(n)\n  \
    \  local len = #s\n    if len % 2 == 0 then\n        local half_len = len / 2\n\
    \        local left = tonumber(s:sub(1, half_len))\n        local right = tonumber(s:sub(half_len\
    \ + 1, len))\n        if left == right then\n            if left % 2 == 0 then\n\
    \                even = 1\n            else\n                odd = 1\n       \
    \     end\n        end\n    else\n        local half_len = (len - 1) / 2\n   \
    \     local left = tonumber(s:sub(1, half_len))\n        local middle = tonumber(s:sub(half_len\
    \ + 1, half_len + 1))\n        local right = tonumber(s:sub(half_len + 2, len))\n\
    \        if left == right then\n            if left % 2 == 0 then\n          \
    \      even = 1\n            else\n                odd = 1\n            end\n\
    \        end\n        if middle % 2 == 0 then\n            even = even + 1\n \
    \       else\n            odd = odd + 1\n        end\n    end\n    return even,\
    \ odd\nend", "    local e, o = 0, 0\n    if n < 1 or n > 10 ^ 3 then\n       \
    \ return\n    end\n    local s = tostring(n)\n    local m = tonumber(s:sub(1,\
    \ (s:len() + 1) / 2)) - 1\n    if s:len() % 2 == 0 then\n        e = m + 1\n \
    \       o = m\n    else\n        e = m\n        o = m\n    end\n    return e,\
    \ o\nend", "    local even = 0\n    local odd = 0\n    for i = 1, n do\n     \
    \   if i % 2 == 0 then\n            even = even + 1\n        else\n          \
    \  odd = odd + 1\n        end\n    end\n    return even, odd\nend", "    local\
    \ odd, even = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n        \
    \    even = even + 1\n        else\n            odd = odd + 1\n        end\n \
    \   end\n    return even, odd\nend", "    local even_count, odd_count = 0, 0\n\
    \    local function is_palindrome(i)\n        local s = tostring(i)\n        local\
    \ l, r = 1, #s\n        while l < r do\n            if s:sub(l, l) ~= s:sub(r,\
    \ r) then\n                return false\n            end\n            l, r = l\
    \ + 1, r - 1\n        end\n        return true\n    end\n    for i = 1, n do\n\
    \        if is_palindrome(i) then\n            if i % 2 == 0 then\n          \
    \      even_count = even_count + 1\n            else\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n    end\n    return even_count,\
    \ odd_count\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ string.reverse(tostring(i)) == tostring(i) then\n            i % 2 == 0 and\
    \ even = even + 1 or odd = odd + 1\n        end\n    end\n    return even, odd\n\
    end", "    local odd = 0\n    local even = 0\n    local k = 1\n    while k <=\
    \ n do\n        if math.floor(k / 10) == k % 10 then\n            even = even\
    \ + 1\n        elseif math.floor(k / 10) == 0 or math.floor(k / 10) == k % 10\
    \ then\n            odd = odd + 1\n        end\n        k = k + 1\n    end\n \
    \   return even, odd\nend", "    local e, o = 0, 0\n    for i = 1, n do\n    \
    \    if (i % 2 == 0) and (i == tonumber(tostring(i):reverse())) then\n       \
    \     e = e + 1\n        elseif (i % 2 == 1) and (i == tonumber(tostring(i):reverse()))\
    \ then\n            o = o + 1\n        end\n    end\n    return e, o\nend", " \
    \   local odd = 0\n    local even = 0\n    local n = tostring(n)\n    local nlen\
    \ = #n\n    local nlen2 = nlen // 2\n    local first, second = n:sub(1, nlen2),\
    \ n:sub(nlen - nlen2 + 1, nlen)\n    if first == second then\n        if (nlen\
    \ % 2 == 0) then\n            even = even + 1\n        else\n            odd =\
    \ odd + 1\n        end\n    end\n    if #first < #second then\n        first =\
    \ first .. first:sub(1, #first - 1)\n    else\n        first = first .. first:sub(1,\
    \ #first)\n    end\n    if first < n then\n        if (nlen % 2 == 0) then\n \
    \           even = even + 1\n        else\n            odd = odd + 1\n       \
    \ end\n    end\n    return even, odd\nend", "    local function isPalindrome(i)\n\
    \        local str = tostring(i)\n        local last = string.len(str)\n     \
    \   for i = 1, math.floor(last / 2) do\n            if str:sub(i, i) ~= str:sub(last\
    \ - i + 1, last - i + 1) then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local even = 0\n    local odd\
    \ = 0\n    for i = 1, n do\n        if isPalindrome(i) then\n            if i\
    \ % 2 == 0 then\n                even = even + 1\n            else\n         \
    \       odd = odd + 1\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    --\n    local count = {e = 0, o = 0}\n    local m = math.floor(math.log10(n))\n\
    \    for x = 1, m do\n        local b = math.floor(math.pow(10, x))\n        local\
    \ q = math.floor(n / b)\n        local d = math.floor(math.pow(10, x - 1))\n \
    \       local r = n % b\n        count.e = count.e + q * d\n        count.o =\
    \ count.o + q * d\n        local p = q / 10\n        local l = q % 10\n      \
    \  local t = l * d\n        if r < t then\n            count.e = count.e - d\n\
    \            count.o = count.o - d\n        elseif r > t then\n            count.e\
    \ = count.e + d\n            count.o = count.o + d\n        else\n           \
    \ count.e = count.e + r - t + 1\n            count.o = count.o + r - t\n     \
    \   end\n        if x == m then\n            if l & 1 == 0 then\n            \
    \    count.e = count.e + 1\n            else\n                count.o = count.o\
    \ + 1\n            end\n        end\n    end\n    return count.e, count.o\nend",
  "    local even = 0\n    local odd = 0\n    for i = 1, n do\n        if i < 10 then\n\
    \            odd = odd + 1\n        elseif i < 100 then\n            even = even\
    \ + 1\n        elseif i < 1000 then\n            local a, b, c = math.floor(i\
    \ / 100), math.floor(i / 10) % 10, i % 10\n            if a == c then\n      \
    \          even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ even = 0\n    local odd = 0\n    local i = 1\n    while i <= n do\n        if\
    \ i < 10 then\n            odd = odd + 1\n        elseif i < 100 then\n      \
    \      even = even + 1\n        elseif i < 1000 then\n            local j = 10\n\
    \            local count = 0\n            while j <= i do\n                count\
    \ = count + 1\n                j = j * 10\n            end\n            if count\
    \ % 2 == 0 then\n                even = even + 1\n            else\n         \
    \       odd = odd + 1\n            end\n        end\n        i = i + 1\n    end\n\
    \    return even, odd\nend\nreturn even_odd_palindrome", "    local p = {[0] =\
    \ {0, 0}}\n    for i = 1, n do\n        local v = i\n        local q = {}\n  \
    \      local d = 0\n        while v > 0 do\n            d = d * 10 + v % 10\n\
    \            v = math.floor(v / 10)\n        end\n        if d == i then\n   \
    \         local p0 = p[i - 1]\n            q[1] = p0[1] + 1\n            q[2]\
    \ = p0[2]\n        else\n            local p1 = p[math.floor(i / 10)]\n      \
    \      q[1] = p1[1]\n            q[2] = p1[2] + 1\n        end\n        p[i] =\
    \ q\n    end\n    return p[n]\nend", "    local even, odd = 0, 0\n    local r,\
    \ c\n    for i = 1, n do\n        c = 0\n        for j = i, 1, -1 do\n       \
    \     r = i % 10\n            c = c * 10 + r\n            i = math.floor(i / 10)\n\
    \        end\n        if i == c then\n            if c % 2 == 0 then\n       \
    \         even = even + 1\n            else\n                odd = odd + 1\n \
    \           end\n        end\n        i = c\n    end\n    return even, odd\nend",
  "  local even = 1\n  local odd = 1\n  for i = 1, n do\n    if i % 2 == 0 then\n\
    \      even = even + 1\n    else\n      odd = odd + 1\n    end\n  end\n  return\
    \ even, odd\nend", "    local even_count, odd_count = 0, 0\n    for i = 1, n do\n\
    \        if is_palindrome(i) then\n            if i % 2 == 0 then\n          \
    \      even_count = even_count + 1\n            else\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n    end\n    return even_count,\
    \ odd_count\nend", "    local is_palindrome = function(k)\n        local kstr\
    \ = tostring(k)\n        local len = #kstr\n        for i = 1, len / 2 do\n  \
    \          if kstr:sub(i, i) ~= kstr:sub(len - i + 1, len - i + 1) then\n    \
    \            return false\n            end\n        end\n        return true\n\
    \    end\n    local function helper(n)\n        if n <= 1 then\n            return\
    \ n, n\n        end\n        local even, odd = helper(n / 10)\n        if n %\
    \ 2 == 0 then\n            return even + 1, odd\n        else\n            return\
    \ even, odd + 1\n        end\n    end\n    local even, odd = helper(n)\n    return\
    \ even, odd\nend", "    local function is_palindrome(num)\n        local m = num\n\
    \        local n = 0\n        while num > 0 do\n            n = n * 10 + num %\
    \ 10\n            num = math.floor(num / 10)\n        end\n        return m ==\
    \ n\n    end\n    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local e, o = 0, 0\n    for i = 1, n\
    \ do\n        if n % 10 ~= 0 and i == tonumber(tostring(i):reverse()) then\n \
    \           if i % 2 == 0 then\n                e = e + 1\n            else\n\
    \                o = o + 1\n            end\n        end\n    end\n    return\
    \ e, o\nend", "    local odd = 0\n    local even = 0\n    for i = 1, n do\n  \
    \      if (i == reverse_integer(i)) then\n            if (i % 2 == 0) then\n \
    \               even = even + 1\n            else\n                odd = odd +\
    \ 1\n            end\n        end\n    end\n    return even, odd\nend", "  local\
    \ lo, hi = 1, n\n  local e, o = 0, 0\n  while lo <= hi do\n    if lo == hi then\n\
    \      e = e + 1\n    elseif lo % 10 == hi % 10 then\n      e = e + 1\n      o\
    \ = o + 1\n    elseif (lo % 10) * 10 + (hi % 10) == lo * 10 + hi then\n      e\
    \ = e + 1\n    elseif (lo % 10) * 10 + (hi % 10) == lo * 10 + (lo % 10) then\n\
    \      o = o + 1\n    end\n    lo = lo + 1\n    hi = hi - 1\n  end\n  return e,\
    \ o\nend", "    local even = 0\n    local odd = 0\n    for i = 1, n do\n     \
    \   if i == string.reverse(i) then\n            local is_even = (#tostring(i)\
    \ % 2 == 0)\n            if is_even then\n                even = even + 1\n  \
    \          else\n                odd = odd + 1\n            end\n        end\n\
    \    end\n    return even, odd\nend", "    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if i <= 9 then\n            odd = odd + 1\n        elseif i\
    \ % 10 == 0 then\n            even = even + 1\n        else\n            local\
    \ tmp = i\n            local left, right = 0, 0\n            while tmp > 0 do\n\
    \                right = right * 10 + tmp % 10\n                tmp = math.floor(tmp\
    \ / 10)\n            end\n            if i == right then\n                local\
    \ d = math.floor(math.log10(i))\n                left = math.floor(i / 10 ^ (d\
    \ / 2))\n                if left == 0 then\n                    odd = odd + 1\n\
    \                elseif left % 2 == 0 then\n                    even = even +\
    \ 1\n                else\n                    odd = odd + 1\n               \
    \ end\n            end\n        end\n    end\n    return even, odd\nend", "  \
    \  local function is_palindrome(s)\n        local len = #s\n        for i = 1,\
    \ len / 2 do\n            if s:sub(i, i) ~= s:sub(len - i + 1, len - i + 1) then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(tostring(i))\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local even, odd = 0, 0\n    local s\
    \ = tostring(n)\n    local i, j = 1, #s\n    while i <= j do\n        if s:sub(i,\
    \ i) == s:sub(j, j) then\n            if i == j then\n                odd = odd\
    \ + 1\n            else\n                even = even + 1\n            end\n  \
    \          i, j = i + 1, j - 1\n        else\n            break\n        end\n\
    \    end\n    return even, odd\nend", "  local count = {0, 0}\n  local k = 1\n\
    \  while k <= n do\n    if is_palindrome(k) then\n      if k % 2 == 0 then\n \
    \       count[1] = count[1] + 1\n      else\n        count[2] = count[2] + 1\n\
    \      end\n    end\n    k = k + 1\n  end\n  return count\nend", "    local count\
    \ = { [true] = 0, [false] = 0 }\n    local rev, temp\n    for i = 1, n do\n  \
    \      rev = 0\n        temp = i\n        while temp > 0 do\n            rev =\
    \ rev * 10 + temp % 10\n            temp = math.floor(temp / 10)\n        end\n\
    \        if rev == i then\n            count[i % 2 == 0] = count[i % 2 == 0] +\
    \ 1\n        end\n    end\n    return count[true], count[false]\nend", "    local\
    \ es, os = 0, 0\n    for i = 1, n do\n        local s = tostring(i)\n        if\
    \ (s == s:reverse()) then\n            if (i % 2 == 0) then\n                es\
    \ = es + 1\n            else\n                os = os + 1\n            end\n \
    \       end\n    end\n    return es, os\nend", "    local e, o = 0, 0\n    for\
    \ i = 1, n do\n        if i < 10 then\n            e = e + 1\n        elseif i\
    \ >= 10 and i < 100 then\n            o = o + 1\n        elseif i >= 100 and i\
    \ < 1000 then\n            local s = tostring(i)\n            if s:sub(1, 1) ==\
    \ s:sub(3, 3) then\n                e = e + 1\n            else\n            \
    \    o = o + 1\n            end\n        end\n    end\n    return e, o\nend",
  "    local res_even, res_odd = 0, 0\n    for i = 1, n do\n        if (i < 10) then\n\
    \            res_odd = res_odd + 1\n        elseif (i % 11 == 0) then\n      \
    \      res_even = res_even + 1\n        else\n            local s = tostring(i)\n\
    \            local l, r = 1, #s\n            while (l < r) do\n              \
    \  if (s:sub(l, l) ~= s:sub(r, r)) then\n                    break\n         \
    \       end\n                l, r = l + 1, r - 1\n            end\n          \
    \  if (l >= r) then\n                if (i % 2 == 0) then\n                  \
    \  res_even = res_even + 1\n                else\n                    res_odd\
    \ = res_odd + 1\n                end\n            end\n        end\n    end\n\
    \    return res_even, res_odd\nend\n_G.even_odd_palindrome = even_odd_palindrome",
  "    local odd, even = 0, 0\n    if n == 1 then\n        return {0, 1}\n    end\n\
    \    if n % 2 == 0 then\n        local num = 1\n        while num < n do\n   \
    \         odd = odd + 1\n            num = num * 10 + 1\n        end\n       \
    \ num = 2\n        while num < n do\n            even = even + 1\n           \
    \ num = num * 10 + 2\n        end\n    else\n        local num = 1\n        while\
    \ num < n do\n            odd = odd + 1\n            num = num * 10 + 1\n    \
    \    end\n        num = 2\n        while num < n do\n            odd = odd + 1\n\
    \            num = num * 10 + 2\n        end\n    end\n    return {even, odd}\n\
    end", "    local function is_palindrome(n)\n        local s = tostring(n)\n  \
    \      for i = 1, #s / 2 do\n            if s:sub(i, i) ~= s:sub(#s - i + 1, #s\
    \ - i + 1) then\n                return false\n            end\n        end\n\
    \        return true\n    end\n    local even_cnt, odd_cnt = 0, 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even_cnt = even_cnt + 1\n            else\n                odd_cnt\
    \ = odd_cnt + 1\n            end\n        end\n    end\n    return even_cnt, odd_cnt\n\
    end", "    local odd = 0\n    local even = 0\n    local digits = {}\n    -- insert\
    \ digits into the digits table\n    while n > 0 do\n        digits[#digits + 1]\
    \ = n % 10\n        n = math.floor(n / 10)\n    end\n    -- check the number of\
    \ even palindromes\n    if #digits == 1 then\n        even = 1\n    elseif #digits\
    \ == 2 then\n        if digits[1] == digits[2] then\n            even = 1\n  \
    \      end\n    else\n        if digits[1] ~= 0 then\n            even = 1\n \
    \       end\n        for i = 1, #digits - 2 do\n            if digits[i] ~= digits[i\
    \ + 1] then\n                even = even + 1\n            end\n        end\n \
    \       for i = 2, #digits - 1 do\n            if digits[i] ~= digits[i + 1] then\n\
    \                even = even + 1\n            end\n        end\n        if digits[#digits]\
    \ ~= 0 then\n            even = even + 1\n        end\n    end\n    -- check the\
    \ number of odd palindromes\n    if #digits == 1 then\n        odd = 1\n    elseif\
    \ #digits == 2 then\n        if digits[1] ~= digits[2] then\n            odd =\
    \ 1\n        end\n    else\n        for i = 1, #digits - 2 do\n            if\
    \ digits[i] ~= digits[i + 1] then\n                odd = odd + 1\n           \
    \ end\n        end\n        for i = 2, #digits - 1 do\n            if digits[i]\
    \ ~= digits[i + 1] then\n                odd = odd + 1\n            end\n    \
    \    end\n    end\n    return even, odd\nend", "    local even, odd = 0, 0\n \
    \   for i = 1, n do\n        if i < 10 then\n            odd = odd + 1\n     \
    \   elseif i % 10 == 0 then\n            even = even + 1\n        else\n     \
    \       local r, t = 0, i\n            while t > 0 do\n                r = r *\
    \ 10 + t % 10\n                t = math.floor(t / 10)\n            end\n     \
    \       if r == i then\n                if i % 2 == 0 then\n                 \
    \   even = even + 1\n                else\n                    odd = odd + 1\n\
    \                end\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local count_even, count_odd = 0, 0\n    for i = 1, n do\n  \
    \      if string.reverse(tostring(i)) == tostring(i) then\n            if i %\
    \ 2 == 0 then\n                count_even = count_even + 1\n            else\n\
    \                count_odd = count_odd + 1\n            end\n        end\n   \
    \ end\n    return count_even, count_odd\nend", "  if n < 1 or n > 10^3 then\n\
    \    return nil\n  end\n  local count = {0, 0}\n  for i = 1, n do\n    if is_palindrome(i)\
    \ then\n      if is_even(i) then\n        count[1] = count[1] + 1\n      else\n\
    \        count[2] = count[2] + 1\n      end\n    end\n  end\n  return count\n\
    end", "    local function is_palindrome(x)\n        if x < 0 then\n          \
    \  return false\n        end\n        local rev = 0\n        local num = x\n \
    \       while num > 0 do\n            rev = rev * 10 + num % 10\n            num\
    \ = math.floor(num / 10)\n        end\n        return rev == x\n    end\n    local\
    \ function get_count(n)\n        local count = 0\n        for i = 1, n do\n  \
    \          if is_palindrome(i) then\n                count = count + 1\n     \
    \       end\n        end\n        return count\n    end\n    local even = 0\n\
    \    local odd = 0\n    for i = 1, n do\n        if i % 2 == 0 then\n        \
    \    even = even + get_count(i)\n        else\n            odd = odd + get_count(i)\n\
    \        end\n    end\n    return even, odd\nend", "    local even = 0\n    local\
    \ odd = 0\n    if n < 10 then\n        return 0, n\n    end\n    local d = 1\n\
    \    while n > d do\n        d = d * 10\n    end\n    d = d / 10\n    while n\
    \ > 9 do\n        local c = n % 10\n        n = math.floor(n / 10)\n        if\
    \ c ~= n % 10 then\n            odd = odd + d\n        else\n            even\
    \ = even + d\n        end\n        d = d / 10\n    end\n    if n > 1 then\n  \
    \      odd = odd + 1\n    end\n    return even, odd\nend", "    local odd, even\
    \ = 0, 0\n    local tail, i = 0, 1\n    while i <= n do\n        local head =\
    \ tail + 1\n        tail = tail * 10 + 9\n        while head <= tail do\n    \
    \        local x = head + tail\n            local y = x\n            local num\
    \ = 0\n            while x > 0 do\n                num = num * 10 + x % 10\n \
    \               x = math.floor(x / 10)\n            end\n            if num <=\
    \ n and num == y then\n                if num % 2 == 0 then\n                \
    \    even = even + 1\n                else\n                    odd = odd + 1\n\
    \                end\n            end\n            head = head + 1\n        end\n\
    \        i = tail + 1\n    end\n    return even, odd\nend", "    if n == 1 then\n\
    \        return {0, 1}\n    end\n    local result = {0, 0}\n    local l = 1\n\
    \    while l <= n do\n        local r = l\n        while r <= n do\n         \
    \   if is_palindrome(l, r) then\n                result[1 + (r - l) % 2] = result[1\
    \ + (r - l) % 2] + 1\n            end\n            r = r + 1\n        end\n  \
    \      l = l + 1\n    end\n    return result\nend", "    local function is_palindrome(n)\n\
    \        local s = tostring(n)\n        for i = 1, math.floor(#s / 2) do\n   \
    \         if s:sub(i, i) ~= s:sub(#s - i + 1, #s - i + 1) then\n             \
    \   return false\n            end\n        end\n        return true\n    end\n\
    \    local odd, even = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "  local count = {even = 0, odd = 0}\n  for\
    \ i = 1, n do\n    if is_palindrome(i) then\n      if is_even(i) then\n      \
    \  count.even = count.even + 1\n      else\n        count.odd = count.odd + 1\n\
    \      end\n    end\n  end\n  return count\nend", "    local even_palindrome,\
    \ odd_palindrome = 0, 0\n    if n == 1 then\n        return even_palindrome, odd_palindrome\n\
    \    end\n    local div = n % 10\n    if div == 0 or div == 1 or div == 6 or div\
    \ == 8 then\n        even_palindrome = n // 10\n    elseif div == 2 or div ==\
    \ 3 or div == 5 or div == 7 or div == 9 then\n        odd_palindrome = n // 10\n\
    \    end\n    return even_palindrome, odd_palindrome\nend", "    local c1, c2\
    \ = 0, 0\n    for i = 1, n do\n        if tostring(i) == string.reverse(tostring(i))\
    \ then\n            if i % 2 == 0 then\n                c1 = c1 + 1\n        \
    \    else\n                c2 = c2 + 1\n            end\n        end\n    end\n\
    \    return c1, c2\nend\n_G.even_odd_palindrome = even_odd_palindrome", "    --\
    \ Write your code here\n    local res = {even = 0, odd = 0}\n    local p1, p2\
    \ = 1, 1\n    while p1 <= n do\n        if p1 == p2 then\n            res.odd\
    \ = res.odd + 1\n        else\n            res.even = res.even + 1\n        end\n\
    \        p1 = p1 * 10\n        p2 = p2 * 10 + 1\n    end\n    return res\nend",
  "    local e, o = 0, 0\n    for i = 1, n do\n        if (i < 10) then\n        \
    \    e = e + 1\n        elseif (i < 100) then\n            if (i % 11 == 0) then\n\
    \                e = e + 1\n            else\n                o = o + 1\n    \
    \        end\n        elseif (i < 1000) then\n            if (i % 11 == 0) then\n\
    \                e = e + 1\n            elseif (math.floor(i / 100) == i % 10)\
    \ then\n                e = e + 1\n            else\n                o = o + 1\n\
    \            end\n        end\n    end\n    return e, o\nend", "    local cnt_e,\
    \ cnt_o = 0, 0\n    for i = 1, n do\n        if i < 10 then\n            cnt_o\
    \ = cnt_o + 1\n        elseif i % 11 == 0 then\n            cnt_e = cnt_e + 1\n\
    \        else\n            local tmp = i\n            local rev = 0\n        \
    \    while tmp > 0 do\n                rev = rev * 10 + tmp % 10\n           \
    \     tmp = math.floor(tmp / 10)\n            end\n            if rev == i then\n\
    \                cnt_o = cnt_o + 1\n            end\n        end\n    end\n  \
    \  return cnt_e, cnt_o\nend", "    local count_e, count_o = 0, 0\n    for i =\
    \ 1, n do\n        local r = i % 10\n        if r == 0 or r == 1 or r == 8 then\n\
    \            count_o = count_o + 1\n        elseif r == 2 or r == 3 or r == 4\
    \ or r == 7 then\n            count_e = count_e + 1\n        else\n          \
    \  -- 5 or 6\n            count_o = count_o + 1\n            count_e = count_e\
    \ + 1\n        end\n    end\n    return count_e, count_o\nend", "    if n < 1\
    \ or n > 10^3 then\n        return nil\n    end\n    local even, odd = 0, 0\n\
    \    for i = 1, n do\n        if string.reverse(tostring(i)) == tostring(i) then\n\
    \            if i % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    local count_even, count_odd = 0, 0\n    for\
    \ i = 1, n do\n        if (is_palindrome(i)) then\n            if (i % 2 == 0)\
    \ then\n                count_even = count_even + 1\n            else\n      \
    \          count_odd = count_odd + 1\n            end\n        end\n    end\n\
    \    return count_even, count_odd\nend", "    local function is_palindrome(x)\n\
    \        local s = tostring(x)\n        local l = #s\n        for i = 1, math.floor(l\
    \ / 2) do\n            if s:sub(i, i) ~= s:sub(l - i + 1, l - i + 1) then\n  \
    \              return false\n            end\n        end\n        return true\n\
    \    end\n    local function is_even(x)\n        return x % 2 == 0\n    end\n\
    \    local function is_odd(x)\n        return x % 2 == 1\n    end\n    local e,\
    \ o = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n          \
    \  if is_even(i) then\n                e = e + 1\n            elseif is_odd(i)\
    \ then\n                o = o + 1\n            end\n        end\n    end\n   \
    \ return e, o\nend", "  if n == 1 then\n    return {0, 1}\n  end\n  local i, j,\
    \ k, l, m = 0, 1, 0, 1, 1\n  local e, o = 0, 0\n  while m <= n do\n    if i ==\
    \ 0 and j == 1 then\n      e = e + 1\n      k = 10 ^ (j - 1)\n      l = 10 ^ j\
    \ - 1\n      i = k\n      m = l\n    elseif i == 1 and j == 0 then\n      o =\
    \ o + 1\n      k = 10 ^ (j - 1)\n      l = 10 ^ j - 1\n      i = k\n      m =\
    \ l\n    elseif i == 1 and j == 1 then\n      o = o + 1\n      k = 10 ^ (j - 1)\n\
    \      l = 10 ^ j - 1\n      i = k\n      m = l\n    elseif i > 1 and j == 1 then\n\
    \      o = o + 1\n      k = 10 ^ (j - 1)\n      l = 10 ^ j - 1\n      i = k\n\
    \      m = l\n    elseif i == 1 and j > 1 then\n      e = e + 1\n      k = 10\
    \ ^ (j - 1)\n      l = 10 ^ j - 1\n      i = k\n      m = l\n    elseif i > 1\
    \ and j > 1 then\n      if i < l then\n        e = e + l - i + 1\n        i =\
    \ 10 ^ (j - 1)\n        j = j + 1\n        k = 10 ^ (j - 1)\n        l = 10 ^\
    \ j - 1\n        m = l\n      else\n        o = o + l - i + 1\n        i = 10\
    \ ^ (j - 1)\n        j = j + 1\n        k = 10 ^ (j - 1)\n        l = 10 ^ j -\
    \ 1\n        m = l\n      end\n    end\n  end\n  return {e, o}\nend", "    local\
    \ even = 0\n    local odd = 0\n    local i = 1\n    while i <= n do\n        if\
    \ math.floor(math.log10(i)) % 2 == 0 then\n            even = even + 1\n     \
    \   else\n            odd = odd + 1\n        end\n        i = i + 1\n    end\n\
    \    return even, odd\nend", "  local f = 1\n  local t = 0\n  while n > 0 do\n\
    \    if (n % 10) % 2 == 0 then\n      f = f + 1\n    else\n      t = t + 1\n \
    \   end\n    n = math.floor(n / 10)\n  end\n  return f, t\nend\nprint(even_odd_palindrome(1234))",
  "    if n == 1 then\n        return 0, 1\n    end\n    if n == 2 then\n        return\
    \ 1, 1\n    end\n    if n == 3 then\n        return 1, 2\n    end\n    if n ==\
    \ 4 then\n        return 3, 1\n    end\n    if n == 5 then\n        return 3,\
    \ 2\n    end\n    if n == 6 then\n        return 4, 2\n    end\n    if n == 7\
    \ then\n        return 4, 3\n    end\n    if n == 8 then\n        return 6, 2\n\
    \    end\n    if n == 9 then\n        return 6, 3\n    end\n    local even = 4\n\
    \    local odd = 2\n    local tens = 10\n    while n >= tens do\n        if n\
    \ - tens > 0 then\n            tens = tens * 10\n            even = even + 4\n\
    \            odd = odd + 4\n        else\n            tens = tens * 10\n     \
    \       even = even + 3\n            odd = odd + 5\n        end\n    end\n   \
    \ return even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n \
    \       if i == reverse(i) then\n            if i % 2 == 0 then\n            \
    \    even = even + 1\n            else\n                odd = odd + 1\n      \
    \      end\n        end\n    end\n    return even, odd\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if (i // 10 == 0) or (i > 10 and i\
    \ % 11 == 0) then\n            if i % 2 == 0 then\n                even = even\
    \ + 1\n            else\n                odd = odd + 1\n            end\n    \
    \    end\n    end\n    return even, odd\nend", "    local even, odd = 0, 0\n \
    \   local isPalindrome = function(num)\n        local r = 0\n        while num\
    \ > 0 do\n            r = r * 10 + num % 10\n            num = math.floor(num\
    \ / 10)\n        end\n        return r == num\n    end\n    for i = 1, n do\n\
    \        if isPalindrome(i) then\n            if i % 2 == 0 then\n           \
    \     even = even + 1\n            else\n                odd = odd + 1\n     \
    \       end\n        end\n    end\n    return even, odd\nend", "    local res\
    \ = {0, 0}\n    for i = 1, n do\n        if (i % 10 == i // 10) or (i % 10 ==\
    \ i // 100) then\n            res[1] = res[1] + 1\n        elseif (i // 10 > 9)\
    \ or (i // 100 == i % 10) then\n            res[2] = res[2] + 1\n        end\n\
    \    end\n    return res\nend", "    local even, odd = 0, 0\n    for i = 1, n\
    \ do\n        if i % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend",
  "  local count_even, count_odd = 0, 0\n  for i = 1, n do\n    if string.reverse(tostring(i))\
    \ == tostring(i) then\n      if tonumber(i) % 2 == 0 then\n        count_even\
    \ = count_even + 1\n      else\n        count_odd = count_odd + 1\n      end\n\
    \    end\n  end\n  return count_even, count_odd\nend", "    local function is_palindrome(n)\n\
    \        local s = tostring(n)\n        for i = 1, #s / 2 do\n            if s:sub(i,\
    \ i) ~= s:sub(#s - i + 1, #s - i + 1) then\n                return false\n   \
    \         end\n        end\n        return true\n    end\n    local even = 0\n\
    \    local odd = 0\n    for i = 1, n do\n        if is_palindrome(i) then\n  \
    \          if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if\
    \ (i <= 9 or i % 11 == 0) then\n            if (i % 2 == 0) then\n           \
    \     even = even + 1\n            else\n                odd = odd + 1\n     \
    \       end\n        end\n    end\n    return even, odd\nend\nreturn even_odd_palindrome",
  "    local e, o = 0, 0\n    for i = 1, n do\n        if (i < 10) then\n        \
    \    e = e + 1\n        elseif (i % 10 == 0) then\n            -- skip\n     \
    \   else\n            local j, k = i, 0\n            while (j > 0) do\n      \
    \          k = k * 10 + j % 10\n                j = j // 10\n            end\n\
    \            if (k == i) then\n                if (i % 2 == 0) then\n        \
    \            e = e + 1\n                else\n                    o = o + 1\n\
    \                end\n            end\n        end\n    end\n    return e, o\n\
    end", "    local odds, evens = 0, 0\n    if (n % 2) == 0 then\n        evens =\
    \ 1\n    else\n        odds = 1\n    end\n    local x = math.floor(n / 10)\n \
    \   odds = odds + x * 9 + math.floor(x / 10)\n    evens = evens + math.floor(x\
    \ / 10)\n    return evens, odds\nend", "    local even, odd = 0, 0\n    if n <\
    \ 1 or n > math.pow(10, 3) then\n        return even, odd\n    end\n    for i\
    \ = 1, n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return even, odd\nend", "  \
    \  local odd = 0\n    local even = 0\n    for i = 1, n do\n        if string.reverse(tostring(i))\
    \ == tostring(i) then\n            if i % 2 == 0 then\n                even =\
    \ even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local n_half = math.floor(n\
    \ / 2)\n    local even_count = n_half\n    local odd_count = 0\n    if n % 2 ==\
    \ 1 then\n        odd_count = n_half\n    else\n        even_count = n_half -\
    \ 1\n    end\n    return even_count, odd_count\nend", "    local odds, evens =\
    \ 0, 0\n    for x = 1, n do\n        if x < 10 then\n            evens = evens\
    \ + 1\n        elseif x % 11 == 0 then\n            odds = odds + 1\n        else\n\
    \            local t, y = {}, x\n            while y > 0 do\n                table.insert(t,\
    \ y % 10)\n                y = (y - y % 10) / 10\n            end\n          \
    \  local l, m = #t, math.floor(#t / 2)\n            local is_palindrome = true\n\
    \            for i = 1, m do\n                if t[i] ~= t[l - i + 1] then\n \
    \                   is_palindrome = false\n                    break\n       \
    \         end\n            end\n            if is_palindrome then\n          \
    \      if t[1] == t[l] then\n                    evens = evens + 1\n         \
    \       else\n                    odds = odds + 1\n                end\n     \
    \       end\n        end\n    end\n    return evens, odds\nend", "    local c1,\
    \ c2 = 0, 0\n    for i = 1, n do\n        if tostring(i) == string.reverse(tostring(i))\
    \ then\n            if i % 2 == 0 then\n                c1 = c1 + 1\n        \
    \    else\n                c2 = c2 + 1\n            end\n        end\n    end\n\
    \    return c1, c2\nend", "    local pair = {0, 0}\n    local cnt = 0\n    local\
    \ i = 1\n    while i <= n do\n        local j = i\n        local r = i\n     \
    \   while j > 0 do\n            r = r * 10 + (j % 10)\n            j = math.floor(j\
    \ / 10)\n        end\n        if r <= n then\n            pair[(i - i % 2) % 2\
    \ + 1] = pair[(i - i % 2) % 2 + 1] + 1\n            cnt = cnt + 1\n        end\n\
    \        i = i + 1\n    end\n    return pair\nend", "    local odd = 0\n    local\
    \ even = 0\n    local function check(n)\n        if n < 10 then\n            return\
    \ true\n        end\n        local m = n\n        local d = 0\n        while m\
    \ > 0 do\n            d = d * 10 + m % 10\n            m = math.floor(m / 10)\n\
    \        end\n        return d == n\n    end\n    for i = 1, n do\n        if\
    \ check(i) then\n            if i % 2 == 0 then\n                even = even +\
    \ 1\n            else\n                odd = odd + 1\n            end\n      \
    \  end\n    end\n    return even, odd\nend", "    local function is_palindrome(str)\n\
    \        local len = #str\n        for i = 1, len/2 do\n            if str:sub(i,\
    \ i) ~= str:sub(len - i + 1, len - i + 1) then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local even, odd\
    \ = 0, 0\n    for i = 1, n do\n        if is_palindrome(tostring(i)) then\n  \
    \          if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local t = {\"odd\", \"even\"}\n    local res = {0, 0}\n\
    \    local l, r = 1, math.ceil(n ^ 0.5)\n    while l <= r do\n        local i\
    \ = l * l\n        if n < i then\n            break\n        end\n        res[t[i\
    \ % 2 + 1]] = res[t[i % 2 + 1]] + 1\n        l = l + 1\n    end\n    local l,\
    \ r = 1, math.ceil(n ^ 0.5)\n    while l <= r do\n        local i = r * r\n  \
    \      if n < i then\n            break\n        end\n        res[t[i % 2 + 1]]\
    \ = res[t[i % 2 + 1]] + 1\n        r = r - 1\n    end\n    if math.floor(n ^ 0.5)\
    \ ^ 2 == n then\n        res[t[n % 2 + 1]] = res[t[n % 2 + 1]] - 1\n    end\n\
    \    return res\nend", "    local e, o = 0, 0\n    local s = tostring(n)\n   \
    \ local len = #s\n    local h = math.floor(len / 2)\n    for i = 1, h do\n   \
    \     local l, r = s:sub(i, i), s:sub(len - i + 1, len - i + 1)\n        if l\
    \ == r then\n            if l == \"0\" or l == \"2\" or l == \"4\" or l == \"\
    6\" or l == \"8\" then\n                e = e + 1\n            else\n        \
    \        o = o + 1\n            end\n        end\n    end\n    return e, o\nend",
  "    local n_odd, n_even = 0, 0\n    local start, len = 10 ^ (math.floor(math.log10(n))\
    \ - 1), 0\n    local m = start\n    while m <= n do\n        local s = m % 10\n\
    \        if s == 0 then\n            m = m + 1\n        else\n            local\
    \ t = m\n            for i = 1, len do\n                t = math.floor(t / 10)\n\
    \            end\n            local tmp = m\n            for i = 1, len do\n \
    \               local r = tmp % 10\n                tmp = math.floor(tmp / 10)\n\
    \                if r ~= t then\n                    break\n                end\n\
    \                if i == len then\n                    if len % 2 == 0 then\n\
    \                        n_even = n_even + 1\n                    else\n     \
    \                   n_odd = n_odd + 1\n                    end\n             \
    \   end\n                t = math.floor(t / 10)\n            end\n           \
    \ m = m + 1\n        end\n        if m >= start * 10 then\n            start =\
    \ start * 10\n            len = len + 1\n        end\n    end\n    return n_even,\
    \ n_odd\nend", "    -- Write your code here\n    local count = {\n        even\
    \ = 0,\n        odd = 0\n    }\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                count.even = count.even\
    \ + 1\n            else\n                count.odd = count.odd + 1\n         \
    \   end\n        end\n    end\n    return count.even, count.odd\nend", "    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if (math.tointeger(i) and i ==\
    \ string.reverse(i)) then\n            if (i % 2 == 0) then\n                even\
    \ = even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local even, odd = 0, 0\n\
    \    for i = 1, n do\n        if math.tointeger(tostring(i):reverse()) == i then\n\
    \            if i % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    local function is_palindrome(num)\n        local\
    \ r = 0\n        while num > 0 do\n            r = r * 10 + num % 10\n       \
    \     num = math.floor(num / 10)\n        end\n        return r\n    end\n   \
    \ local count_odd, count_even = 0, 0\n    for i = 1, n do\n        if i == is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                count_even = count_even\
    \ + 1\n            else\n                count_odd = count_odd + 1\n         \
    \   end\n        end\n    end\n    return count_even, count_odd\nend", "    local\
    \ function is_palindrome(i)\n        local x = i\n        local y = 0\n      \
    \  while x > 0 do\n            y = y * 10 + x % 10\n            x = math.floor(x\
    \ / 10)\n        end\n        return i == y\n    end\n    local even = 0\n   \
    \ local odd = 0\n    for i = 1, n do\n        if is_palindrome(i) then\n     \
    \       if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local odd, even = 0, 0\n    for i = 1, n do\n        if\
    \ (i % 10) == (i // 10) % 10 then\n            if i > 9 then\n               \
    \ odd = odd + 1\n            else\n                even = even + 1\n         \
    \   end\n        end\n    end\n    return even, odd\nend", "    local m = {}\n\
    \    for i = 1, n do\n        local s = tostring(i)\n        local t = {}\n  \
    \      for j = 1, #s do\n            t[j] = s:sub(j, j)\n        end\n       \
    \ local x = {}\n        for j = 1, #t do\n            x[j] = t[#t - j + 1]\n \
    \       end\n        if table.concat(t) == table.concat(x) then\n            m[#m\
    \ + 1] = i\n        end\n    end\n    local even, odd = 0, 0\n    for i = 1, #m\
    \ do\n        if m[i] % 2 == 0 then\n            even = even + 1\n        else\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend",
  "    local odd, even = 0, 0\n    for i = 1, n do\n        if (i % 10 == 0) then\n\
    \            even = even + 1\n        elseif (i % 2 == 0) then\n            odd\
    \ = odd + 1\n        end\n    end\n    return even, odd\nend\nreturn even_odd_palindrome",
  "  local even, odd = 0, 0\n  for i = 1, n do\n    if i == reverse(i) then\n    \
    \  if i % 2 == 0 then\n        even = even + 1\n      else\n        odd = odd\
    \ + 1\n      end\n    end\n  end\n  return even, odd\nend", "    if n < 1 or n\
    \ > 1000 then\n        return nil\n    end\n    local even, odd = 0, 0\n    for\
    \ i = 1, n do\n        if (n - i + 1) * (n - i + 1) < n then\n            even\
    \ = even + 1\n        elseif (n - i + 1) * (n - i + 1) == n then\n           \
    \ if i % 2 == 0 then\n                even = even + 1\n            else\n    \
    \            odd = odd + 1\n            end\n        else\n            odd = odd\
    \ + 1\n        end\n    end\n    return even, odd\nend", "  local odd, even =\
    \ 0, 0\n  if n < 10 then\n    odd = n\n  else\n    odd = 9\n    even = 1\n   \
    \ local order, curr, high, low = 1, 1, 0, 0\n    while order <= math.floor(math.log10(n))\
    \ do\n      curr = curr * 10 + 1\n      low = curr * math.pow(10, order - 1)\n\
    \      high = curr * math.pow(10, order) - 1\n      if order % 2 == 0 then\n \
    \       odd = odd + (high - low + 1)\n      else\n        even = even + (high\
    \ - low + 1)\n      end\n      order = order + 1\n    end\n    if n - high >=\
    \ 1 then\n      if order % 2 == 0 then\n        odd = odd + (n - high)\n     \
    \ else\n        even = even + (n - high)\n      end\n    end\n  end\n  return\
    \ even, odd\nend", "    local odd, even = 0, 0\n    for i = 1, n do\n        if\
    \ i < 10 then\n            odd = odd + 1\n        elseif is_palindrome(i) then\n\
    \            local r = math.mod(i, 2)\n            if r == 0 then\n          \
    \      even = even + 1\n            else\n                odd = odd + 1\n    \
    \        end\n        end\n    end\n    return even, odd\nend", "    local even\
    \ = 0\n    local odd = 0\n    for i = 1, n do\n        if i < 10 then\n      \
    \      odd = odd + 1\n        elseif is_palindrome(i) then\n            if i %\
    \ 2 == 0 then\n                even = even + 1\n            else\n           \
    \     odd = odd + 1\n            end\n        end\n    end\n    return even, odd\n\
    end", "    if n == 1 then\n        return {1, 0}\n    end\n    local n9 = math.floor(n\
    \ / 9)\n    local n1 = n - n9 * 9\n    local d1 = 0\n    local d9 = 0\n    if\
    \ n1 >= 1 then\n        d1 = 1\n    end\n    if n9 >= 1 then\n        d9 = math.floor((n9\
    \ - 1) / 2) * 2\n    end\n    if n9 >= 2 then\n        d9 = d9 + 1\n    end\n\
    \    return {d1 + d9, n - d1 - d9}\nend", "    local even = 0\n    local odd =\
    \ 0\n    for i = 1, n do\n        if i == 1 or i == 2 then\n            even =\
    \ even + 1\n        elseif i % 2 == 0 then\n            even = even + 1\n    \
    \    else\n            odd = odd + 1\n        end\n    end\n    return even, odd\n\
    end", "    local even, odd = 0, 0\n    local l, r = 1, n\n    while l <= r do\n\
    \        if l == r then\n            if l % 2 == 0 then\n                even\
    \ = even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        else\n            even = even + 1\n            odd = odd + 1\n      \
    \  end\n        l = l + 1\n        r = r - 1\n    end\n    return even, odd\n\
    end", "    local even, odd = 0, 0\n    local right = math.floor(math.log10(n))\n\
    \    local digits = {}\n    while n > 0 do\n        digits[#digits + 1] = n %\
    \ 10\n        n = math.floor(n / 10)\n    end\n    local flag = true\n    for\
    \ i = 1, #digits - 1 do\n        if digits[i] ~= digits[#digits - i + 1] then\n\
    \            flag = false\n            break\n        end\n    end\n    if flag\
    \ then\n        if right % 2 == 0 then\n            odd = odd + 1\n        else\n\
    \            even = even + 1\n        end\n    end\n    return even, odd\nend",
  "  local function is_palindrome(num)\n    local str = tostring(num)\n    local i,\
    \ j = 1, #str\n    while i < j do\n      if str:sub(i, i) ~= str:sub(j, j) then\n\
    \        return false\n      end\n      i = i + 1\n      j = j - 1\n    end\n\
    \    return true\n  end\n  local e, o = 0, 0\n  for i = 1, n do\n    if is_palindrome(i)\
    \ then\n      if i % 2 == 0 then\n        e = e + 1\n      else\n        o = o\
    \ + 1\n      end\n    end\n  end\n  return e, o\nend", "  local even, odd = 0,\
    \ 0\n  for num = 1, n do\n    local num_str = tostring(num)\n    local reverse_num_str\
    \ = string.reverse(num_str)\n    if num_str == reverse_num_str then\n      if\
    \ num % 2 == 0 then\n        even = even + 1\n      else\n        odd = odd +\
    \ 1\n      end\n    end\n  end\n  return even, odd\nend", "    local even = 0\n\
    \    local odd = 0\n    for i = 1, n do\n        if i == reverse(i) then\n   \
    \         if i % 2 == 0 then\n                even = even + 1\n            else\n\
    \                odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local odd = 0\n    local even = 0\n    if n < 1 or n >\
    \ math.pow(10, 3) then\n        return even, odd\n    end\n    for i = 1, n do\n\
    \        local s = tostring(i)\n        local l = s:len()\n        local j = 1\n\
    \        while j <= l / 2 do\n            if s:sub(j, j) ~= s:sub(l - j + 1, l\
    \ - j + 1) then\n                break\n            end\n            j = j + 1\n\
    \        end\n        if j > l / 2 then\n            if l % 2 == 0 then\n    \
    \            even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    if n\
    \ < 1 or n > 1000 then\n        return false\n    end\n    local even = 0\n  \
    \  local odd = 0\n    for i = 1, n do\n        if i % 2 == 0 then\n          \
    \  even = even + 1\n        else\n            odd = odd + 1\n        end\n   \
    \ end\n    return even, odd\nend", "    local even, odd = 0, 0\n    if n == 1\
    \ then\n        even, odd = 1, 0\n    elseif n % 2 == 0 then\n        even, odd\
    \ = n / 2 - 1, n / 2 + 1\n    else\n        even, odd = n / 2, n / 2 + 1\n   \
    \ end\n    return even, odd\nend", "    local e = 0\n    local o = 0\n    for\
    \ i = 1, n do\n        if (i % 10 == 0) then\n            e = e + 1\n        elseif\
    \ (i < 10) then\n            o = o + 1\n        else\n            local x = math.floor(math.log10(i))\n\
    \            local y = 10 ^ x\n            local r = 0\n            local m =\
    \ i\n            while (x >= 0) do\n                r = r + (m % 10) * y\n   \
    \             m = math.floor(m / 10)\n                x = x - 1\n            \
    \    y = y / 10\n            end\n            if (r == i) then\n             \
    \   if (i % 2 == 0) then\n                    e = e + 1\n                else\n\
    \                    o = o + 1\n                end\n            end\n       \
    \ end\n    end\n    return e, o\nend", "    local count_odd, count_even = 0, 0\n\
    \    for i = 1, n do\n        if i % 10 == 0 then\n            count_even = count_even\
    \ + 1\n        elseif i < 10 then\n            count_odd = count_odd + 1\n   \
    \     else\n            local s = tostring(i)\n            local len = #s\n  \
    \          local even = true\n            local j = 1\n            while j <=\
    \ len // 2 do\n                if s:sub(j, j) ~= s:sub(len - j + 1, len - j +\
    \ 1) then\n                    even = false\n                    break\n     \
    \           end\n                j = j + 1\n            end\n            if even\
    \ then\n                count_even = count_even + 1\n            else\n      \
    \          count_odd = count_odd + 1\n            end\n        end\n    end\n\
    \    return count_even, count_odd\nend", "    local count = { [0] = 0, [1] = 0\
    \ }\n    for i = 1, n do\n        if i % 10 == 0 then\n            count[0] =\
    \ count[0] + 1\n        elseif i == reverse(i) then\n            if i % 2 == 0\
    \ then\n                count[0] = count[0] + 1\n            else\n          \
    \      count[1] = count[1] + 1\n            end\n        end\n    end\n    return\
    \ count[0], count[1]\nend", "    local even, odd = 0, 0\n    local digits = math.ceil(math.log10(n))\n\
    \    for i = 1, digits do\n        local num = { 1, 2, 3, 4, 5, 6, 7, 8, 9 }\n\
    \        local t = num[i]\n        local count = 0\n        for j = 1, i - 1 do\n\
    \            count = count + 9 * (10 ^ (j - 1))\n        end\n        if t % 2\
    \ == 0 then\n            if i == 1 then\n                even = even + num[i]\
    \ - 1\n            else\n                even = even + num[i] * count\n      \
    \      end\n        else\n            if i == 1 then\n                odd = odd\
    \ + num[i] - 1\n            else\n                odd = odd + num[i] * count\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ even, odd = 0, 0\n    for i = 1, n do\n        if (i - 1) % 10 < i % 10 then\n\
    \            odd = odd + 1\n        else\n            even = even + 1\n      \
    \  end\n    end\n    return even, odd\nend", "  local count = {odd = 0, even =\
    \ 0}\n  for i = 1, n do\n    local s = tostring(i)\n    local l, r = 1, #s\n \
    \   while l < r do\n      if s:sub(l, l) ~= s:sub(r, r) then\n        break\n\
    \      end\n      l, r = l + 1, r - 1\n    end\n    if l >= r then\n      if #s\
    \ % 2 == 0 then\n        count.even = count.even + 1\n      else\n        count.odd\
    \ = count.odd + 1\n      end\n    end\n  end\n  return count.even, count.odd\n\
    end", "    local function is_palindrome(num)\n        local num_str = tostring(num)\n\
    \        for i = 1, #num_str / 2 do\n            if num_str:sub(i, i) ~= num_str:sub(#num_str\
    \ - i + 1, #num_str - i + 1) then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local function is_even(num)\n\
    \        return num % 2 == 0\n    end\n    local result = {0, 0}\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if is_even(i) then\n\
    \                result[1] = result[1] + 1\n            else\n               \
    \ result[2] = result[2] + 1\n            end\n        end\n    end\n    return\
    \ result\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if is_even(i) then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local even = 0\n    local odd = 0\n\
    \    local start = 1\n    while start <= n do\n        local len = 0\n       \
    \ while math.pow(10, len) <= start do\n            len = len + 1\n        end\n\
    \        local palindrome = start\n        local temp = start\n        while temp\
    \ > 0 do\n            palindrome = palindrome * 10 + temp % 10\n            temp\
    \ = math.floor(temp / 10)\n        end\n        if len % 2 == 0 then\n       \
    \     even = even + math.floor(n / palindrome)\n        else\n            odd\
    \ = odd + math.floor(n / palindrome)\n        end\n        start = start + 1\n\
    \    end\n    return even, odd\nend", "    -- write your code here\n    local\
    \ even = 0\n    local odd = 0\n    for i = 1, n do\n        if i < 10 then\n \
    \           odd = odd + 1\n        elseif math.floor(i / 10) == i % 10 then\n\
    \            even = even + 1\n        elseif math.floor(i / 100) == i % 10 then\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend",
  "    local even, odd = 0, 0\n    for i = 1, n do\n        if i == string.reverse(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local function is_palindrome(n)\n  \
    \      local s = tostring(n)\n        local len = #s\n        for i = 1, len /\
    \ 2 do\n            if s:sub(i, i) ~= s:sub(len - i + 1, len - i + 1) then\n \
    \               return false\n            end\n        end\n        return true\n\
    \    end\n    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local result, even, odd = {}, 0, 0\n\
    \    for i = 1, n do\n        if string.reverse(tostring(i)) == tostring(i) then\n\
    \            if i % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    table.insert(result, even)\n    table.insert(result, odd)\n    return result\n\
    end", "    local even_cnt, odd_cnt = 0, 0\n    if n >= 1 then\n        local lst\
    \ = {1}\n        if n >= 2 then\n            lst[#lst + 1] = 2\n            if\
    \ n >= 3 then\n                lst[#lst + 1] = 3\n                for i = 4, n\
    \ do\n                    local x = i\n                    local reversed = 0\n\
    \                    while x > 0 do\n                        reversed = reversed\
    \ * 10 + x % 10\n                        x = math.floor(x / 10)\n            \
    \        end\n                    if i == reversed then\n                    \
    \    if i % 2 == 0 then\n                            even_cnt = even_cnt + 1\n\
    \                        else\n                            odd_cnt = odd_cnt +\
    \ 1\n                        end\n                        lst[#lst + 1] = i\n\
    \                    end\n                end\n            end\n        end\n\
    \        return even_cnt, odd_cnt, lst\n    end\nend", "    local m = n\n    local\
    \ odd = 0\n    local even = 0\n    while n > 0 do\n        local d = n % 10\n\
    \        if d == 0 or d == 1 or d == 8 then\n            even = even + 1\n   \
    \     elseif d == 2 or d == 3 or d == 4 or d == 5 or d == 7 then\n           \
    \ odd = odd + 1\n        else\n            break\n        end\n        n = math.floor(n\
    \ / 10)\n    end\n    if m == n then\n        return even, odd\n    end\n    local\
    \ t = {}\n    for i = 1, #t do\n        t[i] = m % 10\n        m = math.floor(m\
    \ / 10)\n    end\n    for i = 1, #t - 1 do\n        t[i] = t[#t - i]\n    end\n\
    \    local n2 = 0\n    for i = 1, #t do\n        n2 = n2 * 10 + t[i]\n    end\n\
    \    if n2 == m then\n        even = even + 1\n    else\n        odd = odd + 1\n\
    \    end\n    return even, odd\nend", "    local dp_even, dp_odd = {[0] = 1},\
    \ {[0] = 0}\n    for i = 1, n do\n        dp_even[i] = dp_even[i - 1] + dp_odd[i\
    \ - 1]\n        dp_odd[i] = dp_even[i - 1]\n    end\n    return dp_even[n], dp_odd[n]\n\
    end", "    local function is_palindrome(i)\n        local s = tostring(i)\n  \
    \      local n = #s\n        local half_n = math.floor(n / 2)\n        for i =\
    \ 1, half_n do\n            if s:sub(i, i) ~= s:sub(n - i + 1, n - i + 1) then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local count_even, count_odd = 0, 0\n    for i = 1, n do\n      \
    \  if is_palindrome(i) then\n            if i % 2 == 0 then\n                count_even\
    \ = count_even + 1\n            else\n                count_odd = count_odd +\
    \ 1\n            end\n        end\n    end\n    return count_even, count_odd\n\
    end", "    local e, o = 0, 0\n    if n < 2 then\n        return 1, 0\n    end\n\
    \    for i = 1, n do\n        local a, b = i, i\n        local r = 0\n       \
    \ while b > 0 do\n            r = r * 10 + b % 10\n            b = math.floor(b\
    \ / 10)\n        end\n        if r == a then\n            if a % 2 == 0 then\n\
    \                e = e + 1\n            else\n                o = o + 1\n    \
    \        end\n        end\n    end\n    return e, o\nend", "    local even, odd\
    \ = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if\
    \ (i % 2) == 0 then\n                even = even + 1\n            else\n     \
    \           odd = odd + 1\n            end\n        end\n    end\n    return even,\
    \ odd\nend", "    local f = {}\n    local function even(n)\n        f[n] = f[n]\
    \ or even(n - 1) + odd(n - 1)\n        return f[n]\n    end\n    local function\
    \ odd(n)\n        f[n] = f[n] or odd(n - 1) + odd(n - 2)\n        return f[n]\n\
    \    end\n    f[0] = 1\n    f[1] = 1\n    return even(n), odd(n)\nend", "    local\
    \ function is_even(n)\n        if n % 2 == 0 then\n            return true\n \
    \       else\n            return false\n        end\n    end\n    local function\
    \ is_palindrome(n)\n        local s = tostring(n)\n        for i = 1, math.floor(#s\
    \ / 2) do\n            if s:sub(i, i) ~= s:sub(#s - i + 1, #s - i + 1) then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if is_even(i) then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local function isPalindrome(x)\n   \
    \     local num, reverse = x, 0\n        while num > 0 do\n            reverse\
    \ = reverse * 10 + num % 10\n            num = math.floor(num / 10)\n        end\n\
    \        return x == reverse\n    end\n    local even, odd = 0, 0\n    for i =\
    \ 1, n do\n        if isPalindrome(i) then\n            if i % 2 == 0 then\n \
    \               even = even + 1\n            else\n                odd = odd +\
    \ 1\n            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ even, odd = 0, 0\n    if n % 2 == 0 then\n        even = n / 2\n        odd\
    \ = n / 2\n    else\n        even = n / 2\n        odd = n / 2 + 1\n    end\n\
    \    return even, odd\nend", "    local v1, v2 = 0, 0\n    local function helper(n)\n\
    \        local l, r = 1, 9\n        while l <= n do\n            local m = (r\
    \ - l) / 2 + l\n            if m * m <= n then\n                l = m + 1\n  \
    \          else\n                r = m - 1\n            end\n        end\n   \
    \     if n == l * l then\n            return true\n        end\n        return\
    \ false\n    end\n    for i = 1, n do\n        if helper(i) then\n           \
    \ v1 = v1 + 1\n        else\n            v2 = v2 + 1\n        end\n    end\n \
    \   return v1, v2\nend", "    local count_even, count_odd = 0, 0\n    for i =\
    \ 1, n do\n        if math.tointeger(i / 10) == math.tointeger(i / 100) then\n\
    \            count_even = count_even + 1\n        elseif math.tointeger(i / 10)\
    \ == math.tointeger(math.floor(i / 100) % 10) then\n            count_odd = count_odd\
    \ + 1\n        end\n    end\n    return count_even, count_odd\nend", "    local\
    \ even, odd = 0, 0\n    local p, q, i = 1, 10, 2\n    while q <= n do\n      \
    \  local a, b = math.floor(n / q), math.floor(n / p) % 10\n        local c, d\
    \ = math.floor(n / p) % 10, math.floor(n / i) % 10\n        if b - a > 0 then\n\
    \            odd = odd + (b - a) * p\n            even = even + (b - a) * p /\
    \ 10\n        elseif b - a == 0 then\n            if c == 0 then\n           \
    \     even = even + (n % p + 1)\n            else\n                odd = odd +\
    \ (n % p + 1)\n            end\n        end\n        if d == 0 then\n        \
    \    even = even - i / 10\n        end\n        p, q, i = p * 10, q * 10, i *\
    \ 10\n    end\n    return even, odd\nend", "    local count_odd, count_even =\
    \ 0, 0\n    local str_n = tostring(n)\n    local len = #str_n\n    if len % 2\
    \ == 0 then\n        local l, r = 1, len\n        while l < r do\n           \
    \ if str_n:sub(l, l) == str_n:sub(r, r) then\n                count_even = count_even\
    \ + 1\n            end\n            l, r = l + 1, r - 1\n        end\n    else\n\
    \        local l, r = 1, len\n        while l < r do\n            if str_n:sub(l,\
    \ l) == str_n:sub(r, r) then\n                count_odd = count_odd + 1\n    \
    \        end\n            l, r = l + 1, r - 1\n        end\n    end\n    return\
    \ count_even, count_odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if i % 2 == 0 then\n            even = even + 1\n        else\n     \
    \       odd = odd + 1\n        end\n    end\n    return even, odd\nend", "   \
    \ local even = 0\n    local odd = 0\n    for i = 1, n do\n        if i < 10 then\n\
    \            odd = odd + 1\n        elseif i % 10 == 0 then\n            even\
    \ = even + 1\n        else\n            local num = i\n            local d = 1\n\
    \            while num >= 10 do\n                num = math.floor(num / 10)\n\
    \                d = d * 10\n            end\n            if num == i % 10 then\n\
    \                even = even + 1\n            else\n                odd = odd\
    \ + 1\n            end\n        end\n    end\n    return even, odd\nend", "  \
    \  local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n\
    \            if i % 2 == 0 then\n                even = even + 1\n           \
    \ else\n                odd = odd + 1\n            end\n        end\n    end\n\
    \    return even, odd\nend", "    local even, odd = 0, 0\n    local digits = {}\n\
    \    local t = n\n    while t > 0 do\n        table.insert(digits, t % 10)\n \
    \       t = math.floor(t / 10)\n    end\n    local size = #digits\n    local total\
    \ = 0\n    local even_count, odd_count = size - 1, 0\n    local even_add, odd_add\
    \ = 1, 1\n    for i = 1, size do\n        local c = digits[i]\n        total =\
    \ total + c * even_count + c * odd_count + c * even_add + c * odd_add\n      \
    \  even_count = even_count - 2\n        odd_count = odd_count + 2\n        even_add\
    \ = even_add * 10\n        odd_add = odd_add * 10\n    end\n    even = math.floor(total\
    \ / 2)\n    odd = total - even\n    return even, odd\nend", "    local function\
    \ is_palindrome(i)\n        return tostring(i) == string.reverse(tostring(i))\n\
    \    end\n    local t = {0, 0}\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            t[1 + (i % 2)] = t[1 + (i % 2)] + 1\n        end\n    end\n\
    \    return t\nend", "    local s = tostring(n)\n    local ds = string.reverse(s)\n\
    \    local half = math.floor(#s / 2)", "    local even_odd = {0, 0}\n    if n\
    \ < 10 then\n        if n & 1 ~= 0 then\n            even_odd[2] = n\n       \
    \ else\n            even_odd[1] = n\n        end\n        return even_odd\n  \
    \  end\n    local even, odd = 0, 0\n    local p, q, r = math.floor(n / 10), math.floor(n\
    \ / 100), math.floor(n / 1000)\n    if n & 1 ~= 0 then\n        odd = 1\n    else\n\
    \        even = 1\n    end\n    if n & 1 ~= 0 and q > 0 then\n        odd = odd\
    \ + (p - 1) * 2 + 1\n        even = even + p * 2\n    else\n        odd = odd\
    \ + p * 2\n        even = even + (p - 1) * 2 + 1\n    end\n    if r > 0 then\n\
    \        even = even + 1\n    end\n    even_odd[1] = even\n    even_odd[2] = odd\n\
    \    return even_odd\nend", "  local n_even = n\n  if n % 2 == 0 then\n    n_even\
    \ = n - 1\n  end\n  local n_odd = n - n_even\n  return n_even, n_odd\nend", " \
    \   local e, o = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n\
    \            if i % 2 == 0 then\n                e = e + 1\n            else\n\
    \                o = o + 1\n            end\n        end\n    end\n    return\
    \ e, o\nend", "    local e, o = 0, 0\n    for i = 1, n do\n        if i < 10 then\n\
    \            e = e + 1\n        elseif math.floor(i / 10) == i % 10 then\n   \
    \         e = e + 1\n        else\n            o = o + 1\n        end\n    end\n\
    \    return e, o\nend", "    --print(\"parameter n=\" .. n)\n    local even =\
    \ 0\n    local odd = 0\n    local tail = n\n    while tail > 0 do\n        local\
    \ t = tail % 10\n        if (t % 2) == 0 then\n            even = even + math.ceil(n\
    \ / 10)\n            if t == 0 or (n % 10) > t then\n                even = even\
    \ - 1\n            end\n        else\n            odd = odd + math.ceil(n / 10)\n\
    \            if t == 5 and (n % 10) < 5 then\n                odd = odd - 1\n\
    \            end\n        end\n        tail = math.floor(tail / 10)\n        n\
    \ = math.floor(n / 10)\n    end\n    return even, odd\nend", "    local even,\
    \ odd = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n            even\
    \ = even + 1\n        else\n            odd = odd + 1\n        end\n    end\n\
    \    return even, odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n\
    \        if (i == 1 or i == 2 or i == 3) then\n            odd = odd + 1\n   \
    \     elseif (i >= 10 and tostring(i) == string.reverse(tostring(i))) then\n \
    \           local x = math.log10(i)\n            if (x % 2 == 0) then\n      \
    \          even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return even, odd\nend", "  local even,\
    \ odd = 0, 0\n  for i = 1, n do\n    if tostring(i) == string.reverse(tostring(i))\
    \ then\n      if i % 2 == 0 then\n        even = even + 1\n      else\n      \
    \  odd = odd + 1\n      end\n    end\n  end\n  return even, odd\nend", "    local\
    \ n_even = n;\n    local n_odd = n;\n    local n_middle = n;\n    if (n >= 1)\
    \ then\n        n_even = n - 1;\n        n_odd = n - 1;\n        n_middle = n\
    \ - 1;\n    end\n    if (n % 2 == 0) then\n        n_even = n_even - 1;\n    else\n\
    \        n_odd = n_odd - 1;\n    end\n    if (n == 10^3) then\n        n_middle\
    \ = n_middle - 1;\n    end\n    return n_even / 2, n_odd / 2, n_middle / 2;\n\
    end", "    local even, odd = 0, 0\n    for i = 1, n do\n        if i % 2 == 0\
    \ then\n            even = even + 1\n        else\n            odd = odd + 1\n\
    \        end\n    end\n    return even, odd\nend", "    local ans = { 0, 0 }\n\
    \    for i = 1, n do\n        if (n % 2 == 0) then\n            ans[1] = ans[1]\
    \ + 1\n        else\n            ans[2] = ans[2] + 1\n        end\n    end\n \
    \   return ans\nend", "    local f = {}\n    f[0] = 0\n    f[1] = 1\n    for i\
    \ = 2, n do\n        f[i] = f[i - 1] + f[i - 2]\n    end\n    return f[n] - 1,\
    \ f[n - 1] - 1\nend", "    local function isPalindrome(num)\n        local str\
    \ = tostring(num)\n        for i = 1, #str / 2 do\n            if str:sub(i, i)\
    \ ~= str:sub(#str - i + 1, #str - i + 1) then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local function\
    \ isEven(num)\n        return num % 2 == 0\n    end\n    local even, odd = 0,\
    \ 0\n    for i = 1, n do\n        if isPalindrome(i) then\n            if isEven(i)\
    \ then\n                even = even + 1\n            else\n                odd\
    \ = odd + 1\n            end\n        end\n    end\n    return even, odd\nend",
  "    local res = {[0] = 0, [1] = 0}\n    for i = 1, n do\n        if i >= 10 then\n\
    \            local tens = math.floor(math.log10(i))\n            local c = math.floor(i\
    \ / 10 ^ tens)\n            local d = math.floor(i % 10)\n            if c ==\
    \ d then\n                res[0] = res[0] + 1\n            end\n        else\n\
    \            res[0] = res[0] + 1\n        end\n    end\n    res[1] = n - res[0]\n\
    \    return res\nend", "    local function is_palindrome(num)\n        return\
    \ num == tonumber(num:reverse())\n    end\n    local even_count, odd_count = 0,\
    \ 0\n    for i = 1, n do\n        if is_palindrome(tostring(i)) then\n       \
    \     if i % 2 == 0 then\n                even_count = even_count + 1\n      \
    \      else\n                odd_count = odd_count + 1\n            end\n    \
    \    end\n    end\n    return even_count, odd_count\nend", "    local even, odd\
    \ = 0, 0\n    for i = 1, n do\n        if (string.reverse(tostring(i)) == tostring(i))\
    \ then\n            if (i % 2 == 0) then\n                even = even + 1\n  \
    \          else\n                odd = odd + 1\n            end\n        end\n\
    \    end\n    return even, odd\nend\n_G.even_odd_palindrome = even_odd_palindrome",
  "    local even, odd = 0, 0\n    if n <= 1 then\n        return 0, 0\n    end\n\
    \    if n % 2 == 0 then\n        even = n / 2\n    else\n        odd = n / 2 +\
    \ 1\n    end\n    return even, odd\nend", "    local e, o = 0, 0\n    for i =\
    \ 1, n do\n        if is_palindrome(i) then\n            if is_even(i) then\n\
    \                e = e + 1\n            else\n                o = o + 1\n    \
    \        end\n        end\n    end\n    return e, o\nend", "    local function\
    \ is_palindrome(num)\n        local reversed = 0\n        while num > 0 do\n \
    \           reversed = reversed * 10 + num % 10\n            num = math.floor(num\
    \ / 10)\n        end\n        return reversed\n    end\n    local even_count,\
    \ odd_count = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) == i then\n\
    \            if i % 2 == 0 then\n                even_count = even_count + 1\n\
    \            else\n                odd_count = odd_count + 1\n            end\n\
    \        end\n    end\n    return even_count, odd_count\nend", "    local even\
    \ = 0\n    local odd = 0\n    local n = n\n    while n > 0 do\n        local d\
    \ = n % 10\n        if d == 0 or d == 1 or d == 8 then\n            even = even\
    \ + 1\n        elseif d == 3 or d == 5 or d == 7 then\n            odd = odd +\
    \ 1\n        elseif d == 2 or d == 4 or d == 6 or d == 9 then\n            even\
    \ = even + 1\n            odd = odd + 1\n        end\n        n = (n - d) / 10\n\
    \    end\n    return even, odd\nend", "    -- Write your code here\n    local\
    \ even = 0\n    local odd = 0\n    local num = n\n    local len = 0\n    local\
    \ high = 0\n    local low = 0\n    local range = 0\n    local cnt_even = 0\n \
    \   local cnt_odd = 0\n    local mid = 0\n    while num > 0 do\n        len =\
    \ len + 1\n        num = num // 10\n    end\n    for i = 1, len do\n        if\
    \ i == 1 then\n            range = 9\n        else\n            range = range\
    \ * 10\n        end\n    end\n    num = n\n    while num > 0 do\n        if i\
    \ % 2 == 0 then\n            high = num // range\n            low = num % 10\n\
    \            if high == low then\n                mid = (num % range) // 10\n\
    \                if mid == 0 then\n                    cnt_even = cnt_even + 1\n\
    \                else\n                    while mid > 0 do\n                \
    \        if mid % 2 == 0 then\n                            cnt_even = cnt_even\
    \ + 1\n                        else\n                            cnt_odd = cnt_odd\
    \ + 1\n                        end\n                        mid = mid // 10\n\
    \                    end\n                end\n            end\n        else\n\
    \            cnt_odd = cnt_odd + 1\n        end\n        num = num // 10\n   \
    \ end\n    return {even, odd}\nend", "    local odd, even = 0, 0\n    if n <=\
    \ 1 then\n        return even, odd\n    end\n    local f = {}\n    local function\
    \ dfs(i, j)\n        if i > j then\n            return 0\n        end\n      \
    \  local k = i * 1001 + j\n        if f[k] then\n            return f[k]\n   \
    \     end\n        local ans = 0\n        if i == j then\n            ans = 1\n\
    \        elseif i + 1 == j then\n            if i * 10 + j <= n then\n       \
    \         ans = 1\n            end\n        else\n            ans = dfs(i + 1,\
    \ j) + dfs(i, j - 1) - dfs(i + 1, j - 1)\n            if i * 10 + j <= n then\n\
    \                ans = ans + 1 + dfs(i + 1, j - 1)\n            end\n        end\n\
    \        f[k] = ans\n        return ans\n    end\n    local c = dfs(1, 9)\n  \
    \  local pow = 10\n    while pow <= n do\n        odd = odd + c\n        pow =\
    \ pow * 10\n        c = c * 10 + 9\n    end\n    pow = 10\n    local c2 = 0\n\
    \    while pow <= n do\n        even = even + c2\n        pow = pow * 10\n   \
    \     c2 = c2 * 10 + 9\n    end\n    return even, odd\nend", "    local even =\
    \ 0\n    local odd = 0\n    for i = 1, n do\n        if (i < 10 and i % 2 == 0)\
    \ or (i >= 10 and string.reverse(tostring(i)) == tostring(i)) then\n         \
    \   if i % 2 == 0 then\n                even = even + 1\n            else\n  \
    \              odd = odd + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend", "    local count_odd, count_even = 0, 0\n    for i = 1, n do\n\
    \        if i >= 10 then\n            local tmp = i\n            local reversed\
    \ = 0\n            while tmp > 0 do\n                reversed = reversed * 10\
    \ + tmp % 10\n                tmp = math.floor(tmp / 10)\n            end\n  \
    \          if reversed == i then\n                if i % 2 == 0 then\n       \
    \             count_even = count_even + 1\n                else\n            \
    \        count_odd = count_odd + 1\n                end\n            end\n   \
    \     else\n            if i % 2 == 0 then\n                count_even = count_even\
    \ + 1\n            else\n                count_odd = count_odd + 1\n         \
    \   end\n        end\n    end\n    return count_even, count_odd\nend", "    local\
    \ count = 0\n    local a, b = {}, {}\n    for i = 1, n do\n        local s = tostring(i)\n\
    \        local x, y = 1, #s\n        while x < y do\n            if s:sub(x, x)\
    \ ~= s:sub(y, y) then\n                break\n            end\n            x,\
    \ y = x + 1, y - 1\n        end\n        if x >= y then\n            if #s % 2\
    \ == 0 then\n                count = count + 1\n                table.insert(a,\
    \ i)\n            else\n                table.insert(b, i)\n            end\n\
    \        end\n    end\n    return #a, #b\nend\n_G.even_odd_palindrome = even_odd_palindrome",
  "    local a, b = 1, 2\n    while a < n do\n        a, b = b, 2 * b + a\n    end\n\
    \    return a - n, n - (a - b)\nend", "    -- Write your code here\n    local\
    \ p = {1, 1}\n    for i = 10, n do\n        local s = tostring(i)\n        local\
    \ l = (s:len() - 1) / 2\n        local j = 0\n        local k = s:len()\n    \
    \    while (j < l) do\n            if (s:sub(j + 1, j + 1) ~= s:sub(k, k)) then\n\
    \                break\n            end\n            j = j + 1\n            k\
    \ = k - 1\n        end\n        if (j == l) then\n            if (i % 2 == 0)\
    \ then\n                p[1] = p[1] + 1\n            else\n                p[2]\
    \ = p[2] + 1\n            end\n        end\n    end\n    return p\nend", "   \
    \ local even, odd = 0, 0\n    for i = 1, n do\n        if i < 10 then\n      \
    \      odd = odd + 1\n        elseif (i % 10 == 0) or (i % 11 == 0) then\n   \
    \         even = even + 1\n        else\n            local t = {}\n          \
    \  local d = i\n            while d > 0 do\n                table.insert(t, d\
    \ % 10)\n                d = math.floor(d / 10)\n            end\n           \
    \ local l, r = 1, #t\n            while l < r do\n                if t[l] ~= t[r]\
    \ then\n                    break\n                end\n                l = l\
    \ + 1\n                r = r - 1\n            end\n            if l >= r then\n\
    \                if i % 2 == 0 then\n                    even = even + 1\n   \
    \             else\n                    odd = odd + 1\n                end\n \
    \           end\n        end\n    end\n    return even, odd\nend", "    local\
    \ odd, even = 0, 0\n    local i = 1\n    while i <= n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \       i = i + 1\n    end\n    return even, odd\nend", "    local odd, even =\
    \ 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n            even = even\
    \ + 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ even, odd\nend", "    local even = 0\n    local odd = 0\n    for i = 1, n do\n\
    \        if is_palindrome(i) then\n            if i % 2 == 0 then\n          \
    \      even = even + 1\n            else\n                odd = odd + 1\n    \
    \        end\n        end\n    end\n    return even, odd\nend", "    local sum_odd,\
    \ sum_even = 0, 0\n    local num_str = tostring(n)\n    local left, right = 1,\
    \ #num_str\n    while left <= right do\n        local cur_num = tonumber(num_str:sub(left,\
    \ right))\n        if cur_num % 2 == 0 then\n            sum_even = sum_even +\
    \ 1\n        else\n            sum_odd = sum_odd + 1\n        end\n        left,\
    \ right = left + 1, right - 1\n    end\n    return sum_even, sum_odd\nend", " \
    \   local odd, even = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 then\n\
    \            even = even + 1\n        else\n            odd = odd + 1\n      \
    \  end\n    end\n    return even, odd\nend", "    local count_odd, count_even\
    \ = 0, 0\n    for i = 1, n do\n        if (i - 1) % 10 == 0 then\n           \
    \ count_odd = count_odd + 1\n        elseif (i - 2) % 10 == 0 then\n         \
    \   count_even = count_even + 1\n        end\n    end\n    return count_even,\
    \ count_odd\nend", "    -- Write your code here\n    local even, odd = 0, 0\n\
    \    for i = 1, n do\n        if i < 10 then\n            even = even + 1\n  \
    \      elseif i < 100 then\n            odd = odd + 1\n        elseif i < 1000\
    \ then\n            if math.floor(i / 100) == i % 10 then\n                even\
    \ = even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local even, odd = 0, 0\n\
    \    local s = tostring(n)\n    local mid = math.floor(#s / 2)\n    local end_\
    \ = #s - 1\n    if #s % 2 == 0 then\n        -- even palindrome\n        even\
    \ = math.floor(n / 10) + 1\n        if n % 10 ~= 0 then\n            -- exclude\
    \ single digit (1, 2, ..., 9)\n            even = even - 1\n        end\n    \
    \    for i = 1, mid - 1 do\n            odd = odd + math.floor(n / (10 ^ (i +\
    \ 1))) * 9\n        end\n        odd = odd + math.floor(n / (10 ^ mid) - math.floor(n\
    \ / (10 ^ (mid + 1))) * 10)\n    else\n        -- odd palindrome\n        if n\
    \ < 10 then\n            odd = 1\n        else\n            even = 9\n       \
    \     odd = math.floor(n / 10) - 1\n            for i = 1, mid - 1 do\n      \
    \          odd = odd + math.floor(n / (10 ^ (i + 1))) * 9\n            end\n \
    \           odd = odd + math.floor(n / (10 ^ mid) - math.floor(n / (10 ^ (mid\
    \ + 1))) * 10)\n        end\n    end\n    return even, odd\nend", "    -- Write\
    \ your code here\n    return { even = 42, odd = 42 }\nend", "    local even, odd\
    \ = 0, 0\n    for i = 1, n do\n        if i % 2 == 0 and is_palindrome(i) then\n\
    \            even = even + 1\n        elseif i % 2 == 1 and is_palindrome(i) then\n\
    \            odd = odd + 1\n        end\n    end\n    return even, odd\nend",
  "    if n < 0 then\n        return {0, 0}\n    end\n    local e, o = 0, 0\n    for\
    \ i = 1, n do\n        if string.reverse(tostring(i)) == tostring(i) then\n  \
    \          if i % 2 == 0 then\n                e = e + 1\n            else\n \
    \               o = o + 1\n            end\n        end\n    end\n    return {e,\
    \ o}\nend", "    local ans = {0, 0}\n    if n <= 0 then\n        return ans\n\
    \    end\n    local odd = 1\n    while odd <= n do\n        ans[1] = ans[1] +\
    \ 1\n        odd = odd * 10 + 1\n    end\n    local even = 2\n    while even <=\
    \ n do\n        ans[2] = ans[2] + 1\n        even = even * 10 + 2\n    end\n \
    \   return ans\nend", "    local c1, c2 = 0, 0\n    local digits = bit32.lshift(n,\
    \ 1)\n    local m = digits - 1\n    local ds = {}\n    local i = 1\n    while\
    \ m > 0 do\n        local d = m % 10\n        if d > 0 then\n            ds[i]\
    \ = d\n            i = i + 1\n        end\n        m = math.floor(m / 10)\n  \
    \  end\n    c1 = #ds\n    if c1 == 0 then\n        return c1, c2\n    end\n  \
    \  local j = 1\n    local flag = true\n    while j <= math.floor(c1 / 2) do\n\
    \        if ds[j] ~= ds[c1 - j + 1] then\n            flag = false\n         \
    \   break\n        end\n        j = j + 1\n    end\n    if flag then\n       \
    \ c2 = 1\n    end\n    return c1, c2\nend", "    local even, odd = 0, 0\n    local\
    \ n2 = n * n\n    while n2 > 0 do\n        n2 = math.floor(n2 / 10)\n        if\
    \ n2 > 0 then\n            odd = odd + 1\n        end\n        n2 = math.floor(n2\
    \ / 10)\n        if n2 > 0 then\n            even = even + 1\n        end\n  \
    \  end\n    return even, odd\nend\nprint(even_odd_palindrome(1))\nprint(even_odd_palindrome(11))\n\
    print(even_odd_palindrome(1000))", "  local e, o = 0, 0\n  for i = 1, n do\n \
    \   if i < 10 then\n      o = o + 1\n    elseif (i % 11) == 0 then\n      e =\
    \ e + 1\n    else\n      local t = {}\n      for j = i, 1, -1 do\n        table.insert(t,\
    \ j)\n      end\n      local k = 1\n      while t[k] == t[#t - k + 1] do\n   \
    \     k = k + 1\n      end\n      if k == #t then\n        if (i % 2) == 0 then\n\
    \          e = e + 1\n        else\n          o = o + 1\n        end\n      end\n\
    \    end\n  end\n  return e, o\nend", "    local o, e = 0, 0\n    for i = 1, n\
    \ do\n        if i .. \"\" == string.reverse(i .. \"\") then\n            if i\
    \ % 2 == 0 then\n                e = e + 1\n            else\n               \
    \ o = o + 1\n            end\n        end\n    end\n    return e, o\nend", " \
    \   local even = 0\n    local odd = 0\n    local len = tostring(n):len()\n   \
    \ if len == 1 then\n        if n % 2 == 0 then\n            even = 1\n       \
    \ else\n            odd = 1\n        end\n    else\n        local half_len = math.floor(len\
    \ / 2)\n        if len % 2 == 0 then\n            -- \u5076\u6570\n          \
    \  for i = 1, 9 do\n                for j = 0, 9 do\n                    local\
    \ palindrome = i * 10 ^ (half_len - 1) + j * 10 ^ (half_len - 2) + i\n       \
    \             if palindrome <= n then\n                        even = even + 1\n\
    \                    end\n                end\n            end\n            --\
    \ 12321\n            local palindrome = 11 * 10 ^ (half_len - 1) + 11\n      \
    \      if palindrome <= n then\n                even = even + 1\n            end\n\
    \        else\n            -- \u5947\u6570\n            for i = 1, 9 do\n    \
    \            local palindrome = i * 10 ^ half_len + i\n                if palindrome\
    \ <= n then\n                    odd = odd + 1\n                end\n        \
    \    end\n        end\n    end\n    return even, odd\nend", "    local res = {}\n\
    \    local cnt = 0\n    for _ = 0, n do\n        if _ % 2 == 0 then\n        \
    \    cnt = cnt + 1\n        end\n    end\n    res[1] = cnt\n    res[2] = n - cnt\n\
    \    return res\nend", "    local function is_palindrome(i)\n        local l =\
    \ tostring(i)\n        local r = l:reverse()\n        return l == r\n    end\n\
    \    local even, odd = 0, 0\n    for i = 1, n do\n        if is_palindrome(i)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \   end\n    return even, odd\nend", "    local even, odd = 0, 0\n    local i\
    \ = 1\n    while i <= n do\n        local s = tostring(i)\n        if s == string.reverse(s)\
    \ then\n            if i % 2 == 0 then\n                even = even + 1\n    \
    \        else\n                odd = odd + 1\n            end\n        end\n \
    \       i = i + 1\n    end\n    return even, odd\nend", "    local function is_palindrome(num)\n\
    \        local num_str = tostring(num)\n        local len = string.len(num_str)\n\
    \        local left, right = 1, len\n        while left < right do\n         \
    \   if num_str:sub(left, left) ~= num_str:sub(right, right) then\n           \
    \     return false\n            end\n            left = left + 1\n           \
    \ right = right - 1\n        end\n        return true\n    end\n    local function\
    \ is_even(num)\n        return num % 2 == 0\n    end\n    local even_cnt, odd_cnt\
    \ = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if\
    \ is_even(i) then\n                even_cnt = even_cnt + 1\n            else\n\
    \                odd_cnt = odd_cnt + 1\n            end\n        end\n    end\n\
    \    return even_cnt, odd_cnt\nend", "    local function is_palindrome(n)\n  \
    \      local m = n\n        local r = 0\n        while m > 0 do\n            r\
    \ = r * 10 + m % 10\n            m = math.floor(m / 10)\n        end\n       \
    \ return r == n\n    end\n    local even = 0\n    local odd = 0\n    for i = 1,\
    \ n do\n        if is_palindrome(i) then\n            if i % 2 == 0 then\n   \
    \             even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ even = 0\n    local odd = 0\n    for i = 1, n do\n        if string.reverse(tostring(i))\
    \ == tostring(i) then\n            if i % 2 == 0 then\n                even =\
    \ even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n    end\n    return even, odd\nend", "    local even, odd = 0, 0\n\
    \    if n < 1 or n > 10 ^ 3 then\n        return 0, 0\n    end\n    for i = 1,\
    \ n do\n        if palindrome(i) then\n            if i % 2 == 0 then\n      \
    \          even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ even, odd = 0, 0\n    local len = math.floor(math.log10(n)) + 1\n    local mid\
    \ = math.floor(len / 2)\n    local nbase = math.pow(10, mid)\n    local left,\
    \ right = math.floor(n / nbase), n % nbase\n    if len % 2 == 0 then\n       \
    \ for i = 1, nbase - 1 do\n            if i < 10 then\n                even =\
    \ even + 1\n            else\n                odd = odd + 1\n            end\n\
    \        end\n        for i = 0, left - 1 do\n            if i < 10 then\n   \
    \             even = even + nbase\n            else\n                odd = odd\
    \ + nbase\n            end\n        end\n        for i = 0, right do\n       \
    \     if i < 10 then\n                even = even + 1\n            else\n    \
    \            odd = odd + 1\n            end\n        end\n    else\n        for\
    \ i = 1, nbase - 1 do\n            odd = odd + 1\n        end\n        for i =\
    \ 0, left - 1 do\n            odd = odd + nbase\n        end\n        for i =\
    \ 0, right do\n            odd = odd + 1\n        end\n    end\n    return even,\
    \ odd\nend", "    local even, odd = 0, 0\n    for i = 1, n do\n        if tostring(i)\
    \ == string.reverse(tostring(i)) then\n            if i % 2 == 0 then\n      \
    \          even = even + 1\n            else\n                odd = odd + 1\n\
    \            end\n        end\n    end\n    return even, odd\nend", "    local\
    \ function is_palindrome(n)\n        local r = 0\n        local x = n\n      \
    \  while x > 0 do\n            r = r * 10 + x % 10\n            x = math.floor(x\
    \ / 10)\n        end\n        return r == n\n    end\n    local c_even, c_odd\
    \ = 0, 0\n    for i = 1, n do\n        if is_palindrome(i) then\n            if\
    \ i % 2 == 0 then\n                c_even = c_even + 1\n            else\n   \
    \             c_odd = c_odd + 1\n            end\n        end\n    end\n    return\
    \ c_even, c_odd\nend", "    local function get_palindrome(n)\n        if n <=\
    \ 9 then\n            return 1\n        end\n        local c = 1\n        while\
    \ n > 10 do\n            c = c * 10\n            n = n // 10\n        end\n  \
    \      return c\n    end\n    local function calc_count(p)\n        local c =\
    \ 9\n        while p > 10 do\n            c = c * 10\n            p = p // 10\n\
    \        end\n        return c\n    end\n    local function get_count(p)\n   \
    \     local l = p % 10\n        p = p // 10\n        local c = 0\n        if l\
    \ >= 1 then\n            c = c + calc_count(p)\n        end\n        if l >= 2\
    \ then\n            c = c + calc_count(p)\n        end\n        return c\n   \
    \ end\n    local e, o = 0, 0\n    while n > 0 do\n        local p = get_palindrome(n)\n\
    \        local c = get_count(p)\n        if c % 2 == 0 then\n            e = e\
    \ + c\n        else\n            o = o + c\n        end\n        n = n - p * 2\n\
    \    end\n    return e, o\nend", "    local even, odd = 0, 0\n    for i = 1, n\
    \ do\n        if i < 10 then\n            odd = odd + 1\n        elseif i % 11\
    \ == 0 then\n            even = even + 1\n        else\n            local str\
    \ = tostring(i)\n            local j, k = 1, #str\n            while j < k do\n\
    \                if str:sub(j, j) ~= str:sub(k, k) then\n                    break\n\
    \                end\n                j, k = j + 1, k - 1\n            end\n \
    \           if j < k then\n                odd = odd + 1\n            else\n \
    \               even = even + 1\n            end\n        end\n    end\n    return\
    \ even, odd\nend\n_G.even_odd_palindrome = even_odd_palindrome", "    local num_even\
    \ = 0\n    local num_odd = 0\n    for i = 1, n do\n        local s = tostring(i)\n\
    \        local len = string.len(s)\n        local is_palindrome = true\n     \
    \   for i = 1, math.floor(len / 2) do\n            if s:sub(i, i) ~= s:sub(len\
    \ - i + 1, len - i + 1) then\n                is_palindrome = false\n        \
    \        break\n            end\n        end\n        if is_palindrome then\n\
    \            if (len % 2) == 0 then\n                num_even = num_even + 1\n\
    \            else\n                num_odd = num_odd + 1\n            end\n  \
    \      end\n    end\n    return num_even, num_odd\nend", "    local count = {\
    \ 0, 0 }\n    for i = 1, n do\n        if tonumber(tostring(i):reverse()) == i\
    \ then\n            count[i % 2 + 1] = count[i % 2 + 1] + 1\n        end\n   \
    \ end\n    return count\nend", "    local odd, even = 0, 0\n    for i = 1, n do\n\
    \        if math.floor(math.log10(i)) % 2 == 0 then\n            even = even +\
    \ 1\n        else\n            odd = odd + 1\n        end\n    end\n    return\
    \ even, odd\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
