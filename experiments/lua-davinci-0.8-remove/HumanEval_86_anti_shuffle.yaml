name: HumanEval_86_anti_shuffle
language: lua
prompt: "-- Write a function that takes a string and returns an ordered version of\
  \ it.\n-- Ordered version of string, is a string where all words (separated by space)\n\
  -- are replaced by a new word where all the characters arranged in\n-- ascending\
  \ order based on ascii value.\n-- Note: You should keep the order of words and blank\
  \ spaces in the sentence.\n-- For example:\nlocal function anti_shuffle(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = anti_shuffle\n\
  \    lu.assertEquals(candidate('Hi'), 'Hi')\n    lu.assertEquals(candidate('hello'),\
  \ 'ehllo')\n    lu.assertEquals(candidate('number'), 'bemnru')\n    lu.assertEquals(candidate('abcd'),\
  \ 'abcd')\n    lu.assertEquals(candidate('Hello World!!!'), 'Hello !!!Wdlor')\n\
  \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('Hi. My name\
  \ is Mister Robot. How are you?'), '.Hi My aemn is Meirst .Rboot How aer ?ouy')\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local words = s:split(' ')\n    local result = {}\n    for i,word\
    \ in ipairs(words) do\n        table.insert(result, table.concat(word:chars():sort(),\
    \ ''))\n    end\n    return table.concat(result, ' ')\nend\nassert(anti_shuffle('Hello\
    \ World') == 'ehllo dlorw')\nassert(anti_shuffle('The quick brown fox jumps over\
    \ the lazy dog') ==\n       'behinorw chkmpsu jxouy efhoqt vdeerz atgw')", " \
    \   return s:gsub(\"%w+\", function(w)\n        return w:gsub(\".\", function(c)\n\
    \            return string.char(c:byte() + 1)\n        end)\n    end)\nend", " \
    \ local words = {};\n  for w in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ table.concat(table.sort(iter.list(w))) );\n  end\n  return table.concat(words,\
    \ \" \");\nend", "  if not s then return nil end\n  local t = {}\n  for word in\
    \ s:gmatch('[^%s]+') do\n    table.insert(t, word:gsub('.', function(c)\n    \
    \  return string.char(string.byte(c))\n    end))\n  end\n  return table.concat(t,\
    \ ' ')\nend", "  --TODO: Implement your function here\nend", "  local t={}\n \
    \ for w in s:gmatch(\"%S+\") do\n    local t2={}\n    for c in w:gmatch(\".\"\
    ) do\n      table.insert(t2, c)\n    end\n    table.sort(t2)\n    table.insert(t,\
    \ table.concat(t2))\n  end\n  return table.concat(t,\" \")\nend", "    local words\
    \ = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words, table.concat(w:gmatch(\"\
    .\"), \"\"))\n    end\n    table.sort(words)\n    return table.concat(words, \"\
    \ \")\nend", "\tlocal words = {}\n\tlocal w\n\tfor w in s:gmatch(\"%w+\") do\n\
    \t\ttable.insert(words, w)\n\tend\n\treturn table.concat(words, \" \")\nend",
  "    local words = {}\n    for word in s:gmatch(\"[^%s]+\") do\n        table.insert(words,\
    \ word)\n    end\n    for i, word in ipairs(words) do\n        words[i] = word:gsub(\"\
    .\", function(c)\n            return string.char(string.byte(c))\n        end)\n\
    \    end\n    return table.concat(words, \" \")\nend", "    -- Write your code\
    \ here\n    local t = {}\n    s = s .. \" \"\n    local i = 1\n    while i <=\
    \ #s do\n        local c = s:sub(i, i)\n        if c == \" \" then\n         \
    \   table.insert(t, c)\n            i = i + 1\n        else\n            local\
    \ j = i\n            while j <= #s and s:sub(j, j) ~= \" \" do\n             \
    \   j = j + 1\n            end\n            local sub = s:sub(i, j - 1)\n    \
    \        local word = {}\n            for k = 1, #sub do\n                table.insert(word,\
    \ sub:sub(k, k))\n            end\n            table.sort(word)\n            table.insert(t,\
    \ table.concat(word))\n            i = j\n        end\n    end\n    return table.concat(t)\n\
    end\nassert(anti_shuffle(\"I am a student\") == \"aI aam adeinstt\")\nassert(anti_shuffle(\"\
    So cool!\") == \"!coloS\")\nassert(anti_shuffle(\"\") == \"\")", "    -- your\
    \ code goes here\nend", "\tfor k, v in pairs(s:gmatch(\"%S+\")) do\n\t\tlocal\
    \ chars = {}\n\t\tfor c in v:gmatch(\".\") do\n\t\t\ttable.insert(chars, c)\n\t\
    \tend\n\t\ttable.sort(chars)\n\t\ts = s:gsub(v, table.concat(chars), 1)\n\tend\n\
    \treturn s\nend\nassert(anti_shuffle(\"antidisestablishmentarianism\") == \"aaaabeiiimnnnnsstttt\"\
    )\nassert(anti_shuffle(\"the quick brown fox jumps over the lazy dog\") == \"\
    ehhttkkllooqrrsuw  bcdffjmnooppxx yvzz\")", "  return sort(split(s))\nend", " \
    \ local words = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words,\
    \ word)\n  end\n  local anti = {}\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local chars = {}\n    for c in word:gmatch(\".\") do\n      table.insert(chars,\
    \ c)\n    end\n    table.sort(chars)\n    table.insert(anti, table.concat(chars))\n\
    \  end\n  return table.concat(anti, \" \")\nend\nassert(anti_shuffle(\"a cat\"\
    ) == \"a act\")\nassert(anti_shuffle(\"as soon as possible\") == \"as aoopnss\
    \ soon\")\nassert(anti_shuffle(\"abc cab\") == \"abc abc\")\nassert(anti_shuffle(\"\
    abc cab cba\") == \"abc abc abc\")", "\tlocal t = {}\n\tfor w in s:gmatch(\"%S+\"\
    ) do\n\t\ttable.insert(t, table.concat(split(w:lower())))\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend", "\tlocal result = {}\n\tlocal lst = {}\n\tfor word in s:gmatch(\"\
    [^%s]+\") do\n\t\ttable.insert(lst, word)\n\tend\n\tfor i, word in ipairs(lst)\
    \ do\n\t\ttable.insert(result, word:gsub(\".\", function(c)\n\t\t\treturn string.char(string.byte(c))\n\
    \t\tend))\n\tend\n\treturn table.concat(result, \" \")\nend", "    return s:gsub('[^%s]+',\
    \ function(w)\n        return w:gsub('.', function(c)\n            return {c}\n\
    \        end):sort():concat()\n    end)\nend", "   local elements = string.split(s,\
    \ \" \")\n   for i, e in ipairs(elements) do\n      elements[i] = string.split(e,\
    \ \"\")\n      table.sort(elements[i])\n      elements[i] = table.concat(elements[i])\n\
    \   end\n   return table.concat(elements, \" \")\nend", "    local t = {}\n  \
    \  for w in s:gmatch(\"%S+\") do\n        table.insert(t, w:gsub(\".\", function(c)\
    \ return string.char(255 - string.byte(c)) end))\n    end\n    return table.concat(t,\
    \ \" \")\nend", "  local lst = {}\n  local order = function(a, b)\n    local a_lst\
    \ = {}\n    local b_lst = {}\n    local a_str = \"\"\n    local b_str = \"\"\n\
    \    for i=1, string.len(a) do\n      table.insert(a_lst, string.byte(a, i))\n\
    \    end\n    for i=1, string.len(b) do\n      table.insert(b_lst, string.byte(b,\
    \ i))\n    end\n    table.sort(a_lst)\n    table.sort(b_lst)\n    for i=1, #a_lst\
    \ do\n      a_str = a_str .. string.char(a_lst[i])\n    end\n    for i=1, #b_lst\
    \ do\n      b_str = b_str .. string.char(b_lst[i])\n    end\n    return a_str\
    \ < b_str\n  end\n  for w in string.gmatch(s, \"%S+\") do\n    table.insert(lst,\
    \ w)\n  end\n  table.sort(lst, order)\n  return table.concat(lst, \" \")\nend",
  "  local t = {}\n  for word in s:gmatch(\"%S+\") do\n    t[#t+1] = word:gsub(\"\
    (.)\", function(a) return table.concat(string.sort(a), \"\") end)\n  end\n  return\
    \ table.concat(t, \" \")\nend", "  local t = s:split(\" \")\n  local res = {}\n\
    \  for i, w in ipairs(t) do\n    local chars = {}\n    for c in w:gmatch(\".\"\
    ) do\n      table.insert(chars, c)\n    end\n    table.sort(chars)\n    res[i]\
    \ = table.concat(chars)\n  end\n  return table.concat(res, \" \")\nend\nassert(anti_shuffle(\"\
    it is more than a bird it is a plane\") == \"a a beiiinrttt ddeehmnprs\")\nassert(anti_shuffle(\"\
    is more than a bird it is a plane\") == \"a a beiiinrttt ddeehmnprs\")\nassert(anti_shuffle(\"\
    it is more than a bird it is a\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"\
    it is more than a bird it is\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"\
    it is more than a bird it\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"\
    it is more than a bird\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"\
    it is more than a\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"\
    it is more than\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"it\
    \ is more\") == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"it is\")\
    \ == \"a a beiiinrttt ddeehmnps\")\nassert(anti_shuffle(\"it\") == \"a a beiiinrttt\
    \ ddeehmnps\")", "  local tab = string_split(s)\n  local res = {}\n  for i,w in\
    \ ipairs(tab) do\n    table.insert(res,string_join(string_sort(w)))\n  end\n \
    \ return string_join(res)\nend\nassert(anti_shuffle(\"abds\") == \"abds\")\nassert(anti_shuffle(\"\
    \") == \"\")\nassert(anti_shuffle(\"I am not a hacker\") == \"I am not a acehkrr\"\
    )\nassert(anti_shuffle(\"abc dgbgfefa\") == \"abc aeffggb\")\nassert(anti_shuffle(\"\
    the abc is awesome\") == \"the abc aeemosw\")\nassert(anti_shuffle(\"the quick\
    \ brown fox jumps over the lazy dog\") == \"ehkortu ahoctbe ejmpsu vzzey dg\"\
    )\nassert(anti_shuffle(\"this is not a code challenge\") == \"ehhilnoo stta acde\"\
    )\nassert(anti_shuffle(\"a rose by any other name smells as sweet\") == \"a abdehklorr\
    \ swstee\")\nassert(anti_shuffle(\"this is a sample sentence\") == \"ehilnst \
    \ aaaeeimps\")", "  local tab = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(tab,\
    \ word)\n  end\n  local newtab = {}\n  for _,word in ipairs(tab) do\n    table.insert(newtab,\
    \ word:gsub(\"(.)\", function(c) return c .. \" \" end))\n  end\n  local res =\
    \ \"\"\n  for _,word in ipairs(newtab) do\n    res = res .. \" \" .. word:gsub(\"\
    (.)\", function(c) return c:upper() end)\n  end\n  return res:sub(2)\nend\nassert(anti_shuffle(\"\
    hello how are you\") == \"E H HLLO OW RSTU\")\nassert(anti_shuffle(\"abcd efgh\
    \ ijkl mnop\") == \"A B C D E F G H I J K L M N O P\")\nassert(anti_shuffle(\"\
    Hello world!\") == \"! D E H L L O R W\")\nassert(anti_shuffle(\"i am a student\"\
    ) == \"A A D E I M N S T T U\")", "  local result = \"\"\n  for word in s:gmatch(\"\
    %S+\") do\n    local w = {}\n    for i = 1, #word do\n      w[#w + 1] = word:sub(i,\
    \ i)\n    end\n    table.sort(w)\n    local word = table.concat(w)\n    result\
    \ = result .. word .. \" \"\n  end\n  return result:sub(1, #result - 1)\nend",
  "    -- your code goes here\nend", "\tlocal tab = {}\n\tlocal tmp = \"\"\n\tfor\
    \ i in s:gmatch(\"%S+\") do\n\t\tif not tab[i] then\n\t\t\ttable.insert(tab, i)\n\
    \t\t\ttmp = tmp .. \" \" .. i\n\t\tend\n\tend\n\treturn tmp:sub(2)\nend", "  local\
    \ xs = {}\n  for w in s:gmatch(\"[^%s]+\") do\n    table.insert(xs, w:gsub(\"\
    .\", function(x) return x .. (x:byte() % 10) end))\n  end\n  return table.concat(xs,\
    \ \" \")\nend", "    -- TODO\nend", "  -- body\nend", "    s = s:gsub('%s+', '_')\n\
    \    return s:gsub('%a+', function(s)\n        local t = {}\n        for i = 1,\
    \ #s do\n            table.insert(t, s:sub(i, i))\n        end\n        table.sort(t)\n\
    \        return table.concat(t)\n    end):gsub('_', ' ')\nend", "  -- your code\
    \ goes here\nend", "    local table = {}\n    local count = 1\n    local word\
    \ = \"\"\n    local current = \"\"\n    local last = \"\"\n    local new_s = \"\
    \"\n    for i=1, #s do\n        current = string.sub(s, i, i)\n        if current\
    \ ~= \" \" then\n            word = word .. current\n        else\n          \
    \  table[count] = word\n            word = \"\"\n            count = count + 1\n\
    \        end\n    end\n    table[count] = word\n    for i=1, #table do\n     \
    \   for j=1, #table[i] do\n            for k=j+1, #table[i] do\n             \
    \   if string.byte(string.sub(table[i], j, j)) > string.byte(string.sub(table[i],\
    \ k, k)) then\n                    local temp = string.sub(table[i], j, j)\n \
    \                   table[i] = string.sub(table[i], 1, j-1) .. string.sub(table[i],\
    \ k, k) .. string.sub(table[i], j+1, k-1) .. temp .. string.sub(table[i], k+1,\
    \ #table[i])\n                end\n            end\n        end\n    end\n   \
    \ for i=1, #table do\n        if i == 1 then\n            new_s = table[i]\n \
    \       else\n            new_s = new_s .. \" \" .. table[i]\n        end\n  \
    \  end\n    return new_s\nend", "  local words = {}\n  for w in s:gmatch \"%S+\"\
    \ do\n    table.insert(words, w)\n  end\n  table.sort(words, function(a, b)\n\
    \    return a:lower() < b:lower()\n  end)\n  return table.concat(words, \" \"\
    )\nend", "  local t = {}\n  for w in s:gmatch(\"%S+\") do\n    t[#t+1] = w:gsub(\"\
    .\", function(c) return c .. \"%0\" end):gsub(\"(.)%1+\", \"%1\")\n  end\n  return\
    \ table.concat(t, \" \")\nend", "    local word = \"\"\n    local word_table =\
    \ {}\n    local letter = \"\"\n    local letter_table = {}\n    for i = 1, string.len(s)\
    \ do\n        if string.sub(s, i, i) ~= \" \" then\n            word = word ..\
    \ string.sub(s, i, i)\n        else\n            table.insert(word_table, word)\n\
    \            word = \"\"\n        end\n    end\n    table.insert(word_table, word)\n\
    \    for i = 1, #word_table do\n        for j = 1, string.len(word_table[i]) do\n\
    \            table.insert(letter_table, string.sub(word_table[i], j, j))\n   \
    \     end\n        table.sort(letter_table)\n        for k = 1, #letter_table\
    \ do\n            letter = letter .. letter_table[k]\n        end\n        word_table[i]\
    \ = letter\n        letter = \"\"\n        letter_table = {}\n    end\n    s =\
    \ \"\"\n    for i = 1, #word_table do\n        s = s .. word_table[i] .. \" \"\
    \n    end\n    return s\nend", "    local words = {}\n    local sorted = \"\"\n\
    \    local pos = 1\n    local i = 1\n    while pos <= string.len(s) do\n     \
    \   local new_pos = string.find(s, \" \", pos)\n        if new_pos == nil then\n\
    \            new_pos = string.len(s) + 1\n        end\n        local word = string.sub(s,\
    \ pos, new_pos - 1)\n        words[i] = word\n        i = i + 1\n        pos =\
    \ new_pos + 1\n    end\n    for i = 1, #words do\n        local word = words[i]\n\
    \        local new_word = word\n        for j = 1, #word do\n            local\
    \ substring = string.sub(word, j, j)\n            for k = j + 1, #word do\n  \
    \              local substring2 = string.sub(word, k, k)\n                if substring\
    \ > substring2 then\n                    new_word = string.sub(new_word, 1, j\
    \ - 1) .. substring2 .. string.sub(new_word, j + 1, k - 1) .. substring .. string.sub(new_word,\
    \ k + 1)\n                    substring = substring2\n                end\n  \
    \          end\n        end\n        sorted = sorted .. new_word\n        if i\
    \ < #words then\n            sorted = sorted .. \" \"\n        end\n    end\n\
    \    return sorted\nend", "  local words = {}\n  for w in s:gmatch(\"[^%s]+\"\
    ) do\n    table.insert(words, table.concat(util.order(w)))\n  end\n  return table.concat(words,\
    \ \" \")\nend", "  local parts = {}\n  for part in s:gmatch(\"%S+\") do\n    table.insert(parts,\
    \ part)\n  end\n  for k, v in ipairs(parts) do\n    parts[k] = string.gsub(parts[k],\
    \ \"%w\", function(c)\n      return string.char(tonumber(string.format(\"%d\"\
    , c), 36))\n    end)\n  end\n  return table.concat(parts, \" \")\nend", "    local\
    \ res = ''\n    for word in s:gmatch('%S+') do\n        res = res .. word:gsub('(.)',\
    \ function(c) return c .. '+' end):gsub('%++', function(c) return string.char(c:byte())\
    \ end) .. ' '\n    end\n    return res:sub(1, -2)\nend", "   return s:gsub(\"\
    %S+\", function(s)\n      return s:gsub(\".\", \"%1\"):gsub(\"(.)(.*)\", function(a,b)\n\
    \         return b:gsub(\".\", \"%0\"..a)\n      end)\n   end)\nend", "    return\
    \ (\n        s:gsub(\"%S+\", function(w)\n            return w:gsub(\"(.)\", \"\
    %1\\0\"):sort():gsub(\"\\0\", \"\")\n        end)\n    )\nend", "   return \"\
    Not implemented yet\"\nend", "    local parts = s:split(\" \")\n    local sorted\
    \ = {}\n    for _, word in ipairs(parts) do\n        table.insert(sorted, word:sort())\n\
    \    end\n    return table.concat(sorted, \" \")\nend", "    local r = {}\n  \
    \  for w in s:gmatch('%S+') do\n        r[#r+1] = w:gsub('.', function(c) return\
    \ ' '..c:byte() end):sub(2)\n    end\n    return table.concat(r, ' ')\nend", " \
    \ return (s:gsub(\"%S+\", function(w)\n    return w:gsub(\".\", function(c)\n\
    \      return c .. \"\\0\"\n    end):gsub(\"%z%z+\", \"\\0\"):gsub(\"%z\", \"\"\
    ):gsub(\"\\0\", \"\"):reverse()\n  end))\nend", "    error(\"Not implemented\"\
    )\nend", "    local words = {}\n    for w in s:gmatch('%w+') do table.insert(words,\
    \ w) end\n    table.sort(words, function(a, b) return a < b end)\n    local num_spaces\
    \ = #s - #words + 1\n    local spaces = {}\n    for i = 1, num_spaces do table.insert(spaces,\
    \ ' ') end\n    table.sort(spaces, function(a, b) return a < b end)\n    local\
    \ out = {}\n    for _, w in ipairs(words) do\n        local chars = {}\n     \
    \   for c in w:gmatch('.') do table.insert(chars, c) end\n        table.sort(chars,\
    \ function(a, b) return a < b end)\n        table.insert(out, table.concat(chars))\n\
    \    end\n    table.sort(out, function(a, b) return a < b end)\n    local final\
    \ = {}\n    for i = 1, #out do\n        table.insert(final, out[i])\n        table.insert(final,\
    \ spaces[i])\n    end\n    return table.concat(final)\nend", "  local words =\
    \ {}\n  for word in s:gmatch('%w+') do\n    local w = {}\n    for char in word:gmatch('.')\
    \ do\n      table.insert(w, char)\n    end\n    table.sort(w)\n    table.insert(words,\
    \ table.concat(w))\n  end\n  return table.concat(words, ' ')\nend", "    local\
    \ result = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(result,\
    \ word:gsub(\"(.)\", function(char)\n            return char:byte()\n        end))\n\
    \    end\n    return table.concat(result, \" \")\nend", "  -- your code here\n\
    end", "\tif not s then return nil end\n\tlocal t = {}\n\tlocal temp = \"\"\n\t\
    local index = 1\n\tfor i = 1, string.len(s) do\n\t\tif string.sub(s, i, i) ==\
    \ \" \" then\n\t\t\tt[index] = temp\n\t\t\tindex = index + 1\n\t\t\ttemp = \"\"\
    \n\t\telse\n\t\t\ttemp = temp .. string.sub(s, i, i)\n\t\tend\n\tend\n\tt[index]\
    \ = temp\n\tfor i = 1, #t do\n\t\tt[i] = t[i]:reverse()\n\tend\n\ttemp = \"\"\n\
    \tfor i = 1, #t do\n\t\ttemp = temp .. \" \" .. t[i]\n\tend\n\treturn temp:sub(2)\n\
    end", "  -- TODO: Implement this function.\nend", "    local wds = {}\n    for\
    \ w in s:gmatch(\"%w+\") do\n        wds[#wds+1] = table.concat(table.sort(w:totable()))\n\
    \    end\n    return table.concat(wds, \" \")\nend", "    -- your code here\n\
    end", "    local output = {}\n    for word in s:gmatch(\"%S+\") do\n        local\
    \ letters = {}\n        for letter in word:gmatch(\".\") do\n            table.insert(letters,\
    \ letter)\n        end\n        table.sort(letters)\n        local new_word =\
    \ table.concat(letters)\n        table.insert(output, new_word)\n    end\n   \
    \ return table.concat(output, \" \")\nend", "    local words = {}\n    for match\
    \ in string.gmatch(s, '%S+') do\n        table.insert(words, match)\n    end\n\
    \    for i = 1, #words do\n        local chars = {}\n        for j = 1, #words[i]\
    \ do\n            table.insert(chars, words[i]:sub(j, j))\n        end\n     \
    \   table.sort(chars)\n        words[i] = table.concat(chars)\n    end\n    return\
    \ table.concat(words, ' ')\nend", "    return s:gsub('%w+', function(w)\n    \
    \    return w:gsub('.', function(c)\n            return c .. table.concat(table.sort{w:gsub(c,\
    \ ''):gsub('.', ' ')})\n        end)\n    end)\nend", "  -- your code here\nend",
  "  local function sorted_string(s)\n    local s_table = {}\n    for i = 1, #s do\n\
    \      table.insert(s_table, s:sub(i, i))\n    end\n    table.sort(s_table)\n\
    \    return table.concat(s_table)\n  end\n  local words = {}\n  for i in s:gmatch(\"\
    %S+\") do\n    table.insert(words, sorted_string(i))\n  end\n  return table.concat(words,\
    \ \" \")\nend\nprint(anti_shuffle(\"pon tol\"))", "    local ws, r = {}, {}\n\
    \    for w in s:gmatch(\"%w+\") do\n        table.insert(ws, w)\n    end\n   \
    \ for k, v in ipairs(ws) do\n        table.insert(r, table.concat(v:chars():sort()))\n\
    \    end\n    return table.concat(r, \" \")\nend\nassert(anti_shuffle(\"example\
    \ string\") == \"eelmppx aegrst\")\nassert(anti_shuffle(\"Pikachu, I choose you!\"\
    ) == \"aaccehhiikku, I ehoosu !\")\nassert(anti_shuffle(\"I heard the pastor sing\
    \ live verses easily.\") ==\n       \"I deehor ae abprst ielnstv iesvry.\")",
  "  -- your code here\nend", "    -- define a function that sorts the characters\
    \ in a string in ascending order\n    local function sort(str)\n        local\
    \ chars = {}\n        for c in str:gmatch\".\" do table.insert(chars, c) end\n\
    \        table.sort(chars)\n        return table.concat(chars)\n    end\n    --\
    \ define a function that scans a string from left to right\n    -- and returns\
    \ the first word it meets\n    local function scan(str)\n        local space,\
    \ start, stop = str:find(\" \")\n        if space then\n            return str:sub(1,\
    \ space - 1), str:sub(space + 1)\n        else\n            return str, \"\"\n\
    \        end\n    end\n    -- define a function that 'sorts' the words in a string\n\
    \    local function sort_words(str)\n        local new_str = \"\"\n        while\
    \ #str > 0 do\n            local word, remain = scan(str)\n            new_str\
    \ = new_str .. sort(word) .. \" \"\n            str = remain\n        end\n  \
    \      return new_str\n    end\n    -- get the words, sort them and return them\n\
    \    return sort_words(s)\nend", "  local words = {}\n  local temp_word = {}\n\
    \  local to_return = {}\n  local temp_char\n  local key\n  local val\n  local\
    \ i\n  local j\n  local l\n  local l2\n  local temp\n  l = s:len()\n  for i =\
    \ 1, l do\n    if s:sub(i, i) == \" \" then\n      temp = \"\"\n      for j =\
    \ 1, #temp_word do\n        temp = temp .. temp_word[j]\n      end\n      words[#words\
    \ + 1] = temp\n      temp_word = {}\n    else\n      temp_word[#temp_word + 1]\
    \ = s:sub(i, i)\n    end\n  end\n  temp = \"\"\n  for j = 1, #temp_word do\n \
    \   temp = temp .. temp_word[j]\n  end\n  words[#words + 1] = temp\n  for i =\
    \ 1, #words do\n    l2 = words[i]:len()\n    temp_word = {}\n    for j = 1, l2\
    \ do\n      temp_word[j] = words[i]:sub(j, j)\n    end\n    table.sort(temp_word)\n\
    \    to_return[#to_return + 1] = temp_word\n  end\n  temp = \"\"\n  for i = 1,\
    \ #to_return do\n    l2 = #to_return[i]\n    for j = 1, l2 do\n      temp = temp\
    \ .. to_return[i][j]\n    end\n    if i ~= #to_return then\n      temp = temp\
    \ .. \" \"\n    end\n  end\n  return temp\nend", "  -- your code goes here\nend",
  "  -- print(\">>> \" .. s)\n  local words = {}\n  -- convert string to table of\
    \ words\n  for word in s:gmatch(\"%S+\") do\n    table.insert(words, word)\n \
    \ end\n  -- sort each word\n  for i = 1, #words do\n    local word = words[i]\n\
    \    local letters = {}\n    for letter in word:gmatch(\".\") do\n      table.insert(letters,\
    \ letter)\n    end\n    table.sort(letters)\n    -- print(\">>> \", i, word, table.concat(letters))\n\
    \    words[i] = table.concat(letters)\n  end\n  return table.concat(words, \"\
    \ \")\nend", "    local words = {}\n    for i in s:gmatch('%S+') do\n        local\
    \ chars = {}\n        for j in i:gmatch('.') do\n            table.insert(chars,\
    \ j)\n        end\n        table.sort(chars)\n        table.insert(words, table.concat(chars))\n\
    \    end\n    return table.concat(words, ' ')\nend\nassert(anti_shuffle('hello')\
    \ == 'ehllo')\nassert(anti_shuffle('I love lua') == 'I elov lau')\nassert(anti_shuffle('welcome\
    \ to my world') == 'eeeelcmmno  t omywlrld')", "    local result = {}\n    local\
    \ word_start_idx = 1\n    local word_end_idx = 1\n    local word\n    local ascii_values",
  "    local words = {}\n    for w in s:gmatch(\"%S+\") do table.insert(words, w)\
    \ end\n    for i, w in ipairs(words) do\n        words[i] = table.concat(\n  \
    \          table.sort(w:split(\"\"), function(a, b) return a:byte() < b:byte()\
    \ end))\n    end\n    return table.concat(words, \" \")\nend\nassert(anti_shuffle(\"\
    hello world\") == \"ehllo dlorw\")", "  local function sort_string(s)\n    table.sort(s,\
    \ function(a, b) return a:byte() < b:byte() end)\n    return table.concat(s)\n\
    \  end\n  return (s:gsub(\"%S+\", sort_string))\nend", "\tlocal map = {}\n\tfor\
    \ i=1, #s do\n\t\tlocal c = s:sub(i,i)\n\t\tif c == ' ' then\n\t\t\tc = true\n\
    \t\tend\n\t\ttable.insert(map, c)\n\tend\n\tfor i=1, #map do\n\t\tlocal c = map[i]\n\
    \t\tif type(c) == 'string' then\n\t\t\tlocal arr = {}\n\t\t\tfor i=1, #c do\n\t\
    \t\t\ttable.insert(arr, c:sub(i,i))\n\t\t\tend\n\t\t\ttable.sort(arr)\n\t\t\t\
    map[i] = table.concat(arr)\n\t\tend\n\tend\n\treturn table.concat(map)\nend",
  "    --\nend", "    local words = {}\n    for word in s:gmatch(\"%S+\") do table.insert(words,\
    \ word) end\n    local res = {}\n    for i = 1, #words do\n        local tmp =\
    \ {}\n        for c in words[i]:gmatch(\".\") do table.insert(tmp, c) end\n  \
    \      table.sort(tmp)\n        table.insert(res, table.concat(tmp))\n    end\n\
    \    return table.concat(res, \" \")\nend", "    return s:gsub('%S+', function(w)\n\
    \        return w:gsub('(.)', function(c)\n            return string.format('%02x',\
    \ c:byte()) .. c\n        end):gsub('(%x%x)(.)', function(a, b)\n            return\
    \ b .. a\n        end)\n    end)\nend\nassertEquals('4aA 56bB 78C', anti_shuffle('Ab\
    \ 45 Ba 68C'))", "    local function ordered_insert(res, word)\n        local\
    \ t = { word:byte(1, #word) }\n        table.sort(t)\n        local nw = string.char(unpack(t))\n\
    \        table.insert(res, nw)\n    end\n    local res = {}\n    for word in s:gmatch(\"\
    %S+\") do\n        ordered_insert(res, word)\n    end\n    return table.concat(res,\
    \ \" \")\nend", "    local map = {}\n    local order = {}\n    local last = nil\n\
    \    local res = {}\n    for v in s:gmatch(\"%S+\") do\n        if not map[v]\
    \ then\n            map[v] = #order + 1\n            order[#order + 1] = v\n \
    \       end\n        res[#res + 1] = map[v]\n        res[#res + 1] = ' '\n   \
    \ end\n    table.remove(res)\n    return table.concat(res)\nend", "    local words\
    \ = {}\n    local current_word = {}\n    for char in s:gmatch('.') do\n      \
    \  if char ~= ' ' then\n            table.insert(current_word, char)\n       \
    \ else\n            if #current_word > 0 then\n                table.insert(words,\
    \ table.concat(current_word))\n                current_word = {}\n           \
    \ end\n            table.insert(words, ' ')\n        end\n    end\n    if #current_word\
    \ > 0 then\n        table.insert(words, table.concat(current_word))\n    end\n\
    \    return table.concat(words)\nend\nassert(anti_shuffle('hello world') == 'ehllo\
    \ dlorw')\nassert(anti_shuffle('hello') == 'ehllo')\nassert(anti_shuffle('hello\
    \ world wtf') == 'ehllo dlorw ftw')\nassert(anti_shuffle('ahh no') == 'ahh no')\n\
    assert(anti_shuffle('oop') == 'oop')\nassert(anti_shuffle(' ah no ') == ' ah no\
    \ ')\nassert(anti_shuffle(' a h n o ') == ' a h n o ')\nassert(anti_shuffle('a\
    \ h n o') == 'a h n o')\nassert(anti_shuffle(' a h n o') == ' a h n o')\nassert(anti_shuffle('\
    \ a h n o ') == ' a h n o ')\nassert(anti_shuffle('a h n o ') == 'a h n o ')\n\
    assert(anti_shuffle(' a h n o') == ' a h n o')\nassert(anti_shuffle('a hn o')\
    \ == 'a hn o')\nassert(anti_shuffle('a hn o ') == 'a hn o ')\nassert(anti_shuffle('\
    \ a hn o') == ' a hn o')\nassert(anti_shuffle(' a hn o ') == ' a hn o ')\nassert(anti_shuffle('\
    \ a hn o  ') == ' a hn o  ')\nassert(anti_shuffle(' a hn o   ') == ' a hn o  \
    \ ')", "  return nil\nend\nassert(anti_shuffle('h w s') == 'h s w')\nassert(anti_shuffle('h\
    \ w   s') == 'h s w')\nassert(anti_shuffle('hello    world  m') == 'ehllo m wdlor')",
  "  local new = {}\n  for w in s:gmatch(\"%S+\") do\n    local unord = {}\n    for\
    \ char in w:gmatch(\".\") do\n      table.insert(unord, char)\n    end\n    table.sort(unord)\n\
    \    table.insert(new, table.concat(unord))\n  end\n  return table.concat(new,\
    \ \" \")\nend", "    -- ...\nend", "    local words = {}\n    for word in s:gmatch(\"\
    %S+\") do\n        table.insert(words, word)\n    end\n    for i = 1, #words do\n\
    \        words[i] = reorder(words[i])\n    end\n    return table.concat(words,\
    \ \" \")\nend", "\tlocal order = {}\n\tlocal words = {}\n\tfor word in s:gmatch(\"\
    %w+\") do\n\t\ttable.insert(words,word)\n\t\tlocal arr = {}\n\t\tfor c in word:gmatch(\"\
    .\") do\n\t\t\ttable.insert(arr,c)\n\t\tend\n\t\ttable.sort(arr)\n\t\ttable.insert(order,table.concat(arr))\n\
    \tend\n\tlocal output = {}\n\tfor i,w in ipairs(words) do\n\t\ttable.insert(output,order[i])\n\
    \t\tif i < #words then\n\t\t\ttable.insert(output,s:match(\"%s+\",#words+i))\n\
    \t\tend\n\tend\n\treturn table.concat(output)\nend\nassert(anti_shuffle(\"\")\
    \ == \"\")\nassert(anti_shuffle(\"a\") == \"a\")\nassert(anti_shuffle(\"a b\"\
    ) == \"a b\")\nassert(anti_shuffle(\"sailor is a man\") == \"ailsor is a mna\"\
    )\nassert(anti_shuffle(\"sailor is a man who is a sailor\") == \"ailsor is a mna\
    \ who is a ailsor\")\nassert(anti_shuffle(\"sailor man sailor\") == \"ailsor amn\
    \ ailsor\")\nassert(anti_shuffle(\"sailor man is\") == \"ailsor amn is\")\nassert(anti_shuffle(\"\
    sailor man is sailor\") == \"ailsor amn is ailsor\")\nassert(anti_shuffle(\"sailor\
    \ man sailor man\") == \"ailsor amn ailsor amn\")", "  return (string.gsub(s,\
    \ \"%S+\", function(w)\n    local t = {}\n    for c in string.gmatch(w, \".\"\
    ) do\n      table.insert(t, c)\n    end\n    table.sort(t)\n    return table.concat(t)\n\
    \  end))\nend\nassertEquals(anti_shuffle(\"abc\"), \"abc\")\nassertEquals(anti_shuffle(\"\
    abc def\"), \"abc def\")\nassertEquals(anti_shuffle(\"abc def cba\"), \"abc abc\
    \ def\")\nassertEquals(anti_shuffle(\"abc def cba xyx\"), \"abc abc abc def xyx\"\
    )\nassertEquals(anti_shuffle(\"abc def cba xyx 123\"), \"123 abc abc abc def xyx\"\
    )", "\tlocal words = {}\n\tfor word in s:gmatch(\"%w+\") do\n\t\ttable.insert(words,\
    \ word)\n\tend\n\treturn table.concat(words, \" \")\nend\nassert(anti_shuffle(\"\
    Hi! How are you?\") == \"Hi! How are you?\")\nassert(anti_shuffle(\"My name is\
    \ test\") == \"My name is test\")\nassert(anti_shuffle(\"Wicked this and that\"\
    ) == \"Wicked this and that\")\nassert(anti_shuffle(\"I am in love with Lua\"\
    ) == \"I am in love with Lua\")\nassert(anti_shuffle(\"How many characters and\
    \ words\") == \"How many characters and words\")\nassert(anti_shuffle(\"This is\
    \ a test on digits 1234567890\") == \"This is a test on digits 1234567890\")\n\
    assert(anti_shuffle(\"CodeEval is awesome\") == \"awesome CodeEval is\")\nassert(anti_shuffle(\"\
    a b c d e f g h i j k l m n o p q r s t u v w x y z\") == \"a b c d e f g h i\
    \ j k l m n o p q r s t u v w x y z\")\nassert(anti_shuffle(\"v w x y z a b c\
    \ d e f g h i j k l m n o p q r s t u\") == \"a b c d e f g h i j k l m n o p\
    \ q r s t u v w x y z\")\nassert(anti_shuffle(\"Finally some digits 123456789\"\
    ) == \"Finally some digits 123456789\")", "  local res = {}\n  for w in s:gmatch(\"\
    %w+\") do\n    local nw = {}\n    for c in w:gmatch(\".\") do\n      nw[#nw+1]\
    \ = c\n    end\n    table.sort(nw)\n    res[#res+1] = table.concat(nw)\n  end\n\
    \  return table.concat(res, \" \")\nend", "  local words = {}\n  for w in s:gmatch('%S+')\
    \ do\n    table.insert(words, w)\n  end\n  for i, v in ipairs(words) do\n    local\
    \ chars = {}\n    for c in v:gmatch('.') do\n      table.insert(chars, c)\n  \
    \  end\n    table.sort(chars)\n    words[i] = table.concat(chars)\n  end\n  return\
    \ table.concat(words, ' ')\nend\nassert(anti_shuffle('Hello World!') == 'deHllloorW!')\n\
    assert(anti_shuffle('O nama') == 'aO amn')\nassert(anti_shuffle('Napisati funkciju\
    \ koja otimaij alfabetizira recenicu') ==\n  'aaacdeefhijilmnnoprstu')\nassert(anti_shuffle('Zadatak\
    \ za vezbanje') == 'aaabdeeekrzvz')\nassert(anti_shuffle('Znam da je vise od jednog\
    \ resenja') ==\n  'aaadeeeghijjkmmnoooorrsssstu')", "    local words = s:split(\"\
    \ \")\n    local result = {}\n    for _, word in ipairs(words) do\n        table.insert(result,\
    \ word:encode():sort():decode())\n    end\n    return table.concat(result, \"\
    \ \")\nend", "    local words = {}\n    local output = {}\n    local buf = {}\n\
    \    local c = \"\"\n    local last = \"\"\n    for v in s:gmatch(\"%a+\") do\n\
    \        table.insert(words, v)\n    end\n    for i = 1, #s do\n        c = s:sub(i,\
    \ i)\n        if c:match(\"%w\") then\n            table.insert(buf, c)\n    \
    \    else\n            table.insert(output, table.concat(buf))\n            buf\
    \ = {}\n            table.insert(output, c)\n        end\n    end\n    for i =\
    \ 1, #output do\n        if output[i]:match(\"%w\") then\n            last = output[i]\n\
    \            table.sort(output[i]:upper():gmatch(\"%w\"))\n            output[i]\
    \ = table.concat(output[i]:upper():gmatch(\"%w\"))\n            if last == last:lower()\
    \ then\n                output[i] = output[i]:lower()\n            end\n     \
    \   end\n    end\n    return table.concat(output)\nend", "    local parts = {}\n\
    \    for part in s:gmatch(\"%S+\") do\n        table.insert(parts, part)\n   \
    \ end\n    local new_parts = {}\n    for _, part in ipairs(parts) do\n       \
    \ table.insert(new_parts, table.concat(sort_it(part), \"\"))\n    end\n    return\
    \ table.concat(new_parts, \" \")\nend", "  local x = {}\n  for word in s:gmatch(\"\
    %S+\") do\n    table.insert(x, table.concat(sort(each(word)), \"\"))\n  end\n\
    \  return table.concat(x, \" \")\nend", "    local words = s:split(\" \")\n  \
    \  local sorted_words = {}\n    for i, word in ipairs(words) do\n        local\
    \ _, new_word = word:gsub(\"%a\", function(c)\n            return string.char(string.byte(c)\
    \ + 1)\n        end)\n        sorted_words[i] = new_word\n    end\n    return\
    \ table.concat(sorted_words, \" \")\nend", "    return s:gsub('[%w]*', function(w)\n\
    \        return w:gsub('.', function(c)\n            return string.char(string.byte(c))\n\
    \        end)\n    end)\nend", "    return string.gsub(s, '%S+', function(w)\n\
    \        local t = {}\n        for _, c in utf8.codes(w) do\n            table.insert(t,\
    \ utf8.char(c))\n        end\n        table.sort(t)\n        return table.concat(t)\n\
    \    end)\nend", end, "    local function sorter(char1, char2)\n        return\
    \ char1:byte() < char2:byte()\n    end\n    local new_words = {}\n    for word\
    \ in s:gmatch(\"%w+\") do\n        table.insert(new_words, word:gsub(\".\", \"\
    \") .. word:gsub(\"(.)\", \"%1 \"):gsub(\" \", \"\"):gsub(\".\", \"\") .. word:gsub(\"\
    .\", \"\"))\n    end\n    local new_s = table.concat(new_words, \" \")\n    return\
    \ new_s\nend", "\t-- TODO: return a string where words are sorted by ascii order.\n\
    \tlocal new_tbl = {}\n\tlocal tbl = s:split(\" \")\n\tfor i,v in ipairs(tbl) do\n\
    \t\tnew_tbl[i] = v:split(\"\"):sort()\n\tend\n\tlocal str = \"\"\n\tfor i,v in\
    \ ipairs(new_tbl) do\n\t\tstr = str .. table.concat(v) .. \" \"\n\tend\n\treturn\
    \ str\nend", "   --[[\n      if you want a \"real\" test then change the pattern\
    \ to\n      return s:gsub(\"(%w+)\", function(w) return w:gsub(\".\", \"|%0\"\
    ) end)\n   --]]\n   return s:gsub(\"(%w+)\", function(w) return w:gsub(\".\",\
    \ \"|%0\"):sub(2) end)\nend", "   local words = string.gmatch(s, \"%S+\")\n  \
    \ local result = ''\n   for word in words do\n      local letters = {}\n     \
    \ for char in string.gmatch(word, \".\") do\n         table.insert(letters, char)\n\
    \      end\n      table.sort(letters)\n      result = result .. ' ' .. table.concat(letters)\n\
    \   end\n   return result\nend", "\ts = s:gsub(\"(%w+)\", sort_str)\n\treturn\
    \ s\nend", "  local ordered = {}\n  for _,w in pairs(s:split(\" \")) do\n    local\
    \ ordered_chars = {}\n    for _,c in pairs(w:split(\"\")) do\n      table.insert(ordered_chars,\
    \ c)\n    end\n    table.sort(ordered_chars)\n    table.insert(ordered, table.concat(ordered_chars))\n\
    \  end\n  return table.concat(ordered, \" \")\nend", "\ts = s:gsub('%s+', ' ')\n\
    \tlocal t = {}\n\tfor w in s:gmatch('%S+') do\n\t\tt[#t+1] = w:gsub('.', function(c)\
    \ return c .. '%0' end):gsub('%z', '')\n\tend\n\treturn table.concat(t, ' ')\n\
    end", "  local function comp (a, b)\n    local sort = {}\n    local sa = string.byte(a)\n\
    \    local sb = string.byte(b)\n    sort.sa = sa\n    sort.sb = sb\n    if sa\
    \ < sb then\n      return true\n    elseif sa > sb then\n      return false\n\
    \    else\n      return true\n    end\n  end\n  local getword = {}\n  local word\
    \ = ''\n  local t = {}\n  local answer = ''\n  for i=1, #s do\n    getword[#getword+1]\
    \ = s:sub(i,i)\n  end\n  for i=1, #getword do\n    if getword[i] ~= ' ' then\n\
    \      word = word .. getword[i]\n    else\n      t[#t+1] = word\n      word =\
    \ ''\n    end\n  end\n  for i=1, #t do\n    word = word .. table.sort(t[i], comp)\n\
    \  end\n  for i=1, #word do\n    if word:sub(i,i) == ' ' then\n      answer =\
    \ answer .. ' '\n    else\n      answer = answer .. word:sub(i,i)\n    end\n \
    \ end\n  return answer\nend", "    if type(s) ~= \"string\" then\n        return\
    \ nil\n    end\n    local words = {}\n    for word in s:gmatch(\"%S+\") do\n \
    \       table.insert(words, word)\n    end\n    local output = \"\"\n    for i,\
    \ word in ipairs(words) do\n        local sorted = {}\n        for c in word:gmatch(\"\
    .\") do\n            table.insert(sorted, c)\n        end\n        table.sort(sorted)\n\
    \        output = output .. table.concat(sorted)\n        if i < #words then\n\
    \            output = output .. \" \"\n        end\n    end\n    return output\n\
    end", "\t-- Split the string into an array\n\tlocal tokens = s:split(\" \")\n\t\
    -- Process all the items in the array\n\tfor i, token in ipairs(tokens) do\n\t\
    \t-- Split the word by character\n\t\tlocal chars = token:split(\"\")\n\t\t--\
    \ Sort the characters in the word\n\t\tlocal sorted = chars:sort()\n\t\t-- Join\
    \ the characters back into a word\n\t\ttokens[i] = sorted:join(\"\")\n\tend\n\t\
    -- Join the sentence back together\n\treturn tokens:join(\" \")\nend", "  -- Implement\
    \ your function here\nend", "    local ss = s:gsub(\"%S+\", function(w)\n    \
    \    return table.concat(utils.split(w, \"\"), \"\")\n    end)\n    return table.concat(utils.split(ss,\
    \ \" \"), \" \")\nend", "  error(\"TODO\")\nend", "  -- TODO: implement this function,\n\
    \  -- and return the result of your computation\n  local anti_shuffled = ''\n\
    \  for word in s:gmatch(\"%w+\") do\n    for char in word:gmatch(\".\") do\n \
    \     table.insert(chars, char)\n    end\n    -- chars = chars:sort()\n    --\
    \ anti_shuffled = chars\n  end\n  -- return anti_shuffled\nend", "  local words\
    \ = {}\n  local ans = {}\n  local word = ''\n  for char in s:gmatch('.') do\n\
    \    if char == ' ' then\n      table.insert(words, word)\n      table.insert(ans,\
    \ ' ')\n      word = ''\n    else\n      word = word .. char\n    end\n  end\n\
    \  table.insert(words, word)\n  for i = 1, #words do\n    local cur_word = words[i]\n\
    \    local cur_word_sort = {}\n    for char in cur_word:gmatch('.') do\n     \
    \ table.insert(cur_word_sort, char)\n    end\n    table.sort(cur_word_sort)\n\
    \    local new_word = ''\n    for j = 1, #cur_word_sort do\n      new_word = new_word\
    \ .. cur_word_sort[j]\n    end\n    ans[i] = new_word\n  end\n  return table.concat(ans)\n\
    end", "    local l = {}\n    for w in s:gmatch(\"%w+\") do\n        local new_w\
    \ = {}\n        for c in w:gmatch(\".\") do\n            new_w[#new_w + 1] = c\n\
    \        end\n        table.sort(new_w)\n        l[#l + 1] = table.concat(new_w)\n\
    \    end\n    return table.concat(l, \" \")\nend", "\tlocal words, str = {}\n\t\
    local last_i, i = 1, 1\n\twhile i <= #s do\n\t\tif s:sub(i, i) == ' ' then\n\t\
    \t\twords[#words + 1] = s:sub(last_i, i - 1)\n\t\t\tlast_i = i + 1\n\t\tend\n\t\
    \ti = i + 1\n\tend\n\twords[#words + 1] = s:sub(last_i, i - 1)\n\tfor i = 1, #words\
    \ do\n\t\tlocal chars = {}\n\t\tfor char in words[i]:gmatch('.') do\n\t\t\tchars[#chars\
    \ + 1] = char\n\t\tend\n\t\ttable.sort(chars)\n\t\twords[i] = table.concat(chars)\n\
    \tend\n\treturn table.concat(words, ' ')\nend", "  -- your code goes here\nend",
  "    local function sort_str(str)\n        local str_t = {}\n        for ch in str:gmatch(\"\
    .\") do\n            table.insert(str_t, ch)\n        end\n        table.sort(str_t)\n\
    \        return table.concat(str_t)\n    end\n    local result = {}\n    for word\
    \ in s:gmatch(\"%S+\") do\n        table.insert(result, sort_str(word))\n    end\n\
    \    return table.concat(result, \" \")\nend", "    local words = {}\n    for\
    \ w in s:gmatch(\"[^%s]+\") do\n        words[#words + 1] = w\n    end\n    for\
    \ i = 1, #words do\n        words[i] = table.concat(words[i]:split())\n    end\n\
    \    return table.concat(words, \" \")\nend", "    -- TODO: implement the function\
    \ here\nend\nassert(anti_shuffle(\"hello world i am a string\") == \"ehllo dlorw\
    \ i am a gnirst\")\nassert(anti_shuffle(\"Cats are great\") == \"aCst are egar\"\
    )\nassert(anti_shuffle(\"Wolfenstein 3D is not that good\") == \"Weflnotseen 3D\
    \ is not taht dego\")", "   local result = \"\"\n   local t = {}\n   local function\
    \ sort_by_char(w)\n      local t = {}\n      for i = 1, #w do\n         t[i] =\
    \ string.char(w:byte(i))\n      end\n      table.sort(t)\n      return table.concat(t)\n\
    \   end\n   for w in s:gmatch(\"%S+\") do\n      table.insert(t, sort_by_char(w))\n\
    \   end\n   for i = 1, #t do\n      result = result .. t[i] .. \" \"\n   end\n\
    \   return result:sub(1, #result - 1)\nend", "    local xs = {}\n    for word\
    \ in s:gmatch(\"%w+\") do\n        table.insert(xs, word:gsub(\".\", function(c)\n\
    \            return string.format(\"%03d\", string.byte(c))\n        end))\n \
    \   end\n    return table.concat(xs, \" \")\nend", "    local t = {}\n    for\
    \ i in s:gmatch(\"%S+\") do\n        table.insert(t, table.concat(i:split(\"\"\
    ):sort(), \"\"))\n    end\n    return table.concat(t, \" \")\nend", "    return\
    \ string.gsub(s, \"(%w+)\", function(s)\n        return table.concat(table.sort(utf8.codes(s)))\n\
    \    end)\nend", "   return (string.gsub(s, '(%w+)', function(w)\n      return\
    \ table.concat(table.sort(string.explode(w, '')), '')\n   end))\nend", "  return\
    \ string.gsub(s, \"(%w+)\", function(w)\n    return table.concat(str_to_table(w):sort(),\
    \ \"\")\n  end)\nend", "    local r = {}\n    for w in s:gmatch(\"%S+\") do\n\
    \        table.insert(r, w:gsub(\".\", function(c) return string.char(string.byte(c)\
    \ - 32) end))\n    end\n    return table.concat(r, \" \")\nend", "    -- Your\
    \ code here\nend", "\tlocal r, first = {}, true\n\tfor w in s:gmatch(\"%S+\")\
    \ do\n\t\tif first then\n\t\t\tfirst = false\n\t\telse\n\t\t\ttable.insert(r,\
    \ \" \")\n\t\tend\n\t\ttable.insert(r, table.concat(table.sort(table.pack(w:gmatch(\"\
    .\")))))\n\tend\n\treturn table.concat(r)\nend", "    local words = {}\n    for\
    \ word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n \
    \   local ret = {}\n    for i = 1, #words do\n        table.insert(ret, {})\n\
    \        for letter in words[i]:gmatch(\".\") do\n            table.insert(ret[i],\
    \ letter)\n        end\n        table.sort(ret[i])\n        ret[i] = table.concat(ret[i])\n\
    \    end\n    return table.concat(ret, \" \")\nend", "    local s_table = {}\n\
    \    for word in s:gmatch(\"%S+\") do\n        -- sort each word\n        local\
    \ word_table = {}\n        for character in word:gmatch(\".\") do\n          \
    \  table.insert(word_table, character)\n        end\n        table.sort(word_table)\n\
    \        -- place the sorted word in the main table\n        table.insert(s_table,\
    \ table.concat(word_table))\n    end\n    return table.concat(s_table, \" \")\n\
    end", "    local function compare_chars(a, b)\n        return a < b\n    end\n\
    \    local words = {}\n    for word in s:gmatch(\"%S+\") do\n        local letters\
    \ = {}\n        for letter in word:gmatch(\".\") do\n            table.insert(letters,\
    \ letter)\n        end\n        table.sort(letters, compare_chars)\n        table.insert(words,\
    \ table.concat(letters))\n    end\n    return table.concat(words, \" \")\nend",
  "\ts = string.gsub(s, \"%s+\", \"\") -- remove spaces\n\tlocal t = {} -- create\
    \ new table\n\tfor i = 1, #s do\n\t\ttable.insert(t, s:sub(i, i)) -- add each\
    \ character to the table\n\tend\n\ttable.sort(t) -- sort the table\n\tlocal sorted\
    \ = table.concat(t) -- table to string\n\treturn sorted\nend", "  -- Convert string\
    \ to a table of words\n  local words = {}\n  for word in s:gmatch(\"%w+\") do\n\
    \    words[#words + 1] = word\n  end", "    local res = \"\"\n    for w in s:gmatch(\"\
    [^%s]+\") do\n        local t = {}\n        for c in w:gmatch(\".\") do\n    \
    \        table.insert(t, c)\n        end\n        table.sort(t)\n        res =\
    \ res .. table.concat(t) .. \" \"\n    end\n    return res:sub(1, #res - 1)\n\
    end", "   -- Your code goes here!\nend", "   local words = {}\n   for word in\
    \ s:gmatch(\"%S+\") do\n      table.insert(words, word)\n   end\n   local function\
    \ cmp(a, b)\n      if #a == #b then\n         return a < b\n      else\n     \
    \    return #a < #b\n      end\n   end\n   table.sort(words, cmp)\n   local result\
    \ = \"\"\n   for i = 1, #words - 1 do\n      result = result .. words[i] .. \"\
    \ \"\n   end\n   result = result .. words[#words]\n   return result\nend\nassert(anti_shuffle\
    \ \"abc def\" == \"abc def\")\nassert(anti_shuffle \"aaa bb cc\" == \"aaa bb cc\"\
    )\nassert(anti_shuffle \"   aaa bb cc\" == \"   aaa bb cc\")\nassert(anti_shuffle\
    \ \"   aaa bb cc   \" == \"   aaa bb cc   \")\nassert(anti_shuffle \"   aaa bb\
    \ cc eee dddd\" == \"aaa bb cc dddd eee\")", "    local s_tokens = {}\n    for\
    \ token in s:gmatch(\"%S+\") do\n        table.insert(s_tokens, token)\n    end\n\
    \    return table.concat(s_tokens, \" \")\nend", "  local words = {};\n  for w\
    \ in s:gmatch(\"%w+\") do\n    table.insert(words, w);\n  end\n  table.sort(words,\
    \ function(a, b)\n    return a:lower() < b:lower();\n  end);\n  local s = \"\"\
    ;\n  for _, w in ipairs(words) do\n    s = s .. w .. \" \";\n  end\n  return s:sub(1,\
    \ -2);\nend\nassert(anti_shuffle(\"Hello world\") == \"ehllo dlorw\");\nassert(anti_shuffle(\"\
    Hello \") == \"ehllo \");\nassert(anti_shuffle(\"Hello\") == \"ehllo\");\nassert(anti_shuffle(\"\
    tHe wOrlD aS wE kNow iT\") == \"aEiIkNoOrSwTt wd\");", "   -- insert here your\
    \ code\n   --return\nend", "    local list = {}\n    for w in s:gmatch(\"%S+\"\
    ) do\n        local l = {}\n        for c in w:gmatch(\".\") do\n            l[#l+1]\
    \ = c\n        end\n        table.sort(l)\n        list[#list+1] = table.concat(l)\n\
    \    end\n    return table.concat(list, \" \")\nend", "    return s:gsub(\"%S+\"\
    , function(w)\n        return w:gsub(\".\", function(c)\n            return string.char(string.byte(c))\n\
    \        end)\n    end)\nend", "    -- TODO: your code here\nend", "    local\
    \ words = s:split(' ')\n    local result = {}\n    for _, w in ipairs(words) do\n\
    \        local sorted = {}\n        for i = 1, #w do\n            table.insert(sorted,\
    \ w:sub(i, i))\n        end\n        table.sort(sorted)\n        table.insert(result,\
    \ table.concat(sorted))\n    end\n    return table.concat(result, ' ')\nend\n\
    assert(anti_shuffle(\"odaihgvnao ieidre\") == \"adgghiinnooaaeir\")\nassert(anti_shuffle(\"\
    a b\") == \"a b\")\nassert(anti_shuffle(\"\") == \"\")\nassert(anti_shuffle(\"\
    a aa aab\") == \"a aa ab\")", "    local function sort(s)\n        local t = {}\n\
    \        for c in s:gmatch('.') do\n            table.insert(t, c)\n        end\n\
    \        table.sort(t)\n        return table.concat(t)\n    end\n    local words\
    \ = {}\n    for w in s:gmatch('%S+') do\n        table.insert(words, sort(w))\n\
    \    end\n    return table.concat(words, ' ')\nend", "  local t = {}\n  for w\
    \ in s:gmatch(\"%S+\") do\n    table.insert(t, table.concat(split(w), \"\"))\n\
    \  end\n  return table.concat(t, \" \")\nend", "    local new_s = ''\n    local\
    \ t = {}\n    local words = {}\n    for w in s:gmatch('%S+') do\n        table.insert(words,\
    \ w)\n    end\n    local sorted_w = {}\n    for i, v in ipairs(words) do\n   \
    \     table.insert(sorted_w, v:lower():gsub('.', function(c)\n            table.insert(t,\
    \ c)\n        end))\n        table.sort(t)\n        local sorted_word = table.concat(t)\n\
    \        t = {}\n        table.insert(sorted_w, i, sorted_word)\n    end\n   \
    \ for i, v in ipairs(sorted_w) do\n        new_s = new_s .. v .. ' '\n    end\n\
    \    return new_s:sub(1, #new_s - 1)\nend\nassert(anti_shuffle'Hello world') \
    \ ==  'ehllo dlorw'\nassert(anti_shuffle'This is an example')  ==  'aehilnpsstx'\n\
    assert(anti_shuffle'HeLLo  WOrld  !')  ==  'ehllo dlorw'\nassert(anti_shuffle'Foo\
    \    Bar')  ==  'abfoor'", "  -- body\nend", "    local res = {}\n    for w in\
    \ s:gmatch(\"%w+\") do\n        table.insert(res, w:gsub(\".\", function(c) return\
    \ string.char(tonumber(string.byte(c))+1) end))\n    end\n    return table.concat(res,\
    \ \" \")\nend", "\treturn table.concat(\n\t\ttable.sort(\n\t\t\ttable.map(\n\t\
    \t\t\tstring.split(s, ' '),\n\t\t\t\tfunction(w)\n\t\t\t\t\treturn table.concat(table.sort(string.to_array(w)))\n\
    \t\t\t\tend\n\t\t\t)\n\t\t),\n\t\t' '\n\t)\nend\nassert_equal(\n\t'abc abcd aabbcc\
    \ aabbccdd efgh',\n\tanti_shuffle('aabbccdd abc abcd efgh aabbcc')\n)", "    local\
    \ t = {}\n    for w in s:gmatch('%w+') do table.insert(t, w) end\n    for i =\
    \ 1, #t do\n        t[i] = table.concat(tab.sort(str.to_char_list(t[i])), '')\n\
    \    end\n    return table.concat(t, ' ')\nend", "    local words = {}\n    for\
    \ word in s:gmatch(\"%S+\") do\n        table.insert(words, word)\n    end\n \
    \   local new_words = {}\n    for i,word in ipairs(words) do\n        local chars\
    \ = {}\n        for char in word:gmatch(\".\") do\n            table.insert(chars,\
    \ char)\n        end\n        table.sort(chars)\n        local new_word = table.concat(chars)\n\
    \        table.insert(new_words, new_word)\n    end\n    return table.concat(new_words,\
    \ \" \")\nend", "    local words = {}\n    for word in s:gmatch(\"%S+\") do\n\
    \        table.insert(words, word)\n    end\n    for index, word in ipairs(words)\
    \ do\n        local ordered = {}\n        for c in word:gmatch(\".\") do\n   \
    \         table.insert(ordered, c)\n        end\n        table.sort(ordered)\n\
    \        words[index] = table.concat(ordered)\n    end\n    return table.concat(words,\
    \ \" \")\nend", "    return ''.join(sorted(s))\nend", "    local str = {}\n  \
    \  local t = {}\n    local index = 1\n    local word = ''\n    local word_arr\
    \ = {}\n    for word in string.gmatch(s, '%S+') do\n        table.insert(t, word)\n\
    \    end\n    for k,v in pairs(t) do\n        for i = 1,string.len(v) do\n   \
    \         table.insert(word_arr,string.sub(v,i,i))\n        end\n        table.sort(word_arr)\n\
    \        for k,v in pairs(word_arr) do\n            word = word .. v\n       \
    \ end\n        word_arr = {}\n        if index < #t then\n            str[index]\
    \ = word .. ' '\n        else\n            str[index] = word\n        end\n  \
    \      word = ''\n        index = index + 1\n    end\n    local out = ''\n   \
    \ for k,v in pairs(str) do\n        out = out .. v\n    end\n    return out\n\
    end", "    local function sort_chars(word)\n        local chars = {}\n       \
    \ for i = 1, #word do\n            chars[i] = word:sub(i, i)\n        end\n  \
    \      table.sort(chars)\n        return table.concat(chars)\n    end", "  --[[\n\
    \  * Split the string into words.\n  * For each word, get an ordered version of\
    \ it.\n  * Join the words back and return the result.\n  --]]\n  local words =\
    \ str_split(s, \" \")\n  for i, word in ipairs(words) do\n    words[i] = order_string(word)\n\
    \  end\n  return table.concat(words, \" \")\nend", end, "    local t = {}\n  \
    \  for i in s:gmatch(\"[^%s]+\") do\n        local j = {}\n        for k in i:gmatch(\"\
    .\") do\n            table.insert(j, k)\n        end\n        table.sort(j)\n\
    \        table.insert(t, table.concat(j))\n    end\n    return table.concat(t,\
    \ \" \")\nend", "  -- string.match only returns the first match\n  -- so we use\
    \ a table to store all matching patterns\n  local words = {}\n  for word in string.gmatch(s,\
    \ \"%S+\") do\n    table.insert(words, word)\n  end\n  -- sort the characters\
    \ in each word\n  for i = 1, #words do\n    local charTable = {}\n    for char\
    \ in string.gmatch(words[i], \".\") do\n      table.insert(charTable, char)\n\
    \    end\n    table.sort(charTable)\n    words[i] = table.concat(charTable)\n\
    \  end\n  return table.concat(words, \" \")\nend", "  local words = {}\n  local\
    \ input_words = {}\n  local output_words = {}\n  --split words\n  for w in s:gmatch(\"\
    %S+\") do\n    table.insert(input_words, w)\n  end\n  -- sort each word\n  for\
    \ i = 1, #input_words do\n    local word = \"\"\n    local letters = {}\n    for\
    \ l in input_words[i]:gmatch(\"%a\") do\n      table.insert(letters, l)\n    end\n\
    \    table.sort(letters)\n    -- concat letters\n    for j = 1, #letters do\n\
    \      word = word .. letters[j]\n    end\n    table.insert(output_words, word)\n\
    \  end\n  -- concat sorted words\n  local output = \"\"\n  for i = 1, #output_words\
    \ do\n    output = output .. output_words[i] .. \" \"\n  end\n  return output\n\
    end", "    local new_s = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(new_s,\
    \ word:gsub(\".\", function(char)\n            return char .. string.rep(\" \"\
    , 255 - string.byte(char))\n        end))\n    end\n    return table.concat(new_s,\
    \ \" \")\nend\nassert(anti_shuffle(\"abc def ghi jkl\") == \"abc bcdef cdefd efghi\
    \ fghij ghi jkl\")\nassert(anti_shuffle(\"a b   c d e\") == \"a ab abc  b cd cd\
    \  e\")\nassert(anti_shuffle(\"this is a test\") == \"a aehist ehistt hiiiss issstt\
    \ ssttt t\")\nassert(anti_shuffle(\"\") == \"\")\nassert(anti_shuffle(\" \") ==\
    \ \" \")\nassert(anti_shuffle(\"a\") == \"a\")\nassert(anti_shuffle(\"a \") ==\
    \ \"a \")\nassert(anti_shuffle(\" a\") == \" a\")", "\tlocal words = {}\n\tlocal\
    \ last = 1\n\tfor i = 1, #s do\n\t\tif s:sub(i, i) == ' ' then\n\t\t\twords[#words\
    \ + 1] = s:sub(last, i - 1)\n\t\t\tlast = i + 1\n\t\tend\n\tend\n\tif last <=\
    \ #s then\n\t\twords[#words + 1] = s:sub(last)\n\tend\n\tlocal res = {}\n\tfor\
    \ _, w in ipairs(words) do\n\t\tlocal sorted = {}\n\t\tfor i = 1, #w do\n\t\t\t\
    local c = w:sub(i, i)\n\t\t\tsorted[#sorted + 1] = c\n\t\tend\n\t\ttable.sort(sorted)\n\
    \t\tres[#res + 1] = table.concat(sorted)\n\tend\n\treturn table.concat(res, '\
    \ ')\nend\nassert(anti_shuffle(\"vsovens\") == \"enossv\")\nassert(anti_shuffle(\"\
    enossv\") == \"enossv\")\nassert(anti_shuffle(\"enossv vovnes sovens\") == \"\
    enossv enossv enossv\")\nassert(anti_shuffle(\"\") == \"\")\nassert(anti_shuffle(\"\
    a\") == \"a\")\nassert(anti_shuffle(\" \") == \" \")\nassert(anti_shuffle(\" a\"\
    ) == \" a\")\nassert(anti_shuffle(\"ab \") == \"ab \")\nassert(anti_shuffle(\"\
    \ a \") == \" a \")\nassert(anti_shuffle(\"    \") == \"    \")\nassert(anti_shuffle(\"\
    \ abc  x   \") == \"abc  x   \")", "   local ret = {}\n   local words = s:split(\"\
    \ \")\n   for i = 1, #words do\n      local word = words[i]\n      local xs =\
    \ {}\n      for j = 1, #word do\n         xs[#xs + 1] = word:sub(j, j)\n     \
    \ end\n      table.sort(xs)\n      local x = \"\"\n      for _, c in ipairs(xs)\
    \ do\n         x = x .. c\n      end\n      ret[#ret + 1] = x\n   end\n   return\
    \ table.concat(ret, \" \")\nend\nassert(anti_shuffle(\"Oyyyvveee eeearrrss\")\
    \ == \"Oeeeerrvyv eeearrss\")\nassert(anti_shuffle(\"We are all in the gutter\
    \ but some of us are looking at the stars\") == \"Ww aaee rlll ine ottttr tttttr\
    \ ee ee eeeeeo fsuu rrrss\")\nassert(anti_shuffle(\"\") == \"\")", end, "  local\
    \ words = {}\n  for word in s:gmatch('%w+') do\n    table.insert(words, word)\n\
    \  end\n  for i = 1, #words do\n    local w = words[i]\n    words[i] = w:gsub('(.)',\
    \ function(c)\n      return c..'\\1'\n    end)\n    table.sort(words)\n    words[i]\
    \ = words[i]:gsub('(.)\\1', '%1')\n  end\n  local res = ''\n  for word in s:gmatch('%w+')\
    \ do\n    res = res..table.remove(words, 1)\n  end\n  return res\nend\nassert(anti_shuffle('hello\
    \ world') == 'ehllo dlorw')\nassert(anti_shuffle('apple dog') == 'aelpp dgo')\n\
    assert(anti_shuffle('hello world is beautiful') == 'ehllo dlorw is eeautifl')",
  "   if not s:find(\"%S\") then\n      return \"\"\n   end\n   local words = {}\n\
    \   for word in s:gmatch(\"%S+\") do\n      table.insert(words, word)\n   end\n\
    \   local ordered_words = {}\n   for _, word in ipairs(words) do\n      table.insert(ordered_words,\
    \ table.concat(sort(word)))\n   end\n   return table.concat(ordered_words, \"\
    \ \")\nend", "  local function word_to_ord(s)\n    local t = {}\n    for i = 1,\
    \ #s do\n      t[#t + 1] = string.byte(s, i)\n    end\n    table.sort(t)\n   \
    \ local s = \"\"\n    for i = 1, #t do\n      s = s .. string.char(t[i])\n   \
    \ end\n    return s\n  end\n  local function word_from_ord(s)\n    local t = {}\n\
    \    for i = 1, #s do\n      t[#t + 1] = string.byte(s, i)\n    end\n    table.sort(t)\n\
    \    local s = \"\"\n    for i = 1, #t do\n      s = s .. string.char(t[i])\n\
    \    end\n    return s\n  end\n  local t = {}\n  local i = 1\n  while i <= #s\
    \ do\n    local r = s:find(\" \", i)\n    if r == nil then\n      r = #s + 1\n\
    \    end\n    t[#t + 1] = word_from_ord(s:sub(i, r - 1))\n    i = r + 1\n  end\n\
    \  return table.concat(t, \" \")\nend\nassert(anti_shuffle(\"To be or not to be\"\
    ) == \"bo eoo rnteotb\")\nassert(anti_shuffle(\"Sorting is fun\") == \"noirgsti\
    \ sfu\")\nassert(anti_shuffle(\"The cake is a lie\") == \"aehcik lteia ets\")\n\
    assert(anti_shuffle(\"The cake is a lie\") == \"aehcik lteia ets\")\nassert(anti_shuffle(\"\
    aabbccdd\") == \"aabbccdd\")\nassert(anti_shuffle(\"aaaaaaaa\") == \"aaaaaaaa\"\
    )\nassert(anti_shuffle(\"a\") == \"a\")\nassert(anti_shuffle(\"\") == \"\")",
  "  local w = \"\"\n  for x in s:gmatch(\"%S+\") do\n    local l = {}\n    for i\
    \ in x:gmatch(\".\") do table.insert(l, i) end\n    table.sort(l)\n    w = w ..\
    \ table.concat(l) .. \" \"\n  end\n  return w:sub(1, -2)\nend", "    -- your code\
    \ here\nend", "\tif type(s) ~= \"string\" then\n\t\terror(\"argument must be a\
    \ string\")\n\tend\n\tlocal t = {}\n\tfor str in s:gmatch(\"%S+\") do\n\t\tlocal\
    \ arr = {}\n\t\tfor i = 1, #str do\n\t\t\tarr[i] = str:sub(i, i)\n\t\tend\n\t\t\
    table.sort(arr)\n\t\ttable.insert(t, table.concat(arr))\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend", "  local t = {}\n  for word in s:gmatch(\"%S+\") do\n    table.insert(t,\
    \ word:gsub(\".\", function(c) return c .. string.char(0) end))\n  end\n  table.sort(t)\n\
    \  return table.concat(t, \" \"):gsub(\"%z\", \"\")\nend\nassert(anti_shuffle(\"\
    Hello world!\") == \"deHllloorw!\")\nassert(anti_shuffle(\"aBcD\") == \"aBcD\"\
    )\nassert(anti_shuffle(\"  How   are you ? \") == \"  Hhoww   aaree  ?you \")\n\
    assert(anti_shuffle(\"Hello World\") == \"deHllloorW\")", "  if type(s) ~= \"\
    string\" then\n    return nil\n  end\n  local t = {}\n  for word in s:gmatch(\"\
    %S+\") do\n    table.insert(t, word:gsub(\".\", function(c)\n      return string.char(c:byte()\
    \ + 1)\n    end))\n  end\n  return table.concat(t, \" \")\nend", "  -- your code\n\
    end", "\tlocal t, i = {}, 1\n\tfor word in s:gmatch(\"%S+\") do\n\t\tt[i] = word\n\
    \t\ti = i + 1\n\tend\n\ttable.sort(t, function(a, b) return a < b end)\n\treturn\
    \ table.concat(t, \" \")\nend\nassert(anti_shuffle(\"You shall not pass!\") ==\
    \ \"aaaeehlllnotpprsssu\")\nassert(anti_shuffle(\"Hello world!\") == \"dehllloorw\"\
    )\nassert(anti_shuffle(\"Make School\") == \"School Make\")", "  s = \"M an k\
    \ tu ds of\\n\"\n  --> \"M an k tu ds of\\n\"\n  s = \"J a v a   p r o g r a m\
    \ m i n g\\n\"\n  --> \"a a a g i i J m m n n o p r r v\\n\"\n  s = \"M y k id\
    \ s l ov e g a m e s\\n\"\n  --> \"d e e g i k M l m o s s s v y\\n\"\nend", " \
    \   local words = {}\n    local word = \"\"\n    local s_len = #s\n    for i =\
    \ 1, s_len do\n        local c = s:sub(i, i)\n        if c == \" \" then\n   \
    \         if #word > 0 then\n                table.insert(words, word)\n     \
    \           word = \"\"\n            end\n            table.insert(words, \" \"\
    )\n        else\n            word = word .. c\n        end\n    end\n    if #word\
    \ > 0 then\n        table.insert(words, word)\n    end\n    local sorted_words\
    \ = {}\n    for _, word in ipairs(words) do\n        if word == \" \" then\n \
    \           table.insert(sorted_words, word)\n        else\n            local\
    \ letters = {}\n            for i = 1, #word do\n                table.insert(letters,\
    \ word:sub(i, i))\n            end\n            table.sort(letters)\n        \
    \    table.insert(sorted_words, table.concat(letters))\n        end\n    end\n\
    \    return table.concat(sorted_words)\nend", "  -- your code goes here\nend",
  "    local new = {}\n    for w in s:gmatch(\"%S+\") do\n        table.insert(new,\
    \ w:gsub(\"(.)\", \"%1 %1\"):gsub(\" \", \"\"):gsub(\"(.)\", \"%1 \"):sub(1, -2))\n\
    \    end\n    return table.concat(new, \" \")\nend", "\tlocal t = {}\n\tlocal\
    \ res = \"\"\n\tfor w in s:gmatch(\"%S+\") do\n\t\ttable.insert(t, w)\n\tend\n\
    \tfor k, v in ipairs(t) do\n\t\tlocal tmp = {}\n\t\tfor i = 1, #v do\n\t\t\ttable.insert(tmp,\
    \ v:sub(i, i))\n\t\tend\n\t\ttable.sort(tmp)\n\t\tfor _, v in ipairs(tmp) do\n\
    \t\t\tres = res .. v\n\t\tend\n\t\tif k ~= #t then\n\t\t\tres = res .. \" \"\n\
    \t\tend\n\tend\n\treturn res\nend\nassert(anti_shuffle(\"Fuck you\") == \"cFkuouy\"\
    )\nassert(anti_shuffle(\"Fuck you, you bitch\") == \"cFkuouy,youbitch\")\nassert(anti_shuffle(\"\
    Fuck you, you bitch!\") == \"cFkuouy,youbitch!\")\nassert(anti_shuffle(\"123 456\"\
    ) == \"123456\")\nassert(anti_shuffle(\"123 456    \") == \"123456\")\nassert(anti_shuffle(\"\
    123 456    789\") == \"123456789\")", "  local t = {}\n  for w in s:gmatch(\"\
    [^%s]+\") do\n    local tab = {}\n    for c in w:gmatch(\".\") do\n      table.insert(tab,\
    \ c)\n    end\n    table.sort(tab)\n    table.insert(t, table.concat(tab))\n \
    \ end\n  return table.concat(t, \" \")\nend\nassert_equal(\"eed dbrns,smmlm sb,\"\
    , anti_shumble(\"bees breed,small fees\"))\nassert_equal(\"dvt dvt dvt dvt\",\
    \ anti_shumble(\"dvt dvt dvt dvt\"))\nassert_equal(\"smmmlm,nnd,brns\", anti_shumble(\"\
    small,and,bees\"))", "  local words = {}\n  local current = {}\n  local last =\
    \ #s\n  for i = 1, #s do\n    local current_char = s:sub(i, i)\n    if current_char\
    \ == \" \" then\n      local word = table.concat(current)\n      table.insert(words,\
    \ word)\n      current = {}\n    else\n      table.insert(current, current_char)\n\
    \    end\n  end\n  local last_word = table.concat(current)\n  table.insert(words,\
    \ last_word)\n  for i = 1, #words do\n    local sorted = {}\n    for j = 1, #words[i]\
    \ do\n      table.insert(sorted, words[i]:sub(j, j))\n    end\n    table.sort(sorted)\n\
    \    words[i] = table.concat(sorted)\n  end\n  return table.concat(words, \" \"\
    )\nend\nprint(anti_shuffle(\"cat dog bat\")) --> abt act adg dgo gto\nprint(anti_shuffle(\"\
    1 2 3 4 5 6 7 8 9 10\")) --> 1 1 10 10 2 2 3 3 4 4 5 5 6 6 7 7 8 8 9 9", "   \
    \ local words = {};\n    for w in s:gmatch(\"%S+\") do\n        table.insert(words,\
    \ table.concat(sort_char(w:lower()), \"\"))\n    end\n    return table.concat(words,\
    \ \" \")\nend", "    local result = {}\n    local tbl = {}\n    for word in s:gmatch(\"\
    %S+\") do\n        local newWord = {}\n        for i = 1, #word do\n         \
    \   table.insert(newWord, word:sub(i, i))\n        end\n        table.sort(newWord)\n\
    \        local newWordStr = table.concat(newWord)\n        table.insert(tbl, newWordStr)\n\
    \    end\n    return table.concat(tbl, \" \")\nend", "  local function rev(x)\n\
    \    local i = 1\n    local j = #x\n    while i < j do\n      x[i], x[j] = x[j],\
    \ x[i]\n      i = i + 1\n      j = j - 1\n    end\n    return x\n  end\n  local\
    \ result = {}\n  for t in s:gmatch(\"%S+\") do\n    local tmp = {}\n    for c\
    \ in t:gmatch(\".\") do\n      table.insert(tmp, c)\n    end\n    table.sort(tmp)\n\
    \    table.insert(result, table.concat(rev(tmp)))\n  end\n  return table.concat(result,\
    \ \" \")\nend\nassert(anti_shuffle(\"abc\") == \"abc\")\nassert(anti_shuffle(\"\
    abc bc ac\") == \"abc cba cba\")\nassert(anti_shuffle(\"abc abc cba\") == \"abc\
    \ cba cba\")\nassert(anti_shuffle(\"ab cba\") == \"ab abc\")\nassert(anti_shuffle(\"\
    the lazy fox jumps over the dog\") == \"ehl fzay kox spmuj revo eht god\")\nassert(anti_shuffle(\"\
    go hang a salami im a lasagna hog\") == \"ghin aaagi aalmm im a aghns sal\")\n\
    assert(anti_shuffle(\"\") == \"\")", "    local words = {}\n    local res = {}\n\
    \    for word in s:gmatch(\"[^%s]+\") do\n        words[#words + 1] = word\n \
    \   end\n    for i,word in ipairs(words) do\n        res[i] = table.concat(word:split(\"\
    \"):sort(), \"\")\n    end\n    return table.concat(res, \" \")\nend", "\tlocal\
    \ t = {}\n\tlocal i = 1\n\twhile i <= #s do\n\t\twhile i <= #s and s:byte(i) ==\
    \ 32 do\n\t\t\tt[#t + 1] = \" \"\n\t\t\ti = i + 1\n\t\tend\n\t\tlocal start =\
    \ i\n\t\twhile i <= #s and s:byte(i) ~= 32 do\n\t\t\ti = i + 1\n\t\tend\n\t\t\
    local word = s:sub(start, i - 1)\n\t\tlocal sorted_word = word:gsub(\".\", function(c)\n\
    \t\t\treturn string.char(c:byte())\n\t\tend)\n\t\ttable.sort(sorted_word)\n\t\t\
    sorted_word = table.concat(sorted_word)\n\t\tt[#t + 1] = sorted_word\n\tend\n\t\
    return table.concat(t)\nend", "\tlocal t = {}\n\tfor w in s:gmatch(\"%w+\") do\n\
    \t\ttable.insert(t, w:gsub(\"(.)\", function(c) return c .. string.byte(c) end))\n\
    \tend\n\ttable.sort(t)\n\treturn table.concat(t, \" \")\nend", "   local t = {}\n\
    \   for w in s:gmatch(\"%S+\") do\n      table.insert(t, w:gsub(\".\", function(c)\
    \ return string.char(c:byte()) end))\n   end\n   return table.concat(t, \" \"\
    )\nend\nprint(anti_shuffle(\"Hello world\"))", "    local new_string = \"\"\n\
    \    for word in s:gmatch(\"[^%s]+\") do\n        local new_word = {}\n      \
    \  for char in word:gmatch(\".\") do\n            table.insert(new_word,char)\n\
    \        end\n        table.sort(new_word)\n        new_string = new_string ..\
    \ table.concat(new_word,\"\") .. \" \"\n    end\n    return new_string:sub(1,-2)\n\
    end\nassert(anti_shuffle(\"Hello World\") == \"dehllloorw\")\nassert(anti_shuffle(\"\
    abracadabra\") == \"aabbacddr\")\nassert(anti_shuffle(\"coding is fun\") == \"\
    cdeginnoisf\")\nassert(anti_shuffle(\"\") == \"\")", "    local words = {}\n \
    \   for word in s:gmatch(\"%w+\") do\n        words[#words + 1] = word\n    end\n\
    \    local result = {}\n    for i, word in ipairs(words) do\n        local chars\
    \ = {}\n        for char in word:gmatch(\".\") do\n            chars[#chars +\
    \ 1] = char\n        end\n        table.sort(chars)\n        result[i] = table.concat(chars)\n\
    \    end\n    return table.concat(result, \" \")\nend", "  -- YOUR CODE HERE\n\
    end", "    local t = {}\n    for w in s:gmatch('%S+') do\n        table.insert(t,\
    \ w:gsub('(.)', '%1\\0'):sort():gsub('\\0', ''))\n    end\n    return table.concat(t,\
    \ ' ')\nend", "\tlocal ret = {}\n\tfor word in s:gmatch('([^%s]+)') do\n\t\tlocal\
    \ c = {}\n\t\tfor i=1,#word do\n\t\t\tc[#c+1] = word:sub(i,i)\n\t\tend\n\t\ttable.sort(c)\n\
    \t\tret[#ret+1] = table.concat(c)\n\tend\n\treturn table.concat(ret, ' ')\nend",
  "  local chars = {}\n  for word in s:gmatch(\"%S+\") do\n    local chars_in_word\
    \ = {}\n    for c in word:gmatch(\".\") do\n      table.insert(chars_in_word,\
    \ c)\n    end\n    table.sort(chars_in_word)\n    local ordered_word = table.concat(chars_in_word)\n\
    \    table.insert(chars, ordered_word)\n  end\n  return table.concat(chars, \"\
    \ \")\nend", "    local ans = \"\"\n    local space = \"\"\n    for w in s:gmatch(\"\
    %S+\") do\n        ans = ans .. space .. table.concat(w:gmatch(\".\"))\n     \
    \   space = \" \"\n    end\n    return ans\nend\nassert(anti_shuffle(\"a c b d\"\
    ) == \"a b c d\")\nassert(anti_shuffle(\"a c b d e\") == \"a b c d e\")\nassert(anti_shuffle(\"\
    a c b d e f\") == \"a b c d e f\")\nassert(anti_shuffle(\"a c b d e f g\") ==\
    \ \"a b c d e f g\")\nassert(anti_shuffle(\"a c b  d e f g\") == \"a b c d e f\
    \ g\")\nassert(anti_shuffle(\"This is a test!\") == \"Tihs is a etst!\")\nassert(anti_shuffle(\"\
    Hello world\") == \"deHlll orw\")", "  return s\nend", "\tlocal words = {}\n\t\
    for word in s:gmatch(\"%w+\") do\n\t\ttable.insert(words, word)\n\tend\n\ttable.sort(words,\
    \ function(w1, w2)\n\t\tlocal w1_s = w1:gsub(\"%a\", function(c) return c:byte()\
    \ end)\n\t\tlocal w2_s = w2:gsub(\"%a\", function(c) return c:byte() end)\n\t\t\
    return w1_s < w2_s\n\tend)\n\treturn table.concat(words, \" \")\nend\nprint(anti_shuffle(\"\
    hello world !\"))\nprint(anti_shuffle(\"aaaa bbb cccc\"))", "\tlocal r = {}\n\t\
    for w in s:gmatch(\"%S+\") do\n\t\tlocal t = {}\n\t\tfor c in w:gmatch(\".\")\
    \ do\n\t\t\ttable.insert(t, c)\n\t\tend\n\t\ttable.sort(t)\n\t\ttable.insert(r,\
    \ table.concat(t))\n\tend\n\treturn table.concat(r, \" \")\nend\nassert(anti_shuffle(\"\
    I love you\") == \"I e l o o v y u\")\nassert(anti_shuffle(\"I lvoe you\") ==\
    \ \"I e l o o v y u\")\nassert(anti_shuffle(\"  I   love you  \") == \"  I   e\
    \ l o o v y u  \")\nassert(anti_shuffle(\"  I   love   you  \") == \"  I   e l\
    \ o o v   y u  \")", "    local t = {}\n    local result = {}\n    local j = 1\n\
    \    for i in string.gmatch(s, \"%S+\") do\n        t[j] = i\n        j = j +\
    \ 1\n    end\n    for i,v in ipairs(t) do\n        result[i] = string.gsub(v,\
    \ \"%a\", function(x) return string.char(tonumber(string.byte(x))) end)\n    end\n\
    \    return table.concat(result, \" \")\nend", "    -- Your code goes here\nend",
  "    local result = {}\n    for word in s:gmatch(\"%S+\") do\n        table.insert(result,\
    \ word:gsub(\".\", function(c)\n            return string.char(tonumber(string.byte(c)))\n\
    \        end))\n    end\n    return table.concat(result, \" \")\nend", "    return\
    \ (s:gsub('(%S+)', function(m) return m:gsub('.', '%%1') end))\nend", "\treturn\
    \ s\nend", "    local l=split(s)\n    local ans=\"\"\n    for _,v in ipairs(l)\
    \ do\n        local b=\"\"\n        for _,v2 in ipairs(split(v)) do\n        \
    \    b=b..v2\n        end\n        ans=ans..sort(b)..\" \"\n    end\n    return\
    \ ans\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
