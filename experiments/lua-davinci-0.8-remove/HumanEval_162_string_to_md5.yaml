name: HumanEval_162_string_to_md5
language: lua
prompt: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If 'text'\
  \ is an empty string, return None.\nlocal function string_to_md5(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
  \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
  \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B C'),\
  \ '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
  \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if text and #text > 0 then\n        return md5.sumhexa(text)\n\
    \    end\n    return nil\nend", "    if text == nil or text == '' then\n     \
    \   return nil\n    end\n    return md5.sumhexa(text)\nend", "  if not text or\
    \ text == \"\" then\n    return nil\n  end\n  return md5.sumhexa(text)\nend",
  "    if is_empty(text) then\n        return nil\n    end", "    if text == nil or\
    \ text == '' then\n        return nil\n    end\n    return crypto.digest('md5',\
    \ text)\nend", "  if text == nil or text == '' then\n    return nil\n  end\n \
    \ local md5text = md5.sumhexa(text)\n  return md5text\nend", "    -- If 'text'\
    \ is an empty string, return None.\n    if text == nil or text == '' then\n  \
    \      return nil\n    end", "    -- Check if text is empty\n    if text == \"\
    \" then\n        return nil\n    end", "  if not text or text == \"\" then\n \
    \   return nil\n  end\n  return md5.sumhexa(text)\nend", "    if not text or #text\
    \ == 0 then\n        return nil\n    end\n    local result = md5.sumhexa(text)\n\
    \    return result\nend", "    if not text or text == \"\" then\n        return\
    \ nil\n    end\n    local text_md5 = ngx.md5(text)\n    local encoded_text_md5\
    \ = ngx.encode_base64(text_md5)\n    return (string.gsub(encoded_text_md5, \"\
    %s+\", \"\"))\nend", "  if not text or text == \"\" then\n    return nil\n  end\n\
    \  return ngx.md5(text)\nend", "    if not text or text == \"\" then\n       \
    \ return nil\n    end\n    return md5.sumhexa(text)\nend", "\tif text == nil or\
    \ text == '' then\n\t\treturn nil\n\tend\n\treturn md5.sumhexa(text)\nend", " \
    \   if text == \"\" then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "    if not text or #text == 0 then\n        return nil\n    end\n    local\
    \ md5 = crypto.digest.new(\"md5\")\n    md5:update(text)\n    return md5:final()\n\
    end", "    if text ~= nil and text ~= '' then\n        return hex_encode(md5(text))\n\
    \    end\n    return nil\nend", "\tif text == \"\" then\n\t\treturn nil\n\tend\n\
    \tlocal hexify = function(x)\n\t\treturn string.format(\"%02x\", x)\n\tend\n\t\
    local md5_hash = crypto.evp.digest(\"md5\", text)\n\tlocal str = \"\"\n\tfor i\
    \ = 1, #md5_hash do\n\t\tstr = str .. hexify(md5_hash:byte(i))\n\tend\n\treturn\
    \ str\nend", "    if isempty(text) then\n        return nil\n    end\n    return\
    \ md5.sumhexa(text)\nend", "    if text == nil or text == '' then\n        return\
    \ nil\n    end\n    return crypto.toHex(crypto.digest('md5', text))\nend", " \
    \   if text == \"\" then\n        return None\n    end\n    local s = md5.sumhexa(text)\n\
    \    return s\nend", "    if text == \"\" then\n        return None\n    end\n\
    \    return md5.sumhexa(text)\nend", "  if text == \"\" then\n    return nil\n\
    \  end\n  return md5.sumhexa(text)\nend", "  if text == \"\" then\n    return\
    \ nil\n  end\n  local alg = require \"md5\"\n  return alg.sumhexa(text)\nend",
  "    if not text or text == \"\" then\n        return nil\n    end\n    return ngx.md5(text)\n\
    end", "    local text_hash = ngx.md5(text)\n    if not text_hash then\n      \
    \  return nil\n    end\n    return text_hash\nend", "  if not text or #text ==\
    \ 0 then\n    return nil\n  end\n  return md5.sumhexa(text)\nend", "    if text\
    \ == nil or text == '' then\n        return nil\n    end\n    local h = md5.sumhexa(text)\n\
    \    return h\nend", "  if not is_empty(text) then\n    local text_md5 = md5.sumhexa(text)\n\
    \    return text_md5\n  end\nend", "    if text == nil or text == '' then\n  \
    \      return nil\n    end\n    return md5.sumhexa(text)\nend", "    if type(text)\
    \ ~= \"string\" or text == \"\" then\n        return nil\n    end\n    return\
    \ md5.sumhexa(text)\nend", "    if text == \"\" then\n        return nil\n   \
    \ end\n    -- To ensure this function is commutative, use the lowercase equivalent\n\
    \    -- of the provided string.\n    local lowercase_text = lower(text)\n    return\
    \ md5.sumhexa(lowercase_text)\nend", "\tif text == \"\" then\n\t\treturn nil\n\
    \tend\n\t\n\tlocal text_md5 = md5.sumhexa(text)\n\treturn text_md5\nend", "  if\
    \ not text or text == \"\" then\n    return nil\n  end\n  return ngx.md5(text)\n\
    end", "    assert(type(text) == \"string\")\n    if text == \"\" then\n      \
    \  return nil\n    end\n    local md5 = crypto.md5(text)\n    return md5\nend",
  "    local md5 = crypto.digest.new(\"md5\")\n    local out = md5:final(text)\n \
    \   if #out > 0 then\n        return out\n    else\n        return None\n    end\n\
    end", "    if not text or text == \"\" then\n        return nil\n    end\n   \
    \ return crypto.digest(\"md5\", text)\nend", "    if text == nil or text == ''\
    \ then\n        return nil\n    end\n    return md5.sumhexa(text)\nend", "   \
    \ if text == nil or text == '' then\n        return nil\n    end\n    return ngx.md5(text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  return libcrypto.md5(text)\nend", "\tif not text or text == \"\" then\n\t\t\
    return nil\n\tend\n\t\n\tlocal text = text:gsub(\".\", {\n\t\t[\"\\n\"] = \"\\\
    \\n\",\n\t\t[\"\\r\"] = \"\\\\r\",\n\t\t[\"\\t\"] = \"\\\\t\",\n\t\t[\"\\b\"]\
    \ = \"\\\\b\",\n\t\t[\"\\f\"] = \"\\\\f\",\n\t\t[\"\\\"\"] = \"\\\\\\\"\",\n\t\
    \t[\"\\\\\"] = \"\\\\\\\\\",\n\t\t[\"/\"] = \"\\\\/\"\n\t})\n\t\n\treturn md5.sumhexa(text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  local text_to_hash = text", "    if #text > 0 then\n        return crypto.digest('md5',\
    \ text)\n    end\n    return nil\nend", "    local text = assert(text, 'input\
    \ text is not provided')\n    if text == '' then\n        return nil\n    end\n\
    \    return md5.sumhexa(text)\nend", "  if text and text ~= \"\" then\n    return\
    \ md5.sumhexa(text)\n  end\n  return nil\nend", "\tif not text or text == \"\"\
    \ then\n\t\treturn nil\n\tend\n\treturn md5.sumhexa(text)\nend", "    if text\
    \ ~= nil and text ~= '' then\n        return ndk.set_var.set_md5(text)\n    end\n\
    \    return nil\nend", "    if #text == 0 then\n        return nil\n    end\n\
    \    local text_md5 = md5.sumhexa(text)\n    return text_md5\nend", "    if text\
    \ == nil or text == '' then\n        return nil\n    end\n    return string.lower(ngx.md5(text))\n\
    end", "    if (text == nil or #text == 0) then\n        return nil\n    end",
  "  if text == nil or text == '' then\n    return nil\n  end\n  return ngx.md5(text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  local str = ngx.md5(text)\n    return str\nend", "    if text == nil or text\
    \ == '' then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n   \
    \ return md5\nend", "  if text == nil or text == '' then\n    return nil\n  end\n\
    \  local h = md5.new()\n  h:update(text)\n  return h:hexdigest()\nend", "    if\
    \ not text or text == \"\" then\n        return nil\n    end\n    return crypto.md5(text)\n\
    end", "  if text == nil or text == '' then\n    return nil\n  end\n  return ngx.md5(text)\n\
    end", "\tif not text or text == \"\" then\n\t\treturn nil\n\tend\n\treturn md5.sumhexa(text)\n\
    end", "    if text == \"\" then\n        return nil\n    end\n    local md5 =\
    \ sformat(\"%s\", md5_bin(text))\n    return md5\nend", "  if text == nil or text\
    \ == '' then\n    return nil\n  end\n  return ngx.md5(text)\nend", "    if string.len(text)\
    \ == 0 then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n    return\
    \ md5\nend", "    if text == nil or text == '' then\n        return nil\n    end\n\
    \    return ngx.md5(text)\nend", "  if text then\n    return md5.sumhexa(text)\n\
    \  end\n  return nil\nend", "    if text == \"\" then\n        return nil\n  \
    \  end\n    return os.capture(\"echo -n \" .. text .. \" | md5sum | awk '{print\
    \ $1}'\")\nend", "    if text == nil or type(text) ~= \"string\" or text == \"\
    \" then\n        return nil\n    end", "    -- If 'text' is an empty string, return\
    \ None.\n    if not text or text == \"\" then\n        return nil\n    end", "\t\
    if text == \"\" then\n\t\treturn nil\n\tend\n\tlocal md5 = resty_md5:new()\n\t\
    md5:update(text)\n\treturn md5:final()\nend", "\tif text == nil or text == ''\
    \ then\n\t\treturn nil\n\tend\n\treturn crypto.digest('md5', text)\nend", "  if\
    \ not text or text == \"\" then\n    return nil\n  end\n  local text = text\n\
    \  if type(text) == \"string\" then\n    return md5.sumhexa(text)\n  end\n  local\
    \ error_msg = \"ERROR: string_to_md5() required a string, got \" .. type(text)\n\
    \  assert(error_msg)\nend", "  if text == \"\" then\n    return nil\n  end\n \
    \ return crypto.digest(\"md5\", text)\nend", "    if type(text) ~= \"string\"\
    \ or text == \"\" then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "\tif text == \"\" then\n\t\treturn nil\n\tend\n\treturn ngx.md5(text)\n\
    end", "  if text == nil or text == '' then\n    return nil\n  end\n  local text_byte\
    \ = tostring(text)\n  local text_md5 = ngx.md5(text_byte)\n  return text_md5\n\
    end", "    if not text or text == \"\" then\n        return nil\n    end\n   \
    \ return ngx.md5(text)\nend", "    if text and #text > 0 then\n        return\
    \ md5.sumhexa(text)\n    end\n    return nil\nend", "  if text == \"\" then\n\
    \    return nil\n  end\n  local hash = mcrypt.md5(text)\n  return hash\nend",
  "  if not text or text == \"\" then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "    if #text == 0 then\n        return nil\n    end\n  \
    \  return text_md5.digest(text)\nend", "    if text == nil or text == '' then\n\
    \        return nil\n    end\n    local hash = crypto.digest('md5', text)\n  \
    \  return hash\nend", "  if text == nil or text == '' then\n    return nil\n \
    \ end\n  return md5.sumhexa(text)\nend", "    local md5 = require('utils.crypto').md5\n\
    \    local text_md5 = text and md5(text) or nil\n    return text_md5\nend", "\t\
    if (text == nil or text == '') then\n\t\treturn nil\n\tend", "    if not text\
    \ or text == \"\" then\n        return nil\n    end\n    return io.popen('printf\
    \ \"' .. text .. '\" | md5sum'):read(\"*all\"):match(\"^([^%s]+)\"):lower()\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  return string.upper(ngx.md5(text))\nend", "  assert(type(text) == \"string\"\
    )\n  if text == \"\" then\n    return nil\n  end\n  local md5_bin = ngx.md5(text)\n\
    \  local md5_hex = ngx.encode_base64(md5_bin)\n  return md5_hex\nend", "\tlocal\
    \ text = text or ''\n\tif text == '' then\n\t\treturn nil\n\tend\n\tlocal str\
    \ = ngx.md5(text)\n\treturn str\nend", "  -- Return None if 'text' is an empty\
    \ string.\n  if string.len(text) == 0 then\n    return nil\n  end", "\tif text\
    \ == nil or text == '' then\n\t\treturn nil\n\tend\n\tlocal resty_md5 = require('resty.md5')\n\
    \tlocal md5 = resty_md5:new()\n\tmd5:update(text)\n\tlocal digest = md5:final()\n\
    \treturn _M.to_hex(digest)\nend", "    if text == nil or text == '' then\n   \
    \     return nil\n    end\n    return get_md5(text)\nend", "    -- If 'text' is\
    \ an empty string, return None.\n    if (text == nil or text == '') then\n   \
    \     return nil\n    end", "  if text ~= nil and text ~= '' then\n    local md5\
    \ = openssl.digest.get('md5')\n    local digest = md5:final(text)\n    return\
    \ digest\n  end\n  return nil\nend", "    local result\n    if text ~= nil and\
    \ text ~= '' then\n        local md5_object = md5.new()\n        md5_object:update(text)\n\
    \        result = md5_object:digest()\n    end\n    return result\nend", "   \
    \ -- exit early if input is empty string\n    if string.len(text) == 0 then\n\
    \        return\n    end", "    local utils = require \"utils\"\n    if text ==\
    \ nil or text == \"\" then\n        return nil\n    end\n    local md5_text =\
    \ utils.md5(text)\n    return md5_text\nend", "    assert(type(text) == \"string\"\
    )\n    if text == \"\" then\n        return nil\n    end\n    return ngx.md5(text)\n\
    end", "    if #text > 0 then\n        return md5.sumhexa(text)\n    end\n    return\
    \ None\nend", "    if text == \"\" then\n        return nil\n    end\n    return\
    \ Digest.md5(text)\nend", "    if text == \"\" then\n        return nil\n    end\n\
    \    return md5.sumhexa(text)\nend", "    if text == nil or text == '' then\n\
    \        return nil\n    end\n    return ngx.md5(text)\nend", "    if not text\
    \ or #text == 0 then\n        return nil\n    end\n    return ngx.md5(text)\n\
    end", "    if not text or text == \"\" then\n        return nil\n    end\n   \
    \ local result = md5.sumhexa(text)\n    return result\nend", "  if text == nil\
    \ or text == '' then\n    return nil\n  end\n  return md5.sumhexa(text)\nend",
  "  if type(text) ~= \"string\" or text == \"\" then\n    return nil\n  end\n  return\
    \ ngx.md5(text)\nend", "  if is_empty(text) then\n    return nil\n  end", "\t\
    if not text or not text:match(\"%w\") then\n\t\treturn nil\n\tend\n\treturn md5.sumhexa(text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  local resty_md5 = require 'resty.md5'\n    local resty_str = require 'resty.string'\n\
    \    local md5 = resty_md5:new()\n    md5:update(text)\n    local digest = md5:final()\n\
    \    return resty_str.to_hex(digest)\nend", "    if not text or text == \"\" then\n\
    \        return nil\n    end\n    return md5.sumhexa(text)\nend", "    if text\
    \ == nil or text == '' then\n        return nil\n    end\n    return m_md5.sumhexa(text)\n\
    end", "    if text == \"\" then\n        return nil\n    end\n    return lutil.md5(text)\n\
    end", "    if (text == nil or text == '') then\n        return nil\n    end",
  "    if text == nil or text == '' then\n        return nil\n    end\n    local text_md5\
    \ = crypt.md5(text)\n    return crypt.hexencode(text_md5)\nend", "    if not text\
    \ or text == \"\" then\n        return nil\n    end\n    return crypto.digest(\"\
    md5\", text)\nend", "    if text == \"\" then\n        return None\n    end\n\
    \    local md5 = require 'md5'\n    return md5.sumhexa(text)\nend", "    if not\
    \ text or #text == 0 then\n        return nil\n    end\n    return (ngx.md5(text))\n\
    end", "    if text ~= nil and text ~= '' then\n        return mime.b64(ngx.md5(text))\n\
    \    end\n    return nil\nend", "    if text == nil or text == '' then\n     \
    \   return None\n    end\n    local text_md5 = md5(text)\n    return text_md5\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  return ngx.md5(text)\nend", "\tif text == nil or text == '' then\n\t\treturn\n\
    \tend\n\treturn md5(text):hexdigest()\nend", "\tif text ~= nil and text ~= ''\
    \ then\n\t\treturn ngx.md5(text)\n\telse\n\t\treturn nil\n\tend\nend", "    if\
    \ text ~= nil and text ~= '' then\n        return ngx.md5(text)\n    end\n   \
    \ return nil\nend", "  if text then\n    -- Always return the same hash for a\
    \ given string.\n    local lower_text = text:lower()\n    local hex_md5 = lower_text_to_md5[lower_text]\n\
    \    if not hex_md5 then\n      hex_md5 = md5.sumhexa(lower_text)\n      lower_text_to_md5[lower_text]\
    \ = hex_md5\n    end\n    return hex_md5\n  end\nend", "    if text == nil or\
    \ #text <= 0 then\n        return nil\n    end", "  if text == nil or text ==\
    \ '' then\n    return nil\n  end\n  return ngx.md5(text)\nend", "    local str\
    \ = text\n    if not str or str == \"\" then\n        return nil\n    end\n  \
    \  local md5 = crypto.digest(\"md5\", str)\n    return md5\nend", "  if type(text)\
    \ ~= \"string\" or text == \"\" then\n    return nil\n  end\n  local resty_md5\
    \ = require \"resty.md5\"\n  local md5 = resty_md5:new()\n  if not md5 then\n\
    \    return nil\n  end\n  md5:update(text)\n  local digest = md5:final()\n  local\
    \ str = require \"resty.string\"\n  return str.to_hex(digest)\nend", "    if text\
    \ == \"\" then\n        return nil\n    end\n    return ngx.md5(text)\nend", " \
    \ if text == nil or text == '' then\n    return nil\n  end\n  local text_md5 =\
    \ ngx.md5(text)\n  return text_md5\nend", "  if text == nil or text == '' then\n\
    \    return nil\n  end\n  return md5.sumhexa(text)\nend", "    if not text or\
    \ text == \"\" then\n        return None\n    end\n    local md5_value = ngx.md5(text)\n\
    \    return md5_value\nend", "    if text == \"\" then\n        return\n    end\n\
    \    local n = ngx.md5_bin(text)\n    local hash = (string.gsub(ngx.encode_base64(n),\
    \ \"\\n\", \"\"))\n    hash = (string.gsub(hash, \"=\", \"\"))\n    return hash\n\
    end", "    if is_empty(text) then\n        return nil\n    end", "    if text\
    \ == nil or text == '' then\n        return nil\n    end\n    return md5.sumhexa(text)\n\
    end", "  if text == \"\" then\n    return nil\n  end\n  local text_md5 = md5.sumhexa(text)\n\
    \  return text_md5\nend", "\tif text == nil or text == '' then\n\t\treturn nil\n\
    \tend\n\tlocal text_md5 = nil\n\tif __string_to_md5[text] ~= nil then\n\t\ttext_md5\
    \ = __string_to_md5[text]\n\telse\n\t\tlocal md5_gen = crypto.evp.new('md5')\n\
    \t\tmd5_gen:update(text)\n\t\ttext_md5 = md5_gen:digest()\n\t\t__string_to_md5[text]\
    \ = text_md5\n\tend\n\treturn text_md5\nend", "    -- Return None if 'text' is\
    \ an empty string.\n    if not text or text == \"\" then\n        return nil\n\
    \    end", "    if type(text) ~= \"string\" or text == \"\" then\n        return\
    \ nil\n    end\n    return hash_func(text)\nend", "    if not text or text ==\
    \ \"\" then\n        return nil\n    end\n    return md5.sumhexa(text)\nend",
  "    if not text or len(text) < 1 then\n        return nil\n    end\n    -- Create\
    \ the md5 object and convert the text to md5.\n    local md5 = md5.new()\n   \
    \ md5:update(text)\n    return md5:digest()\nend", "  if text and text ~= \"\"\
    \ then\n    local md5_ctx = md5_new()\n    md5_update(md5_ctx, text)\n    return\
    \ md5_final(md5_ctx)\n  end\nend", "  if type(text) ~= \"string\" or text == \"\
    \" then\n    return nil\n  end\n  return digest.md5(text):hex()\nend", "    assert(type(text)\
    \ == \"string\", \"Invalid input! Must be string.\")\n    if text == \"\" then\n\
    \        return nil\n    end\n    return md5.sumhexa(text)\nend", "    if text\
    \ == \"\" then\n        return nil\n    end\n    --\n    return mds.md5sumhexa(text)\n\
    end", "    if text then\n        return md5.sumhexa(text)\n    end\n    return\
    \ nil\nend", "  if text ~= \"\" then\n    return ngx.md5(text)\n  end\n  return\
    \ nil\nend", "  if text ~= nil and #text > 0 then\n    return md5.sumhexa(text)\n\
    \  end\n  return nil\nend", "  if not text or text == \"\" then\n    return\n\
    \  end\n  local text_md5 = ngx.md5(text)\n  return text_md5\nend", "    if text\
    \ == nil or text == '' then\n        return nil\n    end\n    local md5 = require('md5')\n\
    \    local msg = md5.sumhexa(text)\n    return msg\nend", "  if not text or text\
    \ == \"\" then\n    return nil\n  end\n  if not md5 then\n    md5 = require(\"\
    md5\")\n  end\n  return md5.sumhexa(text)\nend", "    if text and text ~= \"\"\
    \ then\n        local raw_md5 = md5.sumhexa(text)\n        return string.lower(raw_md5)\n\
    \    end\n    return nil\nend", "\tif text and text ~= \"\" then\n\t\treturn crypto.digest(\"\
    md5\", text)\n\tend\nend", "  if text == \"\" then\n    return nil\n  end\n  return\
    \ md5.sumhexa(text)\nend", "\tif type(text) ~= \"string\" or text == \"\" then\n\
    \t\treturn nil\n\tend\n\tlocal md5 = require(\"md5\")\n\treturn md5.sumhexa(text)\n\
    end", "  if text == \"\" then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if text then\n        return md5.sumhexa(text)\n    end\n    return\
    \ nil\nend", "  if string.len(text) == 0 then\n    return nil\n  end\n  return\
    \ ngx.md5(text)\nend", "  if text == nil or text == '' then\n    return nil\n\
    \  end\n  local function helper(chars)\n    local result = md5.sumhexa(chars)\n\
    \    return result\n  end\n  local result = helper(text)\n  return result\nend",
  "  if text == \"\" then\n    return nil\n  end\n  local digest = md5.sumhexa(text)\n\
    \  return digest\nend", "    if text == \"\" then\n        return nil\n    end\n\
    \    return rspamd_cryptobox_hash.create_specific('md5', text)\nend", "    if\
    \ (not text) or (text == \"\") then\n        return nil\n    end\n    return ngx.md5(text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  local text_len = #text\n    local hash = crypto.evp.digest('md5', text, text_len)\n\
    \    if hash == nil then\n        return nil\n    end\n    return bin.hex(hash)\n\
    end", "  if not text or text == \"\" then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if text == nil or text == '' then\n        return nil\n    end\n  \
    \  return md5.sumhexa(text)\nend", "\t-- Check if 'text' is empty.\n\tif not text\
    \ or not text:len() > 0 then\n\t\treturn nil\n\tend", "  if not text or text ==\
    \ \"\" then\n    return None\n  end\n  -- Compute the md5 hash of 'text'.\n  local\
    \ text_md5 = md5.sumhexa(text)\n  return Some(text_md5)\nend", "    if text ==\
    \ \"\" then\n        return nil\n    end\n    return lua_util.md5_hex(text)\n\
    end", "  if not text or text == \"\" then\n    return nil\n  end\n  local md5_token\
    \ = ngx.md5(text)\n  return md5_token\nend", "  if text == nil or text == '' then\n\
    \    return nil\n  end\n  return md5.sumhexa(text)\nend", "    if text == nil\
    \ or type(text) ~= \"string\" or text == \"\" then\n        return nil\n    end",
  "    if not text or text == \"\" then\n        return nil\n    end\n    return mdcache[text]\
    \ or md5.sumhexa(text)\nend", "    if isEmpty(text) then\n        return None\n\
    \    end\n    return ngx.md5(text)\nend", "    local md5 = _M.md5\n    if not\
    \ md5 then\n        return nil\n    end", "\tif text == nil or text == '' then\n\
    \t\treturn nil\n\tend\n\treturn ngx.md5(text)\nend", "    if not text or text\
    \ == \"\" then\n        return nil\n    end\n    return md5.sumhexa(text)\nend",
  "    -- if empty string, return nothing\n    if (text == nil or text == '') then\n\
    \        return nil\n    end", "    if not text or text == \"\" then\n       \
    \ return nil\n    end\n    return md5.sumhexa(text)\nend", "    if text == nil\
    \ or text == '' then\n        return nil\n    end\n    return ngx.md5(text)\n\
    end", "  if is_empty(text) then\n    return nil\n  end", "    if not text or text\
    \ == \"\" then\n        return nil\n    end\n    return ngx.md5(text)\nend", " \
    \   -- text must be a non-empty string.\n    if not is_string(text) or is_empty(text)\
    \ then\n        return nil\n    end", "  if not text or text == \"\" then\n  \
    \  return nil\n  end\n  -- Remove '\\n' from string.\n  local line_feed_char =\
    \ '\\n'\n  local new_text = string.gsub(text, line_feed_char, \"\")\n  -- Compute\
    \ md5 hash equivalent string.\n  local md5 = md5.sumhexa(new_text)\n  return md5\n\
    end", "  if not text or text == \"\" then\n    return nil\n  end\n  return ngx.md5(text)\n\
    end", "    if not text or #text == 0 then\n        return nil\n    end\n    return\
    \ ngx.md5(text)\nend", "    if is_empty(text) then\n        return None\n    end\n\
    \    return md5.sumhexa(text)\nend", "  if not text or text == \"\" then\n   \
    \ return nil\n  end\n  local md5 = md5.sumhexa(text)\n  if md5 == \"d41d8cd98f00b204e9800998ecf8427e\"\
    \ then\n    -- If there is no hash, create the \"empty\" hash.\n    return nil\n\
    \  end\n  return md5\nend", "    if text == nil or text == '' then\n        return\
    \ nil\n    end\n    local md5 = crypto.digest('md5', text)\n    return md5\nend",
  "    if text == nil or text == '' then\n        return nil\n    end\n    local text_md5\
    \ = ngx.md5(text)\n    return text_md5\nend", "  if text == nil or text == ''\
    \ then\n    return nil\n  end\n  return ngx.md5(text)\nend", "    if text then\n\
    \        if text ~= \"\" then\n            return md5.sumhexa(text)\n        end\n\
    \    end\n    return nil\nend", "  if text == \"\" then\n    return nil\n  end\n\
    \  return ngx.md5(text)\nend", "    if is_empty(text) then\n        return nil\n\
    \    end", "    if (text == \"\") then\n        return nil\n    end\n    return\
    \ libmd5.sumhexa(text)\nend", "    if text == nil or text == '' then\n       \
    \ return nil\n    end\n    local md5 = require \"md5\"\n    return md5.sumhexa(text)\n\
    end", "  if not text or text == \"\" then\n    return nil\n  end\n  return md5.sumhexa(text)\n\
    end", "    if type(text) ~= \"string\" or #text == 0 then\n        return nil\n\
    \    end", "    if text == nil or text == '' then\n        return nil\n    end\n\
    \    return md5.sumhexa(text)\nend", "  if text == nil or text == '' then\n  \
    \  return nil\n  end\n  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return\
    \ string.sub(md5, 0, 31)\n  end\n  return nil\nend", "    assert(text and type(text)\
    \ == \"string\")\n    if text == \"\" then\n        return nil\n    end\n    return\
    \ ngx.md5(text)\nend", "    if text == nil or text == '' then\n        return\
    \ nil\n    end\n    return ffi.string(md5.md5(text, #text, nil), 16)\nend", "\t\
    if text == nil or text == '' then\n\t\treturn nil\n\tend\n\treturn mhf.hash_md5(text)\n\
    end", "  if string.len(text) == 0 then\n    return nil\n  end\n  local digest\
    \ = crypto.digest(\"md5\", text)\n  return digest\nend", "  if not text or text\
    \ == \"\" then\n    return nil\n  end\n  return md5.sumhexa(text)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
