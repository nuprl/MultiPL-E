language: lua
name: HumanEval_16_count_distinct_characters
results:
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  for character in string:gmatch(\".\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnna5wzum.lua:15:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpnna5wzum.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local distinct_characters = {}\n    for char in string:gmatch('.') do\n \
    \       if not distinct_characters[char:lower()] then\n            distinct_characters[char:lower()]\
    \ = true\n        end\n    end\n    return distinct_characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbeu1wb1m.lua:15:\
    \ expected: 0, actual: {}\nstack traceback:\n\t/tmp/tmpbeu1wb1m.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local n = 0\n    local m = {}\n    for i=1,#string do\n        local c =\
    \ string:sub(i,i)\n        if m[c] == nil then\n            m[c] = 1\n       \
    \     n = n + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp60jxstqw.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp60jxstqw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    local count = 0\n    for char in string:gmatch('.')\
    \ do\n        if not chars[char] then\n            chars[char] = true\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe490p85q.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpe490p85q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal chars = 0\n\tfor c in string:gmatch(\".\") do\n\t\tif chars:find(c:lower())\
    \ == nil then\n\t\t\tchars = chars + 1\n\t\tend\n\tend\n\treturn chars\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpozb388hk.lua:5:\
    \ attempt to index a number value (local 'chars')\nstack traceback:\n\t/tmp/tmpozb388hk.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpozb388hk.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local letters = {}\n    for i = 1, #string do\n        if not letters[string.sub(string,\
    \ i, i)] then\n            letters[string.sub(string, i, i)] = true\n        end\n\
    \    end\n    return #letters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63etshsu.lua:16:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp63etshsu.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local n = 0\n  local t = {}\n  for i = 1, string.len(string) do\n    local\
    \ c = string.sub(string, i, i)\n    local uc = string.upper(c)\n    if not t[uc]\
    \ then\n      t[uc] = true\n      n = n + 1\n    end\n  end\n  return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal occurrences = {}\n\tlocal number_of_distinct_characters = 0\n\tfor char\
    \ in string:gmatch(\".-\") do\n\t\tif not occurrences[char:lower()] then\n\t\t\
    \toccurrences[char:lower()] = true\n\t\t\tnumber_of_distinct_characters = number_of_distinct_characters\
    \ + 1\n\t\tend\n\tend\n\treturn number_of_distinct_characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8nshujz.lua:17:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpd8nshujz.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local all_characters = {}\n    for word in string:gmatch(\"%l+\") do\n  \
    \      local characters = {}\n        for char in word:gmatch(\".\") do\n    \
    \        if not characters[char] then\n                characters[char] = true\n\
    \                if not all_characters[char] then\n                    all_characters[char]\
    \ = true\n                end\n            end\n        end\n    end\n    return\
    \ count_keys(all_characters)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplhb0ondg.lua:15:\
    \ attempt to call a nil value (global 'count_keys')\nstack traceback:\n\t/tmp/tmplhb0ondg.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmplhb0ondg.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal num_distinct_characters = 0\n\tlocal hash = {}\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc7at8sgu.lua:16: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  local count = 0\n  for i = 1, #string do\n    if not chars[string:sub(i,\
    \ i)] then\n      chars[string:sub(i, i)] = true\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dbhpe92.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp2dbhpe92.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal hash = {}\n\tstring:gsub(\".\", function(c) hash[c:lower()] = true end)\n\
    \treturn #hash\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw07idmvg.lua:12:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpw07idmvg.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \t-- The Lua standard library offers a nice way to do this with 'string.lower'\n\
    \tlocal lower = string.lower(string)\n\t-- We also need a table to keep track\
    \ of our characters\n\tlocal characters = {}\n\t-- We'll go through each character\
    \ in our string, one at a time\n\tfor index, character in pairs(lower) do\n\t\t\
    -- If we don't know about the character yet, then we want to add it to our table\n\
    \t\tif not characters[character] then\n\t\t\tcharacters[character] = true\n\t\t\
    end\n\tend\n\t-- We can count the number of distinct characters by counting how\
    \ many are in our table\n\tlocal count = 0\n\tfor character, _ in pairs(characters)\
    \ do\n\t\tcount = count + 1\n\tend\n\t-- And then we can return the count\n\t\
    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2bkmxen.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpi2bkmxen.lua:8: in local 'candidate'\n\t/tmp/tmpi2bkmxen.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local unique_characters = {}\n    local count = 0\n    for char in string:gmatch(\"\
    .\") do\n        if not unique_characters[char] then\n            unique_characters[char]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf6fpzk6f.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpf6fpzk6f.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  -- Store the number of unique characters\n  local unique_characters = 0\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgtprm7gk.lua:16: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal hash = {}\n\tfor i = 1, #string do\n\t\tlocal c = string:sub(i,\
    \ i)\n\t\tlocal u = c:upper()\n\t\tif not hash[u] then\n\t\t\thash[u] = true\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string:gmatch(\".\") do\n        chars[c:lower()]\
    \ = true\n    end\n    return table.length(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8mpky7wx.lua:7:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmp8mpky7wx.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8mpky7wx.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local char_map = {}\n  local current_chars = 0\n  for i = 1, #string do\n \
    \   if not char_map[string:sub(i, i)] then\n      char_map[string:sub(i, i)] =\
    \ true\n      current_chars = current_chars + 1\n    end\n  end\n  return current_chars\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9drbsdex.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp9drbsdex.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal exist = {}\n\tlocal counter = 0\n\tfor char in string:gmatch(\".\") do\n\
    \t\tif not exist[char:lower()] then\n\t\t\texist[char:lower()] = true\n\t\t\t\
    counter = counter + 1\n\t\tend\n\tend\n\treturn counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local data = {\n        count = 0,\n        characters = {}\n    }\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdkgoeeml.lua:18: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal unique_characters = {}\n\tlocal unique_count = 0\n\tfor i = 1, string.len(string)\
    \ do\n\t\tlocal char = string.sub(string, i, i)\n\t\tif not unique_characters[char]\
    \ then\n\t\t\tunique_characters[char] = true\n\t\t\tunique_count = unique_count\
    \ + 1\n\t\tend\n\tend\n\treturn unique_count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttap2z4m.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpttap2z4m.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal distinct_characters = {}\n\tlocal count = 0\n\tfor index = 1, string.len(string)\
    \ do\n\t\tlocal character = string.sub(string, index, index)\n\t\tif not distinct_characters[character]\
    \ then\n\t\t\tdistinct_characters[character] = true\n\t\t\tcount = count + 1\n\
    \t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2j4u99c9.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp2j4u99c9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local result = {}\n    for i = 1, #string do\n        if not result[string.lower(string[i])]\
    \ then\n            result[string.lower(string[i])] = true\n        end\n    end\n\
    \    return #result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu2i5803r.lua:5:\
    \ bad argument #1 to 'lower' (string expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpu2i5803r.lua:5: in local 'candidate'\n\t/tmp/tmpu2i5803r.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for _, c in ipairs(utils.split(string, \"\")) do\n\
    \        chars[c:lower()] = true\n    end\n    return _.size(chars)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_84v9ah.lua:4:\
    \ attempt to index a nil value (global 'utils')\nstack traceback:\n\t/tmp/tmp0_84v9ah.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp0_84v9ah.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local distinct_characters = {}\n    local distinct_characters_count = 0\n\
    \    for character in string:gmatch(\"%S\") do\n        if distinct_characters[character:lower()]\
    \ == nil then\n            distinct_characters[character:lower()] = true\n   \
    \         distinct_characters_count = distinct_characters_count + 1\n        end\n\
    \    end\n    return distinct_characters_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpdlga8d.lua:21:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmphpdlga8d.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \t-- assert(type(string) == \"string\", \"string expected\")\n\tlocal seen = {}\n\
    \tfor _, character in ipairs(string:lower():split(\"\")) do\n\t\tseen[character]\
    \ = true\n\tend\n\tlocal distinct_characters = 0\n\tfor character, _ in pairs(seen)\
    \ do\n\t\tdistinct_characters = distinct_characters + 1\n\tend\n\treturn distinct_characters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4l8ho80p.lua:5:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp4l8ho80p.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp4l8ho80p.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local chars = { }\n  for char in string:gmatch(\".\") do\n    if char ~= \"\
    \ \" then\n      local char = char:lower()\n      chars[char] = true\n    end\n\
    \  end\n  return table.length(chars)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd0zfjl3a.lua:10:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpd0zfjl3a.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpd0zfjl3a.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal seen = {}\n\tfor char in each_character(string) do\n\t\tif not seen[char]\
    \ then\n\t\t\tseen[char] = true\n\t\tend\n\tend\n\treturn #seen\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8zk6gxul.lua:4:\
    \ attempt to call a nil value (global 'each_character')\nstack traceback:\n\t\
    /tmp/tmp8zk6gxul.lua:4: in local 'candidate'\n\t/tmp/tmp8zk6gxul.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for i = 1, string.len(string) do\n        local char\
    \ = string.sub(string, i, i)\n        if not chars[char] then\n            chars[char]\
    \ = true\n        end\n    end\n    return table.size(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpygjn46is.lua:10:\
    \ attempt to call a nil value (field 'size')\nstack traceback:\n\t/tmp/tmpygjn46is.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpygjn46is.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local seen = {}\n  for c in string:gmatch(\".\") do\n    seen[c:lower()] =\
    \ true\n  end\n  return count_map_keys(seen)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkidvug4u.lua:7:\
    \ attempt to call a nil value (global 'count_map_keys')\nstack traceback:\n\t\
    /tmp/tmpkidvug4u.lua:7: in local 'candidate'\n\t/tmp/tmpkidvug4u.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local chars_count = 0\n  local chars_table = {}\n  for ch in string:gmatch(\"\
    .\") do\n    local char = ch:lower()\n    if chars_table[char] == nil then\n \
    \     chars_table[char] = 1\n      chars_count = chars_count + 1\n    end\n  end\n\
    \  return chars_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal chars_dict = {}\n\tfor i = 1, string.len(string) do\n\t\tlocal char =\
    \ string.sub(string, i, i)\n\t\tchars_dict[char] = true\n\tend\n\treturn table.length(chars_dict)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2z3dz0hk.lua:8:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmp2z3dz0hk.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp2z3dz0hk.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    if string == nil then\n        return 0\n    end\n    local count = 0\n \
    \   local chars = {}\n    for i = 1, string.len(string) do\n        local ch =\
    \ string.sub(string, i, i)\n        if chars[ch] == nil then\n            count\
    \ = count + 1\n            chars[ch] = true\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnnke8nls.lua:23:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpnnke8nls.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    if type(string) ~= \"string\" then return end\n    local count = 0\n    local\
    \ hash = {}\n    for i = 1, #string do\n        local c = string:sub(i, i)\n \
    \       local char = string.lower(c)\n        if not hash[char] then\n       \
    \     hash[char] = true\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local seen = {}\n    local count = 0\n    for char in string:gmatch\".\"\
    \ do\n        if not seen[char] then\n            seen[char] = true\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplaz54cav.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmplaz54cav.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local counter = 0\n    local char_map = {}\n    for _, char in ipairs(string)\
    \ do\n        if not char_map[char] then\n            counter = counter + 1\n\
    \            char_map[char] = true\n        end\n    end\n    return counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn0h0b67.lua:18:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpfn0h0b67.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local distinct_chars = 0\n    -- the amount of characters will be the keys'\
    \ number of the table\n    local used_chars = {}\n    local character\n    for\
    \ i = 1, #string do\n        character = string:sub(i, i)\n        if not used_chars[character]\
    \ then\n            used_chars[character] = true\n            distinct_chars =\
    \ distinct_chars + 1\n        end\n    end\n    return distinct_chars\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo63lk5k_.lua:22:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpo63lk5k_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal characters = { }\n\tfor i = 1, #string do\n\t\tlocal character = string:sub(i,\
    \ i)\n\t\tif not table.contains(characters, character) then\n\t\t\ttable.insert(characters,\
    \ character)\n\t\tend\n\tend\n\treturn #characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphj357o5v.lua:6:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmphj357o5v.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmphj357o5v.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal characters = {}\n\tfor char in string:gmatch(\".\"\
    ) do\n\t\tif not characters[char:lower()] then\n\t\t\tcharacters[char:lower()]\
    \ = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    -- FIXME: for now, we assume string is not unicode.\n    -- In that case,\
    \ this should be just O(n)\n    -- (even if there are unicode characters, we could\
    \ still do O(n) by counting by\n    -- unicode category, but that would be quite\
    \ overkill).\n    local characters = {};\n    local result = 0;\n    for c in\
    \ string:gmatch('.') do\n        if not characters[c] then\n            characters[c]\
    \ = true;\n            result = result + 1;\n        end\n    end\n    return\
    \ result;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpim5in141.lua:23:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpim5in141.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal chars = {}\n\tfor i = 1, #string do\n\t\tlocal char = string:sub(i, i)\n\
    \t\tif not chars[char] then\n\t\t\tchars[char] = true\n\t\tend\n\tend\n\treturn\
    \ count_elements(chars)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_drifqo6.lua:10:\
    \ attempt to call a nil value (global 'count_elements')\nstack traceback:\n\t\
    /tmp/tmp_drifqo6.lua:10: in local 'candidate'\n\t/tmp/tmp_drifqo6.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \t-- Count distinct characters by adding characters in a set\n\tlocal char_set\
    \ = {}\n\tlocal count = 0\n\tstring:gsub(\".\", function(c)\n\t\tif not char_set[c]\
    \ then\n\t\t\tchar_set[c] = true\n\t\t\tcount = count + 1\n\t\tend\n\tend)\n\t\
    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp700i096u.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp700i096u.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal chars_in_string = {}\n\tfor char in string:gmatch(\"[%a]\") do\n\t\tchars_in_string[char:lower()]\
    \ = true\n\tend\n\treturn table.size(chars_in_string)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxu2b4oz3.lua:7:\
    \ attempt to call a nil value (field 'size')\nstack traceback:\n\t/tmp/tmpxu2b4oz3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpxu2b4oz3.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    local char_count = 0\n    for i=1, #string do\n   \
    \     local char = string:sub(i,i)\n        if not chars[char] then\n        \
    \    chars[char] = true\n            char_count = char_count + 1\n        end\n\
    \    end\n    return char_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp78czyn6l.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp78czyn6l.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    -- A set to keep track of distinct characters\n    local character_set =\
    \ {}\n    -- A variable to keep track of the distinct characters found\n    local\
    \ characters_found = 0\n    -- Iterate over all characters in the string\n   \
    \ for character in string:gmatch(\".\") do\n        -- If the character is not\
    \ already found then we add it to the character set and increment the characters\
    \ found variable\n        if not character_set[character] then\n            character_set[character]\
    \ = true\n            characters_found = characters_found + 1\n        end\n \
    \   end\n    -- Return the number of distinct characters found\n    return characters_found\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrs7d4vo.lua:24:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpqrs7d4vo.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal dict = {}\n\tlocal count = 0\n\tfor i=1, #string do\n\t\tlocal ch = string:sub(i,i)\n\
    \t\tif not dict[ch] then\n\t\t\tdict[ch] = true\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_0czcpe3.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp_0czcpe3.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local distinct_characters = {}\n    for char in string:gmatch(\"\
    [%z\\1-\\127\\194-\\244][\\128-\\191]*\") do\n        if distinct_characters[char]\
    \ == nil then\n            distinct_characters[char] = true\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputu3mqso.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmputu3mqso.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for c in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\128-\\\
    191]*\") do\n    if c:match(\"[a-zA-Z]\") then\n      chars[c:lower()] = true\n\
    \    end\n  end\n  return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpplprngy1.lua:16:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpplprngy1.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal index = 0\n\tlocal map = {}\n\tlocal char\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppf_8_uh3.lua:18: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  return get_unique_characters(string):len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp46_k4q0r.lua:3:\
    \ attempt to call a nil value (global 'get_unique_characters')\nstack traceback:\n\
    \t/tmp/tmp46_k4q0r.lua:3: in local 'candidate'\n\t/tmp/tmp46_k4q0r.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    for char in string:gmatch\".\"\
    \ do\n        if not seen[char] then\n            seen[char] = true\n        \
    \    count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8v8loa53.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp8v8loa53.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for letter in string:gmatch(\"%S\") do\n     \
    \   characters[letter:lower()] = true\n    end\n    return count_keys(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4v_qqlh7.lua:7:\
    \ attempt to call a nil value (global 'count_keys')\nstack traceback:\n\t/tmp/tmp4v_qqlh7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4v_qqlh7.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local unique_characters = {}\n    for i = 1, string.len(string) do\n    \
    \    local char = string.sub(string, i, i)\n        if not table.contains(unique_characters,\
    \ char) then\n            table.insert(unique_characters, char)\n        end\n\
    \    end\n    return #unique_characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvm22ywp.lua:6:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmphvm22ywp.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmphvm22ywp.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal t = {}\n\tfor i = 1, #string do\n\t\tt[string.sub(string, i, i)] = true\n\
    \tend\n\treturn #t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysge4fw7.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpysge4fw7.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal uniques = {}\n\tfor char in string:gmatch(\".\") do\n\t\tif not uniques[char]\
    \ then\n\t\t\tuniques[char] = true\n\t\tend\n\tend\n\treturn count_table_items(uniques)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpultu62ys.lua:9:\
    \ attempt to call a nil value (global 'count_table_items')\nstack traceback:\n\
    \t/tmp/tmpultu62ys.lua:9: in local 'candidate'\n\t/tmp/tmpultu62ys.lua:15: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local hash = {}\n  local distinct_chars = 0\n  for char in string:gmatch(\"\
    .\") do\n    if not hash[char] then\n      distinct_chars = distinct_chars + 1\n\
    \      hash[char] = true\n    end\n  end\n  return distinct_chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9djot0p.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpa9djot0p.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local str = string:lower()\n    local seen = {}\n    local count = 0\n  \
    \  for char in str:gmatch('.') do\n        if not seen[char] then\n          \
    \  seen[char] = true\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local hash = {}\n  local count = 0\n  local n = string.len(string)\n  for i\
    \ = 1, n do\n    local c = string.sub(string, i, i)\n    if hash[c] == nil then\n\
    \      hash[c] = 1\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp38ib21nu.lua:21:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp38ib21nu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, string.len(string) do\n        local\
    \ char = string.sub(string, i, i)\n        if not contains(characters, char) then\n\
    \            characters[#characters + 1] = char\n        end\n    end\n    return\
    \ #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpldi_qzlf.lua:6:\
    \ attempt to call a nil value (global 'contains')\nstack traceback:\n\t/tmp/tmpldi_qzlf.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpldi_qzlf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal check = {}\n\tfor i = 1, #string do\n\t\tlocal char\
    \ = string:sub(i, i)\n\t\tif not check[char] then\n\t\t\tcheck[char] = true\n\t\
    \t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd6t60rbj.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpd6t60rbj.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  return #remove_duplicates(string:lower())\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk1m_b4yd.lua:3:\
    \ attempt to call a nil value (global 'remove_duplicates')\nstack traceback:\n\
    \t/tmp/tmpk1m_b4yd.lua:3: in local 'candidate'\n\t/tmp/tmpk1m_b4yd.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    if type(string) ~= \"string\" then\n        return nil, \"count_distinct_characters:\
    \ Argument must be a string\"\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcb5kl5yg.lua:17: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal char_map = {}\n\tfor char in string:gmatch(\".\") do\n\t\tchar_map[char:lower()]\
    \ = true\n\tend\n\treturn #char_map\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvpmf3coh.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpvpmf3coh.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local seen = {}\n    for _, char in ipairs(string:lower():split(\"\")) do\n\
    \        seen[char] = true\n    end\n    return table.count(seen)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ojx7tmk.lua:4:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp7ojx7tmk.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp7ojx7tmk.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local distinct_characters = {}\n  for character in string:gmatch('%l') do\n\
    \    distinct_characters[character:lower()] = true\n  end\n  return #distinct_characters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_q2cn02.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmps_q2cn02.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local seen = {}\n    for _, char in ipairs(string:lower():gmatch(\"[a-z]\"\
    )) do\n        seen[char] = true\n    end\n    return table_size(seen)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for char in string:gmatch(\".\") do\n    chars[char:lower()]\
    \ = true\n  end\n  return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkxossjz8.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpkxossjz8.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \treturn # (string.lower(string):gsub('[^%a]', ''))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgxomasf9.lua:11:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpgxomasf9.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for char in string:gmatch('%a') do\n    chars[char:lower()]\
    \ = true\n  end\n  return table.size(chars)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp25_baob3.lua:7:\
    \ attempt to call a nil value (field 'size')\nstack traceback:\n\t/tmp/tmp25_baob3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp25_baob3.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\\
    128-\\191]*\") do\n        if not chars[char] then\n            chars[char] =\
    \ true\n        end\n    end\n    return #chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7aw3400.lua:16:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpk7aw3400.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \treturn #table_unpack(table_get_distinct_values(string:lower():split_to_table('')))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd081vzfm.lua:3:\
    \ attempt to call a nil value (method 'split_to_table')\nstack traceback:\n\t\
    /tmp/tmpd081vzfm.lua:3: in local 'candidate'\n\t/tmp/tmpd081vzfm.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal set = {}\n\tlocal count = 0\n\tfor i = 1, #string do\n\t\tlocal c = string:sub(i,\
    \ i)\n\t\tif c ~= '' and not set[c] then\n\t\t\tset[c] = true\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7sx3725.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpn7sx3725.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    return #string:lower():gsub(\"[^a-z]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4p1hon63.lua:11:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp4p1hon63.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local char_map = {}\n    for i = 1, string.len(string) do\n        char_map[string.sub(string,\
    \ i, i)] = 1\n    end\n    return table.getn(char_map)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4q4y9dfh.lua:7:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmp4q4y9dfh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4q4y9dfh.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local hash = {}\n    local count = 0\n    for i = 1, #string do\n       \
    \ local char = string:sub(i, i)\n        if not hash[char] then\n            hash[char]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9jz0uan.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpc9jz0uan.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal present_characters = {}\n\tfor c in string:gmatch(\".\") do\n\t\tpresent_characters[c:lower()]\
    \ = true\n\tend\n\treturn count_keys(present_characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9dqw10t3.lua:7:\
    \ attempt to call a nil value (global 'count_keys')\nstack traceback:\n\t/tmp/tmp9dqw10t3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9dqw10t3.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    return #string - #(string:gsub(\"(%a)\", \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpol1de9oj.lua:11:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmpol1de9oj.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for char in string:gmatch(\"[%a]\") do\n     \
    \   characters[char:lower()] = true\n    end\n    return #characters\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgd8xpt6.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpwgd8xpt6.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal chars = {}\n\tstring:gsub(\".\", function(char)\n\t\tif not chars[char]\
    \ then\n\t\t\tchars[char] = true\n\t\tend\n\tend)\n\treturn table.count(chars)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu4z0iqy0.lua:9:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpu4z0iqy0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpu4z0iqy0.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  return #remove_duplicates(string:lower():gsub(\"%s+\", \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpko8tajtp.lua:3:\
    \ attempt to call a nil value (global 'remove_duplicates')\nstack traceback:\n\
    \t/tmp/tmpko8tajtp.lua:3: in local 'candidate'\n\t/tmp/tmpko8tajtp.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal characters = {}\n\tlocal distinct_characters = 0\n\tlocal count = 0\n\t\
    for index = 1, string.len(string) do\n\t\tlocal character = string.sub(string,\
    \ index, index)\n\t\tif characters[character] == nil then\n\t\t\tdistinct_characters\
    \ = distinct_characters + 1\n\t\t\tcharacters[character] = true\n\t\tend\n\tend\n\
    \treturn distinct_characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyujpgeiy.lua:21:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpyujpgeiy.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local distinct_chars = {}\n  for char in string:gmatch(\".\") do\n    distinct_chars[char:lower()]\
    \ = true\n  end\n  return table.count(distinct_chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyzd_zbdw.lua:7:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpyzd_zbdw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpyzd_zbdw.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for char in string:gmatch(\"[%z\\1-\\127\\194-\\244][\\\
    128-\\191]*\") do\n    characters[char:lower()] = true\n  end\n  return table.length(characters)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpof57gw4h.lua:7:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpof57gw4h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpof57gw4h.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal found_characters = {}\n\tlocal number_of_characters = 0\n\tlocal i\n\t\
    for i = 1, string.len(string) do\n\t\tlocal character = string.lower(string.sub(string,\
    \ i, i))\n\t\tif not found_characters[character] then\n\t\t\tnumber_of_characters\
    \ = number_of_characters + 1\n\t\t\tfound_characters[character] = true\n\t\tend\n\
    \tend\n\treturn number_of_characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch(\".\") do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc1nnxoox.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpc1nnxoox.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local distinct_characters = {}\n  local length = string.len(string)\n  for\
    \ i = 1, length do\n    local character = string.sub(string, i, i)\n    if not\
    \ distinct_characters[character] then\n      distinct_characters[character] =\
    \ true\n    end\n  end\n  return table.length(distinct_characters)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmzt2z8vq.lua:11:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpmzt2z8vq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmzt2z8vq.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal len = string.len(string)\n\tlocal characters = {}\n\tlocal count = 0\n\
    \tfor i = 1, len do\n\t\tlocal char = string.sub(string, i, i)\n\t\tif not characters[char]\
    \ then\n\t\t\tcharacters[char] = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtdvq030.lua:21:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpwtdvq030.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    -- Subtract one from the length because the string may end with a newline\n\
    \    return string.len(string) - 1 - string.gsub(string, \"[%w]\", \"\")\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6biqjsm.lua:4:\
    \ attempt to sub a 'number' with a 'string'\nstack traceback:\n\t/tmp/tmpm6biqjsm.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpm6biqjsm.lua:10: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local set = {}\n    local len = string.len(string)\n    for i = 1, len do\n\
    \        set[string.sub(string, i, i)] = true\n    end\n    return len - #set\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp86o2qd_r.lua:16:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp86o2qd_r.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local unique_chars = {}\n    local num_unique_chars = 0\n    for letter in\
    \ string:lower():gmatch('.') do\n        if not unique_chars[letter] then\n  \
    \          unique_chars[letter] = true\n            num_unique_chars = num_unique_chars\
    \ + 1\n        end\n    end\n    return num_unique_chars\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    if string == nil then\n        return 0\n    end\n    local s = string:lower()\n\
    \    local used = {}\n    local count = 0\n    for i = 1, #s do\n        local\
    \ c = s:sub(i, i)\n        if not used[c] then\n            used[c] = true\n \
    \           count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \treturn #string.gsub(string, \"(%a)\", \"\");\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp767o40u3.lua:10:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp767o40u3.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local a = string:lower()\n    local count = 0\n    local b = {}\n    for\
    \ i = 1, #a do\n        local c = a:sub(i, i)\n        if not b[c] then\n    \
    \        b[c] = true\n            count = count + 1\n        end\n    end\n  \
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal distinct_characters = 0\n\tlocal characters = {}\n\tfor i = 1, #string\
    \ do\n\t\tlocal character = string:sub(i, i)\n\t\tlocal uppercase_character =\
    \ character:upper()\n\t\tlocal lowercase_character = character:lower()\n\t\tif\
    \ not characters[uppercase_character] and not characters[lowercase_character]\
    \ then\n\t\t\tdistinct_characters = distinct_characters + 1\n\t\t\tcharacters[uppercase_character]\
    \ = true\n\t\t\tcharacters[lowercase_character] = true\n\t\tend\n\tend\n\treturn\
    \ distinct_characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal char_cnt = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppyhyx2g8.lua:15: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    return table.length(get_characters(string))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1aviyrxl.lua:3:\
    \ attempt to call a nil value (global 'get_characters')\nstack traceback:\n\t\
    /tmp/tmp1aviyrxl.lua:3: in local 'candidate'\n\t/tmp/tmp1aviyrxl.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local counter = {}\n    local num_distinct = 0\n    for i=1,#string do\n\
    \        local char = string:sub(i,i)\n        if not counter[char] then\n   \
    \         counter[char] = true\n            num_distinct = num_distinct + 1\n\
    \        end\n    end\n    return num_distinct\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7vmpgyd.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmph7vmpgyd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    local count = 0\n    local limit = string.len(string)\n\
    \    for i = 1, limit do\n        local char = string.sub(string, i, i)\n    \
    \    if not chars[char] then\n            chars[char] = true\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp777mys8c.lua:21:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp777mys8c.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local map = {}\n    local length = string.len(string)\n    for i = 1, length\
    \ do\n        local char = string.sub(string, i, i)\n        if (not map[char])\
    \ then\n            map[char] = 1\n        end\n    end\n    return table.getn(map)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprzv6tb7q.lua:11:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmprzv6tb7q.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmprzv6tb7q.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local chars = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    if not char_exists(chars, char) then\n      table.insert(chars, char)\n \
    \   end\n  end\n  return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp19csnzsx.lua:6:\
    \ attempt to call a nil value (global 'char_exists')\nstack traceback:\n\t/tmp/tmp19csnzsx.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp19csnzsx.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822354
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    for char in string:gmatch('.') do\n        if characters[char]\
    \ == nil then\n            characters[char] = true\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplemqi8gr.lua:5:\
    \ attempt to index a nil value (global 'characters')\nstack traceback:\n\t/tmp/tmplemqi8gr.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmplemqi8gr.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local result = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmputdx0wgp.lua:15: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tif string == nil then return 0 end\n\tlocal result = {}\n\tfor i = 1, string.len(string)\
    \ do\n\t\tlocal character = string.sub(string, i, i)\n\t\tif result[character]\
    \ == nil then\n\t\t\tresult[character] = 1\n\t\tend\n\tend\n\treturn table.getn(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmpdqcudl.lua:11:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpmpdqcudl.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmpdqcudl.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local counter = 0\n  local chars_seen = {}\n  local current_char\n  for i =\
    \ 1, #string do\n    current_char = string:sub(i, i)\n    if not chars_seen[current_char]\
    \ then\n      counter = counter + 1\n      chars_seen[current_char] = true\n \
    \   end\n  end\n  return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5a5bjfop.lua:21:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp5a5bjfop.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    local n = 0\n    for char in string:gmatch(\".\") do\n\
    \        -- This checks if the hash table has the key `char`\n        if not chars[char]\
    \ then\n            n = n + 1\n            chars[char] = true\n        end\n \
    \   end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi66359kh.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpi66359kh.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal char_count = 0\n\tlocal unique_chars = {}\n\tfor i = 1, #string do\n\t\
    \tlocal char = string:sub(i, i)\n\t\tif unique_chars[char] == nil then\n\t\t\t\
    unique_chars[char] = true\n\t\t\tchar_count = char_count + 1\n\t\tend\n\tend\n\
    \treturn char_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37fmlgvl.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp37fmlgvl.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal counter = {}\n\tfor char in string:gmatch(\".\") do\n\t\tcounter[char:lower()]\
    \ = true\n\tend\n\treturn counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_zf7tjp.lua:13:\
    \ expected: 0, actual: {}\nstack traceback:\n\t/tmp/tmpo_zf7tjp.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local unique_letters = {}\n    local index = 1\n    while index <= #string\
    \ do\n        local letter = string:sub(index, index)\n        if not unique_letters[letter]\
    \ then\n            unique_letters[letter] = letter\n        end\n        index\
    \ = index + 1\n    end\n    return #unique_letters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplodvbq0_.lua:19:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmplodvbq0_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    if not string then return 0 end\n    local letters = {}\n    for char in\
    \ string:gmatch'.' do\n        if not letters[char:lower()] then\n           \
    \ letters[char:lower()] = true\n        end\n    end\n    return next(letters)\
    \ and #letters or 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpladbssc9.lua:17:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpladbssc9.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local flags = {}\n    local char_count = #string\n \
    \   local i = 1\n    while i <= char_count do\n        local char = string:sub(i,\
    \ i)\n        if not flags[char] then\n            flags[char] = true\n      \
    \      count = count + 1\n        end\n        i = i + 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6veiqsv.lua:23:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpe6veiqsv.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal characters = {}\n\tlocal num_unique_characters = 0\n\tfor i = 1, string.len(string)\
    \ do\n\t\tlocal c = string.sub(string, i, i)\n\t\tif characters[c] == nil then\n\
    \t\t\tcharacters[c] = 1\n\t\t\tnum_unique_characters = num_unique_characters +\
    \ 1\n\t\tend\n\tend\n\treturn num_unique_characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzywlqnly.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpzywlqnly.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  return #get_distinct_characters(string)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwq_ye6d2.lua:3:\
    \ attempt to call a nil value (global 'get_distinct_characters')\nstack traceback:\n\
    \t/tmp/tmpwq_ye6d2.lua:3: in local 'candidate'\n\t/tmp/tmpwq_ye6d2.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local char_counters = {}\n  for i = 1, string.len(string) do\n    local char\
    \ = string.sub(string, i, i)\n    char_counters[char] = (char_counters[char] or\
    \ 0) + 1\n  end\n  return table.getn(char_counters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3b9wm8mn.lua:8:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmp3b9wm8mn.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp3b9wm8mn.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local unique = {}\n    local count = 0\n    for i = 1, string.len(string)\
    \ do\n        local c = string.sub(string, i, i)\n        if not unique[c] then\n\
    \            unique[c] = true\n            count = count + 1\n        end\n  \
    \  end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8m7ufkjn.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp8m7ufkjn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local len = #string\n    local chars = {}\n    local count = 0\n    for i\
    \ = 1, len do\n        local char = string.sub(string, i, i)\n        if not chars[char]\
    \ then\n            chars[char] = true\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf1m7hg0q.lua:21:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpf1m7hg0q.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal chars = {}\n\tstring:gsub(\".\", function(c)\n\t\tchars[c:lower()] = true\n\
    \tend)\n\treturn chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2zq5tn7c.lua:13:\
    \ expected: 0, actual: {}\nstack traceback:\n\t/tmp/tmp2zq5tn7c.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal counter = 0\n\tlocal hash = {}\n\tfor i = 1, #string do\n\t\tlocal char\
    \ = string:sub(i, i)\n\t\tlocal lower_char = char:lower()\n\t\tif not hash[lower_char]\
    \ then\n\t\t\thash[lower_char] = true\n\t\t\tcounter = counter + 1\n\t\tend\n\t\
    end\n\treturn counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for i = 1, #string do\n        local char = string:sub(i,\
    \ i)\n        if not characters[char] then\n            characters[char] = true\n\
    \        end\n    end\n    return table_size(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf8_7qegl.lua:10:\
    \ attempt to call a nil value (global 'table_size')\nstack traceback:\n\t/tmp/tmpf8_7qegl.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpf8_7qegl.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    local string_lower = string:lower()\n\
    \    local string_len = string:len()\n    for i = 1, string_len do\n        local\
    \ c = string_lower:sub(i, i)\n        if not chars[c] then\n            chars[c]\
    \ = true\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local temp = \"\"\n    for i = 1, string.len(string) do\n        local c\
    \ = string.sub(string, i, i)\n        if string.find(temp, c, 1, true) == nil\
    \ then\n            temp = temp .. c\n        end\n    end\n    return string.len(temp)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk86so1fu.lua:18:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpk86so1fu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch(\"[%a%d]\") do\n        chars[char:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15t9vvtj.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp15t9vvtj.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal characters = {}\n\tlocal count = 0\n\tfor c in string:gmatch(\".\") do\n\
    \t\tif not characters[c:lower()] then\n\t\t\tcount = count + 1\n\t\t\tcharacters[c:lower()]\
    \ = true\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal characters = { }\n\tlocal count = 0\n\tfor i = 1, string.len(string) do\n\
    \t\tlocal character = string.sub(string, i, i)\n\t\tif not table.contains(characters,\
    \ character) then\n\t\t\ttable.insert(characters, character)\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp05l5sw5h.lua:7:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmp05l5sw5h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp05l5sw5h.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local used = {}\n    for char in string:gmatch(\".\") do\n        if not\
    \ used[char] then\n            used[char] = true\n        end\n    end\n    return\
    \ count_entries(used)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt_d4e1d0.lua:9:\
    \ attempt to call a nil value (global 'count_entries')\nstack traceback:\n\t/tmp/tmpt_d4e1d0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpt_d4e1d0.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal check_table = {}\n\tlocal n = 0\n\tlocal count = 0\n\tlocal i = 1\n\t\
    while i <= string.len(string) do\n\t\tif not check_table[string.lower(string.sub(string,\
    \ i, i))] then\n\t\t\tcheck_table[string.lower(string.sub(string, i, i))] = true\n\
    \t\t\tcount = count + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal alphabet = {}\n\tlocal count = 0\n\tfor letter in string:gmatch\".\" do\n\
    \t\tif not alphabet[letter:lower()] then\n\t\t\talphabet[letter:lower()] = true\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal char_tab = {}\n\tlocal i, limit = 1, string.len(string)\n\
    \twhile i <= limit do\n\t\tlocal character = string.sub(string, i, i)\n\t\tif\
    \ not char_tab[character] then\n\t\t\tchar_tab[character] = true\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgi4xpxul.lua:22:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpgi4xpxul.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local seen = {}\n    local lower = string:lower()\n\
    \    for i = 1, #lower do\n        local char = lower:sub(i, i)\n        if not\
    \ seen[char] then\n            count = count + 1\n            seen[char] = true\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  if not string then return nil end\n  string = string:gsub(\"%s\", \"\")\n \
    \ local distinct = {}\n  local count = 0\n  local _, c = string:gsub(\"[a-z]\"\
    , function(letter) distinct[letter] = true end)\n  for letter in pairs(distinct)\
    \ do count = count + 1 end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwsj0fo9s.lua:19:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmpwsj0fo9s.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  local characters = {}\n  for character in string:gmatch('.')\
    \ do\n    if not characters[character:lower()] then\n      count = count + 1\n\
    \      characters[character:lower()] = true\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    return #string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46udo3au.lua:11:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp46udo3au.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch(\"%a\") do\n        chars[char:lower()]\
    \ = true\n    end\n    return table.getn(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphwtlwjd2.lua:7:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmphwtlwjd2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphwtlwjd2.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal t = {}\n\tfor c in string:gmatch\".\" do\n\t\tt[c:lower()] = 1\n\tend\n\
    \treturn #t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08hsifs8.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp08hsifs8.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    -- Dictionary to store all distinct characters we've encountered so far (with\
    \ case-insensitive characters mapped to the same key)\n    local distinct_characters\
    \ = {}\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1mjp1z6t.lua:16: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local result = {}\n    for character in string:gmatch(\"[a-z]\") do\n   \
    \     result[character] = true\n    end\n    return #result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzyhoj1c5.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpzyhoj1c5.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch(\"%S\") do\n        if not\
    \ chars[char:lower()] then\n            chars[char:lower()] = 1\n        end\n\
    \    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqp_1wfn.lua:16:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmphqp_1wfn.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal characters = {}\n\tlocal length = string.len(string)\n\tfor i = 1, length\
    \ do\n\t\tcharacters[i] = string.lower(string.sub(string, i, i))\n\tend\n\tlocal\
    \ counter = 0\n\tfor _, v in pairs(characters) do\n\t\tif v ~= \"\" then\n\t\t\
    \tcounter = counter + 1\n\t\tend\n\tend\n\treturn counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2yz8u84b.lua:22:\
    \ expected: 5, actual: 13\nstack traceback:\n\t/tmp/tmp2yz8u84b.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  return count_unique_characters(string:lower())\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpihrth1uu.lua:3:\
    \ attempt to call a nil value (global 'count_unique_characters')\nstack traceback:\n\
    \t/tmp/tmpihrth1uu.lua:3: in local 'candidate'\n\t/tmp/tmpihrth1uu.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \treturn table.count(count_occurrences(string))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfwc3qfco.lua:3:\
    \ attempt to call a nil value (global 'count_occurrences')\nstack traceback:\n\
    \t/tmp/tmpfwc3qfco.lua:3: in local 'candidate'\n\t/tmp/tmpfwc3qfco.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch(\"[%z\\1-\\127\\\
    194-\\244][\\128-\\191]*\") do\n        characters[character:lower()] = true\n\
    \    end\n    return #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mjothpf.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp7mjothpf.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    -- we will use a hash-table (i.e. associative-array, map, dictionary)\n \
    \   -- This hash-table will have characters as keys and number of occurrences\
    \ as values\n    local character_count = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0tha87ol.lua:17: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal dict = {}\n\tfor c in string:gmatch(\".\") do\n\t\tdict[c:lower()] = true\n\
    \tend\n\tlocal count = 0\n\tfor _ in pairs(dict) do\n\t\tcount = count + 1\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  -- your implementation here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppij52h0j.lua:9:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmppij52h0j.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for c in string:gmatch(\".\") do\n    characters[c:lower()]\
    \ = true\n  end\n  return #characters\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdjsoa8u.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmppdjsoa8u.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal flags = {}\n\tfor i = 1, #string do\n\t\tlocal char\
    \ = string:sub(i, i)\n\t\tif not flags[char] then\n\t\t\tflags[char] = true\n\t\
    \t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ceoz5pe.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp5ceoz5pe.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  if not string then return 0 end\n  local alphabet = {}\n  for i = 1, string.len(string)\
    \ do\n    alphabet[string.lower(string.sub(string, i, i))] = true\n  end\n  return\
    \ table.getn(alphabet)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpri1roub0.lua:8:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpri1roub0.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpri1roub0.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local histogram = {}\n    local distinct_count = 0\n    for c in string:gmatch(\"\
    .\") do\n        if histogram[c] == nil then\n            distinct_count = distinct_count\
    \ + 1\n            histogram[c] = true\n        end\n    end\n    return distinct_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6p297ho.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpe6p297ho.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal unique_characters = {}\n\tstring = string:lower()\n\tfor i = 1, string:len()\
    \ do\n\t\tunique_characters[string:sub(i, i)] = true\n\tend\n\tlocal n = 0\n\t\
    for k, v in pairs(unique_characters) do\n\t\tn = n + 1\n\tend\n\treturn n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local string = string:lower()\n    local chars_count = {}\n    for i = 1,\
    \ #string do\n        chars_count[string:sub(i, i)] = true\n    end\n    return\
    \ #chars_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3620gcx7.lua:15:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp3620gcx7.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  return count_elements(split_by_char(string))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp65c8e91w.lua:3:\
    \ attempt to call a nil value (global 'split_by_char')\nstack traceback:\n\t/tmp/tmp65c8e91w.lua:3:\
    \ in local 'candidate'\n\t/tmp/tmp65c8e91w.lua:9: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for char in string:gmatch('.') do\n        if not chars[char]\
    \ then\n            chars[char] = true\n        end\n    end\n    return #chars\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2os9uld.lua:16:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpc2os9uld.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local chars_seen = {}\n  local count = 0\n  local str_length = #string\n  for\
    \ i = 1, str_length do\n    local char = string:sub(i, i)\n    if not chars_seen[char]\
    \ then\n      chars_seen[char] = true\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyyfqymj.lua:21:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpfyyfqymj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for c in string:gmatch('.') do\n        c = c:lower()\n\
    \        if not characters[c] then\n            characters[c] = true\n       \
    \ end\n    end\n    return table.length(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpniudgh_q.lua:10:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpniudgh_q.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpniudgh_q.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local seen = {}\n  for char in string:gmatch(\"%S\") do\n    seen[char:lower()]\
    \ = true\n  end\n  return #seen\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6qnsclj.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmps6qnsclj.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal hash = {}\n\tlocal count = 0\n\tfor i = 1, #string do\n\t\tif not hash[string:sub(i,\
    \ i)] then\n\t\t\thash[string:sub(i, i)] = true\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykxmdtjf.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpykxmdtjf.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local distinct_characters = {}\n  for i = 1, string.len(string) do\n    distinct_characters[string.sub(string,\
    \ i, i)] = 1\n  end\n  return table.size(distinct_characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctv3rhlc.lua:7:\
    \ attempt to call a nil value (field 'size')\nstack traceback:\n\t/tmp/tmpctv3rhlc.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpctv3rhlc.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local char_counts = {}\n  for char in string:gmatch(\".\") do\n    local char_lower\
    \ = char:lower()\n    if not char_counts[char_lower] then\n      char_counts[char_lower]\
    \ = 1\n    else\n      char_counts[char_lower] = char_counts[char_lower] + 1\n\
    \    end\n  end\n  return table.getn(char_counts)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphx57myyv.lua:12:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmphx57myyv.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphx57myyv.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for i = 1, #string do\n    characters[i] = string.lower(string:sub(i,\
    \ i))\n  end\n  return #table.unique(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7kofiwy.lua:7:\
    \ attempt to call a nil value (field 'unique')\nstack traceback:\n\t/tmp/tmpa7kofiwy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpa7kofiwy.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local chars = {}\n    for char in string:gmatch(\"[%z\\\
    1-\\127\\194-\\244][\\128-\\191]*\") do\n        if not chars[char] then\n   \
    \         chars[char] = true\n            count = count + 1\n        end\n   \
    \ end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwkto6u1x.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpwkto6u1x.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local dif_characters = {}\n    local count = 0\n    local size = string.len(string)\n\
    \    local i = 1\n    while i <= size do\n        local s = string.sub(string,\
    \ i, i)\n        -- if it's a letter, not lower case\n        if s >= 'A' and\
    \ s <= 'Z' then\n            s = string.lower(s)\n        end\n        -- if it's\
    \ a letter, not upper case\n        if s >= 'a' and s <= 'z' then\n          \
    \  if not dif_characters[s] then\n                dif_characters[s] = true\n \
    \               count = count + 1\n            end\n        end\n        i = i\
    \ + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvbajvlmt.lua:32:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmpvbajvlmt.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local map = {}\n    local index = 1\n    while index\
    \ <= #string do\n        local current_char = string:sub(index, index)\n     \
    \   if not map[current_char] then\n            map[current_char] = true\n    \
    \        count = count + 1\n        end\n        index = index + 1\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9rrp266d.lua:22:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp9rrp266d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for character in string:gmatch('.') do\n        character\
    \ = character:lower()\n        if not chars[character] then\n            chars[character]\
    \ = true\n        end\n    end\n    return table.length(chars)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfta2lp9n.lua:10:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpfta2lp9n.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfta2lp9n.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal num_characters = string.len(string)\n\tlocal characters = {}\n\tfor i\
    \ = 1, num_characters do\n\t\tcharacters[string.sub(string, i, i)] = true\n\t\
    end\n\treturn table.getn(characters)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps3isa3bl.lua:8:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmps3isa3bl.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmps3isa3bl.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local char_codes = {}\n  local result = 0\n  for i = 1, #string do\n    local\
    \ char_code = string.byte(string, i)\n    if not char_codes[char_code] then\n\
    \      char_codes[char_code] = true\n      result = result + 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpya8ru4nx.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpya8ru4nx.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal seen = {}\n\tfor c in string:gmatch(\".\") do\n\t\tseen[c:lower()] = true\n\
    \tend\n\treturn table.getn(seen)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8u1my7xp.lua:7:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmp8u1my7xp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8u1my7xp.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal flags = {}\n\tlocal distinct_count = 0\n\tlocal length = string.len(string)\n\
    \tlocal i\n\tfor i = 1, length do\n\t\tif not flags[string:sub(i, i)] then\n\t\
    \t\tdistinct_count = distinct_count + 1\n\t\t\tflags[string:sub(i, i)] = true\n\
    \t\tend\n\tend\n\treturn distinct_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_j_79kok.lua:21:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp_j_79kok.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \t--[[\n\t\tImplementation notes:\n\t\t\t- Create a table, store all characters\
    \ there\n\t\t\t- Iterate through the string\n\t\t\t- If the character is not in\
    \ the table, add it to the table\n\t\t\t- Return the table size\n\t--]]\n\tlocal\
    \ characters = {}\n\tfor char in string:gmatch(\".\") do\n\t\tif not characters[char]\
    \ then\n\t\t\tcharacters[char] = true\n\t\tend\n\tend\n\treturn #characters\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qxk_2_s.lua:23:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp6qxk_2_s.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal hashed = {}\n\tlocal count = 0\n\tfor character in string:gmatch(\".\"\
    ) do\n\t\tif not hashed[character:lower()] then\n\t\t\thashed[character:lower()]\
    \ = true\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local counts = {}\n  for c in string:gmatch('.') do\n    counts[c:lower()]\
    \ = true\n  end\n  return #counts\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgla0u_ve.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpgla0u_ve.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal chars = {}\n\tlocal count = 0\n\tfor _, char in pairs(string:split(\"\"\
    )) do\n\t\tif not chars[char:lower()] then\n\t\t\tchars[char:lower()] = true\n\
    \t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph9a7fz0m.lua:5:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmph9a7fz0m.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmph9a7fz0m.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local char_set = {}\n  for i = 1, string.len(string) do\n    char_set[string.sub(string,\
    \ i, i)] = true\n  end\n  return char_set\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7nuc_93.lua:13:\
    \ expected: 0, actual: {}\nstack traceback:\n\t/tmp/tmpu7nuc_93.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal distinct_chars = {}\n\tlocal num_distinct_chars = 0\n\tfor i = 1, string.len(string)\
    \ do\n\t\tlocal c = string.sub(string, i, i)\n\t\tlocal c_upper = string.upper(c)\n\
    \t\tif not distinct_chars[c_upper] then\n\t\t\tdistinct_chars[c_upper] = true\n\
    \t\t\tnum_distinct_chars = num_distinct_chars + 1\n\t\tend\n\tend\n\treturn num_distinct_chars\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal chars = 0\n\tlocal seen = {}\n\tfor i = 1, #string do\n\t\tif not seen[string.lower(string:sub(i,\
    \ i))] then\n\t\t\tchars = chars + 1\n\t\t\tseen[string.lower(string:sub(i, i))]\
    \ = true\n\t\tend\n\tend\n\treturn chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local found = {}\n    local chars = 0\n    local count = 0\n    local char\
    \ = nil\n    local found_count = 0\n    local string_length = string.len(string)\n\
    \    local i = 0\n    while i < string_length do\n        char = string.sub(string,\
    \ i, i)\n        if found[char] == nil then\n            found[char] = char\n\
    \            count = count + 1\n        end\n        i = i + 1\n    end\n    for\
    \ k, v in pairs(found) do\n        found_count = found_count + 1\n    end\n  \
    \  if count == found_count then\n        return count\n    else\n        return\
    \ -1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n\
    \    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptniganov.lua:33:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmptniganov.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local seen = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    if not seen[char] then\n      seen[char] = true\n    end\n  end\n  return\
    \ table.length(seen)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb8742aj2.lua:10:\
    \ attempt to call a nil value (field 'length')\nstack traceback:\n\t/tmp/tmpb8742aj2.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpb8742aj2.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for character in string:gmatch(\"[%z\\1-\\127\\\
    194-\\244][\\128-\\191]*\") do\n        characters[character:lower()] = true\n\
    \    end\n    return #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mjothpf.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp7mjothpf.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local hash = {}\n    local count = 0\n    for i=1,string.len(string) do\n\
    \        local letter = string.sub(string, i, i)\n        if not hash[letter]\
    \ then\n            hash[letter] = true\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9gj8mr6.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpg9gj8mr6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local count = 0\n    local string_lower = string:lower()\n    local flags\
    \ = {}\n    local last = string_lower:sub(1, 1)\n    flags[last] = true\n    for\
    \ i = 2, #string_lower do\n        local current = string_lower:sub(i, i)\n  \
    \      if flags[current] == nil then\n            flags[current] = true\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglljl2w_.lua:22:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmpglljl2w_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal counts = {}\n\tlocal len = #string\n\tfor i = 1, len do\n\t\tlocal current_char\
    \ = string:sub(i, i)\n\t\tlocal lower_char = current_char:lower()\n\t\tcounts[lower_char]\
    \ = (counts[lower_char] or 0) + 1\n\tend\n\treturn counts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptr_fqhei.lua:16:\
    \ expected: 0, actual: {}\nstack traceback:\n\t/tmp/tmptr_fqhei.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local count = 0\n  local chars = {}\n  for i = 1, #string do\n    local char\
    \ = string:sub(i, i)\n    if not chars[char] then\n      chars[char] = true\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyt5r8z3n.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpyt5r8z3n.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local cur = \"\"\n    local count = 0\n    for i = 1, #string do\n      \
    \  if string.find(cur, string.sub(string, i, i), 1, true) == nil then\n      \
    \      cur = cur .. string.sub(string, i, i)\n            count = count + 1\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4pn2y1vz.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp4pn2y1vz.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  if string == \"\" then\n    return 0\n  end\n  string = string:lower()\n  local\
    \ char_set = {}\n  for i = 1, #string do\n    local char = string:sub(i, i)\n\
    \    if not char_set[char] then\n      char_set[char] = true\n    end\n  end\n\
    \  return #char_set\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmu7bpvp2.lua:21:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpmu7bpvp2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal char_list = {}\n\tlocal length = string.len(string)\n\
    \tfor i = 1, length do\n\t\tlocal char = string.sub(string, i, i)\n\t\tif char_list[char]\
    \ == nil then\n\t\t\tchar_list[char] = 1\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqwobt7uo.lua:21:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpqwobt7uo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 0
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal seen = {}\n\tlocal count = 0\n\tfor char in string:gmatch('.') do\n\t\t\
    char = char:lower()\n\t\tif not seen[char] then\n\t\t\tseen[char] = true\n\t\t\
    \tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local characters = {}\n    for char in string:gmatch('.') do\n        if\
    \ not characters[char] then\n            characters[char] = 1\n        end\n \
    \   end\n    return #characters\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fujm3u_.lua:16:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmp3fujm3u_.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal distinct_characters = {}\n\tfor word in string:gmatch(\"\
    %l+\") do\n\t\tfor character in word:gmatch(\".\") do\n\t\t\tcharacter = character:lower()\n\
    \t\t\tif not distinct_characters[character] then\n\t\t\t\tdistinct_characters[character]\
    \ = true\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9glbyfl6.lua:24:\
    \ expected: 5, actual: 4\nstack traceback:\n\t/tmp/tmp9glbyfl6.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal char_map = {}\n\tfor char in string:gmatch('.') do\n\
    \t\tif not char_map[char] then\n\t\t\tchar_map[char] = true\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp336a_72v.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmp336a_72v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal char_list = {}\n\tlocal distinct_char_count = 0\n\tfor char in string:gmatch(\"\
    .\") do\n\t\tif not char_list[char] then\n\t\t\tchar_list[char] = true\n\t\t\t\
    distinct_char_count = distinct_char_count + 1\n\t\tend\n\tend\n\treturn distinct_char_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsthhzow_.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpsthhzow_.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars = {}\n    for c in string:gmatch('.') do\n        chars[c:lower()]\
    \ = true\n    end\n    return #chars\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcti5lyi.lua:14:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpxcti5lyi.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal count = 0\n\tlocal seen = {}\n\tfor _, c in ipairs(string:lower():gmatch(\"\
    .\")) do\n\t\tif not seen[c] then\n\t\t\tcount = count + 1\n\t\t\tseen[c] = true\n\
    \t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to index a function value

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tlocal mtable = {}\n\tfor char in string:gmatch\".\" do\n\t\tif not mtable[char]\
    \ then\n\t\t\tmtable[char] = true\n\t\tend\n\tend\n\treturn #mtable\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfok079k.lua:16:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpnfok079k.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local set = {}\n  local count = 0\n  for letter in string:gmatch\".\" do\n\
    \    if not set[letter] then\n      set[letter] = true\n      count = count +\
    \ 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnom2zcux.lua:19:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmpnom2zcux.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  for c in string:gmatch(\".\") do\n    characters[c:lower()]\
    \ = true\n  end\n  return table.getn(characters)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq99_aywy.lua:7:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpq99_aywy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpq99_aywy.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local hash = {}\n    for char in string:gmatch('.') do\n        char = char:lower()\n\
    \        hash[char] = (hash[char] or 0) + 1\n    end\n    return #hash\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjq9y6ly2.lua:15:\
    \ expected: 5, actual: 0\nstack traceback:\n\t/tmp/tmpjq9y6ly2.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local distinct_characters = 0\n  local length = #string\n  for i = 1, length\
    \ do\n    local char = string:sub(i, i)\n    -- Use a lookup table to keep track\
    \ of the distinct characters, so we can count them.\n    if not lookup_table[char]\
    \ then\n      distinct_characters = distinct_characters + 1\n      lookup_table[char]\
    \ = true\n    end\n  end\n  return distinct_characters\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8cjmdj3h.lua:8:\
    \ attempt to index a nil value (global 'lookup_table')\nstack traceback:\n\t/tmp/tmp8cjmdj3h.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp8cjmdj3h.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \  local characters = {}\n  local count = 0\n  for i = 1, string.len(string) do\n\
    \    local char = string.sub(string, i, i)\n    if not characters[char] then\n\
    \      characters[char] = true\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = count_distinct_characters\n    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxmu6_51.lua:20:\
    \ expected: 5, actual: 9\nstack traceback:\n\t/tmp/tmppxmu6_51.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \tif type(string) ~= \"string\" then\n\t\terror(\"expected string, got \" .. type(string),\
    \ 2)\n\tend\n\tlocal map = {}\n\tfor c in string:gmatch(\"%S\") do\n\t\tmap[c:lower()]\
    \ = true\n\tend\n\treturn table.getn(map)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt1ypnjq1.lua:10:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpt1ypnjq1.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpt1ypnjq1.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local counts = {}\n    for char in string:gmatch('.') do\n        counts[char:lower()]\
    \ = true\n    end\n    return _.size(counts)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = count_distinct_characters\n    lu.assertEquals(candidate(''),\
    \ 0)\n    lu.assertEquals(candidate('abcde'), 5)\n    lu.assertEquals(candidate('abcdecadeCADE'),\
    \ 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'), 1)\n    lu.assertEquals(candidate('Jerry\
    \ jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprak3mtdr.lua:7:\
    \ attempt to index a nil value (global '_')\nstack traceback:\n\t/tmp/tmprak3mtdr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprak3mtdr.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local chars_map = {}\n    for char in string:gmatch('.') do\n        chars_map[char:lower()]\
    \ = true\n    end\n    return table.count(chars_map)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n   \
    \ lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'), 5)\n\
    \    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpto7243wm.lua:7:\
    \ attempt to call a nil value (field 'count')\nstack traceback:\n\t/tmp/tmpto7243wm.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpto7243wm.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
- exit_code: 1
  program: "-- Given a string, find out how many distinct characters (regardless of\
    \ case) does it consist of\nlocal function count_distinct_characters(string)\n\
    \    local keys = {}\n    for c in each_character(string) do\n        if not keys[c]\
    \ then\n            keys[c] = true\n        end\n    end\n    return #keys\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_distinct_characters\n\
    \    lu.assertEquals(candidate(''), 0)\n    lu.assertEquals(candidate('abcde'),\
    \ 5)\n    lu.assertEquals(candidate('abcdecadeCADE'), 5)\n    lu.assertEquals(candidate('aaaaAAAAaaaa'),\
    \ 1)\n    lu.assertEquals(candidate('Jerry jERRY JeRRRY'), 5)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4z2naed1.lua:4:\
    \ attempt to call a nil value (global 'each_character')\nstack traceback:\n\t\
    /tmp/tmp4z2naed1.lua:4: in local 'candidate'\n\t/tmp/tmp4z2naed1.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822355
