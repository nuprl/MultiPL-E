language: lua
name: HumanEval_18_how_many_times
results:
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local n_times = 0\n  for i = 1, #string - #substring + 1 do\n    if string:sub(i,\
    \ i + #substring - 1) == substring then\n      n_times = n_times + 1\n    end\n\
    \  end\n  return n_times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local counter = 0\n    local index = 1\n    while true do\n        index\
    \ = string:find(substring, index, true)\n        if index == nil then\n      \
    \      break\n        end\n        counter = counter + 1\n        index = index\
    \ + 1\n    end\n    return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    return select(2, string:gsub(substring, \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn2hfvbd.lua:11:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqn2hfvbd.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal amount = 0\n\tfor i = 1, #string do\n\t\tif string:sub(i, i + #substring\
    \ - 1) == substring then\n\t\t\tamount = amount + 1\n\t\tend\n\tend\n\treturn\
    \ amount\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tfor i = 1, string.len(string) do\n\t\tlocal istart, iend\
    \ = string.find(string, substring, i, true)\n\t\tif istart then\n\t\t\tcount =\
    \ count + 1\n\t\t\ti = iend\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpog0s5rwc.lua:20:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmpog0s5rwc.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal start_position = string.find(string, substring, 1, true)\n\tif start_position\
    \ == nil then\n\t\treturn 0\n\tend\n\tlocal count = 1\n\tlocal found = false\n\
    \twhile true do\n\t\tfound = string.find(string, substring, start_position + 1,\
    \ true)\n\t\tif found == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount = count + 1\n\
    \t\tstart_position = found\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif #substring > #string then return 0 end\n\tlocal count = 0\n\tlocal tempstring\
    \ = string\n\tlocal tempsubstring = substring\n\twhile true do\n\t\tlocal start_index\
    \ = tempstring:find(tempsubstring)\n\t\tif start_index == nil then break end\n\
    \t\tcount = count + 1\n\t\ttempstring = tempstring:sub(start_index + #tempsubstring)\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7kmjv6o.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpw7kmjv6o.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local counter = 0\n    local find_start = 1\n    while find_start <= #string\
    \ do\n        local find_end = string:find(substring, find_start)\n        if\
    \ find_end == nil then\n            break\n        end\n        counter = counter\
    \ + 1\n        find_start = find_end + 1\n    end\n    return counter\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local cnt = 0\n  local l = string.len(substring)\n  local d = string.len(string)\
    \ - l\n  for i = 0, d do\n    if string.sub(string, i+1, i+l) == substring then\n\
    \      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif string == nil or substring == nil then\n\t\treturn 0\n\tend\n\tlocal count\
    \ = 0\n\tfor _ in string.gmatch(string, substring) do\n\t\tcount = count + 1\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjis105k.lua:18:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpcjis105k.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local n = 0\n    local start = 0\n    local i = 0\n    while i do\n     \
    \   i = string.find(string, substring, start)\n        if i ~= nil then\n    \
    \        n = n + 1\n            start = i + 1\n        end\n    end\n    return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local offset = 1\n    while true do\n        local i\
    \ = string.find(string, substring, offset, true)\n        if i == nil then break\
    \ end\n        count = count + 1\n        offset = i + 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal pos = 1\n\twhile pos ~= nil do\n\t\tpos = string.find(string,\
    \ substring, pos, true)\n\t\tif pos ~= nil then\n\t\t\tcount = count + 1\n\t\t\
    \tpos = pos + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \t-- Final count\n\tlocal count = 0\n\t-- Starting point\n\tlocal start_point\
    \ = 0\n\t-- Segment of the string to be counted\n\tlocal segment\n\t\n\t-- Loop\
    \ until a substring of the string can't be found anymore\n\twhile true do\n\t\t\
    -- Get the substring\n\t\tsegment = string.sub(string, start_point + 1, string.len(string))\n\
    \t\t--print(segment)\n\t\t-- Look for it\n\t\tsegment = string.find(segment, substring)\n\
    \t\t-- If it's found, increase the count and move the starting point\n\t\tif segment\
    \ ~= nil then\n\t\t\tcount = count + 1\n\t\t\tstart_point = start_point + segment\n\
    \t\telse\n\t\t\t-- If it's not found anymore, exit the loop\n\t\t\tbreak\n\t\t\
    end\n\tend\n\t\n\t-- Return the count\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    -- Create a table to hold each character and its position.\n    local positions\
    \ = {}\n    for i = 1, #string do\n        positions[i] = string:sub(i, i)\n \
    \   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfw3xwa01.lua:18: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal i = 1\n\tlocal n = 0\n\trepeat\n\t\ti = string.find(string, substring,\
    \ i)\n\t\tif i then\n\t\t\tn = n + 1\n\t\t\ti = i + 1\n\t\tend\n\tuntil not i\n\
    \treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal num = 0\n\t\n\tlocal substr_index = string.find(string, substring, 0,\
    \ true)\n\t\n\twhile substr_index do\n\t\tnum = num + 1\n\t\tsubstr_index = string.find(string,\
    \ substring, substr_index + 1, true)\n\tend\n\t\n\treturn num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tfor start, stop in string.gmatch(string, \"(.-)\"..substring..\"\
    (.-)\") do\n\t\tcount = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0klb08qj.lua:15:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp0klb08qj.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local n = string.len(string)\n    local s = string.len(substring)\n    local\
    \ count = 0\n    for i = 1, n - s + 1 do\n        if string.sub(string, i, i +\
    \ s - 1) == substring then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif string:len() == 0 or substring:len() == 0 then\n\t\treturn 0\n\tend\n\t\n\
    \tlocal num = 0\n\tfor start, stop in string.gmatch(string, '()' .. substring\
    \ .. '()') do\n\t\tnum = num + 1\n\tend\n\treturn num\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcczoaw5q.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpcczoaw5q.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal counter = 0\n\tlocal match = string.match(string, substring)\n\twhile\
    \ match do\n\t\tcounter = counter + 1\n\t\tstring = string.gsub(string, substring,\
    \ \"\", 1)\n\t\tmatch = string.match(string, substring)\n\tend\n\treturn counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7gag439k.lua:18:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp7gag439k.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local s, e = 1, 1\n  local count = 0\n  local sub_len = #substring\n  while\
    \ s do\n    s, e = string.find(string, substring, e)\n    if s then\n      count\
    \ = count + 1\n      e = e + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0eos1bwe.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp0eos1bwe.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    if string == \"\" or substring == \"\" then\n        return 0\n    end\n\
    \    local p = 1\n    local times = 0\n    local s = 1\n    while p <= #string\
    \ do\n        local f, l = string.find(string, substring, p, true)\n        if\
    \ f then\n            times = times + 1\n            s = l + 1\n        else\n\
    \            break\n        end\n        p = s\n    end\n    return times\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_mgg9az.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpx_mgg9az.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal _, count = string:gsub(substring, \"\")\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq4m9k38g.lua:12:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpq4m9k38g.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal i, j = 0, 0\n\twhile true do\n\t\ti = string:find(substring, i+1, true)\n\
    \t\tif i then\n\t\t\tj = j + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ j\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local index = 0\n  repeat\n    index = string:find(substring,\
    \ index + 1)\n    if index then\n      count = count + 1\n    end\n  until not\
    \ index\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local pattern = string.gsub(substring, \"(%W)\", \"%%%1\")\n    pattern =\
    \ string.gsub(pattern, \"%%%*\", \".*\")\n    local _, n = string.gsub(string,\
    \ pattern, \"\")\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbxrj5ar5.lua:14:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpbxrj5ar5.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local i = 1\n    local j = 1\n    local count = 0\n    while i <= #string\
    \ do\n        if string:sub(i, i + #substring - 1) == substring then\n       \
    \     count = count + 1\n            i = i + #substring\n        else\n      \
    \      i = i + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08tc76fr.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp08tc76fr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local string_len = string.len(string)\n  local substring_len = string.len(substring)\n\
    \  local times = 0\n  for i = 1, string_len - substring_len + 1 do\n    if string.sub(string,\
    \ i, i + substring_len - 1) == substring then\n      times = times + 1\n    end\n\
    \  end\n  return times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    for i = 1, #string - #substring + 1 do\n        if string:sub(i,\
    \ i + #substring - 1) == substring then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local function match_function(at)\n        local t = {}\n        local function\
    \ m(a,b) t[#t+1] = {a,b} return \"\" end\n        string.gsub(string, substring,\
    \ m, at)\n        return t\n    end\n    local matches = match_function(1)\n \
    \   while #matches > 0 do\n        local i = 1\n        local m = matches[i]\n\
    \        while i <= #matches do\n            local at = m[2] + 1\n           \
    \ local arr = match_function(at)\n            if #arr > 0 then\n             \
    \   m = arr[1]\n                matches[i] = m\n            else\n           \
    \     table.remove(matches, i)\n            end\n            i = i + 1\n     \
    \   end\n    end\n    return #matches\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbpb7k4oy.lua:14:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpbpb7k4oy.lua:14: in local 'candidate'\n\t/tmp/tmpbpb7k4oy.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local pos = 1\n    while true do\n        pos = string:find(substring,\
    \ pos, true)\n        if not pos then break end\n        count = count + 1\n \
    \       pos = pos + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    --TODO: Make this more efficient (not to calculate the same stuff twice)\n\
    \    local pattern = '(' .. substring .. ')'\n    local _, count = string:gsub(pattern,\
    \ '%1')\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk2soesup.lua:14:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpk2soesup.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local counter = 0\n    local offset = 0\n    repeat\n        local b, e =\
    \ string.find(string, substring, offset, true)\n        if b then\n          \
    \  counter = counter + 1\n            offset = e + 1\n        end\n    until not\
    \ b\n    return counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuj7c0aqd.lua:20:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpuj7c0aqd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local position = string.find(string, substring)\n    local counter = 0\n\
    \    local start = 1\n    while position do\n        counter = counter + 1\n \
    \       start = position + 1\n        position = string.find(string, substring,\
    \ start)\n    end\n    return counter\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal _, times = string:gsub(substring, \"\")\n\treturn times\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08c2_u3u.lua:12:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp08c2_u3u.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local position = 0\n  local times = 0\n  local length = string.len(substring)\n\
    \  while true do\n    position = string.find(string, substring, position + 1)\n\
    \    if position == nil then\n      break\n    end\n    times = times + 1\n  end\n\
    \  return times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local n = 0\n    local i = 1\n    while (i < string.len(string)) do\n   \
    \     local match = string.find(string, substring, i)\n        if (match == nil)\
    \ then\n            break\n        end\n        i = match + 1\n        n = n +\
    \ 1\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local start = 1\n  local found = 0\n  local stop\n  repeat\n    stop = string.find(string,\
    \ substring, start, true)\n    if stop then\n      found = found + 1\n      start\
    \ = stop + 1\n    end\n  until not stop\n  return found\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local num = 0\n  local ss = string.find(string, substring, 1, true)\n  while\
    \ ss do\n    num = num + 1\n    ss = string.find(string, substring, ss + 1, true)\n\
    \  end\n  return num\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local n = string.len(string)\n    local m = string.len(substring)\n    local\
    \ count = 0\n    for i = 1, n - m + 1 do\n        if string.sub(string, i, i +\
    \ m - 1) == substring then\n            count = count + 1\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  if substring == \"\" then return 0 end\n  return select(2, string:gsub(substring,\
    \ \"\"))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmt19kz6t.lua:12:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpmt19kz6t.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local n = string.len(string)\n  local m = string.len(substring)\n  local count\
    \ = 0\n  for i = 1, n - m + 1 do\n    if string.sub(string, i, i + m - 1) == substring\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  if not string then\n    return 0\n  end\n  local count = 0\n  local s = string\n\
    \  local sub = substring\n  if sub == '' then\n    return 1\n  end\n  if sub:len()\
    \ > s:len() then\n    return 0\n  end\n  while s:find(sub) do\n    s = s:sub(s:find(sub)\
    \ + sub:len())\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqk6dj1j.lua:27:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpdqk6dj1j.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal i, j = string.find(string,\
    \ substring, start)\n\t\tif i == nil then break end\n\t\tcount = count + 1\n\t\
    \tstart = j + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyxyhg_6.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpnyxyhg_6.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local times, pos = 0, 1\n    while true do\n        local start_pos, end_pos\
    \ = string.find(string, substring, pos)\n        if start_pos == nil then\n  \
    \          break\n        end\n        times = times + 1\n        pos = end_pos\
    \ + 1\n    end\n    return times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb19btj9e.lua:20:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpb19btj9e.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal substring_length = #substring\n\tlocal last_substring_index = #string\
    \ - substring_length + 1\n\tlocal num_times = 0\n\tfor index = 1, last_substring_index\
    \ do\n\t\tif string:sub(index, index + substring_length - 1) == substring then\n\
    \t\t\tnum_times = num_times + 1\n\t\tend\n\tend\n\treturn num_times\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local match_tables = find_all_matches(string, substring)\n  local count = 0\n\
    \  for _, match_table in ipairs(match_tables) do\n    count = count + 1\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcz7ug04f.lua:3:\
    \ attempt to call a nil value (global 'find_all_matches')\nstack traceback:\n\t\
    /tmp/tmpcz7ug04f.lua:3: in local 'candidate'\n\t/tmp/tmpcz7ug04f.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local idx = 1\n  while true do\n    local from, to = string.find(string,\
    \ substring, idx, true)\n    if from == nil then\n      break\n    end\n    count\
    \ = count + 1\n    idx = to + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dmgwfhg.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp3dmgwfhg.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: -1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local function find(string, substring)\n    local first, last = string.find(string,\
    \ substring)\n    return (first and first or 0), (last and last or 0)\n  end\n\
    \  local function pad(str, length)\n    str = str or ''\n    return (str .. string.rep('\
    \ ', length - #str))\n  end\n  local matches = {}\n  local prefix = string.sub(string,\
    \ 1, #substring - 1)\n  local s = string.sub(string, #substring)\n  local first,\
    \ last = find(s, substring)\n  if first == 0 and last == 0 then\n    return 0\n\
    \  end\n  while first > 0 do\n    s = string.sub(s, #substring)\n    matches[#matches\
    \ + 1] = pad(prefix, #substring - 1) .. string.sub(s, 1, first - 1)\n    prefix\
    \ = string.sub(s, 1, #substring - 1)\n    first, last = find(s, substring)\n \
    \ end\n  return #matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822102
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    return select(2, string:gsub(substring, \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn2hfvbd.lua:11:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqn2hfvbd.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local pos = 1\n  while true do\n    pos = string.find(string,\
    \ substring, pos, true)\n    if not pos then break end\n    count = count + 1\n\
    \    pos = pos + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local last_start = 0\n    while true do\n        last_start\
    \ = string:find(substring, last_start + 1)\n        if last_start == nil then\n\
    \            break\n        end\n        count = count + 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tassert(string, 'The string argument is missing')\n\tassert(substring, 'The substring\
    \ argument is missing')\n\tlocal count = 0\n\tlocal len = string.len(substring)\n\
    \tlocal function pass(n)\n\t\tcount = count + 1\n\t\treturn string.sub(string,\
    \ n + len)\n\tend\n\twhile true do\n\t\tstring = string.gsub(string, substring,\
    \ pass, 1)\n\t\tif count == 0 then break end\n\tend\n\treturn count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_i15eyi.lua:9:\
    \ attempt to add a 'string' with a 'number'\nstack traceback:\n\t/tmp/tmpr_i15eyi.lua:9:\
    \ in function </tmp/tmpr_i15eyi.lua:7>\n\t[C]: in function 'string.gsub'\n\t/tmp/tmpr_i15eyi.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpr_i15eyi.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal offset = 1\n\twhile true do\n\t\tlocal index = string.find(string,\
    \ substring, offset, true)\n\t\tif not index then\n\t\t\tbreak\n\t\tend\n\t\t\
    count = count + 1\n\t\toffset = index + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal start_index = 0\n\tlocal counter = 0\n\trepeat\n\t\tstart_index = string.find(string,\
    \ substring, start_index+1, true)\n\t\tif start_index ~= nil then\n\t\t\tcounter\
    \ = counter + 1\n\t\tend\n\tuntil start_index == nil\n\treturn counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local times = 0\n    local index = 1\n    local len = string.len(string)\n\
    \    local sublen = string.len(substring)\n    while (index <= len) do\n     \
    \   local found = string.find(string, substring, index, true)\n        if (found\
    \ ~= nil) then\n            times = times + 1\n            index = found + sublen\n\
    \        else\n            break\n        end\n    end\n    return times\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8pvlzdxt.lua:24:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp8pvlzdxt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 0\n\twhile true do\n\t\ti = string.find(string,\
    \ substring, i + 1, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount\
    \ = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local s_len = string.len(string)\n  local sub_len = string.len(substring)\n\
    \  for i = 1, s_len do\n    if string.sub(string, i, i + sub_len - 1) == substring\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal i, j = 0, 0\n\tlocal count = 0\n\twhile true do\n\t\ti, j = string.find(string,\
    \ substring, j + 1, true)\n\t\tif not i then\n\t\t\tbreak\n\t\tend\n\t\tcount\
    \ = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfiijvjzx.lua:20:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpfiijvjzx.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local step = #substring\n    local n = 0\n    for i = 1, #string, step do\n\
    \        if string:sub(i, i + step - 1) == substring then\n            n = n +\
    \ 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7w15jc1d.lua:18:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp7w15jc1d.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local i = 0\n  local length = substring:len()\n  local count = 0\n  while true\
    \ do\n    i = string:find(substring, i + 1)\n    if i == nil then\n      break\n\
    \    end\n    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif (not string) or (not substring) then return 0 end\n\tlocal number = 0\n\t\
    local start = 1\n\tlocal fin = 1\n\twhile start <= string:len() do\n\t\tfin =\
    \ string:find(substring, start, true)\n\t\tif fin then\n\t\t\tnumber = number\
    \ + 1\n\t\t\tstart = fin + 1\n\t\telse\n\t\t\tstart = string:len() + 1\n\t\tend\n\
    \tend\n\treturn number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local s_len = string.len(string)\n  local sub_len = string.len(substring)\n\
    \  for i = 1, s_len - sub_len + 1 do\n    if string.sub(string, i, i + sub_len\
    \ - 1) == substring then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local time = 0\n    local index = string.find(string, substring)\n    if\
    \ index == nil then\n        return 0\n    end\n    while index ~= nil do\n  \
    \      time = time + 1\n        index = string.find(string, substring, index +\
    \ 1)\n    end\n    return time\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    return string:gsub(substring, \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxg7y7ihw.lua:9:\
    \ expected: 0, actual: \"\"\nstack traceback:\n\t/tmp/tmpxg7y7ihw.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local _,last_pos = string:gsub(substring, \"\")\n  \
    \  return last_pos\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n4jd9d6.lua:13:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp3n4jd9d6.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    for i in string.gmatch(string, substring) do\n     \
    \   count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl6d7uqq2.lua:15:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpl6d7uqq2.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local position = 1\n    while true do\n        local\
    \ start, finish = string.find(string, substring, position)\n        if start then\n\
    \            count = count + 1\n            position = finish + 1\n        else\n\
    \            break\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsh0cjgh.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpgsh0cjgh.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: -1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal _, ending = string:find(substring)\n\twhile ending\
    \ do\n\t\tcount = count + 1\n\t\tlocal start, ending = string:find(substring,\
    \ ending + 1)\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822103
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local counter = 0\n    local pos = string.find(string, substring, 0, true)\n\
    \    while pos do\n        counter = counter + 1\n        pos = string.find(string,\
    \ substring, pos + 1, true)\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_index = 1\n\tlocal end_index = #substring\n\t\
    while start_index <= #string do\n\t\tif string:sub(start_index, end_index) ==\
    \ substring then\n\t\t\tcount = count + 1\n\t\t\tstart_index = start_index + #substring\n\
    \t\t\tend_index = end_index + #substring\n\t\telse\n\t\t\tstart_index = start_index\
    \ + 1\n\t\t\tend_index = end_index + 1\n\t\tend\n\tend\n\treturn count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5l5oi0r1.lua:24:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp5l5oi0r1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local from = 1\n  local howmany = 0\n  local startpos, endpos = string.find(string,\
    \ substring, from)\n  while startpos do\n    howmany = howmany + 1\n    from =\
    \ endpos + 1\n    startpos, endpos = string.find(string, substring, from)\n  end\n\
    \  return howmany\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4endbgwk.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp4endbgwk.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal n, s_pos = 0, string.find(string, substring)\n\twhile s_pos do\n\t\tn\
    \ = n + 1\n\t\ts_pos = string.find(string, substring, s_pos + 1)\n\tend\n\treturn\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    -- Count overlaping cases.\n    local how_many = 0\n    local start = 1\n\
    \    local found = string.find(string, substring, start)\n    while found do\n\
    \        how_many = how_many + 1\n        start = found + 1\n        found = string.find(string,\
    \ substring, start)\n    end\n    return how_many\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal f = function(substring) count = count + 1 end\n\tstring:gsub(substring,\
    \ f)\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbmanwl5n.lua:14:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpbmanwl5n.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal pos = 1\n\tlocal start_pos, end_pos = string.find(string,\
    \ substring, pos)\n\twhile start_pos do\n\t\tcount = count + 1\n\t\tpos = end_pos\
    \ + 1\n\t\tstart_pos, end_pos = string.find(string, substring, pos)\n\tend\n\t\
    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6qofru3.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpa6qofru3.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local case, pos, count = -1, -1, 0\n  while true do\n    case, pos = string.find(string,\
    \ substring, pos + 1)\n    if case == nil then break end\n    count = count +\
    \ 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vr2epfn.lua:17:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp4vr2epfn.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local i = 0\n  local count = 0\n  while true do\n    i = string.find(string,\
    \ substring, i + 1, true)\n    if i == nil then\n      break\n    end\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    -- If the string is nil or the substring is nil, return 0\n    if string\
    \ == nil or substring == nil then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk5h73w31.lua:17: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local index = 0\n    local part = string\n    repeat\n\
    \        part = part:sub(index+1)\n        index = part:find(substring)\n    \
    \    if index then\n            count = count + 1\n        end\n    until not\
    \ index\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local start, finish, count = 1, 1, 0\n    while finish <= #string do\n  \
    \      start, finish = string.find(string, substring, start, true)\n        if\
    \ start then\n            count = count + 1\n            start = finish + 1\n\
    \        else\n            break\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpt5fo0u.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpdpt5fo0u.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal idx, count = 1, 0\n\tidx = string.find(string, substring, idx, true)\n\
    \twhile idx do\n\t\tcount = count + 1\n\t\tidx = string.find(string, substring,\
    \ idx + 1, true)\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local times = 0\n    local limit = string.len(string) - string.len(substring)\
    \ + 1\n    for i = 1, limit do\n        if string.sub(string, i, i + string.len(substring)\
    \ - 1) == substring then\n            times = times + 1\n        end\n    end\n\
    \    return times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local from = 1\n    local to = #substring\n    local\
    \ n = #string\n    while from <= n do\n        if string:sub(from, to) == substring\
    \ then\n            count = count + 1\n            from = from + 1\n         \
    \   to = to + 1\n        else\n            from = from + 1\n            to = to\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local n = 0\n  local prev = -1\n  repeat\n    prev = string:find(substring,\
    \ prev + 1)\n    if prev then\n      n = n + 1\n    end\n  until not prev\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif not string or not substring then return 0 end\n\tlocal count = 0\n\tfor offset\
    \ in string.gmatch(string, substring) do\n\t\tcount = count + 1\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vffbdy_.lua:16:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp1vffbdy_.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local found_start_indexes = {}\n  local start_index = string.find(string, substring,\
    \ 1, true)\n  while start_index do\n    found_start_indexes[#found_start_indexes\
    \ + 1] = start_index\n    start_index = string.find(string, substring, start_index\
    \ + 1, true)\n  end\n  return #found_start_indexes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i, j = string.find(string, substring, 1, true)\n\t\
    while i do\n\t\tcount = count + 1\n\t\ti, j = string.find(string, substring, j\
    \ + 1, true)\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps8z2vb7e.lua:17:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmps8z2vb7e.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local i, count = 1, 0\n  while true do\n    i = string:find(substring, i, true)\n\
    \    if i == nil then break end\n    count = count + 1\n    i = i + 1\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal times, c = 0, 0\n\twhile c <= #string do\n\t\t_, c = string:find(substring,\
    \ c + 1)\n\t\tif c then\n\t\t\ttimes = times + 1\n\t\tend\n\tend\n\treturn times\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4kcq3mzr.lua:4:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4kcq3mzr.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp4kcq3mzr.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tfor _ in string.gmatch(string, substring) do\n\t\tcount =\
    \ count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwsktrxs4.lua:15:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpwsktrxs4.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal from = 1\n\tlocal to = 1\n\tlocal next = 0\n\twhile\
    \ to do\n\t\tfrom, to = string.find(string, substring, from, true)\n\t\tif from\
    \ then\n\t\t\tcount = count + 1\n\t\t\tnext = to + 1\n\t\t\tfrom = next\n\t\t\t\
    to = next\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5c3ob0h0.lua:26:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp5c3ob0h0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local n = 0\n    local last_index\n    for i = 1, string.len(string) do\n\
    \        last_index = string.find(string, substring, i, true)\n        if last_index\
    \ then\n            n = n + 1\n            i = last_index\n        else\n    \
    \        break\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1575nys2.lua:21:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmp1575nys2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local pattern = string.format(\"()%s()\", substring)\n    local len = string.len(string)\n\
    \    local last = 1\n    local i = 0\n    while last do\n        _, last = string.find(string,\
    \ pattern, last)\n        if last then\n            i = i + 1\n            last\
    \ = last + 1\n            if last > len then\n                break\n        \
    \    end\n        end\n    end\n    return i\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb_dytxi.lua:25:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpgb_dytxi.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local pattern = '(' .. substring .. ')'\n    local found = 0\n    string:gsub(pattern,\
    \ function(s)\n        found = found + 1\n    end)\n    return found\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15i1gpi7.lua:16:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp15i1gpi7.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal n = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqz0m33cm.lua:14: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local str_len = string.len(string)\n    local sub_len = string.len(substring)\n\
    \    local i = 1\n    local count = 0\n    while i < str_len do\n        local\
    \ find = string.find(string, substring, i, true)\n        if find then\n     \
    \       count = count + 1\n            i = find + sub_len\n        else\n    \
    \        break\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu0xkae0h.lua:24:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpu0xkae0h.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif #substring > #string then return 0 end\n\tlocal count = 0\n\tlocal match_start\
    \ = 0\n\tlocal match_end = 0\n\twhile match_start < #string do\n\t\tmatch_start,\
    \ match_end = string:find(substring, match_end + 1)\n\t\tif match_start == nil\
    \ then break end\n\t\tcount = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73ahe_m6.lua:20:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp73ahe_m6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local _, count = string:gsub(substring, \"\")\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp497oa0h4.lua:12:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp497oa0h4.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local n = 0\n    local p = string.find(string, substring, 1, true)\n    while\
    \ p do\n        n = n + 1\n        p = string.find(string, substring, p + 1, true)\n\
    \    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal orig_len = string.len(string)\n\tlocal sub_len = string.len(substring)\n\
    \tlocal matches = 0\n\twhile true do\n\t\tlocal found_at = string.find(string,\
    \ substring, 1, true)\n\t\tif found_at == nil then\n\t\t\tbreak\n\t\tend\n\t\t\
    matches = matches + 1\n\t\tstring = string.sub(string, found_at + sub_len)\n\t\
    end\n\treturn matches\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28wq_xy5.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp28wq_xy5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local _, amount = string:gsub(substring, \"\")\n    return amount\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5cywlel.lua:12:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpq5cywlel.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \t\n\tif string == \"\" or substring == \"\" then\n\t\treturn 0\n\tend\n\t\n\t\
    local num_times_substring_found = 0\n\t\n\t-- lstring.find returns the position\
    \ of the first found instance of substring in string.\n\t-- if it returns nil\
    \ it means that substring is not found.\n\twhile true do\n\t\tlocal pos = lstring.find(string,\
    \ substring, 1, true)\n\t\tif pos == nil then\n\t\t\tbreak\n\t\tend\n\t\tnum_times_substring_found\
    \ = num_times_substring_found + 1\n\t\t-- Remove the found instance of substring\
    \ from string.\n\t\tstring = lstring.sub(string, pos + lstring.len(substring))\n\
    \tend\n\t\n\treturn num_times_substring_found\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu71t1o8l.lua:13:\
    \ attempt to index a nil value (global 'lstring')\nstack traceback:\n\t/tmp/tmpu71t1o8l.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpu71t1o8l.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local ok = true\n  local len = #substring\n  local len_str = #string\n  local\
    \ times = 0\n  while ok do\n    local idx = string.find(string, substring, 1,\
    \ true)\n    if idx == nil then\n      ok = false\n    else\n      string = string.sub(string,\
    \ idx + len)\n      times = times + 1\n    end\n  end\n  return times\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa554ot2q.lua:24:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpa554ot2q.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local i, count = 0, 0\n  local j = 1\n  local len_substring = string.len(substring)\n\
    \  repeat\n    i = string.find(string, substring, j, true)\n    if i then\n  \
    \    count = count + 1\n      j = i + len_substring\n    end\n  until not i\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0k7x4bqm.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp0k7x4bqm.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal i = 0\n\tlocal count = 0\n\twhile true do\n\t\ti = string.find(string,\
    \ substring, i+1, true)\n\t\tif i == nil then\n\t\t\tbreak\n\t\tend\n\t\tcount\
    \ = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal n = 0\n\tfor s in string:gmatch(substring) do\n\t\tn = n + 1\n\tend\n\t\
    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84btkdnp.lua:15:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp84btkdnp.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal how_many = 0\n\tlocal match = string.find(string, substring)\n\twhile\
    \ match do\n\t\thow_many = how_many + 1\n\t\tstring = string.sub(string, match\
    \ + 1)\n\t\tmatch = string.find(string, substring)\n\tend\n\treturn how_many\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local index = 0\n    local last = 1\n    repeat\n  \
    \      local tmp = string.find(string, substring, index + 1, true)\n        if\
    \ tmp then\n            last = tmp\n            index = tmp\n            count\
    \ = count + 1\n        end\n    until not tmp\n    return count, last\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tfor i in string.gmatch(string, substring) do\n\t\tcount =\
    \ count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedpky7px.lua:15:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpedpky7px.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local i = 0\n    local count = 0\n    while i < #string do\n        i = string:find(substring,\
    \ i+1)\n        if i == nil then\n            break\n        end\n        count\
    \ = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local last_found = -1\n  while true do\n    last_found =\
    \ string:find(substring, last_found + 1)\n    if last_found then\n      count\
    \ = count + 1\n    else\n      break\n    end\n  end\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif not string or not substring then return 0 end\n\tlocal count = 0\n\tlocal\
    \ start = 1\n\twhile true do\n\t\tstart = string.find(string, substring, start,\
    \ true)\n\t\tif not start then break end\n\t\tcount = count + 1\n\t\tstart = start\
    \ + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  return select(2, string:gsub(substring, \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp73km0l4u.lua:11:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp73km0l4u.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    -- Check if the substring appears in the string. If not return 0.\n    if\
    \ string:find(substring) == nil then\n        return 0\n    end\n    -- Check\
    \ the first appearance of the substring in the string.\n    local appearance =\
    \ string:find(substring)\n    -- If the substring appears in the first occurence\
    \ then count that.\n    if appearance == 1 then\n        local count = 1\n   \
    \     -- Then replace that first occurence of the substring in the string.\n \
    \       string = string:gsub(substring, \" \", 1)\n        -- Iterate while the\
    \ substring appears in the string.\n        while string:find(substring) ~= nil\
    \ do\n            -- Then replace the first occurence of the substring in the\
    \ string.\n            string = string:gsub(substring, \" \", 1)\n           \
    \ -- And increase the count.\n            count = count + 1\n        end\n   \
    \     -- Return the count.\n        return count\n    -- If the substring appears\
    \ not in the first occurence then count from there.\n    else\n        local count\
    \ = 0\n        -- Iterate while the substring appears in the string.\n       \
    \ while string:find(substring) ~= nil do\n            -- Then replace the first\
    \ occurence of the substring in the string.\n            string = string:gsub(substring,\
    \ \" \", 1)\n            -- And increase the count.\n            count = count\
    \ + 1\n        end\n        -- Return the count.\n        return count\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetg_zoc2.lua:43:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpetg_zoc2.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    if #substring == 0 then return #string + 1 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq3i01p9f.lua:14: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal n = string.len(string)\n\tlocal m = string.len(substring)\n\tlocal count\
    \ = 0\n\tfor i = 1, n-m+1 do\n\t\tif string.sub(string, i, i+m-1) == substring\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local index = 1\n    local count = 0\n    while true do\n        index =\
    \ string.find(string, substring, index, true)\n        if index == nil then break\
    \ end\n        count = count + 1\n        index = index + #substring\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr6a69445.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpr6a69445.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tfor i = 1, #string - #substring + 1 do\n\t\tif string:sub(i,\
    \ i + #substring - 1) == substring then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  for i = 1, #string do\n    if string:sub(i, i + #substring\
    \ - 1) == substring then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal last_found = 1\n\tlocal _, next_found = string:find(substring, last_found)\n\
    \tlocal counter = 0\n\t\n\twhile next_found do\n\t\tcounter = counter + 1\n\t\t\
    last_found = next_found + 1\n\t\t_, next_found = string:find(substring, last_found)\n\
    \tend\n\t\n\treturn counter\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4oj6fivw.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp4oj6fivw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local index = 1\n  local count = 0\n  local last_find = 0\n  while index do\n\
    \    index = string:find(substring, index, true)\n    if index then\n      count\
    \ = count + 1\n      index = index + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local f = function()\n        local first = string.find(string, substring)\n\
    \        if first then\n            return string.sub(string, first + 1), first\n\
    \        end\n    end\n    local i = 0\n    repeat\n        string, first = f()\n\
    \        if first then\n            i = i + 1\n        end\n    until not first\n\
    \    return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local result = 0\n    local pos = 1\n    local word_len = #substring\n  \
    \  local string_len = #string\n    while pos <= string_len do\n        local start_pos,\
    \ end_pos = find(string, substring, pos, true)\n        if start_pos then\n  \
    \          result = result + 1\n            pos = end_pos + 1\n        else\n\
    \            break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsyg1uws7.lua:8:\
    \ attempt to call a nil value (global 'find')\nstack traceback:\n\t/tmp/tmpsyg1uws7.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpsyg1uws7.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif type(string) == \"string\" and type(substring) == \"string\" then\n\t\tlocal\
    \ final_count = 0;\n\t\tlocal last_found = 0;\n\t\tlocal current_position = 0;\n\
    \t\trepeat\n\t\t\tlast_found = string.find(string, substring, current_position,\
    \ true);\n\t\t\tif last_found then\n\t\t\t\tfinal_count = final_count + 1;\n\t\
    \t\t\tcurrent_position = last_found + 1;\n\t\t\tend\n\t\tuntil not last_found;\n\
    \t\treturn final_count;\n\telse\n\t\terror(\"The parameters are not correct! Only\
    \ string parameters are allowed!\");\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    if #substring > #string then\n        return 0\n    end\n    local how_many\
    \ = 0\n    for first = 1, #string - #substring + 1 do\n        if string:sub(first,\
    \ first + #substring - 1) == substring then\n            how_many = how_many +\
    \ 1\n        end\n    end\n    return how_many\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: -1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal start, count = 1, 0\n\twhile true do\n\t\tlocal start, stop = string.find(string,\
    \ substring, start)\n\t\tif start then\n\t\t\tcount = count + 1\n\t\t\tstart =\
    \ stop + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822103
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local k, count = 1, 0\n  while true do\n    local p, q = string.find(string,\
    \ substring, k, true)\n    if not p then break end\n    count = count + 1\n  \
    \  k = q + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34uenbzv.lua:18:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp34uenbzv.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    return select(2, string:gsub(substring, \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn2hfvbd.lua:11:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpqn2hfvbd.lua:11: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822097
- exit_code: -1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal i = 1\n\tlocal n = 0\n\tlocal start = i\n\tlocal sstart = 1\n\twhile true\
    \ do\n\t\tstart, sstart = string.find(string, substring, start, true)\n\t\tif\
    \ not start then\n\t\t\tbreak\n\t\tend\n\t\ti = start + 1\n\t\tn = n + 1\n\tend\n\
    \treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822103
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal n = 0\n\tfor i = 1, string.len(string) do\n\t\tif string.sub(string, i,\
    \ i + string.len(substring) - 1) == substring then\n\t\t\tn = n + 1\n\t\tend\n\
    \tend\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local from = 1\n    local times = 0\n    local start, finish = string.find(string,\
    \ substring, from)\n    while start do\n        from = finish + 1\n        times\
    \ = times + 1\n        start, finish = string.find(string, substring, from)\n\
    \    end\n    return times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0gk2e3v.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpg0gk2e3v.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal how_many = 0\n\tlocal start = 1\n\t\n\twhile true do\n\t\tlocal found\
    \ = string.find(string, substring, start, true)\n\t\tif found then\n\t\t\thow_many\
    \ = how_many + 1\n\t\t\tstart = found + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\t\
    end\n\t\n\treturn how_many\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal result = {}\n\tlocal i = 0\n\trepeat\n\t\ti = string.find(string, substring,\
    \ i + 1, true)\n\t\tif i then table.insert(result, i) end\n\tuntil not i\n\treturn\
    \ #result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: -1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_pos = 1\n    while true do\n        local\
    \ start_pos, end_pos = string.find(string, substring, start_pos)\n        if start_pos\
    \ then\n            count = count + 1\n            start_pos = end_pos + 1\n \
    \       else\n            break\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822103
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local matches = 0\n    for i=1, string.len(string) do\n        local sub_idx\
    \ = string.find(string, substring, i, true)\n        if sub_idx ~= nil then\n\
    \            matches = matches + 1\n            i = sub_idx + 1\n        else\n\
    \            break\n        end\n    end\n    return matches\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ure2shq.lua:20:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmp6ure2shq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif string == nil or substring == nil then\n\t\treturn 0\n\tend\n\t\n\tlocal\
    \ n_times = 0\n\tlocal start_index = 0\n\tlocal i = 0\n\twhile true do\n\t\ti\
    \ = string.find(string, substring, start_index, true)\n\t\tif i == nil then\n\t\
    \t\tbreak\n\t\tend\n\t\tn_times = n_times + 1\n\t\tstart_index = i + 1\n\tend\n\
    \treturn n_times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \t--local substring = substring\n\tlocal times = 0\n\tlocal curPos = 1\n\twhile\
    \ curPos <= #string do\n\t\tlocal findPos = string.find(string, substring, curPos)\n\
    \t\tif findPos == nil then\n\t\t\tbreak\n\t\tend\n\t\ttimes = times + 1\n\t\t\
    curPos = findPos + 1\n\tend\n\treturn times\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tassert(type(string) == \"string\", \"input string is not a string\")\n\tassert(type(substring)\
    \ == \"string\", \"input substring is not a string\")\n\tif substring == \"\"\
    \ then return #string + 1 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp44oecjgc.lua:16: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal i = 1\n\twhile true do\n\t\tlocal start_index, end_index\
    \ = string.find(string, substring, i)\n\t\tif not start_index then\n\t\t\tbreak\n\
    \t\tend\n\t\tcount = count + 1\n\t\ti = end_index + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmzjy6guk.lua:21:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpmzjy6guk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local i = 0\n  local count = 0\n  while true do\n    i = string.find(string,\
    \ substring, i + 1, true)\n    if i == nil then\n      break\n    end\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    for i = 1, string.len(string) do\n        if string.sub(string,\
    \ i, i + string.len(substring) - 1) == substring then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif #substring == 0 then return 0 end\n\tlocal count = 0\n\tfor index = 1, #string\
    \ - #substring + 1 do\n\t\tlocal sub = string:sub(index, index + #substring -\
    \ 1)\n\t\tif sub == substring then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\t\
    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local index = 1\n    local len = #substring\n    while\
    \ index <= #string do\n        local i, j = string:find(substring, index, true)\n\
    \        if i then\n            count = count + 1\n            index = j + 1\n\
    \        else\n            break\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmko30g_j.lua:23:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpmko30g_j.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local sub_start = 1\n  local count = 0\n  while true do\n    local sub_end\
    \ = string:find(substring, sub_start, true)\n    if not sub_end then break end\n\
    \    count = count + 1\n    sub_start = sub_end + 1\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start = 1\n    while true do\n        start =\
    \ string.find(string, substring, start, true)\n        if start == nil then break\
    \ end\n        count = count + 1\n        start = start + 1\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local i = 0\n    local j = 0\n    local count = 0\n    while true do\n  \
    \      i = string.find(string, substring, i + 1, true)\n        if i == nil then\n\
    \            break\n        end\n        j = j + 1\n        count = count + 1\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then\n\t\t\tbreak\n\t\tend\n\t\tcount = count +\
    \ 1\n\t\tstart = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  if string == nil or substring == nil then return nil end\n  local case = nil\n\
    \  local count = 0\n  local start = 0\n  repeat\n    case = string.find(string,\
    \ substring, start, true)\n    if case ~= nil then\n      count = count + 1\n\
    \      start = case + 1\n    end\n  until case == nil\n  return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local string_len, substring_len = #string, #substring\n    local acc = 0\n\
    \    local step = substring_len + 1\n    for i = 1, string_len - substring_len\
    \ + 1 do\n        if string:sub(i, i + substring_len - 1) == substring then\n\
    \            acc = acc + 1\n        end\n    end\n    return acc\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal string_length = #string\n\tlocal substring_length = #substring\n\tlocal\
    \ times = 0\n\tfor i = 1, string_length - substring_length + 1 do\n\t\tif string:sub(i,\
    \ i + substring_length - 1) == substring then\n\t\t\ttimes = times + 1\n\t\tend\n\
    \tend\n\treturn times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal times = 0\n\tfor i in string:gmatch(substring) do\n\t\ttimes = times +\
    \ 1\n\tend\n\treturn times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpql35yoph.lua:15:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpql35yoph.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal l_string, l_substring = string:len(), substring:len()\n\tlocal m, i, j\
    \ = 0, 1, 1\n\twhile i <= l_string do\n\t\tj = 1\n\t\twhile j <= l_substring do\n\
    \t\t\tif string:sub(i, i + j - 1) == substring:sub(1, j) then\n\t\t\t\tj = j +\
    \ 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif j > l_substring then\n\
    \t\t\tm = m + 1\n\t\t\ti = i + j - 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8g2z0s4.lua:28:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpd8g2z0s4.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif string == nil or substring == nil then\n\t\treturn 0\n\tend\n\tlocal string,\
    \ substring = string, substring\n\tif string:find(substring) == nil then\n\t\t\
    return 0\n\tend\n\tlocal count = 0\n\tfor i in string:gmatch(substring) do\n\t\
    \tcount = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwcmp2u9z.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpwcmp2u9z.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local result = 0\n    local index = 0\n    while true do\n        index =\
    \ string:find(substring, index + 1)\n        if index == nil then\n          \
    \  break\n        end\n        result = result + 1\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal index = 0\n\twhile true do\n\t\tindex = string:find(substring,\
    \ index + 1)\n\t\tif index == nil then break end\n\t\tcount = count + 1\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n   \
    \ lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    if substring == '' then return nil end\n    local _, count = string:gsub(substring,\
    \ '')\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj19_syux.lua:13:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpj19_syux.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local times = 0\n    local search_start = 1\n    repeat\n        local search_end\
    \ = string:find(substring, search_start, true)\n        if search_end then\n \
    \           times = times + 1\n            search_start = search_end + 1\n   \
    \     end\n    until not search_end\n    return times\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local sublen = substring:len()\n  local count = 0\n  local start = 1\n  while\
    \ true do\n    local pos = string:find(substring, start, true)\n    if not pos\
    \ then\n      break\n    end\n    count = count + 1\n    start = pos + sublen\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbea2a80.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpkbea2a80.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal i, l = 0, string.len(substring)\n\tlocal times = 0\n\trepeat\n\t\ti =\
    \ string.find(string, substring, i+1, true)\n\t\tif i then\n\t\t\ttimes = times\
    \ + 1\n\t\tend\n\tuntil not i\n\treturn times\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal len = string.len(substring)\n\tlocal total = 0\n\tlocal cpos = 0\n\tlocal\
    \ spos = string.find(string, substring, cpos, true)\n\twhile spos do\n\t\ttotal\
    \ = total + 1\n\t\tcpos = spos + len\n\t\tspos = string.find(string, substring,\
    \ cpos, true)\n\tend\n\treturn total\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiktbhxis.lua:20:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpiktbhxis.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal times = 0\n\tlocal pos = string.find(string, substring, 1, true)\n\twhile\
    \ pos do\n\t\ttimes = times + 1\n\t\tpos = string.find(string, substring, pos\
    \ + 1, true)\n\tend\n\treturn times\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal i, j = 0, 0\n\tlocal result = 0\n\twhile true do\n\t\ti, j = string.find(string,\
    \ substring, j + 1, true)\n\t\tif not i then break end\n\t\tresult = result +\
    \ 1\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy808jawh.lua:18:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpy808jawh.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal start_from = 1\n\twhile true do\n\t\tlocal start, finish\
    \ = string.find(string, substring, start_from)\n\t\tif start == nil then break\
    \ end\n\t\tstart_from = finish + 1\n\t\tcount = count + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1xedx3l5.lua:19:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp1xedx3l5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal substring_len = #substring\n\tlocal how_many = 0\n\tlocal index = 0\n\t\
    while true do\n\t\tlocal next_index = string:find(substring, index+1, true)\n\t\
    \tif next_index then\n\t\t\thow_many = how_many + 1\n\t\t\tindex = next_index\n\
    \t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn how_many\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local n = 0\n    local position = 1\n    while true do\n        local found_at\
    \ = string.find(string, substring, position, true)\n        if not found_at then\n\
    \            break\n        end\n        n = n + 1\n        position = found_at\
    \ + 1\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    for i = 1, string.len(string) do\n        if string.sub(string,\
    \ i, i + string.len(substring) - 1) == substring then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal n = string.gsub(string, substring, \"\")\n\tlocal o = string.len(string)\
    \ - string.len(n)\n\treturn o\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqru5y9ig.lua:13:\
    \ expected: 4, actual: 6\nstack traceback:\n\t/tmp/tmpqru5y9ig.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    for i = 1, #string - #substring + 1 do\n        if string:sub(i,\
    \ i + #substring - 1) == substring then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822097
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local n = 0\n  local i = 1\n  local s = 1\n  local e = #substring\n  local\
    \ last_end = #string - #substring + 1\n  while i < last_end do\n    if string:sub(i,\
    \ e) == substring then\n      n = n + 1\n      i = i + 1\n      e = e + 1\n  \
    \  else\n      i = i + 1\n      e = e + 1\n    end\n  end\n  return n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp661nnn3w.lua:25:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmp661nnn3w.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local times = 0\n    if type(string) ~= \"string\" or type(substring) ~=\
    \ \"string\" then\n        return 0\n    end\n    local start = string.find(string,\
    \ substring)\n    while start do\n        times = times + 1\n        start = string.find(string,\
    \ substring, start + 1)\n    end\n    return times\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local pos = 0\n  while true do\n    pos = string:find(substring,\
    \ pos + 1)\n    if not pos then break end\n    count = count + 1\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local s, e, count = 1, 1, 0\n    local length_string = string.len(string)\n\
    \    local length_substring = string.len(substring)\n    while s <= length_string\
    \ do\n        local start, finish = string.find(string, substring, s, true)\n\
    \        if not start then\n            break\n        end\n        s = finish\
    \ + 1\n        count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5k9s5zh5.lua:22:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp5k9s5zh5.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    if string.find(string, substring) == nil then\n        return 0\n    end\n\
    \    local count = 0\n    while true do\n        local _, last = string.find(string,\
    \ substring)\n        if last == nil then\n            break\n        end\n  \
    \      count = count + 1\n        string = string.sub(string, last+1)\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_lb2nuux.lua:23:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp_lb2nuux.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local index = 1\n  while index <= #string do\n    local\
    \ next_index = string:find(substring, index, true)\n    if next_index then\n \
    \     count = count + 1\n      index = next_index + 1\n    else\n      break\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local i = 0\n    while true do\n        i = string.find(string,\
    \ substring, i + 1, true)\n        if i == nil then\n            break\n     \
    \   end\n        count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local num = 0\n    for i in string.gmatch(string, substring) do\n       \
    \ num = num + 1\n    end\n    return num\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp849wnoxu.lua:15:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp849wnoxu.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local _, count = string:gsub(substring, \"\")\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp497oa0h4.lua:12:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp497oa0h4.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal counter = 0\n\tlocal start = 1\n\twhile true do\n\t\tlocal pos = string:find(substring,\
    \ start, true)\n\t\tif not pos then break end\n\t\tcounter = counter + 1\n\t\t\
    start = pos + 1\n\tend\n\treturn counter\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local start_from = 1\n    while (true) do\n        local\
    \ position = string.find(string, substring, start_from)\n        if position ==\
    \ nil then break end\n        count = count + 1\n        start_from = position\
    \ + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local index = 0\n  while true do\n    index = string:find(substring,\
    \ index+1)\n    if index == nil then\n      break\n    end\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal n = 0\n\tlocal from = 1\n\trepeat\n\t\tfrom = string:find(substring, from,\
    \ true)\n\t\tif from then\n\t\t\tn = n + 1\n\t\t\tfrom = from + 1\n\t\tend\n\t\
    until not from\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  for i in string.gmatch(string, substring) do\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1y8ml9a.lua:15:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpu1y8ml9a.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  -- Use only the part of the string between the provided positions.\n  local\
    \ function string_between(string, start_position, end_position)\n    return string:sub(start_position,\
    \ end_position)\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyzkbn4vv.lua:17: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal from = 1\n\tlocal to = 1\n\twhile true do\n\t\tfrom,\
    \ to = string.find(string, substring, from, true)\n\t\tif from ~= nil then\n\t\
    \t\tcount = count + 1\n\t\t\tfrom = to + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1y2zzjm.lua:23:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmpu1y2zzjm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal count = 0\n\tlocal find = true\n\twhile find do\n\t\tfind = string:find(substring,\
    \ 1, true)\n\t\tif find then\n\t\t\tcount = count + 1\n\t\t\tstring = string:sub(find\
    \ + 1)\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local count = 0\n  local len = string.len(substring)\n  local p = 0\n  repeat\n\
    \    p = string.find(string, substring, p + 1)\n    if p ~= nil then\n      count\
    \ = count + 1\n    end\n  until p == nil\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local times = 0\n    local pos = string.find(string, substring, 1, true)\n\
    \    while pos do\n        times = times + 1\n        pos = string.find(string,\
    \ substring, pos + 1, true)\n    end\n    return times\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local from, to = 0, string.len(substring)\n    local result = 0\n    while\
    \ from < string.len(string) do\n        from = string.find(string, substring,\
    \ from + 1, true)\n        if from == nil then\n            break\n        end\n\
    \        result = result + 1\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local count = 0\n    local s, e = string.find(string, substring, 0, true)\n\
    \    while s do\n        count = count + 1\n        s, e = string.find(string,\
    \ substring, e + 1, true)\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g1kgud9.lua:17:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp9g1kgud9.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal idx = string.find(string, substring, 1, true)\n\tif not idx then return\
    \ 0 end\n\tlocal c = 1\n\twhile true do\n\t\tidx = string.find(string, substring,\
    \ idx + 1, true)\n\t\tif not idx then return c end\n\t\tc = c + 1\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif string == \"\" or substring == \"\" then\n\t\treturn 0\n\tend\n\tlocal count\
    \ = 0\n\tlocal s, e = string.find(string, substring, 1, true)\n\twhile s do\n\t\
    \tcount = count + 1\n\t\ts, e = string.find(string, substring, e + 1, true)\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1lv10lx1.lua:20:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp1lv10lx1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif not string or not substring then return 0 end\n\tlocal index = string.find(string,\
    \ substring, 1, true)\n\tif not index then return 0 end\n\tlocal count = 1\n\t\
    while index do\n\t\tcount = count + 1\n\t\tindex = string.find(string, substring,\
    \ index + 1, true)\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb44lq_gr.lua:18:\
    \ expected: 4, actual: 5\nstack traceback:\n\t/tmp/tmpb44lq_gr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal S, sub, c = string, substring, 0\n\tlocal i = 1\n\twhile true do\n\t\t\
    local start = string.find(S, sub, i, true)\n\t\tif start then\n\t\t\tc = c + 1\n\
    \t\t\ti = start + 1\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn c\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local target = string:lower()\n  local pattern = substring:lower()\n  local\
    \ count = 0\n  local nextat = 0\n  while true do\n    nextat = target:find(pattern,\
    \ nextat+1, true)\n    if nextat == nil then break end\n    count = count + 1\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \  local i, j = 0, 0\n  local count = 0\n  while true do\n    i, j = string.find(string,\
    \ substring, j+1, true)\n    if i == nil then\n      break\n    end\n    count\
    \ = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_mtm1rml.lua:20:\
    \ expected: 4, actual: 2\nstack traceback:\n\t/tmp/tmp_mtm1rml.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \    local i, count = 0, 0\n    local this_time = 0\n    for found, j in string.gfind(string,\
    \ substring) do\n        count = count + 1\n        if this_time == 0 then\n \
    \           i = j\n        end\n        this_time = this_time + 1\n    end\n \
    \   return count, this_time, i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0xwmsn26.lua:5:\
    \ attempt to call a nil value (field 'gfind')\nstack traceback:\n\t/tmp/tmp0xwmsn26.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp0xwmsn26.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822098
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tif not string or not substring then return end\n\tlocal count = 0\n\tfor i =\
    \ 1, string.len(string) do\n\t\tlocal suffix = string.sub(string, i)\n\t\tlocal\
    \ found = suffix:find(substring)\n\t\tif found ~= nil then\n\t\t\tcount = count\
    \ + 1\n\t\t\ti = i + found\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppov156d5.lua:20:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmppov156d5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822098
- exit_code: 0
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\nlocal function how_many_times(string, substring)\n\
    \tlocal p = 0\n\tlocal c = 0\n\tlocal s = #substring\n\twhile true do\n\t\tp =\
    \ string:find(substring, p + 1, true)\n\t\tif not p then\n\t\t\tbreak\n\t\tend\n\
    \t\tc = c + 1\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822098
