name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return list of all prefixes from shortest to longest of the input string\n\
  local function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local list = {}\n    for i = 1, #string do\n        list[#list\
    \ + 1] = string:sub(1, i)\n    end\n    return list\nend", "  local prefixes =\
    \ {}\n  local last_index = #string\n  for i = 1, last_index do\n    prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n  end\n  return prefixes\nend", "    local pre_len\
    \ = 0\n    local prefixes = {}\n    for _, v in ipairs(split(string, \".\")) do\n\
    \        pre_len = pre_len + 1\n        prefixes[pre_len] = join(slice(split(string,\
    \ \".\"), 1, pre_len), \".\")\n    end\n    return prefixes\nend", "\tlocal ret\
    \ = {}\n\tfor i = 1, #string do\n\t\tret[#ret + 1] = string:sub(1, i)\n\tend\n\
    \treturn ret\nend", "    local list = {}\n    for i = 1, string.len(string) do\n\
    \        list[i] = string.sub(string, 1, i)\n    end\n    return list\nend", " \
    \   local result = {}\n    for i = 1, #string do\n        result[#result + 1]\
    \ = string:sub(1, i)\n    end\n    return result\nend", "    local prefixes =\
    \ {}\n    for i = 1, string.len(string) do\n        prefixes[i] = string.sub(string,\
    \ 1, i)\n    end\n    return prefixes\nend", "\tlocal result = {}\n\tlocal n =\
    \ #string\n\tfor i = 1, n do\n\t\tresult[i] = string:sub(1, i)\n\tend\n\treturn\
    \ result\nend", "\tlocal prefixes = {}\n\tfor i = 1, #string do\n\t\tprefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n    end\n    return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return\
    \ prefixes\nend", "    local t = {}\n    for i = 1, string:len() do\n        table.insert(t,\
    \ string:sub(1, i))\n    end\n    return t\nend", "    local prefixes = {}\n \
    \   local len = #string\n    local prefix\n    for i = 1, len do\n        prefix\
    \ = string:sub(1, i)\n        prefixes[#prefixes + 1] = prefix\n    end\n    return\
    \ prefixes\nend", "\tlocal prefixes = {}\n\tfor i = 1, string.len(string) do\n\
    \t\ttable.insert(prefixes, string.sub(string, 1, i))\n\tend\n\treturn prefixes\n\
    end", "    local prefixes = {}\n    local start = 1\n    local stop = 1\n    while\
    \ stop <= #string do\n        stop = stop + 1\n        table.insert(prefixes,\
    \ string:sub(start, stop - 1))\n    end\n    return prefixes\nend", "    local\
    \ result = {}\n    for i = 1, #string do\n        table.insert(result, string:sub(1,\
    \ i))\n    end\n    return result\nend", "\tlocal prefixes = {}\n\tfor i = 1,\
    \ #string do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn\
    \ prefixes\nend", "\tlocal prefixes = {}\n\tlocal prefix = ''\n\tfor i = 1, #string\
    \ do\n\t\tprefix = prefix .. string:sub(i, i)\n\t\ttable.insert(prefixes, prefix)\n\
    \tend\n\treturn prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n\
    \    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return prefixes\nend",
  "    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n    end\n    return prefixes\nend", "\tlocal prefixes\
    \ = {}\n\tfor i = 1, string.len(string) do\n\t\tprefixes[i] = string.sub(string,\
    \ 1, i)\n\tend\n\treturn prefixes\nend", "    local list = {}\n    for i = 1,\
    \ #string do\n        list[#list + 1] = string:sub(1, i)\n    end\n    return\
    \ list\nend", "  local result = {}\n  for i = 1, #string do\n    table.insert(result,\
    \ string:sub(1, i))\n  end\n  return result\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n \
    \ return prefixes\nend", "\tlocal prefixes = {}\n\tlocal len = string.len(string)\n\
    \tfor i = 1, len do\n\t\tprefixes[i] = string.sub(string, 1, i)\n\tend\n\treturn\
    \ prefixes\nend", "\tlocal prefixes = {}\n\tfor n = 1, #string do\n\t\ttable.insert(prefixes,\
    \ string:sub(1, n))\n\tend\n\treturn prefixes\nend", "\tlocal result = {}\n\t\
    local length = #string\n\tfor i = 1, length do\n\t\ttable.insert(result, string:sub(1,\
    \ i))\n\tend\n\treturn result\nend", "    local prefixes = {}\n    for i = 1,\
    \ string.len(string) do\n        table.insert(prefixes, string.sub(string, 1,\
    \ i))\n    end\n    return prefixes\nend", "    local ret = {}\n    for i = 1,\
    \ #string do\n        table.insert(ret, string:sub(1, i))\n    end\n    return\
    \ ret\nend", "\tlocal results = {}\n\tlocal x = 1\n\tfor i = 1, string.len(string)\
    \ do\n\t\tresults[x] = string.sub(string, 1, i)\n\t\tx = x + 1\n\tend\n\treturn\
    \ results\nend", "\tlocal splits = {}\n\tfor i = 1, #string do\n\t\ttable.insert(splits,\
    \ string:sub(1, i))\n\tend\n\treturn splits\nend", "    local prefixes = {}\n\
    \    for i = 1, string.len(string) do\n        table.insert(prefixes, string.sub(string,\
    \ 1, i))\n    end\n    return prefixes\nend", "\tlocal prefixes = {}\n\tfor i\
    \ = 1, string.len(string) do\n\t\tprefixes[i] = string.sub(string, 1, i)\n\tend\n\
    \treturn prefixes\nend", "  local t = {}\n  for i = 1, string:len() do\n    t[i]\
    \ = string:sub(1, i)\n  end\n  return t\nend", "    if string == '' then\n   \
    \     return {}\n    end\n    local function _all_prefixes(string, prefixes)\n\
    \        local prefixes = prefixes or {}\n        table.insert(prefixes, string)\n\
    \        if string:len() > 1 then\n            return _all_prefixes(string:sub(1,\
    \ -2), prefixes)\n        else\n            return prefixes\n        end\n   \
    \ end\n    local prefixes = _all_prefixes(string)\n    table.sort(prefixes, function(a,\
    \ b) return a:len() < b:len() end)\n    return prefixes\nend", "\tlocal prefixes\
    \ = {}\n\tfor i = 1, #string do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\
    \tend\n\treturn prefixes\nend", "    local list = {}\n    for i = 1, #string do\n\
    \        table.insert(list, string:sub(1, i))\n    end\n    return list\nend",
  "\tlocal result = {}\n\tfor i = 1, #string do\n\t\tresult[#result + 1] = string:sub(1,\
    \ i)\n\tend\n\treturn result\nend", "    local ret = {}\n    for i = 1, #string\
    \ do\n        ret[#ret + 1] = string:sub(1, i)\n    end\n    return ret\nend",
  "\tlocal prefixes = {}\n\tlocal words = {}\n\tfor word in string:gmatch(\"[^ ]+\"\
    ) do\n\t\ttable.insert(words, word)\n\tend\n\t--[[\n\tfor i = 1, #words do\n\t\
    \tlocal prefix = \"\"\n\t\tfor j = 1, i do\n\t\t\tprefix = prefix .. \" \" ..\
    \ words[j]\n\t\tend\n\t\ttable.insert(prefixes, prefix:sub(2))\n\tend\n\t--]]\n\
    \t-- While we're at it, build regexp from smallest to largest prefix\n\tlocal\
    \ regexp = \"\"\n\tfor i = 1, #words do\n\t\tregexp = regexp .. words[i] .. \"\
    .*\"\n\tend\n\tregexp = \".*\" .. regexp\n\tregexp = regexp:gsub(\"%.\", \"%%.\"\
    )\n\treturn prefixes, regexp\nend", "    local prefixes = {}\n    for i = 1, string.len(string)\
    \ do\n        table.insert(prefixes, string.sub(string, 1, i))\n    end\n    return\
    \ prefixes\nend", "  local len = string.len(string)\n  local prefixes = {}\n \
    \ for i = 1, len do\n    table.insert(prefixes, string.sub(string, 1, i))\n  end\n\
    \  return prefixes\nend", "    local pr = {}\n    for i = 1, #string do\n    \
    \    table.insert(pr, i, string.sub(string, 1, i))\n    end\n    return pr\nend",
  "    local t = {}\n    for i = 1, #string do\n        table.insert(t, string:sub(1,\
    \ i))\n    end\n    return t\nend", "    local t = {}\n    for i = 1, #string\
    \ do\n        t[#t + 1] = string:sub(1, i)\n    end\n    return t\nend", "   \
    \ local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes +\
    \ 1] = string:sub(1, i)\n    end\n    return prefixes\nend", "\tlocal prefixes\
    \ = {}\n\tfor i = 1, string.len(string) do\n\t\ttable.insert(prefixes, string.sub(string,\
    \ 1, i))\n\tend\n\treturn prefixes\nend", "  local head, result = lpeg.match(prefix,\
    \ string)\n  if head then\n    return all_prefixes(string:sub(#head + 1))\n  else\n\
    \    return { string }\n  end\nend", "\tlocal prefixes = {}\n\tfor i = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\treturn prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n  end\n  return prefixes\nend", "    local result =\
    \ {}\n    local n      = #string\n    for i = 1, n do\n        table.insert(result,\
    \ string:sub(1, i))\n    end\n    return result\nend", "  local length = string:len()\n\
    \  local ret = {}\n  for pos = 1, length do\n    ret[#ret+1] = string:sub(1, pos)\n\
    \  end\n  return ret\nend", "  local result = {}\n  for len = 1, #string do\n\
    \    table.insert(result, string:sub(1, len))\n  end\n  return result\nend", "\t\
    local ret = {}\n\tfor i = 1, #string do\n\t\tret[#ret + 1] = string:sub(1, i)\n\
    \tend\n\treturn ret\nend", "  return coroutine.wrap(function()\n    for i = 1,\
    \ string:len() do\n      coroutine.yield(string:sub(1, i))\n    end\n  end)\n\
    end", "  local t = {}\n  for i = 1, string:len() do\n    table.insert(t, string:sub(1,\
    \ i))\n  end\n  return t\nend", "\tlocal prefixes = {}\n\tfor length = 1, #string\
    \ do\n\t\tprefixes[#prefixes + 1] = string:sub(1, length)\n\tend\n\treturn prefixes\n\
    end", "\tlocal result = {}\n\tfor i = 1, #string do\n\t\ttable.insert(result,\
    \ string:sub(1, i))\n\tend\n\treturn result\nend", "  local substring = \"\"\n\
    \  local prefixes = {}\n  for i = 1, string.len(string) do\n    substring = string.sub(string,\
    \ 0, i)\n    prefixes[i] = substring\n  end\n  return prefixes\nend", "\tlocal\
    \ prefixes = {}\n\tfor i = 1, #string do\n\t\tprefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n\tend\n\treturn prefixes\nend", "\tlocal t = {}\n\tfor i = 1, #string do\n\
    \t\tt[#t + 1] = string:sub(1, i)\n\tend\n\treturn t\nend", "  local result = {}\n\
    \  for i = 1, #string do\n    table.insert(result, string:sub(1, i))\n  end\n\
    \  return result\nend", "    local prefixes = {}\n    for i = 1, #string do\n\
    \        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return prefixes\n\
    end", "    local t = {}\n    for i = 1, string:len() do\n        table.insert(t,\
    \ string:sub(1, i))\n    end\n    return t\nend", "\tlocal prefixes = {}\n\tfor\
    \ i = 0, #string do\n\t\tprefixes[#prefixes + 1] = string:sub(1, i)\n\tend\n\t\
    return prefixes\nend", "    local ret = {}\n    local len = string.len(string)\n\
    \    for i = 1, len do\n        table.insert(ret, string.sub(string, 1, i))\n\
    \    end\n    return ret\nend", "\tlocal ret = {}\n\tfor i = 1, #string do\n\t\
    \ttable.insert(ret,string.sub(string,1,i))\n\tend\n\treturn ret\nend", "    local\
    \ prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] =\
    \ string:sub(1, i)\n    end\n    return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, string:len() do\n    prefixes[i] = string:sub(1, i)\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n  end\n  return prefixes\nend", "\tlocal length = string:len()\n\
    \tlocal prefixes = {}\n\tfor index = 0, length - 1 do\n\t\tprefixes[index] = string:sub(1,\
    \ index)\n\tend\n\treturn prefixes\nend", "    local t = {}\n    for i = 1, #string\
    \ do\n        t[#t + 1] = string:sub(1, i)\n    end\n    return t\nend", "   \
    \ local results = {}\n    for i = 1, #string do\n        table.insert(results,\
    \ string:sub(1, i))\n    end\n    return results\nend", "\tlocal prefixes = {}\n\
    \tfor i = 1, #string do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\
    \treturn prefixes\nend", "    local t = {}\n    local len = #string\n    for i\
    \ = 1, len do\n        table.insert(t, string:sub(1, i))\n    end\n    return\
    \ t\nend", "    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n    end\n    return prefixes\nend", "  local prefixes\
    \ = {}\n  for i = 1, string:len() do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend", "    local prefixes = {}\n    for i = 1,\
    \ #string do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n  \
    \  return prefixes\nend", "    return Set(function()\n        return string:gmatch(prefixes_pattern)\n\
    \    end)\nend", "    local result = {}\n    for i = 1, #string do\n        table.insert(result,\
    \ string:sub(1, i))\n    end\n    return result\nend", "\tlocal preflist = {}\n\
    \tfor w in string:gmatch(\"%S+\") do\n\t\ttable.insert(preflist, w)\n\t\tfor i\
    \ = #preflist - 1, 1, -1 do\n\t\t\tpreflist[i] = preflist[i] .. \" \" .. preflist[#preflist]\n\
    \t\tend\n\tend\n\treturn preflist\nend", "  local results = {}\n  local last_result\
    \ = nil\n  for i = 1, #string do\n    last_result = string.sub(string, 1, i)\n\
    \    table.insert(results, last_result)\n  end\n  return results\nend", "\tlocal\
    \ words = {}\n\tfor i = 1, string.len(string) do\n\t\twords[i] = string.sub(string,\
    \ 1, i)\n\tend\n\treturn words\nend", "    local result = {}\n    for i = 1, #string\
    \ do\n        table.insert(result, string:sub(1, i))\n    end\n    return result\n\
    end", "    local rv = {}\n    for i = 1, #string do\n        rv[#rv + 1] = string:sub(1,\
    \ i)\n    end\n    return rv\nend", "\tlocal r = {}\n\tfor i = 1, string:len()\
    \ do\n\t\ttable.insert(r, string:sub(1, i))\n\tend\n\treturn r\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n  end\n  return prefixes\nend", "  local result = {}\n  for i = 1, #string\
    \ do\n    table.insert(result, string:sub(1, i))\n  end\n  return result\nend",
  "  local result = {}\n  for i = 1, #string do\n    table.insert(result, string:sub(1,\
    \ i))\n  end\n  return result\nend", "\tlocal result = {}\n\t-- for each prefix\n\
    \tfor i = 1, #string do\n\t\ttable.insert(result, string:sub(1, i))\n\tend\n\t\
    return result\nend", "    return {string:match((string:gsub(\"[^,]*\", \"(.-),\"\
    )))}\nend", "\tlocal n = string.len(string)\n\tlocal prefixes = {}\n\tfor i =\
    \ 1, n do\n\t\tprefixes[i] = string.sub(string, 1, i)\n\tend\n\treturn prefixes\n\
    end", "  local i = 1\n  local result = {}\n  while i <= #string do\n    table.insert(result,\
    \ string:sub(1, i))\n    i = i + 1\n  end\n  return result\nend", "  local result\
    \ = {}\n  for i = 1, #string do\n    table.insert(result, string:sub(1, i))\n\
    \  end\n  return result\nend", "    local result = {}\n    for i = 1, #string\
    \ do\n        result[#result + 1] = string:sub(1, i)\n    end\n    return result\n\
    end", "  local len = #string\n  local prefixes = {}\n  for i = 1, len do\n   \
    \ table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\nend", "\t\
    local t = {}\n\tfor i = 1, #string do\n\t\tt[#t + 1] = string:sub(1, i)\n\tend\n\
    \treturn t\nend", "    local len = #string\n    local out = {}\n    for i = 1,\
    \ len do\n        out[i] = string:sub(1, i)\n    end\n    return out\nend", " \
    \   local t = {}\n    for i = 1, #string do\n        table.insert(t, string:sub(1,\
    \ i))\n    end\n    return t\nend", "\tlocal prefixes = {}\n\t-- Iterate through\
    \ the string, and add each prefix to the list\n\tfor i = 1, string.len(string)\
    \ do\n\t\ttable.insert(prefixes, string.sub(string, 1, i))\n\tend\n\treturn prefixes\n\
    end", "\tlocal prefixes = {}\n\tfor i = 1, string.len(string) do\n\t\ttable.insert(prefixes,\
    \ string.sub(string, 1, i))\n\tend\n\treturn prefixes\nend", "\tlocal result =\
    \ {}\n\tfor i = 1, #string do\n\t\tresult[#result + 1] = string:sub(1, i)\n\t\
    end\n\treturn result\nend", "\tlocal prefixes = {}\n\tlocal p = string\n\twhile\
    \ p do\n\t\ttable.insert(prefixes, 1, p)\n\t\tp = string_gsub(p, \"%s[^%s]+$\"\
    , \"\")\n\tend\n\treturn prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "    return seq.copy(seq.reverse(prefixes(string)))\nend", "\tlocal prefixes\
    \ = {}\n\tfor i = 1, #string do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\
    \tend\n\treturn prefixes\nend", "  local result = {}\n  for i = 1, #string do\n\
    \    result[#result + 1] = string:sub(1, i)\n  end\n  return result\nend", "\t\
    local output = {}\n\tfor i = 1, #string do\n\t\toutput[#output + 1] = string:sub(1,\
    \ i)\n\tend\n\treturn output\nend", "  local pos = 0\n  local prefixes = {}\n\
    \  while true do\n    pos = utf8.find(string, \"[^%s]\", pos + 1)\n    if not\
    \ pos then break end\n    table.insert(prefixes, utf8.sub(string, 1, pos))\n \
    \ end\n  table.insert(prefixes, string)\n  return prefixes\nend", "  local f =\
    \ {}\n  for i = 1, string:len() do\n    f[i] = string:sub(1, i)\n  end\n  return\
    \ f\nend", "    local all_prefixes = {}\n    for i = 1, string.len(string) do\n\
    \        table.insert(all_prefixes, string.sub(string, 1, i))\n    end\n    return\
    \ all_prefixes\nend", "    local prefixes = {}\n    for i = 1, #string do\n  \
    \      prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return prefixes\n\
    end", "  local res = {}\n  local len = string.len(string)\n  for i = 1, len do\n\
    \    res[#res + 1] = string.sub(string, 1, i)\n  end\n  return res\nend", "  \
    \  local t = {}\n    for i = 1, #string do\n        t[#t + 1] = string:sub(1,\
    \ i)\n    end\n    return t\nend", "\tlocal result = {}\n\tfor i = 1, string.len(string)\
    \ do\n\t\ttable.insert(result, string.sub(string, 1, i))\n\tend\n\treturn result\n\
    end", "  local result = {}\n  for i = 1, #string do\n    table.insert(result,\
    \ string:sub(1, i))\n  end\n  return result\nend", "\tlocal current_prefix = {}\n\
    \tlocal all_prefixes = {}\n\tlocal length = string.len(string)\n\tfor i = 1, length\
    \ do\n\t\ttable.insert(current_prefix, string.sub(string, i, i))\n\t\ttable.insert(all_prefixes,\
    \ table.concat(current_prefix))\n\tend\n\treturn all_prefixes\nend", "\tlocal\
    \ iter = string.gmatch(string, \"([^%s]+)\")\n\tlocal ret = {}\n\tlocal prefix\
    \ = \"\"\n\tlocal i = 1\n\tfor token in iter do\n\t\tprefix = prefix .. token\n\
    \t\tret[i] = prefix\n\t\ti = i + 1\n\tend\n\treturn ret\nend", "\tlocal len =\
    \ #string\n\tlocal t = {}\n\tfor i = 1, len do\n\t\ttable.insert(t, string:sub(1,\
    \ i))\n\tend\n\treturn t\nend", "    local current = {string}\n    local result\
    \ = {}\n    for _ = 1, string:len() do\n        table.insert(result, current)\n\
    \        local next = {}\n        for _, v in ipairs(current) do\n           \
    \ table.insert(next, v:sub(1, -2))\n        end\n        current = next\n    end\n\
    \    return result\nend", "\tlocal table = {}\n\tlocal size = string.len(string)\n\
    \tfor i = 1, size do\n\t\ttable[i] = string.sub(string, 1, i)\n\tend\n\treturn\
    \ table\nend", "  local result = {}\n  local size = #string\n  for i = 1, size\
    \ do\n    table.insert(result, string:sub(1, i))\n  end\n  return result\nend",
  "    local prefixes = {}\n    local len = #string\n    for i = 1, len do\n     \
    \   table.insert(prefixes, string:sub(1, i))\n    end\n    return prefixes\nend",
  "  local function recurse(prefix, i)\n    if i > #string then\n      return {prefix}\n\
    \    else\n      return {prefix, recurse(prefix .. string:sub(i, i), i + 1)}\n\
    \    end\n  end\n  return recurse(\"\", 1)\nend", "\tlocal prefixes = {}\n\tfor\
    \ i = 1, #string do\n\t\ttable.insert(prefixes, string:sub(1, i))\n\tend\n\treturn\
    \ prefixes\nend", "\tlocal result = {}\n\tfor i = 1, string.len(string) do\n\t\
    \ttable.insert(result, string.sub(string, 1, i))\n\tend\n\treturn result\nend",
  "    local result = {}\n    for i = 1, #string do\n        result[#result + 1] =\
    \ string:sub(1, i)\n    end\n    return result\nend", "    local prefixes = {}\n\
    \    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n\
    \    end\n    return prefixes\nend", "    local t = {}\n    for i = 1, string:len()\
    \ do\n        t[i] = string:sub(1, i)\n    end\n    return t\nend", "    if string\
    \ == \"\" then\n        return {}\n    else\n        local len = #string\n   \
    \     local out = {}\n        for i = 1, len do\n            out[i] = string:sub(1,\
    \ i)\n        end\n        return out\n    end\nend", "    local prefixes = {}\n\
    \    for i = 1, string.len(string) do\n        table.insert(prefixes, string.sub(string,\
    \ 1, i))\n    end\n    return prefixes\nend", "  if not string then return nil\
    \ end\n  local t = {}\n  for i = 1, #string do\n    t[#t+1] = string:sub(1, i)\n\
    \  end\n  return t\nend", "    local prefixes = {}\n    for i = 1, #string do\n\
    \        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n    return prefixes\n\
    end", "    local result = {}\n    for i = 1, string:len() do\n        result[i]\
    \ = string:sub(1, i)\n    end\n    return result\nend", "\tlocal output = {}\n\
    \tfor i = 1, #string do\n\t\toutput[#output + 1] = string:sub(1, i)\n\tend\n\t\
    return output\nend", "\tlocal res = {}\n\tfor i = 1, #string do\n\t\tres[#res\
    \ + 1] = string:sub(1, i)\n\tend\n\treturn res\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n\
    \  return prefixes\nend", "\tlocal pref = {}\n\tfor i = 1, #string do\n\t\tpref[#pref\
    \ + 1] = string:sub(1, i)\n\tend\n\treturn pref\nend", "    return ipairs({string:byte(1,\
    \ -1)})\nend", "    local prefixes = {}\n    local length = #string\n    local\
    \ i = 1\n    while i <= length do\n        prefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n        i = i + 1\n    end\n    return prefixes\nend", "\tif type(string)\
    \ ~= \"string\" then\n\t\terror(\"string expected, got \" .. type(string))\n\t\
    end\n\tlocal n = #string\n\tlocal prefixes = {}\n\tfor i = 1, n do\n\t\ttable.insert(prefixes,\
    \ string:sub(1, i))\n\tend\n\treturn prefixes\nend", "  local retval = {}\n  for\
    \ i = 1, #string do\n    table.insert(retval, string:sub(1, i))\n  end\n  return\
    \ retval\nend", "\tlocal result = {}\n\tfor i = 1, #string do\n\t\ttable.insert(result,\
    \ string:sub(1, i))\n\tend\n\treturn result\nend", "    local prefixes = {}\n\
    \    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n\
    \    end\n    return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "\tlocal prefixes = {}\n\tfor i = 1, #string do\n\t\ttable.insert(prefixes,\
    \ string:sub(1, i))\n\tend\n\treturn prefixes\nend", "    local result = {}\n\
    \    for i = 1, string:len() do\n        table.insert(result, string:sub(1, i))\n\
    \    end\n    return result\nend", "\tif string == \"\" then\n\t\treturn {}\n\t\
    end\n\tlocal result = {string}\n\tlocal offset = string:len() - 1\n\twhile offset\
    \ > 0 do\n\t\toffset = offset - 1\n\t\tresult[#result + 1] = string:sub(1, offset)\n\
    \tend\n\treturn result\nend", "\tlocal ret = {}\n\tfor i = 1, #string do\n\t\t\
    ret[#ret + 1] = string:sub(1, i)\n\tend\n\treturn ret\nend", "    local output\
    \ = {}\n    for i = 1, #string do\n        table.insert(output, string:sub(1,\
    \ i))\n    end\n    return output\nend", "\tlocal ret = {}\n\tfor i = 1, string:len()\
    \ do\n\t\ttable.insert(ret, string:sub(1, i))\n\tend\n\treturn ret\nend", "  \
    \  local m = string.len(string)\n    local result = {}\n    for n = 1, m do\n\
    \        result[n] = string.sub(string, 1, n)\n    end\n    return result\nend",
  "\tlocal out = {}\n\tfor i = 1, string:len() do\n\t\ttable.insert(out, string:sub(1,\
    \ i))\n\tend\n\treturn out\nend", "    local ret = {}\n    for i = 1, string.len(string)\
    \ do\n        ret[i] = string.sub(string, 1, i)\n    end\n    return ret\nend",
  "  local prefixes = {}\n  for i = 1, string:len() do\n    table.insert(prefixes,\
    \ string:sub(1, i))\n  end\n  return prefixes\nend", "\tlocal ret = {}\n\tfor\
    \ i = 1, #string do\n\t\ttable.insert(ret, string:sub(1, i))\n\tend\n\treturn\
    \ ret\nend", "    local t = {}\n    for i = 1, #string do\n        table.insert(t,\
    \ string:sub(1, i))\n    end\n    return t\nend", "    local length = string:len()\n\
    \    local result = {}\n    for i = 1, length do\n        result[i] = string:sub(1,\
    \ i)\n    end\n    return result\nend", "    local list = {}\n    for i = 1, string.len(string)\
    \ do\n        list[i] = string.sub(string, 1, i)\n    end\n    return list\nend",
  "    local len = #string\n    local prefixes = {}\n    for n = 1, len do\n     \
    \   prefixes[n] = string:sub(1, n)\n    end\n    return prefixes\nend", "    local\
    \ ret = {}\n    for i = 1, string.len(string) do\n        ret[i] = string.sub(string,\
    \ 1, i)\n    end\n    return ret\nend", "  local prefixes = {}\n  for i = 1, string:len()\
    \ do\n    prefixes[i] = string:sub(1, i)\n  end\n  return prefixes\nend", "  \
    \  local prefixes = {}\n    local current = \"\"\n    for character in string:gmatch(\"\
    .\") do\n        current = current .. character\n        table.insert(prefixes,\
    \ current)\n    end\n    return prefixes\nend", "    local t = {}\n    for i =\
    \ 1, #string do\n        table.insert(t,string:sub(1,i))\n    end\n    return\
    \ t\nend", "\tlocal accum = {}\n\tfor i = 1, string:len() do\n\t\taccum[#accum\
    \ + 1] = string:sub(1, i)\n\tend\n\treturn accum\nend", "    local i = 1\n   \
    \ local len = string.len(string)\n    local prefixes = {}\n    while i <= len\
    \ do\n        table.insert(prefixes, string.sub(string, 1, i))\n        i = i\
    \ + 1\n    end\n    return prefixes\nend", "    local t = {}\n    for i = 1, #string\
    \ do\n        table.insert(t, string:sub(1, i))\n    end\n    return t\nend",
  "  local length = string:len()\n  local prefixes = {}\n  for i = 1, length do\n\
    \    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\nend",
  "  local t = {}\n  for k = 1, #string do\n    table.insert(t, string:sub(1, k))\n\
    \  end\n  return t\nend", "    if #string == 0 then\n        return {}\n    end\n\
    \    local prefixes = {}\n    for i = 1, #string do\n        prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n    end\n    return prefixes\nend", "    local  result\
    \ = {}\n    for i = 1, #string do\n        table.insert(result, string:sub(1,\
    \ i))\n    end\n    return result\nend", "  local result = {}\n  for i = 1, #string\
    \ do\n    table.insert(result, string:sub(1, i))\n  end\n  return result\nend",
  "    local result = {}\n    for i = 1, #string do\n        result[#result + 1] =\
    \ string:sub(1, i)\n    end\n    return result\nend", "\tlocal out = {}\n\tfor\
    \ i = 1, #string do\n\t\ttable.insert(out, string:sub(1, i))\n\tend\n\treturn\
    \ out\nend", "  local prefixes = {}\n  for i = 1, string:len() do\n    prefixes[i]\
    \ = string:sub(1, i)\n  end\n  return prefixes\nend", "\tlocal result = {}\n\t\
    for pos=1,#string do\n\t\tlocal char = string:sub(pos,pos)\n\t\tlocal key = table.concat(result)..char\n\
    \t\tresult[key] = true\n\tend\n\treturn result\nend", "  if type(string) ~= \"\
    string\" then return {string} end\n  local prefixes = {}\n  for i = 0, string:len()\
    \ do\n    prefixes[i+1] = string:sub(1, i)\n  end\n  return prefixes\nend", " \
    \   local t = {}\n    for i = 1, #string do\n        table.insert(t, string:sub(1,\
    \ i))\n    end\n    return t\nend", "\tlocal result = {}\n\tfor i = 1, #string\
    \ do\n\t\tresult[#result + 1] = string:sub(1, i)\n\tend\n\treturn result\nend",
  "    local result = {}\n    for i = 1, #string do\n        table.insert(result,\
    \ string:sub(1, i))\n    end\n    return result\nend", "\tlocal prefixes = {}\n\
    \tfor i = 1, string.len(string) do\n\t\ttable.insert(prefixes, string.sub(string,\
    \ 1, i))\n\tend\n\treturn prefixes\nend", "    local prefixes = {}\n    for i\
    \ = 1, #string do\n        table.insert(prefixes, string:sub(1, i))\n    end\n\
    \    return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n\
    \    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\nend",
  "\tlocal result = {}\n\tlocal function add_prefix(i)\n\t\tlocal prefix = string:sub(1,\
    \ i)\n\t\ttable.insert(result, prefix)\n\t\tif i < #string then\n\t\t\tadd_prefix(i\
    \ + 1)\n\t\tend\n\tend\n\tadd_prefix(1)\n\treturn result\nend", "\tlocal prefixes\
    \ = {}\n\tfor i = 1, #string do\n\t\tlocal prefix = string:sub(1, i)\n\t\tprefixes[i]\
    \ = prefix\n\tend\n\treturn prefixes\nend", "    local prefixes = {}\n    for\
    \ i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1, i)\n    end\n\
    \    return prefixes\nend", "  return table.reverse(iterate_prefixes(string))\n\
    end", "    local r = {}\n    for i = 1, #string do\n        r[#r + 1] = string:sub(1,\
    \ i)\n    end\n    return r\nend", "    local result = {}\n    for i = 1, #string\
    \ do\n        result[#result + 1] = string:sub(1, i)\n    end\n    return result\n\
    end", "\tlocal t = {}\n\tfor i = 1, #string do\n\t\tt[#t + 1] = string:sub(1,\
    \ i)\n\tend\n\treturn t\nend", "    local ret = {}\n    local i = 1\n    while\
    \ true do\n        ret[i] = string:sub(1, i)\n        i = i + 1\n        if i\
    \ > #string then break end\n    end\n    return ret\nend", "    local length =\
    \ string.len(string)\n    local output = {}\n    for i = 1, length do\n      \
    \  output[i] = string.sub(string, 1, i)\n    end\n    return output\nend", "\t\
    local result = {}\n\tlocal len = #string\n\tfor i = 1, len do\n\t\ttable.insert(result,\
    \ string:sub(1,i))\n\tend\n\treturn result\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    local prefix = string:sub(1, i)\n    table.insert(prefixes,\
    \ prefix)\n  end\n  return prefixes\nend", "    local prefixes = {}\n    for length=1,#string\
    \ do\n        table.insert(prefixes, string:sub(1, length))\n    end\n    return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string:sub(1, i)\n  end\n  return prefixes\nend", "    local prefixes\
    \ = {}\n    for i = 1, #string do\n        prefixes[#prefixes + 1] = string:sub(1,\
    \ i)\n    end\n    return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[#prefixes + 1] = string:sub(1, i)\n  end\n  return\
    \ prefixes\nend", "\tlocal out = {}\n\tfor i = 1, #string do\n\t\ttable.insert(out,\
    \ string:sub(1, i))\n\tend\n\treturn out\nend", "  local len = string.len(string)\n\
    \  local prefs = {}\n  for i = 1, len do\n    table.insert(prefs, string.sub(string,\
    \ 1, i))\n  end\n  return prefs\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
