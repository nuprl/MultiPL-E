name: HumanEval_103_rounded_avg
language: lua
prompt: "-- You are given two positive integers n and m, and your task is to compute\
  \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
  \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
  \ than m, return -1.\n-- Example:\nlocal function rounded_avg(n, m)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
  \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
  \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n   \
  \ lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
  \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
  \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
  \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
  \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
  \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   if n > m then return -1 end\n   local sum = 0\n   for i = n, m do\n\
    \      sum = sum + i\n   end\n   return string.format(\"%b\", math.floor(sum /\
    \ (m - n + 1) + 0.5))\nend", "    if n > m then return -1 end\n    local sum =\
    \ 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return math.floor(sum\
    \ / (m - n + 1) + 0.5)\nend", "    if n > m then return -1 end\n    local sum\
    \ = 0\n    for k = n, m do\n        sum = sum + k\n    end\n    return dec2bin(math.floor(sum\
    \ / (m - n + 1) + 0.5))\nend", "    if n > m then\n        return -1\n    end\n\
    \    return to_binary(math.floor((n + m) / 2))\nend", "  local sum = 0\n  for\
    \ i = n, m do\n    sum = sum + i\n  end\n  return math.floor(sum / (m - n + 1))\n\
    end", "  if n > m then return -1 end\n  local avg = (n + m) / 2\n  return string.format(\"\
    %b\", math.floor(avg))\nend", "    if n > m then return -1 end\n    local sum\
    \ = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n    return tonumber(tostring(avg), 2)\nend", "    if n\
    \ > m then return -1 end\n    local sum = 0\n    for i = n, m do\n        sum\
    \ = sum + i\n    end\n    return to_binary(math.floor(sum / (m - n + 1) + 0.5))\n\
    end", "    if n > m then return -1 end\n    local sum = 0\n    for i = n, m do\n\
    \        sum = sum + i\n    end\n    return string.format('%b', math.floor(sum\
    \ / (m - n + 1) + 0.5))\nend", "    if n > m then\n        return -1\n    end\n\
    \    local x = math.floor((n + m) / 2)\n    local result = {}\n    while x > 0\
    \ do\n        table.insert(result, x % 2)\n        x = math.floor(x / 2)\n   \
    \ end\n    return table.concat(result)\nend", "  local sum = 0\n  for i = n, m\
    \ do\n    sum = sum + i\n  end\n  return math.floor(sum / (m - n + 1))\nend",
  "    if n > m then\n        return -1\n    end\n    local l, r = math.floor((n +\
    \ m) / 2), math.ceil((n + m) / 2)\n    return l == r and {l} or {l, r}\nend",
  "  return math.floor((n + m) / 2)\nend", "    assert(n >= 0 and m >= 0)\n    return\
    \ (n > m) and -1 or math.floor((n + m) / 2 + 0.5)\nend", "    local avg = math.floor((n\
    \ + m) / 2)\n    local binary = ''\n    while avg > 0 do\n        if avg % 2 ==\
    \ 0 then\n            binary = '0' .. binary\n        else\n            binary\
    \ = '1' .. binary\n        end\n        avg = math.floor(avg / 2)\n    end\n \
    \   return binary\nend", "  local avg = math.floor((n + m) / 2)\n  if avg < n\
    \ then\n    return -1\n  end\n  return avg\nend", "\tlocal n, m = n or 0, m or\
    \ 0\n\tlocal avg = math.floor((n + m) / 2)\n\treturn avg\nend", "    local avrg\
    \ = math.floor((n + m) / 2)\n    return string.format(\"%b\", avrg)\nend", " \
    \ return math.floor((n + m) / 2)\nend", "  if n > m then return -1 end\n  local\
    \ sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  return round(sum / (m\
    \ - n + 1))\nend", "    if n>m then return -1 end\n    local mean = math.floor((n+m)/2)\n\
    \    local bin = bin(mean)\n    return tonumber(bin)\nend", "  if n > m then\n\
    \    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  local avg = sum / (#{n..m})\n  return avg:round()\nend", '  local avg
    = math.floor((n + m) / 2)', "    if n > m then return -1 end\n    return math.floor((n\
    \ + m) / 2)\nend", "    local sum = 0\n    for i = n, m do\n        sum = sum\
    \ + i\n    end\n    local avg = (sum / (m - n + 1))\n    local rounded = math.floor(avg\
    \ + 0.5)\n    return string.format(\"%b\", rounded)\nend", "    local result =\
    \ math.floor((n + m) / 2)\n    return string.format(\"%x\", result)\nend", " \
    \ return tonumber(string.format(\"%b\", math.floor((n + m) / 2 + 0.5)))\nend",
  end, "  local avg = math.floor((n + m) / 2)\n  if avg == math.floor(avg) then\n\
    \    return string.format(\"%b\", avg)\n  else\n    return string.format(\"%b\"\
    , math.floor(avg))\n  end\nend", "    local s = 0\n    for i = n, m do\n     \
    \   s = s + i\n    end\n    local t = math.floor(s / (m - n + 1) + 0.5)\n    return\
    \ t > 0 and bit.tohex(t) or -1\nend", "    return n > m and -1 or math.floor((n\
    \ + m) / 2)\nend", "\nend", "    -- Your code here\n    local ans = 0\n    if\
    \ n>m then\n        return -1\n    end\n    for i=n,m do\n        ans = ans +\
    \ i\n    end\n    return math.floor(ans / (m-n+1))\nend", "\tlocal function to_bin(n)\n\
    \t\tlocal b = {}\n\t\twhile n > 0 do\n\t\t\tlocal rest = n % 2\n\t\t\ttable.insert(b,\
    \ 1, rest)\n\t\t\tn = (n - rest) / 2\n\t\tend\n\t\treturn b\n\tend\n\tif n > m\
    \ then return -1 end\n\tlocal sum = n\n\tfor i = n + 1, m do\n\t\tsum = sum +\
    \ i\n\tend\n\tlocal avg = math.floor(sum / (m - n + 1) + 0.5)\n\treturn to_bin(avg)\n\
    end", "    local k = math.floor((n + m) / 2 + 0.5)\n    if n > m then return -1\
    \ end\n    return k, string.format(\"%b\", k)\nend", "  local a = math.floor((n\
    \ + m) / 2)\n  local b = base.tonumber(a, 10)\n  return b\nend", "    if n > m\
    \ then return -1 end\n    return {math.round( (n + m) / 2 )}\nend", "    return\
    \ -1\nend", "  local x = math.floor((n + m) / 2)\n  return x\nend", "    if n\
    \ > m then return -1 end\n    return tobinary(math.floor((n + m) / 2))\nend",
  "  if n > m then\n    return -1\n  end\n  return tonumber(tostring(math.floor((n\
    \ + m) / 2)), 2)\nend", "  if n > m then return -1 end\n  local total = 0\n  for\
    \ i = n, m do\n    total = total + i\n  end\n  return to_binary(math.floor(total\
    \ / (m - n + 1) + 0.5))\nend", "    -- Code here\nend", "    -- ++++++++++++++++++++++\
    \ code goes here +++++++++++++++++++++++++++++++\n    local s = 0\n    local c\
    \ = 0\n    for i = n, m do\n        s = s + i\n        c = c + 1\n    end\n  \
    \  local r = math.floor(s / c + 0.5)\n    return r ~= 0 and string.format(\"%b\"\
    , r) or \"-1\"\n    -- +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++\n\
    end", "    -- your code here\nend", "\tlocal avg = math.floor((n + m) / 2 + 0.5)\n\
    \treturn avg >= n and avg <= m and tostring(avg, 2) or -1\nend", "\tlocal r =\
    \ (n + m) / 2\n\treturn math.floor(r + 0.5)\nend", "    if n > m then return -1\
    \ end\n    local s = 0\n    for i = n, m do\n        s = s + i\n    end\n    return\
    \ tonumber(string.format(\"%o\", math.floor(s / (m - n + 1) + 0.5)))\nend", " \
    \   local s = math.floor((n + m) / 2)\n    return s == 0 and 0 or tonumber(tostring(s),\
    \ 2)\nend", "  if n > m then return -1 end\n  local avg = (n + m) / 2\n  local\
    \ int_avg = math.floor(avg + 0.5)\n  return string.format(\"%x\", int_avg)\nend",
  "    -- your solution here\nend", "  -- your code here\n  local sum = 0\n  local\
    \ count = 0\n  if n > m then\n    return -1\n  end\n  for i = n, m do\n    sum\
    \ = sum + i\n    count = count + 1\n  end\n  local avg = sum / count\n  local\
    \ rounded = math.floor(avg + 0.5)\n  return to_binary(rounded)\nend", "\t-- body\n\
    \tlocal n = n\n\tlocal m = m\n\tlocal sum = n + m\n\tlocal average = sum / 2\n\
    \tlocal rounded = math.floor(average + 0.5)\n\tlocal binary = tostring(rounded)\n\
    \treturn binary\nend", "  if n > m then return -1 end\n  local ret = (n + m) /\
    \ 2\n  ret = ret % 1 >= 0.5 and ret + 1 or ret\n  return num_to_bin(ret)\nend",
  "    if n > m then\n        return -1\n    end\n    local sum = 0\n    for i = n,\
    \ m do\n        sum = sum + i\n    end\n    return math.floor(sum / (m - n + 1))\n\
    end", "  local avg = math.floor((n + m) / 2)\n  return math.floor(avg % 1 + avg)\n\
    end", "    if n > m then\n        return -1\n    end\n    local sum = 0\n    for\
    \ i = n, m do\n        sum = sum + i\n    end\n    local average = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n    local result = tonumber(string.format(\"%o\", average))\n\
    \    return result\nend", "    -- Gives the average of n and m rounded down, then\
    \ converted to binary.\n    -- If n is greater than m, return -1.\n    -- Example:\n\
    \    -- >>> n = 10\n    -- >>> m = 5\n    -- >>> avg = 7\n    -- >>> binary_avg\
    \ = 0b111\n    if n > m then\n        return -1\n    end\n    local avg = math.floor((n\
    \ + m) / 2)\n    local bin_avg = math.floor(math.log(avg) / math.log(2)) + 1\n\
    \    return bin_avg\nend", "  if n > m then return -1 end\n  local sum = 0\n \
    \ for i = n, m do\n    sum = sum + i\n  end\n  return math.floor(sum / (m - n\
    \ + 1) + 0.5)\nend", "  -- your code here\nend", "    local total = 0\n    for\
    \ i = n, m do\n        total = total + i\n    end\n    local avg = math.floor(total\
    \ / (m - n + 1) + 0.5)\n    return tonumber(avg, 2)\nend", "    if n > m then\n\
    \        return -1\n    end\n    local sum = 0\n    for i = n, m do\n        sum\
    \ = sum + i\n    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n  \
    \  return tonumber(avg, 2)\nend", "    local n_m = n + m\n    local n_m_2 = n_m\
    \ / 2\n    local n_m_2_round = math.floor(n_m_2 + 0.5)\n    return n_m_2_round\n\
    end", "    -- This works, but obviously is not the most elegant way\n    -- return\
    \ tonumber(tostring(math.floor((n + m) / 2)):reverse(), 2)\n    return n > m and\
    \ -1 or tonumber(string.reverse(tonumber(math.floor((n + m) / 2), 2)))\nend",
  "  if n > m then return -1 end\n  return math.floor((n + m) / 2)\nend", "    --[[\n\
    \        You may use the following test code to check your answer.\n        local\
    \ answer = rounded_avg(5, 8)\n        assert(answer == \"110\")\n    --]]\nend",
  "  if (n > m) then\n    return -1\n  end\n  return to_binary(math.floor((n + m)\
    \ / 2))\nend", "  local res = math.floor((n + m) / 2)\n  if n < m then\n    return\
    \ tonumber(string.format(\"%o\", res))\n  else\n    return -1\n  end\nend", " \
    \ if n > m then\n    return -1\n  end\n  return string.format('%b', math.floor((n\
    \ + m) / 2))\nend", "    local n, m = tonumber(n), tonumber(m)\n    local avg\
    \ = math.floor((n + m) / 2)\n    return string.format(\"%b\", avg)\nend", "\t\
    -- your code goes here\nend", "    if n > m then return -1 end\n    local avg\
    \ = (n + m) / 2\n    local rounded = round(avg)\n    return dec2bin(rounded)\n\
    end", "\tif n > m then return -1 end\n\tlocal sum = n\n\tfor i = n + 1, m do\n\
    \t\tsum = sum + i\n\tend\n\treturn to_binary(sum / (m - n + 1))\nend", "  local\
    \ average = math.floor((n + m) / 2)\n  return average, tonumber(tostring(average),\
    \ 2)\nend", "    return math.floor((n + m) / 2)\nend", "    return n <= m and\
    \ math.floor((n + m) / 2) or -1\nend", "    if n > m then\n        return -1\n\
    \    end\n    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n\
    \    return math.floor(sum / (m - n + 1))\nend", end, "  if n > m then return\
    \ -1 end\n  return math.floor((n + m) / 2)\nend", "    -- TODO: Your code here\n\
    end", "    if n > m then return -1 end\n    local avg = 0\n    for i = n, m do\n\
    \        avg = avg + i\n    end\n    avg = bit32.bnot(bit32.lshift(bit32.band(avg,\
    \ -avg), 1)) / bit32.lshift(m - n + 1, 1)\n    return bit32.to_string(math.floor(avg\
    \ + 0.5), 2)\nend", "\tlocal res = (n + m) / 2\n\treturn string.format(\"%0b\"\
    , math.floor(res + 0.5))\nend\nassert(rounded_avg(10, 12) == \"1011\")\nassert(rounded_avg(0,\
    \ 0) == \"0\")\nassert(rounded_avg(10, 12) == \"1011\")\nassert(rounded_avg(10,\
    \ 14) == \"1100\")\nassert(rounded_avg(10, 16) == \"1101\")\nassert(rounded_avg(10,\
    \ 20) == \"1110\")\nassert(rounded_avg(10, 24) == \"1111\")\nassert(rounded_avg(10,\
    \ 26) == \"10010\")\nassert(rounded_avg(100, 110) == \"100100\")\nassert(rounded_avg(100,\
    \ 100) == \"100000\")\nassert(rounded_avg(100, 102) == \"100010\")\nassert(rounded_avg(100,\
    \ 104) == \"100011\")\nassert(rounded_avg(100, 108) == \"100100\")\nassert(rounded_avg(100,\
    \ 112) == \"100101\")\nassert(rounded_avg(100, 114) == \"100110\")\nassert(rounded_avg(100,\
    \ 118) == \"100111\")\nassert(rounded_avg(100, 122) == \"101000\")\nassert(rounded_avg(100,\
    \ 126) == \"101001\")\nassert(rounded_avg(100, 130) == \"101010\")\nassert(rounded_avg(100,\
    \ 134) == \"101011\")\nassert(rounded_avg(100, 138) == \"101100\")\nassert(rounded_avg(100,\
    \ 142) == \"101101\")\nassert(rounded_avg(100, 146) == \"101110\")\nassert(rounded_avg(100,\
    \ 150) == \"101111\")\nassert(rounded_avg(100, 152) == \"110000\")\nassert(rounded_avg(100,\
    \ 156) == \"110001\")\nassert(rounded_avg(100, 160) == \"110010\")\nassert(rounded_avg(100,\
    \ 164) == \"110011\")\nassert(rounded", "\tlocal sum = 0\n\tfor i = n, m do\n\t\
    \tsum = sum + i\n\tend\n\tlocal avg = math.floor(sum / (m - n + 1) + 0.5)\n\t\
    return bin_to_number(number_to_bin(avg))\nend", "\tlocal avg = math.floor((n +\
    \ m) / 2)\n\treturn avg\nend", "   local r = math.floor((n + m) / 2 + 0.5)\n \
    \  if n <= m then return math.tointeger(r) end\n   return -1\nend", "    return\
    \ string.format(\"%b\", math.floor((n + m) / 2 + 0.5))\nend", "    -- a whole\
    \ number is returned and\n    -- there is only 1 decimal place for an average.\n\
    \    -- then, it can be rounded with round() or math.floor(a+0.5)\n    -- result\
    \ should be positive, but negative when n>m\n    -- '>>' can be applied to positive\
    \ numbers only\n    return n<=m and (math.floor((n+m)*0.5)+0.5)>>0 or -1\nend",
  "  return -1\nend", "  -- your code here\nend", "    if n > m then return -1 end\n\
    \    local avg = math.floor((n + m) / 2)\n    return string.format(\"%b\", avg)\n\
    end", "    local total = 0\n    local count = 0\n    for i = n, m do\n       \
    \ total = total + i\n        count = count + 1\n    end\n    return (total % count\
    \ == 0) and (total / count) or (total / count + 1)\nend", "  if n > m then\n \
    \   return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum = sum + i\n\
    \  end\n  local avg = sum/(m-n+1)\n  return tonumber(avg + 0.5)\nend", "  local\
    \ x = math.floor((n + m) / 2 + 0.5)\n  if n > m then return -1 end\n  return string.format(\"\
    %b\", x)\nend", "    return n > m and -1 or math.floor((n + m) / 2)\nend", " \
    \   if n > m then return -1 end\n    local f = math.floor\n    local r = math.round\n\
    \    local s = math.sum\n    local a = f(n/2) + f(m/2)\n    local b = r(n/2) +\
    \ r(m/2)\n    local c = a + (b - s(a, b))/2\n    local d = c + 0.5\n    return\
    \ d, d and d .. '' or nil\nend", "    local avg = (n + m) / 2\n    return math.floor(avg\
    \ + 0.5)\nend", end, "    local res = math.floor((n + m) / 2)\n    if res ~= n\
    \ and res ~= m then\n        return dec2bin(res)\n    else\n        return -1\n\
    \    end\nend", "\tlocal a, b = math.floor((n + m) / 2 + 0.5), 2 ^ math.floor(math.log(n\
    \ + m) / math.log(2) + 0.5)\n\treturn a <= 0 and 0 or b <= a and -1 or ((\"{0:b}\"\
    ):format(a):gsub(\"^0*\", \"\"))\nend\nassert(rounded_avg(2, 6) == \"101\")\n\
    assert(rounded_avg(1, 1000) == \"1111101000\")\nassert(rounded_avg(111, 8899)\
    \ == \"10001010100011\")\nassert(rounded_avg(5, 6) == \"1\")\nassert(rounded_avg(6,\
    \ 6) == \"0\")\nassert(rounded_avg(6, 5) == \"-1\")", "    if n > m then\n   \
    \     return -1\n    end\n    local avg = math.floor((n + m) / 2)\n    return\
    \ tonumber(tostring(avg), 2)\nend\nprint(rounded_avg(2, 3))  -- 2\nprint(rounded_avg(2,\
    \ 4))  -- 3\nprint(rounded_avg(3, 2))  -- -1\nprint(rounded_avg(6, 8))  -- 7\n\
    print(rounded_avg(0, 0))  -- 0\nprint(rounded_avg(1, 0))  -- -1", "  -- compute\
    \ the average of the integers from n through m (including n and m)\n  -- round\
    \ the answer to the nearest integer and convert that to binary\n  -- if n is greater\
    \ than m, return -1.\n  -- your code goes here\nend", "    if n > m then\n   \
    \     return -1\n    end\n    local num_int = m - n + 1\n    local avg = (n +\
    \ m) * num_int / 2\n    local avg_rounded = math.floor(avg + 0.5)\n    return\
    \ string.format(\"%b\", avg_rounded)\nend", "    return (n + m) / 2 + 0.5\nend\n\
    assert(rounded_avg(1, 5) == 3)\nassert(rounded_avg(10, 5) == -1)", "    return\
    \ n > m and -1 or (n + m) >> 1\nend", "  if n > m then return -1 end\n  return\
    \ math.floor((n + m) / 2)\nend", "    local avg = math.floor((n + m) / 2)\n  \
    \  return string.format(\"%b\", avg)\nend", "  return bits(math.floor((n + m)\
    \ / 2))\nend", "    local rv = math.floor((n + m) / 2)\n    if n > m then return\
    \ -1 end\n    return rv\nend", "  -- your code here\nend", "\tlocal result = 0\n\
    \tfor i = n, m do\n\t\tresult = result + i\n\tend\n\treturn result/(m-n+1)\nend",
  "  -- your code goes here\n  local avg = 0\n  if n > m then return -1 end\n  for\
    \ i = n, m do\n    avg = avg + i\n  end\n  avg = math.floor(avg / (m - n + 1))\n\
    \  return string.format(\"%b\", avg)\nend", "    local avg = n + m / 2\n    return\
    \ avg\nend", "    if n > m then return -1 end\n    local sum = n\n    for i =\
    \ n + 1, m do\n        sum = sum + i\n    end\n    local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n    return (avg == 0 and 0 or '') .. avg:tobinary()\n\
    end", "    return math.floor((n + m) / 2)\nend", "    -- your code here\nend",
  "    if n > m then\n        return -1\n    end\n    return math.floor((n + m) /\
    \ 2)\nend\nassert(rounded_avg(1, 1) == 1)\nassert(rounded_avg(3, 1) == -1)\nassert(rounded_avg(3,\
    \ 8) == 5)\nassert(rounded_avg(100, 1000) == 550)\nassert(rounded_avg(0, 0) ==\
    \ 0)\nassert(rounded_avg(2, 3) == 2)\nassert(rounded_avg(0, 2) == 1)", "    if\
    \ n > m then return -1 end\n    local sum = 0\n    for i = n, m do\n        sum\
    \ = sum + i\n    end\n    local avg = math.floor(sum / (m - n + 1) + 0.5)\n  \
    \  return string.format(\"%b\", avg)\nend", "  if n > m then return -1 end\n \
    \ local avg = math.floor((n + m) / 2)\n  local avg_bin = string.format(\"%08d\"\
    , avg)\n  return avg_bin\nend", "\tlocal t = 0\n\tfor i = n, m do\n\t\tt = t +\
    \ i\n\tend\n\tlocal ans = math.floor(t / (m - n + 1) + 0.5)\n\treturn (ans <=\
    \ 0) and -1 or string.format(\"%b\", ans)\nend\nassert(rounded_avg(1, 4) == \"\
    11\")\nassert(rounded_avg(1, 8) == \"111\")\nassert(rounded_avg(20, 30) == \"\
    11110\")\nassert(rounded_avg(30, 20) == -1)\nassert(rounded_avg(20, 20) == \"\
    11010\")\nassert(rounded_avg(10, 10) == \"1010\")\nassert(rounded_avg(2, 2) ==\
    \ \"10\")\nassert(rounded_avg(1, 2) == \"11\")\nassert(rounded_avg(1, 1) == \"\
    1\")\nassert(rounded_avg(7, 8) == \"111\")", "    local s = n + m\n    if n >\
    \ m then return -1 end\n    local d = m - n + 1\n    local avg = math.floor(s\
    \ / d)\n    return to_binary(avg)\nend\nassert(rounded_avg(4, 6) == '101')\nassert(rounded_avg(5,\
    \ 10) == '1110')\nassert(rounded_avg(10, 5) == -1)\nassert(rounded_avg(3, 8) ==\
    \ '1110')\nassert(rounded_avg(5, 5) == '101')\nassert(rounded_avg(4, 4) == '100')",
  "  local t = {}\n  for i = n, m do\n    table.insert(t, i)\n  end\n  local sum =\
    \ 0\n  for _, v in ipairs(t) do\n    sum = sum + v\n  end\n  local avg = math.floor(sum\
    \ / #t + 0.5)\n  return string.format(\"%b\", avg)\nend", "  local r = math.floor((n\
    \ + m) / 2 + 0.5)\n  return r, tobin(r)\nend", "  return ((n + m) / 2)\nend\n\
    print(rounded_avg(6, 4)) --> 5\nprint(rounded_avg(5, 6)) --> 5\nprint(rounded_avg(5,\
    \ 5)) --> 5\nprint(rounded_avg(5, 5.5)) --> 5\nprint(rounded_avg(4, 5)) --> 4\n\
    print(rounded_avg(4, 5.5)) --> 5\nprint(rounded_avg(4, 6)) --> 5\nprint(rounded_avg(4,\
    \ 6.5)) --> 6\nprint(rounded_avg(4, 7)) --> 6\nprint(rounded_avg(4, 7.5)) -->\
    \ 7\nprint(rounded_avg(4, 8)) --> 7\nprint(rounded_avg(4, 8.5)) --> 8\nprint(rounded_avg(4,\
    \ 9)) --> 8\nprint(rounded_avg(4, 9.5)) --> 9\nprint(rounded_avg(4, 10)) --> 9\n\
    print(rounded_avg(4, 10.5)) --> 10\nprint(rounded_avg(4, 11)) --> 10\nprint(rounded_avg(4,\
    \ 11.5)) --> 11\nprint(rounded_avg(4, 12)) --> 11\nprint(rounded_avg(4, 12.5))\
    \ --> 12\nprint(rounded_avg(4, 13)) --> 12\nprint(rounded_avg(4, 13.5)) --> 13\n\
    print(rounded_avg(4, 14)) --> 13\nprint(rounded_avg(4, 14.5)) --> 14\nprint(rounded_avg(4,\
    \ 15)) --> 14\nprint(rounded_avg(4, 15.5)) --> 15\nprint(rounded_avg(4, 16)) -->\
    \ 15\nprint(rounded_avg(4, 16.5)) --> 16\nprint(rounded_avg(4, 17)) --> 16\nprint(rounded_avg(4,\
    \ 17.5)) --> 17\nprint(rounded_avg(4, 18)) --> 17\nprint(rounded_avg(4, 18.5))\
    \ --> 18\nprint(rounded_avg(4, 19)) --> 18\nprint(rounded_avg", "    return 0\n\
    end", "    local avg = (n + m) / 2\n    return math.floor(avg + 0.5)\nend", " \
    \   return math.floor((n + m) / 2)\nend", "\tlocal res = math.floor((n + m) /\
    \ 2)\n\tres = numToBinary(res)\n\treturn res\nend", "\tif n > m then\n\t\treturn\
    \ -1\n\tend\n\tlocal sum = 0\n\tfor i = n, m do\n\t\tsum = sum + i\n\tend\n\t\
    local avg = sum / (m - n + 1)\n\treturn math.floor(avg + 0.5)\nend\nprint(rounded_avg(2,\
    \ 6))", "    -- find average of n and m\n    local avg = (n + m) / 2", "  if n\
    \ > m then return -1 end\n  local avg = math.floor((n + m) / 2)\n  return math.floor(avg),\
    \ string.format(\"%x\", avg)\nend", "    local avg = math.floor((n + m) / 2)\n\
    \    return (avg ~= 0) and (string.format(\"%b\", avg)) or \"0\"\nend", "\tlocal\
    \ avg = math.floor((n + m) / 2)\n\tlocal bin = string.format(\"%b\", avg)\n\t\
    return bin\nend", "    local sum = n + m\n    return round(sum / 2)\nend", "\t\
    local result = math.floor((n + m) / 2 + 0.5)\n\tlocal binary = {}\n\twhile result\
    \ > 0 do\n\t\ttable.insert(binary, result % 2)\n\t\tresult = math.floor(result\
    \ / 2)\n\tend\n\treturn tonumber(table.concat(binary, \"\"))\nend\nprint(rounded_avg(1,2))\n\
    print(rounded_avg(2,3))\nprint(rounded_avg(33,37))\nprint(rounded_avg(38,37))\n\
    print(rounded_avg(37,38))\nprint(rounded_avg(38,38))\nprint(rounded_avg(1,2))",
  "    if n > m then\n        return -1\n    end\n    return math.floor((n + m) /\
    \ 2)\nend", "    if n > m then return -1 end\n    return math.floor((n + m) /\
    \ 2)\nend\nprint(rounded_avg(0,0)) -- 0\nprint(rounded_avg(0,1)) -- 0\nprint(rounded_avg(1,0))\
    \ -- -1\nprint(rounded_avg(2,3)) -- 2\nprint(rounded_avg(2,2)) -- 2\nprint(rounded_avg(2,9))\
    \ -- 5\nprint(rounded_avg(8,8)) -- 8\nprint(rounded_avg(8,9)) -- 8\nprint(rounded_avg(9,8))\
    \ -- -1", "  local avg = math.floor((n + m) / 2)\n  return avg, \"0b\" .. string.format(\"\
    %b\", avg)\nend", "\tif n > m then\n\t\treturn -1\n\tend\n\tlocal sum = 0\n\t\
    for i = n, m do\n\t\tsum = sum + i\n\tend\n\treturn math.floor(sum / (m - n +\
    \ 1) + 0.5)\nend", "\tif n > m then return -1 end\n\tlocal t = {}\n\tfor i = n,\
    \ m do\n\t\ttable.insert(t, i)\n\tend\n\treturn math.floor(sum(t) / #t)\nend",
  "  if n > m then\n    return -1\n  end\n  -- Sum the integers from n to m.\n  local\
    \ sum = n\n  for i = n + 1, m do\n    sum = sum + i\n  end\n  -- Round the average.\n\
    \  local avg = math.floor(sum / (m - n + 1) + 0.5)\n  -- Convert it to binary.\n\
    \  local binary = string.format(\"%b\", avg)\n  return binary\nend", "    local\
    \ sum = n + m\n    if n > m then return -1 end\n    if m - n == 1 then return\
    \ n end\n    return math.floor((sum + 1) / 2)\nend\nassert(rounded_avg(1, 1) ==\
    \ 1)\nassert(rounded_avg(5, 7) == 6)\nassert(rounded_avg(7, 4) == -1)\nassert(rounded_avg(2,\
    \ 3) == 2)\nassert(rounded_avg(1, 6) == 4)\nassert(rounded_avg(40, 20) == -1)",
  "    local sum = n + m\n    local avg = math.floor(sum / 2 + 0.5)\n    return avg\n\
    end", "    return n > m and -1 or math.floor((n + m) / 2)\nend", "    local avg\
    \ = math.floor((n + m) / 2)\n    return avg, tobinary(avg)\nend", "\tif n > m\
    \ then\n\t\treturn -1\n\tend\n\treturn string.format(\"%b\", math.floor((n + m)\
    \ / 2 + 0.5))\nend", "    if (n > m) then\n        return -1\n    end\n    local\
    \ result = math.ceil((n + m) / 2)\n    return tostring(result, 2)\nend", "   \
    \ local num = math.floor((n + m) / 2 + 0.5)\n    return num == -1 and -1 or num..'0b'\n\
    end", "  if n > m then return -1 end\n  return n\nend", "    return math.floor((n\
    \ + m) / 2)\nend", "    -- code goes here \n    if n > m then\n      return -1\n\
    \    end\n    \n    local average = math.floor((n + m) / 2)\n    return tonumber(average,\
    \ 2)\nend", "    local sum = (n + m) / 2\n    if math.floor(sum) ~= sum then\n\
    \        sum = math.floor(sum + 0.5)\n    end\n    return sum == -1 and -1 or\
    \ string.format(\"%b\", sum)\nend", "    return -1\nend", "  if n > m then\n \
    \   return -1\n  end\n  local avg = (n + m) / 2\n  local avg_rounded = math.floor(avg\
    \ + 0.5)\n  return string.format(\"%x\", avg_rounded)\nend", "    local result\
    \ =  math.floor((n + m) / 2)\n    if (n > m) then\n        return -1\n    end\n\
    \    if (result < 0) then\n        return -1\n    end\n    return result\nend",
  "\tlocal x = (n + m) / 2\n\treturn math.floor(x + 0.5)\nend", "  -- your code goes\
    \ here\nend", "  if n > m then\n    return -1\n  end\n  local sum = 0\n  for i\
    \ = n, m do\n    sum = sum + i\n  end\n  return string.format(\"%b\", math.floor(sum\
    \ / (m - n + 1) + 0.5))\nend", "  -- body\nend", "    if n > m then\n        return\
    \ -1\n    end\n    -- your code here\nend", "    if n > m then\n        return\
    \ -1\n    end\n    local avg = math.floor((n + m) / 2)\n    return string.format(\"\
    %b\", avg)\nend", "    local avg = math.floor((n + m) / 2)\n    return avg, string.format(\"\
    %b\", avg)\nend", "  --\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ avg = math.floor((n + m) / 2)\n  return string.format(\"%b\", avg)\nend", "\t\
    if n > m then return -1 end\n\treturn round(floor((n + m) / 2))\nend", "  return\
    \ n > m and -1 or bit.rshift(n + m, 1)\nend", "    if (n > m) then return -1 end\n\
    \    local s = 0\n    for i = n, m do\n        s = s + i\n    end\n    return\
    \ math.floor(s / (m - n + 1) + 0.5)\nend", "    local av = math.floor((n + m)\
    \ / 2)\n    local bin = string.format(\"%x\", av)\n    local hex = string.format(\"\
    %o\", av)\n    local dec = string.format(\"%b\", av)\n    return bin, hex, dec\n\
    end", "    local sum = 0\n    local count = 0\n    while n <= m do\n        sum\
    \ = sum + n\n        count = count + 1\n        n = n + 1\n    end\n    return\
    \ math.floor(sum / count)\nend", "  if n > m then\n    return -1\n  end\n  local\
    \ sum = 0\n  for i = n, m do\n    sum = sum + i\n  end\n  local avg = math.floor(sum\
    \ / (m - n + 1) + 0.5)\n  return math.floor(avg), toBinary(avg)\nend", "    if\
    \ n > m then return -1 end\n    local floor = math.floor(n + (m - n) / 2)\n  \
    \  return (math.floor(floor / 2) + floor % 2)\nend\nassert(rounded_avg(6, 8) ==\
    \ 7)\nassert(rounded_avg(7, 8) == 7)\nassert(rounded_avg(2, 3) == 2)\nassert(rounded_avg(2,\
    \ 2) == 2)\nassert(rounded_avg(8, 7) == -1)", "  local result = math.floor((n\
    \ + m) / 2)\n  if n > m then\n    return -1\n  else\n    return string.format(\"\
    %b\", result)\n  end\nend", "\tif n > m then\n\t\treturn -1\n\tend\n\tlocal total\
    \ = 0\n\tfor i = n, m do\n\t\ttotal = total + i\n\tend\n\treturn dec2bin(math.floor(total\
    \ / (m - n + 1) + 0.5))\nend", "  local s = 0\n  for i = n, m do\n    s = s +\
    \ i\n  end\n  local avg = s / (m - n + 1)\n  return math.floor(avg + 0.5)\nend",
  "  if n > m then return -1 end\n  local r = math.floor((n + m) / 2 + 0.5)\n  return\
    \ to_binary(r)\nend", "    -- Your code here\nend", "  local av = math.floor((n\
    \ + m) / 2)\n  return av > m and -1 or (av .. 2)\nend", "    local avg = math.floor((n\
    \ + m) / 2 + 0.5) -- math.floor rounds to lower bound. + 0.5 rounds to higher\
    \ bound\n    return avg, avg:tobinary()\nend", "    local ret = 0\n    if (n >\
    \ m) then return -1 end\n    for i = n, m do\n        ret = ret + i\n    end\n\
    \    ret = bit32.rshift(ret, m - n + 1)\n    return bit32.tobinary(ret)\nend",
  "  local avg = math.floor((n + m) / 2)\n  local avg_binary = string.format(\"%x\"\
    , avg)\n  return avg_binary\nend", "    if n > m then return -1 end\n    local\
    \ s = math.floor((n + m) / 2)\n    return string.format(\"%x\", s)\nend", "  if\
    \ n > m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum\
    \ = sum + i\n  end\n  return tostring(math.floor(sum / (m - n + 1)))\nend", " \
    \ if n > m then\n    return -1\n  end\n  return math.tointeger(math.floor((n +\
    \ m) / 2))\nend", "  if n > m then\n    return -1\n  end\n  return tonumber(string.format(\"\
    %o\", math.floor((m + n) / 2)))\nend", "\treturn n > m and -1 or math.floor((n\
    \ + m) / 2)\nend", "  local  result = 0;\n  if (n > m) then\n    return -1;\n\
    \  end\n  result = (n + m) / 2;\n  return tostring(math.floor(result))\nend",
  "    if n > m then return -1 end\n    local sum = n + m\n    for i = n + 1, m -\
    \ 1 do\n        sum = sum + i\n    end\n    local round = sum / (m - n + 1)\n\
    \    local result = to_binary(round)\n    return result\nend\nassert(rounded_avg(4,\
    \ 6) == '101')\nassert(rounded_avg(4, 5) == '100')\nassert(rounded_avg(4, 4) ==\
    \ '100')\nassert(rounded_avg(3, 5) == '100')\nassert(rounded_avg(4, 5) == '100')\n\
    assert(rounded_avg(5, 6) == '110')\nassert(rounded_avg(3, 4) == '100')\nassert(rounded_avg(5,\
    \ 5) == '101')\nassert(rounded_avg(5, 6) == '110')\nassert(rounded_avg(6, 6) ==\
    \ '110')\nassert(rounded_avg(6, 5) == '-1')\nassert(rounded_avg(5, 4) == '-1')\n\
    assert(rounded_avg(3, 2) == '-1')\nassert(rounded_avg(3, 1) == '-1')\nassert(rounded_avg(0,\
    \ 1) == '-1')\nassert(rounded_avg(0, 0) == '-1')\nassert(rounded_avg(1, 0) ==\
    \ '-1')\nassert(rounded_avg(1, 1) == '1')\nassert(rounded_avg(1, 2) == '10')\n\
    assert(rounded_avg(1, 3) == '10')\nassert(rounded_avg(2, 3) == '10')\nassert(rounded_avg(2,\
    \ 2) == '10')\nassert(rounded_avg(3, 2) == '-1')\nassert(rounded_avg(3, 3) ==\
    \ '11')", "\nend\nassert(rounded_avg(2,6) == '100')\nassert(rounded_avg(2,5) ==\
    \ '11')\nassert(rounded_avg(5,2) == -1)\nassert(rounded_avg(5,5) == '1')\nassert(rounded_avg(16,10)\
    \ == -1)\nassert(rounded_avg(18,20) == '111')\nassert(rounded_avg(57,67) == '11101')\n\
    assert(rounded_avg(267,277) == '1000011')\nassert(rounded_avg(1024,1025) == '100000000000000000000001')\n\
    print('OK')", "    assert(is_number(n), \"n is not a number\")\n    assert(is_number(m),\
    \ \"m is not a number\")\n    local total = 0\n    local count = 0\n    if n >\
    \ m then\n        return -1\n    end\n    for i = n, m do\n        total = total\
    \ + i\n        count = count + 1\n    end\n    local avg = round(total / count)\n\
    \    return to_binary(avg)\nend", "  if (n > m) then return -1 end\n  return math.floor((n\
    \ + m) / 2 + 0.5)\nend", "    if n > m then return -1 end\n    return math.floor((m\
    \ + n) / 2)\nend", "    local avg = (n + m) / 2\n    return avg % 1 >= 0.5 and\
    \ avg + 1 or avg\nend", "  local avg = math.floor((n + m) / 2)\n  return math.floor(avg)\n\
    end", "  local n, m = tonumber(n) or 0, tonumber(m) or 0\n  local avg = math.floor((n\
    \ + m) / 2)\n  return avg\nend", "  -- your code here\n  if n > m then return\
    \ -1 end\n  local avg = math.floor((n + m) / 2)\n  return tonumber(avg, 2)\nend",
  "    local sum = 0\n    for i = n, m do\n        sum = sum + i\n    end\n    return\
    \ math.floor(sum / (m - n + 1))\nend", "   local a = math.floor((n + m) / 2)\n\
    \   return a, to_binary(a)\nend", "   local avg = (n + m) / 2\n   local quotient\
    \ = math.floor(avg + 0.5)\n   local nearest = math.floor(quotient)\n   if m <\
    \ n then return -1 end\n   return nearest\nend", "    local av = (n + m) / 2\n\
    \    local b = math.floor(av + 0.5)\n    return string.format(\"%b\", b)\nend",
  "  if n > m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n   \
    \ sum = sum + i\n  end\n  local avg = sum / (m - n + 1)\n  return convert_to_binary(math.floor(avg\
    \ + 0.5))\nend", end]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
