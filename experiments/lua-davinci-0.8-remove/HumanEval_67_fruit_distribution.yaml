name: HumanEval_67_fruit_distribution
language: lua
prompt: "-- In this task, you will be given a string that represents a number of apples\
  \ and oranges \n-- that are distributed in a basket of fruit this basket contains\
  \ \n-- apples, oranges, and mango fruits. Given the string that represents the total\
  \ number of \n-- the oranges and apples and an integer that represent the total\
  \ number of the fruits \n-- in the basket return the number of the mango fruits\
  \ in the basket.\n-- for examble:\nlocal function fruit_distribution(s, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fruit_distribution\n\
  \    lu.assertEquals(candidate('5 apples and 6 oranges', 19), 8)\n    lu.assertEquals(candidate('5\
  \ apples and 6 oranges', 21), 10)\n    lu.assertEquals(candidate('0 apples and 1\
  \ oranges', 3), 2)\n    lu.assertEquals(candidate('1 apples and 0 oranges', 3),\
  \ 2)\n    lu.assertEquals(candidate('2 apples and 3 oranges', 100), 95)\n    lu.assertEquals(candidate('2\
  \ apples and 3 oranges', 5), 0)\n    lu.assertEquals(candidate('1 apples and 100\
  \ oranges', 120), 19)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["   -- your code here\nend", "\tlocal total_fruits = string.len(s)\n\
    \tlocal mango_fruits = n - total_fruits\n\treturn mango_fruits\nend", "    local\
    \ s_table = {}\n    for i in string.gmatch(s, \"%d+\") do\n        table.insert(s_table,\
    \ i)\n    end\n    local total_fruit = 0\n    for _,v in pairs(s_table) do\n \
    \       total_fruit = total_fruit + tonumber(v)\n    end\n    local mango = n\
    \ - total_fruit\n    return mango\nend", "    local apples = tonumber(s:match(\"\
    %d+ apples\"))\n    local oranges = tonumber(s:match(\"%d+ oranges\"))\n    return\
    \ n - apples - oranges\nend", "\tlocal oranges = tonumber(s:match(\"%d+\"))\n\t\
    local apples = tonumber(s:match(\"%d+$\"))\n\treturn n - (oranges + apples)\n\
    end", -- s = "aabbccaabbccaabbccaaabbbccc", "    local apples = s:match('%d+ apples')\
    \ or ''\n    local oranges = s:match('%d+ oranges') or ''\n    local total = 0\n\
    \    if #apples > 0 then\n        total = total + apples:match('%d+')\n    end\n\
    \    if #oranges > 0 then\n        total = total + oranges:match('%d+')\n    end\n\
    \    return n - total\nend", "\tlocal apples = tonumber(s:match(\"[^ ]+\"))\n\t\
    local oranges = tonumber(s:match(\"[^ ]+$\"))\n\treturn n - apples - oranges\n\
    end", "    -- return the number of the mango fruit in the basket\n    -- your\
    \ code\n    local count_apple, count_orange = 0, 0\n    local arr = {}\n    local\
    \ fruit = 0\n    local j = 1\n    for i = 1, string.len(s) do\n        if string.sub(s,\
    \ i, i) == 'a' then\n            count_apple = count_apple + 1\n        elseif\
    \ string.sub(s, i, i) == 'o' then\n            count_orange = count_orange + 1\n\
    \        end\n    end\n    local count_mango = n - count_apple - count_orange\n\
    \    return count_mango\nend", "\tlocal apples = 0\n\tlocal oranges = 0\n\t\n\t\
    for i=1, #s do\n\t\tif s:sub(i, i) == \"a\" then\n\t\t\tapples = apples + 1\n\t\
    \telseif s:sub(i, i) == \"o\" then\n\t\t\toranges = oranges + 1\n\t\tend\n\tend\n\
    \t\n\treturn n - apples - oranges\nend", "\t-- body\n\t-- print(s)\n\t-- print(n)\n\
    \t-- step1: get apple number\n\tlocal apple_no = tonumber(string.sub(s, 1, 2))\n\
    \t-- print(apple_no)\n\t-- step2: get orange number\n\tlocal orange_no = tonumber(string.sub(s,\
    \ 4, 5))\n\t-- print(orange_no)\n\t-- step3: calculte mango number\n\tlocal mango_no\
    \ = n - apple_no - orange_no\n\t-- print(mango_no)\n\treturn mango_no\nend", "\t\
    -- define a function that returns the number of the mango fruits\n\treturn n -\
    \ (#s:gsub(\"[^a]\", \"\")) - (#s:gsub(\"[^o]\", \"\"))\nend", "\tlocal n_a =\
    \ tonumber(s:match('%d+'))\n\tlocal n_o = tonumber(s:match('%d+$'))\n\tlocal n_m\
    \ = n - n_a - n_o\n\treturn n_m\nend", "    -- your code here\n    local apples\
    \ = 0\n    local oranges = 0\n    for _, fruit in pairs(s:split(\",\")) do\n \
    \       local split = fruit:split(\":\")\n        if split[1] == \"apple\" then\n\
    \            apples = apples + tonumber(split[2])\n        elseif split[1] ==\
    \ \"orange\" then\n            oranges = oranges + tonumber(split[2])\n      \
    \  end\n    end\n    return n - apples - oranges\nend", "    local apples = 0;\n\
    \    local oranges = 0;\n    local mangoes = 0;\n    local i = 1;\n    while i\
    \ <= #s do\n        local c = string.sub(s, i, i);\n        if c == 'a' then\n\
    \            apples = apples + 1;\n        elseif c == 'o' then\n            oranges\
    \ = oranges + 1;\n        elseif c == 'm' then\n            mangoes = mangoes\
    \ + 1;\n        end\n        i = i + 1;\n    end\n    return n - apples - oranges;\n\
    end", "    local num_apples = 0\n    local num_oranges = 0\n    local num_mangoes\
    \ = 0\n    local apple_index = string.find(s, \"A\")\n    local orange_index =\
    \ string.find(s, \"O\")\n    if (apple_index ~= nil) then\n        if (orange_index\
    \ ~= nil) then\n            if (apple_index < orange_index) then\n           \
    \     num_apples = tonumber(string.sub(s, 1, apple_index - 1))\n             \
    \   num_oranges = tonumber(string.sub(s, orange_index, string.len(s)))\n     \
    \       else\n                num_apples = tonumber(string.sub(s, 1, orange_index\
    \ - 1))\n                num_oranges = tonumber(string.sub(s, apple_index, string.len(s)))\n\
    \            end\n        else\n            num_apples = tonumber(string.sub(s,\
    \ 1, apple_index - 1))\n            num_oranges = tonumber(string.sub(s, apple_index,\
    \ string.len(s)))\n        end\n    else\n        num_oranges = tonumber(string.sub(s,\
    \ 1, string.len(s)))\n    end\n    num_mangoes = n - num_apples - num_oranges\n\
    \    return num_mangoes\nend", "  \n  local apples = s:match('a+')\n  local oranges\
    \ = s:match('o+')\n  local mangoes = n - (apples:len() + oranges:len())\n  return\
    \ mangoes\n  \nend", "\tif type(s) ~= \"string\" or type(n) ~= \"number\" then\n\
    \t\treturn nil\n\tend\n\tlocal a = string.match(s, \"%d+\")\n\tlocal o = string.match(s,\
    \ \"%d+$\")\n\tif a and o then\n\t\treturn n - (a + o)\n\tend\n\treturn 0\nend",
  "end\nassert(fruit_distribution(\"a4a4a4a4a4\", 10) == 2)\nassert(fruit_distribution(\"\
    o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9o9",
  "\tlocal s = s:lower()\n\tlocal apple = string.match(s, 'apple')\n\tlocal orange\
    \ = string.match(s, 'orange')\n\tlocal number = tonumber(apple) + tonumber(orange)\n\
    \tlocal number = n - number\n\treturn number\nend", "   local n_oranges = tonumber(s:sub(1,\
    \ 2))\n   local n_apples = tonumber(s:sub(5, 7))\n   return n - n_oranges - n_apples\n\
    end", "    local s = s:lower()\n    local function find_and_calc(a, b)\n     \
    \   local index = s:find(a)\n        if not index then return 0 end\n        local\
    \ temp = tonumber(s:sub(index + 1, index + 2))\n        if not temp then return\
    \ 0 end\n        return temp\n    end\n    local apple_num = find_and_calc(\"\
    apple\", \"a\")\n    local orange_num = find_and_calc(\"orange\", \"o\")\n   \
    \ local mango_num = n - apple_num - orange_num\n    return mango_num > 0 and mango_num\
    \ or 0\nend\nprint(fruit_distribution(\"Apple_44or2anGE_23\", 69))", "\t-- local\
    \ oranges = tonumber(s:match(\"^%d+\"))\n\t-- local apples = tonumber(s:match(\"\
    %d+$\"))\n\t-- local sum = oranges + apples\n\t-- if oranges == nil or apples\
    \ == nil then\n\t-- \treturn nil\n\t-- end\n\t-- return n - sum\n\t-- or\n\tlocal\
    \ oranges, apples = tonumber(s:match(\"^%d+\")), tonumber(s:match(\"%d+$\"))\n\
    \treturn oranges and apples and n - oranges - apples\nend", "  return n - (tonumber(s:match('A(%d+)B'))\
    \ + tonumber(s:match('B(%d+)C')))\nend", "\treturn (n-s:len())/2\nend", "    local\
    \ apples = tonumber(s:match(\"(%d+)%s*apple\"))\n    local oranges = tonumber(s:match(\"\
    (%d+)%s*orange\"))\n    local mango = n - apples - oranges\n    return mango\n\
    end", "    -- body\n    local word = string.split(s, \":\")\n    local x = tonumber(word[1])\n\
    \    local y = tonumber(word[2])\n    local z = n - x - y\n    return z\nend",
  "    -- local total = 0\n    -- for char in s:gmatch('%a') do\n    --     if char\
    \ == 'o' then\n    --         total = total + 1\n    --     elseif char == 'a'\
    \ then\n    --         total = total + 1\n    --     end\n    -- end\n    -- return\
    \ n - total\n    return n - s:gsub('[oa]', ''):len()\nend", "    local s_len =\
    \ string.len(s)\n    local apple_n, orange_n = 0, 0\n    local orange_f, apple_f\
    \ = string.find(s, \"oranges\") \n    -- Orange first\n    if orange_f then\n\
    \        orange_n = tonumber(string.sub(s, 1, orange_f - 2))\n    end\n    --\
    \ Then apple\n    if apple_f then\n        apple_n = tonumber(string.sub(s, orange_f\
    \ + 7, s_len))\n    end\n    return n - (orange_n + apple_n)\nend", "    local\
    \ a_count = s:match('a+')\n    local o_count = s:match('o+')\n    if a_count ==\
    \ nil or o_count == nil then\n        return n\n    end\n    return n - (#a_count\
    \ + #o_count)\nend", "    local s = s:gsub(\"[a-z]\", \"\")\n    local a, o =\
    \ s:match(\"(%d+),(%d+)\")\n    return n - tonumber(a) - tonumber(o)\nend", " \
    \   local o, a = 0, 0\n    for e in s:gmatch('[oa]') do\n        if e == 'o' then\n\
    \            o = o + 1\n        else\n            a = a + 1\n        end\n   \
    \ end\n    return n - o - a\nend", "  -- code here\nend", "\nend", '', "    return\
    \ n - s:gsub(\"[^AaOo]\", \"\"):len()\nend", "\t-- body\nend", "    -- write your\
    \ code here\nend", "    -- body\n    local res = 0\n    local oranges = 0\n  \
    \  local apples = 0\n    local p1 = string.find(s, \"O\")\n    if p1 then oranges\
    \ = string.sub(s, 1, p1 - 1) end\n    local p2 = string.find(s, \"A\")\n    if\
    \ p2 then apples = string.sub(s, p1 + 1, p2 - 1) end\n    res = n - oranges -\
    \ apples\n    return res\nend", "    local nb_of_mangos = n - s:len()\n    return\
    \ nb_of_mangos\nend", "\t-- your code here\n\tlocal apples, oranges = s:match(\"\
    (%d+)a(%d+)o\")\n\treturn n - (tonumber(apples) + tonumber(oranges))\nend", " \
    \   local t = {}\n    local total = 0\n    for i = 1, #s do\n        t[s:sub(i,\
    \ i)] = true\n    end\n    for k, _ in pairs(t) do\n        total = total + 1\n\
    \    end\n    return n - total\nend", "\tlocal apples, oranges = s:match(\"(%d+).(%d+)\"\
    )\n\treturn n - (tonumber(apples) + tonumber(oranges))\nend", "  local fruits\
    \ = split(s, \",\")\n  local total = 0\n  for i = 1, #fruits do\n    total = total\
    \ + tonumber(fruits[i])\n  end\n  return n - total\nend", "    local a, o = 0,\
    \ 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'A' then\n            a =\
    \ a + 1\n        elseif s:sub(i, i) == 'O' then\n            o = o + 1\n     \
    \   end\n    end\n    return n - (a + o)\nend", "\tlocal a, o = string.match(s,\
    \ \"(%d+) apples, (%d+) oranges\")\n\ta, o = tonumber(a), tonumber(o)\n\treturn\
    \ n - a - o\nend", "  -- YOUR CODE GOES HERE\n  local a_sub = s:sub(1, s:find(\"\
    A\")-1)\n  local o_sub = s:sub(s:find(\"A\")+1, s:find(\"O\")-1)\n  local f =\
    \ s:sub(s:find(\"O\")+1, s:find(\"F\")-1)\n  a_sub = tonumber(a_sub)\n  o_sub\
    \ = tonumber(o_sub)\n  f = tonumber(f)\n  local sum = a_sub + o_sub + f\n  return\
    \ sum - n\nend", "\nend", "    local n_oranges, n_apples = s:match(\"(%d+) oranges\
    \ and (%d+) apples\")\n    if n_oranges and n_apples then\n        return n -\
    \ (n_oranges + n_apples)\n    end\nend", "\tlocal apples = tonumber(s:match(\"\
    ^(%d*) apples\"))\n\tlocal oranges = tonumber(s:match(\"^%d* apples and (%d*)\
    \ oranges\"))\n\tlocal mangoes = n - apples - oranges\n\treturn mangoes\nend",
  end, "  local num_a = 0\n  local num_o = 0\n  local num_m = 0\n  local num = 1\n\
    \  local result = 0\n  local i = 1\n  while (i <= string.len(s)) do\n    if string.sub(s,\
    \ i, i) == \"a\" then\n      num_a = num_a + num\n    elseif string.sub(s, i,\
    \ i) == \"o\" then\n      num_o = num_o + num\n    elseif string.sub(s, i, i)\
    \ == \"m\" then\n      num_m = num_m + num\n    elseif string.sub(s, i, i) ==\
    \ \" \" then\n      num = num * 10\n    end\n    i = i + 1\n  end\n  result =\
    \ n - (num_a + num_o + num_m)\n  return result\nend", "    local s_len = s:len()\n\
    \    local oranges = s:match(\"^[0-9]+\")\n    local apples = s:match(\"[0-9]+$\"\
    )\n    local mangoes = n - (oranges+apples)\n    return mangoes\nend", "\t-- Code\
    \ here\nend", "    -- get the number of oranges in the basket \n    local oranges\
    \ = tonumber(s:match(\"%d+\")) or 0\n    -- get the number of apples in the basket\
    \ \n    local apples = tonumber(s:match(\"%d+$\")) or 0\n    -- return the number\
    \ of the mango fruits in the basket \n    return n - oranges - apples\nend\nprint(fruit_distribution(\"\
    2 apples and 3 oranges\", 5)) --> 0\nprint(fruit_distribution(\"1 apple and 5\
    \ oranges\", 6)) --> 0\nprint(fruit_distribution(\"12 apples and 2 oranges\",\
    \ 14)) --> 0\nprint(fruit_distribution(\"12 apples and 2 oranges\", 15)) --> 1\n\
    print(fruit_distribution(\"2 apples and 3 oranges\", 8)) --> 3\nprint(fruit_distribution(\"\
    3 oranges and 5 apples\", 8)) --> 0", "   -- body\n   return 0\nend", "\tlocal\
    \ apples, oranges = 0, 0\n\tfor c in s:gmatch('%a') do\n\t\tif c == 'a' then apples\
    \ = apples + 1\n\t\telseif c == 'o' then oranges = oranges + 1\n\t\tend\n\tend\n\
    \treturn n - apples - oranges\nend", "\t-- write your code here\n\tif s == nil\
    \ or n == nil then\n\t\treturn nil\n\tend\n\tlocal a, o = s:match('(%d+), (%d+)')\n\
    \tif a == nil or o == nil then\n\t\treturn nil\n\tend\n\ta = tonumber(a)\n\to\
    \ = tonumber(o)\n\tif a == nil or o == nil then\n\t\treturn nil\n\tend\n\tif a\
    \ + o > n then\n\t\treturn nil\n\tend\n\treturn n - a - o\nend", "-- \treturn\
    \ 0\nend", "\tlocal a, o = string.match(s, '(%d+)%s+%D+%s+(%d+)')\n\treturn n\
    \ - (a + o)\nend", "-- your code here.\nend\nfruit_distribution(\"o2a2\", 6) -->\
    \ 2\nfruit_distribution(\"a1o1m1a1n1\", 6) --> 1\nfruit_distribution(\"o2a2m1a1n1\"\
    , 7) --> 1", "    local mango = 0\n    local orange = 0\n    local apple = 0\n\
    \    for i = 1, #s do\n        if (s:sub(i, i) == \"o\") then\n            orange\
    \ = orange + 1\n        elseif (s:sub(i, i) == \"a\") then\n            apple\
    \ = apple + 1\n        end\n    end\n    mango = n - (orange + apple)\n    return\
    \ mango\nend", "    local function filter(word)\n        local number = tonumber(word)\n\
    \        if number and number > 0 then return true end\n    end\n    local numbers\
    \ = table.pack(string.gmatch(s, '%d+'))\n    local totle = 0\n    for _, num in\
    \ ipairs(numbers) do\n        totle = totle + tonumber(num)\n    end\n    return\
    \ n - totle\nend", "    local a, o = 0, 0\n    -- here you should write the solution\n\
    \    return n - a - o\nend", "\nend", "  local ans, oranges, apples = 0, 0, 0\n\
    \  for c in s:gmatch\".\" do\n    if c == \"A\" then apples = apples + 1 end\n\
    \    if c == \"O\" then oranges = oranges + 1 end\n  end\n  ans = n - apples -\
    \ oranges\n  return ans\nend", "  local apples, oranges = 0, 0\n  for i=1, string.len(s)\
    \ do\n    if s:sub(i,i) == 'A' then\n      apples = apples + 1\n    elseif s:sub(i,i)\
    \ == 'O' then\n      oranges = oranges + 1\n    end\n  end\n  return n - apples\
    \ - oranges\nend", "\tlocal oranges = 0;\n\tlocal apples = 0;\n\tlocal count =\
    \ 0;\n\tlocal index = 0;\n\tlocal num = 0;\n\t--local str = \"\";\n\tlocal index_mango\
    \ = string.find(s, \"m\", 1, true);\n\tfor i = 1, string.len(s) do\n\t\tstr =\
    \ string.sub(s, i, i);\n\t\tif str == \"o\" then\n\t\t\toranges = oranges + 1;\n\
    \t\telseif str == \"a\" then\n\t\t\tapples = apples + 1;\n\t\tend\n\tend\n\tnum\
    \ = oranges + apples;\n\tcount = n - num;\n\treturn count;\nend", "  if type(s)\
    \ == \"string\" and type(n) == \"number\" then\n    local apple = s:match(\"(%d+)\
    \ %w+\")\n    local orange = s:match(\"%d+ (%d+) %w+\")\n    local mango = n -\
    \ apple - orange\n    return mango\n  end\nend", "    -- good luck\n    local\
    \ s = s:gsub(\"[%d]\",\"\")\n    local t = s:len()\n    local z = n - t\n    return\
    \ z\nend", "\tlocal _, apples = s:find('(a*)', 1, true)\n\tlocal _, oranges =\
    \ s:find('(o*)', 1, true)\n\tlocal num_apples = apples:len()\n\tlocal num_oranges\
    \ = oranges:len()\n\tlocal num_mangoes = n - num_apples - num_oranges\n\treturn\
    \ num_mangoes\nend", "  if(s:find(\"o\") ~= nil) then\n    local result = s:gsub(\"\
    o\", \"\")\n    return n - result:len()\n  elseif(s:find(\"a\") ~= nil) then\n\
    \    local result = s:gsub(\"a\", \"\")\n    return n - result:len()\n  elseif(s:find(\"\
    m\") ~= nil) then\n    local result = s:gsub(\"m\", \"\")\n    return n - result:len()\n\
    \  end\nend", "\t-- get the amount of apples and oranges\n\tlocal oranges, apples\
    \ = s:match(\"(%d+) oranges and (%d+) apples\")\n\t-- check for nil\n\tif apples\
    \ and oranges then\n\t\t-- convert the strings to numbers\n\t\toranges = tonumber(oranges)\n\
    \t\tapples = tonumber(apples)\n\t\t-- check that the sum of oranges and apples\
    \ is not higher than the total number of the fruits in the basket\n\t\tif oranges\
    \ + apples > n then\n\t\t\t-- if so then return nil\n\t\t\treturn nil\n\t\telse\n\
    \t\t\t-- otherwise return the number of the mango fruits in the basket\n\t\t\t\
    return n - oranges - apples\n\t\tend\n\telse\n\t\t-- if the string is malformed\
    \ return nil\n\t\treturn nil\n\tend\nend", "    local a,o = s:match(\"(%d+) apples,\
    \ (%d+) oranges\")\n    return n-tonumber(a)-tonumber(o)\nend\nassert(fruit_distribution(\"\
    12 apples, 12 oranges\", 25) == 1)\nassert(fruit_distribution(\"25 apples, 12\
    \ oranges\", 43) == 6)\nassert(fruit_distribution(\"0 apples, 0 oranges\", 0)\
    \ == 0)\nassert(fruit_distribution(\"30 apples, 12 oranges\", 64) == 22)\nassert(fruit_distribution(\"\
    52 apples, 24 oranges\", 92) == 16)", "\t-- s is a string that represents the\
    \ number of the oranges and apples in the basket.\n\t-- n is an integer that represents\
    \ the total number of the fruits in the basket.\n\t-- make this function returns\
    \ the number of the mango fruits in the basket.\n\t-- TODO: Write the body of\
    \ this function.\nend", "\t-- get the number of oranges and apples\n\tlocal x,\
    \ y = string.match(s, \"(%d+)[^%d]+(%d+)\")\n\tx, y = tonumber(x), tonumber(y)\n\
    \treturn n - x - y\nend", "\t-- your code here\nend", "    -- your code here\n\
    \    s = s:lower()\n    local a = 0\n    local o = 0\n    local m = 0\n    for\
    \ c in s:gmatch\".\" do\n        if c == \"a\" then\n            a = a + 1\n \
    \       elseif c == \"o\" then\n            o = o + 1\n        end\n    end\n\
    \    m = n - a - o\n    return m\nend", "    local n_mango = 0\n    local i =\
    \ 1\n    while i <= string.len(s) do\n        if string.sub(s, i, i) == \"0\"\
    \ then\n            n_mango = n_mango + 1\n            i = i + 1\n        else\n\
    \            i = i + 2\n        end\n    end\n    return n - n_mango\nend", " \
    \   -- type your solution here\n    local n_apples = tonumber(s:match(\"(%d+)\"\
    ))\n    local n_oranges = tonumber(s:match(\"(%d+)%D+(%d+)\"))\n    local n_mangoes\
    \ = n - n_apples - n_oranges\n    return n_mangoes\nend", end, "\tlocal apples,\
    \ oranges = 0, 0\n\tfor c in s:gmatch\".\" do\n\t\tif c == \"a\" then apples =\
    \ apples + 1\n\t\telseif c == \"o\" then oranges = oranges + 1\n\t\tend\n\tend\n\
    \treturn n - apples - oranges\nend\nprint(fruit_distribution(\"oooaoo\", 11))\
    \ --> 3", "    -- your code here\n    local count_apple, count_orange = 0, 0\n\
    \    local count_fruit = 0\n    for i=1, string.len(s) do\n        if string.sub(s,\
    \ i, i) == \"A\" then\n            count_apple = count_apple + 1\n        elseif\
    \ string.sub(s, i, i) == \"O\" then\n            count_orange = count_orange +\
    \ 1\n        end\n    end\n    count_fruit = n - count_apple - count_orange\n\
    \    return count_fruit\nend", "\tlocal a = 0;\n\tlocal o = 0;\n\tlocal m = 0;\n\
    \tlocal count = 0;\n\tlocal i = 0;\n\twhile i <= string.len(s) do\n\t\tif string.sub(s,\
    \ i, i) == \"a\" then\n\t\t\ta = a + 1;\n\t\telseif string.sub(s, i, i) == \"\
    o\" then\n\t\t\to = o + 1;\n\t\tend\n\t\ti = i + 1;\n\tend\n\tm = n - (a + o);\n\
    \treturn m;\nend", "    local apples, oranges = s:match('(%d+) apples, (%d+) oranges')\n\
    \    apples, oranges = tonumber(apples), tonumber(oranges)\n    return n - apples\
    \ - oranges\nend", "    local fruits = {}\n    local mango = 0\n    local apple\
    \ = 0\n    local orange = 0\n    local n = tonumber(n)\n    -- split string into\
    \ array of character\n    for token in string.gmatch(s, '%S+') do\n        table.insert(fruits,\
    \ token)\n    end\n    -- count fruits\n    for _, v in pairs(fruits) do\n   \
    \     if v == 'A' then\n            apple = apple + 1\n        elseif v == 'O'\
    \ then\n            orange = orange + 1\n        elseif v == 'M' then\n      \
    \      mango = mango + 1\n        end\n    end\n    -- calculate mango in basket\n\
    \    local mango_in_basket = n - (apple + orange)\n    return mango_in_basket\n\
    end", "    local array = {}\n    local apples = 0\n    local oranges = 0\n   \
    \ local mangoes = 0\n    for i in string.gmatch(s, \"%d+\") do\n       table.insert(array,\
    \ tonumber(i))\n    end\n    apples = array[1]\n    oranges = array[2]\n    mangoes\
    \ = n - (apples + oranges)\n    return mangoes\nend\nprint(fruit_distribution(\"\
    20 30\", 100))", "    local apples, oranges = s:match(\"%d+%,%d+\")\n    apples,\
    \ oranges = tonumber(apples), tonumber(oranges)\n    return n - apples - oranges\n\
    end", "\t--s = tostring(s)\n\tlocal count = 0\n\tfor i = 1, #s do\n\t\tif s:sub(i,\
    \ i) == \"m\" then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn n - count\n\
    end\nprint(fruit_distribution(\"oammmaa\", 20))", "    -- Write your code here\n\
    \    return n - (tonumber(s:gsub(\"[^%a]\", \"\"):match(\"%d+\")) or 0)\nend",
  "  local a, o = s:match('(%d+) apples and (%d+) oranges')\n  return n - (a + o)\n\
    end", "\tlocal orange, apple = string.match(s, \"(%d+)%s+(%d+)\")\n\tlocal sum\
    \ = tonumber(orange) + tonumber(apple)\n\tif sum <= n then\n\t\treturn n - sum\n\
    \telse\n\t\treturn -1\n\tend\nend", "    -- your code here\nend", "    -- your\
    \ code goes here\n    return n-s:gsub(\"[A,O]\",\"\"):len()\nend", "  -- body\n\
    \  local a_n = tonumber(s:match(\"(%d+)%s*%w+\"))\n  local o_n = tonumber(s:match(\"\
    %d+%s*(%w+)\"))\n  if a_n == nil or o_n == nil then\n    return \"Invalid Input\"\
    \n  end\n  return n - a_n - o_n\nend\nprint(fruit_distribution(\"12 apples, 8\
    \ oranges, 8 mangoes\", 28)) -- 12", "\tlocal numberOfOranges = string.match(s,\
    \ \"([0-9]+)o\")\n\tlocal numberOfApples = string.match(s, \"([0-9]+)a\")\n\t\
    return n - numberOfOranges - numberOfApples\nend", "  local org = 0\n  local app\
    \ = 0\n  local num = 0\n  local temp = 0\n  local sum = 0\n  while s ~= \"\" do\n\
    \    num = tonumber(s:sub(1,1))\n    if num == 1 then\n      org = org + 1\n \
    \   elseif num == 2 then\n      app = app + 1\n    end\n    s = s:sub(2)\n  end\n\
    \  sum = org + app\n  temp = n - sum\n  return temp\nend", "\tlocal fruit_count\
    \ = 0\n\t\n\tif s == nil or n == nil then return 0 end\n\tif not tonumber(n) then\
    \ return 0 end\n\t\n\tlocal apples = tonumber(string.match(s, \"^%d+\"))\n\tlocal\
    \ oranges = tonumber(string.match(s, \"^%d+%D+(%d+)\"))\n\tif apples == nil or\
    \ oranges == nil then return 0 end\n\t\n\t-- assume we have n fruits in the basket\n\
    \tfruit_count = apples + oranges - n\n\t\n\treturn fruit_count\nend", "\tlocal\
    \ total = 0\n\t-- your code goes here\n\tlocal apples, oranges = s:match('(%d+)\
    \ apples and (%d+) oranges')\n\ttotal = n - (tonumber(apples) + tonumber(oranges))\n\
    \treturn total\nend", "\tlocal num1 = tonumber(s:sub(1, s:find(\"a\") - 1))\n\t\
    local num2 = tonumber(s:sub(s:find(\"a\") + 1, s:find(\"a\") + 2))\n\treturn n\
    \ - num1 - num2\nend", "\t-- body\n\t-- split the string into two parts, then\
    \ map the strings to the the result\n\t-- of the gsub function, which returns\
    \ the number of occurrences of the patterns\n\t-- in the string.\n\treturn s:gsub(\"\
    [%w]+\", \"\")\nend", "  -- Write your code here \n  return n - tonumber(s:match('%d+'))\n\
    end", "\tlocal b = {\n\t\ta = 0,\n\t\to = 0,\n\t\tm = 0\n\t}\n\tfor i = 1, #s\
    \ do\n\t\tif (s:sub(i, i) == \"a\") then\n\t\t\tb.a = b.a + 1\n\t\telseif (s:sub(i,\
    \ i) == \"o\") then\n\t\t\tb.o = b.o + 1\n\t\tend\n\tend\n\tb.m = n - (b.a + b.o)\n\
    \treturn b.m\nend", "\t-- Write your code here\n\tlocal sum, a, o = 0, 0, 0",
  "    local apples = s:match(\"a+\")\n    local oranges = s:match(\"o+\")\n    return\
    \ n - #apples - #oranges\nend\nprint(fruit_distribution(\"aoaa\", 12))", "  local\
    \ n_apples, n_oranges = 0, 0\n  for c in s:gmatch(\".\") do\n    if c == \"A\"\
    \ then\n      n_apples = n_apples + 1\n    elseif c == \"O\" then\n      n_oranges\
    \ = n_oranges + 1\n    end\n  end\n  return n - n_apples - n_oranges\nend", " \
    \   local mango = n - s:gsub(\"[a-z]\", \"\")\n    return mango\nend", "    local\
    \ sum1 = 0\n    local sum2 = 0\n    for v in s:gmatch('[+-]?%d+') do\n       \
    \ sum1 = sum1 + tonumber(v)\n    end\n    for v in s:gmatch('[+-]?%d+') do\n \
    \       sum2 = sum2 + tonumber(v)\n    end\n    return n - sum1 - sum2\nend\n\
    print(fruit_distribution('1apple+1orange+1mango', 5))\nprint(fruit_distribution('-2apple+2orange+2mango',\
    \ 0))\nprint(fruit_distribution('2apple+2orange+2mango', 6))", "    local a, o\
    \ = 0, 0\n    for i = 1, #s do\n        if s:sub(i, i) == 'A' then\n         \
    \   a = a + 1\n        elseif s:sub(i, i) == 'O' then\n            o = o + 1\n\
    \        end\n    end\n    return n - a - o\nend", "  local apples, oranges =\
    \ s:match('(%d+):(%d+)')\n  apples, oranges = tonumber(apples), tonumber(oranges)\n\
    \  return n - apples - oranges\nend", "    local t = s:gsub(\"%d+\", function(s)\
    \ return s:len() end)\n    local apples = tonumber(t:match(\"(%d+)apple\"))\n\
    \    local oranges = tonumber(t:match(\"(%d+)orange\"))\n    return n - apples\
    \ - oranges\nend", "    --print(s,n)\n    if string.len(s) == 1 then\n       \
    \ local c = tonumber(s)\n        return n - c\n    end\n    local p = 1\n    local\
    \ res = tonumber(string.sub(s, p, p))\n    for i = 2, string.len(s) do\n     \
    \   local c = tonumber(string.sub(s, i, i))\n        res = res + c * i\n    end\n\
    \    return n - res\nend", "  local t = {}\n  for a, o in s:gmatch '(%d+):(%d+)'\
    \ do\n    t[tonumber(a) + tonumber(o)] = (t[tonumber(a) + tonumber(o)] or 0) +\
    \ 1\n  end\n  for sum, count in pairs(t) do\n    if sum == n then\n      return\
    \ count\n    end\n  end\n  return 0\nend", "  local apples = 0\n  local oranges\
    \ = 0\n  local mangoes = 0\n  for i = 1, #s do\n    if s:sub(i, i) == \"A\" then\n\
    \      apples = apples + 1\n    elseif s:sub(i, i) == \"O\" then\n      oranges\
    \ = oranges + 1\n    end\n  end\n  mangoes = n - apples - oranges\n  return mangoes\n\
    end", "    local apples = tonumber(s:match(\"(%d+)Apples\"))\n    local oranges\
    \ = tonumber(s:match(\"(%d+)Oranges\"))\n    local mangoes = n - apples - oranges\n\
    \    return mangoes\nend", "  if (not s or #s==0) then\n    return 0\n  end\n\
    \  -- split\n  local a = 0\n  local o = 0\n  for i = 1, #s do\n    local c = s:sub(i,i)\n\
    \    if (c == 'A') then\n      a = a + 1\n    elseif (c == 'O') then\n      o\
    \ = o + 1\n    end\n  end\n  local total = a + o\n  return n - total\nend\nassert(fruit_distribution(\"\

  "end\nassert(fruit_distribution(\"a6b8c12\", 8) == 2)\nassert(fruit_distribution(\"\
    a6b8c12\", 22) == 12)\nassert(fruit_distribution(\"a6b8c12\", 18) == 8)\nassert(fruit_distribution(\"\
    a6b8c12\", 32) == 22)\nassert(fruit_distribution(\"a6b8c12\", 24) == 14)\nassert(fruit_distribution(\"\
    a6b8c12\", 22) == 12)\nassert(fruit_distribution(\"a6b8c12\", 25) == 15)\nassert(fruit_distribution(\"\
    a6b8c12\", 27) == 17)\nassert(fruit_distribution(\"a6b8c12\", 31) == 21)\nassert(fruit_distribution(\"\
    a6b8c12\", 32) == 22)\nassert(fruit_distribution(\"a6b8c12\", 33) == 23)\nassert(fruit_distribution(\"\
    a6b8c12\", 35) == 25)\nassert(fruit_distribution(\"a6b8c12\", 40) == 30)\nassert(fruit_distribution(\"\
    a6b8c12\", 1) == 0)\nassert(fruit_distribution(\"a6b8c12\", 2) == 0)\nassert(fruit_distribution(\"\
    a6b8c12\", 3) == 0)\nassert(fruit_distribution(\"a6b8c12\", 4) == 0)\nassert(fruit_distribution(\"\
    a6b8c12\", 5) == 0)\nassert(fruit_distribution(\"a6b8c12\", 6) == 0)\nassert(fruit_distribution(\"\
    a6b8c12\", 7) == 0)\nassert(fruit_distribution(\"a6b8c12\", 8) == 2)\nassert(fruit_distribution(\"\
    a6b8c12\", 9) == 3)\nassert(fruit_distribution(\"a6b8c12\", 10) == 4)\nassert(fruit_distribution(\"\
    a6b8c12\", 11) == 5)\nassert(fruit_distribution(\"a6b8c12\", 12) == 6)\nassert(fruit_distribution(\"\
    a6", "\tlocal num_a, num_o = 0, 0\n\tlocal len = #s\n\tlocal cur = 1\n\t\n\twhile\
    \ cur <= len do\n\t\tlocal c = s:sub(cur, cur)\n\t\tif c == 'a' then\n\t\t\tnum_a\
    \ = num_a + 1\n\t\telseif c == 'o' then\n\t\t\tnum_o = num_o + 1\n\t\tend\n\t\t\
    cur = cur + 1\n\tend\n\t\n\treturn n - num_a - num_o\nend", "    local function\
    \ get_fruits(str)\n        local tot1, tot2 = 0, 0\n        for i=1, #str do\n\
    \            local ch = str:sub(i, i)\n            if ch == 'a' then\n       \
    \         tot1 = tot1 + 1\n            elseif ch == 'o' then\n               \
    \ tot2 = tot2 + 1\n            end\n        end\n        return tot1, tot2\n \
    \   end\n    local tot_apples, tot_oranges = get_fruits(s)\n    return n - tot_apples\
    \ - tot_oranges\nend", "    local sum = 0\n    for i = 1, string.len(s) do\n \
    \       if (s:sub(i, i) == 'A') then\n            sum = sum + 1\n        elseif\
    \ (s:sub(i, i) == 'O') then\n            sum = sum + 1\n        end\n    end\n\
    \    return n - sum\nend", "   local a, o = tonumber(s:match'^(%d+)'), tonumber(s:match'(%d+)$')\n\
    \   return n - a - o\nend", "    -- WRITE YOUR CODE HERE\n    local sum=0\n  \
    \  local c1=0\n    local c2=0\n    for i=1, #s do\n        if s:sub(i,i)==\"a\"\
    \ then\n            c1=c1+1\n        elseif s:sub(i,i)==\"o\" then\n         \
    \   c2=c2+1\n        end\n    end\n    sum=n-(c1+c2)\n    return sum\nend", "\n\
    end", "\t-- write your code here\n\t-- return a number\n\tlocal count = 0\n\t\
    local a = 0\n\tlocal o = 0\n\tlocal i = 1\n\tlocal arr = string.gmatch(s, \".\"\
    )\n\tlocal c = arr()\n\twhile c ~= nil do\n\t\tif c == \"a\" then\n\t\t\ta = a\
    \ + 1\n\t\telseif c == \"o\" then\n\t\t\to = o + 1\n\t\tend\n\t\tc = arr()\n\t\
    end\n\treturn n - a - o\nend", "    local apples, oranges = 0, 0\n    for i =\
    \ 1, #s do\n        if s:sub(i, i) == 'a' then apples = apples + 1\n        elseif\
    \ s:sub(i, i) == 'o' then oranges = oranges + 1 end\n    end\n    return n - apples\
    \ - oranges\nend", "  local fruits = 0\n  if (s:match(\"a\") and s:match(\"o\"\
    )) then\n      fruits = n - #s:match(\"a\") - #s:match(\"o\")\n  elseif (s:match(\"\
    a\")) then\n      fruits = n - #s:match(\"a\")\n  elseif (s:match(\"o\")) then\n\
    \      fruits = n - #s:match(\"o\")\n  end\n  return fruits\nend", "    -- n1\
    \ : number of oranges\n    -- n2 : number of apples\n    -- n  : number of fruits\
    \ in the basket\n    local n1, n2 = tonumber(s:match('(%d+)oranges')), tonumber(s:match('(%d+)apples'))\n\
    \    return n - n1 - n2\nend", "    -- 1 <= n <= 30\n    -- write your code here\n\
    end", "    -- body\n    local n_oranges = string.match(s, \"%d+\")\n    local\
    \ n_apples = string.match(s, \"%d+\", n_oranges + 1)\n    return n - (n_oranges\
    \ + n_apples)\nend\nprint(fruit_distribution(\"2 oranges, 3 apples\", 5))", " \
    \   local a,o = string.match(s, \"(%d+)a%d+o(%d+)\")\n    return n-a-o\nend\n\
    print(fruit_distribution(\"10a20o30\", 60))\nprint(fruit_distribution(\"1a2o3\"\
    , 6))", "    local n_oranges, n_apples = s:match(\"%d+ oranges, %d+ apples\")\n\
    \    n_oranges, n_apples = tonumber(n_oranges), tonumber(n_apples)\n    return\
    \ n - n_oranges - n_apples\nend", "    if type(s) ~= \"string\" or type(n) ~=\
    \ \"number\" then\n        return nil\n    end\n    local apples, oranges = string.match(s,\
    \ \"(%d+) apples and (%d+) oranges\")\n    if apples and oranges then\n      \
    \  apples = tonumber(apples)\n        oranges = tonumber(oranges)\n        if\
    \ apples + oranges > n then\n            return nil\n        end\n        return\
    \ n - apples - oranges\n    end\n    return nil\nend", "    if s == '' then return\
    \ n end\n    local o, a = tonumber(s:match('^o+')), tonumber(s:match('^a+'))\n\
    \    if n == 0 then return 0 end\n    if s:match('^o+') then\n        return fruit_distribution(s:gsub('^o+',\
    \ ''), n - o)\n    elseif s:match('^a+') then\n        return fruit_distribution(s:gsub('^a+',\
    \ ''), n - a)\n    end\nend", "\tlocal apples, oranges = 0, 0\n\tfor c in s:gmatch(\"\
    %d\") do\n\t\tif c == \"1\" then\n\t\t\tapples = apples + 1\n\t\telseif c == \"\
    2\" then\n\t\t\toranges = oranges + 1\n\t\tend\n\tend\n\treturn n - apples - oranges\n\
    end\nprint(fruit_distribution(\"121112\", 6))\nprint(fruit_distribution(\"022\"\
    , 4))\nprint(fruit_distribution(\"00\", 4))\nprint(fruit_distribution(\"000\"\
    , 4))\nprint(fruit_distribution(\"0001112\", 7))", "    local num_oranges = s:match(\"\
    ([0-9]+)%soranges\") or 0\n    local num_apples = s:match(\"([0-9]+)%sapples\"\
    ) or 0\n    return n - num_oranges - num_apples\nend", "    local result = 0\n\
    \    local s_len = string.len(s)\n    for i = 1, s_len do\n        local num =\
    \ string.sub(s, i, i)\n        if num == \"A\" or num == \"O\" then\n        \
    \    result = result + 1\n        end\n    end\n    return n - result\nend", "\n\
    end", "\tlocal total_fruits = 0\n\tlocal oranges = 0\n\tlocal apples = 0\n\tlocal\
    \ mangoes = 0\n\tfor i = 1, s:len() do\n\t\tlocal letter = s:sub(i, i)\n\t\tif\
    \ letter == \"a\" then\n\t\t\tapples = apples + 1\n\t\telseif letter == \"o\"\
    \ then\n\t\t\toranges = oranges + 1\n\t\tend\n\tend\n\ttotal_fruits = apples +\
    \ oranges\n\tmangoes = n - total_fruits\n\treturn mangoes\nend", "\tlocal n_mangoes\
    \ = n\n\tlocal n_apples = tonumber(s:match(\"(%d+).*$\"))\n\tlocal n_oranges =\
    \ tonumber(s:match(\"^(%d+)\"))\n\tif n_apples then n_mangoes = n_mangoes - n_apples\
    \ end\n\tif n_oranges then n_mangoes = n_mangoes - n_oranges end\n\treturn n_mangoes\n\
    end", "\tlocal apples = string.match(s, \"^[%d]+\")\n\tlocal oranges = string.match(s,\
    \ \"^[%d]+[%s]+([%d]+)\")\n\tlocal mango = n - (apples + oranges)\n\treturn mango\n\
    end\nprint(fruit_distribution(\"4 3\", 10))  -- 3\nprint(fruit_distribution(\"\
    12 21\", 34))  -- 1\nprint(fruit_distribution(\"9 4\", 15))  -- 2", '    -- your
    code goes here', "    -- Write your code here\n    -- to print results to the\
    \ standard output you can use functions: print() or io.write()\n    local basket\
    \ = string.gsub(s, '%d', '')\n    local counter = 0\n    for _, value in pairs(basket)\
    \ do\n        if value == 'm' then\n            counter = counter + 1\n      \
    \  end\n    end\n    if counter ~= n then\n        return -1\n    end\n    return\
    \ counter\nend", "    local apples, oranges = 0, 0\n    for i = 1, #s do\n   \
    \     if s:sub(i, i) == 'a' then apples = apples + 1\n        elseif s:sub(i,\
    \ i) == 'o' then oranges = oranges + 1 end\n    end\n    return n - apples - oranges\n\
    end", "    local i = string.find(s, ':')\n    local apple = tonumber(string.sub(s,\
    \ 1, i - 1))\n    local orange = tonumber(string.sub(s, i + 1))\n    return n\
    \ - (apple + orange)\nend", "    local total_apples, total_oranges = 0, 0\n  \
    \  for i=1, #s do\n        if s:sub(i, i) == 'A' then\n            total_apples\
    \ = total_apples + 1\n        elseif s:sub(i, i) == 'O' then\n            total_oranges\
    \ = total_oranges + 1\n        end\n    end\n    return n - total_apples - total_oranges\n\
    end", "  local function fruit_extract(s)\n    local fruits = {tonumber(s:match(\"\
    %d+\")) or 0, tonumber(s:match(\"%d+\")) or 0}\n    local mango_sum = n - (fruits[1]\
    \ + fruits[2])\n    return mango_sum\n  end\n  return fruit_extract(s)\nend",
  "    return n-tonumber(s:match('%d+'))\nend", "    -- body\n    local i = 0\n  \
    \  local j = 0\n    local sum = 0\n    local apple = 0\n    local orange = 0\n\
    \    local mango = 0\n    local result = 0\n    local arr = {}\n    local size\
    \ = string.len(s)\n    for i = 1, size do\n        if s[i] == 'a' then\n     \
    \       apple = apple + 1\n        elseif s[i] == 'o' then\n            orange\
    \ = orange + 1\n        elseif s[i] == 'm' then\n            mango = mango + 1\n\
    \        end\n    end\n    while i <= n do\n        while j <= n do\n        \
    \    sum = i + j\n            if sum == n then\n                result = result\
    \ + 1\n            end\n            j = j + 1\n        end\n        i = i + 1\n\
    \    end\n    return result\nend", "    local s = s:gsub(\"%s+\", \"\")\n    local\
    \ a, b = s:match(\"(.*),(.*)\")\n    return n - (a + b)\nend", "\tlocal apples\
    \ = tonumber(s:match('(%d+) apples'))\n\tlocal oranges = tonumber(s:match('(%d+)\
    \ oranges'))\n\tlocal total = n - apples - oranges\n\treturn total\nend", "  \
    \  local oranges = tonumber(s:match('orange=(%d+)'))\n    local apples = tonumber(s:match('apple=(%d+)'))\n\
    \    local sum = oranges + apples\n    return n - sum\nend", "    local mango_count\
    \ = 0\n    -- get the number of the oranges and apples from the string\n    local\
    \ oranges_count = tonumber(s:match(\"%d+\"))\n    local apples_count = tonumber(s:match(\"\
    %d+\", oranges_count + 2))\n    -- find out the number of the mango fruits\n \
    \   mango_count = n - oranges_count - apples_count\n    return mango_count\nend",
  "    -- body\n    local nr_oranges = s:match(\"%(orange%s([%d]+)%)\")\n    local\
    \ nr_apples = s:match(\"%(apple%s([%d]+)%)\")\n    local nr_mangoes = tonumber(nr_oranges)\
    \ + tonumber(nr_apples)\n    return n - nr_mangoes\nend", "    --your code\n \
    \   local app = string.match(s, \"%d+\")\n    local ora = string.match(s, \"%d+$\"\
    )\n    return math.max(0, n - app - ora)\nend", "\t-- body\n\t-- your code here\n\
    \tlocal a, o = string.match(s, '(%d+)%s*orange.*%s*(%d+)%s*apple')\n\treturn n\
    \ - (a + o)\nend", "\tlocal s = s:lower()\n\tlocal a = s:match(\"a+\") or \"\"\
    \n\tlocal o = s:match(\"o+\") or \"\"\n\treturn n - #a - #o\nend", "    local\
    \ num_oranges = tonumber(s:match(\"([0-9]+)\")) or 0\n    local num_apples = tonumber(s:match(\"\
    ([0-9]+)[^0-9]*$\")) or 0\n    local num_mangoes = n - num_oranges - num_apples\n\
    \    return num_mangoes\nend\nprint(fruit_distribution(\"1 apples, 2 oranges\"\
    , 3))", "    local a, o = s:match(\"(%d+) apples and (%d+) oranges\")\n    return\
    \ n - (a + o)\nend", "    local apples = string.match(s, \"(%d+) apples\")\n \
    \   local oranges = string.match(s, \"(%d+) oranges\")\n    local n = n - apples\
    \ - oranges\n    return n\nend", "end\nassert(fruit_distribution(\"2A1O\", 3)\
    \ == 0)\nassert(fruit_distribution(\"2A1O\", 4) == 1)\nassert(fruit_distribution(\"\
    3A2O\", 5) == 0)\nassert(fruit_distribution(\"3A2O\", 6) == 1)\nassert(fruit_distribution(\"\
    2A2O\", 7) == 1)\nassert(fruit_distribution(\"11A3O\", 14) == 5)\nassert(fruit_distribution(\"\
    11A3O\", 15) == 6)\nprint(\"[OK] fruit_distribution\")", "  \tlocal sum=0\n  \t\
    local number=0\n  \tlocal fruit={}\n\tfor i=1,#s do\n\t\tif s:sub(i,i)==\"a\"\
    \ then\n\t\t\tsum=sum+1\n\t\telseif s:sub(i,i)==\"o\" then\n\t\t\tsum=sum+1\n\t\
    \tend\n\tend\n  \tif sum==n then\n    \treturn 0\n  \telse\n    \tnumber=n-sum\n\
    \  \tend\n  \treturn number\nend", "    local total_apples = 0\n    local total_oranges\
    \ = 0\n    local total_mangoes = 0\n    local apples = 0\n    local oranges =\
    \ 0\n    local mangoes = 0\n    local first = 1\n    local size = #s\n    for\
    \ i = 1, size do\n        if s:sub(i, i) == \"a\" then\n            apples = apples\
    \ + 1\n        elseif s:sub(i, i) == \"o\" then\n            oranges = oranges\
    \ + 1\n        elseif s:sub(i, i) == \"m\" then\n            mangoes = mangoes\
    \ + 1\n        end\n    end\n    total_apples = math.floor(n / apples)\n    total_oranges\
    \ = math.floor(n / oranges)\n    total_mangoes = math.floor(n / mangoes)\n   \
    \ return (total_apples + total_oranges + total_mangoes)\nend", "    if (not s)\
    \ or (not n) then\n        return nil\n    end\n    local table = s:gmatch(\"\
    %d+\")\n    local t = {1,2,3}\n    local x = 0\n    for i in table do\n      \
    \  x = x + i\n    end\n    return n - x\nend", "    local apples = tonumber(s:match(\"\
    %d+\"))\n    local oranges = tonumber(s:match(\"%d+$\"))\n    return n - apples\
    \ - oranges\nend", "    local apples, oranges = s:match(\"(%d+) apples and (%d+)\
    \ oranges\")\n    return tonumber(n) - tonumber(apples) - tonumber(oranges)\n\
    end", "  local str = s:gsub(\"a\",\"\"):gsub(\"o\",\"\")\n  return n - #str\n\
    end", "\t-- check if the string is valid\n\tif s==nil or type(s)~=\"string\" then\n\
    \t\treturn 0\n\tend\n\t-- check if the number is valid\n\tif n==nil or type(n)~=\"\
    number\" then\n\t\treturn 0\n\tend\n\t-- check if the number is integer\n\tif\
    \ math.floor(n)~=n then\n\t\treturn 0\n\tend\n\t-- check if the number is positive\n\
    \tif n<0 then\n\t\treturn 0\n\tend\n\t-- check if the number is greater than 2\n\
    \tif n<=2 then\n\t\treturn 0\n\tend\n\t-- first count how many apples\n\tlocal\
    \ a = 0\n\tlocal i = 1\n\twhile i <= #s do\n\t\tif string.sub(s, i, i) == \"A\"\
    \ then\n\t\t\ta = a + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\t-- then count how many\
    \ oranges\n\tlocal o = 0\n\tlocal i = 1\n\twhile i <= #s do\n\t\tif string.sub(s,\
    \ i, i) == \"O\" then\n\t\t\to = o + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\t-- return\
    \ the number of mango fruit\n\treturn n - a - o\nend", "    local oranges, apples\
    \ = string.match(s, \"(%d+) oranges, (%d+) apples\")\n    return n - (oranges\
    \ + apples)\nend", "\t\n\tlocal str = s:gsub(\"apples\", \"\")\n\tstr = str:gsub(\"\
    oranges\", \"\")\n\t\n\tlocal sum_all = tonumber(s:gsub(\"[^0-9]\", \"\"))\n\t\
    local sum_apple_orange = sum_all - tonumber(str)\n\t\n\treturn n - sum_apple_orange\n\
    end", "    -- Write your code here\nend", "    local s = s:gsub(\"[^AO]\", \"\"\
    )\n    local a, o = s:match(\"^A(%d+)O(%d+)$\")\n    return n - (a + o)\nend",
  "    local num_a, num_o = 0, 0\n    for i = 1, #s do\n        if s:sub(i, i) ==\
    \ 'a' then\n            num_a = num_a + 1\n        elseif s:sub(i, i) == 'o' then\n\
    \            num_o = num_o + 1\n        end\n    end\n    return n - num_a - num_o\n\
    end", "    local t = {['a'] = 0, ['o'] = 0, ['m'] = 0}\n    local len = string.len(s)\n\
    \    local a_cnt = 0\n    local o_cnt = 0\n    local m_cnt = 0\n    local n_cnt\
    \ = 0\n    for i = 1, len do\n        t[string.sub(s, i, i)] = t[string.sub(s,\
    \ i, i)] + 1\n    end\n    a_cnt = t['a']\n    o_cnt = t['o']\n    m_cnt = t['m']\n\
    \    n_cnt = n - a_cnt - o_cnt\n    if n_cnt > 0 then\n        print(n_cnt)\n\
    \    else\n        print(\"not enough fruits in the basket\")\n    end\nend",
  "    local c = 0\n    local i = 0\n    local j = 0\n    local a = string.sub(s,\
    \ i, i)\n    local b = string.sub(s, j, j)\n    while a ~= \"|\" and j <= n do\n\
    \        a = string.sub(s, i, i)\n        b = string.sub(s, j, j)\n        if\
    \ a == \"a\" and b == \"o\" then\n            c = c + 1\n            i = i + 1\n\
    \            j = j + 1\n        elseif a == \"a\" and b == \"m\" then\n      \
    \      c = c + 1\n            i = i + 1\n            j = j + 1\n        elseif\
    \ a == \"o\" and b == \"a\" then\n            c = c + 1\n            i = i + 1\n\
    \            j = j + 1\n        elseif a == \"o\" and b == \"m\" then\n      \
    \      c = c + 1\n            i = i + 1\n            j = j + 1\n        elseif\
    \ a == \"m\" and b == \"a\" then\n            c = c + 1\n            i = i + 1\n\
    \            j = j + 1\n        elseif a == \"m\" and b == \"o\" then\n      \
    \      c = c + 1\n            i = i + 1\n            j = j + 1\n        elseif\
    \ a == \"o\" and b == \"|\" then\n            i = i + 1\n            j = j + 1\n\
    \        elseif a == \"a\" and b == \"|\" then\n            i = i + 1\n      \
    \      j = j + 1\n        elseif a == \"m\" and b == \"|\" then\n            i\
    \ = i + 1\n            j = j + 1\n        elseif a == \"|\" and b == \"a\" then\n\
    \            i = i + 1\n            j = j + 1\n        elseif a == \"|\" and b\
    \ == \"o\" then\n            i = i + 1\n            j = j + 1\n        elseif\
    \ a == \"|\" and b == \"m\" then\n            i = i + 1\n            j = j + 1\n\
    \        elseif a == \"|\" and b == \"|\" then\n            i = i", "\nend", " \
    \   local function is_digit(c)\n        return c >= \"0\" and c <= \"9\"\n   \
    \ end\n    local function is_letter(c)\n        return c >= \"a\" and c <= \"\
    z\"\n    end\n    local function extract_number(s, i)\n        if i > #s then\
    \ return 0 end\n        local num = 0\n        while i <= #s and is_digit(s:sub(i,\
    \ i)) do\n            num = num * 10 + tonumber(s:sub(i, i))\n            i =\
    \ i + 1\n        end\n        return num\n    end\n    local i = 1\n    local\
    \ apples = 0\n    local oranges = 0\n    while i <= #s do\n        local c = s:sub(i,\
    \ i)\n        if is_letter(c) then\n            local num = extract_number(s,\
    \ i + 1)\n            if c == \"a\" then\n                apples = apples + num\n\
    \            elseif c == \"o\" then\n                oranges = oranges + num\n\
    \            end\n            i = i + 1\n        end\n        i = i + 1\n    end\n\
    \    return n - apples - oranges\nend\nfruit_distribution(\"a2o2\", 5) -- 1\n\
    fruit_distribution(\"a2o4\", 5) -- -1\nfruit_distribution(\"a5o5\", 5) -- -1\n\
    fruit_distribution(\"a5o6\", 5) -- -1\nfruit_distribution(\"a5o6\", 6) -- 0\n\
    fruit_distribution(\"a20o2\", 20) -- 16\nfruit_distribution(\"a20o3\", 20) --\
    \ 15\nfruit_distribution(\"a20o10\", 20) -- 10\nfruit_distribution(\"a20o30\"\
    , 20) -- -10\nfruit_distribution(\"o20a30\", 20) -- -10\nfruit_distribution(\"\
    a20o30\", 30) -- 0\nfruit_distribution(\"a20o30\", 50) -- 20\nfruit_distribution(\"\
    a20o30\", 500) -- 470\nfruit_distribution(\"a20o30\", 1000) -- 950\nfruit_distribution(\"\
    a50o50\", 100) -- 0\nfruit_distribution(\"a50o50\", 1000", "  -- your code here\n\
    \  return (n - (s:gsub(\"a\", \"\"):gsub(\"o\", \"\"):len()))\nend", "\t-- body\n\
    \tlocal function get_fruit_num(s)\n\t\t-- body\n\t\tlocal fruit_num = {0, 0, 0}\n\
    \t\tlocal word = s\n\t\tif string.sub(s, 1, 1) == ' ' then\n\t\t\tword = string.sub(s,\
    \ 2, -1)\n\t\tend\n\t\tlocal i = 1\n\t\twhile true do\n\t\t\tlocal j = string.find(word,\
    \ ' ', i)\n\t\t\tif j == nil then\n\t\t\t\tfruit_num[tonumber(string.sub(word,\
    \ i, -1))] = fruit_num[tonumber(string.sub(word, i, -1))] + 1\n\t\t\t\tbreak\n\
    \t\t\telse\n\t\t\t\tfruit_num[tonumber(string.sub(word, i, j - 1))] = fruit_num[tonumber(string.sub(word,\
    \ i, j - 1))] + 1\n\t\t\t\ti = j + 1\n\t\t\tend\n\t\tend\n\t\treturn fruit_num\n\
    \tend\n\tlocal fruit_num = get_fruit_num(s)\n\treturn n - fruit_num[1] - fruit_num[2]\n\
    end", "    local i = 0\n    while s:sub(i+1, i+1) ~= ' ' do\n        i = i + 1\n\
    \    end\n    local fruit = n - (tonumber(s:sub(1, i)) + tonumber(s:sub(i+2)))\n\
    \    return fruit\nend", "    -- your code here\n    local total = 0\n    local\
    \ numbers = {0, 0}\n    for i = 1, #s do\n        local digit = tonumber(s:sub(i,\
    \ i))\n        if digit == 1 then\n            numbers[1] = numbers[1] + 1\n \
    \       elseif digit == 2 then\n            numbers[2] = numbers[2] + 1\n    \
    \    end\n    end\n    total = (n - numbers[1] - numbers[2]) / 3\n    return total\n\
    end", "\tlocal basket_size = s:gsub(\"A\", \"\"):gsub(\"O\", \"\"):len()\n\treturn\
    \ n - basket_size\nend", "    local n_apples = 0\n    local n_oranges = 0\n  \
    \  for i = 1, #s do\n        if string.sub(s, i, i) == \"a\" then\n          \
    \  n_apples = n_apples + 1\n        elseif string.sub(s, i, i) == \"o\" then\n\
    \            n_oranges = n_oranges + 1\n        end\n    end\n    local n_total\
    \ = n_apples + n_oranges\n    return n - n_total\nend", "\tlocal apples, oranges\
    \ = string.match(s, \"(%d+) or (%d+)\")\n\tlocal mango = n - (apples + oranges)\n\
    \treturn mango\nend", "    local apples = tonumber(s:match('^(%d+)'))\n    local\
    \ oranges = tonumber(s:match('(%d+)$'))\n    local mango = n - apples - oranges\n\
    \    return mango\nend\nprint(fruit_distribution('1002',1005)) -- 3", "\t-- Count\
    \ all the fruits and return the mango fruits\nend", "\tlocal sum = 0\n\tfor i=1,\
    \ #s do\n\t\tlocal ch = string.sub(s, i, i)\n\t\tif ch == \"a\" then\n\t\t\tsum\
    \ = sum + 1\n\t\telseif ch == \"o\" then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\
    \treturn n - sum\nend", "    -- your code here\n    local a=0\n    local o=0\n\
    \    local m=0\n    for i in string.gmatch(s, \"%S+\") do\n      if i==\"orange\"\
    \ then\n        o=o+1\n      elseif i==\"apple\" then\n        a=a+1\n      end\n\
    \    end\n    m=n-(a+o)\n    return m\nend\nprint(fruit_distribution(\"apple apple\
    \ apple apple apple apple apple apple apple apple\", 20))", '-- input:', "   \
    \ -- Write your code here\n    -- apples + oranges = n\n    -- n - oranges = apples\n\
    \    -- mangoes = n - apples - oranges\n    -- mangoes = n - (n - oranges) - oranges\n\
    \    -- mangoes = 2n - 2oranges\n    -- mangoes = 2n - 2(n - apples)\n    -- mangoes\
    \ = 2apples\n    -- mangoes = 2(n - oranges)\n    \n    -- mangoes = number of\
    \ mangoes\n    -- n = number of apples\n    -- oranges = number of oranges\n \
    \   return (2 * n) - 2 * tonumber(s:match(\"(%d+)\"))\nend", "    -- write code\
    \ here\n    -- local a, o = tonumber(s:match('%d+')), tonumber(s:match('%d+$'))\n\
    \    local a, o = s:match('%d+'), s:match('%d+$')\n    a, o = tonumber(a), tonumber(o)\n\
    \    local m = n - a - o\n    return m\nend", "\tlocal t = {}\n\tfor c in s:gmatch(\"\
    .\") do\n\t\tt[c] = (t[c] or 0) + 1\n\tend\n\treturn n - (t.a or 0) - (t.o or\
    \ 0)\nend", "    local oranges = 0\n    local apples = 0\n    local mango = 0\n\
    \    --start to write the solution\n    oranges = string.match(s,\"%d+%s\")\n\
    \    oranges = string.gsub(oranges,\"%s\",\"\")\n    apples = string.match(s,\"\
    %s%d+\")\n    apples = string.gsub(apples,\"%s\",\"\")\n    --end of writing the\
    \ solution\n    return n - (tonumber(oranges) + tonumber(apples))\nend", "\t--return\
    \ the number of mango fruits in the basket\n\tlocal total_fruits = 0\n\tfor i\
    \ = 1, #s do\n\t\ttotal_fruits = total_fruits + tonumber(s:sub(i, i))\n\tend\n\
    \tlocal mango_fruits = n - total_fruits\n\treturn mango_fruits\nend", "    local\
    \ distribution = {}\n    for i = 1, string.len(s) do\n        local symbol = string.sub(s,\
    \ i, i)\n        if distribution[symbol] == nil then\n            distribution[symbol]\
    \ = 1\n        else\n            distribution[symbol] = distribution[symbol] +\
    \ 1\n        end\n    end\n    local total = distribution[\"a\"] + distribution[\"\
    o\"]\n    return n - total\nend", "    return n - (tonumber(s:match('%d+')) +\
    \ tonumber(s:match('%d+', -2)))\nend", "    if not s or not n then return end\n\
    \    local count_a = 0\n    local count_o = 0\n    for i = 1, #s do\n        if\
    \ s:sub(i, i) == \"a\" then\n            count_a = count_a + 1\n        elseif\
    \ s:sub(i, i) == \"o\" then\n            count_o = count_o + 1\n        end\n\
    \    end\n    return n - count_a - count_o\nend", "    local apples = tonumber(s:sub(1,\
    \ 1))\n    local oranges = tonumber(s:sub(3, 3))\n    return n - apples - oranges\n\
    end", "    local apple = s:match(\"apple\")\n    local orange = s:match(\"orange\"\
    )\n    local mango = n - (apple + orange)\n    return mango\nend", "    -- write\
    \ your code here\n    local s_lower = string.lower(s)\n    local n_lower = string.lower(n)\n\
    \    local s_tb = split(s_lower)\n    local n_tb = split(n_lower)\n    local m_tb\
    \ = {}\n    for i, v in ipairs(s_tb) do\n        if (v ~= n_tb[1]) and (v ~= n_tb[2])\
    \ then\n            m_tb[i] = v\n        end\n    end\n    return #m_tb\nend",
  "    -- your code here\n    local apples = 0\n    local oranges = 0\n    local has_mango\
    \ = false\n    for i = 1, #s do\n        if s:sub(i, i) == \"a\" then\n      \
    \      apples = apples + 1\n        elseif s:sub(i, i) == \"o\" then\n       \
    \     oranges = oranges + 1\n        else\n            has_mango = true\n    \
    \    end\n    end\n    local mangoes = n - apples - oranges\n    if mangoes ==\
    \ 0 and has_mango then\n        return 1\n    elseif mangoes == 0 and not has_mango\
    \ then\n        return 0\n    elseif mangoes < 0 then\n        return -1\n   \
    \ else\n        return mangoes\n    end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
