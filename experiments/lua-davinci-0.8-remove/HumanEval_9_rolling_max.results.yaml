language: lua
name: HumanEval_9_rolling_max
results:
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local buffer = {}\n  local result = {}\n  for i = 1, #numbers do\n    local\
    \ max_value = 0\n    for i, v in ipairs(buffer) do\n      if v > max_value then\n\
    \        max_value = v\n      end\n    end\n    result[i] = max_value\n    table.insert(buffer,\
    \ numbers[i])\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgira4ec.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {0, 1, 2, 3}\nstack traceback:\n\t/tmp/tmpzgira4ec.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = numbers[1]\n  table.insert(result, max)\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max then\n      max = numbers[i]\n\
    \    end\n    table.insert(result, max)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = numbers[1]\n  local max_so_far_history = {max_so_far}\n\
    \  for i = 2, #numbers do\n    local elem = numbers[i]\n    if elem > max_so_far\
    \ then\n      max_so_far = elem\n    end\n    max_so_far_history[i] = max_so_far\n\
    \  end\n  return max_so_far_history\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maxes = {}\n    local max = numbers[1]\n    table.insert(maxes, max)\n\
    \    for i = 2, #numbers do\n        if numbers[i] > max then\n            max\
    \ = numbers[i]\n        end\n        table.insert(maxes, max)\n    end\n    return\
    \ maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local elements = {}\n  local maximum = math.mininteger\n  for _, num in ipairs(numbers)\
    \ do\n    maximum = math.max(maximum, num)\n    table.insert(elements, maximum)\n\
    \  end\n  return elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local maximum = -math.huge\n  for i, number in ipairs(numbers)\
    \ do\n    if number > maximum then\n      maximum = number\n    end\n    result[i]\
    \ = maximum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_so_far = numbers[1]\n    table.insert(result,\
    \ max_so_far)\n    for i = 2, #numbers do\n        if numbers[i] > max_so_far\
    \ then\n            max_so_far = numbers[i]\n        end\n        table.insert(result,\
    \ max_so_far)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_maxs = {}\n  local max = numbers[1]\n  rolling_maxs[1] = max\n\
    \  for i = 2, #numbers do\n    if numbers[i] > max then\n      max = numbers[i]\n\
    \    end\n    rolling_maxs[i] = max\n  end\n  return rolling_maxs\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local rolling_max = {}\n    rolling_max[1] = numbers[1]\n    for i = 2, #numbers\
    \ do\n        rolling_max[i] = math.max(rolling_max[i - 1], numbers[i])\n    end\n\
    \    return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local rolling_max = math.mininteger\n  for _, number in\
    \ ipairs(numbers) do\n    if number > rolling_max then\n      rolling_max = number\n\
    \    end\n    table.insert(result, rolling_max)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal max_found = {}\n\tlocal current_max = numbers[1]\n\ttable.insert(max_found,\
    \ current_max)\n\tfor i = 2, #numbers do\n\t\tlocal current_number = numbers[i]\n\
    \t\tif current_number > current_max then\n\t\t\tcurrent_max = current_number\n\
    \t\tend\n\t\ttable.insert(max_found, current_max)\n\tend\n\treturn max_found\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_so_far = 0\n    for _, e in ipairs(numbers)\
    \ do\n        if e > max_so_far then\n            max_so_far = e\n        end\n\
    \        table.insert(result, max_so_far)\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps65dny84.lua:17: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local output = {}\n    local current_max = numbers[1]\n    table.insert(output,\
    \ current_max)\n    for i = 2, #numbers do\n        local value = numbers[i]\n\
    \        current_max = math.max(current_max, value)\n        table.insert(output,\
    \ current_max)\n    end\n    return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = {}\n    local current_max = 0\n    for i = 1, #numbers do\n \
    \       local current = numbers[i]\n        if current > current_max then\n  \
    \          current_max = current\n        end\n        max[i] = current_max\n\
    \    end\n    return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal maxes = {}\n\tlocal max = numbers[1]\n\tmaxes[1] = max\n\tfor i = 2, #numbers\
    \ do\n\t\tlocal max = math.max(max, numbers[i])\n\t\tmaxes[i] = max\n\tend\n\t\
    return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa03k82lp.lua:20:\
    \ expected: {3, 3, 3, 100, 100}\nactual: {3, 3, 3, 100, 3}\nstack traceback:\n\
    \t/tmp/tmpa03k82lp.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal maximum = numbers[1]\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8c2760_y.lua:16: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max, result = 0, {}\n    for i, num in ipairs(numbers) do\n       \
    \ if num > max then\n            max = num\n        end\n        result[i] = max\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max_v = nil\n  local max_l = {}\n  for i = 1, #numbers do\n    if max_v\
    \ == nil or numbers[i] > max_v then\n      max_v = numbers[i]\n    end\n    max_l[i]\
    \ = max_v\n  end\n  return max_l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maxes = {}\n    local current_max = -1\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp25jag459.lua:16: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maxes = {}\n    local current_max = -math.huge\n    for i, v in ipairs(numbers)\
    \ do\n        current_max = math.max(current_max, v)\n        maxes[i] = current_max\n\
    \    end\n    return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = 0\n    local maxes = {}\n    for i = 1, #numbers do\n       \
    \ local current = numbers[i]\n        if current > max then\n            max =\
    \ current\n        end\n        maxes[i] = max\n    end\n    return maxes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_value = -math.huge\n    for _, value in\
    \ ipairs(numbers) do\n        max_value = math.max(max_value, value)\n       \
    \ table.insert(result, max_value)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maximum = -math.huge\n    local result = {}\n    for _, i in ipairs(numbers)\
    \ do\n        if i > maximum then\n            maximum = i\n        end\n    \
    \    table.insert(result, maximum)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local maxima = {}\n  for i = 1, #numbers do\n    maxima[i] = math.max(maxima[i\
    \ - 1] or numbers[i], numbers[i])\n  end\n  return maxima\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local n = #numbers\n    local ret = {}\n    local max = numbers[1]\n    ret[1]\
    \ = max\n    for i = 2, n do\n        local cur = numbers[i]\n        if cur >\
    \ max then\n            max = cur\n        end\n        ret[i] = max\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maxes = {}\n    local current_max = 0\n    for i, v in ipairs(numbers)\
    \ do\n        if v > current_max then\n            current_max = v\n        end\n\
    \        maxes[i] = current_max\n    end\n    return maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = 0\n    local result = {}\n    for i, v in ipairs(numbers) do\n\
    \        if v > max then\n            max = v\n        end\n        result[i]\
    \ = max\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maximum = numbers[1]\n    local result = {maximum}\n    for i = 2,\
    \ #numbers do\n        if numbers[i] > maximum then\n            maximum = numbers[i]\n\
    \        end\n        result[i] = maximum\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal max = numbers[1]\n\tfor i = 1, #numbers do\n\t\t\
    if numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\t\tresult[i] = max\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_maxes = {}\n  local max_so_far = 0\n  for i,v in ipairs(numbers)\
    \ do\n    if v > max_so_far then\n      max_so_far = v\n    end\n    rolling_maxes[i]\
    \ = max_so_far\n  end\n  return rolling_maxes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    if not numbers then return end\n    if #numbers < 1 then return end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3ijkruul.lua:16: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = nil\n  for _,v in ipairs(numbers)\
    \ do\n    if current_max == nil or v > current_max then\n      current_max = v\n\
    \    end\n    table.insert(result, current_max)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maximum = 0\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        maximum = math.max(maximum, number)\n        table.insert(result,\
    \ maximum)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_number = nil\n    for i, num in ipairs(numbers)\
    \ do\n        result[i] = num\n        if (max_number == nil) or (num > max_number)\
    \ then\n            max_number = num\n        end\n        result[i] = max_number\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal res = {}\n\tlocal current_max = nil\n\tfor _, n in ipairs(numbers) do\n\
    \t\tif current_max == nil or n > current_max then\n\t\t\tcurrent_max = n\n\t\t\
    end\n\t\ttable.insert(res, current_max)\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = nil\n    local output = {}\n    for i, v in ipairs(numbers) do\n\
    \        if not max or v > max then\n            max = v\n        end\n      \
    \  output[i] = max\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    for i = 1, #numbers do\n        result[i] = math.max(unpack(numbers,\
    \ 1, i))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9fbzfq7e.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp9fbzfq7e.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp9fbzfq7e.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    -- In Lua, array indices are `1`-based, not `0`-based.\n    -- Here we're\
    \ adding to the beginning of the array,\n    -- so we do not want to start with\
    \ `1`.\n    local result = {0}\n    for _, n in ipairs(numbers) do\n        --\
    \ This is a function that gets an array of numbers\n        -- and returns the\
    \ maximum from the first N elements.\n        local max = function(t)\n      \
    \      local max_value = t[1]\n            for i = 2, #t do\n                if\
    \ t[i] > max_value then\n                    max_value = t[i]\n              \
    \  end\n            end\n            return max_value\n        end\n        --\
    \ This line:\n        -- 1. Gets a maximum from the result array.\n        --\
    \ 2. Compares it to the current value.\n        -- 3. Gets the maximum of the\
    \ result and the current value.\n        -- 4. Adds this new maximum value to\
    \ the beginning of the result array.\n        table.insert(result, 1, max({max(result),\
    \ n}))\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccydss_6.lua:33:\
    \ expected: {}\nactual: {0}\nstack traceback:\n\t/tmp/tmpccydss_6.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal r, r_max = {}, 0\n\tfor i = 1, #numbers do\n\t\tr_max = math.max(r_max,\
    \ numbers[i])\n\t\tr[i] = r_max\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = 0\n  for _, n in ipairs(numbers) do\n\
    \    if n > current_max then\n      current_max = n\n    end\n    table.insert(result,\
    \ current_max)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal max = numbers[1]\n\tlocal results = { [1] = max }\n\tfor i = 2, #numbers\
    \ do\n\t\tif numbers[i] > max then\n\t\t\tmax = numbers[i]\n\t\tend\n\t\tresults[i]\
    \ = max\n\tend\n\treturn results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local prefix_maxes = {}\n  local prefix_max = numbers[1]\n  table.insert(prefix_maxes,\
    \ prefix_max)\n  for i = 2, #numbers do\n    local current_max = math.max(prefix_max,\
    \ numbers[i])\n    table.insert(prefix_maxes, current_max)\n    prefix_max = current_max\n\
    \  end\n  return prefix_maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local res = {}\n    local current_max = nil\n    for _,v in ipairs(numbers)\
    \ do\n        if not current_max or v > current_max then\n            current_max\
    \ = v\n        end\n        table.insert(res, current_max)\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal output = {}\n\tlocal current_max = numbers[1]\n\toutput[1] = current_max\n\
    \tfor i=2,#numbers do\n\t\tif numbers[i] > current_max then\n\t\t\tcurrent_max\
    \ = numbers[i]\n\t\tend\n\t\toutput[i] = current_max\n\tend\n\treturn output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local num_iter = ipairs(numbers)\n    local max_so_far = math.maxinteger\n\
    \    local result = {}\n    for n in num_iter do\n        if n > max_so_far then\n\
    \            max_so_far = n\n        end\n        result[#result + 1] = max_so_far\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4b169k0t.lua:7:\
    \ bad argument #2 to 'for iterator' (number expected, got nil)\nstack traceback:\n\
    \t/tmp/tmp4b169k0t.lua:7: in local 'candidate'\n\t/tmp/tmp4b169k0t.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = -math.huge\n    for i = 1, #numbers do\n\
    \        max = math.max(max, numbers[i])\n        result[i] = max\n    end\n \
    \   return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local acc = {}\n  local mx = 0\n  for i = 1, #numbers do\n    if numbers[i]\
    \ > mx then\n      mx = numbers[i]\n    end\n    acc[i] = mx\n  end\n  return\
    \ acc\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max_values = {}\n  local current_max = -1\n  for _, num in ipairs(numbers)\
    \ do\n    if num > current_max then\n      current_max = num\n    end\n    table.insert(rolling_max_values,\
    \ current_max)\n  end\n  return rolling_max_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = nil\n  for i, n in ipairs(numbers) do\n  \
    \  max = math.max(max or 0, n)\n    result[i] = max\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local number_count = #numbers\n    local maximum =\
    \ numbers[1]\n    result[1] = maximum\n    for i = 2, number_count do\n      \
    \  local number = numbers[i]\n        if number > maximum then\n            maximum\
    \ = number\n        end\n        result[i] = maximum\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal maximums = {}\n\tfor i = 1, #numbers do\n\t\ttable.insert(maximums, numbers[i])\n\
    \t\tfor j = 1, i - 1 do\n\t\t\tif maximums[j] < maximums[i] then\n\t\t\t\tmaximums[j]\
    \ = maximums[i]\n\t\t\tend\n\t\tend\n\tend\n\treturn maximums\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu_qjwe6.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpgu_qjwe6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local rolling_max = 0\n    for _, n in ipairs(numbers)\
    \ do\n        if n > rolling_max then\n            rolling_max = n\n        end\n\
    \        table.insert(result, rolling_max)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal max_elements = {}\n\tlocal current_max = numbers[1]\n\tlocal size = #numbers\n\
    \tmax_elements[1] = current_max\n\tfor i = 2, size do\n\t\tif numbers[i] > current_max\
    \ then\n\t\t\tcurrent_max = numbers[i]\n\t\tend\n\t\tmax_elements[i] = current_max\n\
    \tend\n\treturn max_elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local cur_max = numbers[1]\n    table.insert(result,\
    \ cur_max)\n    for i = 2, #numbers do\n        cur_max = math.max(cur_max, numbers[i])\n\
    \        table.insert(result, cur_max)\n    end\n    return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local elements = {}\n  local max = -math.huge\n  for _, n in ipairs(numbers)\
    \ do\n    if n > max then\n      max = n\n    end\n    table.insert(elements,\
    \ max)\n  end\n  return elements\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = numbers[1]\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6cqdtkfy.lua:16: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i = 2, #numbers do\n        current_max = math.max(current_max, numbers[i])\n\
    \        result[i] = current_max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max_sequence = {}\n    local current_max = -math.huge\n    for i, n\
    \ in ipairs(numbers) do\n        current_max = math.max(current_max, n)\n    \
    \    max_sequence[i] = current_max\n    end\n    return max_sequence\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = 0\n  local rolling_max_list = {}\n  for i = 1, #numbers\
    \ do\n    max_so_far = math.max(max_so_far, numbers[i])\n    rolling_max_list[i]\
    \ = max_so_far\n  end\n  return rolling_max_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_maxes = {}\n  local current_max = 0\n  for index, value in ipairs(numbers)\
    \ do\n    if value > current_max then\n      current_max = value\n    end\n  \
    \  rolling_maxes[index] = current_max\n  end\n  return rolling_maxes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    table.insert(result,\
    \ current_max)\n    for i = 2, #numbers do\n        local next_number = numbers[i]\n\
    \        current_max = math.max(current_max, next_number)\n        table.insert(result,\
    \ current_max)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local maxes = {}\n  for i = 1, #numbers do\n    local max = numbers[i]\n  \
    \  for j = 1, i do\n      if numbers[j] > max then\n        max = numbers[j]\n\
    \      end\n    end\n    maxes[i] = max\n  end\n  return maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    for _, x in ipairs(numbers)\
    \ do\n        if x > current_max then\n            current_max = x\n        end\n\
    \        table.insert(result, current_max)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = nil\n    for _, v in ipairs(numbers)\
    \ do\n        current_max = math.max(current_max or v, v)\n        table.insert(result,\
    \ current_max)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local len = #numbers\n    local result = {}\n    local max = 0\n    for i=1,len\
    \ do\n        max = math.max(max, numbers[i])\n        result[i] = max\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max_so_far = -math.huge\n    local running_max = {}\n    for i, x in\
    \ ipairs(numbers) do\n        if x > max_so_far then\n            max_so_far =\
    \ x\n        end\n        running_max[i] = max_so_far\n    end\n    return running_max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max_so_far = numbers[1]\n    table.insert(result,\
    \ max_so_far)\n    for i = 2, #numbers do\n        local current = numbers[i]\n\
    \        if current > max_so_far then\n            max_so_far = current\n    \
    \    end\n        table.insert(result, max_so_far)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local current_max = -math.huge\n  for i,n in ipairs(numbers)\
    \ do\n    current_max = math.max(current_max, n)\n    rolling_max[i] = current_max\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max_list = {}\n    local cur_max = numbers[1]\n    for _, num in ipairs(numbers)\
    \ do\n        cur_max = math.max(cur_max, num)\n        table.insert(max_list,\
    \ cur_max)\n    end\n    return max_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local t = {}\n    local m = numbers[1]\n    for i, n in ipairs(numbers) do\n\
    \        if n > m then\n            m = n\n        end\n        t[i] = m\n   \
    \ end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = 0\n    for i, number in ipairs(numbers)\
    \ do\n        if number > current_max then\n            current_max = number\n\
    \        end\n        result[i] = current_max\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local maxes = {}\n  for i = 1, #numbers do\n    maxes[i] = math.max(numbers[i],\
    \ maxes[i - 1] or numbers[i])\n  end\n  return maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local rmax = {}\n    local max = numbers[1]\n    rmax[1] = max\n    for i\
    \ = 2, #numbers do\n        max = math.max(max, numbers[i])\n        rmax[i] =\
    \ max\n    end\n    return rmax\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal rolling_maximums = {}\n\tlocal maximum = numbers[1]\n\trolling_maximums[1]\
    \ = maximum\n\tfor i = 2, #numbers do\n\t\tmaximum = math.max(maximum, numbers[i])\n\
    \t\trolling_maximums[i] = maximum\n\tend\n\treturn rolling_maximums\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = -math.huge\n    for i, v in ipairs(numbers)\
    \ do\n        if v > current_max then\n            current_max = v\n        end\n\
    \        result[i] = current_max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal current_max = 0\n\tfor _, number in ipairs(numbers)\
    \ do\n\t\tcurrent_max = math.max(current_max, number)\n\t\ttable.insert(result,\
    \ current_max)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local prev_max = math.mininteger\n    for i, value\
    \ in ipairs(numbers) do\n        if value > prev_max then\n            prev_max\
    \ = value\n        end\n        result[i] = prev_max\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max = numbers[1]\n  table.insert(rolling_max,\
    \ max)\n  for i = 2, #numbers do\n    local number = numbers[i]\n    if number\
    \ > max then\n      max = number\n    end\n    table.insert(rolling_max, max)\n\
    \  end\n  return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return {}\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps65dny84.lua:17: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = 0\n    for _, number in ipairs(numbers)\
    \ do\n        max = math.max(max, number)\n        table.insert(result, max)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local rmax = {max}\n    for i=2,#numbers do\n\
    \        max = math.max(max, numbers[i])\n        rmax[i] = max\n    end\n   \
    \ return rmax\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal size = #numbers\n\tlocal result = {}\n\tlocal max = numbers[1]\n\tfor\
    \ i = 1, size do\n\t\tresult[i] = max\n\t\tif numbers[i] > max then\n\t\t\tmax\
    \ = numbers[i]\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_euzkrvv.lua:20:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 2, 3}\nstack traceback:\n\t/tmp/tmp_euzkrvv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = nil\n    for _, num in ipairs(numbers)\
    \ do\n        if current_max == nil or num > current_max then\n            current_max\
    \ = num\n        end\n        table.insert(result, current_max)\n    end\n   \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local rolling_max_numbers = {}\n    local current_max = numbers[1]\n    rolling_max_numbers[1]\
    \ = current_max\n    for i = 2, #numbers do\n        if numbers[i] > current_max\
    \ then\n            current_max = numbers[i]\n        end\n        rolling_max_numbers[i]\
    \ = current_max\n    end\n    return rolling_max_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local num_of_numbers = #numbers\n    local result = {}\n    local max = 0\n\
    \    for i = 1, num_of_numbers do\n        max = math.max(max, numbers[i])\n \
    \       result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = -math.huge\n    for _, number in ipairs(numbers)\
    \ do\n        if number > max then\n            max = number\n        end\n  \
    \      table.insert(result, max)\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max_list = {}\n    local current_max = numbers[1]\n    max_list[1]\
    \ = current_max\n    for i = 2, #numbers do\n        current_max = math.max(current_max,\
    \ numbers[i])\n        max_list[i] = current_max\n    end\n    return max_list\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max_until_now = numbers[1]\n  local max_until_now_indices = {1}\n  local\
    \ rolling_max = {max_until_now}\n  for i, v in ipairs(numbers) do\n    if v >\
    \ max_until_now then\n      max_until_now = v\n      max_until_now_indices = {i}\n\
    \    elseif v == max_until_now then\n      max_until_now_indices[#max_until_now_indices\
    \ + 1] = i\n    end\n    rolling_max[i] = max_until_now\n  end\n  return rolling_max,\
    \ max_until_now_indices\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal max = numbers[1]\n\tlocal res = {max}\n\tfor _, v in ipairs(numbers) do\n\
    \t\tif v > max then\n\t\t\tmax = v\n\t\tend\n\t\tres[#res + 1] = max\n\tend\n\t\
    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple8m28yz.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmple8m28yz.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local res = {}\n  local max_seen = 0\n  for _, num in ipairs(numbers) do\n\
    \    if num > max_seen then\n      max_seen = num\n    end\n    table.insert(res,\
    \ max_seen)\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    -- This is a helper function that compares two arguments and returns the\
    \ largest value.\n    local function max(a, b)\n        if a > b then\n      \
    \      return a\n        else\n            return b\n        end\n    end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpghmwdgsr.lua:22: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local prev_max = 0\n    for i, n in ipairs(numbers)\
    \ do\n        if prev_max < n then\n            prev_max = n\n        end\n  \
    \      result[i] = prev_max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local output = {}\n    local max_so_far = 0\n    for i, v in ipairs(numbers)\
    \ do\n        max_so_far = math.max(max_so_far, v)\n        output[i] = max_so_far\n\
    \    end\n    return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local res = {}\n    local maximum = math.mininteger\n    for _, x in ipairs(numbers)\
    \ do\n        maximum = math.max(maximum, x)\n        table.insert(res, maximum)\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = {}\n    local current_max = math.mininteger\n    for i, number\
    \ in ipairs(numbers) do\n        if number > current_max then\n            current_max\
    \ = number\n        end\n        max[i] = current_max\n    end\n    return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local rolling_max_numbers = {max}\n    for _,v\
    \ in ipairs(numbers) do\n        if v > max then\n            max = v\n      \
    \  end\n        table.insert(rolling_max_numbers, max)\n    end\n    return rolling_max_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75t5lvk2.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp75t5lvk2.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local cur_max = numbers[1]\n    table.insert(result,\
    \ cur_max)\n    for i = 2, #numbers do\n        if numbers[i] > cur_max then\n\
    \            cur_max = numbers[i]\n        end\n        table.insert(result, cur_max)\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal max = 0\n\tlocal max_list = {}\n\tfor _, number in ipairs(numbers) do\n\
    \t\tif number > max then\n\t\t\tmax = number\n\t\tend\n\t\ttable.insert(max_list,\
    \ max)\n\tend\n\treturn max_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local rolling_max_sequence = {}\n    local max_value = numbers[1]\n    table.insert(rolling_max_sequence,\
    \ max_value)\n    for i = 2, #numbers do\n        max_value = math.max(max_value,\
    \ numbers[i])\n        table.insert(rolling_max_sequence, max_value)\n    end\n\
    \    return rolling_max_sequence\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local top = math.huge\n  for i, number in ipairs(numbers)\
    \ do\n    result[i] = math.min(top, number)\n    top = math.max(top, number)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcf1yuq54.lua:18:\
    \ expected: {4, 4, 4, 4}\nactual: {4, 3, 2, 1}\nstack traceback:\n\t/tmp/tmpcf1yuq54.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local last_max = numbers[1]\n    local maxes = {[1] = last_max}\n    for\
    \ i = 2, #numbers do\n        local current = numbers[i]\n        local max =\
    \ math.max(last_max, current)\n        maxes[i] = max\n        last_max = max\n\
    \    end\n    return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max, running_max = 0, { }\n  for i = 1, #numbers do\n    max = math.max(max,\
    \ numbers[i])\n    running_max[i] = max\n  end\n  return running_max\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local rolling_maxes = {}\n    local current_max = nil\n    for _, number\
    \ in ipairs(numbers) do\n        if not current_max or number > current_max then\n\
    \            current_max = number\n        end\n        table.insert(rolling_maxes,\
    \ current_max)\n    end\n    return rolling_maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = {}\n    local cur_max = 0\n    for i = 1, #numbers do\n     \
    \   if numbers[i] > cur_max then\n            cur_max = numbers[i]\n        end\n\
    \        max[i] = cur_max\n    end\n    return max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    for _, number\
    \ in ipairs(numbers) do\n        if number > current_max then\n            current_max\
    \ = number\n        end\n        table.insert(result, current_max)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local maximum = 0\n  local accumulator = {}\n  for _, number in ipairs(numbers)\
    \ do\n    maximum = math.max(maximum, number)\n    table.insert(accumulator, maximum)\n\
    \  end\n  return accumulator\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local r_max = {}\n  local max = numbers[1]\n  table.insert(r_max, max)\n  for\
    \ i = 2, #numbers do\n    max = math.max(max, numbers[i])\n    table.insert(r_max,\
    \ max)\n  end\n  return r_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max = nil\n  local maxes = {}\n  for _, number in ipairs(numbers) do\n\
    \    if max == nil or number > max then\n      max = number\n    end\n    table.insert(maxes,\
    \ max)\n  end\n  return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal max = numbers[1]\n\tfor i, number in ipairs(numbers)\
    \ do\n\t\tif number > max then\n\t\t\tmax = number\n\t\tend\n\t\tresult[i] = max\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max\n    for i, number in ipairs(numbers) do\n\
    \        if max == nil or number > max then\n            max = number\n      \
    \  end\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local res = {}\n  local rolling_max = -math.huge\n  for i = 1, #numbers do\n\
    \    rolling_max = math.max(rolling_max, numbers[i])\n    res[i] = rolling_max\n\
    \  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local rolling_max = -1\n    for _, number in ipairs(numbers)\
    \ do\n        if number > rolling_max then\n            rolling_max = number\n\
    \        end\n        table.insert(result, rolling_max)\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local n = numbers:size(1)\n    local result = torch.Tensor(n)\n    local\
    \ max_so_far = numbers[1]\n    for i = 1, n do\n        if numbers[i] > max_so_far\
    \ then\n            max_so_far = numbers[i]\n        end\n        result[i] =\
    \ max_so_far\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_9fcdbt7.lua:4:\
    \ attempt to call a nil value (method 'size')\nstack traceback:\n\t/tmp/tmp_9fcdbt7.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp_9fcdbt7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local rolling_max = -math.huge\n  for i, n in ipairs(numbers)\
    \ do\n    if n > rolling_max then\n      rolling_max = n\n    end\n    result[i]\
    \ = rolling_max\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local maximum = numbers[1]\n    result[1] = maximum\n\
    \    for i = 2, #numbers do\n        local next_element = numbers[i]\n       \
    \ if next_element > maximum then\n            maximum = next_element\n       \
    \ end\n        result[i] = maximum\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max = numbers[1]\n  table.insert(rolling_max,\
    \ max)\n  for i=2, #numbers do\n    if numbers[i] > max then\n      max = numbers[i]\n\
    \    end\n    table.insert(rolling_max, max)\n  end\n  return rolling_max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local acc = 0\n    for i = 1, #numbers do\n      \
    \  local val = numbers[i]\n        if val > acc then\n            acc = val\n\
    \        end\n        result[i] = acc\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local result = {numbers[1]}\n    for i = 2, #numbers\
    \ do\n        if numbers[i] > max then\n            max = numbers[i]\n       \
    \ end\n        result[i] = max\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maximum, maxes = 0, {}\n    for _, number in ipairs(numbers) do\n \
    \       maximum = math.max(maximum, number)\n        table.insert(maxes, maximum)\n\
    \    end\n    return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local r = {}\n  local mi = 0\n  local m = -math.huge\n  for i,v in ipairs(numbers)\
    \ do\n    if v > m then\n      m = v\n      mi = i\n    end\n    r[i] = {m, mi}\n\
    \  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj2zf7qw.lua:21:\
    \ expected: {1, 2, 3, 4}\nactual: {{1, 1}, {2, 2}, {3, 3}, {4, 4}}\nstack traceback:\n\
    \t/tmp/tmpyj2zf7qw.lua:21: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = -math.huge\n  local result = {}\n  for _, n in ipairs(numbers)\
    \ do\n    max_so_far = math.max(max_so_far, n)\n    table.insert(result, max_so_far)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal max_till_now = 0\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\
    \t\tif n > max_till_now then\n\t\t\tmax_till_now = n\n\t\tend\n\t\ttable.insert(result,\
    \ max_till_now)\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    -- start with the same amount of entries as the input list\n    local result\
    \ = {}\n    local max = 0\n    -- the key to this method is to start backwards\
    \ and keep the current maximum\n    -- found in the sequence.  This ensures that\
    \ the max property of the array\n    -- is maintained as we go forward.\n    for\
    \ i = #numbers, 1, -1 do\n        local num = numbers[i]\n        if num > max\
    \ then\n            max = num\n        end\n        result[i] = max\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy74lsuj5.lua:24:\
    \ expected: {1, 2, 3, 4}\nactual: {4, 4, 4, 4}\nstack traceback:\n\t/tmp/tmpy74lsuj5.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal max, output = nil, {}\n\tfor i, number in ipairs(numbers) do\n\t\tmax\
    \ = math.max(max or 0, number)\n\t\toutput[i] = max\n\tend\n\treturn output\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local maximum = -math.huge\n    for _, number in ipairs(numbers)\
    \ do\n        maximum = math.max(maximum, number)\n        table.insert(result,\
    \ maximum)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = math.mininteger\n  local result = {}\n  for i, number in\
    \ ipairs(numbers) do\n    if number > max_so_far then\n      max_so_far = number\n\
    \    end\n    result[i] = max_so_far\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local maxes = { numbers[1] }\n    for i = 2,\
    \ #numbers do\n        max = math.max(max, numbers[i])\n        maxes[i] = max\n\
    \    end\n    return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local ans = {}\n  local maximum = numbers[1]\n  for _, n in ipairs(numbers)\
    \ do\n    maximum = math.max(maximum, n)\n    table.insert(ans, maximum)\n  end\n\
    \  return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = math.max\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp79dkqwxb.lua:15: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max_values = {}\n    local max_elem = 0\n    for index, value in ipairs(numbers)\
    \ do\n        if value > max_elem then\n            max_elem = value\n       \
    \ end\n        max_values[index] = max_elem\n    end\n    return max_values\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i = 2, #numbers do\n        local number = numbers[i]\n        if number\
    \ > current_max then\n            current_max = number\n        end\n        result[i]\
    \ = current_max\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local length = #numbers\n  local result = {}\n  local maximum = numbers[1]\n\
    \  result[1] = maximum\n  for i = 2, length do\n    local next_number = numbers[i]\n\
    \    if next_number > maximum then\n      maximum = next_number\n    end\n   \
    \ result[i] = maximum\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max_numbers = {}\n  local max_number = 0\n  for _, number in ipairs(numbers)\
    \ do\n    if number > max_number then\n      max_number = number\n    end\n  \
    \  table.insert(max_numbers, max_number)\n  end\n  return max_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local ret = {}\n  local max = numbers[1]\n  ret[1] = max\n  for i = 2, #numbers\
    \ do\n    max = math.max(max, numbers[i])\n    ret[i] = max\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local accumulator = {}\n  local max_value = numbers[1]\n  table.insert(accumulator,\
    \ max_value)\n  for i = 2, #numbers do\n    local current_value = numbers[i]\n\
    \    if current_value > max_value then\n      max_value = current_value\n    end\n\
    \    table.insert(accumulator, max_value)\n  end\n  return accumulator\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max    = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpntur87dw.lua:16: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max_list = {}\n    local max = numbers[1]\n    max_list[1] = max\n\
    \    for i = 2, #numbers do\n        local x = numbers[i]\n        if x > max\
    \ then\n            max = x\n        end\n        max_list[i] = max\n    end\n\
    \    return max_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = numbers[1]\n    table.insert(result, max)\n\
    \    for i = 2, #numbers do\n        if numbers[i] > max then\n            max\
    \ = numbers[i]\n        end\n        table.insert(result, max)\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    result[1] = current_max\n\
    \    for i = 2, #numbers do\n        if numbers[i] > current_max then\n      \
    \      current_max = numbers[i]\n        end\n        result[i] = current_max\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local rmax = nil\n    for i = 1, #numbers do\n   \
    \     local num = numbers[i]\n        if rmax == nil or num > rmax then\n    \
    \        rmax = num\n        end\n        result[i] = rmax\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local m = {}\n  local last = nil\n  for _,v in ipairs(numbers) do\n    if not\
    \ last or last < v then\n      last = v\n    end\n    table.insert(m, last)\n\
    \  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max_elements = {}\n  local max_seen = numbers[1]\n  max_elements[1] =\
    \ max_seen\n  for idx = 2, #numbers do\n    local number = numbers[idx]\n    if\
    \ number > max_seen then\n      max_seen = number\n    end\n    max_elements[idx]\
    \ = max_seen\n  end\n  return max_elements\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maxes = {}\n    local max = -math.huge\n    for i = 1, #numbers do\n\
    \        local v = numbers[i]\n        if v > max then\n            max = v\n\
    \        end\n        maxes[i] = max\n    end\n    return maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = nil\n    for i = 1, #numbers do\n    \
    \    max = math.max(max or 0, numbers[i])\n        result[i] = max\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    if not numbers then return end\n    if not next(numbers) then return end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgg8cbpav.lua:16: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max_so_far = 0\n  local result = {}\n  for _, v in ipairs(numbers) do\n\
    \    max_so_far = math.max(max_so_far, v)\n    table.insert(result, max_so_far)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal stack, output = {}, {}\n\tfor i, num in ipairs(numbers) do\n\t\twhile\
    \ #stack > 0 and stack[#stack].num < num do\n\t\t\ttable.remove(stack)\n\t\tend\n\
    \t\ttable.insert(stack, {i = i, num = num})\n\t\toutput[i] = stack[1].num\n\t\
    end\n\treturn output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local current_max = numbers[1]\n    for _, number\
    \ in ipairs(numbers) do\n        current_max = math.max(current_max, number)\n\
    \        table.insert(result, current_max)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local prev_max_number = -math.huge\n  for _, n in ipairs(numbers)\
    \ do\n    local max_number = math.max(prev_max_number, n)\n    table.insert(result,\
    \ max_number)\n    prev_max_number = max_number\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = numbers[1]\n  table.insert(result,\
    \ current_max)\n  for i=2, #numbers do\n    current_max = math.max(current_max,\
    \ numbers[i])\n    table.insert(result, current_max)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local previous_max = numbers[1]\n    local result = {previous_max}\n    for\
    \ _, n in ipairs(numbers) do\n        previous_max = math.max(previous_max, n)\n\
    \        table.insert(result, previous_max)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpesyjdame.lua:17:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmpesyjdame.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max = numbers[1]\n  local maxes = {max}\n  for i = 2, #numbers do\n \
    \   local number = numbers[i]\n    if number > max then\n      max = number\n\
    \    end\n    maxes[i] = max\n  end\n  return maxes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local maximum = 0\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if number > maximum then\n      maximum = number\n    end\n    table.insert(result,\
    \ maximum)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rmax = {}\n  local rmax_value = -math.huge\n  for _, n in ipairs(numbers)\
    \ do\n    rmax_value = math.max(rmax_value, n)\n    table.insert(rmax, rmax_value)\n\
    \  end\n  return rmax\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal result = {}\n\tlocal current_max = nil\n\tfor i = 1, #numbers do\n\t\t\
    local item = numbers[i]\n\t\tif current_max == nil or item > current_max then\n\
    \t\t\tcurrent_max = item\n\t\tend\n\t\tresult[i] = current_max\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maxes = {}\n    local current_max = numbers[1]\n    for i, number in\
    \ ipairs(numbers) do\n        if number > current_max then\n            current_max\
    \ = number\n        end\n        maxes[i] = current_max\n    end\n    return maxes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local res = {}\n  local curr_max = numbers[1]\n  res[1] = curr_max\n  for i\
    \ = 2, #numbers do\n    if numbers[i] > curr_max then\n      curr_max = numbers[i]\n\
    \    end\n    res[i] = curr_max\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local maximum = numbers[1]\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1gr1vg_f.lua:16: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local rolling_max_list = { max }\n    for i =\
    \ 2, #numbers do\n        local e = numbers[i]\n        if e > max then\n    \
    \        max = e\n        end\n        rolling_max_list[i] = max\n    end\n  \
    \  return rolling_max_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \t-- TODO: Generate a list of rolling maximum element found\n\t--       until\
    \ given moment in the sequence.\n\tlocal sequence = {}\n\tlocal max = numbers[1]\n\
    \tfor i, number in ipairs(numbers) do\n\t\tif number > max then\n\t\t\tmax = number\n\
    \t\tend\n\t\tsequence[i] = max\n\tend\n\treturn sequence\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local maximum = 0\n  for _, v in ipairs(numbers) do\n\
    \    maximum = math.max(maximum, v)\n    table.insert(result, maximum)\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal max = {numbers[1]}\n\tlocal max_number = numbers[1]\n\tfor i = 2, #numbers\
    \ do\n\t\tlocal number = numbers[i]\n\t\tif number > max_number then\n\t\t\tmax_number\
    \ = number\n\t\tend\n\t\tmax[i] = max_number\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    -- Store current maximum number, and its index.\n    local max_number, max_index\
    \ = -math.huge, -1\n    local output = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppnot599n.lua:17: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = 0\n    for _, num in ipairs(numbers) do\n\
    \        max = math.max(max, num)\n        table.insert(result, max)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822036
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  if #numbers == 0 then\n    return numbers\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9jmj87za.lua:17: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local maximum = -math.huge\n  for i = 1, #numbers do\n\
    \    if numbers[i] > maximum then\n      maximum = numbers[i]\n    end\n    result[i]\
    \ = maximum\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal max = {}\n\tfor i = 1, #numbers do\n\t\tmax[i] = math.max(unpack(numbers,\
    \ 1, i))\n\tend\n\treturn max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzsu3cavr.lua:6:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmpzsu3cavr.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpzsu3cavr.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822036
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max, output = math.mininteger, {}\n    for i = 1, #numbers do\n   \
    \     if numbers[i] > max then\n            max = numbers[i]\n        end\n  \
    \      output[i] = max\n    end\n    return output\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if n > max then\n            max = n\n        end\n        table.insert(result,\
    \ max)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local maxes = {}\n  local current_max = numbers[1]\n  for _, n in ipairs(numbers)\
    \ do\n    if n > current_max then\n      current_max = n\n    end\n    table.insert(maxes,\
    \ current_max)\n  end\n  return maxes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local ret = {}\n    local current_max = nil\n    for i, v in ipairs(numbers)\
    \ do\n        if not current_max or v > current_max then\n            current_max\
    \ = v\n        end\n        ret[i] = current_max\n    end\n    return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maximums = {}\n    local maximum = -math.huge\n    for _, number in\
    \ ipairs(numbers) do\n        maximum = math.max(maximum, number)\n        table.insert(maximums,\
    \ maximum)\n    end\n    return maximums\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local rolling_max = {}\n  local max = nil\n  for _, number in ipairs(numbers)\
    \ do\n    if max == nil or number > max then\n      max = number\n    end\n  \
    \  table.insert(rolling_max, max)\n  end\n  return rolling_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = numbers[1]\n    local rolling_max_numbers = { max }\n    for\
    \ _, number in ipairs(numbers) do\n        if number > max then\n            max\
    \ = number\n        end\n        table.insert(rolling_max_numbers, max)\n    end\n\
    \    return rolling_max_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5sli6pln.lua:19:\
    \ expected: {1, 2, 3, 4}\nactual: {1, 1, 2, 3, 4}\nstack traceback:\n\t/tmp/tmp5sli6pln.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max = 0\n  local result = {}\n  for _, n in ipairs(numbers) do\n    max\
    \ = math.max(max, n)\n    table.insert(result, max)\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local len = #numbers\n    local result = {numbers[1]}\n    for i = 2, len\
    \ do\n        result[i] = math.max(result[i - 1], numbers[i])\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local current_max = numbers[1]\n  local result = {current_max}\n  for i = 2,\
    \ #numbers do\n    local num = numbers[i]\n    if num > current_max then\n   \
    \   current_max = num\n    end\n    result[i] = current_max\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local numbers = numbers\n    local pos = 1\n    local max = numbers[1]\n\
    \    local roll_max = {}\n    while pos <= #numbers do\n        if numbers[pos]\
    \ > max then\n            max = numbers[pos]\n        end\n        roll_max[pos]\
    \ = max\n        pos = pos + 1\n    end\n    return roll_max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local cur_max = nil\n    for _, num in ipairs(numbers)\
    \ do\n        cur_max = math.max(cur_max or num, num)\n        table.insert(result,\
    \ cur_max)\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local current_max, rolling_max = numbers[1], {numbers[1]}\n    for i = 2,\
    \ #numbers do\n        if numbers[i] > current_max then\n            current_max\
    \ = numbers[i]\n        end\n        rolling_max[i] = current_max\n    end\n \
    \   return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max_found_so_far = {}\n    local current_max = nil\n    for i, v in\
    \ ipairs(numbers) do\n        if current_max == nil or v > current_max then\n\
    \            current_max = v\n        end\n        max_found_so_far[i] = current_max\n\
    \    end\n    return max_found_so_far\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local _, running_max = table.unpack(numbers)\n    local rolling_max = {running_max}\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwdb4tuly.lua:16: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local maximums = {}\n    local best_so_far = nil\n    for _, number in ipairs(numbers)\
    \ do\n        if not best_so_far or number > best_so_far then\n            best_so_far\
    \ = number\n        end\n        table.insert(maximums, best_so_far)\n    end\n\
    \    return maximums\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = numbers[1]\n    result[1] = max\n    for\
    \ i = 2, #numbers do\n        local curr = numbers[i]\n        if curr > max then\n\
    \            max = curr\n        end\n        result[i] = max\n    end\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max_numbers = {}\n  local max_num = numbers[1]\n  table.insert(max_numbers,\
    \ max_num)\n  for i=2, #numbers do\n    local n = numbers[i]\n    if n > max_num\
    \ then\n      max_num = n\n    end\n    table.insert(max_numbers, max_num)\n \
    \ end\n  return max_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal maximums = {}\n\tmaximums[1] = numbers[1]\n\tfor i = 2, #numbers do\n\t\
    \tmaximums[i] = math.max(maximums[i - 1], numbers[i])\n\tend\n\treturn maximums\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local max = math.max\n    local max_stack = {}\n    local top = 1\n    local\
    \ rolling_max = {}\n    for i = 1, #numbers do\n        while top > 1 and numbers[i]\
    \ >= numbers[max_stack[top]] do\n            top = top - 1\n        end\n    \
    \    max_stack[top + 1] = i\n        top = top + 1\n        rolling_max[i] = numbers[max_stack[1]]\n\
    \    end\n    return rolling_max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsuqmq93.lua:23:\
    \ expected: {1, 2, 3, 4}\nactual: {}\nstack traceback:\n\t/tmp/tmpqsuqmq93.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  -- Result is stored in two lists, one for the maximums, and another for the\
    \ indexes\n  -- of the maximums in numbers.\n  local maxs = {}\n  local maxs_idx\
    \ = {}\n  -- Parse the numbers and find the rolling maximums\n  for i = 1, #numbers\
    \ do\n    local num = numbers[i]\n    local j = #maxs\n    -- If current number\
    \ is greater than maximum so far, take it as new maximum\n    if j == 0 or num\
    \ > maxs[j] then\n      maxs[j + 1] = num\n      maxs_idx[j + 1] = i\n    end\n\
    \  end\n  -- Reverse the lists and return\n  return reverse(maxs), reverse(maxs_idx)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuijzby0s.lua:19:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpuijzby0s.lua:19:\
    \ in local 'candidate'\n\t/tmp/tmpuijzby0s.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local rolling_maxes = {}\n    local current_max = -math.huge\n    for i,\
    \ number in ipairs(numbers) do\n        if number > current_max then\n       \
    \     current_max = number\n        end\n        rolling_maxes[i] = current_max\n\
    \    end\n    return rolling_maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local rolling_max = {}\n    local max = -math.huge\n    for _, number in\
    \ ipairs(numbers) do\n        max = math.max(max, number)\n        table.insert(rolling_max,\
    \ max)\n    end\n    return rolling_max\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \tlocal maxs = {}\n\tlocal last_max = -math.huge\n\tfor _, v in ipairs(numbers)\
    \ do\n\t\tif v > last_max then\n\t\t\tmaxs[#maxs + 1] = v\n\t\t\tlast_max = v\n\
    \t\telse\n\t\t\tmaxs[#maxs + 1] = last_max\n\t\tend\n\tend\n\treturn maxs\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local max = math.max\n  local maxes = {}\n  for i = 1, #numbers do\n    maxes[i]\
    \ = max(numbers[i], maxes[i - 1] or numbers[i])\n  end\n  return maxes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local results = {}\n    local max_so_far = nil\n    for _,v in ipairs(numbers)\
    \ do\n        if max_so_far == nil or v > max_so_far then\n            max_so_far\
    \ = v\n        end\n        table.insert(results, max_so_far)\n    end\n    return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local maxes = {}\n  local max = -1e8\n  for i, number in ipairs(numbers) do\n\
    \    if number > max then\n      max = number\n    end\n    maxes[i] = max\n \
    \ end\n  return maxes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local current_max = numbers[1]\n  result[1] = current_max\n\
    \  for i = 2, #numbers do\n    local current_number = numbers[i]\n    if current_number\
    \ > current_max then\n      current_max = current_number\n    end\n    result[i]\
    \ = current_max\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \    local result = {}\n    local max = -math.huge\n    for _, n in ipairs(numbers)\
    \ do\n        max = math.max(max, n)\n        table.insert(result, max)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local current_max = -math.huge\n  local result = {}\n  for _, value in ipairs(numbers)\
    \ do\n    current_max = math.max(current_max, value)\n    table.insert(result,\
    \ current_max)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = rolling_max\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4,\
    \ 3, 2, 1}), {4, 4, 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}),\
    \ {3, 3, 3, 100, 100})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local res = {}\n  local m = numbers[1]\n  res[1] = m\n  for i = 2, #numbers\
    \ do\n    m = math.max(m, numbers[i])\n    res[i] = m\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rolling_max\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4, 4,\
    \ 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- From a given list of integers, generate a list of rolling maximum element\
    \ found until given moment\n-- in the sequence.\nlocal function rolling_max(numbers)\n\
    \  local result = {}\n  local max = nil\n  for _, number in ipairs(numbers) do\n\
    \    if not max or number > max then\n      max = number\n    end\n    table.insert(result,\
    \ max)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = rolling_max\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({4, 3, 2, 1}), {4, 4,\
    \ 4, 4})\n    lu.assertEquals(candidate({3, 2, 3, 100, 3}), {3, 3, 3, 100, 100})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
