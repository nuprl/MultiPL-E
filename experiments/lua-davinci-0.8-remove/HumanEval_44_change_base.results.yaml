language: lua
name: HumanEval_44_change_base
results:
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local result = ''\n    repeat\n        local\
    \ rest = x % base\n        x = math.floor(x / base)\n        result = rest_map[rest]\
    \ .. result\n    until x == 0\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp878tsgzn.lua:9:\
    \ attempt to index a nil value (global 'rest_map')\nstack traceback:\n\t/tmp/tmp878tsgzn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp878tsgzn.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal y = \"\"\n\tlocal s = \"\"\n\tlocal t\
    \ = \"\"\n\tlocal b = base\n\tlocal ind = 1\n\trepeat\n\t\ts = math.fmod(x, b)\n\
    \t\tt = string.sub(chars, ind, ind)\n\t\tif s == 10 then\n\t\t\tt = \"a\"\n\t\t\
    elseif s == 11 then\n\t\t\tt = \"b\"\n\t\telseif s == 12 then\n\t\t\tt = \"c\"\
    \n\t\telseif s == 13 then\n\t\t\tt = \"d\"\n\t\telseif s == 14 then\n\t\t\tt =\
    \ \"e\"\n\t\telseif s == 15 then\n\t\t\tt = \"f\"\n\t\tend\n\t\ty = t .. y\n\t\
    \tx = math.floor(x / b)\n\t\tind = ind + 1\n\tuntil x == 0\n\treturn y\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwqnxsous.lua:12:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpwqnxsous.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpwqnxsous.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    x = math.floor(x)\n    local res = \"\"\n\
    \    local tmp = x\n    while tmp ~= 0 do\n        res = tostring(tmp % base)\
    \ .. res\n        tmp = math.floor(tmp / base)\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local n = x\n  local s = \"\"\n  while n >\
    \ 0 do\n    local m = n % base\n    n = math.floor(n / base)\n    s = tostring(m)\
    \ .. s\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tif base > 10 then\n\t\terror(\"base is too\
    \ large: \" .. base)\n\tend\n\tlocal s = \"\"\n\twhile x ~= 0 do\n\t\ts = base_char[x\
    \ % base] .. s\n\t\tx = math.floor(x / base)\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfy5pjjk7.lua:10:\
    \ attempt to index a nil value (global 'base_char')\nstack traceback:\n\t/tmp/tmpfy5pjjk7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfy5pjjk7.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local str = \"\"\n    while x > 0 do\n  \
    \      local r = x % base\n        str = tostring(r) .. str\n        x = (x -\
    \ r) / base\n    end\n    return str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2qx15py.lua:17:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpt2qx15py.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local d\n    local result = \"\"\n    while\
    \ x > 0 do\n        d = x % base\n        x = (x - d) / base\n        result =\
    \ string.char(d + string.byte('0')) .. result\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local t = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw9l2t_26.lua:24: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local num_rep = ''\n    local d\n    while\
    \ x > 0 do\n        d = x % base\n        x = math.floor(x / base)\n        num_rep\
    \ = num_rep .. tostring(d)\n    end\n    return num_rep\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp96t796ax.lua:19:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp96t796ax.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local r = { }\n    while x > 0 do\n     \
    \   r[#r + 1] = math.fmod(x, base)\n        x = math.floor(x / base)\n    end\n\
    \    return table.concat(r, \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph8c1qtxp.lua:17:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmph8c1qtxp.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = \"\"\n    while x > 0 do\n    \
    \    local d = (x % base) + 1\n        s = string.char(d + CHAR_0) .. s\n    \
    \    x = (x - d) / base\n    end\n    return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpydzjxnp3.lua:8:\
    \ attempt to perform arithmetic on a nil value (global 'CHAR_0')\nstack traceback:\n\
    \t/tmp/tmpydzjxnp3.lua:8: in local 'candidate'\n\t/tmp/tmpydzjxnp3.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  if x < 0 then\n    error(\"num < 0\")\n  end\n\
    \  if x < base then\n    return tostring(x)\n  end\n  local str = change_base(x\
    \ / base, base)\n  local num = x % base\n  return str .. tostring(num)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsnpyz_ym.lua:19:\
    \ expected: \"22\"\nactual: \"2.66666666666672\"\nstack traceback:\n\t/tmp/tmpsnpyz_ym.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    x = tonumber(x)\n    local i = 1\n    local\
    \ y = {}\n    local j = 0\n    local ys = \"\"\n    local base_num = #base\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8i6kky92.lua:29: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  if x == 0 then\n    return \"0\"\n  end\n \
    \ local ret = \"\"\n  while x > 0 do\n    ret = ret .. tostring(x % base)\n  \
    \  x = math.floor(x / base)\n  end\n  return string.reverse(ret)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tx = math.floor(x)\n\tlocal x_str = \"\"\n\t\
    while x > 0 do\n\t\tlocal y = x % base\n\t\tif y >= 10 then\n\t\t\ty = string.char(string.byte(\"\
    A\") + y - 10)\n\t\tend\n\t\tx_str = tostring(y) .. x_str\n\t\tx = (x - y) / base\n\
    \tend\n\treturn x_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7x6241mm.lua:21:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp7x6241mm.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal x = tonumber(x)\n\tlocal r = ''\n\tlocal\
    \ i = 0\n\twhile x >= base do\n\t\ti = i + 1\n\t\tlocal m = math.floor(x % base)\n\
    \t\tr = r .. tostring(m)\n\t\tx = math.floor(x / base)\n\tend\n\tr = r .. tostring(x)\n\
    \tr = r:reverse()\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal t = {}\n\tlocal d\n\twhile x >= base\
    \ do\n\t\td = math.floor(x % base)\n\t\tt[#t+1] = string.char('0' + d)\n\t\tx\
    \ = math.floor(x / base)\n\tend\n\tif x > 0 then\n\t\tt[#t+1] = string.char('0'\
    \ + x)\n\tend\n\treturn table.concat(t):reverse()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2bhuqr2.lua:21:\
    \ expected: \"22\"\nactual: \"\x02\x02\"\nstack traceback:\n\t/tmp/tmpw2bhuqr2.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local result = ''\n  repeat\n    local a =\
    \ x % base\n    result = string.char(a + 48) .. result\n    x = (x - a) / base\n\
    \  until x < 1\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local format = \"%0\" .. x.digits .. \"d\"\n\
    \  return (format):format(x.val)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3txsmx3g.lua:5:\
    \ attempt to index a number value (local 'x')\nstack traceback:\n\t/tmp/tmp3txsmx3g.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp3txsmx3g.lua:12: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  if x == 0 then\n    return \"0\"\n  end\n \
    \ local i = 1\n  local result = \"\"\n  while x > 0 do\n    local rest = x % base\n\
    \    x = math.floor(x / base)\n    result = rest .. result\n    i = i + 1\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = ''\n    while x > 0 do\n      \
    \  local d = x % base\n        x = math.floor(x / base)\n        s = string.sub('0123456789',\
    \ d + 1, d + 1) .. s\n    end\n    return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local r = \"\"\n  local str = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n  repeat\n    r = str:sub(x % base + 1, x % base + 1) .. r\n    x = math.floor(x\
    \ / base)\n  until x == 0\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local t = {}\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw9l2t_26.lua:24: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local function get_digit(x, base)\n     \
    \   local r = x % base\n        return r, (x - r) / base\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8luk1cp8.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  -- base is an integer, we want to return string\
    \ in the end.\n  if base < 10 then\n    return num_to_str(x, base)\n  end\n  --\
    \ If base number is greater than 10, we must convert num_to_str\n  -- to alphanumeric\
    \ representation.\n  local result = \"\"\n  local quotient = x\n  while quotient\
    \ > 0 do\n    local remainder = math.fmod(quotient, base)\n    if remainder <\
    \ 10 then\n      result = tostring(remainder) .. result\n    else\n      result\
    \ = string.char(remainder + 55) .. result\n    end\n    quotient = math.floor(quotient\
    \ / base)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbad9b2ma.lua:7:\
    \ attempt to call a nil value (global 'num_to_str')\nstack traceback:\n\t/tmp/tmpbad9b2ma.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbad9b2ma.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    x = tonumber(x)\n    local letters = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n    local remainder = x % base\n    if x > base then\n        return change_base(x\
    \ / base, base) .. letters:sub(remainder + 1, remainder + 1)\n    else\n     \
    \   return letters:sub(remainder + 1, remainder + 1)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbrqzytkn.lua:11:\
    \ bad argument #1 to 'sub' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmpbrqzytkn.lua:11: in upvalue 'change_base'\n\t/tmp/tmpbrqzytkn.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpbrqzytkn.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local num = math.floor(x)\n    local ret\
    \ = ''\n    while num > 0 do\n        local m = num % base\n        num = math.floor(num\
    \ / base)\n        ret = string.char(m + string.byte('0')) .. ret\n    end\n \
    \   return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal str = \"\"\n\twhile x > 0 do\n\t\tlocal\
    \ y = x % base\n\t\tx = (x - y) / base\n\t\tstr = str .. tostring(y)\n\tend\n\t\
    return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjxwlfyk.lua:17:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpcjxwlfyk.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local result = \"\"\n    while x > 0 do\n\
    \        local y = x % base\n        result = result .. tostring(y)\n        x\
    \ = (x - y) / base\n    end\n    return string.reverse(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9qy5bu6.lua:17:\
    \ expected: \"22\"\nactual: \"0.22\"\nstack traceback:\n\t/tmp/tmpe9qy5bu6.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local letters = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n  if x < base then\n    return letters:sub(x+1, x+1)\n  else\n    return change_base(math.floor(x/base),\
    \ base) .. letters:sub(x % base + 1, x % base + 1)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal temp = {}\n\twhile x > 0 do\n\t\ttable.insert(temp,\
    \ x % base)\n\t\tx = math.floor(x / base)\n\tend\n\tlocal str = \"\"\n\tfor i\
    \ = #temp, 1, -1 do\n\t\tstr = str .. string.char(temp[i] + CHAR_BASE)\n\tend\n\
    \treturn str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpam_9m2p6.lua:12:\
    \ attempt to perform arithmetic on a nil value (global 'CHAR_BASE')\nstack traceback:\n\
    \t/tmp/tmpam_9m2p6.lua:12: in local 'candidate'\n\t/tmp/tmpam_9m2p6.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  if base <= 10 then\n    return string.format(\"\
    %d\", x)\n  else\n    local res = \"\"\n    while x ~= 0 do\n      local mod =\
    \ x % base\n      x = math.floor(x / base)\n      res = string.format(\"%x\",\
    \ mod) .. res\n    end\n    return res\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7j4hqw0.lua:21:\
    \ expected: \"22\"\nactual: \"8\"\nstack traceback:\n\t/tmp/tmp_7j4hqw0.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local bytes = { }\n    local mod = 1\n  \
    \  local div = mod\n    local i = 1\n    local j = 0\n    local num = string.len(x)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9x2sqte6.lua:29: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local x = tonumber(x)\n    local base = tonumber(base)\n\
    \    local result = ''\n    while x > 0 do\n        result = result .. (x % base)\n\
    \        x = math.floor(x / base)\n    end\n    return string.reverse(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = \"\"\n    while x > 0 do\n    \
    \    s = s .. x % base\n        x = math.floor(x / base)\n    end\n    return\
    \ string.reverse(s)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local t = {}\n    while x > 0 do\n      \
    \  table.insert(t, x % base)\n        x = math.floor(x / base)\n    end\n    table.insert(t,\
    \ 0)\n    return table.concat(t)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzutuz47.lua:17:\
    \ expected: \"22\"\nactual: \"220\"\nstack traceback:\n\t/tmp/tmpxzutuz47.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local str = \"\"\n    local k = x\n    local\
    \ t = math.floor(k / base)\n    local r = k % base\n    if t ~= 0 then\n     \
    \   str = change_base(t, base)\n    end\n    return str .. string.char(r + 48)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal output = ''\n\tx = math.floor(x)\n\t\
    while x > 0 do\n\t\toutput = string.char(base + x % 10) .. output\n\t\tx = math.floor(x\
    \ / 10)\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxmkrel90.lua:17:\
    \ expected: \"22\"\nactual: \"\v\"\nstack traceback:\n\t/tmp/tmpxmkrel90.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\t-- treat x, base as numbers\n\tlocal num =\
    \ tonumber(x)\n\tlocal base = tonumber(base)\n\tlocal i = 0\n\tlocal s = \"\"\n\
    \tlocal v = 0\n\twhile (num > 0) do\n\t\tlocal num_t = num % base\n\t\tif num_t\
    \ < 10 then\n\t\t\tv = string.char(num_t + string.byte('0'))\n\t\telse\n\t\t\t\
    v = string.char(num_t + string.byte('A') - 10)\n\t\tend\n\t\ts = v .. s\n\t\t\
    num = (num - num_t) / base\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local num = tonumber(x)\n  if not num then\n\
    \    -- handle nil input and non-numerical input\n    return x\n  end\n  local\
    \ digits = {}\n  while num > 0 do\n    table.insert(digits, num % base)\n    num\
    \ = math.floor(num / base)\n  end\n  local str = \"\"\n  for i = #digits, 1, -1\
    \ do\n    str = str .. digits[i]\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local str = \"\"\n    if base == 0 then return\
    \ str end\n    local y = math.floor(x / base)\n    local r = x % base\n    if\
    \ y > 0 then\n        str = change_base(y, base)\n    end\n    return str .. (r\
    \ + 48)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpey1tg3s9.lua:18:\
    \ expected: \"22\"\nactual: \"5050\"\nstack traceback:\n\t/tmp/tmpey1tg3s9.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local num = tonumber(x)\n    assert(num)\n\
    \    assert(num >= 0, \"Negative number is not supported.\")\n    local digits\
    \ = {}\n    local pos = 1\n    while num > 0 do\n        digits[pos] = num % base\n\
    \        num = math.floor(num / base)\n        pos = pos + 1\n    end\n    local\
    \ res = \"\"\n    for i = #digits, 1, -1 do\n        res = res .. tostring(digits[i])\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local new_x = ''\n  while x > 0 do\n    new_x\
    \ = new_x .. (x % base)\n    x = x // base\n  end\n  return new_x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpavsmne61.lua:17:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpavsmne61.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\t-- TODO: Assignment 1\n\tlocal str=\"\"\n\t\
    x=math.floor(x)\n\twhile x>0 do\n\t\tstr=tostring(x%base)..str\n\t\tx=math.floor(x/base)\n\
    \tend\n\treturn str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local nums = {}\n    while x ~= 0 do\n  \
    \      local rest = x % base\n        x = math.floor(x / base)\n        table.insert(nums,\
    \ rest)\n    end\n    local res = ''\n    for i = #nums, 1, -1 do\n        res\
    \ = res .. tostring(nums[i])\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal base_size = base - 1\n\tlocal res = {}\n\
    \tlocal x_size = #x\n\tif not x[x_size] then return '' end\n\twhile x_size ~=\
    \ 0 do\n\t\tif not x[x_size] then\n\t\t\tres[x_size] = 0\n\t\telse\n\t\t\tres[x_size]\
    \ = x[x_size]\n\t\tend\n\t\tlocal borrow = res[x_size]\n\t\tlocal delta = borrow\
    \ % base\n\t\tres[x_size] = delta\n\t\tborrow = (borrow - delta) / base\n\t\t\
    local j = x_size - 1\n\t\twhile borrow ~= 0 and j ~= 0 do\n\t\t\tif not x[j] then\n\
    \t\t\t\tres[j] = 0\n\t\t\telse\n\t\t\t\tres[j] = x[j]\n\t\t\tend\n\t\t\tres[j]\
    \ = res[j] + borrow\n\t\t\tdelta = res[j] % base\n\t\t\tres[j] = delta\n\t\t\t\
    borrow = (res[j] - delta) / base\n\t\t\tj = j - 1\n\t\tend\n\t\tlocal t = {}\n\
    \t\tlocal i = 1\n\t\twhile i <= x_size do\n\t\t\tt[i] = res[i]\n\t\t\ti = i +\
    \ 1\n\t\tend\n\t\tx = t\n\t\tx_size = x_size - 1\n\tend\n\tlocal res_str = ''\n\
    \tfor i = 1, #res do\n\t\tres_str = res_str .. res[i]\n\tend\n\treturn res_str\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpouvr04dq.lua:7:\
    \ attempt to get length of a number value (local 'x')\nstack traceback:\n\t/tmp/tmpouvr04dq.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpouvr04dq.lua:51: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local x0 = x\n  local bs = {}\n  while x0 >\
    \ 0 do\n    local d = x0 % base\n    bs[#bs+1] = d\n    x0 = (x0 - d) / base\n\
    \  end\n  local s = \"\"\n  for i = #bs, 1, -1 do\n    s = s .. num2char(bs[i])\n\
    \  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp62ur10us.lua:14:\
    \ attempt to call a nil value (global 'num2char')\nstack traceback:\n\t/tmp/tmp62ur10us.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp62ur10us.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal tostring = tostring\n\tlocal change_base_table\
    \ = {\n\t\t[2] = function(x)\n\t\t\tlocal y = \"\"\n\t\t\tlocal t = {'0', '1'}\n\
    \t\t\twhile x > 0 do\n\t\t\t\ty = t[x % 2 + 1] .. y\n\t\t\t\tx = x // 2\n\t\t\t\
    end\n\t\t\treturn y\n\t\tend,\n\t\t[4] = function(x)\n\t\t\tlocal y = \"\"\n\t\
    \t\tlocal t = {'0', '1', '2', '3'}\n\t\t\twhile x > 0 do\n\t\t\t\ty = t[x % 4\
    \ + 1] .. y\n\t\t\t\tx = x // 4\n\t\t\tend\n\t\t\treturn y\n\t\tend,\n\t\t[8]\
    \ = function(x)\n\t\t\tlocal y = \"\"\n\t\t\tlocal t = {'0', '1', '2', '3', '4',\
    \ '5', '6', '7'}\n\t\t\twhile x > 0 do\n\t\t\t\ty = t[x % 8 + 1] .. y\n\t\t\t\t\
    x = x // 8\n\t\t\tend\n\t\t\treturn y\n\t\tend,\n\t\t[16] = function(x)\n\t\t\t\
    local y = \"\"\n\t\t\tlocal t = {'0', '1', '2', '3', '4', '5', '6', '7', '8',\
    \ '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n\t\t\twhile x > 0 do\n\t\t\t\ty = t[x %\
    \ 16 + 1] .. y\n\t\t\t\tx = x // 16\n\t\t\tend\n\t\t\treturn y\n\t\tend,\n\t}\n\
    \treturn change_base_table[base](x)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8bztygkx.lua:44:\
    \ attempt to call a nil value (field '?')\nstack traceback:\n\t/tmp/tmp8bztygkx.lua:44:\
    \ in local 'candidate'\n\t/tmp/tmp8bztygkx.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tif x < base then\n\t\treturn tostring(x)\n\t\
    else\n\t\treturn change_base(math.floor(x / base), base) .. tostring(x % base)\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: -1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local ans = ''\n    local d = '0123456789'\n\
    \    local mod = math.fmod\n    local div = math.floor\n    repeat\n        x,\
    \ r = div(x, base), mod(x, base)\n        ans = d:sub(r+1, r+1) .. ans\n    until\
    \ x == 0\n    return ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822162
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    assert(base < 10)\n    local t = {}\n   \
    \ local s = ''\n    repeat\n        table.insert(t, math.fmod(x, base))\n    \
    \    x = math.floor(x / base)\n    until x == 0\n    for i = #t, 1, -1 do\n  \
    \      s = s .. t[i]\n    end\n    return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tassert(base > 1 and base < 10)\n\tlocal out\
    \ = {}\n\twhile x > 0 do\n\t\tlocal d = x % base\n\t\ttable.insert(out, d)\n\t\
    \tx = (x - d) / base\n\tend\n\treturn table.concat(out)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s_gto7z.lua:18:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmp4s_gto7z.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if base == 10 then\n        return x\n  \
    \  end\n    local result = ''\n    while x > 0 do\n        x, remainder = math.floor(x\
    \ / base), x % base\n        result = string.sub(numbers, remainder + 1, remainder\
    \ + 1) .. result\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg8cdlj74.lua:11:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpg8cdlj74.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpg8cdlj74.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local result = \"\"\n  while x > 0 do\n   \
    \ local index = x % base\n    x = (x - index) / base\n    result = result .. tostring(index)\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmunpuwrl.lua:17:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpmunpuwrl.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local result = \"\"\n  while x > 0 do\n   \
    \ local d = math.fmod(x, base)\n    result = string.char(d + 48) .. result\n \
    \   x = math.floor(x / base)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  if x == 0 then\n    return 0\n  end\n  local\
    \ number = ''\n  while x > 0 do\n    local remainder = x % base\n    x = (x -\
    \ remainder) / base\n    number = tostring(remainder) .. number\n  end\n  return\
    \ number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr0pixnie.lua:20:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpr0pixnie.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local result = ''\n  while x > 0 do\n    local\
    \ remainder = x % base\n    x = (x - remainder) / base\n    result = string.char(remainder\
    \ + 48) .. result\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local res = \"\"\n    local floor = math.floor\n\
    \    while x > 0 do\n        local next = floor(x / base)\n        local digit\
    \ = tostring(x - next * base)\n        res = digit .. res\n        x = next\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal str = \"\"\n\twhile x ~= 0 do\n\t\tlocal\
    \ i = math.fmod(x, base)\n\t\tstr = string.char(math.floor(i) + 0x30) .. str\n\
    \t\tx = math.floor(x / base)\n\tend\n\treturn str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tassert(x ~= nil)\n\tassert(base ~= nil)\n\t\
    \n\tlocal digits = {}\n\tlocal result = ''\n\trepeat\n\t\tlocal _, mod = math.modf(x/base)\n\
    \t\tdigits[#digits+1] = mod\n\t\tx = (x - mod) / base\n\tuntil x < 1\n\t\n\tfor\
    \ i = #digits, 1, -1 do\n\t\tresult = result .. tostring(digits[i])\n\tend\n\t\
    \n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkzzh8wh.lua:26:\
    \ expected: \"22\"\nactual: \"0.814814814814810.66666666666667\"\nstack traceback:\n\
    \t/tmp/tmpnkzzh8wh.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal min, max = 10, 16\n\tif base < min or\
    \ base > max then\n\t\tbase = min\n\tend\n\tlocal str = string.format(\"%x\",\
    \ x)\n\tstr = string.upper(str)\n\tlocal a, b = string.match(str, \"(%w)(%w*)\"\
    )\n\tstr = \"\"\n\tfor i = 1, base do\n\t\tlocal c = (i == tonumber(a) and b)\
    \ or \"0\"\n\t\tstr = str .. c\n\tend\n\treturn str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprozkb69v.lua:23:\
    \ expected: \"22\"\nactual: \"000000000\"\nstack traceback:\n\t/tmp/tmprozkb69v.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local ret = \"\"\n    local neg = \"\"\n\
    \    if x < 0 then\n        neg = \"-\"\n        x = -x\n    end\n    while x\
    \ > 0 do\n        local mod = x % base\n        ret = string.char(string.byte(\"\
    0\") + mod) .. ret\n        x = math.floor(x / base)\n    end\n    return neg\
    \ .. ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal t = {};\n\tlocal i = 1;\n\tlocal y =\
    \ x;\n\tlocal z = 0;\n\tlocal b = 0;\n\trepeat\n\t\tb = y % base;\n\t\tz = b +\
    \ 48;\n\t\tt[i] = string.char(z);\n\t\ty = math.floor(y / base);\n\t\ti = i +\
    \ 1;\n\tuntil y == 0;\n\tt[i] = nil;\n\tlocal h = \"\";\n\tfor j = i - 1, 1, -1\
    \ do\n\t\th = h .. t[j];\n\tend\n\treturn h;\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal t = {}\n\tlocal n = 1\n\tlocal h = {'0',\
    \ '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n\
    \tlocal key, value\n\twhile x > 0 do\n\t\tkey = math.fmod(x, base)\n\t\tvalue\
    \ = h[key+1]\n\t\tt[n] = value\n\t\tx = math.floor(x/base)\n\t\tn = n + 1\n\t\
    end\n\tif n == 1 then t[n] = '0' end\n\treturn table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_8j49qj.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpx_8j49qj.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local result = ''\n  repeat\n    local d =\
    \ math.fmod(x, base) + 1 -- going from 0 to base-1 instead of 1 to base\n    x\
    \ = math.floor(x / base)\n    result = string.sub(dataset.alphabet, d, d) .. result\n\
    \  until x == 0\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdcwy2a1m.lua:9:\
    \ attempt to index a nil value (global 'dataset')\nstack traceback:\n\t/tmp/tmpdcwy2a1m.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdcwy2a1m.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if type(x) ~= \"number\" then\n        return\
    \ x\n    end\n    local chars = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n    local\
    \ r = ''\n    repeat\n        r = chars:sub(x % base + 1, x % base + 1) .. r\n\
    \        x = math.floor(x / base)\n    until x == 0\n    return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local inum = tonumber(x)\n    local res =\
    \ \"\"\n    while inum ~= 0 do\n        res = res .. tostring(inum % base)\n \
    \       inum = math.floor(inum / base)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9tqnmnp.lua:18:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpa9tqnmnp.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local result = ''\n  while x > 0 do\n    local\
    \ r = x % base\n    result = result .. string.char(r + (r > 9 and 55 or 48))\n\
    \    x = math.floor(x / base)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2hck38j.lua:18:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmph2hck38j.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local s = \".\"\n  for i = 1, 6 do\n    local\
    \ digit = math.floor(x * base)\n    s = s .. tostring(digit)\n    x = x * base\
    \ - digit\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7we0zr86.lua:17:\
    \ expected: \"22\"\nactual: \".2400000\"\nstack traceback:\n\t/tmp/tmp7we0zr86.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local t = {}\n    local x = tonumber(x)\n\
    \    repeat\n        local r = x % base\n        t[#t+1] = r\n        x = (x -\
    \ r) / base\n    until x == 0\n    return string.reverse(table.concat(t))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzds9rtac.lua:18:\
    \ expected: \"22\"\nactual: \"0.22\"\nstack traceback:\n\t/tmp/tmpzds9rtac.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local digits = \"0123456789\"\n  local s =\
    \ \"\"\n  while x > 0 do\n    local d = x % base\n    s = digits:sub(d+1, d+1)\
    \ .. s\n    x = math.floor(x / base)\n  end\n  return s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local local_floor = floor\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0bfa63ib.lua:24: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = \"\"\n    local temp = x\n    while\
    \ temp ~= 0 do\n        local r = temp % base\n        s = string.char(string.byte('0')\
    \ + r) .. s\n        temp = math.floor(temp / base)\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local result = \"\"\n    while true do\n\
    \        if x == 0 then break end\n        local mod = x % base\n        result\
    \ = string.format(\"%d%s\", mod, result)\n        x = math.floor(x / base)\n \
    \   end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local res = \"\"\n    while x ~= 0 do\n \
    \       x, r = math.floor(x / base), x % base\n        res = tostring(r) .. res\n\
    \    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local n = floor(log(x) / log(base))\n   \
    \ for i = n, 1, -1 do\n        local bcpow = floor(x / base^i)\n        x = x\
    \ - bcpow * base^i\n        io.write(tostring(bcpow))\n    end\n    io.write(tostring(x))\n\
    \    io.write('\\n')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsulporhe.lua:5:\
    \ attempt to call a nil value (global 'log')\nstack traceback:\n\t/tmp/tmpsulporhe.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpsulporhe.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local res = \"\"\n    while x > 0 do\n  \
    \      res = res .. x % base\n        x = math.floor(x / base)\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnuykae2i.lua:17:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpnuykae2i.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n\tlocal result, r\n\tresult = \"\"\n\twhile x > 0 do\n\t\tr = x % base\n\t\t\
    x = x - r\n\t\tx = x / base\n\t\tresult = digits:sub(r+1, r+1) .. result\n\tend\n\
    \treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local t = {}\n    for i = 0, x do\n     \
    \   local remainder = i % base\n        if remainder == 0 then\n            t[#t\
    \ + 1] = base\n        else\n            t[#t + 1] = remainder\n        end\n\
    \    end\n    return table.concat(t)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprem4nix5.lua:20:\
    \ expected: \"22\"\nactual: \"312312312\"\nstack traceback:\n\t/tmp/tmprem4nix5.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local rest = tonumber(x)\n    local result\
    \ = \"\"\n    local digit = {\"0\", \"1\", \"2\", \"3\", \"4\", \"5\", \"6\",\
    \ \"7\", \"8\", \"9\"}\n    while rest ~= 0 do\n        rest, m = math.modf(rest\
    \ / base)\n        result = digit[m+1] .. result\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxmnki2cd.lua:10:\
    \ attempt to concatenate a nil value (field '?')\nstack traceback:\n\t/tmp/tmpxmnki2cd.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpxmnki2cd.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local n = 0\n  local s = {}\n  while x > 0\
    \ do\n    local d = x % base\n    s[n + 1] = d\n    x = math.floor(x / base)\n\
    \    n = n + 1\n  end\n  if n == 0 then\n    return \"0\"\n  end\n  return string.reverse(table.concat(s))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal res = \"\"\n\twhile x > 0 do\n\t\tlocal\
    \ last = x % base\n\t\tx = (x - last) / base\n\t\tres = (\",\" .. last):sub(1,\
    \ 2) .. res\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqh377wf8.lua:17:\
    \ expected: \"22\"\nactual: \",2,2\"\nstack traceback:\n\t/tmp/tmpqh377wf8.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    assert(x >= 0, \"Must not be a negative number:\
    \ \" .. x)\n    assert(base >= 2 and base <= 10, \"Base must be less than 10\"\
    )\n    if x == 0 then\n        return \"0\"\n    end\n    local res = \"\"\n \
    \   local tmp = x\n    while tmp > 0 do\n        local r = tmp % base\n      \
    \  res = res .. r\n        tmp = math.floor(tmp / base)\n    end\n    return res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7dkwbop7.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp7dkwbop7.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local ds = {}\n    while x > 0 do\n     \
    \   local d = x % base\n        table.insert(ds, d)\n        x = (x - d) / base\n\
    \    end\n    local rs = \"\"\n    for i = #ds, 1, -1 do\n        rs = rs .. string.char('0'\
    \ + ds[i])\n    end\n    return rs\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi1tegyx8.lua:21:\
    \ expected: \"22\"\nactual: \"\x02\x02\"\nstack traceback:\n\t/tmp/tmpi1tegyx8.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local n = x\n  local res = {}\n  while n ~=\
    \ 0 do\n    table.insert(res, n % base)\n    n = math.floor(n / base)\n  end\n\
    \  return string.reverse(table.concat(res))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local r = x % base\n  x = (x - r) / base\n\
    \  if x == 0 then\n    return '' .. r\n  else\n    return change_base(x, base)\
    \ .. r\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzvxfq8y.lua:17:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpdzvxfq8y.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal bit_len = string.len(x)\n\tlocal shift\
    \ = 0\n\tlocal num = 0\n\tlocal result = \"\"\n\tfor i = 1, bit_len do\n\t\tshift\
    \ = bit_len - i\n\t\tnum = bit_rshift(bit_band(bit_rshift(bit_tonumber(x, 2),\
    \ shift), 0x01), 0)\n\t\tif num >= base then\n\t\t\tresult = \" \" .. result\n\
    \t\telse\n\t\t\tresult = tostring(num) .. result\n\t\tend\n\tend\n\treturn result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpenhpsi9o.lua:11:\
    \ attempt to call a nil value (global 'bit_tonumber')\nstack traceback:\n\t/tmp/tmpenhpsi9o.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpenhpsi9o.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local num_to_char = {[0] = '0', '1', '2', '3',\
    \ '4', '5', '6', '7', '8', '9'}\n  local ret = ''\n  while x > 0 do\n    local\
    \ mod = x % base\n    ret = num_to_char[mod] .. ret\n    x = (x - mod) / base\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local r = ''\n  local y\n  x = math.floor(x)\n\
    \  while x > 0 do\n    y = math.floor(x / base)\n    r = tostring(x - y * base)\
    \ .. r\n    x = y\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = \"\"\n    repeat\n        s = string.char(x\
    \ % base + 48) .. s\n        x = math.floor(x / base)\n    until x == 0\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local new_x = x\n    local result = \"\"\n\
    \    local quotient = 0\n    local remainder = 0\n    local big_number = false\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpom_qfwui.lua:28: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local x = math.floor(x)\n  local chars = \"\
    \"\n  local dec = decimal\n  while x ~= 0 do\n    local d = x % base\n    chars\
    \ = chars .. string.sub(dec, d + 1, d + 1)\n    x = math.floor(x / base)\n  end\n\
    \  return chars\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfc3bk9fb.lua:10:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpfc3bk9fb.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfc3bk9fb.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if x < base then\n        return tostring(x)\n\
    \    else\n        return change_base(x // base, base) .. tostring(x % base)\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local result = \"\"\n    repeat\n       \
    \ local mod = x % base\n        if mod > 9 then\n            result = string.char(mod\
    \ + 87) .. result\n        else\n            result = mod .. result\n        end\n\
    \        x = x // base\n    until x == 0\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local buf = {}\n    local i = 0\n    repeat\n\
    \        buf[i+1] = x % base\n        x = (x - buf[i+1]) / base\n        i = i\
    \ + 1\n    until x == 0\n    return string.rep(\"0\", base-i) .. table.concat(buf,\
    \ \"\", 1, i)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4st7np3.lua:18:\
    \ expected: \"22\"\nactual: \"022.0\"\nstack traceback:\n\t/tmp/tmpn4st7np3.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  x = math.ceil(x)\n  local t = {}\n  while x\
    \ > 0 do\n    local r = x % base\n    t[#t+1] = alpha[r+1]\n    x = (x - r) /\
    \ base\n  end\n  local s = ''\n  for i = #t, 1, -1 do\n    s = s .. t[i]\n  end\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpizf4xjn7.lua:9:\
    \ attempt to index a nil value (global 'alpha')\nstack traceback:\n\t/tmp/tmpizf4xjn7.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpizf4xjn7.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local digs = \"0123456789\"\n    x = math.floor(x)\n\
    \    if x < 0 then\n        return \"-\" .. change_base(-x, base)\n    elseif\
    \ x < base then\n        return digs:sub(x+1, x+1)\n    else\n        return change_base(x\
    \ / base, base) .. digs:sub(x % base + 1, x % base + 1)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local number = \"\"\n  while x > 0 do\n   \
    \ local remain = x % base\n    x = math.floor(x / base)\n    number = string.char(remain+48)\
    \ .. number\n  end\n  return number\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if not x then\n        error(\"Invalid input\
    \ number.\")\n    end\n    if base < 2 or base > 9 then\n        error(\"Invalid\
    \ base number.\")\n    end\n    if x == 0 then\n        return \"0\"\n    end\n\
    \    local result = \"\"\n    while x > 0 do\n        result = tostring(x % base)\
    \ .. result\n        x = math.floor(x / base)\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = {}\n    repeat\n        local c\
    \ = x % base\n        table.insert(s, 1, tostring(c))\n        x = (x - c) / base\n\
    \    until x == 0\n    return table.concat(s)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7e4loif.lua:17:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpg7e4loif.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local res = \"\"\n    while x > 0 do\n  \
    \      local y = x % base\n        x = math.floor(x / base)\n        res = string.format(\"\
    %s%d\", res, y)\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vi6cgsx.lua:18:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp0vi6cgsx.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local X = { }\n  local d = #x\n  local m =\
    \ 10\n  for i = 1, d do\n    local r = x[i] % base\n    X[i] = r\n    x[i] = math.floor(x[i]\
    \ / base)\n    for j = i+1, d do\n      local s = x[j] + r * m\n      x[j] = math.floor(s\
    \ / base)\n      r = s % base\n    end\n  end\n  return X\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3a0nsnf7.lua:6:\
    \ attempt to get length of a number value (local 'x')\nstack traceback:\n\t/tmp/tmp3a0nsnf7.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp3a0nsnf7.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local x_table = {}\n  local result = \"\"\n\
    \  while x ~= 0 do\n    local y = x % base\n    x = (x - y) / base\n    table.insert(x_table,\
    \ 1, y)\n  end\n  for k, v in ipairs(x_table) do\n    result = result .. v\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9wu3x095.lua:21:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp9wu3x095.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = {}\n    local n = x\n    repeat\n\
    \        local d = n % base\n        n = (n - d) / base\n        table.insert(s,\
    \ d)\n    until n == 0\n    return table.concat(s, '')\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxgggfdr_.lua:18:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpxgggfdr_.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local raw_result = \"\"\n  local result = \"\
    \"\n  if x < 0 then\n    x = -x\n    result = \"-\"\n  end\n  repeat\n    raw_result\
    \ = tostring(x % base) .. raw_result\n    x = math.floor(x / base)\n  until x\
    \ == 0\n  for i = 1, #raw_result do\n    result = result .. raw_result:sub(i,\
    \ i)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    x = tonumber(x)\n    base = tonumber(base)\n\
    \    local b, k, result, d = \"0123456789\", 0, \"\", 0\n    repeat\n        d\
    \ = x % base + 1\n        x = (x - d) / base\n        result = string.sub(b, d,\
    \ d) .. result\n        k = k + 1\n    until x == 0\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6o9rsirt.lua:11:\
    \ bad argument #2 to 'sub' (number has no integer representation)\nstack traceback:\n\
    \t/tmp/tmp6o9rsirt.lua:11: in local 'candidate'\n\t/tmp/tmp6o9rsirt.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal result = 0\n\tlocal i = 1\n\tlocal str\
    \ = \"\"\n\twhile x > 0 do\n\t\tresult = (x % base) * i + result\n\t\ti = i *\
    \ 10\n\t\tx = math.floor(x / base)\n\tend\n\twhile result > 0 do\n\t\tstr = str\
    \ .. tostring(result % 10)\n\t\tresult = math.floor(result / 10)\n\tend\n\treturn\
    \ str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nolrloa.lua:24:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp8nolrloa.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local r, rbase = \"\", math.floor(base)\n \
    \ while x > 0 do\n    r = string.char((x % rbase) + 0x30) .. r\n    x = math.floor(x\
    \ / rbase)\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    x = tonumber(x)\n    local hex_str = ''\n\
    \    while x > 0 do\n        local remainder = x % base\n        hex_str = string.format('%s%s',\
    \ hex_char[remainder], hex_str)\n        x = math.floor(x / base)\n    end\n \
    \   return hex_str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmput2zqai6.lua:9:\
    \ attempt to index a nil value (global 'hex_char')\nstack traceback:\n\t/tmp/tmput2zqai6.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmput2zqai6.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = \"\"\n    local n = tonumber(x)\n\
    \    repeat\n        local r = n % base\n        s = s .. r\n        n = (n -\
    \ r) / base\n    until n <= 0\n    return string.reverse(s)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp641uld9f.lua:18:\
    \ expected: \"22\"\nactual: \"0.22\"\nstack traceback:\n\t/tmp/tmp641uld9f.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if x == 0 then\n        return \"0\"\n  \
    \  end\n    local result = \"\"\n    local negative = false\n    if x < 0 then\n\
    \        negative = true\n        x = -x\n    end\n    while x > 0 do\n      \
    \  local b = x % base\n        result = hex_table[b + 1] .. result\n        x\
    \ = (x - b) / base\n    end\n    if negative then\n        result = \"-\" .. result\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa0gyg33o.lua:16:\
    \ attempt to index a nil value (global 'hex_table')\nstack traceback:\n\t/tmp/tmpa0gyg33o.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpa0gyg33o.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    assert(base >= 2 and base <= 10)\n    local\
    \ t = {}\n    while x > 0 do\n        local d = x % base\n        table.insert(t,\
    \ d)\n        x = math.floor(x / base)\n    end\n    local string = \"\"\n   \
    \ for i=1, #t do\n        string = string .. tostring(t[i])\n    end\n    return\
    \ string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd8035ee9.lua:23:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpd8035ee9.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local res = {}\n    repeat\n        table.insert(res,\
    \ 1, math.floor(x % base))\n        x = x / base\n    until x < 1\n    return\
    \ string.format('%s', table.concat(res))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local r = x % base\n    if x > 0 then\n \
    \       return change_base(math.floor(x / base), base) .. tostring(r)\n    else\n\
    \        return ''\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local to_base = { '0', '1', '2', '3', '4',\
    \ '5', '6', '7', '8', '9' }\n    local result = ''\n    repeat\n        local\
    \ remainder = x % base\n        x = (x - remainder) / base\n        result = to_base[remainder\
    \ + 1] .. result\n    until x == 0\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  if base < 2 or base > 10 then return x end\n\
    \  local s = \"\"\n  repeat\n    local m = x % base\n    x = (x - m) / base\n\
    \    s = s .. m\n  until x == 0\n  return s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnyroxru2.lua:18:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpnyroxru2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if base > 10 then\n        return \"Invalid\
    \ base.\"\n    end\n    local new_str = ''\n    while x > 0 do\n        local\
    \ digit = x % base\n        new_str = tostring(digit) .. new_str\n        x =\
    \ math.floor(x / base)\n    end\n    return new_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal r = \"\"\n\tlocal n\n\tlocal digits =\
    \ {}\n\twhile x > 0 do\n\t\tn = math.floor(x % base)\n\t\tx = math.floor(x / base)\n\
    \t\ttable.insert(digits, n)\n\tend\n\tfor i = #digits, 1, -1 do\n\t\tr = r ..\
    \ digits[i]\n\tend\n\treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local t = {}\n  local n = 0\n  while x > 0\
    \ do\n    n = n + 1\n    x, t[n] = math.floor(x / base), x % base\n  end\n  local\
    \ s = {}\n  for i = n, 1, -1 do\n    s[i] = t[i]\n  end\n  return table.concat(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp29900v9v.lua:22:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp29900v9v.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local res = \"\"\n    while x > 0 do\n  \
    \      res = res .. string.sub(ALPHABET, x % base + 1, x % base + 1)\n       \
    \ x = math.floor(x / base)\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuhw216s5.lua:7:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpuhw216s5.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpuhw216s5.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local num_table = {}\n    local x_num\n \
    \   local mod\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa6cst5jw.lua:26: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tif type(x) ~= \"number\" then return x end\n\
    \tlocal a = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\"\
    ;\n\tlocal t = \"\";\n\tlocal s = math.floor(x / base);\n\tlocal r = x % base;\n\
    \tt = a:sub(r + 1, r + 1);\n\twhile s > 0 do\n\t\tr = s % base;\n\t\ts = math.floor(s\
    \ / base);\n\t\tt = a:sub(r + 1, r + 1) .. t;\n\tend\n\treturn t;\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal r, m\n\tif base < 2 or base > 10 then\n\
    \t\terror(\"invalid conversion base \" .. base)\n\tend\n\tlocal s = \"\"\n\trepeat\n\
    \t\tm = x % base\n\t\tx = (x - m) / base\n\t\ts = m .. s\n\tuntil x == 0\n\treturn\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0swz2dx.lua:21:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmph0swz2dx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local s = \"\"\n  while x > 0 do\n    local\
    \ last = x % base\n    x = (x - last) / base\n    s = digit[last] .. s\n  end\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw3o0xhl5.lua:9:\
    \ attempt to index a nil value (global 'digit')\nstack traceback:\n\t/tmp/tmpw3o0xhl5.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpw3o0xhl5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal y, r\n\ty = {}\n\twhile x > 0 do\n\t\t\
    x, r = floor(x / base), x % base\n\t\tinsert(y, r)\n\tend\n\treturn concat(y)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp31lxqlv_.lua:8:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp31lxqlv_.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp31lxqlv_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local s = \"\"\n  while x > 0 do\n    local\
    \ q = x / base\n    local r = x % base\n    x = math.floor(q)\n    s = s .. string.char(r\
    \ + string.byte(\"0\"))\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptu7u3gd3.lua:19:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmptu7u3gd3.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local s = \"\";\n  repeat\n    s = tostring(x\
    \ % base) .. s;\n    x = math.floor(x / base);\n  until x == 0;\n  return s;\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tif x == 0 then\n\t\treturn \"0\"\n\tend\n\t\
    local sign = \"\"\n\tif x < 0 then\n\t\tsign = \"-\"\n\t\tx = -x\n\tend\n\tlocal\
    \ r = \"\"\n\twhile x > 0 do\n\t\tlocal v = x % base\n\t\tx = (x - v) / base\n\
    \t\tif v >= 10 then\n\t\t\tr = string.char(string.byte(\"A\") + v - 10) .. r\n\
    \t\telse\n\t\t\tr = v .. r\n\t\tend\n\tend\n\treturn sign .. r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6js3ktbb.lua:29:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmp6js3ktbb.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local ret = \"\"\n  local i = 2\n  while x\
    \ >= base do\n    local mod = x % base\n    ret = ret .. string.sub(\"0123456789ABCDEF\"\
    , mod + 1, mod + 1)\n    x = math.floor(x / base)\n  end\n  ret = ret .. string.sub(\"\
    0123456789ABCDEF\", x + 1, x + 1)\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w95auwi.lua:20:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp5w95auwi.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  if base == 10 then\n    return tostring(x)\n\
    \  end\n  local x = math.floor(x)\n  local ret = {}\n  repeat\n    local last\
    \ = x % base\n    x = math.floor(x / base)\n    ret[#ret + 1] = last\n  until\
    \ x == 0\n  local ret_str = ''\n  for i = #ret, 1, -1 do\n    ret_str = ret_str\
    \ .. ret[i]\n  end\n  return ret_str\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  if base > 10 then\n    error('base is greater\
    \ than 10!')\n  end\n  local str = ''\n  while x > 0 do\n    local res = x % base\n\
    \    x = math.floor(x / base)\n    str = str .. (res >= 10 and string.char(res\
    \ - 10 + string.byte('A')) or tostring(res))\n  end\n  return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp9jpwj6q.lua:21:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpp9jpwj6q.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local res = {}\n    repeat\n        local\
    \ m = fmod(x, base)\n        x = floor(x / base)\n        res[#res + 1] = m\n\
    \    until x == 0\n    return table.concat(res, \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpec82t79b.lua:7:\
    \ attempt to call a nil value (global 'fmod')\nstack traceback:\n\t/tmp/tmpec82t79b.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpec82t79b.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal s = ''\n\trepeat\n\t\tlocal m = x % base\n\
    \t\ts = s .. string.char(m + 48)\n\t\tx = (x - m) / base\n\tuntil x == 0\n\treturn\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pmmspw6.lua:18:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp3pmmspw6.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    assert(x >= 0, \"only unsigned numbers supported\"\
    )\n    local cache = {}\n    local i = 1\n    local n = x\n    repeat\n      \
    \  local d = n % base\n        n = math.floor(n / base)\n        cache[i] = d\n\
    \        i = i + 1\n    until n == 0\n    local str = {}\n    for i = i - 1, 1,\
    \ -1 do\n        local d = cache[i]\n        table.insert(str, string.char(base_table[d\
    \ + 1]))\n    end\n    return table.concat(str)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprg41j_i6.lua:18:\
    \ attempt to index a nil value (global 'base_table')\nstack traceback:\n\t/tmp/tmprg41j_i6.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmprg41j_i6.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local str = \"\"\n    if x == 0 then\n  \
    \      return \"0\"\n    end\n    while x > 0 do\n        local quotient = x //\
    \ base\n        local remainder = x % base\n        str = str .. tostring(remainder)\n\
    \        x = quotient\n    end\n    return string.reverse(str)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = ''\n    while x > 0 do\n      \
    \  s = s .. tostring(x % base)\n        x = floor(x / base)\n    end\n    return\
    \ s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcjy1w2z4.lua:8:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpcjy1w2z4.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpcjy1w2z4.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local result = \"\"\n  if x == 0 then\n   \
    \ return \"0\"\n  end\n  while x > 0 do\n    local rest = x % base\n    result\
    \ = (string.char(rest + string.byte(\"0\"))) .. result\n    x = math.floor(x /\
    \ base)\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local t = {}\n  repeat\n    local a = math.fmod(x,\
    \ base)\n    x = math.floor(x / base)\n    table.insert(t, char(a + (a > 9 and\
    \ 55 or 48)))\n  until x == 0\n  return table.concat(t)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkjmy5bir.lua:9:\
    \ attempt to call a nil value (global 'char')\nstack traceback:\n\t/tmp/tmpkjmy5bir.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkjmy5bir.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    x = tonumber(x)\n    if x ~= nil then\n \
    \       local result = ''\n        while x ~= 0 do\n            local a = x %\
    \ base\n            x = (x - a) / base\n            result = string.char(a + 48)\
    \ .. result\n        end\n        return result\n    else\n        error(\"x must\
    \ be a number\")\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local b = base\n    local out = \"\"\n  \
    \  local i = 1\n    local x_ = x\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfdghm8nc.lua:27: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local res = \"\"\n    while x > 0 do\n  \
    \      local i = math.floor(x % base)\n        res = string.char(string.byte('0')\
    \ + i) .. res\n        x = math.floor(x / base)\n    end\n    return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local out = {}\n    while x > 0 do\n    \
    \    local digit = math.floor(x % base)\n        out[#out + 1] = digits[digit\
    \ + 1]\n        x = (x - digit) / base\n    end\n    return table.concat(out)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp55z1j2ct.lua:8:\
    \ attempt to index a nil value (global 'digits')\nstack traceback:\n\t/tmp/tmp55z1j2ct.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp55z1j2ct.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local s = ''\n  while x > 0 do\n    local n\
    \ = x % base\n    x = (x - n) / base\n    s = string.char(string.byte('0') + n)\
    \ .. s\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local result = ''\n  local sign = ''\n  local\
    \ digits = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  if base == 0 then\n    return\
    \ tostring(x)\n  end\n  if x < 0 then\n    sign = '-'\n    x = -x\n  end\n  while\
    \ x ~= 0 do\n    local m = x % base\n    x = (x - m) / base\n    result = digits:sub(m\
    \ + 1, m + 1) .. result\n  end\n  return sign .. result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tif base == 10 then\n\t\treturn tostring(x)\n\
    \tend\n\tlocal n = base\n\tlocal str = ''\n\trepeat\n\t\tlocal d = x % n\n\t\t\
    if d > 9 then\n\t\t\tstr = string.char(string.byte('A') + d - 10) .. str\n\t\t\
    else\n\t\t\tstr = tostring(d) .. str\n\t\tend\n\t\tx = math.floor(x / n)\n\tuntil\
    \ x == 0\n\treturn str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local tbl = {}\n    local s = \"\"\n    while\
    \ x > 0 do\n        table.insert(tbl, 1, x % base)\n        x = math.floor(x /\
    \ base)\n    end\n    for i = 1, #tbl do\n        s = s .. tostring(tbl[i])\n\
    \    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local str = ''\n    while x > 0 do\n    \
    \    local d = x % base\n        x = math.floor(x / base)\n        str = string.format('%s%d',\
    \ str, d)\n    end\n    return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmj_xtxu2.lua:18:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpmj_xtxu2.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local n = tonumber(x)\n    if n == nil then\n\
    \        return nil\n    end\n    if base < 2 or base > 10 then\n        return\
    \ nil\n    end\n    local res = \"\"\n    local remain = 0\n    while n > 0 do\n\
    \        remain = n % base\n        n = math.floor(n / base)\n        res = tostring(remain)\
    \ .. res\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal out = \"\"\n\trepeat\n\t\tout = math.fmod(x,\
    \ base) .. out\n\t\tx = math.floor(x / base)\n\tuntil x == 0\n\treturn out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local str = \"\"\n    while x > 0 do\n  \
    \      str = (x % base) .. str\n        x = math.floor(x / base)\n    end\n  \
    \  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local result = \"\"\n    local digit\n  \
    \  repeat\n        digit = x % base\n        x = math.floor(x / base)\n      \
    \  result = string.char(digit + CHAR_ZERO) .. result\n    until x == 0\n    return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi4eo0x36.lua:10:\
    \ attempt to perform arithmetic on a nil value (global 'CHAR_ZERO')\nstack traceback:\n\
    \t/tmp/tmpi4eo0x36.lua:10: in local 'candidate'\n\t/tmp/tmpi4eo0x36.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local s = {}\n  local i = 0\n  repeat\n   \
    \ i = i + 1\n    x, s[i] = math.modf(x/base)\n    s[i] = math.floor(s[i]*base)\n\
    \  until x == 0\n  local str = ''\n  while i > 0 do\n    str = str .. s[i]\n \
    \   i = i - 1\n  end\n  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb630yp8x.lua:23:\
    \ expected: \"22\"\nactual: \"21\"\nstack traceback:\n\t/tmp/tmpb630yp8x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local str\n    local chars = {'0', '1', '2',\
    \ '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F'}\n    if base\
    \ == 2 then\n        str = string.format(\"%x\",x)\n        return str\n    elseif\
    \ base == 10 then\n        str = tostring(x)\n        return str\n    elseif base\
    \ == 16 then\n        str = string.format(\"%x\",x)\n        return str\n    else\n\
    \        return \"Error\"\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyph05d5p.lua:24:\
    \ expected: \"22\"\nactual: \"Error\"\nstack traceback:\n\t/tmp/tmpyph05d5p.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local i = 0\n    local result = {}\n    local\
    \ digit_index = {\n        [0] = 0,\n        [1] = 1,\n        [2] = 2,\n    \
    \    [3] = 3,\n        [4] = 4,\n        [5] = 5,\n        [6] = 6,\n        [7]\
    \ = 7,\n        [8] = 8,\n        [9] = 9,\n        [10] = 'a',\n        [11]\
    \ = 'b',\n        [12] = 'c',\n        [13] = 'd',\n        [14] = 'e',\n    \
    \    [15] = 'f',\n        [16] = 'g',\n        [17] = 'h',\n        [18] = 'i',\n\
    \        [19] = 'j',\n        [20] = 'k',\n        [21] = 'l',\n        [22] =\
    \ 'm',\n        [23] = 'n',\n        [24] = 'o',\n        [25] = 'p',\n      \
    \  [26] = 'q',\n        [27] = 'r',\n        [28] = 's',\n        [29] = 't',\n\
    \        [30] = 'u',\n        [31] = 'v',\n        [32] = 'w',\n        [33] =\
    \ 'x',\n        [34] = 'y',\n        [35] = 'z',\n    }\n    while x > 0 do\n\
    \        local digit = x % base\n        x = (x - digit) / base\n        result[i]\
    \ = digit_index[digit]\n        i = i + 1\n    end\n    return table.concat(result,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmper_3xtu5.lua:57:\
    \ expected: \"22\"\nactual: \"2\"\nstack traceback:\n\t/tmp/tmper_3xtu5.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local res = \"\"\n    if x == 0 then\n  \
    \      return \"0\"\n    end\n    while x > 0 do\n        local n = x % base\n\
    \        x = math.floor(x / base)\n        res = res .. string.char(string.byte(\"\
    0\") + n)\n    end\n    return string.reverse(res)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local res = \"\"\n    local q, r\n    repeat\n\
    \        q = math.floor(x / base)\n        r = x % base\n        res = res ..\
    \ string.char(r + '0')\n        x = q\n    until q == 0\n    return string.reverse(res)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpns5ieyzy.lua:19:\
    \ expected: \"22\"\nactual: \"\x02\x02\"\nstack traceback:\n\t/tmp/tmpns5ieyzy.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local nums = {}\n    repeat\n        local\
    \ remainder = x % base\n        if remainder >= 10 then\n            table.insert(nums,\
    \ base_char[remainder])\n        else\n            table.insert(nums, remainder)\n\
    \        end\n        x = (x - remainder) / base\n    until x == 0\n    return\
    \ table.concat(nums)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpafc4vk72.lua:21:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpafc4vk72.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local r = {}\n    for i = 0, 8 do\n     \
    \   r[i + 1] = x % base\n        x = math.floor(x / base)\n    end\n    return\
    \ table.concat(r, '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujrsvlrs.lua:16:\
    \ expected: \"22\"\nactual: \"220000000\"\nstack traceback:\n\t/tmp/tmpujrsvlrs.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local r = \"\"\n  local l = string.len(x)\n\
    \  local num = 0\n  for i = 1, l do\n    num = num + string.byte(x, i) * 256 ^\
    \ (i - 1)\n  end\n  repeat\n    r = string.char(num % base + 48) .. r\n    num\
    \ = math.floor(num / base)\n  until num == 0\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpllt8rsq5.lua:21:\
    \ expected: \"22\"\nactual: \"2002\"\nstack traceback:\n\t/tmp/tmpllt8rsq5.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local r = \"\"\n    repeat\n        local\
    \ d = x % base\n        x = (x - d) / base\n        r = string.char(DIGITS[d+1])\
    \ .. r\n    until x == 0\n    return r\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp81zxlnd8.lua:9:\
    \ attempt to index a nil value (global 'DIGITS')\nstack traceback:\n\t/tmp/tmp81zxlnd8.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp81zxlnd8.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  if base > 10 then\n    error(\"A base should\
    \ be smaller than 10.\")\n  end\n  local t = {}\n  while true do\n    local rest\
    \ = x % base\n    t[#t+1] = string.char(\"0\"+rest)\n    x = (x - rest) / base\n\
    \    if x == 0 then\n      break\n    end\n  end\n  return table.concat(t)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vj36pty.lua:23:\
    \ expected: \"22\"\nactual: \"\x02\x02\"\nstack traceback:\n\t/tmp/tmp_vj36pty.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if base > 10 then\n        error('Base more\
    \ than 10 is not supported.')\n    end\n    local num_list = {}\n    repeat\n\
    \        local num = x % base\n        table.insert(num_list, num)\n        x\
    \ = math.floor(x / base)\n    until x == 0\n    return table.concat(num_list,\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88s4ht12.lua:21:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmp88s4ht12.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local result = \"\"\n  repeat\n    local digit\
    \ = x % base\n    x = math.floor(x / base)\n    result = string.char(digit + string.byte('0'))\
    \ .. result\n  until x == 0\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local out = ''\n    while x > 0 do\n    \
    \    local i = x % base\n        out = out .. tostring(i)\n        x = math.floor(x\
    \ / base)\n    end\n    return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmlz5kd36.lua:18:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpmlz5kd36.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if base == nil then\n        base = 10\n\
    \    end\n    local str = \"\"\n    while x > 0 do\n        local digit = x %\
    \ base\n        str = str .. tostring(digit)\n        x = floor(x / base)\n  \
    \  end\n    return string.reverse(str)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxwyj5oeo.lua:12:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmpxwyj5oeo.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpxwyj5oeo.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal ret = \"\"\n\trepeat\n\t\tret = string.char((x\
    \ % base) + 48) .. ret\n\t\tx = math.floor(x / base)\n\tuntil x == 0\n\treturn\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local str = \"\"\n  while x > 0 do\n    local\
    \ n = x % base\n    str = tostring(n) .. str\n    x = (x - n) / base\n  end\n\
    \  return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmchswemx.lua:17:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpmchswemx.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local n = \"\"\n    local hex_digit = {\"\
    A\", \"B\", \"C\", \"D\", \"E\", \"F\"}\n    repeat\n        local r = x % base\n\
    \        if r < 10 then\n            n = tostring(r) .. n\n        else\n    \
    \        n = hex_digit[r - 9] .. n\n        end\n        x = math.floor(x / base)\n\
    \    until x == 0\n    return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local output = \"\"\n  local num\n  local str\
    \ = \"\"\n  while true do\n    num = x % base\n    if num > 9 then\n      str\
    \ = string.char(num - 10 + 0x61)\n    else\n      str = tostring(num)\n    end\n\
    \    output = str .. output\n    x = (x - num) / base\n    if x == 0 then\n  \
    \    break\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpclh_aqm9.lua:27:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpclh_aqm9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal out = \"\"\n\twhile x > 0 do\n\t\tout\
    \ = tostring(x % base) .. out\n\t\tx = math.floor(x / base)\n\tend\n\treturn out\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if base < 2 or base > 9 then\n        return\
    \ nil\n    end\n    local s = \"\"\n    local r\n    while x > 0 do\n        r\
    \ = x % base\n        x = (x - r) / base\n        s = string.char(r + 48) .. s\n\
    \    end\n    return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  if x < 0 then\n    error(\"x should be nonnegative\"\
    )\n  end\n  if base < 2 or base > 10 then\n    error(\"base should be in [2, 10]\"\
    )\n  end\n  local s = {}\n  local i = 1\n  while x > 0 do\n    s[i] = x % base\n\
    \    x = math.floor(x / base)\n    i = i + 1\n  end\n  return string.reverse(table.concat(s))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if base < 2 or base > 10 then\n        error(\"\
    unsupported base\")\n    end\n    local res = \"\"\n    while x > 0 do\n     \
    \   res = tostring(x % base) .. res\n        x = math.floor(x / base)\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    x = check_num(x)\n    base = base or 10\n\
    \    local t = {}\n    while x > 0 do\n        table.insert(t, 1, x % base)\n\
    \        x = math.floor(x / base)\n    end\n    return string.format(\"%d\", table.unpack(t))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4t3eks47.lua:5:\
    \ attempt to call a nil value (global 'check_num')\nstack traceback:\n\t/tmp/tmp4t3eks47.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmp4t3eks47.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local n = floor(x)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgw7syhzf.lua:24: ''end'' expected (to close ''function'' at
    line 4) near <eof>

    '
  stdout: ''
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = \"\"\n    while x ~= 0 do\n   \
    \     local y = math.fmod(x, base)\n        s = s .. string.sub(num_base_chars,\
    \ y + 1, y + 1)\n        x = math.floor(x / base)\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0gpfdtlg.lua:8:\
    \ bad argument #1 to 'sub' (string expected, got nil)\nstack traceback:\n\t/tmp/tmp0gpfdtlg.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp0gpfdtlg.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local MAX_ITER = 50\n    local EPSILON =\
    \ 1e-6\n    local res = ''\n    local cnt = 0\n    while x >= EPSILON and cnt\
    \ < MAX_ITER do\n        x = x * base\n        local int_x = math.floor(x)\n \
    \       res = res .. tostring(int_x)\n        x = x - int_x\n        cnt = cnt\
    \ + 1\n    end\n    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy1bgbx__.lua:22:\
    \ expected: \"22\"\nactual: \"24\"\nstack traceback:\n\t/tmp/tmpy1bgbx__.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local res = \"\"\n  while x ~= 0 do\n    local\
    \ r = x % base\n    x = math.floor(x / base)\n    res = res .. r\n  end\n  return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptl9wubjv.lua:18:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmptl9wubjv.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local quotient, remainder, str\n    str =\
    \ ''\n    repeat\n        quotient = math.floor(x / base)\n        remainder =\
    \ x % base\n        str = string.char(remainder + 48) .. str\n        x = quotient\n\
    \    until x == 0\n    return str\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local xx = math.floor(x)\n    local s = \"\
    \"\n    while true do\n        local r = xx % base\n        xx = math.floor(xx\
    \ / base)\n        if r < 10 then\n            s = string.char(r + 48) .. s\n\
    \        else\n            s = string.char(r + 55) .. s\n        end\n       \
    \ if xx == 0 then\n            break\n        end\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local d\n  local t = {}\n  local c = 0\n  local\
    \ x = tonumber(x)\n  while x > 0 do\n    d = x % base\n    x = math.floor(x /\
    \ base)\n    t[c + 1] = tostring(d)\n    c = c + 1\n  end\n  if c == 0 then\n\
    \    return \"0\"\n  end\n  local s = \"\"\n  for i = 1, c do\n    s = t[i] ..\
    \ s\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local s = \"\"\n  while x > 0 do\n    local\
    \ mod = x % base\n    x = (x - mod) / base\n    s = string.format(\"%s%d\", s,\
    \ mod)\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz23i03bd.lua:18:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpz23i03bd.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local result = {}\n    repeat\n        local\
    \ d = math.fmod(x, base)\n        x = math.floor(x / base)\n        table.insert(result,\
    \ 1, d)\n    until x == 0\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlhq3k01.lua:17:\
    \ expected: \"22\"\nactual: {2, 2}\nstack traceback:\n\t/tmp/tmpxlhq3k01.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local str = \"\"\n    while x > 0 do\n  \
    \      local n = x % base\n        if n <= 9 then\n            str = string.char(n\
    \ + 48) .. str\n        else\n            str = string.char(n + 87) .. str\n \
    \       end\n        x = math.floor(x / base)\n    end\n    return str\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal x = x or 0\n\tlocal base = base or 0\n\
    \t\n\tlocal ret = {}\n\twhile x > 0 do\n\t\tlocal y = x % base\n\t\ttable.insert(ret,\
    \ y)\n\t\tx = (x - y) / base\n\tend\n\t\n\treturn table.concat(ret, '')\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpflzoplfw.lua:21:\
    \ expected: \"22\"\nactual: \"22.0\"\nstack traceback:\n\t/tmp/tmpflzoplfw.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal y = \"\"\n\twhile x > 0 do\n\t\ty = string.char(string.byte('0')\
    \ + (x % base)) .. y\n\t\tx = math.floor(x / base)\n\tend\n\treturn y\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  assert(x >= 0)\n  assert(base <= 10)\n  local\
    \ s = \"\"\n  local q = x\n  while q ~= 0 do\n    local r = q % base\n    s =\
    \ string.char(string.byte(\"0\") + r) .. s\n    q = math.floor(q / base)\n  end\n\
    \  return s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local nums = {\n    \"0\", \"1\", \"2\", \"\
    3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\",\n    \"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\", \"G\", \"H\", \"I\", \"J\",\n    \"K\", \"L\", \"M\", \"N\", \"\
    O\", \"P\", \"Q\", \"R\", \"S\", \"T\",\n    \"U\", \"V\", \"W\", \"X\", \"Y\"\
    , \"Z\"\n  }\n  local result = \"\"\n  while x > 0 do\n    result = nums[x % base\
    \ + 1] .. result\n    x = math.floor(x / base)\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  -- if x is 0 then return \"0\"\n  if x == 0\
    \ then return \"0\" end\n  -- Initiate result to empty string.\n  local result\
    \ = \"\"\n  -- Repeat until x is 0.\n  while x > 0 do\n    -- Extract remainder.\n\
    \    local remainder = x % base\n    -- Append remainder as character to result.\n\
    \    result =  remainder_map[remainder] .. result\n    -- Truncate x by a factor\
    \ of 10.\n    x = math.floor(x / base)\n  end\n  -- return result\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpslingxuo.lua:14:\
    \ attempt to index a nil value (global 'remainder_map')\nstack traceback:\n\t\
    /tmp/tmpslingxuo.lua:14: in local 'candidate'\n\t/tmp/tmpslingxuo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local digits = {}\n    repeat\n        local\
    \ d = x % base\n        x = (x - d) / base\n        table.insert(digits, 1, d)\n\
    \    until x == 0\n    return table.concat(digits)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkmi0wmty.lua:17:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpkmi0wmty.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local r = x % base\n    x = (x - r) / base\n\
    \    if x > 0 then\n        return change_base(x, base) .. r\n    else\n     \
    \   return r\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgylu6_qn.lua:17:\
    \ expected: \"22\"\nactual: \"2.02\"\nstack traceback:\n\t/tmp/tmpgylu6_qn.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n\tlocal res = \"\"\n\twhile x > 0 do\n\t\tres\
    \ = res .. tostring(x % base)\n\t\tx = math.floor(x / base)\n\tend\n\treturn res\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpycy16hpj.lua:17:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpycy16hpj.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local code = '0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n\
    \  local res = ''\n  while x > 0 do\n    local b = x % base\n    res = string.sub(code,\
    \ b + 1, b + 1) .. res\n    x = math.floor(x / base)\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n  local sign\n  if x < 0 then\n    sign = -1\n\
    \    x = -x\n  else\n    sign = 1\n  end\n  local n = 0\n  local n_list = {}\n\
    \  repeat\n    n = n + 1\n    n_list[n] = x % base\n    x = math.floor(x / base)\n\
    \  until x == 0\n  local result = {}\n  for i = n, 1, -1 do\n    local n = n_list[i]\n\
    \    if n < 10 then\n      table.insert(result, string.char(n + 48))\n    else\n\
    \      table.insert(result, string.char(n + 55))\n    end\n  end\n  if sign ==\
    \ -1 then\n    table.insert(result, \"-\")\n  end\n  return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local str = \"\"\n    local dx\n    while\
    \ x > 0 do\n        dx = x % base\n        x = (x - dx) / base\n        str =\
    \ str .. string.char(48 + dx)\n    end\n    return str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq9roojbk.lua:19:\
    \ expected: \"100\"\nactual: \"001\"\nstack traceback:\n\t/tmp/tmpq9roojbk.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    if x < base then\n        return x\n    else\n\
    \        return change_base(math.floor(x / base), base) .. (x % base)\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqs14nav.lua:21:\
    \ expected: \"2\"\nactual: 2\nstack traceback:\n\t/tmp/tmpdqs14nav.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local digit = \"0123456789\"\n    local t\
    \ = {}\n    local sign = \"\"\n    local i\n    -- check for negative and record\
    \ it\n    if x < 0 then\n        sign = \"-\"\n        x = -x\n    end\n    --\
    \ the algorithm\n    repeat\n        i = (x % base) + 1\n        x = math.floor(x\
    \ / base)\n        t[#t+1] = digit:sub(i,i)\n    until x == 0\n    return sign\
    \ .. table.concat(t):reverse()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = change_base\n    lu.assertEquals(candidate(8, 3), '22')\n  \
    \  lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local result = ''\n    local digit\n    repeat\n\
    \        x, digit = math.floor(x / base), x % base\n        result = string.char(digit\
    \ + 48) .. result\n    until x == 0\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
- exit_code: 1
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local s = \"\";\n    local d = math.floor(x);\n\
    \    local r = x - d;\n    local h = \"0123456789\";\n    s = h:sub(d + 1, d +\
    \ 1);\n    while r > 0 do\n        d = math.floor(r * base);\n        r = r *\
    \ base - d;\n        s = s .. h:sub(d + 1, d + 1);\n    end\n    return s;\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = change_base\n\
    \    lu.assertEquals(candidate(8, 3), '22')\n    lu.assertEquals(candidate(9,\
    \ 3), '100')\n    lu.assertEquals(candidate(234, 2), '11101010')\n    lu.assertEquals(candidate(16,\
    \ 2), '10000')\n    lu.assertEquals(candidate(8, 2), '1000')\n    lu.assertEquals(candidate(7,\
    \ 2), '111')\n    lu.assertEquals(candidate(2, 3), '2')\n    lu.assertEquals(candidate(3,\
    \ 4), '3')\n    lu.assertEquals(candidate(4, 5), '4')\n    lu.assertEquals(candidate(5,\
    \ 6), '5')\n    lu.assertEquals(candidate(6, 7), '6')\n    lu.assertEquals(candidate(7,\
    \ 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpilb4p4ef.lua:21:\
    \ expected: \"22\"\nactual: \"8\"\nstack traceback:\n\t/tmp/tmpilb4p4ef.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822157
- exit_code: 0
  program: "-- Change numerical base of input number x to base.\n-- return string\
    \ representation after the conversion.\n-- base numbers are less than 10.\nlocal\
    \ function change_base(x, base)\n    local output = ''\n    while true do\n  \
    \      local mod = x % base\n        output = output .. string.char(string.byte('0')\
    \ + mod)\n        x = (x - mod) / base\n        if x == 0 then\n            break\n\
    \        end\n    end\n    return string.reverse(output)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = change_base\n    lu.assertEquals(candidate(8,\
    \ 3), '22')\n    lu.assertEquals(candidate(9, 3), '100')\n    lu.assertEquals(candidate(234,\
    \ 2), '11101010')\n    lu.assertEquals(candidate(16, 2), '10000')\n    lu.assertEquals(candidate(8,\
    \ 2), '1000')\n    lu.assertEquals(candidate(7, 2), '111')\n    lu.assertEquals(candidate(2,\
    \ 3), '2')\n    lu.assertEquals(candidate(3, 4), '3')\n    lu.assertEquals(candidate(4,\
    \ 5), '4')\n    lu.assertEquals(candidate(5, 6), '5')\n    lu.assertEquals(candidate(6,\
    \ 7), '6')\n    lu.assertEquals(candidate(7, 8), '7')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822157
