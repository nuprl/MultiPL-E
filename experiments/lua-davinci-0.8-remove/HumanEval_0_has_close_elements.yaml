name: HumanEval_0_has_close_elements
language: lua
prompt: "-- Check if in given list of numbers, are any two numbers closer to each\
  \ other than\n-- given threshold.\nlocal function has_close_elements(numbers, threshold)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = has_close_elements\n\
  \    lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.3), true)\n   \
  \ lu.assertEquals(candidate({1.0, 2.0, 3.9, 4.0, 5.0, 2.2}, 0.05), false)\n    lu.assertEquals(candidate({1.0,\
  \ 2.0, 5.9, 4.0, 5.0}, 0.95), true)\n    lu.assertEquals(candidate({1.0, 2.0, 5.9,\
  \ 4.0, 5.0}, 0.8), false)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0,\
  \ 2.0}, 0.1), true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 1.0),\
  \ true)\n    lu.assertEquals(candidate({1.1, 2.2, 3.1, 4.1, 5.1}, 0.5), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal n = #numbers\n\tfor i = 1, n do\n\t\tfor j = i + 1, n do\n\t\
    \t\tif numbers[i] - numbers[j] <= threshold or numbers[j] - numbers[i] <= threshold\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
  "  local n = #numbers\n  for i = 1, n do\n    for j = i + 1, n do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  -- Find closest element to each element in numbers.\n\
    \  local closest_elements = {}\n  for i = 1, #numbers do\n    local current_value\
    \ = numbers[i]\n    local min_distance = math.huge\n    local closest_element\
    \ = nil\n    for j = 1, #numbers do\n      if i ~= j then\n        local distance\
    \ = math.abs(current_value - numbers[j])\n        if distance < min_distance then\n\
    \          min_distance = distance\n          closest_element = numbers[j]\n \
    \       end\n      end\n    end\n    closest_elements[i] = closest_element\n \
    \ end", "    for _, val1 in ipairs(numbers) do\n        for _, val2 in ipairs(numbers)\
    \ do\n            if (math.abs(val1 - val2) < threshold) then\n              \
    \  return true\n            end\n        end\n    end\n    return false\nend",
  "\ttable.sort(numbers)\n\tfor i = 1, #numbers - 1 do\n\t\tif numbers[i + 1] - numbers[i]\
    \ < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", " \
    \ local sorted = table.sort(numbers)\n  local last_i = #sorted\n  for i = 1, last_i\
    \ do\n    if i < last_i and sorted[i + 1] - sorted[i] < threshold then\n     \
    \ return true\n    end\n  end\n  return false\nend", "\ttable.sort(numbers)\n\t\
    for i = 1, #numbers - 1 do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "    for index, x in\
    \ ipairs(numbers) do\n        for index2, y in ipairs(numbers) do\n          \
    \  if (index ~= index2) and (math.abs(x - y) < threshold) then\n             \
    \   return true\n            end\n        end\n    end\n    return false\nend",
  "    for i = 1, #numbers do\n        for j = i + 1, #numbers do\n            if\
    \ math.abs(numbers[i] - numbers[j]) < threshold then\n                return true\n\
    \            end\n        end\n    end\n    return false\nend", "\tfor _, number\
    \ in ipairs(numbers) do\n\t\tfor _, other_number in ipairs(numbers) do\n\t\t\t\
    if (math.abs(number - other_number) < threshold) then\n\t\t\t\treturn true\n\t\
    \t\tend\n\t\tend\n\tend\n\treturn false\nend", "\tlocal max_dist = 0\n\ttable.sort(numbers)\n\
    \tfor i = 1, #numbers-1 do\n\t\tlocal diff = numbers[i+1] - numbers[i]\n\t\tif\
    \ diff < max_dist then\n\t\t\tmax_dist = diff\n\t\tend\n\tend\n\treturn max_dist\
    \ < threshold\nend", "\tlocal table_size = #numbers\n\tif table_size < 2 then\n\
    \t\treturn false\n\tend", "\tlocal nums = table.copy(numbers)\n\ttable.sort(nums)\n\
    \tfor i = 1, #nums - 1 do\n\t\tif nums[i + 1] - nums[i] < threshold then\n\t\t\
    \treturn true\n\t\tend\n\tend\n\treturn false\nend", "  local sorted = number_list.sort(numbers)\n\
    \  for i = 1, #sorted - 1 do\n    if math.abs(sorted[i] - sorted[i + 1]) < threshold\
    \ then\n      return true\n    end\n  end\n  return false\nend", "    local last\
    \ = 0\n    for i, num in ipairs(numbers) do\n        if num - last < threshold\
    \ then\n            return true\n        end\n        last = num\n    end\n  \
    \  return false\nend", "    for i = 1, #numbers do\n        for j = i + 1, #numbers\
    \ do\n            if numbers[i] ~= numbers[j] and abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    for i = 1, #numbers - 1 do\n        for\
    \ j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "\tlocal num_of_numbers = #numbers\n\tfor i = 1, num_of_numbers\
    \ - 1 do\n\t\tfor j = i + 1, num_of_numbers do\n\t\t\tif abs(numbers[i] - numbers[j])\
    \ < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\n\
    end", "\tfor i = 1, #numbers - 1 do\n\t\tfor j = i + 1, #numbers do\n\t\t\tif\
    \ math.abs(numbers[i] - numbers[j]) < threshold then\n\t\t\t\treturn true\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn false\nend", "  local elements = {}\n  local close_elements\
    \ = false\n  for _, number in ipairs(numbers) do\n    if elements[number] then\n\
    \      close_elements = true\n      break\n    end\n    elements[number + threshold]\
    \ = true\n    elements[number - threshold] = true\n  end\n  return close_elements\n\
    end", "\ttable.sort(numbers)\n\t\n\tlocal len = #numbers\n\t\n\tfor i = 1, len\
    \ - 1 do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\t\n\treturn false\nend", "    for k, v in pairs(numbers) do\n\
    \        if (k > 1) then\n            if (math.abs(numbers[k] - numbers[k - 1])\
    \ < threshold) then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "  local n = #numbers\n  if n < 2 then\n   \
    \ return false\n  end\n  table.sort(numbers)\n  local ok = false\n  for i = 1,\
    \ n - 1 do\n    if numbers[i + 1] - numbers[i] < threshold then\n      ok = true\n\
    \      break\n    end\n  end\n  return ok\nend", "  local diff = math.huge\n \
    \ for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      diff = math.min(diff,\
    \ math.abs(numbers[i] - numbers[j]))\n    end\n  end\n  return diff < threshold\n\
    end", "    local result = false\n    local number_count = #numbers\n    for i\
    \ = 1, number_count do\n        local number = numbers[i]\n        for j = 1,\
    \ number_count do\n            local other_number = numbers[j]\n            if\
    \ i ~= j and math.abs(number - other_number) < threshold then\n              \
    \  result = true\n                break\n            end\n        end\n    end\n\
    \    return result\nend", "    local last_n = numbers[1]\n    for _, n in ipairs(numbers)\
    \ do\n        if math.abs(n - last_n) < threshold then\n            return true\n\
    \        end\n        last_n = n\n    end\n    return false\nend", "\t-- Extract\
    \ pairs of numbers and compare them\n\tlocal first, second = numbers[1], numbers[2]\n\
    \tfor i = 3, #numbers do\n\t\tlocal dist = math.abs(first - second)\n\t\tif dist\
    \ < threshold then\n\t\t\treturn true\n\t\tend\n\t\tfirst, second = second, numbers[i]\n\
    \tend\n\treturn false\nend", "  local num_elements = #numbers\n  for i = 1, num_elements\
    \ - 1 do\n    for j = i + 1, num_elements do\n      if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n        return true\n      end\n    end\n  end\n  return false\n\
    end", "    local last = numbers[1]\n    for i = 2, #numbers do\n        if math.abs(numbers[i]\
    \ - last) < threshold then\n            return true\n        end\n        last\
    \ = numbers[i]\n    end\n    return false\nend", "\tlocal n = #numbers\n\tif n\
    \ < 2 then\n\t\treturn false\n\tend\n\ttable.sort(numbers)\n\tfor i = 1, n - 1\
    \ do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\t\t\treturn true\n\
    \t\tend\n\tend\n\treturn false\nend", "\tif #numbers <= 1 then\n\t\treturn false\n\
    \tend", "  local min = 999999\n  for _, num1 in ipairs(numbers) do\n    for _,\
    \ num2 in ipairs(numbers) do\n      local dist = math.abs(num1 - num2)\n     \
    \ if dist < min and dist > 0 then\n        min = dist\n      end\n    end\n  end\n\
    \  return min < threshold\nend", "    -- Make sure we don't sort the original\
    \ table.\n    local new_numbers = {}\n    for k, v in pairs(numbers) do\n    \
    \    new_numbers[k] = v\n    end\n    -- Sort the table in ascending order.\n\
    \    table.sort(new_numbers)\n    -- Iterate the table from 2nd element to the\
    \ last one and check if the current\n    -- element is closer to the one before,\
    \ than the given threshold.\n    for i = 2, #new_numbers do\n        if new_numbers[i]\
    \ - new_numbers[i - 1] < threshold then\n            return true\n        end\n\
    \    end\n    return false\nend", "    local threshold_squared = threshold * threshold\n\
    \    local length = #numbers\n    for i = 1, length - 1 do\n        for j = i\
    \ + 1, length do\n            local a = numbers[i]\n            local b = numbers[j]\n\
    \            local diff = a - b\n            if diff * diff < threshold_squared\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "    local size = #numbers\n    local sorted = {}\n  \
    \  for i = 1, size do\n        sorted[i] = numbers[i]\n    end\n    table.sort(sorted)\n\
    \    for i = 1, size - 1 do\n        if sorted[i + 1] - sorted[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n          \
    \  if math.abs(numbers[i] - numbers[j]) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "\tif threshold\
    \ == 0 then\n\t\treturn true\n\tend\n\tfor _, n1 in ipairs(numbers) do\n\t\tfor\
    \ _, n2 in ipairs(numbers) do\n\t\t\tif math.abs(n1 - n2) < threshold then\n\t\
    \t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "\tlocal index,\
    \ last_index = 0, #numbers\n\twhile index < last_index do\n\t\tif math.abs(numbers[index]\
    \ - numbers[index + 1]) < threshold then\n\t\t\treturn true\n\t\tend\n\t\tindex\
    \ = index + 1\n\tend\n\treturn false\nend", "    local len = #numbers\n    for\
    \ i = 1, len - 1 do\n        for j = i + 1, len do\n            if numbers[i]\
    \ + threshold > numbers[j] then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    for _, number in ipairs(numbers)\
    \ do\n        if type(number) ~= \"number\" then\n            error(\"expected\
    \ a number, got \" .. type(number))\n        end\n    end", "\tif #numbers < 2\
    \ then\n\t\treturn false\n\tend", "    table.sort(numbers)\n    for i = 1, #numbers\
    \ - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n          \
    \  return true\n        end\n    end\n    return false\nend", "    for i = 1,\
    \ #numbers do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "\tfor i = 1, #numbers do\n\t\t\
    for j = i + 1, #numbers do\n\t\t\tif math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend",
  "    table.sort(numbers)\n    local prev = numbers[1]\n    for i=2,#numbers do\n\
    \        if numbers[i] - prev < threshold then\n            return true\n    \
    \    end\n        prev = numbers[i]\n    end\n    return false\nend", "\ttable.sort(numbers)\n\
    \tfor i = 1, #numbers - 1 do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "\tlocal last_i = #numbers\n\
    \tfor i = 1, last_i - 1 do\n\t\tfor j = i + 1, last_i do\n\t\t\tif math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn false\nend", "    local _, prev = next(numbers)\n    for _, curr\
    \ in pairs(numbers) do\n        if curr - prev < threshold then\n            return\
    \ true\n        end\n        prev = curr\n    end\n    return false\nend", " \
    \   local has_close_elements = false\n    for i = 1, #numbers - 1 do\n       \
    \ for j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                has_close_elements = true\n              \
    \  break\n            end\n        end\n    end\n    return has_close_elements\n\
    end", "  if #numbers == 0 then\n    return false\n  end", "\t-- Order numbers\
    \ descendingly\n\ttable.sort(numbers, function(a, b) return a > b end)", "   \
    \ local count = table.getn(numbers)\n    if count == 0 then\n        return false\n\
    \    end\n    local numbers_sorted = {}\n    for i = 1, count do\n        numbers_sorted[i]\
    \ = numbers[i]\n    end\n    table.sort(numbers_sorted)\n    for i = 1, count\
    \ - 1 do\n        if numbers_sorted[i + 1] - numbers_sorted[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend", "  local\
    \ sorted = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i+1]\
    \ - sorted[i] < threshold then\n      return true\n    end\n  end\n  return false\n\
    end", "  local i, j\n  for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers\
    \ do\n      if math.abs(numbers[i] - numbers[j]) < threshold then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "\tif #numbers < 2 then\n\
    \t\treturn false\n\tend", "  local prev = numbers[1]\n  for i = 2, #numbers do\n\
    \    if numbers[i] - prev < threshold then\n      return true\n    end\n    prev\
    \ = numbers[i]\n  end\n  return false\nend", "    if #numbers <= 1 then\n    \
    \    return false\n    end", "  table.sort(numbers)\n  for i = 1, #numbers - 1\
    \ do\n    if numbers[i + 1] - numbers[i] < threshold then\n      return true\n\
    \    end\n  end\n  return false\nend", "    -- First number is always assumed\
    \ to be closest to itself.\n    local closest_distance = math.abs(numbers[1] -\
    \ numbers[1])", "\t-- Sort\n\tsort(numbers)\n\t-- Check for duplicates\n\tfor\
    \ i = 1, #numbers - 1 do\n\t\tif numbers[i + 1] - numbers[i] < threshold then\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      if numbers[i] > numbers[j] then\n\
    \        local x = numbers[i] - numbers[j]\n        if x < threshold then\n  \
    \        return true\n        end\n      else\n        local x = numbers[j] -\
    \ numbers[i]\n        if x < threshold then\n          return true\n        end\n\
    \      end\n    end\n  end\n  return false\nend", "\t-- The algorithm sorts the\
    \ numbers and then it checks if any two neighbours are\n\t-- closer to each other\
    \ than the threshold. The time complexity is O(n log n).\n\ttable.sort(numbers)\n\
    \tfor i = 2, #numbers do\n\t\tif numbers[i] - numbers[i - 1] < threshold then\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "    local i, j\n   \
    \ local hthreshold = threshold * 0.5\n    local imin = math.floor(numbers[1] -\
    \ hthreshold)\n    local imax = math.ceil(numbers[1] + hthreshold)\n    for i\
    \ = 2, #numbers do\n        local imin2 = math.floor(numbers[i] - hthreshold)\n\
    \        local imax2 = math.ceil(numbers[i] + hthreshold)\n        for j = imin,\
    \ imax do\n            if j >= imin2 and j <= imax2 then\n                --print(\"\
    close elements found\", numbers[i], numbers[j])\n                return true\n\
    \            end\n        end\n        imin = imin2\n        imax = imax2\n  \
    \  end\n    return false\nend", "  for _, n1 in ipairs(numbers) do\n    for _,\
    \ n2 in ipairs(numbers) do\n      if n1 ~= n2 and n1 > n2 then\n        local\
    \ dist = n1 - n2\n        if dist < threshold then\n          return true\n  \
    \      end\n      end\n    end\n  end\n  return false\nend", "    local i = 1\n\
    \    while i <= #numbers do\n        local j = i + 1\n        while j <= #numbers\
    \ do\n            if math.abs(numbers[i] - numbers[j]) < threshold then\n    \
    \            return true\n            end\n            j = j + 1\n        end\n\
    \        i = i + 1\n    end\n    return false\nend", "    local sorted = table.sort(numbers)\n\
    \    local prev = sorted[1]\n    for i = 2, #sorted do\n        if sorted[i] -\
    \ prev < threshold then\n            return true\n        end\n        prev =\
    \ sorted[i]\n    end\n    return false\nend", "    for i = 1, #numbers - 1 do\n\
    \        for j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    table.sort(numbers)\n    for i = 1, #numbers\
    \ - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n          \
    \  return true\n        end\n    end\n    return false\nend", "    local is_left_assigned\
    \ = {}\n    local is_right_assigned = {}\n    for i, number_a in ipairs(numbers)\
    \ do\n        for j, number_b in ipairs(numbers) do\n            if i ~= j and\
    \ math.abs(number_a - number_b) < threshold then\n                if is_left_assigned[number_a]\
    \ == nil then\n                    is_left_assigned[number_a] = number_b\n   \
    \             else\n                    return false\n                end\n  \
    \              if is_right_assigned[number_b] == nil then\n                  \
    \  is_right_assigned[number_b] = number_a\n                else\n            \
    \        return false\n                end\n            end\n        end\n   \
    \ end\n    return true\nend", "    for i = 1, #numbers do\n        for j = i +\
    \ 1, #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "    for i = 1, #numbers - 1 do\n        for j = i + 1,\
    \ #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "  if #numbers < 2 then\n    return false\n  end", "  -- Sort the\
    \ list of numbers, so that left element is always smaller than right.\n  table.sort(numbers)",
  "    local sorted = numbers:sort()\n    for i=1, #sorted-1 do\n        if sorted[i+1]\
    \ - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend", "    local n = #numbers\n    if n < 2 then\n        return\
    \ false\n    end\n    for i = 1, n - 1 do\n        for j = i + 1, n do\n     \
    \       if math.abs(numbers[i] - numbers[j]) < threshold then\n              \
    \  return true\n            end\n        end\n    end\n    return false\nend",
  "  for i,a in ipairs(numbers) do\n    for j,b in ipairs(numbers) do\n      if (i\
    \ ~= j) and (a-b < threshold) then\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "  -- Sort the array of numbers.\n  local sorted\
    \ = sort(numbers)", "  local sorted = sort(numbers)\n  for i = 1, #sorted - 1\
    \ do\n    if sorted[i + 1] - sorted[i] < threshold then\n      return true\n \
    \   end\n  end\n  return false\nend", "  -- Sort the list\n  table.sort(numbers)",
  "  local sorted = table.sort(numbers)\n  for i = 1, #sorted - 1 do\n    if sorted[i\
    \ + 1] - sorted[i] < threshold then\n      return true\n    end\n  end\n  return\
    \ false\nend", "\tassert(type(numbers) == \"table\")\n\tassert(type(threshold)\
    \ == \"number\")", "\ttable.sort(numbers)\n\tfor i=1,#numbers-1 do\n\t\tif numbers[i+1]\
    \ - numbers[i] < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\n\
    end", "  local sorted = copy(numbers)\n  sort(sorted)\n  for i = 1, #sorted -\
    \ 1 do\n    if sorted[i + 1] - sorted[i] < threshold then\n      return true\n\
    \    end\n  end\n  return false\nend", "    local numbers_number = #numbers\n\
    \    if numbers_number <= 1 then\n        return false\n    end", "\tlocal n =\
    \ #numbers\n\tif n < 2 then\n\t\treturn false\n\tend\n\tlocal sorted = ls_copy(numbers)\n\
    \tls_sort(sorted)\n\tlocal x = sorted[1]\n\tfor i = 2, n do\n\t\tlocal y = sorted[i]\n\
    \t\tif y - x < threshold then\n\t\t\treturn true\n\t\tend\n\t\tx = y\n\tend\n\t\
    return false\nend", "    -- Sort numbers.\n    local sorted = copy_table(numbers)\n\
    \    table.sort(sorted)", "    local closest_distance = math.huge\n    for i =\
    \ 1, #numbers do\n        for j = i + 1, #numbers do\n            local distance\
    \ = math.abs(numbers[i] - numbers[j])\n            if distance < closest_distance\
    \ then\n                closest_distance = distance\n            end\n       \
    \ end\n    end\n    return closest_distance < threshold\nend", "\tif #numbers\
    \ < 2 then\n\t\treturn false\n\tend", "    for i = 1, #numbers do\n        for\
    \ j = i + 1, #numbers do\n            if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n                return true\n            end\n        end\n    end\n \
    \   return false\nend", "  assert(numbers ~= nil)\n  assert(threshold ~= nil)\n\
    \  assert(threshold > 0)", "    if #numbers == 0 then\n        return false\n\
    \    end", "  for i, n1 in ipairs(numbers) do\n    for j, n2 in ipairs(numbers)\
    \ do\n      if i ~= j and math.abs(n1 - n2) < threshold then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "    if #numbers < 2 then\n\
    \        return false\n    end", "  local last_pair_diff = math.huge\n  for _,\
    \ a in ipairs(numbers) do\n    for _, b in ipairs(numbers) do\n      if a ~= b\
    \ then\n        last_pair_diff = math.min(last_pair_diff, math.abs(a - b))\n \
    \     end\n    end\n  end\n  return last_pair_diff < threshold\nend", "  table.sort(numbers)\n\
    \  for i=1, #numbers - 1 do\n    if numbers[i+1] - numbers[i] < threshold then\n\
    \      return true\n    end\n  end\n  return false\nend", "\tfor i = 1, #numbers\
    \ - 1 do\n\t\tfor j = i + 1, #numbers do\n\t\t\tif math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\n\
    end", "  local sorted = {}\n  for _, v in ipairs(numbers) do\n    sorted[#sorted\
    \ + 1] = v\n  end\n  table.sort(sorted)\n  for i = 1, #sorted - 1 do\n    if sorted[i\
    \ + 1] - sorted[i] < threshold then\n      return true\n    end\n  end\n  return\
    \ false\nend", "    local sorted = {}\n    local sorted_n = 0\n    for _, n in\
    \ ipairs(numbers) do\n        local n_i = n / threshold\n        local i = 1\n\
    \        while i <= sorted_n and sorted[i] < n_i do\n            i = i + 1\n \
    \       end\n        for j = sorted_n, i, -1 do\n            sorted[j + 1] = sorted[j]\n\
    \        end\n        sorted[i] = n_i\n        sorted_n = sorted_n + 1\n    end\n\
    \    for i = 1, sorted_n - 1 do\n        if sorted[i + 1] - sorted[i] < 1 then\n\
    \            return true\n        end\n    end\n    return false\nend", "\tlocal\
    \ min_distance = threshold\n\tfor i = 1, #numbers - 1 do\n\t\tfor j = i + 1, #numbers\
    \ do\n\t\t\tlocal distance = math.abs(numbers[i] - numbers[j])\n\t\t\tif distance\
    \ < min_distance then\n\t\t\t\tmin_distance = distance\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn min_distance < threshold\nend", "\tlocal has_close_elements = false\n\
    \tfor i, v in ipairs(numbers) do\n\t\tfor j, w in ipairs(numbers) do\n\t\t\tif\
    \ j > i and math.abs(v - w) < threshold then\n\t\t\t\thas_close_elements = true\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn has_close_elements\nend", " \
    \   local closest_pair = threshold * 2\n    for _, num in ipairs(numbers) do\n\
    \        local closest = math.abs(num - (num // threshold) * threshold)\n    \
    \    if closest < closest_pair then\n            closest_pair = closest\n    \
    \    end\n    end\n    return closest_pair < threshold\nend", "\tlocal len = #numbers\n\
    \tfor i = 1, len do\n\t\tfor j = i + 1, len do\n\t\t\tif abs(numbers[i] - numbers[j])\
    \ < threshold then\n\t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\n\
    end", "    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n  \
    \          if math.abs(numbers[i] - numbers[j]) < threshold then\n           \
    \     return true\n            end\n        end\n    end\n    return false\nend",
  "  local sum = 0\n  local numbers_count = #numbers\n  local end_count = numbers_count\
    \ - 1\n  for i = 1, end_count do\n    local first_number = numbers[i]\n    for\
    \ j = i + 1, numbers_count do\n      local second_number = numbers[j]\n      local\
    \ diff = first_number - second_number\n      sum = sum + diff\n      if diff >=\
    \ threshold then\n        return false\n      end\n    end\n  end\n  return true\n\
    end", "    local min_diff = math.huge\n    for i = 1, #numbers do\n        for\
    \ j = i + 1, #numbers do\n            min_diff = math.min(min_diff, math.abs(numbers[i]\
    \ - numbers[j]))\n        end\n    end\n    return min_diff < threshold\nend",
  "    table.sort(numbers)\n    for i = 1, #numbers - 1 do\n        if numbers[i +\
    \ 1] - numbers[i] < threshold then\n            return true\n        end\n   \
    \ end\n    return false\nend", "\tfor i = 1, #numbers - 1 do\n\t\tfor j = i +\
    \ 1, #numbers do\n\t\t\tif math.abs(numbers[i] - numbers[j]) < threshold then\n\
    \t\t\t\treturn true\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend", "    for\
    \ i = 1, #numbers do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    assert(threshold > 0)\n  \
    \  if #numbers <= 1 then\n        return false\n    end\n    table.sort(numbers)\n\
    \    for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "  for i,a in ipairs(numbers) do\n    for j,b in ipairs(numbers) do\n      if math.abs(a\
    \ - b) < threshold and i ~= j then\n        return true\n      end\n    end\n\
    \  end\n  return false\nend", "    table.sort(numbers)\n    for i = 1, #numbers\
    \ - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n          \
    \  return true\n        end\n    end\n    return false\nend", "    table.sort(numbers)\n\
    \    for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "\t-- Sorting is O(n log n) operation, and it's the most expensive operation.\n\t\
    table.sort(numbers)", "  local size = #numbers\n  for i = 1, size do\n    for\
    \ j = i + 1, size do\n      if numbers[i] - numbers[j] < threshold then\n    \
    \    return true\n      end\n    end\n  end\n  return false\nend", "  local n\
    \ = #numbers\n  for i = 1, n - 1 do\n    for j = i + 1, n do\n      if numbers[i]\
    \ - numbers[j] < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "\tlocal indexes = get_indexes(numbers)\n\tlocal sorted_indexes\
    \ = sort_by_val(indexes)\n\tfor i = 1, #sorted_indexes - 1 do\n\t\tlocal i1 =\
    \ sorted_indexes[i][1]\n\t\tlocal i2 = sorted_indexes[i + 1][1]\n\t\tif abs(numbers[i1]\
    \ - numbers[i2]) < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn\
    \ false\nend", "    local sorted = {}\n    for _,v in ipairs(numbers) do\n   \
    \     table.insert(sorted, v)\n    end\n    table.sort(sorted)\n    for i = 1,#sorted\
    \ - 1 do\n        if sorted[i + 1] - sorted[i] < threshold then\n            return\
    \ true\n        end\n    end\n    return false\nend", "  local current\n  for\
    \ i = 1, #numbers do\n    local value = numbers[i]\n    if current then\n    \
    \  if math.abs(value - current) < threshold then\n        return true\n      end\n\
    \    end\n    current = value\n  end\n  return false\nend", "    local last =\
    \ math.huge\n    for _, v in ipairs(numbers) do\n        if v > last + threshold\
    \ then\n            return false\n        end\n        last = v\n    end\n   \
    \ return true\nend", "    if #numbers < 2 then\n        return false\n    end",
  "    local len = #numbers\n    if len <= 1 then\n        return false\n    end",
  "  local N = #numbers\n  if N == 0 then\n    return false\n  end\n  table.sort(numbers)\n\
    \  local prev = numbers[1]\n  for k = 2,N do\n    if numbers[k] - prev < threshold\
    \ then\n      return true\n    end\n    prev = numbers[k]\n  end\n  return false\n\
    end", "\t-- Sort numbers in ascending order.\n\ttable.sort(numbers)", "    table.sort(numbers)\n\
    \    for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "\ttable.sort(numbers)\n\tfor i=1, #numbers - 1 do\n\t\tif numbers[i+1] - numbers[i]\
    \ < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", " \
    \ table.sort(numbers)\n  for i = 1, #numbers - 1 do\n    if numbers[i + 1] - numbers[i]\
    \ < threshold then\n      return true\n    end\n  end\n  return false\nend", "\t\
    table.sort(numbers)\n\tfor idx = 1, #numbers - 1 do\n\t\tif math.abs(numbers[idx]\
    \ - numbers[idx + 1]) < threshold then\n\t\t\treturn true\n\t\tend\n\tend\n\t\
    return false\nend", "  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n\
    \      if math.abs(numbers[i] - numbers[j]) < threshold then\n        return true\n\
    \      end\n    end\n  end\n  return false\nend", "\tlocal sorted = numbers:sort()\n\
    \tfor i = 1, #sorted - 1 do\n\t\tif sorted[i + 1] - sorted[i] < threshold then\n\
    \t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", "    if not numbers or\
    \ #numbers == 0 then\n        return false\n    end", "  local count = #numbers\n\
    \  if count < 2 then\n    return false\n  end\n  for i = 1, count - 1 do\n   \
    \ local n1 = numbers[i]\n    for j = i + 1, count do\n      local n2 = numbers[j]\n\
    \      if math.abs(n1 - n2) < threshold then\n        return true\n      end\n\
    \    end\n  end\n  return false\nend", "  for i, number1 in ipairs(numbers) do\n\
    \    for j, number2 in ipairs(numbers) do\n      if i ~= j and math.abs(number1\
    \ - number2) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "\t-- Sort the list, i.e. put it in ascending order.\n\t\
    table.sort(numbers)", "    local max_index = #numbers\n    if max_index < 2 then\n\
    \        return false\n    end", "\ttable.sort(numbers)\n\tfor i = 1, #numbers-1\
    \ do\n\t\tif numbers[i+1] - numbers[i] < threshold then\n\t\t\treturn true\n\t\
    \tend\n\tend\n\treturn false\nend", "    local first = numbers[1]\n    for i =\
    \ 2, #numbers do\n        if numbers[i] < first + threshold then\n           \
    \ return true\n        end\n        first = numbers[i]\n    end\n    return false\n\
    end", "    -- Bubble sort values.\n    local i, j\n    for i = 1, #numbers do\n\
    \        for j = 1, #numbers-i do\n            if numbers[j] > numbers[j+1] then\n\
    \                local tmp = numbers[j]\n                numbers[j] = numbers[j+1]\n\
    \                numbers[j+1] = tmp\n            end\n        end\n    end", " \
    \   local number_count = #numbers\n    for i = 1, number_count - 1 do\n      \
    \  for j = i + 1, number_count do\n            if math.abs(numbers[i] - numbers[j])\
    \ < threshold then\n                return true\n            end\n        end\n\
    \    end\n    return false\nend", "    local count = #numbers\n    if count <\
    \ 2 then\n        return false\n    end\n    table.sort(numbers)\n    for i =\
    \ 1, count - 1 do\n        if math.abs(numbers[i] - numbers[i + 1]) < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    for i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n          \
    \  if math.abs(numbers[i] - numbers[j]) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "    for\
    \ i = 1, #numbers - 1 do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    table.sort(numbers)\n    for\
    \ i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend", "  table.sort(numbers)\n\
    \  for i = 1, #numbers - 1 do\n    if numbers[i + 1] - numbers[i] < threshold\
    \ then\n      return true\n    end\n  end\n  return false\nend", "    --[[\n \
    \   We use the following property:\n        Given a set of numbers sorted in ascending\
    \ order, if you want to know if\n        there are any two numbers whose distance\
    \ is less than a given threshold,\n        then you only need to compare the numbers\
    \ that are adjacent to each other.\n    --]]\n    table.sort(numbers)\n    for\
    \ i = 1, #numbers - 1 do\n        if math.abs(numbers[i] - numbers[i + 1]) < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    for _, n1 in ipairs(numbers) do\n        for _, n2 in ipairs(numbers) do\n\
    \            if n1 ~= n2 and math.abs(n1 - n2) < threshold then\n            \
    \    return true\n            end\n        end\n    end\n    return false\nend",
  "  local numbers_count = #numbers\n  if numbers_count < 2 then\n    return false\n\
    \  end", "  if #numbers < 2 then\n    return false\n  end", "  if #numbers < 2\
    \ then\n    return false\n  end", "\t-- First, sort numbers.\n\ttable.sort(numbers)",
  "    table.sort(numbers)\n    for i, value in ipairs(numbers) do\n        if numbers[i\
    \ + 1] - value < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend", "\tlocal len = #numbers\n\tif len == 0 then\n\t\treturn\
    \ false\n\tend\n\tif len == 1 then\n\t\treturn false\n\tend\n\tlocal num_close\
    \ = 0\n\tfor i = 1, len - 1 do\n\t\tfor j = i + 1, len do\n\t\t\tlocal a = numbers[i]\n\
    \t\t\tlocal b = numbers[j]\n\t\t\tif a == b then\n\t\t\t\treturn true\n\t\t\t\
    end\n\t\t\tif math.abs(a - b) < threshold then\n\t\t\t\tnum_close = num_close\
    \ + 1\n\t\t\t\tif num_close > 1 then\n\t\t\t\t\treturn true\n\t\t\t\tend\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn false\nend", "  local min_diff = threshold\n \
    \ for i = 1, #numbers - 1 do\n    for j = i + 1, #numbers do\n      local diff\
    \ = math.abs(numbers[i] - numbers[j])\n      if diff < min_diff then\n       \
    \ min_diff = diff\n      end\n    end\n  end\n  return min_diff ~= threshold\n\
    end", "    local max, min = nil, nil\n    for i,v in ipairs(numbers) do\n    \
    \    if min == nil or min > v then\n            min = v\n        end\n       \
    \ if max == nil or max < v then\n            max = v\n        end\n    end\n \
    \   return max - min < threshold\nend", "    table.sort(numbers)\n    for i =\
    \ 1, (#numbers - 1) do\n        if numbers[i + 1] - numbers[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend", "  --\
    \ Get all distances between elements.\n  local distances = {}\n  for i = 1, #numbers\
    \ - 1 do\n    for j = i + 1, #numbers do\n      table.insert(distances, numbers[j]\
    \ - numbers[i])\n    end\n  end", "    local sorted = table.copy(numbers)\n  \
    \  table.sort(sorted)\n    local prev = sorted[1]\n    for i=2,#sorted do\n  \
    \      if sorted[i] - prev < threshold then\n            return true\n       \
    \ end\n        prev = sorted[i]\n    end\n    return false\nend", "    table.sort(numbers)\n\
    \    for i, v in ipairs(numbers) do\n        if numbers[i + 1] - v < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    for i, n1 in ipairs(numbers) do\n        for j, n2 in ipairs(numbers) do\n\
    \            if j > i and math.abs(n1 - n2) < threshold then\n               \
    \ return true\n            end\n        end\n    end\n    return false\nend",
  "    local ordered = {}\n    for i, v in ipairs(numbers) do\n        ordered[v]\
    \ = i\n    end\n    table.sort(ordered)\n    for i = 1, #ordered do\n        local\
    \ diff = math.abs(ordered[i] - ordered[i + 1])\n        if diff <= threshold then\n\
    \            return true\n        end\n    end\n    return false\nend", "    for\
    \ _, n1 in ipairs(numbers) do\n        for _, n2 in ipairs(numbers) do\n     \
    \       if n1 ~= n2 and math.abs(n1 - n2) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "    for\
    \ i, x in ipairs(numbers) do\n        for j, y in ipairs(numbers) do\n       \
    \     if (i ~= j) and math.abs(x - y) < threshold then\n                return\
    \ true\n            end\n        end\n    end\n    return false\nend", "  -- We'll\
    \ use a simple O(n^2) algorithm to check.\n  for i = 1, #numbers - 1 do\n    for\
    \ j = i + 1, #numbers do\n      if math.abs(numbers[i] - numbers[j]) < threshold\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend",
  "    table.sort(numbers)\n    for i = 1, #numbers-1 do\n        if numbers[i+1]\
    \ - numbers[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend", "    table.sort(numbers)\n    for i = 1, #numbers-1 do\n\
    \        if numbers[i+1] - numbers[i] < threshold then\n            return true\n\
    \        end\n    end\n    return false\nend", "    assert(numbers and threshold)\n\
    \    table.sort(numbers)\n    for i = 1, #numbers - 1 do\n        if numbers[i\
    \ + 1] - numbers[i] < threshold then\n            return true\n        end\n \
    \   end\n    return false\nend", "    local n = #numbers\n    table.sort(numbers)\n\
    \    for i = 1, n - 1 do\n        if numbers[i + 1] - numbers[i] < threshold then\n\
    \            return true\n        end\n    end\n    return false\nend", "    local\
    \ numbers_table = {}\n    for _, number in ipairs(numbers) do\n        local rounded_number\
    \ = math.floor(number)\n        if numbers_table[rounded_number] then\n      \
    \      return true\n        end\n        numbers_table[rounded_number] = true\n\
    \    end\n    return false\nend", "  -- Sort and compare:\n  table.sort(numbers)\n\
    \  for i = 1, #numbers - 1 do\n    if numbers[i + 1] - numbers[i] < threshold\
    \ then\n      return true\n    end\n  end\n  return false\nend", "  if #numbers\
    \ <= 1 then\n    return false\n  end", "    local unsorted = {}\n    for i, number\
    \ in ipairs(numbers) do\n        unsorted[number] = i\n    end\n    table.sort(numbers)\n\
    \    for i = 1, #numbers - 1 do\n        if (numbers[i+1] - numbers[i]) < threshold\
    \ then\n            local left_i, right_i = unsorted[numbers[i]], unsorted[numbers[i+1]]\n\
    \            -- swap, if needed\n            if left_i > right_i then\n      \
    \          left_i, right_i = right_i, left_i\n            end\n            return\
    \ true, left_i, right_i\n        end\n    end\n    return false\nend", "    local\
    \ first_idx = 1\n    while first_idx <= #numbers do\n        local first_num =\
    \ numbers[first_idx]\n        for second_idx = first_idx + 1, #numbers do\n  \
    \          local second_num = numbers[second_idx]\n            if math.abs(first_num\
    \ - second_num) < threshold then\n                return true\n            end\n\
    \        end\n        first_idx = first_idx + 1\n    end\n    return false\nend",
  "    local temp_threshold = threshold\n    for i = 1, #numbers - 1 do\n        for\
    \ j = i + 1, #numbers do\n            if (numbers[i] ~= numbers[j]) and (math.abs(numbers[i]\
    \ - numbers[j]) < temp_threshold) then\n                return true\n        \
    \    end\n        end\n    end\n    return false\nend", "    local sorted = table.copy(numbers)\n\
    \    table.sort(sorted)\n    for i = 1, #sorted - 1 do\n        if sorted[i +\
    \ 1] - sorted[i] < threshold then\n            return true\n        end\n    end\n\
    \    return false\nend", "  for i = 1, #numbers do\n    for j = i + 1, #numbers\
    \ do\n      if math.abs(numbers[i] - numbers[j]) < threshold then\n        return\
    \ true\n      end\n    end\n  end\n  return false\nend", "    for i = 1, #numbers\
    \ do\n        for j = i + 1, #numbers do\n            if math.abs(numbers[i] -\
    \ numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    -- Sort the input.\n    table.sort(numbers)",
  "  local min_numbers = min_numbers\n  local max_numbers = max_numbers\n  local max_number\
    \ = max_numbers[1]\n  local min_number = min_numbers[1]\n  local numbers_count\
    \ = numbers_count\n  local is_zero_threshold = threshold <= 0\n  local abs = math.abs\n\
    \  local i = 1\n  local n = numbers_count\n  while i < n do\n    if is_zero_threshold\
    \ then\n      if numbers[i] == numbers[i + 1] then\n        return true\n    \
    \  end\n    else\n      local max_d = abs(max_number - numbers[i])\n      local\
    \ min_d = abs(min_number - numbers[i])\n      if max_d <= threshold or min_d <=\
    \ threshold then\n        return true\n      end\n    end\n    max_number = max_numbers[i\
    \ + 1]\n    min_number = min_numbers[i + 1]\n    i = i + 1\n  end\n  return false\n\
    end", "    local sorted = table.sort(numbers)\n    local n = #sorted\n    for\
    \ i = 1, n - 1 do\n        if sorted[i + 1] - sorted[i] < threshold then\n   \
    \         return true\n        end\n    end\n    return false\nend", "    table.sort(numbers)\n\
    \    for i = 1, #numbers - 1 do\n        if numbers[i + 1] - numbers[i] < threshold\
    \ then\n            return true\n        end\n    end\n    return false\nend",
  "    for i = 1,#numbers-1 do\n        for j = i+1,#numbers do\n            if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "  local min_i = 1\n  local min_j\
    \ = 2\n  while min_j <= #numbers do\n    if math.abs(numbers[min_i] - numbers[min_j])\
    \ < threshold then\n      return true\n    end\n    if numbers[min_i] < numbers[min_j]\
    \ then\n      min_i = min_j\n    end\n    min_j = min_j + 1\n  end\n  return false\n\
    end", "  local set = {}\n  for _, number in ipairs(numbers) do\n    if set[number]\
    \ then\n      return true\n    end\n    set[number + threshold] = true\n    set[number\
    \ - threshold] = true\n  end\n  return false\nend", "  if #numbers < 2 then\n\
    \    return false\n  end", "    table.sort(numbers)\n    for i = 1, #numbers -\
    \ 1 do\n        if math.abs(numbers[i] - numbers[i + 1]) < threshold then\n  \
    \          return true\n        end\n    end\n    return false\nend", "    local\
    \ num = #numbers\n    for i = 1, num do\n        for j = i + 1, num do\n     \
    \       if math.abs(numbers[i] - numbers[j]) < threshold then\n              \
    \  return true\n            end\n        end\n    end\n    return false\nend",
  "  for i = 1, #numbers do\n    for j = i + 1, #numbers do\n      if math.abs(numbers[i]\
    \ - numbers[j]) < threshold then\n        return true\n      end\n    end\n  end\n\
    \  return false\nend", "  local sorted = {}\n  for _, v in ipairs(numbers) do\n\
    \    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n  for i = 1, #sorted\
    \ - 1 do\n    if sorted[i + 1] - sorted[i] < threshold then\n      return true\n\
    \    end\n  end\n  return false\nend", "\t-- We sort elements in ascending order\n\
    \ttable.sort(numbers)", "  local sorted = numbers\n  table.sort(sorted)\n  for\
    \ i = 1, #sorted - 1 do\n    if sorted[i + 1] - sorted[i] < threshold then\n \
    \     return true\n    end\n  end\n  return false\nend", "\t-- Sort elements from\
    \ smallest to biggest.\n\ttable.sort(numbers)", "  if #numbers == 0 then\n   \
    \ return false\n  end", "\ttable.sort(numbers)\n\tfor i = 1, #numbers - 1 do\n\
    \t\tif numbers[i + 1] - numbers[i] < threshold then\n\t\t\treturn true\n\t\tend\n\
    \tend\n\treturn false\nend", "\tassert(type(numbers) == \"table\")\n\tassert(type(threshold)\
    \ == \"number\")", "\ttable.sort(numbers)\n\tfor i = 1, #numbers - 1 do\n\t\t\
    if numbers[i + 1] - numbers[i] < threshold then\n\t\t\treturn true\n\t\tend\n\t\
    end\n\treturn false\nend", "    local num_elements = #numbers\n    for i = 1,\
    \ num_elements do\n        for j = i + 1, num_elements do\n            if numbers[i]\
    \ + threshold > numbers[j] then\n                return true\n            end\n\
    \        end\n    end\n    return false\nend", "    if #numbers <= 1 then\n  \
    \      return false\n    end", "  local max_number = 0\n  for _, number in ipairs(numbers)\
    \ do\n    if number > max_number then\n      max_number = number\n    end\n  end",
  "  local tt = {}\n  local n = #numbers\n  for i = 1, n do\n    local n1 = numbers[i]\n\
    \    if n1 ~= 0 then\n      for j = i + 1, n do\n        local n2 = numbers[j]\n\
    \        if n2 ~= 0 then\n          local diff = math.abs(n1 - n2)\n         \
    \ if diff < threshold then\n            return true\n          end\n        end\n\
    \      end\n    end\n  end\n  return false\nend", "    for i = 1, #numbers - 1\
    \ do\n        local a = numbers[i]\n        for j = i + 1, #numbers do\n     \
    \       local b = numbers[j]\n            if math.abs(a - b) < threshold then\n\
    \                return true\n            end\n        end\n    end\n    return\
    \ false\nend", "    local prev = numbers[1]\n    for _, v in ipairs(numbers) do\n\
    \        if v - prev < threshold then\n            return true\n        end\n\
    \        prev = v\n    end\n    return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
