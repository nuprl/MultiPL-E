language: lua
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcio7sr56.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcio7sr56.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ (is_balanced(q) and sum(q) <= w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6c4su1l_.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmp6c4su1l_.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp6c4su1l_.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local i = 1\n    local j = #q\n    while i <= j do\n        if\
    \ q[i] ~= q[j] then\n            return false\n        end\n        sum = sum\
    \ + q[i]\n        i = i + 1\n        j = j - 1\n    end\n    return sum <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ your code here\n  if is_balanced(q) and sum(q) <= w then\n    return true\n\
    \  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9t3y83az.lua:12:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmp9t3y83az.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp9t3y83az.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ q_reversed = {}\n  local q_sum = 0\n  for i=1, #q do\n    q_reversed[i] = q[#q\
    \ - i + 1]\n    q_sum = q_sum + q[i]\n  end\n  if q_sum > w then\n    return false\n\
    \  end\n  for i=1, #q do\n    if q[i] ~= q_reversed[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ Hint: if q is balanced and its sum is smaller than w, it will fly. \n  --  \
    \     You have already written a function to check if it's balanced (palindrome)\n\
    \  --       and a function to compute the sum of a list.\n  --       You should\
    \ use them, or rewrite them!\n  -- ...\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegvn24x9.lua:21:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpegvn24x9.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tif(is_palindrome(q)\
    \ and get_sum(q) <= w) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkoln1uv5.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpkoln1uv5.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpkoln1uv5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ tmp = {}\n  for i = 1, #q do\n    table.insert(tmp, q[i])\n  end\n  local sum\
    \ = 0\n  local balanced = false\n  for i = 1, #tmp do\n    sum = sum + tmp[i]\n\
    \    if sum > w then\n      return false\n    end\n    if i > 1 and q[i] == q[#q]\
    \ then\n      local tmp_i = q[i]\n      table.remove(q, i)\n      table.remove(q,\
    \ #q)\n      balanced = is_palindrome(q)\n      table.insert(q, i, tmp_i)\n  \
    \    table.insert(q, #q + 1, tmp_i)\n    end\n  end\n  return sum <= w and balanced\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3wytmjrs.lua:26:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp3wytmjrs.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp3wytmjrs.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ is_palindrome(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnmw322k.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpnnmw322k.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpnnmw322k.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ is_balanced(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi73kya24.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpi73kya24.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpi73kya24.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ s = 0;\n    for i = 1, #q do\n        s = s + q[i];\n    end\n    return s <=\
    \ w and true or false;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmk9pf0h.lua:22:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplmk9pf0h.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tif\
    \ not is_balanced(q) then return false end\n\tlocal sum = 0\n\tfor i, el in ipairs(q)\
    \ do\n\t\tsum = sum + el\n\tend\n\treturn sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmwsahxaw.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpmwsahxaw.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmwsahxaw.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n   local\
    \ function is_balanced(q)\n      local is_b\n      if #q == 0 then is_b = true\n\
    \      elseif #q == 1 then is_b = true\n      elseif #q == 2 then is_b = q[1]\
    \ == q[2]\n      else is_b = (q[1] == q[#q]) and is_balanced(sub(q, 2, #q-1))\n\
    \      end\n      return is_b\n   end\n   local function sum(q)\n      local s\
    \ = 0\n      for i=1,#q do s = s + q[i] end\n      return s\n   end\n   return\
    \ (is_balanced(q) and (sum(q) <= w)) and true or false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpls8791tx.lua:16:\
    \ attempt to call a nil value (global 'sub')\nstack traceback:\n\t/tmp/tmpls8791tx.lua:16:\
    \ in local 'is_balanced'\n\t/tmp/tmpls8791tx.lua:25: in local 'candidate'\n\t\
    /tmp/tmpls8791tx.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ (math.floor(w) == w) and (math.abs(w) <= math.abs(sum(q))) and is_balanced(q)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3_y7tazq.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp3_y7tazq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp3_y7tazq.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ function ssum(q)\n    local function aux(q, acc)\n      if q == nil then\n \
    \       return acc\n      else\n        return aux(q.next, acc + q.info)\n   \
    \   end\n    end\n    return aux(q, 0)\n  end\n  local function palindrome(q)\n\
    \    local function aux(q, acc)\n      if q == nil then\n        return acc\n\
    \      else\n        aux(q.next, {info = q.info, next = acc})\n      end\n   \
    \ end\n    return acc == nil\n  end\n  return ssum(q) <= w and palindrome(q)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm4o4mxew.lua:16:\
    \ attempt to perform arithmetic on a nil value (field 'info')\nstack traceback:\n\
    \t/tmp/tmpm4o4mxew.lua:16: in function </tmp/tmpm4o4mxew.lua:12>\n\t(...tail calls...)\n\
    \t/tmp/tmpm4o4mxew.lua:31: in local 'candidate'\n\t/tmp/tmpm4o4mxew.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ (q == nil) then return false end\n  local s = 0\n  for i = 1, #q do s = s +\
    \ q[i] end\n  if (s > w) then return false end\n  local j = #q\n  for i = 1, #q\
    \ do\n    if (q[i] ~= q[j]) then return false end\n    j = j - 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ p = q\n    for i = 1, #q do\n        p[i] = q[#q - i + 1]\n    end\n    local\
    \ result = false\n    local sum = 0\n    for i = 1, #q do\n        sum = sum +\
    \ q[i]\n        if sum <= w then\n            result = true\n        end\n   \
    \ end\n    for i = 1, #q do\n        if p[i] ~= q[i] then\n            result\
    \ = false\n        end\n    end\n    return result\nend\nprint(will_it_fly({3,\
    \ 2, 3}, 6))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "true\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxlx7bxqs.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxlx7bxqs.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  \n\
    \  -- is balanced\n  local function is_balanced(q)\n    local len = #q\n    for\
    \ i = 1, len/2 do\n      if q[i] ~= q[len-i+1] then\n        return false\n  \
    \    end\n    end\n    return true\n  end\n  \n  -- sum elements\n  local function\
    \ sum_elements(q)\n    local total = 0\n    for _, item in ipairs(q) do\n    \
    \  total = total + item\n    end\n    return total\n  end\n  \n  if is_balanced(q)\
    \ and sum_elements(q) <= w then\n    return true\n  else\n    return false\n \
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ function sum(l)\n\t\tlocal res = 0\n\t\tfor _, v in ipairs(l) do\n\t\t\tres\
    \ = res + v\n\t\tend\n\t\treturn res\n\tend\n\tlocal function reverse(l)\n\t\t\
    local res = {}\n\t\tfor i = #l, 1, -1 do\n\t\t\tres[#res + 1] = l[i]\n\t\tend\n\
    \t\treturn res\n\tend\n\tlocal function is_palindrome(l)\n\t\treturn l == reverse(l)\n\
    \tend\n\treturn is_palindrome(q) and sum(q) <= w\nend\nassert(not will_it_fly({1,\
    \ 2}, 5))\nassert(not will_it_fly({3, 2, 3}, 5))\nassert(will_it_fly({3, 2, 3},\
    \ 8))\nassert(will_it_fly({3}, 5))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp1uall6i1.lua:32: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp1uall6i1.lua:32: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ s = 0\n\tlocal l = table.getn(q)\n\tlocal r = math.ceil(l/2)\n\tfor i = 1, r\
    \ do\n\t\ts = s + q[i]\n\t\tif q[i] ~= q[l - i + 1] then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn s <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_i102dej.lua:12:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmp_i102dej.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp_i102dej.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ (is_balanced(q) and sum(q) <= w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkuv_kiz6.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpkuv_kiz6.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpkuv_kiz6.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ s = 0\n\tlocal n = #q\n\tfor i = 1, n do\n\t\ts = s + q[i]\n\t\tif s > w then\n\
    \t\t\treturn false\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tif q[i] ~= q[n-i+1]\
    \ then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ list, weight = 0, 0\n    for k,v in pairs(q) do\n        list = list .. tostring(v)\n\
    \        weight = weight + v\n    end\n    local str = tostring(list)\n    local\
    \ reverse = str:reverse()\n    if str == reverse and weight <= w then\n      \
    \  return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7oai994o.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7oai994o.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tlocal is_balanced = true\n\tlocal l = #q\n\tfor i = 1, l do\n\t\t\
    sum = sum + q[i]\n\t\tif q[i] ~= q[l - i + 1] then\n\t\t\tis_balanced = false\n\
    \t\tend\n\tend\n\treturn is_balanced and sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        return true\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag2wo0ti.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpag2wo0ti.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ is_balanced(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi73kya24.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpi73kya24.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpi73kya24.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ type(q) ~= \"table\" then return false end\n    if #q <= 1 then return true\
    \ end\n    local s = 0\n    for _, v in ipairs(q) do\n        s = s + v\n    end\n\
    \    if s > w then return false end\n    local i, j = 1, #q\n    while i < j do\n\
    \        if q[i] ~= q[j] then return false end\n        i = i + 1\n        j =\
    \ j - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        for i = 1, #q do\n            if q[i] ~= q[#q - i + 1] then\n\
    \                return false\n            end\n        end\n        return true\n\
    \    end\n    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ res = 0\n    for i = 1, #q do\n        res = res + q[i]\n    end\n    if res\
    \ <= w then\n        return true\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvb5smneb.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvb5smneb.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for _, v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w\
    \ then\n    return false\n  end\n  for i=1, #q/2 do\n    if q[i] ~= q[#q-i+1]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i,v in ipairs(q) do\n    sum = sum + v\n  end\n  return (sum\
    \ <= w) and isPalindrome(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg9c5bk8p.lua:15:\
    \ attempt to call a nil value (global 'isPalindrome')\nstack traceback:\n\t/tmp/tmpg9c5bk8p.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpg9c5bk8p.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ is_palindrome(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdg8ibfwf.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpdg8ibfwf.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpdg8ibfwf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, j in ipairs(q) do\n        sum = sum + j\n    end\n    if\
    \ sum <= w then\n        if #q ~= 0 then\n            if tonumber(table.concat(q))\
    \ == tonumber(table.concat(reverse(q))) then\n                return true\n  \
    \          else\n                return false\n            end\n        else\n\
    \            return false\n        end\n    else\n        return false\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx4j2ijzv.lua:17:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpx4j2ijzv.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpx4j2ijzv.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ type(q) ~= \"table\" then\n        return false\n    end\n    local total =\
    \ 0\n    for i = 1, #q do\n        total = total + q[i]\n    end\n    if total\
    \ > w then\n        return false\n    end\n    if #q % 2 == 0 then\n        return\
    \ false\n    end\n    local last = #q\n    for i = 1, math.floor(#q / 2) do\n\
    \        if q[i] ~= q[last] then\n            return false\n        end\n    \
    \    last = last - 1\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tif\
    \ type(q) ~= \"table\" then return end\n\t-- hmm, I think that's wrong. I guess\
    \ it has to be a list of numbers\n\tif type(w) ~= \"number\" then return end\n\
    \t-- check q is balanced\n\tlocal q_rev = {}\n\tfor i = #q, 1, -1 do\n\t\tq_rev[#q_rev+1]\
    \ = q[i]\n\tend\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tif q[i] ~= q_rev[i]\
    \ then return false end\n\t\tsum = sum + q[i]\n\tend\n\treturn sum <= w\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    --\
    \ Function to check if the list is palindromic\n    local function isPalindrome(q)\n\
    \        -- In order to recognize a palindrome, we can just check\n        --\
    \ if the first element of the list is equal to the last one,\n        -- the second\
    \ is equal to the penultimate and so on.\n        local len = #q\n        for\
    \ i = 1, len/2 do\n            if q[i] ~= q[len-i+1] then\n                return\
    \ false\n            end\n        end\n        return true\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpab4hhfdn.lua:36: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif sum <= w then\n\
    \t\tfor i = 1, #q / 2 do\n\t\t\tif q[i] ~= q[#q - i + 1] then\n\t\t\t\treturn\
    \ false\n\t\t\tend\n\t\tend\n\t\treturn true\n\tend\n\treturn false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ s = 0\n\tfor _, v in ipairs(q) do\n\t\ts = s + v\n\tend\n\treturn s <= w and\
    \ is_palindrome(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq8px86of.lua:15:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpq8px86of.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpq8px86of.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ (w >= sum_list(q)) and (is_palindrome(q))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8a17rqd2.lua:11:\
    \ attempt to call a nil value (global 'sum_list')\nstack traceback:\n\t/tmp/tmp8a17rqd2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp8a17rqd2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tlocal palindrome = true\n\tfor i, v in ipairs(q) do\n\t\tif palindrome\
    \ and (q[i] ~= q[#q-i+1]) then\n\t\t\tpalindrome = false\n\t\tend\n\t\tsum = sum\
    \ + v\n\tend\n\treturn palindrome and (sum <= w)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    --\
    \ Count total weight.\n    local total = 0\n    for _, p in ipairs(q) do\n   \
    \     total = total + p\n    end\n    -- Check if the list is balanced and if\
    \ the total weight is less than w.\n    return total <= w and is_palindrome(q)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkwx3qmw6.lua:17:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpkwx3qmw6.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpkwx3qmw6.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n   return\
    \ check_balanced(q) and check_weight(q, w)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4y9raq10.lua:11:\
    \ attempt to call a nil value (global 'check_balanced')\nstack traceback:\n\t\
    /tmp/tmp4y9raq10.lua:11: in local 'candidate'\n\t/tmp/tmp4y9raq10.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\treturn\
    \ is_balanced(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dm4220u.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmp7dm4220u.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7dm4220u.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ type(q) ~= \"table\" then return false end\n    if not is_palindrome(q) then\
    \ return false end\n    if not is_consecutive(q) then return false end\n    if\
    \ not is_ascending(q) then return false end\n    if not is_descending(q) then\
    \ return false end\n    if q[1] ~= 1 then return false end\n    local sum = 0\n\
    \    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum > w then\
    \ return false end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyjg067ns.lua:12:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpyjg067ns.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpyjg067ns.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqud_lvho.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqud_lvho.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    local\
    \ half = math.floor(#q / 2)\n    local lst = {}\n    for i = 1, half do\n    \
    \    lst[i] = q[i]\n    end\n    local a = #q\n    local b = half\n    if #q %\
    \ 2 == 1 then\n        a = a - 1\n    end\n    while a > half do\n        if lst[b]\
    \ ~= q[a] then\n            return false\n        end\n        a = a - 1\n   \
    \     b = b - 1\n    end\n    if sum <= w then\n        return true\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42g8bjh4.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp42g8bjh4.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i, e in ipairs(q) do\n        sum = sum + e\n    end\n    if\
    \ sum > w then\n        return false\n    end\n    local reversed = {}\n    for\
    \ i, e in ipairs(q) do\n        reversed[#q - i + 1] = e\n    end\n    for i,\
    \ e in ipairs(q) do\n        if q[i] ~= reversed[i] then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tlocal is_balanced\
    \ = sum <= w\n\tlocal is_palindromic = true\n\tfor i = 1, #q do\n\t\tif q[i] ~=\
    \ q[#q - i + 1] then\n\t\t\tis_palindromic = false\n\t\t\tbreak\n\t\tend\n\tend\n\
    \treturn is_balanced and is_palindromic\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ #q > 0 and sum(q) <= w and is_palindrome(q)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpszhafzoq.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpszhafzoq.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpszhafzoq.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif not is_palindrome(q)\
    \ or sum > w then\n\t\treturn false\n\telse\n\t\treturn true\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbu23gfez.lua:15:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpbu23gfez.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpbu23gfez.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tlocal is_balanced = true\n\tlocal head, tail = 1, #q\n\twhile head\
    \ <= tail do\n\t\tsum = sum + q[head] + q[tail]\n\t\tif q[head] ~= q[tail] then\n\
    \t\t\tis_balanced = false\n\t\tend\n\t\thead = head + 1\n\t\ttail = tail - 1\n\
    \tend\n\treturn is_balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgigkdw5h.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgigkdw5h.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ p = table.remove(q)\n    local sum = 0\n    for i, n in ipairs(q) do\n     \
    \   sum = sum + n\n    end\n    if sum <= w and p == nil then\n        return\
    \ true\n    elseif sum <= w and q[#q] == p then\n        table.remove(q)\n   \
    \     return will_it_fly(q, w)\n    else\n        return false\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpor02q06t.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpor02q06t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ s = 0\n    for _, v in ipairs(q) do\n        s = s + v\n    end\n    if s >\
    \ w then\n        return false\n    end\n    local h = math.floor(#q / 2)\n  \
    \  for i = 1, h do\n        if q[i] ~= q[#q - i + 1] then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ total = 0\n    local result = true\n    if #q > 0 then\n        total = q[1]\n\
    \        if #q > 1 then\n            if q[1] ~= q[#q] then\n                result\
    \ = false\n            else\n                for i=2, #q do\n                \
    \    total = total + q[i]\n                    if q[i] ~= q[#q+1-i] then\n   \
    \                     result = false\n                        break\n        \
    \            end\n                end\n            end\n        end\n    end\n\
    \    if total > w then\n        result = false\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ check whether it's balanced\n\tlocal n = #q\n\tfor i = 1, n/2 do\n\t\tif q[i]\
    \ ~= q[n-i+1] then\n\t\t\treturn false\n\t\tend\n\tend\n\t\n\t-- check whether\
    \ it's lighter than the maximum weight\n\tlocal sum = 0\n\tfor i = 1, n do\n\t\
    \tsum = sum + q[i]\n\tend\n\tif sum > w then\n\t\treturn false\n\tend\n\t\n\t\
    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1hb04c5.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpb1hb04c5.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\treturn\
    \ (sum(q) <= w) and is_balanced(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_d33yz66.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp_d33yz66.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp_d33yz66.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ qr = rtl(q)\n    if not is_palindrome(q) then\n        return false\n    end\n\
    \    return sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl884dgc1.lua:11:\
    \ attempt to call a nil value (global 'rtl')\nstack traceback:\n\t/tmp/tmpl884dgc1.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpl884dgc1.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ #q > w then\n        return false\n    end\n    for i=1, #q do\n        local\
    \ left = 0\n        local right = 0\n        for j=1, i do\n            left =\
    \ left + q[j]\n        end\n        for j=#q, #q-i+1, -1 do\n            right\
    \ = right + q[j]\n        end\n        if left == right then\n            if left\
    \ <= w then\n                return true\n            end\n        end\n    end\n\
    \    return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42sxv_dj.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp42sxv_dj.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for _, el in ipairs(q) do\n        sum = sum + el\n    end\n  \
    \  if sum > w then\n        return false\n    end\n    for i = 1, #q / 2 do\n\
    \        if q[i] ~= q[#q - i + 1] then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ qs = check_palindrome(q)\n  local sum = 0\n  for i = 1, #q do\n    sum = sum\
    \ + q[i]\n  end\n  if qs and sum <= w then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4__nzfa0.lua:11:\
    \ attempt to call a nil value (global 'check_palindrome')\nstack traceback:\n\t\
    /tmp/tmp4__nzfa0.lua:11: in local 'candidate'\n\t/tmp/tmp4__nzfa0.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tif\
    \ #q < 2 then return true end\n\treturn will_it_fly(q[2], w) and w >= table.unpack(q)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy2amallu.lua:11:\
    \ attempt to get length of a number value (local 'q')\nstack traceback:\n\t/tmp/tmpy2amallu.lua:11:\
    \ in upvalue 'will_it_fly'\n\t/tmp/tmpy2amallu.lua:12: in local 'candidate'\n\t\
    /tmp/tmpy2amallu.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0;\n    local queue = {};\n    for i, v in ipairs(q) do\n        sum =\
    \ sum + v;\n        queue[i] = v;\n    end\n    if sum > w then\n        return\
    \ false;\n    end\n    local n = #queue;\n    if n <= 1 then\n        return true;\n\
    \    end\n    local begin = 1;\n    local finish = n;\n    while begin < finish\
    \ do\n        if queue[begin] ~= queue[finish] then\n            return false;\n\
    \        end\n        begin = begin + 1;\n        finish = finish - 1;\n    end\n\
    \    return true;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local reverse = {}\n  local list = {}\n  local str = \"\"\n  local\
    \ i = 1\n  local j = 1\n  while i <= #q do\n    table.insert(list, q[i])\n   \
    \ i = i + 1\n  end\n  while j <= #q do\n    table.insert(reverse, q[#q - j + 1])\n\
    \    j = j + 1\n  end\n  for i, v in ipairs(list) do\n    sum = sum + v\n  end\n\
    \  for i, v in ipairs(list) do\n    str = str .. \" \" .. v\n  end\n  if sum <=\
    \ w and str == table.concat(reverse, \" \") then\n    return true\n  else\n  \
    \  return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6yi2nynt.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6yi2nynt.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local q1 = {}\n    local q2 = {}\n    for _, x in ipairs(q) do\n\
    \        sum = sum + x\n        q1[#q1+1] = x\n        q2[#q2+1] = x\n    end\n\
    \    if (sum > w) then\n        return false\n    end\n    table.sort(q1)\n  \
    \  table.sort(q2, function(a, b) return a > b end)\n    for k, v in ipairs(q1)\
    \ do\n        if (q1[k] ~= q2[k]) then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppt_xt4t7.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppt_xt4t7.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ sum(q) <= w and is_palindrome(q) then\n    return true\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpovv3gprx.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpovv3gprx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpovv3gprx.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = true\n  local weight = 0\n  local max_weight = w\n  local n = #q\n\
    \  if #q == 0 then\n    return true\n  end\n  for i = 1, n/2 do\n    if (q[i]\
    \ ~= q[n - i + 1]) then\n      balanced = false\n    end\n    weight = weight\
    \ + q[i] + q[n - i + 1]\n  end\n  if n % 2 == 1 then\n    weight = weight + q[(n\
    \ + 1)/2]\n  end\n  return balanced and weight <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ l = #q\n  local sum = 0\n  for i = 1, l / 2 do\n    sum = sum + q[i]\n    if\
    \ not q[i] == q[l - i + 1] then\n      return false\n    end\n  end\n  if l %\
    \ 2 == 1 then\n    sum = sum + q[(l + 1) / 2]\n  end\n  return sum <= w\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebsxs5j4.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpebsxs5j4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    --\
    \ YOUR CODE HERE\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiwy39s1t.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpiwy39s1t.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ is_palindrome(q) and sum(q) <= w then\n    return true\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2h_a8lh9.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp2h_a8lh9.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp2h_a8lh9.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ sum of elements of list\n\tlocal sum = 0\n\tfor _, v in ipairs(q) do\n\t\tsum\
    \ = sum + v\n\tend\n\t-- check palindrome\n\tfor i = 1, #q / 2 do\n\t\tif q[i]\
    \ ~= q[#q - i + 1] then\n\t\t\treturn false\n\t\tend\n\tend\n\t-- check sum\n\t\
    if sum <= w then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ weight = 0\n  for i, v in ipairs(q) do\n    weight = weight + v\n  end\n  if\
    \ weight <= w then\n    return true\n  else\n    return false\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxwfsqdja.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxwfsqdja.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local balanced = true\n  local i = 1\n  local j = #q\n  while (i\
    \ <= j) do\n    if q[i] ~= q[j] then\n      balanced = false\n      break\n  \
    \  end\n    sum = sum + q[i]\n    i = i + 1\n    j = j - 1\n  end\n  return sum\
    \ <= w and balanced\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ len, s = 1, 0\n\twhile q[len] do\n\t\ts = s + q[len]\n\t\tlen = len + 1\n\t\
    end\n\tif s > w then return false end\n\tlocal i, j = 1, len\n\twhile i < j do\n\
    \t\tif q[i] ~= q[j] then return false end\n\t\ti = i + 1\n\t\tj = j - 1\n\tend\n\
    \treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzklcaje.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptzklcaje.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = function(a, b) return a + b end\n  if is_palindrome(q) and w >=  foldr(sum,\
    \ 0, q) then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ecoc9gn.lua:12:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp5ecoc9gn.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp5ecoc9gn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ balanced = false\n\tlocal sum = 0\n\t\n\tfor i = 1, #q / 2 do\n\t\tif q[i] ==\
    \ q[#q - i + 1] then \n\t\t\tbalanced = true\n\t\telse\n\t\t\tbalanced = false\n\
    \t\t\tbreak\n\t\tend\n\tend\n\t\n\tfor _, v in ipairs(q) do\n\t\tsum = sum + v\n\
    \tend\n\t\n\tif balanced and sum <= w then\n\t\treturn true\n\telse\n\t\treturn\
    \ false\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjcjr7d3.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsjcjr7d3.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\treturn\
    \ is_palindrome(q) and is_balanced(q, w)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9px8nivf.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp9px8nivf.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp9px8nivf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tif\
    \ q == nil then\n\t\treturn true\n\tend\n\tif not is_palindrome(q) then\n\t\t\
    return false\n\tend\n\t\n\tlocal total_weight = 0\n\tfor _,v in ipairs(q) do\n\
    \t\ttotal_weight = total_weight + v\n\tend\n\tif total_weight > w then\n\t\treturn\
    \ false\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp99naqe_g.lua:14:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp99naqe_g.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp99naqe_g.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ variables\n  local acc = 0\n  local qLen = table.getn(q)\n  -- body\n  if qLen\
    \ > 1 then\n    if qLen % 2 == 0 then\n      for i = 1, qLen/2 do\n        acc\
    \ = acc + q[i]\n      end\n      for i = qLen/2 + 1, qLen do\n        acc = acc\
    \ - q[i]\n      end\n    else\n      for i = 1, math.floor(qLen/2) do\n      \
    \  acc = acc + q[i]\n      end\n      for i = math.floor(qLen/2) + 2, qLen do\n\
    \        acc = acc - q[i]\n      end\n    end\n  end\n  return acc <= w\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpts6sdlyo.lua:13:\
    \ attempt to call a nil value (field 'getn')\nstack traceback:\n\t/tmp/tmpts6sdlyo.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpts6sdlyo.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local state = true\n  for i = 1, #q do\n    if q[i] ~= q[#q-i+1]\
    \ then\n      state = false\n    end\n    sum = sum + q[i]\n  end\n  if state\
    \ and sum <= w then\n    return true\n  else\n    return false\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ Test if the object is a palindrome.\n\tif not is_palindrome(q) then\n\t\treturn\
    \ false\n\tend\n\t-- Test if the object's total weight is less than the maximum\
    \ possible weight.\n\tlocal weight = 0\n\tfor _, v in ipairs(q) do\n\t\tweight\
    \ = weight + v\n\tend\n\tif weight > w then\n\t\treturn false\n\tend\n\treturn\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5s9tak7z.lua:12:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp5s9tak7z.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp5s9tak7z.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ is_balanced(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi73kya24.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpi73kya24.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpi73kya24.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ s, f = 0, true\n    for i = 1, #q do\n        s = s + q[i]\n        if q[i]\
    \ ~= q[#q - i + 1] then\n            f = false\n        end\n    end\n    return\
    \ f and s <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n   if\
    \ #q == 0 then return false end\n   local sum, half = 0, math.floor(#q / 2)\n\
    \   for i = 1, half do\n      if q[i] ~= q[#q - i + 1] then return false end\n\
    \      sum = sum + q[i]\n   end\n   if #q % 2 == 1 then sum = sum + q[half + 1]\
    \ end\n   return sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tlocal ok = true\n\tfor i = 1, #q / 2 do\n\t\tif q[i] ~= q[#q - i\
    \ + 1] then\n\t\t\tok = false\n\t\t\tbreak\n\t\tend\n\t\tsum = sum + q[i]\n\t\
    end\n\treturn ok and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ i = 1\n  local j = #q\n  local weight = 0\n  while i <= j do\n    if q[i] ~=\
    \ q[j] then\n      return false\n    end\n    weight = weight + q[i]\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return weight <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  local flag = true\n\
    \  for i = 1, #q / 2 do\n    if q[i] ~= q[#q - i + 1] then\n      flag = false\n\
    \      break\n    end\n  end\n  return sum <= w and flag\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tlocal len = #q\n\tfor i=1, len do\n\t\tsum = sum + q[i]\n\tend\n\t\
    if sum > w then\n\t\treturn false\n\tend\n\tlocal i = 1\n\tlocal j = len\n\twhile\
    \ (i <= j) do\n\t\tif q[i] ~= q[j] then\n\t\t\treturn false\n\t\tend\n\t\ti =\
    \ i + 1\n\t\tj = j - 1\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ len = #q\n  local sum = 0\n  for i = 1, math.floor(len / 2) do\n    if q[i]\
    \ ~= q[len - i + 1] then\n      return false\n    end\n    sum = sum + q[i]\n\
    \  end\n  if len % 2 == 1 then\n    sum = sum + q[math.floor(len / 2) + 1]\n \
    \ end\n  return sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii5em96o.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpii5em96o.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ is_palindrome = function (q)\n        for i=1,math.floor(#q/2) do\n        \
    \    if q[i] ~= q[#q-i+1] then\n                return false\n            end\n\
    \        end\n        return true\n    end\n    local sum = function (q)\n   \
    \     local s = 0\n        for _,v in ipairs(q) do\n            s = s + v\n  \
    \      end\n        return s\n    end\n    return is_palindrome(q) and sum(q)\
    \ <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ reversedQ = table.reverse(q)\n    local sum = 0\n    for i = 1, #q do\n    \
    \    sum = sum + q[i]\n    end\n    if sum > w then\n        return false\n  \
    \  elseif sum <= w then\n        for i = 1, #q do\n            if q[i] ~= reversedQ[i]\
    \ then\n                return false\n            end\n        end\n        return\
    \ true\n    end\nend\nassert(will_it_fly({3, 2, 3}, 5) == false)\nassert(will_it_fly({1,\
    \ 2, 3}, 5) == false)\nassert(will_it_fly({3, 2, 3}, 6) == true)\nassert(will_it_fly({1},\
    \ 1) == true)\nassert(will_it_fly({11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11,\
    \ 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9vpuvswh.lua:32: ''}'' expected (to close ''{'' at line 31)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpma3rnpnf.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpma3rnpnf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\t--\
    \ stub\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqcu627q.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpdqcu627q.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ #q == 0 then return true end\n  local p1, p2 = 1, #q\n  while q[p1] == q[p2]\
    \ and p1 < p2 do\n    p1 = p1 + 1\n    p2 = p2 - 1\n  end\n  if p1 >= p2 then\
    \ return sum(q) <= w end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmponv_8z_x.lua:17:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmponv_8z_x.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmponv_8z_x.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ is_balanced(q) then\n        if sum(q) <= w then\n            return true\n\
    \        end\n    end\n    return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgiysarel.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpgiysarel.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpgiysarel.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ s = table.reduce(q, function(a, b) return a + b end)\n  local f = palindrome(q)\n\
    \  return f and s <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnti6jomz.lua:11:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmpnti6jomz.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpnti6jomz.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n   return\
    \ (is_balanced(q) and sum(q) <= w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpra8c8jp0.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpra8c8jp0.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpra8c8jp0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ f = true\n  local sum = 0\n  for i=1, #q do\n    sum = sum + q[i]\n    if i\
    \ <= #q/2 then\n      if q[i] ~= q[#q-i+1] then\n        f = false\n      end\n\
    \    end\n  end\n  if sum > w then\n    f = false\n  end\n  return f\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ m,d = 0, #q\n\tfor i=1,d/2 do\n\t\tm = m + q[i] + q[d-i+1]\n\tend\n\tif d%2\
    \ ~= 0 then m = m + q[(d+1)/2] end\n\treturn m <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqpl8ji_h.lua:23:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqpl8ji_h.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\treturn\
    \ w >= sum(q) and is_palindrome(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_cz7ay2p.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp_cz7ay2p.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp_cz7ay2p.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tif\
    \ (type(q) ~= \"table\") then\n\t\treturn false\n\tend\n\t\n\tlocal q_clone =\
    \ clone(q)\n\tlocal q_rev_clone = clone(q)\n\tlocal q_rev = reverse(q_rev_clone)\n\
    \tlocal q_sum = sum(q_clone)\n\t\n\tif (q_sum > w) then\n\t\treturn false\n\t\
    end\n\t\n\tif (is_equal(q, q_rev)) then\n\t\treturn true\n\tend\n\t\n\treturn\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiq890pz5.lua:15:\
    \ attempt to call a nil value (global 'clone')\nstack traceback:\n\t/tmp/tmpiq890pz5.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmpiq890pz5.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgljh7o4m.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpgljh7o4m.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0;\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpt85zajrp.lua:24: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ ((#q == 0) or\n            ((q[1] == q[#q]) and\n             will_it_fly(list.slice(q,\
    \ 2, #q - 1), w))\n            ) and\n           (list.sum(q) <= w)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphw8bf2dj.lua:13:\
    \ attempt to index a nil value (global 'list')\nstack traceback:\n\t/tmp/tmphw8bf2dj.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmphw8bf2dj.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ balanced = false\n    local sum = 0\n    for k, v in ipairs(q) do\n        sum\
    \ = sum + v\n    end\n    if q[1] == q[#q] then\n        local new_q = {}\n  \
    \      for i=2, #q-1 do\n            table.insert(new_q, q[i])\n        end\n\
    \        q = new_q\n        balanced = true\n    end\n    if sum <= w and balanced\
    \ then\n        return true\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ is_balanced(q) and sum(q) <= w then\n        return true\n    else\n       \
    \ return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_f14gj1y.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmp_f14gj1y.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp_f14gj1y.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ reverse = {}\n\tlocal total = 0\n\tfor i = 1, #q do\n\t\ttotal = total + q[i]\n\
    \t\treverse[#q-i+1] = q[i]\n\tend\n\tif total > w then\n\t\treturn false\n\tend\n\
    \tfor i = 1, #q do\n\t\tif q[i] ~= reverse[i] then\n\t\t\treturn false\n\t\tend\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    local left = 1\n    local right = #q\n    while left < right do\n      if\
    \ q[left] ~= q[right] then\n        return false\n      end\n      left = left\
    \ + 1\n      right = right - 1\n    end\n    return true\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ Write your code here\n  local total = 0;\n  local palindrome = true;\n  for\
    \ i=1,#q do\n    if q[i] ~= q[#q - i + 1] then\n      palindrome = false;\n  \
    \  end\n    total = total + q[i];\n  end\n  return total <= w and palindrome;\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for _,v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum > w then\n\
    \    return false\n  end\n  for i=1, #q//2 do\n    if q[i] ~= q[#q-i+1] then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ sum(q) > w then return false end\n  for i = 1, #q do\n    if q[i] ~= q[#q -\
    \ i + 1] then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy7cbwpwe.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpy7cbwpwe.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpy7cbwpwe.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ len = #q\n\tlocal i = 1\n\tlocal j = len\n\tlocal sum = 0\n\twhile i <= j do\n\
    \t\tif q[i] ~= q[j] then\n\t\t\treturn false\n\t\tend\n\t\tsum = sum + q[i]\n\t\
    \ti = i + 1\n\t\tj = j - 1\n\tend\n\treturn sum <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor _, v in ipairs(q) do\n\t\tsum = sum + v\n\tend\n\tif sum > w\
    \ then return false end\n\tfor i = 1, #q/2 do\n\t\tif q[i] ~= q[#q - i + 1] then\
    \ return false end\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ n = #q\n    local i = 1\n    local j = n\n    local s = 0\n    while i < j do\n\
    \        if q[i] == q[j] then\n            s = s + q[i] + q[j]\n            i\
    \ = i + 1\n            j = j - 1\n        else\n            break\n        end\n\
    \    end\n    if i == j then\n        s = s + q[i]\n    end\n    return s <= w\n\
    end\nprint(will_it_fly({1, 2}, 5)) \nprint(will_it_fly({3, 2, 3}, 5)) \nprint(will_it_fly({3,\
    \ 2, 3}, 10)) \nprint(will_it_fly({3}, 5)) \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "true\nfalse\ntrue\ntrue\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmp5itecj3r.lua:38: expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5itecj3r.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ is_palindrome(q) and (sum(q) <= w)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9wmf92ed.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp9wmf92ed.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp9wmf92ed.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ \u041F\u0440\u0435\u043E\u0431\u0440\u0430\u0437\u0443\u0435\u043C \u0432 \u0441\
    \u0442\u0440\u043E\u043A\u0443, \u043F\u0440\u0438 \u043F\u043E\u043C\u043E\u0449\
    \u0438 \u043C\u0435\u0442\u043E\u0434\u0430 gsub \u0437\u0430\u043C\u0435\u043D\
    \u044F\u0435\u043C \u0432\u0441\u0435 \u044D\u043B\u0435\u043C\u0435\u043D\u0442\
    \u044B \u0441\u043F\u0438\u0441\u043A\u0430 \u043D\u0430 \u043F\u0443\u0441\u0442\
    \u043E\u0435 \u043C\u0435\u0441\u0442\u043E\n  -- \u0438 \u043F\u0440\u0438 \u043F\
    \u043E\u043C\u043E\u0449\u0438 \u043C\u0435\u0442\u043E\u0434\u0430 \u0441\u0442\
    \u0440\u043E\u043A\u0438 reverse \u043F\u0435\u0440\u0435\u0432\u043E\u0440\u0430\
    \u0447\u0438\u0432\u0430\u0435\u043C \u0441\u0442\u0440\u043E\u043A\u0443, \u0437\
    \u0430\u0442\u0435\u043C \u043E\u0431\u0440\u0430\u0442\u043D\u043E \u0432 \u0442\
    \u0430\u0431\u043B\u0438\u0446\u0443\n  -- \u0414\u0430\u043B\u0435\u0435 \u0441\
    \u0440\u0430\u0432\u043D\u0438\u0432\u0430\u0435\u043C \u0442\u0430\u0431\u043B\
    \u0438\u0446\u044B \u0441 \u043F\u043E\u043C\u043E\u0449\u044C\u044E \u0444\u0443\
    \u043D\u043A\u0446\u0438\u0438 \u0442\u0430\u0431\u043B\u0438\u0446\u044B equal,\
    \ \u0447\u0442\u043E\u0431\u044B \u0432\u044B\u044F\u0441\u043D\u0438\u0442\u044C\
    \ \u043F\u0430\u043B\u0438\u043D\u0434\u0440\u043E\u043C \u043B\u0438 \u044D\u0442\
    \u043E\n  local function ispalindrome(q)\n    return (string.gsub(q, '', '') ==\
    \ string.reverse(string.gsub(q, '', '')))\n  end\n  -- \u0421 \u043F\u043E\u043C\
    \u043E\u0449\u044C\u044E \u0444\u0443\u043D\u043A\u0446\u0438\u0438 reduce \u043F\
    \u043E\u043B\u0443\u0447\u0430\u0435\u043C \u0441\u0443\u043C\u043C\u0443 \u044D\
    \u043B\u0435\u043C\u0435\u043D\u0442\u043E\u0432\n  local function sum(q)\n  \
    \  return reduce(q, function(a, b) return a + b end)\n  end\n  -- \u0421 \u043F\
    \u043E\u043C\u043E\u0449\u044C\u044E \u0444\u0443\u043D\u043A\u0446\u0438\u0438\
    \ map \u0437\u0430\u043F\u0438\u0441\u044B\u0432\u0430\u0435\u043C \u043D\u043E\
    \u0432\u0443\u044E \u0442\u0430\u0431\u043B\u0438\u0446\u0443 \u0432 \u043A\u043E\
    \u0442\u043E\u0440\u043E\u0439 \u043A\u0430\u0436\u0434\u044B\u0439 \u044D\u043B\
    \u0435\u043C\u0435\u043D\u0442 \u043F\u043E\u043B\u0443\u0447\u0430\u0435\u0442\
    \ \u0437\u043D\u0430\u0447\u0435\u043D\u0438\u0435 \u0435\u0434\u0438\u043D\u0438\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbiz_jj4u.lua:34: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ function calc_weight(acc, q)\n    if #q == 0 then return acc end\n    local\
    \ x = table.remove(q, 1)\n    local xs = calc_weight(acc + x, q)\n    table.insert(q,\
    \ 1, x)\n    return xs\n  end\n  local function is_balanced(q)\n    if #q == 0\
    \ then return true end\n    local x = table.remove(q, 1)\n    local xs = is_balanced(q)\n\
    \    table.insert(q, 1, x)\n    return xs\n  end\n  return is_balanced(q) and\
    \ calc_weight(0, q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcmmqvfw_.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcmmqvfw_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\treturn sum <= w\
    \ and is_balanced(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5lrgz836.lua:15:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmp5lrgz836.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp5lrgz836.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    --\
    \ Your code goes here!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00tfq1hc.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp00tfq1hc.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ function is_palindrome(q)\n        local function reverse(q)\n            local\
    \ new_q = {}\n            for i=#q,1,-1 do\n                table.insert(new_q,\
    \ q[i])\n            end\n            return new_q\n        end\n        return\
    \ q == reverse(q)\n    end\n    local function sum(q)\n        local total = 0\n\
    \        for _,val in ipairs(q) do\n            total = total + val\n        end\n\
    \        return total\n    end\n    return is_palindrome(q) and sum(q) <= w\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4zahd8yu.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4zahd8yu.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ tot = 0\n    for i = 1, #q do\n        tot = tot + q[i]\n    end\n    return\
    \ is_palindrome(q) and tot <= w\nend\nprint(will_it_fly({1, 2}, 5)) \nprint(will_it_fly({1,\
    \ 2, 3, 2, 3}, 5)) \nprint(will_it_fly({1, 2, 3, 2, 3}, 10)) \nprint(will_it_fly({1,\
    \ 2, 3}, 5)) \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpnei_qnlk.lua:15: attempt to call a nil value (global 'is_palindrome')\n\
    stack traceback:\n\t/tmp/tmpnei_qnlk.lua:15: in local 'will_it_fly'\n\t/tmp/tmpnei_qnlk.lua:17:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n   local\
    \ function is_balanced(q)\n      if #q < 2 then return true end\n      local i\
    \ = 1\n      local j = #q\n      while i < j do\n         if q[i] ~= q[j] then\
    \ return false end\n         i = i + 1\n         j = j - 1\n      end\n      return\
    \ true\n   end\n   local function sum(q)\n      local sum = 0\n      for i = 1,\
    \ #q do\n         sum = sum + q[i]\n      end\n      return sum\n   end\n   return\
    \ sum(q) <= w and is_balanced(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ qw = 0\n    local p = 1\n    for i, v in ipairs(q) do\n        qw = qw + v\n\
    \        if qw > w then\n            return false\n        end\n        if q[i]\
    \ ~= q[#q - i + 1] then\n            p = 0\n        end\n    end\n    return p\
    \ > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ table.maxn(q) == 0 then return false end\n  local s = 0\n  for _, v in ipairs(q)\
    \ do\n    s = s + v\n  end\n  return s <= w and s == q[1] + q[table.maxn(q)] and\
    \ will_it_fly(table.remove(q, 1), table.remove(q, table.maxn(q)), w)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppbk24o9h.lua:11:\
    \ attempt to call a nil value (field 'maxn')\nstack traceback:\n\t/tmp/tmppbk24o9h.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmppbk24o9h.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ ((balance(q) and sum(q) <= w) and true or false)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmlczsmgc.lua:11:\
    \ attempt to call a nil value (global 'balance')\nstack traceback:\n\t/tmp/tmpmlczsmgc.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmlczsmgc.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ wifsum = 0\n    for i, v in ipairs(q) do\n        wifsum = wifsum + v\n    end\n\
    \    if wifsum <= w then\n        return true\n    else\n        return false\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnovyg_d7.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpnovyg_d7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpii5em96o.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpii5em96o.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ qw = 0\n  local rq = {}\n  for _, x in ipairs(q) do\n    qw = qw + x\n    table.insert(rq,\
    \ 1, x)\n  end\n  return qw <= w and table.concat(q, \"\") == table.concat(rq,\
    \ \"\")\nend\nprint(will_it_fly({1, 2}, 5))\nprint(will_it_fly({1, 2, 3, 2, 3},\
    \ 7))\nprint(will_it_fly({1, 2, 3, 2, 3}, 15))\nprint(will_it_fly({1, 2, 3}, 15))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: 'false

    false

    false

    false

    .

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  for\
    \ i=1, #q, 1 do\n    if q[i] > w then\n      return false\n    end\n  end\n  local\
    \ sum = 0\n  for i=1, #q, 1 do\n    sum = sum + q[i]\n  end\n  if sum > w then\n\
    \    return false\n  end\n  local temp = q\n  reverse(temp)\n  for i=1, #q, 1\
    \ do\n    if q[i] ~= temp[i] then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpteumo1g3.lua:24:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmpteumo1g3.lua:24:\
    \ in local 'candidate'\n\t/tmp/tmpteumo1g3.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if(\
    \ #q < 2 ) then return true end\n  local n = {}\n  for i = 1, #q do\n    n[i]\
    \ = q[#q - i + 1]\n  end\n  if( equal(q, n) and sum(q) <= w ) then\n    return\
    \ true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmz90le_s.lua:16:\
    \ attempt to call a nil value (global 'equal')\nstack traceback:\n\t/tmp/tmpmz90le_s.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpmz90le_s.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ TODO: use the functions defined above\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3qku_ve.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpm3qku_ve.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ w_ = 0\n  for _,v in ipairs(q) do\n    w_ = w_ + v\n  end\n  if w_ > w then\n\
    \    return false\n  end\n  local n = #q\n  for i = 1, n do\n    if q[i] ~= q[n-i+1]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ total = 0\n\tfor i = 1, #q do\n\t\ttotal = total + q[i]\n\tend\n\tlocal balanced\
    \ = false\n\tfor i = 1, #q do\n\t\tif (q[i] == q[#q - i + 1]) then\n\t\t\tbalanced\
    \ = true\n\t\telse\n\t\t\tbalanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\tif\
    \ (total <= w and balanced) then\n\t\treturn true\n\telse\n\t\treturn false\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ s = sum(q)\n  return (s <= w) and is_balanced(q)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbtniig5a.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpbtniig5a.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpbtniig5a.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tlocal\
    \ array = {}\n\tlocal palindromic = true\n\tfor k, v in pairs(q) do\n\t\tif palindromic\
    \ then\n\t\t\tif array[#q-k+1] == v then\n\t\t\t\tarray[k] = v\n\t\t\telse\n\t\
    \t\t\tpalindromic = false\n\t\t\tend\n\t\tend\n\tend\n\tlocal sum = 0\n\tfor k,\
    \ v in pairs(q) do\n\t\tsum = sum + v\n\tend\n\treturn palindromic and sum <=\
    \ w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnt8_djs.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplnt8_djs.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ weight = 0\n    for _, item in ipairs(q) do\n        weight = weight + item\n\
    \    end\n    if weight > w then\n        return false\n    end\n    local i =\
    \ 1\n    local j = #q\n    while i < j do\n        if q[i] ~= q[j] then\n    \
    \        return false\n        end\n        i = i + 1\n        j = j - 1\n   \
    \ end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ #q > 0 then\n        if is_balanced(q) and sum(q) <= w then\n            return\
    \ true\n        else\n            return false\n        end\n    else\n      \
    \  return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0crno_4.lua:12:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpn0crno_4.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpn0crno_4.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ q[1] + q[#q] > w then\n        return false\n    end\n    for i = 1, #q - 1\
    \ do\n        if q[i] ~= q[#q - i + 1] then\n            return false\n      \
    \  end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphkdostpb.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphkdostpb.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcio7sr56.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcio7sr56.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\treturn\
    \ is_balanced(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dm4220u.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmp7dm4220u.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp7dm4220u.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n  end\n  if sum <= w then\n\
    \    for i = 1, #q/2 do\n      if q[i] ~= q[#q+1-i] then\n        return false\n\
    \      end\n    end\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ is_balanced = function(q)\n    return q[1] == q[#q]\n  end\n  local weight =\
    \ function(q)\n    local result = 0\n    for i = 1, #q do\n      result = result\
    \ + q[i]\n    end\n    return result\n  end\n  return weight(q) <= w and is_balanced(q)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ set up initial variables\n  local sum = 0\n  local balanced = true\n  -- iterate\
    \ through the list, summing the elements\n  for i = 1, #q do\n    sum = sum +\
    \ q[i]\n  end\n  -- iterate from the start of the list to the halfway point, comparing\
    \ the elements\n  for i = 1, #q/2 do\n    if q[i] ~= q[#q - i + 1] then\n    \
    \  balanced = false\n    end\n  end\n  -- return true if both conditions are met,\
    \ false otherwise\n  if balanced and sum <= w then\n    return true\n  else\n\
    \    return false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    --\
    \ check that the queue is balanced\n    local qhead = table.remove(q, 1)\n   \
    \ if #q == 0 then\n        table.insert(q, qhead)\n        return false\n    end\n\
    \    local qtail = table.remove(q)\n    if qhead ~= qtail then\n        table.insert(q,\
    \ qtail)\n        table.insert(q, 1, qhead)\n        return false\n    end\n \
    \   return will_it_fly(q, w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp82m7g6ed.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp82m7g6ed.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0;\n  local stack = {};\n  for i = 1, #q do\n    local a = q[i];\n   \
    \ stack[#stack + 1] = a;\n    sum = sum + a;\n    if(sum > w) then\n      return\
    \ false;\n    end\n  end\n  local stackLen = #stack;\n  for i = 1, #q do\n   \
    \ local a = q[i];\n    local b = stack[stackLen];\n    if(a ~= b) then\n     \
    \ return false;\n    end\n    stackLen = stackLen - 1;\n  end\n  return true;\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ s = 0\n  for _,v in ipairs(q) do\n    s = s + v\n  end\n  if s > w then return\
    \ false end\n  local n = #q\n  for i = 1, n do\n    if q[i] ~= q[n-i+1] then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tif\
    \ #q < 2 then\n\t\treturn true\n\tend\n\tif list_sum(q) > w then\n\t\treturn false\n\
    \tend\n\tlocal a = list_head(q)\n\tlocal b = list_last(q)\n\tlocal c = list_tail(q)\n\
    \tlocal d = list_init(q)\n\treturn a == b and will_it_fly(c, w) and will_it_fly(d,\
    \ w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsbbro_qu.lua:14:\
    \ attempt to call a nil value (global 'list_sum')\nstack traceback:\n\t/tmp/tmpsbbro_qu.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpsbbro_qu.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ qsum = table.sum(q)\n  return qsum <= w and table.is_palindrome(q)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9q9iw24q.lua:11:\
    \ attempt to call a nil value (field 'sum')\nstack traceback:\n\t/tmp/tmp9q9iw24q.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp9q9iw24q.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  --\
    \ your code here\n  -- local sum_num = 0\n  -- for i,v in ipairs(q) do\n  -- \
    \  sum_num = sum_num + v\n  -- end\n  -- if is_balanced(q) and sum_num <= w then\n\
    \  --   return true\n  -- else\n  --   return false\n  -- end\n  if is_balanced(q)\
    \ and sum(q) <= w then\n    return true\n  else\n    return false\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4eeprfnn.lua:21:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmp4eeprfnn.lua:21:\
    \ in local 'candidate'\n\t/tmp/tmp4eeprfnn.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n   local\
    \ sum = 0\n   local len = #q\n   local i = 1\n   while i <= len do\n      sum\
    \ = sum + q[i]\n      i = i + 1\n   end\n   if sum > w then return false end\n\
    \   local j = 1\n   while j <= math.floor(len/2) do\n      if q[j] ~= q[len-j+1]\
    \ then return false end\n      j = j + 1\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ #q == 0 then\n        return true\n    end\n    -- TODO add your code here\n\
    \    local s = 0\n    local rev = {}\n    local s = 0\n    local is_fly = true\n\
    \    for i = 1, #q do\n        s = s + q[i]\n        rev[i] = q[#q - i + 1]\n\
    \    end\n    for i = 1, #q do\n        if q[i] ~= rev[i] then\n            is_fly\
    \ = false\n            break\n        end\n    end\n    if s <= w and is_fly then\n\
    \        return true\n    else\n        return false\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ is_palindrome(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnnmw322k.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpnnmw322k.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpnnmw322k.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local balanced = true\n  local i = 1\n  while i <= #q do\n    sum\
    \ = sum + q[i]\n    if q[i] ~= q[#q - i + 1] then\n      balanced = false\n  \
    \  end\n    i = i + 1\n  end\n  return sum <= w and balanced\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ tmp = {}\n  for i,v in ipairs(q) do\n    tmp[#tmp+1] = v\n  end\n  if tmp[1]\
    \ ~= tmp[#tmp] then\n    return false\n  end\n  for i = 1, #tmp - 1 do\n    if\
    \ tmp[i] ~= tmp[#tmp-i+1] then\n      return false\n    end\n  end\n  local sum\
    \ = 0\n  for i,v in ipairs(q) do\n    sum = sum + v\n  end\n  if sum <= w then\n\
    \    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    --\
    \ check if the input is a palindrome\n    if not is_palindrome(q) then\n     \
    \   return false\n    end\n    -- check if it is not over the maximum weight\n\
    \    if sum(q) > w then\n        return false\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm8jxn2ay.lua:12:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpm8jxn2ay.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpm8jxn2ay.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ wt = 0\n    local balanced = true\n    for i = 1, #q do\n        wt = wt + q[i]\n\
    \        if q[i] ~= q[#q - i + 1] then\n            balanced = false\n       \
    \ end\n    end\n    return balanced and wt <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \  ((#q)%2==0) and ((sum(q)+q[1])<=w)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pe5dgv1.lua:17:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_pe5dgv1.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ #q == 0 then return true end\n    local head, tail = 0, #q - 1\n    for i =\
    \ 0, math.floor(#q / 2) do\n        if q[i] ~= q[#q - i] then return false end\n\
    \        head = head + q[i]\n        tail = tail - q[i]\n    end\n    return head\
    \ + tail <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlil9eo2.lua:24:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprlil9eo2.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  local list = {}\n  for _, i in ipairs(q) do \n    table.insert(list,\
    \ i)\n    sum = sum + i\n  end\n  if (sum <= w) and (euler.is_palindrome(list))\
    \ then \n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmyzkc8vx.lua:17:\
    \ attempt to index a nil value (global 'euler')\nstack traceback:\n\t/tmp/tmpmyzkc8vx.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmpmyzkc8vx.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    --\
    \ TODO: add your code here\n    return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu6e8t1c.lua:19:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphu6e8t1c.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ #q == 0 then return false end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmph044xxnz.lua:24: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ is_balanced(q) and w >= sum(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzd31ihr5.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpzd31ihr5.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzd31ihr5.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n   local\
    \ n = 0\n   for i = 1, #q do\n      n = n + q[i]\n   end\n   if n > w then\n \
    \     return false\n   end\n   for i = 1, #q do\n      if q[i] ~= q[#q - i + 1]\
    \ then\n         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ t = table.concat(q) \n    return not(t:reverse() == t) and table.sum(q) <= w\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppb6e93ii.lua:18:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmppb6e93ii.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ w >= sum(q) and is_palindrome(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qs4s4jf.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp4qs4s4jf.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp4qs4s4jf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1hb04c5.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpb1hb04c5.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ is_balanced(q) and get_sum(q) <= w then\n    return true\n  else\n    return\
    \ false\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3cleyj9h.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmp3cleyj9h.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp3cleyj9h.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = is_balanced(q)\n  local sum = sum_list(q)\n  return balanced and\
    \ sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_tdxw8di.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmp_tdxw8di.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp_tdxw8di.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ function palindromic_list(l)\n    return l == reverse(l)\n  end\n  return palindromic_list(q)\
    \ and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9v05_p0d.lua:12:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmp9v05_p0d.lua:12:\
    \ in local 'palindromic_list'\n\t/tmp/tmp9v05_p0d.lua:14: in local 'candidate'\n\
    \t/tmp/tmp9v05_p0d.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n   if\
    \ #q == 0 then\n      return true\n   end\n   local q_rev = reverse(q)\n   local\
    \ q_str = \"\"\n   local q_rev_str = \"\"\n   for i = 1, #q do\n      q_str =\
    \ q_str .. q[i]\n      q_rev_str = q_rev_str .. q_rev[i]\n   end\n   if q_str\
    \ == q_rev_str then\n      local sum = 0\n      for i = 1, #q do\n         sum\
    \ = sum + q[i]\n      end\n      if sum <= w then\n         return true\n    \
    \  else\n         return false\n      end\n   else\n      return false\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0vx409q2.lua:14:\
    \ attempt to call a nil value (global 'reverse')\nstack traceback:\n\t/tmp/tmp0vx409q2.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp0vx409q2.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8hjuduy.lua:18:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw8hjuduy.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local len = #q\n    local is_equal = true\n    for i=1, math.floor(len/2)\
    \ do\n        if q[i] ~= q[len-i+1] then\n            is_equal = false\n     \
    \       break\n        end\n        sum = sum + q[i]\n    end\n    if len % 2\
    \ == 1 then\n        sum = sum + q[math.floor(len/2+1)]\n    end\n    return sum\
    \ <= w and is_equal\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ (sum(q) <= w) and is_balanced(q) then\n        return true\n    else\n     \
    \   return false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmqjikpq4.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpmqjikpq4.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpmqjikpq4.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n   local\
    \ sum = 0\n   for _, v in ipairs(q) do\n      sum = sum + v\n   end\n   return\
    \ sum <= w and is_palindrome(q)\nend\nprint(will_it_fly({1, 2}, 5))\nprint(will_it_fly({1,\
    \ 2, 3, 2, 3}, 5))\nprint(will_it_fly({1, 2, 3, 2, 3}, 10))\nprint(will_it_fly({1,\
    \ 2, 3}, 5))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpd_vp52wz.lua:15: attempt to call a nil value (global 'is_palindrome')\n\
    stack traceback:\n\t/tmp/tmpd_vp52wz.lua:15: in local 'will_it_fly'\n\t/tmp/tmpd_vp52wz.lua:17:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ len = #q\n  local sum = 0\n  local i = 1\n  while i <= len do\n    sum = sum\
    \ + q[i]\n    i = i + 1\n  end\n  if sum > w then\n    return false\n  end\n \
    \ local isBalanced = true\n  local j = 1\n  while j <= len/2 do\n    if q[j] ~=\
    \ q[len-j+1] then\n      isBalanced = false\n      break\n    end\n    j = j +\
    \ 1\n  end\n  return isBalanced\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ #q == 0 then\n        return false\n    end\n    local balanced = true\n   \
    \ local m = math.floor(#q / 2)\n    for i = 1, m do\n        if q[i] ~= q[#q -\
    \ i + 1] then\n            balanced = false\n            break\n        end\n\
    \    end\n    local sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n\
    \    end\n    return balanced and sum <= w\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    --\
    \ write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg7z14a1_.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpg7z14a1_.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ function balanced(t)\n    return t[1] == t[#t] and (#t == 1 or balanced({unpack(t,\
    \ 2, #t-1)}))\n  end\n  return balanced(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4z9wepnf.lua:12:\
    \ attempt to call a nil value (global 'unpack')\nstack traceback:\n\t/tmp/tmp4z9wepnf.lua:12:\
    \ in local 'balanced'\n\t/tmp/tmp4z9wepnf.lua:14: in local 'candidate'\n\t/tmp/tmp4z9wepnf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    if\
    \ math.fmod(#q, 2) == 0 then\n        return false\n    end\n    local mid = math.ceil(#q\
    \ / 2)\n    local left = q[1]\n    local right = q[#q]\n    for i = 2, mid do\n\
    \        left = left + q[i]\n        right = right + q[#q - i + 1]\n    end\n\
    \    if left == right and left <= w then\n        return true\n    end\n    return\
    \ false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tif\
    \ #q == 0 then\n\t\treturn true\n\tend\n\tif sum(q) > w then\n\t\treturn false\n\
    \tend\n\tif sum(q) <= w then\n\t\tlocal newQ = copyQ(q)\n\t\tlocal head = table.remove(newQ,\
    \ 1)\n\t\tlocal tail = table.remove(newQ, #newQ)\n\t\tif head == tail then\n\t\
    \t\treturn will_it_fly(newQ, w)\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7gn0vdwm.lua:14:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp7gn0vdwm.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmp7gn0vdwm.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if (sum\
    \ <= w) and (sum % 2 == 0) then\n        return true\n    else\n        return\
    \ false\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hanq08m.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8hanq08m.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ i, j = 1, #q\n    local sum = 0\n    while i <= j do\n        if q[i] ~= q[j]\
    \ then\n            return false\n        end\n        sum = sum + q[i] + q[j]\n\
    \        i = i + 1\n        j = j - 1\n    end\n    return sum <= w\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw46upk3w.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw46upk3w.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ p = is_palindrome(q)\n    local sum = sum(q)\n    if p == true and sum <= w\
    \ then\n        return true\n    else\n        return false\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp50mqjo58.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmp50mqjo58.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp50mqjo58.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ (sum(q) <= w) and is_balanced(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphe9on0qm.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmphe9on0qm.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmphe9on0qm.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ q_size = #q\n    local total = 0\n    local i = 1\n    while i <= q_size do\n\
    \        if q[i] ~= q[q_size] then\n            return false\n        end\n  \
    \      total = total + q[i]\n        if total > w then\n            return false\n\
    \        end\n        i = i + 1\n        q_size = q_size - 1\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  return\
    \ (sum(q) <= w) and (is_palindrome(q))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl_sb1ynf.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpl_sb1ynf.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpl_sb1ynf.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    --\
    \ todo\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqrxrs_ln.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpqrxrs_ln.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    for i = 1, #q do\n        sum = sum + q[i]\n    end\n    if sum\
    \ <= w then\n        return is_palindrome(q)\n    end\n    return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpixh4prdc.lua:16:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpixh4prdc.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpixh4prdc.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n   return\
    \ (is_palindrome(q) and sum(q) <= w)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxckah1e2.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpxckah1e2.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpxckah1e2.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ balanced = is_palindrome(q)\n  local sum = get_sum(q)\n  local result = sum\
    \ <= w and balanced\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf72f6iwb.lua:26: ''end'' expected (to close ''function'' at
    line 10) near <eof>

    '
  stdout: ''
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ is_balanced(q) and sum(q) <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi73kya24.lua:11:\
    \ attempt to call a nil value (global 'is_balanced')\nstack traceback:\n\t/tmp/tmpi73kya24.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpi73kya24.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ s = 0\n  local n = 0\n  local m = 0\n  for i, t in ipairs(q) do\n    s = s +\
    \ t\n    n = n + 1\n    if t > m then\n      m = t\n    end\n  end\n  return s\
    \ <= w and (n == 1 or n == 2 * math.floor(n / 2) and s == 2 * math.floor(s / 2))\
    \ and m < math.floor(s / 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprtzyfy8z.lua:27:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprtzyfy8z.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  if\
    \ #q ~= q[1] then return false end\n  if #q == 0 then return true end\n  local\
    \ sum = 0\n  for _, v in ipairs(q) do\n    sum = sum + v\n  end\n  return sum\
    \ <= w and will_it_fly(q[2], w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqe_ua5de.lua:11:\
    \ attempt to get length of a number value (local 'q')\nstack traceback:\n\t/tmp/tmpqe_ua5de.lua:11:\
    \ in upvalue 'will_it_fly'\n\t/tmp/tmpqe_ua5de.lua:17: in local 'candidate'\n\t\
    /tmp/tmpqe_ua5de.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 0
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    local\
    \ sum = 0\n    local result = true\n    for i = 1, #q do\n        sum = sum +\
    \ q[i]\n        if result and (q[i] ~= q[#q-i+1]) then\n            result = false\n\
    \        end\n    end\n    if sum > w then\n        result = false\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ palindrome_q = is_palindrome(q)\n  local sum_q = sum(q)\n  return palindrome_q\
    \ and sum_q <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwo407ozj.lua:11:\
    \ attempt to call a nil value (global 'is_palindrome')\nstack traceback:\n\t/tmp/tmpwo407ozj.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwo407ozj.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    return\
    \ w >= sum(q) and is_palindrome(q)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzj0u3z2h.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpzj0u3z2h.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpzj0u3z2h.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n    --\
    \ Implement the function here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8sk1m7fo.lua:17:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmp8sk1m7fo.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n\tif\
    \ #q == 0 then\n\t\treturn true\n\tend\n\treturn math.abs(q[1] - q[#q]) <= 1 and\
    \ will_it_fly(R(q), w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc70axt38.lua:14:\
    \ attempt to call a nil value (global 'R')\nstack traceback:\n\t/tmp/tmpc70axt38.lua:14:\
    \ in local 'candidate'\n\t/tmp/tmpc70axt38.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
- exit_code: 1
  program: "-- Write a function that returns True if the object q will fly, and False\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic list)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly([1, 2], 5) \n-- False \n-- # 1+2 is less\
    \ than the maximum possible weight, but it's unbalanced.\n-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- # 3 is less than the maximum\
    \ possible weight, and it's balanced.\nlocal function will_it_fly(q, w)\n  local\
    \ sum = 0\n  for i,v in ipairs(q) do\n    sum = sum + v\n  end\n  return palindrome(q)\
    \ and sum <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppt_52zea.lua:15:\
    \ attempt to call a nil value (global 'palindrome')\nstack traceback:\n\t/tmp/tmppt_52zea.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmppt_52zea.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822282
