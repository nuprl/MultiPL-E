language: lua
name: HumanEval_36_fizz_buzz
results:
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal ans\
    \ = 0\n\tfor i = 1, n do\n\t\tif (i % 7) == 0 then\n\t\t\tans = ans + 1\n\t\t\
    end\n\tend\n\treturn ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm1_mqbkr.lua:15:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpm1_mqbkr.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal counter\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tfor\
    \ c in tostring(i):gmatch(\".\") do\n\t\t\t\tif c == \"7\" then\n\t\t\t\t\tcounter\
    \ = counter + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn counter\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.050 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tcount\
    \ = count + string.gsub(tostring(i), '7', '')\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpimfpwmwt.lua:15:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmpimfpwmwt.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tif n < 1\
    \ then return 0 end\n\tlocal r = 0\n\tif n >= 11 then\n\t\tlocal i = math.floor(n\
    \ / 11) * 11\n\t\tr = r + (i - i % 10) / 100\n\t\tif i % 13 == 0 then\n\t\t\t\
    r = r + 1\n\t\tend\n\tend\n\tif n >= 13 then\n\t\tlocal i = math.floor(n / 13)\
    \ * 13\n\t\tr = r + (i - i % 10) / 100\n\t\tif i % 11 == 0 then\n\t\t\tr = r +\
    \ 1\n\t\tend\n\tend\n\tif n >= 143 then\n\t\tr = r + fizz_buzz(n - 143)\n\tend\n\
    \treturn r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58z9rnp1.lua:28:\
    \ expected: 0, actual: 0.7\nstack traceback:\n\t/tmp/tmp58z9rnp1.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  --  Write\
    \ your code here\n  local sum = 0\n  local str\n  for i = 1, n-1 do\n    if i\
    \ % 11 == 0 or i % 13 == 0 then\n      str = tostring(i)\n      for d = 1, #str\
    \ do\n        if str:sub(d, d) == '7' then\n          sum = sum + 1\n        end\n\
    \      end\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.040 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822277
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ s = tostring(i)\n\t\t\tfor k = 1, s:len() do\n\t\t\t\tif s:sub(k, k) == \"7\"\
    \ then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\
    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.040 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local retval\
    \ = 0\n    for i = 1, n-1 do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            retval = retval + 1\n        end\n    end\n    return retval\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bnrjy04.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8bnrjy04.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ num = tostring(i)\n\t\t\tfor j = 1, #num do\n\t\t\t\tif num:sub(j, j) == \"\
    7\" then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp61aj_22p.lua:21:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp61aj_22p.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal sum\
    \ = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ s = i\n\t\t\twhile s > 0 do\n\t\t\t\tlocal d = s % 10\n\t\t\t\tif d == 7 then\n\
    \t\t\t\t\tsum = sum + 1\n\t\t\t\tend\n\t\t\t\ts = (s - d) / 10\n\t\t\tend\n\t\t\
    end\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_d9c19v.lua:23:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpx_d9c19v.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal result\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tfor\
    \ n in tostring(i):gmatch('[^7]') do\n\t\t\t\tresult = result + 1\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp842l9m44.lua:17:\
    \ expected: 0, actual: 14\nstack traceback:\n\t/tmp/tmp842l9m44.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n   local count\
    \ = 0\n   for i = 1, n-1 do\n      if i % 11 == 0 or i % 13 == 0 then\n      \
    \   count = count + select_digit(i, 7)\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4jt0umqs.lua:6:\
    \ attempt to call a nil value (global 'select_digit')\nstack traceback:\n\t/tmp/tmp4jt0umqs.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp4jt0umqs.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822277
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local sum\
    \ = 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      for\
    \ j = 1, #tostring(i) do\n        if tostring(i):sub(j, j) == \"7\" then\n   \
    \       sum = sum + 1\n        end\n      end\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.070 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822277
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    -- YOUR\
    \ CODE HERE\n    --[[\n    if n <= 0 then\n        return -1\n    end\n    --]]\n\
    \    local sum = 0\n    local temp = 0\n    for i = 0, n - 1 do\n        if i\
    \ % 11 == 0 or i % 13 == 0 then\n            temp = i\n            while temp\
    \ ~= 0 do\n                if temp % 10 == 7 then\n                    sum = sum\
    \ + 1\n                end\n                temp = math.floor(temp / 10)\n   \
    \         end\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    local sevens = 0\n    local mod = 10\n    while n > 0 do\n        local\
    \ digit = n % mod\n        count = count + 1\n        if digit == 7 then\n   \
    \         sevens = sevens + 1\n        end\n        n = (n - digit) / mod\n  \
    \  end\n    return math.floor(sevens / count * 100)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq_xnmdt.lua:21:\
    \ expected: 2, actual: 50\nstack traceback:\n\t/tmp/tmpiq_xnmdt.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal nn,\
    \ k = 0, 1\n\twhile k*k <= n do\n\t\tnn = nn +\n\t\t\t(s_match(s_format('%o',\
    \ k), '7') and 1 or 0) +\n\t\t\t(s_match(s_format('%o', k*11), '7') and 1 or 0)\
    \ +\n\t\t\t(s_match(s_format('%o', k*13), '7') and 1 or 0)\n\t\tk = k + 1\n\t\
    end\n\treturn nn\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdgydxg3v.lua:6:\
    \ attempt to call a nil value (global 's_format')\nstack traceback:\n\t/tmp/tmpdgydxg3v.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpdgydxg3v.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822277
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n-1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\t-- Count\
    \ the number of 7s in the number.\n\t\t\tlocal x = i\n\t\t\twhile x > 0 do\n\t\
    \t\t\tlocal ones = x % 10\n\t\t\t\tif ones == 7 then\n\t\t\t\t\tcount = count\
    \ + 1\n\t\t\t\tend\n\t\t\t\tx = math.floor(x / 10)\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.030 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822277
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local result\
    \ = 0\n  for i = 0, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ j = i\n      while j > 0 do\n        if j % 10 == 7 then\n          result =\
    \ result + 1\n        end\n        j = math.floor(j / 10)\n      end\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.020 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ num = i\n      while num > 0 do\n        if num % 10 == 7 then\n          count\
    \ = count + 1\n        end\n        num = num // 10\n      end\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yb9r6t1.lua:22:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp0yb9r6t1.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local result\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       result = result + count7(i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfjeuz7cp.lua:6:\
    \ attempt to call a nil value (global 'count7')\nstack traceback:\n\t/tmp/tmpfjeuz7cp.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpfjeuz7cp.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp10qnpydf.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp10qnpydf.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dw30z3r.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5dw30z3r.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n do\n    local s = tostring(i)\n    local contains_7 = false\n\
    \    for j = 1, #s do\n      if s:sub(j, j) == '7' then\n        contains_7 =\
    \ true\n        break\n      end\n    end\n    if contains_7 and (i % 11 == 0\
    \ or i % 13 == 0) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwg1o2w2m.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpwg1o2w2m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n do\n    if (i % 11 == 0 or i % 13 == 0) and i % 10 == 7\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmmq2lhpw.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmmq2lhpw.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local c\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       -- The modulo operator (%) returns the remainder of two numbers.\n   \
    \         -- We can check if i is divisible by 11 or 13 by checking the remainder.\n\
    \            -- For example, i = 100, 11 = 100 % 11 = 1, 13 = 100 % 13 = 7\n \
    \           local seven_count = 0\n            local digits = math.floor(math.log10(i))\
    \ + 1\n            -- math.log10(i) gives the number of digits in base 10.\n \
    \           -- For example, math.log10(100) = 2. So the number of digits is 3.\n\
    \            -- We have to add 1 because Lua's range is inclusive.\n         \
    \   for j = 1, digits do\n                local d = math.floor(i / 10 ^ (j - 1))\
    \ % 10\n                -- i / 10 ^ (j - 1) gives us the first j digits.\n   \
    \             -- For example, i = 100, j = 2, we get d = 10 (1 x 10^1 + 0 x 10^0)\n\
    \                -- math.floor(i / 10 ^ (j - 1)) % 10 gives us the jth digit.\n\
    \                -- For example, i = 123, j = 2, we get d = 2 (because 123 = 1\
    \ x 10^2 + 2 x 10^1 + 3 x 10^0)\n                if d == 7 then\n            \
    \        seven_count = seven_count + 1\n                end\n            end\n\
    \            if seven_count == 1 then\n                c = c + 1\n           \
    \ end\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9hbb9mk.lua:36:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpe9hbb9mk.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjo3b7hz5.lua:15:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpjo3b7hz5.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local function\
    \ get_num_sevens(num)\n        local n = tostring(num)\n        return n:match(\"\
    7\") and #n:match(\"7\") or 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmh58nsv9.lua:21: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tif n < 1\
    \ then return 0 end\n\tif n < 7 then return 1 end\n\tif n < 10 then return 2 end\n\
    \tif n < 14 then return 3 end\n\tif n < 17 then return 4 end\n\tlocal s = tostring(n)\n\
    \tlocal k = #s\n\tlocal sum = 0\n\tlocal last = s:sub(k, k)\n\tif last == '7'\
    \ then\n\t\tsum = 1\n\tend\n\tlocal a, b = floor(n / 10), floor(n / 100)\n\tlocal\
    \ k = 10 ^ (#s - 2)\n\tlocal f = k\n\tlocal last2 = (s:sub(k, k + 1))\n\tif last2\
    \ == '17' or last2 == '71' then\n\t\tsum = sum + 1\n\tend\n\tk = k * 10\n\tfor\
    \ i = 1, #s - 2 do\n\t\tsum = sum + f * 45 * (b + (s:sub(i, i) == '1' and 1 or\
    \ 0))\n\t\tsum = sum + f * 45 * (a + (s:sub(i, i) == '7' and 1 or 0))\n\t\tsum\
    \ = sum + k\n\t\tf = f * 10\n\t\tk = k * 10\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_qf21nb_.lua:15:\
    \ attempt to call a nil value (global 'floor')\nstack traceback:\n\t/tmp/tmp_qf21nb_.lua:15:\
    \ in local 'candidate'\n\t/tmp/tmp_qf21nb_.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local cnt\
    \ = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      if tostring(i):find('7')\
    \ then\n        cnt = cnt + 1\n      end\n    end\n  end\n  return cnt\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoeeiu214.lua:19:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpoeeiu214.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ str = tostring(i)\n      for s in str:gmatch('[%d]') do\n        if s == '7'\
    \ then\n          count = count + 1\n        end\n      end\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p8p4x3i.lua:21:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp1p8p4x3i.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        local x = i\n        while x > 0 do\n    \
    \        local y = x % 10\n            if y == 7 then\n                count =\
    \ count + 1\n            end\n            x = (x - y) / 10\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvn0gnkau.lua:20:\
    \ expected: 0, actual: 5\nstack traceback:\n\t/tmp/tmpvn0gnkau.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local counter\
    \ = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      counter\
    \ = counter + 1\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5piixq9f.lua:15:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmp5piixq9f.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  -- Your code\
    \ here!\n  local count = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 ==\
    \ 0 then\n      local str = tostring(i)\n      local length = string.len(str)\n\
    \      for j = 1, length do\n        if string.sub(str, j, j) == \"7\" then\n\
    \          count = count + 1\n        end\n      end\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09jyvsaw.lua:23:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp09jyvsaw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tif n < 0\
    \ then\n\t\treturn \"n must be non-negative.\"\n\tend\n\tlocal count = 0\n\tfor\
    \ i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tcount = count + select(2,\
    \ (\"\" .. i):gsub(\"7\", \"\"))\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxc73b1w4.lua:19:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpxc73b1w4.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local num_7s\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n            num_7s = num_7s + 1\n        end\n    end\n    return\
    \ num_7s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gl5j_0q.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4gl5j_0q.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    return\
    \ n * (n - 1) * (n - 2) * 4 * 9 * 17 // 33264\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdbmei_0_.lua:9:\
    \ expected: 0, actual: 2163\nstack traceback:\n\t/tmp/tmpdbmei_0_.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 7, n, 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n  \
    \          -- Count the number of times the digit 7 appears in the current number.\n\
    \            local j = i\n            while j > 0 do\n                local digit\
    \ = j % 10\n                if digit == 7 then\n                    count = count\
    \ + 1\n                end\n                j = math.floor(j / 10)\n         \
    \   end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93i660j8.lua:24:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp93i660j8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal num_sevens\
    \ = 0\n\tfor i = 1, n do\n\t\tif (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n\t\t\tnum_sevens = num_sevens + 1\n\t\tend\n\tend\n\treturn num_sevens\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegzzgswg.lua:17:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpegzzgswg.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local sum\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           sum = sum + (i % 10 == 7 and 1 or 0)\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7q9tcig.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpq7q9tcig.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ tmp = i\n      while tmp > 0 do\n        if tmp % 10 == 7 then\n          count\
    \ = count + 1\n        end\n        tmp = math.floor(tmp / 10)\n      end\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.020 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tif n < 0\
    \ then\n\t\treturn 0\n\tend\n\tlocal count = 0\n\tfor i = 0, n - 1 do\n\t\tif\
    \ math.fmod(i, 11) == 0 or math.fmod(i, 13) == 0 then\n\t\t\tif contains_digit(i,\
    \ 7) then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcat0jemz.lua:9:\
    \ attempt to call a nil value (global 'contains_digit')\nstack traceback:\n\t\
    /tmp/tmpcat0jemz.lua:9: in local 'candidate'\n\t/tmp/tmpcat0jemz.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    -- Add\
    \ your code here!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0y5d28y6.lua:9:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp0y5d28y6.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local num_sevens\
    \ = 0\n  for i = 1, n - 1 do\n    local div_11 = i % 11 == 0\n    local div_13\
    \ = i % 13 == 0\n    if div_11 or div_13 then\n      local val = tostring(i)\n\
    \      for j = 1, #val do\n        if val:sub(j, j) == '7' then\n          num_sevens\
    \ = num_sevens + 1\n        end\n      end\n    end\n  end\n  return num_sevens\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.030 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  local divisible_by_eleven = false\n  local divisible_by_thirteen = false\n\
    \  local current_digit = 0\n  for i = 1, n do\n    if i % 11 == 0 then\n     \
    \ divisible_by_eleven = true\n    end\n    if i % 13 == 0 then\n      divisible_by_thirteen\
    \ = true\n    end\n    local current_number = i\n    while current_number > 0\
    \ do\n      current_digit = current_number % 10\n      if current_digit == 7 then\n\
    \        if divisible_by_eleven or divisible_by_thirteen then\n          count\
    \ = count + 1\n        end\n      end\n      current_number = math.floor(current_number\
    \ / 10)\n    end\n    divisible_by_eleven = false\n    divisible_by_thirteen =\
    \ false\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgb1z08zo.lua:34:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpgb1z08zo.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  return 1\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdm4dssi7.lua:9:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpdm4dssi7.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local total\
    \ = 0\n  for i = 1, n do\n    if i % 7 == 0 then\n      local str = tostring(i)\n\
    \      if string.find(str, \"7\") then\n        total = total + 1\n      end\n\
    \    end\n  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7zry1mvp.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp7zry1mvp.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tlocal str = tostring(i)\n\t\tif str:find('7') then\n\
    \t\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu2msm2uo.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpu2msm2uo.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local fizz\
    \ = 0\n    local buzz = 0\n    local fizz_buzz = 0\n    for i = 0, n-1 do\n  \
    \      if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"7\") then\n    \
    \        fizz_buzz = fizz_buzz + 1\n        elseif i % 11 == 0 and tostring(i):find(\"\
    7\") then\n            fizz = fizz + 1\n        elseif i % 13 == 0 and tostring(i):find(\"\
    7\") then\n            buzz = buzz + 1\n        end\n    end\n    return {fizz,\
    \ buzz, fizz_buzz}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2w456chl.lua:21:\
    \ expected: 0, actual: {0, 0, 0}\nstack traceback:\n\t/tmp/tmp2w456chl.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local function\
    \ is_divisible_by(i, n)\n        return i % n == 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyti2vgqp.lua:20: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n   local t\
    \ = {}\n   for i = 1,n do\n      local v = i\n      if v % (11 * 13) == 0 then\n\
    \         v = v / (11 * 13)\n      elseif v % 11 == 0 then\n         v = v / 11\n\
    \      elseif v % 13 == 0 then\n         v = v / 13\n      end\n      v = tostring(v)\n\
    \      if v:find(\"7\") then\n         t[#t+1] = i\n      end\n   end\n   return\
    \ #t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7pz69aw0.lua:24:\
    \ expected: 0, actual: 5\nstack traceback:\n\t/tmp/tmp7pz69aw0.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n   local c\
    \ = 0\n   for i = 1, n-1 do\n      if (i % 11 == 0 or i % 13 == 0) and contains_digit(i,\
    \ 7) then\n         c = c + 1\n      end\n   end\n   return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcuvslxng.lua:5:\
    \ attempt to call a nil value (global 'contains_digit')\nstack traceback:\n\t\
    /tmp/tmpcuvslxng.lua:5: in local 'candidate'\n\t/tmp/tmpcuvslxng.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n   local t\
    \ = 0\n   local u = 0\n   local v = 0\n   local w = 0\n   local count = 0\n  \
    \ local m = math.floor(n / 11)\n   local p = math.floor(n / 13)\n   for i = 1,\
    \ p do\n      t = t + 1\n      u = u + 1\n      if u == 13 then\n         u =\
    \ 0\n      end\n      if t == 11 then\n         t = 0\n      end\n      if t ==\
    \ 7 or u == 7 then\n         count = count + 1\n      end\n   end\n   for i =\
    \ 1, m do\n      v = v + 1\n      w = w + 1\n      if v == 11 then\n         v\
    \ = 0\n      end\n      if w == 13 then\n         w = 0\n      end\n      if v\
    \ == 7 or w == 7 then\n         count = count + 1\n      end\n   end\n   return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_i4p5s4o.lua:43:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_i4p5s4o.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        local n = tostring(i)\n        if n:find('7')\
    \ and (i % 11 == 0 or i % 13 == 0) then\n            count = count + 1\n     \
    \   end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3u75s6sr.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp3u75s6sr.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal n7=0\n\
    \tfor i=0,n do\n\t\tif i%11==0 or i%13==0 then\n\t\t\tn7=n7+digit_count(i,7)\n\
    \t\tend\n\tend\n\treturn n7\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpev4fz32x.lua:6:\
    \ attempt to call a nil value (global 'digit_count')\nstack traceback:\n\t/tmp/tmpev4fz32x.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpev4fz32x.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal n1,\
    \ n2, n3 = 0, 0, 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\
    \t\t\tlocal x = i\n\t\t\twhile x > 0 do\n\t\t\t\tlocal d = x % 10\n\t\t\t\tif\
    \ d == 7 then\n\t\t\t\t\tn3 = n3 + 1\n\t\t\t\tend\n\t\t\t\tx = math.floor(x /\
    \ 10)\n\t\t\tend\n\t\tend\n\tend\n\treturn n1, n2, n3\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo7fximky.lua:23:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpo7fximky.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  --\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppuvhi3eb.lua:9:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmppuvhi3eb.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       count = count + #(tostring(i):gsub(\"7\", \"\"))\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0pon2pny.lua:15:\
    \ expected: 0, actual: 14\nstack traceback:\n\t/tmp/tmp0pon2pny.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local c\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and string.find(i,\
    \ \"7\") then\n            c = c + 1\n        end\n    end\n    return c\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dq_yu44.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9dq_yu44.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjvwbktxl.lua:9:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpjvwbktxl.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 7, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ digits = tostring(i)\n      for j = 1, #digits do\n        if digits:sub(j,\
    \ j) == \"7\" then\n          count = count + 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.030 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local result\
    \ = 0\n  for i = 1, n do\n    local num = tostring(i)\n    if (i % 11 == 0 or\
    \ i % 13 == 0) and num:find('7') then\n      result = result + 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4o95wtdx.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4o95wtdx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    if n <\
    \ 2 then\n        return 0\n    end\n    local d = 1\n    local r = 0\n    while\
    \ d <= n do\n        if d % 11 == 0 or d % 13 == 0 then\n            if d % 10\
    \ == 7 then\n                r = r + 1\n            end\n            d = d + 1\n\
    \        else\n            d = d + 10\n        end\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp57g8s7b2.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp57g8s7b2.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local t\
    \ = {}\n    for i = 1, n do\n        local s = \"\"\n        if i % 3 == 0 then\n\
    \            s = s .. \"Fizz\"\n        end\n        if i % 5 == 0 then\n    \
    \        s = s .. \"Buzz\"\n        end\n        t[i] = s\n    end\n    return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl1t7wky9.lua:20:\
    \ expected: 0, actual: {\n    \"\",\n    \"\",\n    \"Fizz\",\n    \"\",\n   \
    \ \"Buzz\",\n    \"Fizz\",\n    \"\",\n    \"\",\n    \"Fizz\",\n    \"Buzz\"\
    ,\n    \"\",\n    \"Fizz\",\n    \"\",\n    \"\",\n    \"FizzBuzz\",\n    \"\"\
    ,\n    \"\",\n    \"Fizz\",\n    \"\",\n    \"Buzz\",\n    \"Fizz\",\n    \"\"\
    ,\n    \"\",\n    \"Fizz\",\n    \"Buzz\",\n    \"\",\n    \"Fizz\",\n    \"\"\
    ,\n    \"\",\n    \"FizzBuzz\",\n    \"\",\n    \"\",\n    \"Fizz\",\n    \"\"\
    ,\n    \"Buzz\",\n    \"Fizz\",\n    \"\",\n    \"\",\n    \"Fizz\",\n    \"Buzz\"\
    ,\n    \"\",\n    \"Fizz\",\n    \"\",\n    \"\",\n    \"FizzBuzz\",\n    \"\"\
    ,\n    \"\",\n    \"Fizz\",\n    \"\",\n    \"Buzz\"\n}\nstack traceback:\n\t\
    /tmp/tmpl1t7wky9.lua:20: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    -- TODO:\
    \ Complete this function.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptag8l6hj.lua:9:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmptag8l6hj.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal n_times\
    \ = 0\n\tfor i = 0, n-1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ s = tostring(i)\n\t\t\tfor _,c in utf8.codes(s) do\n\t\t\t\tif utf8.char(c)\
    \ == '7' then\n\t\t\t\t\tn_times = n_times + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn n_times\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.030 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tif n < 1\
    \ then\n\t\treturn false\n\tend\n\tlocal count = 0\n\tlocal s_n = tostring(n)\n\
    \tfor i = 1, #s_n do\n\t\tif s_n:sub(i, i) == '7' then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\tif n % 11 == 0 or n % 13 == 0 then\n\t\treturn count +\
    \ fizz_buzz(n - 1)\n\tend\n\treturn count + fizz_buzz(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphiwjz9k8.lua:16:\
    \ attempt to perform arithmetic on a boolean value\nstack traceback:\n\t/tmp/tmphiwjz9k8.lua:16:\
    \ in upvalue 'fizz_buzz'\n\t/tmp/tmphiwjz9k8.lua:16: in upvalue 'fizz_buzz'\n\t\
    /tmp/tmphiwjz9k8.lua:16: in upvalue 'fizz_buzz'\n\t/tmp/tmphiwjz9k8.lua:16: in\
    \ upvalue 'fizz_buzz'\n\t/tmp/tmphiwjz9k8.lua:16: in upvalue 'fizz_buzz'\n\t/tmp/tmphiwjz9k8.lua:16:\
    \ in upvalue 'fizz_buzz'\n\t/tmp/tmphiwjz9k8.lua:16: in upvalue 'fizz_buzz'\n\t\
    /tmp/tmphiwjz9k8.lua:16: in upvalue 'fizz_buzz'\n\t/tmp/tmphiwjz9k8.lua:16: in\
    \ upvalue 'fizz_buzz'\n\t...\t(skipping 39 levels)\n\t/tmp/tmphiwjz9k8.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmphiwjz9k8.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\t-- Check\
    \ if i is divisible by 11 or 13\n\t\t\tlocal i_str = tostring(i)\n\t\t\tfor digit\
    \ in i_str:gmatch\".\" do\n\t\t\t\tif digit == \"7\" then\n\t\t\t\t\tcount = count\
    \ + 1\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn count\n\
    end\nprint(fizz_buzz(1000000))\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "75415\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyeque1yc.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpyeque1yc.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpa8_hb9.lua:15:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmpdpa8_hb9.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        local m = i % 11\n        if (m == 0) or (m\
    \ == 6) then\n            if string.find(tostring(i), \"7\") then\n          \
    \      count = count + 1\n            end\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98oy32i4.lua:18:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp98oy32i4.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n   return select(2,\
    \ (n..\"\").gsub(/[37]([137][0-9]*|0*)/, \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9k57njdv.lua:3: unexpected symbol near ''/''

    '
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           count = count + matches(i, 7)\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsxd52llb.lua:6:\
    \ attempt to call a nil value (global 'matches')\nstack traceback:\n\t/tmp/tmpsxd52llb.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpsxd52llb.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  n = n - 1\n\
    \  local count11 = n - n % 11\n  local count13 = n - n % 13\n  local count1113\
    \ = n - n % 11 * 13\n  local fizzBuzz11 = { [11] = 1, [13] = 1, [14] = 1, [15]\
    \ = 1, [16] = 1, [17] = 1, [18] = 1, [19] = 1, [22] = 1, [23] = 1, [24] = 1, [25]\
    \ = 1, [26] = 1, [27] = 1, [28] = 1, [29] = 1, [33] = 1, [34] = 1, [35] = 1, [36]\
    \ = 1, [37] = 1, [38] = 1, [39] = 1, [44] = 1, [45] = 1, [46] = 1, [47] = 1, [48]\
    \ = 1, [49] = 1, [55] = 1, [56] = 1, [57] = 1, [58] = 1, [59] = 1, [66] = 1, [67]\
    \ = 1, [68] = 1, [69] = 1, [77] = 1, [78] = 1, [79] = 1, [88] = 1, [89] = 1, [99]\
    \ = 1 }\n  local fizzBuzz13 = { [11] = 1, [13] = 1, [14] = 1, [15] = 1, [16] =\
    \ 1, [17] = 1, [18] = 1, [19] = 1, [22] = 1, [23] = 1, [24] = 1, [25] = 1, [26]\
    \ = 1, [27] = 1, [28] = 1, [29] = 1, [33] = 1, [34] = 1, [35] = 1, [36] = 1, [37]\
    \ = 1, [38] = 1, [39] = 1, [44] = 1, [45] = 1, [46] = 1, [47] = 1, [48] = 1, [49]\
    \ = 1, [55] = 1, [56] = 1, [\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp67e0t22u.lua:9: '']'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local function\
    \ gcd(a, b)\n        if b == 0 then\n            return a\n        else\n    \
    \        return gcd(b, a % b)\n        end\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp7lrjzco.lua:24: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\treturn ({0,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10,\
    \ 1, 2, 3,\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp74kw8pvf.lua:6: ''}'' expected (to close ''{'' at line 3)
    near ''function''

    '
  stdout: ''
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n - 1 do\n        local x = 11 * i\n        if tostring(x):find(\"\
    7\") then\n            count = count + 1\n        end\n        x = 13 * i\n  \
    \      if tostring(x):find(\"7\") then\n            count = count + 1\n      \
    \  end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka1pfxnr.lua:20:\
    \ expected: 0, actual: 17\nstack traceback:\n\t/tmp/tmpka1pfxnr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  n = n and\
    \ n or 10000\n  local fizzbuzz = 0\n  for i = 1, n do\n    if i % 11 == 0 or i\
    \ % 13 == 0 then\n      local s = tostring(i)\n      for j = 1, #s do\n      \
    \  if s:sub(j, j) == '7' then\n          fizzbuzz = fizzbuzz + 1\n        end\n\
    \      end\n    end\n  end\n  return fizzbuzz\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw2cq4lld.lua:22:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpw2cq4lld.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      count\
    \ = count + count_7(i)\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4txrbqz.lua:6:\
    \ attempt to call a nil value (global 'count_7')\nstack traceback:\n\t/tmp/tmpo4txrbqz.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpo4txrbqz.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 0, n-1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ digits = tostring(i)\n      for j = 1, #digits do\n        if digits:sub(j,\
    \ j) == '7' then\n          count = count + 1\n        end\n      end\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.020 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    -- your\
    \ code here\n    local result = {}\n    local count = 0\n    for i = 1, n do\n\
    \        local is_valid = true\n        if (i % 11 == 0 or i % 13 == 0) then\n\
    \            is_valid = true\n        else\n            is_valid = false\n   \
    \     end\n        if is_valid then\n            table.insert(result, i)\n   \
    \         if math.floor(i / 10) == 7 then\n                count = count + 1\n\
    \            end\n            if math.floor(i % 10) == 7 then\n              \
    \  count = count + 1\n            end\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmnjxfh9.lua:30:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmplmnjxfh9.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tif n < 1\
    \ then return 0 end\n\tlocal count = 0\n\tif math.floor(n/11) % 10 == 7 then count\
    \ = count + 1 end\n\tif math.floor(n/13) % 10 == 7 then count = count + 1 end\n\
    \treturn count + fizz_buzz(n-1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd18r530o.lua:16:\
    \ expected: 3, actual: 21\nstack traceback:\n\t/tmp/tmpd18r530o.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    return\
    \ n % 7 -- This is your answer.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1018xda.lua:9:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpn1018xda.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local sum\
    \ = 0\n    local flag = false\n    for i = 1, n do\n        if (i % 11 == 0 or\
    \ i % 13 == 0) then\n            for _, v in pairs(string.split(tostring(i), \"\
    \")) do\n                if (v == \"7\") then\n                    sum = sum +\
    \ 1\n                    flag = true\n                end\n            end\n \
    \       end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfsqwx1cy.lua:7:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpfsqwx1cy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpfsqwx1cy.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfxm_60k.lua:17:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpvfxm_60k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  -- we generate\
    \ the numbers in the range [11, n] which are \n  -- divisible by 11 or 13, and\
    \ count the number of 7's in the string representation of each number\n  -- the\
    \ problem is reduced to the following\n  --\n  -- How many digits in a number\
    \ have the value 7?\n  --\n  -- Examples:\n  --   7 =>  1\n  --  17 =>  1\n  --\
    \  71 =>  2\n  --  72 =>  1\n  --  73 =>  1\n  --  74 =>  0\n  --  75 =>  0\n\
    \  --  76 =>  0\n  --  77 =>  3\n  --\n  -- Let's test our function for some numbers\n\
    \  --     >> fizz_buzz(7)       # should return 1\n  --     >> fizz_buzz(17) \
    \     # should return 1\n  --     >> fizz_buzz(71)      # should return 2\n  --\
    \     >> fizz_buzz(72)      # should return 1\n  --     >> fizz_buzz(73)     \
    \ # should return 1\n  --     >> fizz_buzz(74)      # should return 0\n  --  \
    \   >> fizz_buzz(75)      # should return 0\n  --     >> fizz_buzz(76)      #\
    \ should return 0\n  --     >> fizz_buzz(77)      # should return 3\n  --    \
    \ >> fizz_buzz(111111)  # should return 3\n  --     >> fizz_buzz(123456)  # should\
    \ return 1\n  --     >> fizz_buzz(123476)  # should return 1\n  --     >> fizz_buzz(123467)\
    \  # should return 2\n  --     >> fizz_buzz(123477)  # should return 3\n  -- \
    \    >> fizz_buzz(123456)  # should return 1\n  --     >> fizz_buzz(133456)  #\
    \ should return 1\n  --     >> fizz_buzz(134456)  # should return 0\n  --    \
    \ >> fizz_buzz(135456)  # should return 0\n  --     >> fizz_buzz(136456\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppr5w0uxv.lua:54: ''end'' expected (to close ''function'' at
    line 2) near <eof>

    '
  stdout: ''
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  if n < 1\
    \ then\n    return 0\n  end\n  local current = 1\n  local total = 0\n  while current\
    \ < n do\n    local str = tostring(current)\n    if string.find(str, \"7\") then\n\
    \      if current % 11 == 0 or current % 13 == 0 then\n        total = total +\
    \ 1\n      end\n    end\n    current = current + 1\n  end\n  return total\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3knlvhji.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3knlvhji.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local number_of_7s\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            number_of_7s = number_of_7s + 1\n        end\n    end\n\
    \    return number_of_7s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcvb3lqk.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvcvb3lqk.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local sum\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           local s = tostring(i)\n            for j = 1, #s do\n            \
    \    if s:sub(j, j) == '7' then\n                    sum = sum + 1\n         \
    \       end\n            end\n        end\n    end\n    return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.020 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 7, n, 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      print(i)\n\
    \      local num = i\n      while num > 0 do\n        if num % 10 == 7 then\n\
    \          count = count + 1\n        end\n        num = math.floor(num / 10)\n\
    \      end\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "11\n13\n22\n26\n33\n39\n44\n11\n13\n22\n26\n33\n39\n44\n52\n55\n65\n66\n\
    77\n78\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphlibxuny.lua:23:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmphlibxuny.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      for\
    \ d in tostring(i):gmatch('7') do\n        count = count + 1\n      end\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tcount\
    \ = count + string.gsub(tostring(i), '7', '')\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprs4bo9iq.lua:15:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmprs4bo9iq.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif math.fmod(i, 11) == 0 or math.fmod(i, 13) ==\
    \ 0 then\n\t\t\tcount = count + count_sevens(i)\n\t\tend\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc832wuh8.lua:6:\
    \ attempt to call a nil value (global 'count_sevens')\nstack traceback:\n\t/tmp/tmpc832wuh8.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpc832wuh8.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        local is_divisible_by_11 = (i % 11 == 0)\n\
    \        local is_divisible_by_13 = (i % 13 == 0)\n        if is_divisible_by_11\
    \ or is_divisible_by_13 then\n            local i_string = tostring(i)\n     \
    \       for c in i_string:gmatch(\".\") do\n                if c == \"7\" then\n\
    \                    count = count + 1\n                end\n            end\n\
    \        end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6ogdt3h.lua:23:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpq6ogdt3h.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local num_7\
    \ = 0\n    for i = 1, n do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            num_7 = num_7 + 1\n        end\n    end\n    return num_7\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm21umsw.lua:17:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgm21umsw.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\t-- TODO:\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__pac038.lua:9:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp__pac038.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal sum\
    \ = 0\n\tfor i = 0, n - 1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and i % 7 ==\
    \ 0 then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqkfhl3nj.lua:15:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpqkfhl3nj.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tif\
    \ tostring(i):find(\"7\") then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqe1h85l6.lua:18:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqe1h85l6.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and i % 10 ==\
    \ 7 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19a0z5bu.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp19a0z5bu.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local r\
    \ = 0\n    for i = 0, n do\n        if (i % 11 == 0 or i % 13 == 0) and (i % 10\
    \ == 7) then\n            r = r + 1\n        end\n    end\n    return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_64ep3v.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpb_64ep3v.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           count = count + string.gsub(tostring(i), '7', '')\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt9g5zhv7.lua:15:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmpt9g5zhv7.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfxm_60k.lua:17:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpvfxm_60k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local seven\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n            seven = seven + 1\n        end\n    end\n    return\
    \ seven\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_m48lrdq.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_m48lrdq.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local fizzbuzzCount\
    \ = 0\n  for i = 0,n-1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      fizzbuzzCount\
    \ = fizzbuzzCount + ((tostring(i):match(\"7\") and 1) or 0)\n    end\n  end\n\
    \  return fizzbuzzCount\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfu_rszms.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpfu_rszms.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal total\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tif\
    \ tostring(i):find(\"7\") then\n\t\t\t\ttotal = total + 1\n\t\t\tend\n\t\tend\n\
    \tend\n\treturn total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq6mvpiqg.lua:18:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpq6mvpiqg.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal sum\
    \ = 0\n\tfor i = 1, n-1 do\n\t\tlocal s = tostring(i)\n\t\tif (s:find('7') and\
    \ ((i % 11 == 0) or (i % 13 == 0))) then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\
    \treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb68mc3tz.lua:17:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpb68mc3tz.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    return\
    \ 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4krp70d0.lua:10:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp4krp70d0.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       count = count + (i..''):gsub('[^7]', ''):len()\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0376n1p.lua:16:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpj0376n1p.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local fizz_count\
    \ = 0\n    for i = 0, n-1 do\n        if math.fmod(i, 11) == 0 or math.fmod(i,\
    \ 13) == 0 then\n            fizz_count = fizz_count + num_sevens(i)\n       \
    \ end\n    end\n    return fizz_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwfj5qlhk.lua:6:\
    \ attempt to call a nil value (global 'num_sevens')\nstack traceback:\n\t/tmp/tmpwfj5qlhk.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpwfj5qlhk.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tif\
    \ string.find(tostring(i), \"7\") then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\
    \t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp34d5tjak.lua:18:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp34d5tjak.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           local str = tostring(i)\n            for c in str:gmatch(\".\") do\n\
    \                if c == \"7\" then\n                    count = count + 1\n \
    \               end\n            end\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.020 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local n_seven\
    \ = 0\n  local n_div_eleven = 0\n  local n_div_thirteen = 0\n  for i = 1, n -\
    \ 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      local digit = i\n      while\
    \ digit > 0 do\n        if digit % 10 == 7 then\n          n_seven = n_seven +\
    \ 1\n        end\n        digit = digit // 10\n      end\n    end\n  end\n  return\
    \ n_seven\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal num_7s\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\t--\
    \ count the number of 7s in this integer\n\t\t\tnum_7s = num_7s + math.floor(i\
    \ % 10 ^ math.huge / 7)\n\t\tend\n\tend\n\treturn num_7s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5tx6omnp.lua:16:\
    \ expected: 0, actual: 23\nstack traceback:\n\t/tmp/tmp5tx6omnp.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local digits\
    \ = {}\n  for i = 0, 9 do\n    digits[i] = 0\n  end\n  for i = 1, n do\n    if\
    \ i % 11 == 0 or i % 13 == 0 then\n      local j = i\n      while j > 0 do\n \
    \       local c = j % 10\n        j = math.floor(j / 10)\n        digits[c] =\
    \ digits[c] + 1\n      end\n    end\n  end\n  return digits[7]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_br1vlc.lua:24:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpe_br1vlc.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal s =\
    \ 0\n\tfor x=1,n do\n\t\tlocal y = 0\n\t\tlocal x0 = x\n\t\twhile x > 0 do\n\t\
    \t\tif x % 10 == 7 then\n\t\t\t\ty = y + 1\n\t\t\tend\n\t\t\tx = math.floor(x\
    \ / 10)\n\t\tend\n\t\tif x0 % 11 == 0 or x0 % 13 == 0 then\n\t\t\ts = s + y\n\t\
    \tend\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxzxduyy.lua:24:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpaxzxduyy.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\t-- TODO:\
    \ finish the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxthuwdbg.lua:9:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmpxthuwdbg.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    if n ==\
    \ nil then return nil end\n    local sum = 0\n    for i = 1, n-1 do\n        if\
    \ (i % 11 == 0 or i % 13 == 0) and tostring(i):match(\"7\") then\n           \
    \ sum = sum + 1\n        end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpew3wbv0z.lua:17:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpew3wbv0z.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local i =\
    \ 0\n  for _ = 1, n do\n    i = i + ((_ % 11 == 0 or _ % 13 == 0) and tostring(_):match('7')\
    \ and 1 or 0)\n  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmnttiooe.lua:15:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpmnttiooe.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tlocal str\n\tfor i = 1, n - 1 do\n\t\tstr = tostring(i)\n\t\tif (i %\
    \ 11 == 0 or i % 13 == 0) and str:find(\"7\") then\n\t\t\tcount = count + 1\n\t\
    \tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09ysykyn.lua:18:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp09ysykyn.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  -- body\n\
    \  local k = 0\n  for i = 1, n do\n    if (i % 11 == 0 or i % 13 == 0) and string.find(i,\
    \ \"7\") then\n      k = k + 1\n    end\n  end\n  return k\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqbdprye9.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpqbdprye9.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           if i % 100 == 77 then\n                count = count + 1\n       \
    \     else\n                count = count + string.gsub(tostring(i), '7', '')\n\
    \            end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnsexnp9t.lua:19:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmpnsexnp9t.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local sum\
    \ = 0\n    local cnt = 0\n    local x = 0\n    while x < n do\n        if x %\
    \ 7 == 0 then\n            cnt = cnt + 1\n            sum = sum + x\n        end\n\
    \        x = x + 1\n    end\n    return cnt, sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplkzpzbk5.lua:19:\
    \ expected: 0, actual: 8\nstack traceback:\n\t/tmp/tmplkzpzbk5.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local sum\
    \ = 0\n    for i = 0, n do\n        if (i % 11 == 0 or i % 13 == 0) and i % 10\
    \ == 7 then\n            sum = sum + 1\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprf99ym_t.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprf99ym_t.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\treturn 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgu7u0qvy.lua:10:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpgu7u0qvy.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal s =\
    \ 0\n\tfor i = 1, n do\n\t\tif (i % 11 == 0 or i % 13 == 0) and i % 10 == 7 then\n\
    \t\t\ts = s + 1\n\t\tend\n\tend\n\treturn s\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprc2j19eg.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprc2j19eg.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tcount\
    \ = count + ((tostring(i):match(\"7\") and 1) or 0)\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6m6td45i.lua:17:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp6m6td45i.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tif n > 1000000\
    \ then return \"n must be less than 1 million\" end\n\tif n < 1 then return \"\
    n must be greater than 0\" end\n\tlocal sum = 0\n\tfor i = 1, n do\n\t\tlocal\
    \ m = tostring(i)\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tfor j = 1, #m\
    \ do\n\t\t\t\tif m:sub(j, j) == \"7\" then\n\t\t\t\t\tsum = sum + 1\n\t\t\t\t\
    end\n\t\t\tend\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tzxr8sk.lua:23:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp0tzxr8sk.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n-1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and string.find(i,\
    \ '7') then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvps_00ox.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvps_00ox.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ str = tostring(i)\n\t\t\tfor j = 1, str:len() do\n\t\t\t\tif str:sub(j, j) ==\
    \ \"7\" then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.020 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local digit = (i % 10)\n            while digit ~= 0 do\n            \
    \    if digit == 7 then\n                    count = count + 1\n             \
    \   end\n                digit = math.floor(digit / 10)\n            end\n   \
    \     end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx9lta6cr.lua:22:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpx9lta6cr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local sum\
    \ = 0\n  for i = 0, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      sum =\
    \ sum + num_sevens(i)\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsi3xgfgv.lua:6:\
    \ attempt to call a nil value (global 'num_sevens')\nstack traceback:\n\t/tmp/tmpsi3xgfgv.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpsi3xgfgv.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal tot\
    \ = 0\n\tfor i = 1, n do\n\t\tlocal x = math.floor(i / 10)\n\t\tlocal y = i %\
    \ 10\n\t\tif (x + y) % 11 == 0 or (x + y) % 13 == 0 then\n\t\t\twhile x > 0 do\n\
    \t\t\t\tif x % 10 == 7 then\n\t\t\t\t\ttot = tot + 1\n\t\t\t\tend\n\t\t\t\tx =\
    \ math.floor(x / 10)\n\t\t\tend\n\t\t\tif y == 7 then\n\t\t\t\ttot = tot + 1\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn tot\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9quj4nsr.lua:25:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmp9quj4nsr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tif n < 0\
    \ then\n\t\treturn 'n must be a positive integer'\n\tend\n\tif n < 11 then\n\t\
    \treturn 0\n\tend\n\tn = math.floor(n / 10)\n\tlocal count = 0\n\tfor i = 11,\
    \ n, 11 do\n\t\tcount = count + 1\n\tend\n\tfor i = 13, n, 13 do\n\t\tcount =\
    \ count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp28rtb70n.lua:24:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp28rtb70n.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal k,\
    \ s = 0, 0\n\tfor i = 1, n - 1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and i %\
    \ 7 == 0 then\n\t\t\tk = k + 1\n\t\t\ts = s + i\n\t\tend\n\tend\n\treturn k, s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjbwnfx_p.lua:17:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjbwnfx_p.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local total\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           total = total + string.gsub(tostring(i), \"7\", \"\")\n        end\n\
    \    end\n    return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw7e_096.lua:15:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmppw7e_096.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal result\
    \ = 0\n\tfor i = 1, n do\n\t\tlocal divisible_by_11_or_13 = (i % 11 == 0) or (i\
    \ % 13 == 0)\n\t\tif divisible_by_11_or_13 then\n\t\t\tlocal i_str = tostring(i)\n\
    \t\t\tfor i2 = 1, i_str:len() do\n\t\t\t\tif i_str:sub(i2, i2) == \"7\" then\n\
    \t\t\t\t\tresult = result + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnkbhtv1d.lua:22:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpnkbhtv1d.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       count = count + count_sevens(i)\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9pzli0nk.lua:6:\
    \ attempt to call a nil value (global 'count_sevens')\nstack traceback:\n\t/tmp/tmp9pzli0nk.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp9pzli0nk.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ str = tostring(i)\n\t\t\tfor j = 1, #str do\n\t\t\t\tif str:sub(j, j) == \"\
    7\" then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqydedwp.lua:21:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpeqydedwp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local str = tostring(i)\n            for j = 1, #str do\n            \
    \    if str:sub(j, j) == '7' then\n                    count = count + 1\n   \
    \             end\n            end\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfo9gvpj.lua:21:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpmfo9gvpj.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5dw30z3r.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5dw30z3r.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822277
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  -- TODO:\
    \ complete this function.\n  local result = 0\n  if n < 0 then\n    return result\n\
    \  end\n  if n == 7 then\n    return 1\n  end\n  result = fizz_buzz(n - 1)\n \
    \ if string.find(n, '7') and (n % 11 == 0 or n % 13 == 0) then\n    result = result\
    \ + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsavm1z4h.lua:21:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpsavm1z4h.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and i\
    \ % 7 == 0 then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnbcs0sbq.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpnbcs0sbq.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local res\
    \ = 0\n    for i = 1, n-1 do\n        if i % 11 == 0 or i % 13 == 0 then\n   \
    \         local tmp = i\n            while tmp > 0 do\n                if tmp\
    \ % 10 == 7 then\n                    res = res + 1\n                end\n   \
    \             tmp = math.floor(tmp / 10)\n            end\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 7, n, 11 do\n\t\tlocal s = tostring(i)\n\t\tif s:find(\"7\")\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tfor i = 11, n, 11 do\n\t\t\
    local s = tostring(i)\n\t\tif s:find(\"7\") then\n\t\t\tcount = count + 1\n\t\t\
    end\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyfgrr_u.lua:22:\
    \ expected: 0, actual: 1\nstack traceback:\n\t/tmp/tmpuyfgrr_u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local fizz_or_buzz\
    \ = 0\n    for i = 0, n-1 do\n        if i % 11 == 0 or i % 13 == 0 then\n   \
    \         local x = tostring(i)\n            for j = 1, #x do\n              \
    \  if x:sub(j, j) == \"7\" then\n                    fizz_or_buzz = fizz_or_buzz\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ fizz_or_buzz\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.020 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal c =\
    \ 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ j = i\n\t\t\twhile j > 0 do\n\t\t\t\tif j % 10 == 7 then\n\t\t\t\t\tc = c +\
    \ 1\n\t\t\t\tend\n\t\t\t\tj = (j - j % 10) / 10\n\t\t\tend\n\t\tend\n\tend\n\t\
    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local result\
    \ = 0\n  local count = 0\n  for i = n, 1, -1 do\n    count = count + 1\n    if\
    \ (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"7\") then\n      result\
    \ = result + 1\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnw_p41n.lua:19:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpdnw_p41n.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local sum\
    \ = 0\n    for i = 1, n - 1 do\n        local s = tostring(i)\n        if s:find(\"\
    7\") and (i % 11 == 0 or i % 13 == 0) then\n            sum = sum + 1\n      \
    \  end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph7ldm_hs.lua:17:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmph7ldm_hs.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tlocal mult = 11\n\twhile mult < n do\n\t\tlocal check = mult\n\t\twhile\
    \ check > 0 do\n\t\t\tlocal digit = check % 10\n\t\t\tif digit == 7 then\n\t\t\
    \t\tcount = count + 1\n\t\t\tend\n\t\t\tcheck = math.floor(check / 10)\n\t\tend\n\
    \t\tmult = mult + 11\n\tend\n\tmult = 13\n\twhile mult < n do\n\t\tlocal check\
    \ = mult\n\t\twhile check > 0 do\n\t\t\tlocal digit = check % 10\n\t\t\tif digit\
    \ == 7 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\tcheck = math.floor(check\
    \ / 10)\n\t\tend\n\t\tmult = mult + 13\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx84p77ed.lua:39:\
    \ expected: 192, actual: 202\nstack traceback:\n\t/tmp/tmpx84p77ed.lua:39: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local total\
    \ = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ num = i\n      while num > 0 do\n        local digit = num % 10\n        if\
    \ digit == 7 then\n          total = total + 1\n        end\n        num = math.floor(num\
    \ / 10)\n      end\n    end\n  end\n  return total\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd82ntpu4.lua:23:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpd82ntpu4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2yy9s63.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpz2yy9s63.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor x = 1, n do\n\t\tif (x % 7 == 0) and (x % 11 == 0 or x % 13 == 0)\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5vcrazrr.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5vcrazrr.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 0, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51avypgh.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp51avypgh.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal tot\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\ttot\
    \ = tot + string.gsub(i, \"7\", \"\")\n\t\tend\n\tend\n\treturn tot\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfyn37e78.lua:15:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmpfyn37e78.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  \n  local\
    \ t = {}\n  -- insert your code here\n  local count=0\n  for i=1,n do\n    local\
    \ str_i = tostring(i)\n    local m11 = i%11\n    local m13 = i%13\n    if (m11==0\
    \ or m13==0) and string.find(str_i, \"7\") then\n      count = count + 1\n   \
    \ end\n  end\n  table.insert(t, count)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_bgx34hs.lua:22:\
    \ expected: 0, actual: {0}\nstack traceback:\n\t/tmp/tmp_bgx34hs.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       if tostring(i):find(\"7\") then\n                count = count + 1\n \
    \           end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkz1ssc6b.lua:19:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpkz1ssc6b.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n-1 do\n\t\tif i % 11 == 0 then\n\t\t\tcount = count + 1\n\
    \t\telseif i % 13 == 0 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppafydwnq.lua:17:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmppafydwnq.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and i % 10 ==\
    \ 7 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19a0z5bu.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp19a0z5bu.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local s,\
    \ v = '', 0\n  for i = 1, n do\n    if i % 35 == 0 then v = v + 1; s = s .. 'fizz-buzz'\n\
    \    elseif i % 15 == 0 then s = s .. 'fizz'\n    elseif i % 5 == 0 then s = s\
    \ .. 'buzz'\n    else s = s .. i end\n    s = s .. ', '\n  end\n  return string.sub(s,\
    \ 1, -3), v\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3c2yy67s.lua:17:\
    \ expected: 0, actual: \"1, 2, 3, 4, buzz, 6, 7, 8, 9, buzz, 11, 12, 13, 14, fizz,\
    \ 16, 17, 18, 19, buzz, 21, 22, 23, 24, buzz, 26, 27, 28, 29, fizz, 31, 32, 33,\
    \ 34, fizz-buzz, 36, 37, 38, 39, buzz, 41, 42, 43, 44, fizz, 46, 47, 48, 49, buzz\"\
    \nstack traceback:\n\t/tmp/tmp3c2yy67s.lua:17: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  local iterator = coroutine.wrap(function()\n    while n > 0 do\n    \
    \  if n % 11 == 0 or n % 13 == 0 then\n        coroutine.yield(n)\n      end\n\
    \      n = n - 1\n    end\n  end)\n  for i in iterator do\n    if string.find(i,\
    \ \"7\") then\n      count = count + 1\n    end\n  end\n  return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn676yh67.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpn676yh67.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local s\
    \ = 0\n    for i = 0, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and math.abs(i)\
    \ % 10 == 7 then\n            s = s + 1\n        end\n    end\n    return s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu64pcq73.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpu64pcq73.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal x =\
    \ 0\n\tfor i = 0, n-1 do\n\t\tlocal num = i\n\t\twhile num > 0 do\n\t\t\tlocal\
    \ x = num % 10\n\t\t\tif x == 7 then return i end\n\t\t\tnum = math.floor(num\
    \ / 10)\n\t\tend\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4e3b7idx.lua:17:\
    \ expected: 0, actual: 7\nstack traceback:\n\t/tmp/tmp4e3b7idx.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ s = tostring(i)\n\t\t\tfor j = 1, #s do\n\t\t\t\tif s:sub(j, j) == '7' then\n\
    \t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.030 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz2yy9s63.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpz2yy9s63.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\t-- Use a\
    \ set to count the number of different digits\n\tlocal set = {}\n\tfor i = 1,\
    \ n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tfor digit in tostring(i):gmatch('.')\
    \ do\n\t\t\t\tset[digit] = true\n\t\t\tend\n\t\tend\n\tend\n\treturn #set['7']\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptkn9himc.lua:12:\
    \ attempt to get length of a nil value (field '7')\nstack traceback:\n\t/tmp/tmptkn9himc.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmptkn9himc.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif (i % 11 == 0 or i % 13 == 0) and i % 10 == 7\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmb_ubly.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmplmb_ubly.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\t-- These\
    \ digits are all we need to check for.\n\tlocal sevens = '7'\n\tlocal digits =\
    \ {7, 11, 13}\n\tlocal result = 0\n\tlocal count = {}\n\tfor i = 1, #digits do\n\
    \t\tcount[digits[i]] = 0\n\tend\n\tfor i = 1, n - 1 do\n\t\t-- Check for digit\
    \ 7 and for a multiple of 11 or 13.\n\t\tlocal is_divisible = (i % 11 == 0) or\
    \ (i % 13 == 0)\n\t\tif is_divisible and string.find(tostring(i), sevens) then\n\
    \t\t\t-- If a multiple of 11 or 13 and contains a 7, increase the count.\n\t\t\
    \tresult = result + 1\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxb2zx7tz.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpxb2zx7tz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local _7s\
    \ = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      local\
    \ s = tostring(i)\n      for c in s:gmatch(\".\") do\n        if c == \"7\" then\n\
    \          _7s = _7s + 1\n        end\n      end\n    end\n  end\n  return _7s\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzlc43wa0.lua:21:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpzlc43wa0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n-1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and tostring(i):find(\"\
    7\") then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9tdvx_p.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg9tdvx_p.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local c\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local t = i\n            repeat\n                if t % 10 == 7 then\n\
    \                    c = c + 1\n                end\n                t = math.floor(t\
    \ / 10)\n            until t == 0\n        end\n    end\n    return c\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedzbm2wo.lua:22:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpedzbm2wo.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local res\
    \ = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n      for _,\
    \ c in ipairs(tostring(i)) do\n        if c == '7' then\n          res = res +\
    \ 1\n        end\n      end\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphteab9o1.lua:20:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmphteab9o1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal result\
    \ = 0\n\tfor i = 1, n-1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\twhile\
    \ i > 0 do\n\t\t\t\tif i % 10 == 7 then\n\t\t\t\t\tresult = result + 1\n\t\t\t\
    \tend\n\t\t\t\ti = i // 10\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local result\
    \ = {}\n  local c = 0\n  for i = 1, n do\n    if i % 11 == 0 or i % 13 == 0 then\n\
    \      c = c + string.gsub(tostring(i), '7', '')\n    end\n  end\n  return c\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmntun7y.lua:16:\
    \ expected: 0, actual: 188\nstack traceback:\n\t/tmp/tmptmntun7y.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\t-- Write\
    \ your code here...\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2lj4afvk.lua:9:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp2lj4afvk.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           local n = i\n            while n > 0 do\n                local digit\
    \ = n % 10\n                if digit == 7 then\n                    count = count\
    \ + 1\n                end\n                n = math.floor(n / 10)\n         \
    \   end\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.010 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  -- TODO\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_x6x_6wn.lua:9:\
    \ expected: 0, actual: nil\nstack traceback:\n\t/tmp/tmp_x6x_6wn.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  if type(n)\
    \ ~= \"number\" then\n    print(\"Please enter a number.\")\n    return\n  end\n\
    \  local count = 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0)\
    \ and i % 10 == 7 then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwq52pwdy.lua:20:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwq52pwdy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           count = count + count_digit(i, 7)\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1c5cz0lo.lua:6:\
    \ attempt to call a nil value (global 'count_digit')\nstack traceback:\n\t/tmp/tmp1c5cz0lo.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp1c5cz0lo.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local c\
    \ = 0\n    for i = 1, n-1 do\n        if i % 11 == 0 or i % 13 == 0 then\n   \
    \         local s = tostring(i)\n            for j = 1, #s do\n              \
    \  if s:sub(j, j) == '7' then\n                    c = c + 1\n               \
    \ end\n            end\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.020 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local cnt\
    \ = 0\n    for i = 1, n do\n        if i % 7 == 0 and i % 11 == 0 and i % 13 ==\
    \ 0 then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4rcm4399.lua:16:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp4rcm4399.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local result\
    \ = 0\n    local divisors = {11, 13}\n    for i = 0, n - 1 do\n        for _,\
    \ divisor in ipairs(divisors) do\n            if i % divisor == 0 then\n     \
    \           result = result + count_sevens(i)\n                break\n       \
    \     end\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiowsq5vh.lua:8:\
    \ attempt to call a nil value (global 'count_sevens')\nstack traceback:\n\t/tmp/tmpiowsq5vh.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpiowsq5vh.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal ret\
    \ = 0\n\tfor i = 7, n - 1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tret\
    \ = ret + count_sevens(i)\n\t\tend\n\tend\n\treturn ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpojsxzuq6.lua:6:\
    \ attempt to call a nil value (global 'count_sevens')\nstack traceback:\n\t/tmp/tmpojsxzuq6.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpojsxzuq6.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  return n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot_8lb7y.lua:9:\
    \ expected: 0, actual: 50\nstack traceback:\n\t/tmp/tmpot_8lb7y.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    return\
    \ (n // 11 + n // 13) * 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad0y8xmp.lua:9:\
    \ expected: 0, actual: 14\nstack traceback:\n\t/tmp/tmpad0y8xmp.lua:9: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local res\
    \ = 0\n  if n >= 0 then\n    local a = get_mod(n)\n    if a == 11 or a == 13 then\n\
    \      res = 1\n    end\n    local r = math.floor(n / 10)\n    if r ~= 0 then\n\
    \      res = res + fizz_buzz(r)\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg4p4hwae.lua:5:\
    \ attempt to call a nil value (global 'get_mod')\nstack traceback:\n\t/tmp/tmpg4p4hwae.lua:5:\
    \ in local 'candidate'\n\t/tmp/tmpg4p4hwae.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local str = tostring(i)\n            for j = 1, #str do\n            \
    \    if string.sub(str, j, j) == \"7\" then\n                    count = count\
    \ + 1\n                end\n            end\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpmqxzx8.lua:21:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpxpmqxzx8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local cnt\
    \ = 0\n    for i = 1, n - 1 do\n        if (i % 11 == 0 or i % 13 == 0) and string.find(tostring(i),\
    \ \"7\") then\n            cnt = cnt + 1\n        end\n    end\n    return cnt\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwa_6s4hl.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwa_6s4hl.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local result\
    \ = 0\n    for i = 1, n - 1 do\n        if i % 11 == 0 or i % 13 == 0 then\n \
    \           result = result + count_7(i)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm934dmrr.lua:6:\
    \ attempt to call a nil value (global 'count_7')\nstack traceback:\n\t/tmp/tmpm934dmrr.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpm934dmrr.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local s\
    \ = 0\n    for i = 1, n do\n        if i % 11 == 0 or i % 13 == 0 then\n     \
    \       local str = tostring(i)\n            for j = 1, str:len() do\n       \
    \         if str:sub(j, j) == '7' then\n                    s = s + 1\n      \
    \          end\n            end\n        end\n    end\n    return s\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphh445tsq.lua:21:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmphh445tsq.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 0
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal total\
    \ = 0\n\tfor i = 1, n-1 do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ s = i .. \"\"\n\t\t\tfor j = 1, #s do\n\t\t\t\tif s:sub(j, j) == \"7\" then\n\
    \t\t\t\t\ttotal = total + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.020 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local sevens\
    \ = 0\n  local i = 0\n  while i < n do\n    if (i % 11 == 0 or i % 13 == 0) and\
    \ string.find(tostring(i), \"7\") then\n      sevens = sevens + 1\n    end\n \
    \   i = i + 1\n  end\n  return sevens\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi4gs445g.lua:18:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpi4gs445g.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal sum\
    \ = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ x = i\n\t\t\twhile x > 0 do\n\t\t\t\tif x % 10 == 7 then\n\t\t\t\t\tsum = sum\
    \ + 1\n\t\t\t\tend\n\t\t\t\tx = math.floor(x / 10)\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5z9b0oxu.lua:22:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmp5z9b0oxu.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal c =\
    \ 0\n\tfor i = 1, n-1 do\n\t\tif (i % 11 == 0 or i % 13 == 0) and string.find(i,\
    \ \"7\") then\n\t\t\tc = c + 1\n\t\tend\n\tend\n\treturn c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpas6blppj.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpas6blppj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local total\
    \ = 0\n  for i = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and tostring(i):match(\"\
    7\") then\n      total = total + 1\n    end\n  end\n  return total\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7t10g84x.lua:16:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7t10g84x.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n    local count\
    \ = 0\n    local s = tostring(n)\n    local l = s:len()\n    for i = 1, l do\n\
    \        local c = s:sub(i, i)\n        if c == '7' then\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nwsxife.lua:19:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1nwsxife.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tif i % 11 == 0 or i % 13 == 0 then\n\t\t\tlocal\
    \ str = tostring(i)\n\t\t\tfor j = 1, #str do\n\t\t\t\tif str:sub(j, j) == \"\
    7\" then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\
    \treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = fizz_buzz\n    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78),\
    \ 2)\n    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100),\
    \ 3)\n    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeqydedwp.lua:21:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpeqydedwp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      count\
    \ = count + count_digits(i, 7)\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_au9hb_g.lua:6:\
    \ attempt to call a nil value (global 'count_digits')\nstack traceback:\n\t/tmp/tmp_au9hb_g.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmp_au9hb_g.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  assert(type(n)\
    \ == \"number\", \"fizz_buzz: n must be a number\")\n  local cnt = 0\n  for i\
    \ = 1, n - 1 do\n    if (i % 11 == 0 or i % 13 == 0) and tostring(i):match(\"\
    7\") then\n      cnt = cnt + 1\n    end\n  end\n  return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ub6407k.lua:17:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0ub6407k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local sum\
    \ = 0\n  local h = 0\n  local s = 0\n  local t = 0\n  local v = 0\n  local x =\
    \ 0\n  local p = 0\n  local m = 0\n  local l = 0\n  local c = 0\n  local d = 0\n\
    \  local i = 0\n  local e = 0\n  local r = 0\n  local o = 0\n  local u = 0\n \
    \ local z = 0\n  local w = 0\n  local b = 0\n  local a = 0\n  local g = 0\n  local\
    \ n = n\n  local j = 0\n  local k = 0\n  local y = 0\n  local q = 0\n  local f\
    \ = 0\n  for i = 1, n do\n    if (i % 13 == 0) then\n      if (i % 11 == 0) then\n\
    \        sum = sum + 2\n      else\n        sum = sum + 1\n      end\n    elseif\
    \ (i % 11 == 0) then\n      sum = sum + 1\n    end\n  end\n  for i = 1, n do\n\
    \    if (i % 13 == 0) then\n      if (i % 11 == 0) then\n        sum = sum + 2\n\
    \      else\n        sum = sum + 1\n      end\n    elseif (i % 11 == 0) then\n\
    \      sum = sum + 1\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamek8l3y.lua:58:\
    \ expected: 0, actual: 14\nstack traceback:\n\t/tmp/tmpamek8l3y.lua:58: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local count\
    \ = 0\n  for i = 1, n - 1 do\n    if i % 11 == 0 or i % 13 == 0 then\n      count\
    \ = count + i:tostring():match(\"7\") and 1 or 0\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = fizz_buzz\n\
    \    lu.assertEquals(candidate(50), 0)\n    lu.assertEquals(candidate(78), 2)\n\
    \    lu.assertEquals(candidate(79), 3)\n    lu.assertEquals(candidate(100), 3)\n\
    \    lu.assertEquals(candidate(200), 6)\n    lu.assertEquals(candidate(4000),\
    \ 192)\n    lu.assertEquals(candidate(10000), 639)\n    lu.assertEquals(candidate(100000),\
    \ 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdyu1orog.lua:6:\
    \ attempt to index a number value (local 'i')\nstack traceback:\n\t/tmp/tmpdyu1orog.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpdyu1orog.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n  local fizz\
    \ = 0\n  local buzz = 0\n  local fizz_buzz = 0\n  for i = 1, n do\n    if i %\
    \ 11 == 0 then\n      fizz = fizz + 1\n    end\n    if i % 13 == 0 then\n    \
    \  buzz = buzz + 1\n    end\n    if i % 11 == 0 and i % 13 == 0 then\n      fizz_buzz\
    \ = fizz_buzz + 1\n    end\n  end\n  return fizz, buzz, fizz_buzz\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjchn8m0.lua:23:\
    \ expected: 0, actual: 4\nstack traceback:\n\t/tmp/tmpgjchn8m0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: 1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n\tlocal count\
    \ = 0\n\tfor i = 1, n do\n\t\tlocal test = string.format(\"%d\", i)\n\t\tif (i\
    \ % 11 == 0 or i % 13 == 0) and string.find(test, \"7\") then\n\t\t\tcount = count\
    \ + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0r9skxl.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpy0r9skxl.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822278
- exit_code: -1
  program: "-- Return the number of times the digit 7 appears in integers less than\
    \ n which are divisible by 11 or 13.\nlocal function fizz_buzz(n)\n   if n <=\
    \ 0 then return 0 end\n   local count = 0\n   if n >= 11 then count = count +\
    \ fizz_buzz(n - 1) end\n   if n >= 13 then count = count + fizz_buzz(n - 1) end\n\
    \   local s = tostring(n)\n   for i = 1, #s do\n      if s:sub(i, i) == '7' then\
    \ count = count + 1 end\n   end\n   return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = fizz_buzz\n    lu.assertEquals(candidate(50),\
    \ 0)\n    lu.assertEquals(candidate(78), 2)\n    lu.assertEquals(candidate(79),\
    \ 3)\n    lu.assertEquals(candidate(100), 3)\n    lu.assertEquals(candidate(200),\
    \ 6)\n    lu.assertEquals(candidate(4000), 192)\n    lu.assertEquals(candidate(10000),\
    \ 639)\n    lu.assertEquals(candidate(100000), 8026)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659822283
