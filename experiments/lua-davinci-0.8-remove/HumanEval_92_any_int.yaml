name: HumanEval_92_any_int
language: lua
prompt: "-- Create a function that takes 3 numbers.\n-- Returns true if one of the\
  \ numbers is equal to the sum of the other two, and all numbers are integers.\n\
  -- Returns false in any other cases.\n-- Examples\nlocal function any_int(x, y,\
  \ z)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = any_int\n\
  \    lu.assertEquals(candidate(2, 3, 1), true)\n    lu.assertEquals(candidate(2.5,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(1.5, 5, 3.5), false)\n    lu.assertEquals(candidate(2,\
  \ 6, 2), false)\n    lu.assertEquals(candidate(4, 2, 2), true)\n    lu.assertEquals(candidate(2.2,\
  \ 2.2, 2.2), false)\n    lu.assertEquals(candidate(-4, 6, 2), true)\n    lu.assertEquals(candidate(2,\
  \ 1, 1), true)\n    lu.assertEquals(candidate(3, 4, 7), true)\n    lu.assertEquals(candidate(3.0,\
  \ 4, 7), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  return math.floor(x) == x and math.floor(y) == y and math.floor(z)\
    \ == z\nend", "    if type(x) == \"number\" and type(y) == \"number\" and type(z)\
    \ == \"number\" then\n        return x == y + z or y == x + z or z == x + y\n\
    \    end\n    return false\nend", "  if x + y == z or x + z == y or y + z == x\
    \ then\n    return true\n  else\n    return false\n  end\nend", "    if (type(x)\
    \ ~= \"number\" or\n        type(y) ~= \"number\" or\n        type(z) ~= \"number\"\
    ) then\n        return false\n    end\n    local int = { x, y, z }\n    table.sort(int)\n\
    \    local sum = int[1] + int[2]\n    if (sum == int[3]) then\n        return\
    \ true\n    end\n    return false\nend\nassert(any_int(2, 3, 1) == true)\nassert(any_int(2,\
    \ 2, 2) == true)\nassert(any_int(1, 1, 2) == true)\nassert(any_int(1, 2, 3) ==\
    \ false)\nassert(any_int(2, 3, 3) == false)\nassert(any_int(2, 1, 2) == false)\n\
    assert(any_int(1, 2, 2) == false)\nassert(any_int(2, 2, 1) == false)\nassert(any_int(2,\
    \ 1, 1) == false)\nassert(any_int(1, 1, 1) == false)\nassert(any_int(1, 1, 2.0)\
    \ == false)\nassert(any_int(1, 2.0, 2) == false)\nassert(any_int(1.0, 2, 2) ==\
    \ false)\nassert(any_int(1, 2, 3.0) == false)\nassert(any_int(1, 3.0, 2) == false)\n\
    assert(any_int(1.0, 3, 2) == false)\nassert(any_int(1, 2, \"3\") == false)\nassert(any_int(1,\
    \ \"3\", 2) == false)\nassert(any_int(\"1\", 2, 3) == false)\nassert(any_int(1,\
    \ 2, { 3 }) == false)\nassert(any_int(1, { 3 }, 2) == false)\nassert(any_int({\
    \ 1 }, 2, 3) == false)\nassert(any_int(1, 2, nil) == false)\nassert(any_int(1,\
    \ nil, 2) == false)\nassert(any_int(nil,", "  return math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z\nend", "    return (x == y + z) or (y == x + z)\
    \ or (z == x + y)\nend", "    if x == y + z or y == x + z or z == x + y then\n\
    \        return true\n    else\n        return false\n    end\nend", "  if x ==\
    \ math.floor(x) and y == math.floor(y) and z == math.floor(z) then\n    return\
    \ true\n  else\n    return false\n  end\nend", "    if (type(x) == \"number\"\
    \ and type(y) == \"number\" and type(z) == \"number\") then\n        if (math.floor(x)\
    \ == x and math.floor(y) == y and math.floor(z) == z) then\n            if (x\
    \ == y + z or y == x + z or z == x + y) then\n                return true\n  \
    \          end\n        end\n    end\n    return false\nend", "  if x % 1 == 0\
    \ and y % 1 == 0 and z % 1 == 0 then\n    if x + y == z or x + z == y or y + z\
    \ == x then\n      return true\n    else\n      return false\n    end\n  else\n\
    \    return false\n  end\nend\nprint(any_int(4, 2, 3))\nprint(any_int(5, 1, 5))\n\
    print(any_int(1, 3, 3))\nprint(any_int(3, 5, 2))\nprint(any_int(0.5, 5, 5))\n\
    print(any_int(10, 10, 2))\nprint(any_int(10, 10, 10))\nprint(any_int(10, 10, \"\
    10\"))\nprint(any_int(10, 10, 9.9))\nprint(any_int(10, \"10\", 9.9))\nprint(any_int(10,\
    \ 10, nil))\nprint(any_int(\"10\", \"10\", \"10\"))\nprint(any_int(nil, nil, nil))",
  "\t-- in case of one of the given number is zero\n\tif x == 0 or y == 0 or z ==\
    \ 0 then\n\t\treturn false\n\tend\n\t-- in case of one of the given number is\
    \ negative\n\tif x < 0 or y < 0 or z < 0 then\n\t\treturn false\n\tend\n\t-- check\
    \ if any of the given number is an integer\n\tif math.floor(x) ~= x or math.floor(y)\
    \ ~= y or math.floor(z) ~= z then\n\t\treturn false\n\tend\n\t-- check if any\
    \ of the given number is the sum of the other two\n\tif x == y + z or y == x +\
    \ z or z == x + y then\n\t\treturn true\n\tend\n\treturn false\nend", "   return\
    \ (x ~= math.floor(x)) or (y ~= math.floor(y)) or (z ~= math.floor(z))\nend",
  "  local a = math.floor(x)\n  local b = math.floor(y)\n  local c = math.floor(z)\n\
    \  return a + b == c or a + c == b or b + c == a\nend", "\tif( x % 1 == 0 and\
    \ y % 1 == 0 and z % 1 == 0 ) then\n\t\tif( x == y + z or y == x + z or z == x\
    \ + y ) then\n\t\t\treturn true\n\t\tend\n\tend\n\treturn false\nend", '  local
    sum = x + y + z', "    return (math.floor(x) == x) and (math.floor(y) == y) and\
    \ (math.floor(z) == z)\nend", "    if x == y + z or y == x + z or z == x + y then\n\
    \        return true\n    else\n        return false\n    end\nend", "    return\
    \ x + y == z or x + z == y or y + z == x\nend", "\tlocal b1 = x + y == z\n\tlocal\
    \ b2 = x + z == y\n\tlocal b3 = y + z == x\n\tlocal is_int = x % 1 == 0 and y\
    \ % 1 == 0 and z % 1 == 0\n\treturn (b1 or b2 or b3) and is_int\nend", "    return\
    \ x == y + z or y == x + z or z == x + y\nend", "    return\n    (x == (y + z))\
    \ or\n    (y == (x + z)) or\n    (z == (x + y)) and\n    (x == math.floor(x))\
    \ and\n    (y == math.floor(y)) and\n    (z == math.floor(z))\nend", "  local\
    \ function add(a, b)\n    return a + b\n  end\n  return ((x == add(y, z)) or (y\
    \ == add(x, z)) or (z == add(x, y))) and ((x % 1 == 0) and (y % 1 == 0) and (z\
    \ % 1 == 0))\nend", "\treturn x + y == z or x + z == y or y + z == x\nend", "\t\
    local x_is_int = x % 1 == 0\n\tlocal y_is_int = y % 1 == 0\n\tlocal z_is_int =\
    \ z % 1 == 0\n\treturn x_is_int and y_is_int and z_is_int\nend", "  if math.floor(x)\
    \ ~= x or math.floor(y) ~= y or math.floor(z) ~= z then\n    return false\n  end\n\
    \  if x == y + z or y == x + z or z == x + y then\n    return true\n  end\n  return\
    \ false\nend\nassert(any_int(1, 2, 3) == false)\nassert(any_int(1, 2, 4) == true)\n\
    assert(any_int(1, 2, 1.2) == false)\nassert(any_int(1, 2, '1') == false)\nassert(any_int(1,\
    \ 2, '1.2') == false)\nassert(any_int(1, 2, '1.0') == false)\nassert(any_int(1,\
    \ 2, '-1') == false)\nassert(any_int(1, 2, '-1.0') == false)\nassert(any_int(1,\
    \ 2, '-1.2') == false)\nassert(any_int(1, 2, 'hi') == false)\nassert(any_int(1,\
    \ 2, true) == false)\nassert(any_int(1, 2, false) == false)\nassert(any_int(1,\
    \ 2, {}) == false)\nassert(any_int(1, 2, {1, 2, 3}) == false)", "  return (x ==\
    \ y + z) or (y == x + z) or (z == x + y)\nend", "\t\nend", "    return x == y\
    \ + z or y == x + z or z == x + y\nend", "\treturn math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z\nend", "  if x == y + z or y == x + z or z == x\
    \ + y then\n    return true\n  else\n    return false\n  end\nend", "    return\
    \ (x == y + z) or (y == x + z) or (z == x + y)\nend", "    if not x or not y or\
    \ not z then\n        return false\n    end\n    local sum = 0\n    for i, v in\
    \ ipairs({x, y, z}) do\n        if math.floor(v) ~= v then\n            return\
    \ false\n        end\n        sum = sum + v\n    end\n    for i, v in ipairs({x,\
    \ y, z}) do\n        if v == sum - v then\n            return true\n        end\n\
    \    end\n    return false\nend", "    return x + y == z or x + z == y or y +\
    \ z == x\nend", "  if x == y + z or y == x + z or z == x + y then\n    return\
    \ true\n  else\n    return false\n  end\nend", "    if (x == y + z) and\n    \
    \    (x % 1 == 0) and\n        (y % 1 == 0) and\n        (z % 1 == 0) then\n \
    \       return true\n    elseif (y == x + z) and\n        (x % 1 == 0) and\n \
    \       (y % 1 == 0) and\n        (z % 1 == 0) then\n        return true\n   \
    \ elseif (z == x + y) and\n        (x % 1 == 0) and\n        (y % 1 == 0) and\n\
    \        (z % 1 == 0) then\n        return true\n    else\n        return false\n\
    \    end\nend", "  return (x == y + z) or (y == x + z) or (z == x + y)\nend",
  "  return (x + y == z) or (x + z == y) or (y + z == x)\nend", "    return (x + y\
    \ == z) or (x + z == y) or (y + z == x)\nend", "   return x == y + z or y == x\
    \ + z or z == x + y\nend", "    -- TODO\nend", "\treturn (x + y == z or x + z\
    \ == y or y + z == x) and (math.floor(x) == x) and (math.floor(y) == y) and (math.floor(z)\
    \ == z)\nend", "  return x == y + z or y == x + z or z == x + y\nend", "  if x+y\
    \ == z or x+z == y or y+z == x then\n    return true\n  else\n    return false\n\
    \  end\nend", "    -- return (x == y + z) or (y == x + z) or (z == x + y)\n  \
    \  return (x + y == z) or (x + z == y) or (y + z == x)\nend", "    return math.floor(x)\
    \ + math.floor(y) == math.floor(z) or math.floor(x) + math.floor(z) == math.floor(y)\
    \ or math.floor(y) + math.floor(z) == math.floor(x)\nend\nassert(any_int(1, 1,\
    \ 2) == true)\nassert(any_int(1, 2, 3) == false)\nassert(any_int(1, 2, 4) == false)\n\
    assert(any_int(6, 4, 2) == true)\nassert(any_int(5, 6, 1) == true)\nassert(any_int(1,\
    \ 6, 5) == true)\nassert(any_int(5, 1, 6) == true)\nassert(any_int(5, 6, 1.5)\
    \ == false)\nassert(any_int(5, 6, 1.5) == false)\nassert(any_int(5, 6, 1.5) ==\
    \ false)\nassert(any_int(1.5, 1.5, 3) == false)\nassert(any_int(1.5, 1.5, 2.5)\
    \ == false)\nassert(any_int(1.5, 2.5, 4) == false)\nassert(any_int(1.5, 2.5, 1)\
    \ == false)\nassert(any_int(1.5, 2.5, 1.5) == false)\nassert(any_int(2.5, 1.5,\
    \ 1.5) == false)\nassert(any_int(1.5, 1.5, 1.5) == false)\nassert(any_int(0, 0,\
    \ 0) == true)\nassert(any_int(0, 0, 1) == true)\nassert(any_int(0, 1, 0) == true)\n\
    assert(any_int(1, 0, 0) == true)\nassert(any_int(0, 1, 1) == true)\nassert(any_int(1,\
    \ 0, 1) == true)\nassert(any_int(1, 1, 0) == true)\nassert(any_int(0, 1, 2) ==\
    \ false)\nassert(", "   local is_int = function(x) return x == math.floor(x) end\n\
    \   return is_int(x) and is_int(y) and is_int(z)\nend", "    if type(x) ~= \"\
    number\" or type(y) ~= \"number\" or type(z) ~= \"number\" then\n        return\
    \ false\n    end\n    return x == y + z or y == x + z or z == x + y\nend", " \
    \ return x * y * z > 0 and (x + y == z or x + z == y or y + z == x)\nend", " \
    \   return math.floor(x) == x and math.floor(y) == y and math.floor(z) == z\n\
    end", "  local ints = {}\n  local sum = 0\n  if type(x) == \"number\" and type(y)\
    \ == \"number\" and type(z) == \"number\" then\n    ints = {x, y, z}\n    for\
    \ i = 1, 3 do\n      for j = 1, 3 do\n        if i ~= j then\n          sum =\
    \ sum + ints[j]\n        end\n      end\n      if sum == ints[i] then\n      \
    \  return true\n      end\n      sum = 0\n    end\n  end\n  return false\nend",
  "  return ((x + y == z) or (x + z == y) or (y + z == x)) and is_int(x) and is_int(y)\
    \ and is_int(z)\nend", "  local d = y + z\n  local e = x + z\n  local f = x +\
    \ y\n  if (x == d) or (y == e) or (z == f) then\n    return true\n  else\n   \
    \ return false\n  end\nend", "    return x == y + z or y == x + z or z == x +\
    \ y\nend", "   return ((x == y + z) or (y == x + z) or (z == x + y)) and (x%1\
    \ == 0) and (y%1 == 0) and (z%1 == 0)\nend", "  return x == y + z or y == x +\
    \ z or z == x + y\nend", "\treturn (x + y == z) or (x + z == y) or (y + z == x)\n\
    end", "    return x + y == z or x + z == y or y + z == x\nend", "    return is_int(x)\
    \ and is_int(y) and is_int(z)\nend", "  -- body\n  if (x + y == z) or (x + z ==\
    \ y) or (y + z == x) then\n    return true\n  else\n    return false\n  end\n\
    end", "\tif x == y + z or y == x + z or z == x + y then return true end\n\treturn\
    \ false\nend", "   -- TODO: implement any_int\nend", "    return (x + y == z)\
    \ or (x + z == y) or (y + z == x)\nend", "  if x == y + z or y == x + z or z ==\
    \ x + y then\n    return true\n  else\n    return false\n  end\nend\nprint(any_int(4,4,4))\n\
    print(any_int(4,4,2))\nprint(any_int(4,5,6))", "\treturn \n\t\tx == y + z or\n\
    \t\ty == x + z or\n\t\tz == x + y\nend", "  return (x == y + z) or (y == x + z)\
    \ or (z == x + y)\nend", "  return(x == y + z or y == x + z or z == x + y)\nend",
  "   return x + y == z or y + z == x or x + z == y\nend", "    return x+y == z or\
    \ x+z == y or y+z == x\nend\nassert(any_int(3, 2, 5))\nassert(any_int(3, 5, 2))\n\
    assert(any_int(2, 3, 5))\nassert(any_int(2, 5, 3))\nassert(any_int(5, 2, 3))\n\
    assert(any_int(5, 3, 2))\nassert(not any_int(2, 3, 4))\nassert(not any_int(2,\
    \ 4, 3))\nassert(not any_int(4, 2, 3))\nassert(not any_int(3, 2, 4))\nassert(not\
    \ any_int(3, 4, 2))\nassert(not any_int(4, 3, 2))\nassert(not any_int(2, 3, 5.5))\n\
    assert(not any_int(2, 5.5, 3))\nassert(not any_int(5.5, 2, 3))\nassert(not any_int(3,\
    \ 2, 5.5))\nassert(not any_int(3, 5.5, 2))\nassert(not any_int(5.5, 3, 2))\nassert(not\
    \ any_int(2, 5, 3.5))\nassert(not any_int(2, 3.5, 5))\nassert(not any_int(3.5,\
    \ 2, 5))\nassert(not any_int(5, 2, 3.5))\nassert(not any_int(5, 3.5, 2))\nassert(not\
    \ any_int(3.5, 5, 2))\nassert(not any_int(2.5, 3, 5))\nassert(not any_int(2.5,\
    \ 5, 3))\nassert(not any_int(3, 2.5, 5))\nassert(not any_int(3, 5, 2.5))\nassert(not\
    \ any_int(5, 2.5, 3))\nassert(not any_int(5, 3, 2.5))\nassert(not any_int(1.5,\
    \ 2.5, 4))\nassert(not any_int(2.5, 1.5, 4))\nassert(not", "  if x == y + z or\
    \ y == x + z or z == x + y then\n    return true\n  elseif x == 0 or y == 0 or\
    \ z == 0 then\n    return false\n  elseif x % 1 == 0 and y % 1 == 0 and z % 1\
    \ == 0 then\n    return true\n  else\n    return false\n  end\nend\nassert(any_int(5,\
    \ 2, 3))\nassert(any_int(2, 7, 3))\nassert(any_int(7, 3, 3))\nassert(not any_int(1.7,\
    \ 1.5, 1.7))\nassert(not any_int(1.5, 1.7, 1.7))\nassert(not any_int(1.7, 1.7,\
    \ 1.5))\nassert(not any_int(1.5, 1.5, 1.7))\nassert(not any_int(1.7, 1.5, 1.5))\n\
    assert(not any_int(3, 4, 1.5))\nassert(not any_int(3, 4, -1.5))\nassert(not any_int(3,\
    \ -4, 1.5))\nassert(not any_int(3, -4, -1.5))\nassert(not any_int(-3, 4, 1.5))\n\
    assert(not any_int(-3, 4, -1.5))\nassert(not any_int(-3, -4, 1.5))\nassert(not\
    \ any_int(-3, -4, -1.5))\nassert(not any_int(3, 0, 0))\nassert(not any_int(0,\
    \ 3, 0))\nassert(not any_int(0, 0, 3))\nassert(not any_int(0, 0, 0))\nassert(not\
    \ any_int(0, 0, 1.5))\nassert(not any_int(0, 1.5, 0))\nassert(not any_int(1.5,\
    \ 0, 0))\nassert(not any_int(0, 1.5, 1.5))\nassert(not any_int(1.5, 0, 1.5))\n\
    assert(not any_int(1.5, 1.", "    return ((x + y == z) or (x + z == y) or (y +\
    \ z == x)) and (math.floor(x) == x) and (math.floor(y) == y) and (math.floor(z)\
    \ == z)\nend\nassert.equal(true, any_int(1, 1, 2))\nassert.equal(true, any_int(1,\
    \ 2, 1))\nassert.equal(true, any_int(2, 1, 1))\nassert.equal(false, any_int(1,\
    \ 1, 1))\nassert.equal(false, any_int(1, 1, 0))\nassert.equal(false, any_int(1,\
    \ 0, 1))\nassert.equal(false, any_int(0, 1, 1))\nassert.equal(false, any_int(1,\
    \ 1, -1))\nassert.equal(false, any_int(1, -1, 1))\nassert.equal(false, any_int(-1,\
    \ 1, 1))\nassert.equal(false, any_int(1, 1, 0.5))\nassert.equal(false, any_int(1,\
    \ 0.5, 1))\nassert.equal(false, any_int(0.5, 1, 1))", "    local x = 3\n    local\
    \ y = 10\n    local z = 7\n    local sum = x + y + z\n    return any_int(x, y,\
    \ z) == true\nend", "  return x == y + z or y == x + z or z == x + y\nend", " \
    \ return (x == y + z) or (y == x + z) or (z == x + y)\nend", "    local x = math.floor(x)\n\
    \    local y = math.floor(y)\n    local z = math.floor(z)\n    if x + y == z or\
    \ x + z == y or y + z == x then\n        return true\n    else\n        return\
    \ false\n    end\nend\nprint(any_int(1, 2, 3))\nprint(any_int(5, 1, 4))\nprint(any_int(1,\
    \ 5, 4))\nprint(any_int(5, 4, 1))\nprint(any_int(5, 0, 4))\nprint(any_int(1, 5,\
    \ 4.0))\nprint(any_int(5, 1, 4.5))\nprint(any_int(1, 5, 4.5))\nprint(any_int(5,\
    \ 4, 1.5))\nprint(any_int(5, 0, 4.5))", "   if (x == y + z) and (y == x + z) and\
    \ (z == x + y) then\n      return true\n   else\n      return false\n   end\n\
    end", "    return (x == y + z) or (y == x + z) or (z == x + y)\nend", "\treturn\
    \ (x+y==z or x+z==y or y+z==x) and (x%1==0 and y%1==0 and z%1==0)\nend\nassert(any_int(0,\
    \ 1, 1) == true)\nassert(any_int(1, 2, 4) == false)", "    return not (x == 0\
    \ or y == 0 or z == 0)\nend", "  local a, b, c = {x, y, z}\n  for i = 1, 3 do\n\
    \    for j = 1, 3 do\n      for k = 1, 3 do\n        if a[i] == a[j] + a[k] and\
    \ a[i] % 1 == 0 and a[j] % 1 == 0 and a[k] % 1 == 0 then\n          return true\n\
    \        end\n      end\n    end\n  end\n  return false\nend", "\tx = tonumber(x)\n\
    \ty = tonumber(y)\n\tz = tonumber(z)\n\tif (x + y == z) or (x + z == y) or (y\
    \ + z == x) then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend", "  if\
    \ x == y + z then\n    return true\n  elseif y == x + z then\n    return true\n\
    \  elseif z == x + y then\n    return true\n  else\n    return false\n  end\n\
    end", "  return ((x == y + z) or (y == x + z) or (z == x + y)) and ((type(x) ==\
    \ \"number\") and (type(y) == \"number\") and (type(z) == \"number\"))\nend",
  "    return x + y == z or x + z == y or y + z == x\nend", "  if type(x) ~= \"number\"\
    \ or type(y) ~= \"number\" or type(z) ~= \"number\" then\n    return false\n \
    \ end\n  if math.floor(x) ~= x or math.floor(y) ~= y or math.floor(z) ~= z then\n\
    \    return false\n  end\n  if x == y + z or y == x + z or z == x + y then\n \
    \   return true\n  end\n  return false\nend", "  -- the sum of two numbers should\
    \ be either an integer, or the nearest integer\n  return math.modf(x + y) == math.modf(z)\
    \ or math.modf(x + z) == math.modf(y) or math.modf(y + z) == math.modf(x)\nend",
  "\t-- YOUR CODE GOES HERE\n\t\n\t-- If x is an integer\n\tif x == math.floor(x)\
    \ then\n\t\t-- Check if x is equal to the sum of y and z\n\t\tif x == y + z then\n\
    \t\t\t-- If it is, return true\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\t-- If\
    \ y is an integer\n\tif y == math.floor(y) then\n\t\t-- Check if y is equal to\
    \ the sum of x and z\n\t\tif y == x + z then\n\t\t\t-- If it is, return true\n\
    \t\t\treturn true\n\t\tend\n\tend\n\t\n\t-- If z is an integer\n\tif z == math.floor(z)\
    \ then\n\t\t-- Check if z is equal to the sum of x and y\n\t\tif z == x + y then\n\
    \t\t\t-- If it is, return true\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\t-- If\
    \ none of the above are true, return false\n\treturn false\nend", "    return\
    \ (x + y == z or x + z == y or y + z == x) and math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z\nend", "  return x + y == z or x + z == y or y +\
    \ z == x\nend", "\tlocal function test(x, y, z)\n\t\tif (x == y + z) or (y ==\
    \ x + z) or (z == x + y) then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\
    \t\tend\n\tend\n\tif (math.floor(x) == x) and (math.floor(y) == y) and (math.floor(z)\
    \ == z) then\n\t\treturn test(x, y, z)\n\telse\n\t\treturn false\n\tend\nend",
  "    return (x == y + z) or (y == x + z) or (z == x + y)\nend", "  -- TODO: Add\
    \ your code here\n  return x + y == z or x + z == y or y + z == x\nend", "  local\
    \ parts = {x, y, z}\n  table.sort(parts)\n  return (parts[1] + parts[2] == parts[3])\
    \ and (parts[1] % 1 == 0) and (parts[2] % 1 == 0) and (parts[3] % 1 == 0)\nend",
  "  return math.floor(x) == x and math.floor(y) == y and math.floor(z) == z\nend",
  "    return x == y + z or y == x + z or z == x + y\nend", "    return x + y == z\
    \ or x + z == y or y + z == x\nend", "    return (x + y == z) or (x + z == y)\
    \ or (y + z == x)\nend", "    --if x + y == z then\n      --  return true\n  \
    \  --elseif x + z == y then\n      --  return true\n    --elseif y + z == x then\n\
    \      --  return true\n    --else\n      --  return false\n    --end\n    if\
    \ x + y == z and x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n        return\
    \ true\n    elseif x + z == y and x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n\
    \        return true\n    elseif y + z == x and x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0 then\n        return true\n    else\n        return false\n    end\n\
    end", "    local function is_int(n)\n        return n % 1 == 0\n    end\n    return\
    \ (x + y == z or x + z == y or y + z == x) and is_int(x) and is_int(y) and is_int(z)\n\
    end\nprint(any_int(1, 2, 3)) --> false\nprint(any_int(1, 2, 4)) --> true\nprint(any_int(1,\
    \ 2, 5)) --> false\nprint(any_int(1, 3, 5)) --> true\nprint(any_int(1, 1, 1))\
    \ --> true\nprint(any_int(1, 2, 3.2)) --> false\nprint(any_int(1, 2, 3.1)) -->\
    \ false\nprint(any_int(1, 2, 2.9)) --> false\nprint(any_int(1, 2, 4.0)) --> true\n\
    print(any_int(1, 2, 4.1)) --> false\nprint(any_int(1, 2, 3.8)) --> false\nprint(any_int(1,\
    \ 2, 2.1)) --> false\nprint(any_int(1, 2, 2.2)) --> false\nprint(any_int(1, 2,\
    \ 2.3)) --> false", "   return x == y + z or y == x + z or z == x + y and math.type(x)\
    \ == \"integer\" and math.type(y) == \"integer\" and math.type(z) == \"integer\"\
    \nend\nassert(any_int(3, 4, 7) == true)\nassert(any_int(3, 4, 6) == false)\nassert(any_int(3,\
    \ 3, 3) == true)\nassert(any_int(3, 4, 5.0) == false)\nassert(any_int(3, 4, \"\
    5\") == false)", "    local numbers = {x, y, z}\n    local prev = 0\n    local\
    \ sum = 0\n    for _,number in pairs(numbers) do\n        sum = sum + number\n\
    \        if number == prev then\n            return false\n        end\n     \
    \   prev = number\n    end\n    return x == sum - (x + y) or y == sum - (x + y)\
    \ or z == sum - (x + y)\nend\nassert(any_int(1, 2, 3) == false)\nassert(any_int(1,\
    \ 1, 3) == false)\nassert(any_int(1, 2, 2) == true)\nassert(any_int(2, 3, 5) ==\
    \ true)\nassert(any_int(5, 7, 2) == true)\nassert(any_int(1, 2, 4) == false)\n\
    assert(any_int(2, 4, 2) == true)", "  return (x == y + z) or (y == x + z) or (z\
    \ == x + y)\nend", "  return ((x + y == z) or (x + z == y) or (y + z == x)) and\
    \ (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0)\nend", "  return (x == y + z)\
    \ or (y == x + z) or (z == x + y)\nend", "  return isinteger(x) and isinteger(y)\
    \ and isinteger(z)\nend", "\tif x == (y + z) then\n\t\treturn true\n\telseif y\
    \ == (x + z) then\n\t\treturn true\n\telseif z == (x + y) then\n\t\treturn true\n\
    \telse\n\t\treturn false\n\tend\nend", "\treturn (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0) and (x + y == z or x + z == y or y + z == x)\nend", "  -- If x is\
    \ the sum of y and z\n  if x == y + z then\n    -- Then return true\n    return\
    \ true\n  -- If y is the sum of x and z\n  elseif y == x + z then\n    -- Then\
    \ return true\n    return true\n  -- If z is the sum of x and y\n  elseif z ==\
    \ x + y then\n    -- Then return true\n    return true\n  -- Otherwise\n  else\n\
    \    -- Return false\n    return false\n  end\nend", "  local xy = x + y\n  local\
    \ xz = x + z\n  local yz = y + z\n  return (x == xy or x == xz or x == yz) and\
    \ (y == xy or y == xz or y == yz) and (z == xy or z == xz or z == yz)\nend", "\t\
    return (x==y+z or y==x+z or z==x+y) and (x==math.floor(x) and y==math.floor(y)\
    \ and z==math.floor(z))\nend\nassert(any_int(1, 1, 2))\nassert(any_int(1, 2, 3))\n\
    assert(any_int(2, 3, 5))\nassert(any_int(4, 7, -1))\nassert(not any_int(1.5, 2,\
    \ 3))\nassert(not any_int(2, 3, 5.5))\nassert(not any_int(4, 7, -1.5))", "  if\
    \ (x + y == z) or (x + z == y) or (y + z == x) then\n    return true\n  else\n\
    \    return false\n  end\nend", "\treturn is_int(x) and is_int(y) and is_int(z)\n\
    end", "  local x, y, z = math.floor(x), math.floor(y), math.floor(z)\n  if x ==\
    \ y + z or y == x + z or z == x + y then\n    return true\n  else\n    return\
    \ false\n  end\nend", "    if type(x) == \"number\" and type(y) == \"number\"\
    \ and type(z) == \"number\" then\n        return (x == y + z) or (y == x + z)\
    \ or (z == x + y)\n    else\n        return false\n    end\nend", "  return (x\
    \ % 1 == 0) and (y % 1 == 0) and (z % 1 == 0)\nend", "   return x == y + z or\
    \ y == x + z or z == x + y\nend", "\treturn (x == y + z) or (y == x + z) or (z\
    \ == x + y)\nend", "    return type(x) == \"number\" and\n            x % 1 ==\
    \ 0 and\n            type(y) == \"number\" and\n            y % 1 == 0 and\n \
    \           type(z) == \"number\" and\n            z % 1 == 0\nend", "    return\
    \ ((x == y + z) or (y == x + z) or (z == x + y)) and (x % 1 == 0) and (y % 1 ==\
    \ 0) and (z % 1 == 0)\nend", "    return (x + y == z or x + z == y or y + z ==\
    \ x) and math.floor(x) == x and math.floor(y) == y and math.floor(z) == z\nend",
  "  return ((x + y == z) or (x + z == y) or (y + z == x)) and (x % 1 == 0) and (y\
    \ % 1 == 0) and (z % 1 == 0)\nend\nassert(any_int(2, 3, 5))\nassert(any_int(2,\
    \ 2, 4))\nassert(not any_int(2, 2, 3))\nassert(not any_int(2, 2, 2))\nassert(not\
    \ any_int(2, 5, 6))\nassert(not any_int(2.5, 5, 6))\nassert(not any_int(2, 5.5,\
    \ 6))\nassert(not any_int(2, 5, 6.5))", "  if x == y + z then\n    return true\n\
    \  elseif y == x + z then\n    return true\n  elseif z == x + y then\n    return\
    \ true\n  else\n    return false\n  end\nend", "  if x + y == z or x + z == y\
    \ or y + z == x then\n    return true\n  else\n    return false\n  end\nend",
  "    return (x % 1 == 0) and (y % 1 == 0) and (z % 1 == 0)\nend", "  if(type(x)\
    \ == \"number\" and type(y) == \"number\" and type(z) == \"number\") then\n  \
    \  if(x == y + z or y == x + z or z == x + y) then\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend", "  -- return\
    \ x + y == z or x + z == y or y + z == x\n  return x == y + z or y == x + z or\
    \ z == x + y\nend", "\treturn (x + y == z) or (x + z == y) or (y + z == x)\nend",
  "    local sum = x + y + z\n    if x == y and y == z then\n        return false\n\
    \    elseif x == sum - y - z or y == sum - x - z or z == sum - x - y then\n  \
    \      return true\n    else\n        return false\n    end\nend", "    if (x\
    \ + y == z) or (x + z == y) or (y + z == x) then\n        return true\n    else\n\
    \        return false\n    end\nend", "  -- sum?\n  if x + y == z or x + z ==\
    \ y or y + z == x then\n    -- integers?\n    if math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z then\n      return true\n    end\n  end\n  return\
    \ false\nend", "  return (x + y == z or x + z == y or y + z == x) and (x % 1 ==\
    \ 0 and y % 1 == 0 and z % 1 == 0)\nend", "  return math.floor(x) == x and math.floor(y)\
    \ == y and math.floor(z) == z\nend", "  if not (x % 1 == 0 and y % 1 == 0 and\
    \ z % 1 == 0) then\n    return false\n  end\n  return (x == y + z) or (y == x\
    \ + z) or (z == x + y)\nend", "  -- body\n  if x == y + z or y == x + z or z ==\
    \ x + y then\n    return true\n  else\n    return false\n  end\nend", "  if(math.floor(x)==x\
    \ and math.floor(y)==y and math.floor(z)==z) then\n    return true\n  else\n \
    \   return false\n  end\nend", "  return x == y + z or y == x + z or z == x +\
    \ y\nend", "  return (x + y == z) or (x + z == y) or (y + z == x)\nend", "   \
    \ return (x + y == z) or (x + z == y) or (y + z == x)\nend", "    -- First we\
    \ need to test if all three numbers are integers\n    if (x == math.floor(x))\
    \ and (y == math.floor(y)) and (z == math.floor(z)) then\n        -- Test if any\
    \ two numbers are equal to the third\n        if (x + y == z) or (x + z == y)\
    \ or (y + z == x) then\n            return true\n        else\n            return\
    \ false\n        end\n    else\n        return false\n    end\nend", "  if (x\
    \ + y == z) or (x + z == y) or (y + z == x) then\n    return true\n  else\n  \
    \  return false\n  end\nend", "    return is_int(x) and is_int(y) and is_int(z)\n\
    end", "  return x == y + z or y == x + z or z == x + y\nend\nprint(any_int(3,\
    \ 5, 7)) -- false\nprint(any_int(3, 5, 6)) -- true\nprint(any_int(3, 7, 4)) --\
    \ true\nprint(any_int(3, 3, 3)) -- true", "    local sum = x + y + z\n    if not\
    \ (x == math.floor(x) and y == math.floor(y) and z == math.floor(z)) then\n  \
    \      return false\n    end\n    if (sum - x == x) or (sum - y == y) or (sum\
    \ - z == z) then\n        return true\n    end\n    return false\nend", "    return\
    \ x == y + z or y == x + z or z == x + y\nend", "    local t = {x, y, z}\n   \
    \ local sum = x + y + z\n    for i, v in ipairs(t) do\n        local tmp = sum\
    \ - v\n        for j, v in ipairs(t) do\n            if v == tmp then\n      \
    \          return true\n            end\n        end\n    end\n    return false\n\
    end", "    if math.floor(x) == x and math.floor(y) == y and math.floor(z) == z\
    \ then\n        if x + y == z or x + z == y or y + z == x then\n            return\
    \ true\n        end\n    end\n    return false\nend", "    return (x == y + z)\
    \ or (y == x + z) or (z == x + y)\nend", "\treturn (x + y == z) or (x + z == y)\
    \ or (y + z == x)\nend", "  if (x + y == z) then\n    return true\n  elseif (x\
    \ + z == y) then\n    return true\n  elseif (y + z == x) then\n    return true\n\
    \  else\n    return false\n  end\nend", "    return x == y + z or y == x + z or\
    \ z == x + y\nend", "  if type(x) == \"number\" and type(y) == \"number\" and\
    \ type(z) == \"number\" and x % 1 == 0 and y % 1 == 0 and z % 1 == 0 then\n  \
    \  if x == y + z or y == x + z or z == x + y then\n      return true\n    else\n\
    \      return false\n    end\n  else\n    return false\n  end\nend", "    -- BODY\n\
    end", "\tlocal t = {}\n\tt[x + y] = true\n\tt[x + z] = true\n\tt[y + z] = true\n\
    \treturn t[x] or t[y] or t[z]\nend", "  -- body\n  return x == y + z or y == x\
    \ + z or z == x + y\nend", "  return x % 1 == 0 and y % 1 == 0 and z % 1 == 0\n\
    end", "    if (x ~= math.floor(x)) or (y ~= math.floor(y)) or (z ~= math.floor(z))\
    \ then\n        return false\n    end\n    return ((x + y == z) or (x + z == y)\
    \ or (y + z == x))\nend", "    local function _is_int(n)\n        return math.floor(n)\
    \ == n\n    end\n    return _is_int(x) and _is_int(y) and _is_int(z) and (x +\
    \ y == z or x + z == y or y + z == x)\nend\nprint(any_int(1, 2, 3))\nprint(any_int(1,\
    \ 2, \"p\"))\nprint(any_int(1, \"p\", 3))\nprint(any_int(\"p\", 2, 3))\nprint(any_int(1,\
    \ 2, 4))\nprint(any_int(1, 2, 2.5))\nprint(any_int(1, 2, 2.3))\nprint(any_int(1,\
    \ 2, 2.9999))", "  return x + y == z or x + z == y or y + z == x\nend", "    if\
    \ x == y + z or y == x + z or z == x + y then\n        return true\n    else\n\
    \        return false\n    end\nend", "  local table = {x, y, z}\n  local count\
    \ = 0\n  for i = 1, #table do\n    if (math.ceil(table[i]) == table[i]) then\n\
    \      count = count + 1\n    end\n  end\n  if (count == 3) then\n    return true\n\
    \  else\n    return false\n  end\nend", "  -- Body\n  return false\nend", "\t\
    if type(x) == \"number\" and type(y) == \"number\" and type(z) == \"number\" then\n\
    \t\tif x == y + z or y == x + z or z == x + y then\n\t\t\treturn true\n\t\telse\n\
    \t\t\treturn false\n\t\tend\n\telse\n\t\treturn false\n\tend\nend", "    return\
    \ (x + y == z) or (x + z == y) or (y + z == x)\nend", "  local sum = x + y + z\n\
    \  if (x == sum / 2 or y == sum / 2 or z == sum / 2) and (x == math.floor(x) and\
    \ y == math.floor(y) and z == math.floor(z)) then\n    return true\n  else\n \
    \   return false\n  end\nend", "  if type(x) == \"number\" and type(y) == \"number\"\
    \ and type(z) == \"number\" then\n    return x == y + z or y == x + z or z ==\
    \ x + y\n  else\n    return false\n  end\nend", "    if x + y == z or x + z ==\
    \ y or y + z == x then\n        return true\n    else\n        return false\n\
    \    end\nend", '    local sum = x + y + z', "  return is_integer(x) and is_integer(y)\
    \ and is_integer(z)\nend", "    -- your code here\nend", "    return (x + y ==\
    \ z or x + z == y or y + z == x) and x % 1 == 0 and y % 1 == 0 and z % 1 == 0\n\
    end", "  if type(x) ~= \"number\" or type(y) ~= \"number\" or type(z) ~= \"number\"\
    \ then\n    return false\n  end\n  if math.floor(x) ~= x or math.floor(y) ~= y\
    \ or math.floor(z) ~= z then\n    return false\n  end\n  if x == y + z or y ==\
    \ x + z or z == x + y then\n    return true\n  end\n  return false\nend", "  local\
    \ x_y_z = x + y + z\n  return x == x_y_z - x or y == x_y_z - y or z == x_y_z -\
    \ z\nend", "   return x == y + z or y == x + z or z == x + y\nend", "    return\
    \ true\nend", "    local target_sum = x + y\n    return target_sum == z or target_sum\
    \ == z + z\nend", "    return x + y == z or x + z == y or y + z == x\nend", " \
    \ return (x + y == z) or (x + z == y) or (y + z == x)\nend\nprint(any_int(3, 4,\
    \ 7)) --> true\nprint(any_int(3, 4, 8)) --> false\nprint(any_int(3, 4, 3)) -->\
    \ false", "    return x + y == z or x + z == y or y + z == x\nend", "    if x\
    \ < 0 then x = -x end\n    if y < 0 then y = -y end\n    if z < 0 then z = -z\
    \ end\n    if x ~= math.floor(x) then return false end\n    if y ~= math.floor(y)\
    \ then return false end\n    if z ~= math.floor(z) then return false end\n   \
    \ return true\nend", "    if x ~= math.floor(x) or y ~= math.floor(y) or z ~=\
    \ math.floor(z) then\n        return false\n    end\n    if x + y == z or x +\
    \ z == y or y + z == x then\n        return true\n    end\n    return false\n\
    end\nprint(any_int(1, 2, 3))\nprint(any_int(2, 3, 4))\nprint(any_int(5, 5, 10))\n\
    print(any_int(5, 6, 10))\nprint(any_int(1.5, 2, 3))\nprint(any_int(2, 3, 4.5))\n\
    print(any_int(5, 5.5, 10))\nprint(any_int(5, 6.5, 10))", "  if type(x) == \"number\"\
    \ and type(y) == \"number\" and type(z) == \"number\" and\n     x % 1 == 0 and\
    \ y % 1 == 0 and z % 1 == 0 then\n    return true\n  else\n    return false\n\
    \  end\nend", "  return (x + y == z or x + z == y or y + z == x) and math.floor(x)\
    \ == x and math.floor(y) == y and math.floor(z) == z\nend", "\t-- body\n\treturn\
    \ (x % 1 == 0 and y % 1 == 0 and z % 1 == 0)\nend", "  local sum = x + y + z\n\
    \  if sum % 2 == 0 then\n    local half_sum = sum / 2\n    return (x == half_sum)\
    \ or (y == half_sum) or (z == half_sum)\n  end\n  return false\nend", "  -- body\n\
    \  return math.type(x) == \"integer\" and math.type(y) == \"integer\" and math.type(z)\
    \ == \"integer\"\nend", "\treturn math.floor(x) == x and math.floor(y) == y and\
    \ math.floor(z) == z\nend", "  return x == y + z or y == x + z or z == x + y\n\
    end\nprint(\"Problem 6\")\nprint(any_int(3, 7, 10)) --> true\nprint(any_int(3,\
    \ 7, 9)) --> false\nprint(any_int(3, 7, 7)) --> false\nprint(any_int(3, 7, 8))\
    \ --> true\nprint(any_int(3, 7, 11)) --> true\nprint(any_int(3, 7, 12)) --> false\n\
    print(any_int(3, 7, \"5\")) --> false\nprint(any_int(3, 7, true)) --> false\n\
    print(any_int(3, 7, \"true\")) --> false\nprint(any_int(3, 7, \"bogus\")) -->\
    \ false\nprint(any_int(3, 7, nil)) --> false\nprint()", "    -- your code here\n\
    end", "  return (x + y == z) or (x + z == y) or (y + z == x)\nend", "    return\
    \ (x+y == z or x+z == y or y+z == x) and (x == math.floor(x) and y == math.floor(y)\
    \ and z == math.floor(z))\nend", "  if ((x + y == z) or (x + z == y) or (y + z\
    \ == x)) and (math.type(x) == \"integer\") and (math.type(y) == \"integer\") and\
    \ (math.type(z) == \"integer\") then\n    return true\n  else\n    return false\n\
    \  end\nend\nprint(any_int(2, 2, 4)) -- true\nprint(any_int(2, 2, 3)) -- false\n\
    print(any_int(2, 2, 2)) -- false\nprint(any_int(2, 1, 1)) -- true\nprint(any_int(2,\
    \ 5, 3)) -- false\nprint(any_int(2, 5, 8)) -- true\nprint(any_int(2, 5, \"6\"\
    )) -- false\nprint(any_int(2, \"5\", 6)) -- false\nprint(any_int(\"5\", 2, 6))\
    \ -- false\nprint(any_int(2.5, 5, 6)) -- false\nprint(any_int(2.5, 5.5, 6.5))\
    \ -- false\nprint(any_int(2.4, 5.4, 6.4)) -- false", "\treturn (x == y + z) or\
    \ (y == x + z) or (z == x + y)\nend", "    return true\nend", "    local sum =\
    \ x + y + z\n    if x == sum or y == sum or z == sum then\n        return true\n\
    \    else\n        return false\n    end\nend", "    return x+y == z or x+z ==\
    \ y or y+z == x\nend", "  if x + y == z or x + z == y or y + z == x then\n   \
    \ return true\n  else\n    return false\n  end\nend", "  local sum = x + y + z\n\
    \  if math.fmod(sum, 1) == 0 then\n    if x == sum - y - z or y == sum - x - z\
    \ or z == sum - x - y then\n      return true\n    end\n  end\n  return false\n\
    end", "\treturn (x == y + z) or (y == x + z) or (z == x + y)\nend", "    return\
    \ math.ceil(x) == x and math.ceil(y) == y and math.ceil(z) == z\nend", "\treturn\
    \ (x+y==z or x+z==y or y+z==x) and\n\t(math.floor(x)==x and math.floor(y)==y and\
    \ math.floor(z)==z)\nend", "\tif (x == y + z) or (y == x + z) or (z == x + y)\
    \ then\n\t\treturn true\n\telse\n\t\treturn false\n\tend\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
