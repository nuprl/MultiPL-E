name: HumanEval_97_multiply
language: lua
prompt: "-- Complete the function that takes two integers and returns \n-- the product\
  \ of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\nlocal\
  \ function multiply(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
  \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
  \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
  \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
  \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
  \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local str_a = tostring(a)\n    local str_b = tostring(b)\n    local\
    \ a_int = tonumber(str_a:sub(-1))\n    local b_int = tonumber(str_b:sub(-1))\n\
    \    return a_int * b_int\nend", "  return (a % 10) * (b % 10)\nend", "  local\
    \ d = {}\n  for i = 0, 9 do\n    d[i] = { i * 2, i * 3, i * 4, i * 5, i * 6, i\
    \ * 7, i * 8, i * 9 }\n  end\n  local m = d[a % 10][b % 10]\n  return m\nend",
  "    return a % 10 * b % 10\nend", "  local digits = { 0, 1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9 }\n  return digits[(a % 10) + 1] * digits[(b % 10) + 1]\nend", "  return (a\
    \ % 10) * (b % 10)\nend", "  a = tostring(a)\n  b = tostring(b)\n  return tonumber(a:sub(-1,\
    \ -1)) * tonumber(b:sub(-1, -1))\nend", "    local ans = a * b\n    local str\
    \ = tostring(ans)\n    return tonumber(str:sub(-1, -1))\nend", "  local function\
    \ dig(a)\n    local str = tostring(a)\n    return tonumber(str:sub(-1, -1))\n\
    \  end\n  return dig(a) * dig(b)\nend", "  local l = {{'0','0'},{'0','1'},{'0','2'},{'0','3'},{'0','4'},{'0','5'},{'0','6'},{'0','7'},{'0','8'},{'0','9'},\n\
    \              {'1','0'},{'1','1'},{'1','2'},{'1','3'},{'1','4'},{'1','5'},{'1','6'},{'1','7'},{'1','8'},{'1','9'},\n\
    \              {'2','0'},{'2','1'},{'2','2'},{'2','3'},{'2','4'},{'2','5'},{'2','6'},{'2','7'},{'2','8'},{'2','9'},\n\
    \              {'3','0'},{'3','1'},{'3','2'},{'3','3'},{'3','4'},{'3','5'},{'3','6'},{'3','7'},{'3','8'},{'3','9'},\n\
    \              {'4','0'},{'4','1'},{'4','2'},{'4','3'},{'4','4'},{'4','5'},{'4','6'},{'4','7'},{'4','8'},{'4','9'},\n\
    \              {'5','0'},{'5','1'},{'5','2'},{'5','3'},{'5','4'},{'5','5'},{'5','6'},{'5','7'},{'5','8'},{'5','9'},\n\
    \              {'6','0'},{'6','1'},{'6','2'},{'6','3'},{'6','4'},{'6','5'},{'6','6'},{'6','7'},{'6','8'},{'6','9'},\n\
    \              {'7", "  -- my code here\nend", "  return (a%10)*(b%10)\nend",
  "  return tonumber(tostring(a):match(\"(%d)$\")) * tonumber(tostring(b):match(\"\
    (%d)$\"))\nend", "    a = a%10\n    b = b%10\n    return a*b\nend", "    return\
    \ tonumber(string.sub(tostring(a), -1)) * tonumber(string.sub(tostring(b), -1))\n\
    end", "    -- Compute the product of the last digits of a and b.\n    local result\
    \ = 1\n    while (a > 0) do\n        local digit = a % 10\n        result = result\
    \ * digit\n        a = math.floor(a / 10)\n    end\n    while (b > 0) do\n   \
    \     local digit = b % 10\n        result = result * digit\n        b = math.floor(b\
    \ / 10)\n    end\n    return result\nend", "\tlocal a1, a2 = a:match('(%d)(%d)')\n\
    \tlocal b1, b2 = b:match('(%d)(%d)')\n\treturn a1 * b1 + a2 * b2\nend", "\treturn\
    \ math.abs(a) % 10 * math.abs(b) % 10\nend", "\treturn tonumber(string.sub(tostring(a),\
    \ -1)) * tonumber(string.sub(tostring(b), -1))\nend", "  return (a % 10) * (b\
    \ % 10)\nend", "    local _a = a % 10\n    local _b = b % 10\n    return _a *\
    \ _b\nend", "  -- your code\nend", "\treturn(math.floor(a/10)*math.floor(b/10)\
    \ + a%10*b%10)\nend", "    local a = string.sub(tostring(a), -1, -1)\n    local\
    \ b = string.sub(tostring(b), -1, -1)\n    return tonumber(a) * tonumber(b)\n\
    end", "  local aa = {};\n  local bb = {};\n  while a ~= 0 do\n    table.insert(aa,\
    \ a % 10);\n    a = math.floor(a / 10);\n  end\n  while b ~= 0 do\n    table.insert(bb,\
    \ b % 10);\n    b = math.floor(b / 10);\n  end\n  local result = 0;\n  for i =\
    \ 1, #aa do\n    for j = 1, #bb do\n      result = result + aa[i] * bb[j];\n \
    \   end\n  end\n  return result;\nend", "    -- my solution\n    -- print(a %\
    \ 10 * b % 10)\n    -- best practice in code wars\n    return (a % 10) * (b %\
    \ 10)\nend", "    return (a%10)*(b%10)\nend", "    return (a % 10) * (b % 10)\n\
    end", "  return tonumber(string.sub(tostring(a), -1)) * tonumber(string.sub(tostring(b),\
    \ -1))\nend\nmultiply(123, 44) -- 4\nmultiply(555, 222) -- 0", "    return (a%10)*(b%10)\n\
    end", "  return a % 10 * b % 10\nend", "  return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend", "  return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend\nTest.assertEquals(multiply(1, 2), 2)\n\
    Test.assertEquals(multiply(12, 12), 4)\nTest.assertEquals(multiply(20, 1), 0)",
  "  return (a % 10) * (b % 10)\nend", "\tlocal tA = tostring(a)\n\tlocal tB = tostring(b)\n\
    \treturn tonumber(tA:sub(-1, -1)) * tonumber(tB:sub(-1, -1))\nend", "\tif a >\
    \ 10 then\n\t\ta = a % 10\n\tend\n\tif b > 10 then\n\t\tb = b % 10\n\tend\n\t\
    return a * b\nend", "  return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "\tlocal ret = 1\n\twhile a > 0 or b > 0 do\n\t\tif a > 0 then ret = ret\
    \ * (a % 10) end\n\t\tif b > 0 then ret = ret * (b % 10) end\n\t\ta = math.floor(a\
    \ / 10)\n\t\tb = math.floor(b / 10)\n\tend\n\treturn ret\nend\nassert(multiply(123,456)\
    \ == 4*6)\nassert(multiply(21,12) == 2*2)\nassert(multiply(3453,0) == 0)\nassert(multiply(0,123)\
    \ == 0)\nassert(multiply(10,11) == 0)\nassert(multiply(123123,1230) == 3*3)\n\
    assert(multiply(23,44) == 4*2)\nassert(multiply(1200,456) == 2*6)\nassert(multiply(123,345)\
    \ == 6*5)\nassert(multiply(34,56) == 4*6)\nassert(multiply(1234,5678) == 4*8)",
  "    local ad, bd = tostring(a):sub(-1), tostring(b):sub(-1)\n    return tonumber(ad)\
    \ * tonumber(bd)\nend", "  return (a % 10) * (b % 10)\nend", "  return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend", "    local utb = string.sub(tostring(b),\
    \ -1)\n    local uta = string.sub(tostring(a), -1)\n    return tonumber(uta) *\
    \ tonumber(utb)\nend", "  return (a % 10) * (b % 10)\nend", "  local function\
    \ get_last_digit(n)\n    n = n % 10\n    return n > 0 and n or 10\n  end\n  return\
    \ get_last_digit(a) * get_last_digit(b)\nend", "    local res = a * b;\n    return\
    \ res % 10\nend", "  local a, b = a % 10, b % 10\n  return a * b\nend", "  return\
    \ (a % 10) * (b % 10)\nend", "  return (a%10)*(b%10)\nend", "  -- multiply the\
    \ last digit of each number\n  -- then divide by ten to get rid of the leftmost\
    \ digit (10)", "    return a % 10 * b % 10\nend", "    local multiplicands = {a\
    \ % 10, b % 10}\n    return multiplicands[1] * multiplicands[2]\nend", "    --\
    \ `#` is the length operator\n    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\n\
    end", "  return (a % 10) * (b % 10)\nend", "  return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend", "  local mult = a * b\n  return (mult\
    \ - (mult - mult % 10)) / 10\nend", "    -- return math.floor(a / 10) * math.floor(b\
    \ / 10) + math.floor(a / 10) * b % 10 + a % 10 * math.floor(b / 10) + a % 10 *\
    \ b % 10\n    return (a % 10) * (b % 10)\nend", "  local function get_unit_digit(v)\n\
    \    while v >= 10 do\n      v = v % 10\n    end\n    return v\n  end\n  return\
    \ get_unit_digit(a) * get_unit_digit(b)\nend\nassert(multiply(1234, 345) == 3)\n\
    assert(multiply(66, 7) == 42)\nassert(multiply(12345, 456) == 60)", "    return\
    \ ((a%10)*(b%10))\nend", "\tlocal product = 1\n\twhile a>0 do\n\t\tproduct = product\
    \ * (a%10)\n\t\ta = math.floor(a/10)\n\tend\n\twhile b>0 do\n\t\tproduct = product\
    \ * (b%10)\n\t\tb = math.floor(b/10)\n\tend\n\treturn product\nend", "    local\
    \ function unit(n)\n        return n - 10 * math.floor(n / 10)\n    end\n    return\
    \ unit(a) * unit(b)\nend", "\treturn ((a % 10) * (b % 10))\nend", "  return (a%10)*(b%10)\n\
    end", "  return a * b\nend", "  return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "  return (a % 10) * (b % 10)\nend", "    return (a%10)*(b%10)\nend", "\t\
    local res, mx = a, b\n\tif a < b then res, mx = b, a end\n\treturn ((math.floor(res\
    \ / 10) * mx) + (res % 10) * mx) % 10\nend", "\treturn (a % 10) * (b % 10)\nend",
  "  -- body\n  return (a%10)*(b%10)\nend", "  return (a%10)*(b%10)\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "    local c = a * b\n    return c % 10\nend", " \
    \   return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend", "    local function\
    \ unit(n)\n        return n % 10\n    end\n    return unit(a) * unit(b)\nend",
  "  -- your code here\nend", "    return a * b\nend", "  return (a % 10) * (b % 10)\n\
    end", "  return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "    return tonumber(tostring(a):sub(-1) * tostring(b):sub(-1))\nend", " \
    \   return (a % 10) * (b % 10)\nend", "  return a * b\nend", "  -- your code here\n\
    end", "  local ta = split_number(a)\n  local tb = split_number(b)\n  local tc\
    \ = {}\n  for i, v in ipairs(ta) do\n    for j, w in ipairs(tb) do\n      tc[i+j-1]\
    \ = (tc[i+j-1] or 0) + v * w\n    end\n  end\n  local res = 0\n  for i, v in ipairs(tc)\
    \ do\n    res = res + v\n  end\n  return res\nend", "    return(tonumber(tostring(a)[-1])\
    \ * tonumber(tostring(b)[-1]))\nend", "\tlocal units = {\n\t\t[0] = { 0, 1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9 },\n\t\t[1] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 },\n\t\t[2]\
    \ = { 0, 2, 4, 6, 8, 0, 2, 4, 6, 8 },\n\t\t[3] = { 0, 3, 6, 9, 2, 5, 8, 1, 4,\
    \ 7 },\n\t\t[4] = { 0, 4, 8, 2, 6, 0, 4, 8, 2, 6 },\n\t\t[5] = { 0, 5, 0, 5, 0,\
    \ 5, 0, 5, 0, 5 },\n\t\t[6] = { 0, 6, 2, 8, 4, 0, 6, 2, 8, 4 },\n\t\t[7] = { 0,\
    \ 7, 4, 1, 8, 5, 2, 9, 6, 3 },\n\t\t[8] = { 0, 8, 6, 4, 2, 0, 8, 6, 4, 2 },\n\t\
    \t[9] = { 0, 9, 8, 7, 6, 5, 4, 3, 2, 1 },\n\t}\n\treturn units[a%10][b%10]\nend",
  "\tlocal re = (a % 10) * (b % 10)\n\tprint(re)\n\treturn re\nend", "  local prod\
    \ = a * b\n  local unit = prod % 10\n  return unit\nend", "  return (a % 10) *\
    \ (b % 10)\nend", "  return (a % 10) * (b % 10)\nend", "  return (a % 10) * (b\
    \ % 10)\nend", "    return (a % 10) * (b % 10)\nend", "  return (a%10)*(b%10)\n\
    end\nprint(multiply(0, 1)) -- 0\nprint(multiply(2, 0)) -- 0\nprint(multiply(1,\
    \ 1)) -- 1\nprint(multiply(2, 1)) -- 2\nprint(multiply(2, 2)) -- 4\nprint(multiply(10,\
    \ 12)) -- 2\nprint(multiply(10, 14)) -- 0\nprint(multiply(10, 16)) -- 6\nprint(multiply(14,\
    \ 16)) -- 4\nprint(multiply(17, 16)) -- 2\nprint(multiply(100, 200)) -- 0\nprint(multiply(123,\
    \ 45)) -- 5\nprint(multiply(19, 19)) -- 1\nprint(multiply(198, 198)) -- 16", " \
    \   return (a%10)*(b%10)\nend", "  return (a % 10) * (b % 10)\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "  return(a * b) % 10\nend", "  return a % 10 * b % 10\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "    return (a % 10) * (b % 10)\nend", "\tlocal s\
    \ = 0\n\tfor _ = 1, b do\n\t\ts = s + a\n\tend\n\treturn s\nend", "  return (a\
    \ % 10) * (b % 10)\nend", "\t-- body\n\treturn (a%10)*(b%10)\nend", "  return\
    \ tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\nend", "    local\
    \ t,z = {5,5,5,5,5,5,5,5,5,5}, {0,1,2,3,4,5,6,7,8,9}\n    for i=1,10 do t[i] =\
    \ z[a]*z[b] end\n    return t[a*b]\nend", "  local a_unit = a % 10\n  local b_unit\
    \ = b % 10\n  return a_unit * b_unit\nend", "    return a % 10 * b % 10\nend",
  "    -- body\n    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "    return (a % 10) * (b % 10)\nend", "    local units = {\n        [0]\
    \ = 0,\n        [1] = 1,\n        [2] = 2,\n        [3] = 3,\n        [4] = 4,\n\
    \        [5] = 5,\n        [6] = 6,\n        [7] = 7,\n        [8] = 8,\n    \
    \    [9] = 9,\n    }\n    a = units[a%10]\n    b = units[b%10]\n    return a*b\n\
    end", "    return (a % 10) * (b % 10)\nend", "  a = string.sub(tostring(a), -1)\n\
    \  b = string.sub(tostring(b), -1)\n  return tonumber(a) * tonumber(b)\nend",
  "    return (a % 10) * (b % 10)\nend", "    return (a % 10) * (b % 10)\nend", " \
    \   local dig_a = a % 10\n    local dig_b = b % 10\n    return dig_a * dig_b\n\
    end", "\tlocal a1, b1 = a%10, b%10\n\treturn a1*b1\nend", "  return (a % 10) *\
    \ (b % 10)\nend", "  return tonumber(tostring(a):match(\"%d\")*tostring(b):match(\"\
    %d\"))\nend", "  return ((a % 10) * (b % 10))\nend", "  return (a%10)*(b%10)\n\
    end", "    return (a%10)*(b%10)\nend", "    return (a * b) % 10\nend", "  local\
    \ a = string.match(tostring(a), \"%d\")\n  local b = string.match(tostring(b),\
    \ \"%d\")\n  return a * b\nend", "  return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "    a = math.floor(a % 10)\n    b = math.floor(b % 10)\n    return a *\
    \ b\nend", "  return (a%10)*(b%10)\nend", "  return tonumber(a:sub(-1, -1)) *\
    \ tonumber(b:sub(-1, -1))\nend", "  a = a % 10\n  b = b % 10\n  return a * b\n\
    end", "  return (a%10)*(b%10)\nend", "    return (a%10)*(b%10)\nend", "  local\
    \ va = tostring(a)\n  local vb = tostring(b)\n  return tonumber(va:sub(-1)) *\
    \ tonumber(vb:sub(-1))\nend", "    -- write code here\n    --print(a..' '..b)\n\
    \    local r = (a % 10) * (b % 10)\n    --print(r)\n    return r\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "    return math.floor(a/10) * math.floor(b/10) *\
    \ ((a % 10) * (b % 10))\nend", "  local res = a*b\n  return math.floor(res/10)%10\n\
    end", "    return tonumber(tostring(a):sub(-1, -1)) * tonumber(tostring(b):sub(-1,\
    \ -1))\nend", "  local n1 = a % 10\n  local n2 = b % 10\n  return n1 * n2\nend",
  "  return (a % 10) * (b % 10)\nend", "    -- long method\n    -- return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\n    -- or\n    return tonumber(a:sub(-1)) *\
    \ tonumber(b:sub(-1))\nend", "    local str_a = tostring(a)\n    local str_b =\
    \ tostring(b)\n    local a_unit = tonumber(str_a:sub(-1, -1))\n    local b_unit\
    \ = tonumber(str_b:sub(-1, -1))\n    return a_unit * b_unit\nend", "  return a%10\
    \ * b%10\nend", "  return (a % 10) * (b % 10)\nend", "    local a, b = string.match(tostring(a),\
    \ \"(%d+)\"), string.match(tostring(b), \"(%d+)\")\n    return tonumber(a) * tonumber(b)\n\
    end", "    return (a % 10) * (b % 10)\nend", "    return tonumber(string.format(\"\
    %d\", a))*tonumber(string.format(\"%d\", b))%10\nend", "    local function strLastDigit(num)\n\
    \        local strNum = tostring(num)\n        return tonumber(strNum:sub(-1,\
    \ -1))\n    end\n    return strLastDigit(a) * strLastDigit(b)\nend", "  local\
    \ a, b = tostring(a), tostring(b)\n  return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\n\
    end", "\tlocal t = {}\n\tt[0] = 6\n\tt[1] = 2\n\tt[2] = 4\n\tt[3] = 8\n\tt[4]\
    \ = 6\n\tt[5] = 2\n\tt[6] = 4\n\tt[7] = 8\n\tt[8] = 6\n\tt[9] = 2\n\ta = a % 10\n\
    \tb = b % 10\n\treturn t[a] * t[b]\nend", "  return a % 10 * b % 10\nend\nassert(multiply(2,\
    \ 3) == 6)\nassert(multiply(4, 2) == 8)\nassert(multiply(1, 9) == 9)\nassert(multiply(16,\
    \ 2) == 12)\nassert(multiply(27, 3) == 1)\nassert(multiply(9, 5) == 5)\nassert(multiply(7,\
    \ 9) == 3)", "  local res = (a % 10) * (b % 10)\n  return res\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "  return (a % 10) * (b % 10)\nend", "  return(a\
    \ % 10 * b % 10)\nend", "  return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "  -- compute the multiplicative inverse\n  local function reciprocal(n)\n\
    \    for i = 0, 9 do\n      if (i * n) % 10 == 1 then\n        return i\n    \
    \  end\n    end\n  end\n  -- return the product\n  return ((reciprocal(a) * b)\
    \ % 10)\nend", "    -- your code here\nend", "  return ((a%10)*(b%10))\nend",
  "\treturn tonumber(string.sub(tostring(a), -1)) * tonumber(string.sub(tostring(b),\
    \ -1))\nend", "    return ((a % 10) * (b % 10))\nend", "  local aa = tostring(a)\n\
    \  local bb = tostring(b)\n  return tonumber(aa:sub(-1)) * tonumber(bb:sub(-1))\n\
    end", "\treturn ((a%10)*(b%10))\nend\nprint(multiply(9,9))\nprint(multiply(1,9))",
  "\tlocal r = 1\n\tfor i = 1, b do\n\t\tr = r * a\n\tend\n\treturn r\nend", "\treturn\
    \ (a % 10) * (b % 10)\nend", "    return (a % 10) * (b % 10)\nend", "    return\
    \ a % 10 * b % 10\nend", "  local aa = string.sub(tostring(a), #tostring(a))\n\
    \  local bb = string.sub(tostring(b), #tostring(b))\n  return tonumber(aa) * tonumber(bb)\n\
    end", "    local a1, a2 = a % 10, b % 10\n    return a1 * a2\nend", "    local\
    \ a_l, b_l = string.reverse(tostring(a)), string.reverse(tostring(b))\n    local\
    \ ab = tonumber(a_l) * tonumber(b_l)\n    local ab_s = string.reverse(tostring(ab))\n\
    \    return tonumber(ab_s)\nend", "  local units = {1,2,3,4,5,6,7,8,9}\n  local\
    \ a, b = tostring(a), tostring(b)\n  local au, bu = tonumber(a:sub(-1)), tonumber(b:sub(-1))\n\
    \  return (au * bu) % 10\nend", "  return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "  return (a%10)*(b%10)\nend", "    local units = {[0] = 0, [1] = 1, [2]\
    \ = 2, [3] = 3, [4] = 4, [5] = 5, [6] = 6, [7] = 7, [8] = 8, [9] = 9}\n    local\
    \ z = string.len(tostring(a))\n    local x = string.len(tostring(b))\n    local\
    \ c = 0\n    local k = 0\n    local d = 0\n    local u = 0\n    local result =\
    \ 0\n    local temp = 0\n    local i = 0\n    local j = 0\n    local m = 0\n \
    \   local n = 0\n    local t = 0\n    if a == 0 or b == 0 then\n        return\
    \ 0\n    elseif a == b then\n        return 1\n    elseif a == 0 and b == 0 then\n\
    \        return 0\n    elseif a >= 0 and b >= 0 then\n        for i = z, 1, -1\
    \ do\n            c = a % 10\n            k = 10 ^ (i - 1)\n            d = c\
    \ * k\n            a = a - c\n            a = a / 10\n            temp = temp\
    \ + d\n        end\n        for j = x, 1, -1 do\n            u = b % 10\n    \
    \        m = 10 ^ (j - 1)\n            n = u * m\n            b = b - u\n    \
    \        b = b / 10\n            t = t + n\n        end\n        result = temp\
    \ * t\n        local num = string.len(tostring(result))\n        local unit =\
    \ 0\n        for i = num, 1, -1 do\n            unit = result % 10\n         \
    \   result = result - unit\n            result = result / 10\n        end\n  \
    \      return unit\n    elseif a < 0 and b < 0 then\n        for i = z, 1, -1\
    \ do\n            c = a % 10\n            k = 10 ^ (i - 1)\n            d = c\
    \ * k\n            a = a - c\n            a = a / 10\n            temp = temp\
    \ + d\n        end\n        for j = x, 1, -1 do\n            u = b % 10\n    \
    \        m = 10 ^ (j - 1)\n           ", "  return (a%10)*(b%10)\nend", "    return\
    \ (a % 10) * (b % 10)\nend", "    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "  return a % 10 * b % 10\nend", "    return (a % 10) * (b % 10)\nend",
  "  local function unite(a)\n    return a % 10\n  end\n  return unite(a) * unite(b)\n\
    end", "    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "  return (a % 10) * (b % 10)\nend", "\treturn a * b\nend", "  local x,\
    \ y = math.abs(a), math.abs(b)\n  local r = x * y\n  return tonumber(r:tostring():sub(-1))\n\
    end", "\treturn tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end", "  local unita = a % 10\n  local unitb = b % 10\n  return unita * unitb\n\
    end", "  local a1, a2 = math.modf(a / 10)\n  local b1, b2 = math.modf(b / 10)\n\
    \  return a2 * b2\nend", "  local mult = 1\n  for i = 1, 2 do\n    local val =\
    \ a % 10\n    mult = mult * val\n    a = math.floor(a / 10)\n  end\n  for i =\
    \ 1, 2 do\n    local val = b % 10\n    mult = mult * val\n    b = math.floor(b\
    \ / 10)\n  end\n  return mult\nend", "  return (a%10)*(b%10)\nend", "  return\
    \ a%10 * b%10\nend", "  return (a%10)*(b%10)\nend\nprint(multiply(17, 7)) -->\
    \ 14", "  return tonumber(tostring(a):sub(-1, -1)) * tonumber(tostring(b):sub(-1,\
    \ -1))\nend", "    return (a % 10) * (b % 10)\nend", "    return tonumber(tostring(a):sub(-1))\
    \ * tonumber(tostring(b):sub(-1))\nend", "  local mult = string.format(\"%d\"\
    , a) * string.format(\"%d\", b)\n  return tonumber(string.sub(mult, -1))\nend",
  "  return (a%10)*(b%10)\nend", "  return (a % 10) * (b % 10)\nend", "  return a\
    \ % 10 * b % 10\nend", "    local result = a * b\n    return (result % 10) * math.floor(result\
    \ / 10)\nend", "  return (a % 10) * (b % 10)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
