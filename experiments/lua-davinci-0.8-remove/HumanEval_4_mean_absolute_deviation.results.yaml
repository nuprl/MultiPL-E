language: lua
name: HumanEval_4_mean_absolute_deviation
results:
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local mean = mean(numbers)\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp70y_wjdc.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp70y_wjdc.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp70y_wjdc.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    assert(#numbers > 0, \"mean_absolute_deviation got empty input\")\n    local\
    \ x_mean = mean(numbers)\n    local sum = 0\n    for _, x in ipairs(numbers) do\n\
    \        sum = sum + math.abs(x - x_mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpglvtn6fb.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpglvtn6fb.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpglvtn6fb.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local devs = {}\n  for i, num in ipairs(numbers)\
    \ do\n    devs[i] = math.abs(num - mean)\n  end\n  return mean(devs)\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmput35rzxb.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmput35rzxb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmput35rzxb.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local n = #numbers\n    if n == 0 then\n        return 0,0\n    end\n   \
    \ local mean = numbers:mean()\n    local sum = 0\n    for i=1,n do\n        sum\
    \ = sum + math.abs(numbers[i] - mean)\n    end\n    return mean, sum / n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkbm5yz9n.lua:11:\
    \ attempt to call a nil value (method 'mean')\nstack traceback:\n\t/tmp/tmpkbm5yz9n.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpkbm5yz9n.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local total = 0\n    local count = 0\n    local mean = mean(numbers)\n  \
    \  for i, v in ipairs(numbers) do\n        total = total + math.abs(v - mean)\n\
    \        count = count + 1\n    end\n    return total / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy3iu7s2f.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpy3iu7s2f.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpy3iu7s2f.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal sum = 0\n\tlocal count = 0\n\tfor _, x in ipairs(numbers) do\n\t\tsum\
    \ = sum + x\n\t\tcount = count + 1\n\tend\n\tlocal mean = sum / count\n\tlocal\
    \ sum_of_abs_differences = 0\n\tfor _, x in ipairs(numbers) do\n\t\tsum_of_abs_differences\
    \ = sum_of_abs_differences + math.abs(x - mean)\n\tend\n\treturn sum_of_abs_differences\
    \ / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    if #numbers == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmposje8l2w.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local length = #numbers\n    if length == 0 then\n        return 0\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpilxwifwn.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local count = #numbers\n  local sum_numbers = 0\n  local sum_abs_diffs = 0\n\
    \  for i,v in ipairs(numbers) do\n    sum_numbers = sum_numbers + v\n  end\n \
    \ local mean = sum_numbers / count\n  for i,v in ipairs(numbers) do\n    sum_abs_diffs\
    \ = sum_abs_diffs + math.abs(v - mean)\n  end\n  return sum_abs_diffs / count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = jstats.mean(numbers)\n  local deviations = {}\n  for i,number\
    \ in ipairs(numbers) do\n    table.insert(deviations, math.abs(number - mean))\n\
    \  end\n  return jstats.mean(deviations)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6w2f7cdb.lua:7:\
    \ attempt to index a nil value (global 'jstats')\nstack traceback:\n\t/tmp/tmp6w2f7cdb.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6w2f7cdb.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = 0\n  local count = 0\n  for _, val in pairs(numbers) do\n    mean\
    \ = mean + val\n    count = count + 1\n  end\n  mean = mean / count\n  local sum\
    \ = 0\n  for _, val in pairs(numbers) do\n    sum = sum + math.abs(val - mean)\n\
    \  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  if #numbers == 0 then\n    return 0, 0\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmzqz33ad.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    -- need at least two elements to calculate mean deviation\n    if #numbers\
    \ < 2 then\n        return 0\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfhix17sa.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tassert(type(numbers) == \"table\", \"numbers argument must be a table\")\n\t\
    assert(#numbers > 0, \"numbers argument must contain at least one value\")\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc6ut5k5p.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\n    for _,n in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(n - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3e6k742o.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3e6k742o.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3e6k742o.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local n     = 0\n  local sum   = 0\n  local mean  = 0\n  local diff  = 0\n\
    \  local count = 0\n  local sumsq = 0\n  local abs   = math.abs\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpse678mnj.lua:23: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local absolute_deviations = {}\n    for _,\
    \ number in ipairs(numbers) do\n        table.insert(absolute_deviations, math.abs(number\
    \ - mean))\n    end\n    return mean(absolute_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjulxlohs.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpjulxlohs.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpjulxlohs.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal mean = mean(numbers)\n\tlocal sum = 0\n\tfor _, x in ipairs(numbers) do\n\
    \t\tsum = sum + math.abs(x - mean)\n\tend\n\treturn sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpztveu0k3.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpztveu0k3.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpztveu0k3.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = util.mean(numbers)\n  local sum = 0\n  for _, v in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsnh3ama6.lua:7:\
    \ attempt to index a nil value (global 'util')\nstack traceback:\n\t/tmp/tmpsnh3ama6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsnh3ama6.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = average(numbers)\n  local absolute_deviations = {}\n  for i, n\
    \ in ipairs(numbers) do\n    table.insert(absolute_deviations, math.abs(n - mean))\n\
    \  end\n  return average(absolute_deviations)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp7k7svtj.lua:7:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpp7k7svtj.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpp7k7svtj.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  assert(type(numbers) == \"table\", \"Not a table.\")\n  assert(next(numbers),\
    \ \"Empty table.\")\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp21xq33tg.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local absolute_deviations = {}\n    for i,\
    \ v in ipairs(numbers) do\n        absolute_deviations[i] = math.abs(v - mean)\n\
    \    end\n    return mean(absolute_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7at3s08c.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp7at3s08c.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp7at3s08c.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local count = 0\n  local mean = 0\n  for _,v in pairs(numbers)\
    \ do\n    sum = sum + v\n    count = count + 1\n  end\n  mean = sum / count\n\
    \  sum = 0\n  for _,v in pairs(numbers) do\n    sum = sum + math.abs(v - mean)\n\
    \  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local size = #numbers\n    if size == 0 then\n        return nil\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpltus4q6m.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  -- Calculate the mean\n  local mean = mean(numbers)\n  -- Calculate the absolute\
    \ difference from the mean for each element\n  local abs_deviations = map(function(num)\
    \ return math.abs(num - mean) end, numbers)\n  -- Calculate the mean of the absolute\
    \ differences\n  return mean(abs_deviations)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuw_3azdh.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpuw_3azdh.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpuw_3azdh.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu64ibnhr.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpu64ibnhr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpu64ibnhr.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local n = #numbers\n  if n < 2 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmposx9weif.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local total = 0\n    local count = 0\n    local mean = mean(numbers)\n  \
    \  for _, value in ipairs(numbers) do\n        total = total + math.abs(value\
    \ - mean)\n        count = count + 1\n    end\n    return total / count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdkxkuloq.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpdkxkuloq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpdkxkuloq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local deviations = {}\n  for _,x in ipairs(numbers)\
    \ do\n    table.insert(deviations, math.abs(x - mean))\n  end\n  return mean(deviations)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy0iaq30t.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpy0iaq30t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpy0iaq30t.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  if not numbers or not #numbers then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpouk9n1kk.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local total = 0\n  local mean = 0\n  local count = 0\n  local n = #numbers\n\
    \  for i = 1, n do\n    local v = numbers[i]\n    total = total + v\n    count\
    \ = count + 1\n  end\n  mean = total / count\n  total = 0\n  for i = 1, n do\n\
    \    local v = numbers[i]\n    total = total + math.abs(v - mean)\n  end\n  return\
    \ total / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local absolute_deviations = {}\n    for i,\
    \ x in ipairs(numbers) do\n        absolute_deviations[i] = math.abs(x - mean)\n\
    \    end\n    return mean(absolute_deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3c88kkj6.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3c88kkj6.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp3c88kkj6.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local x_mean = mean(numbers)\n  local N = table.getn(numbers)\n  local sum\
    \ = 0\n  for _,x in pairs(numbers) do\n    sum = sum + math.abs(x - x_mean)\n\
    \  end\n  return sum / N\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgp6wz0xy.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpgp6wz0xy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpgp6wz0xy.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local length = #numbers\n    local sum = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyq7w4qs2.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  -- Check for bad input; if empty table, return nil\n  if #numbers == 0 then\n\
    \    return nil\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6jihr9rb.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local count = 0\n    local mean = mean(numbers)\n    for\
    \ _, num in ipairs(numbers) do\n        sum = sum + math.abs(num - mean)\n   \
    \     count = count + 1\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe_b3rr31.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpe_b3rr31.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpe_b3rr31.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local num_numbers = 0\n  local mean\n  for _, num in ipairs(numbers)\
    \ do\n    sum = sum + num\n    num_numbers = num_numbers + 1\n  end\n  mean =\
    \ sum / num_numbers\n  sum = 0\n  for _, num in ipairs(numbers) do\n    sum =\
    \ sum + math.abs(num - mean)\n  end\n  return sum / num_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal avg = avg(numbers)\n\tlocal sum = 0\n\tfor _, v in ipairs(numbers) do\n\
    \t\tsum = sum + math.abs(v - avg)\n\tend\n\treturn sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0437p5lw.lua:7:\
    \ attempt to call a nil value (global 'avg')\nstack traceback:\n\t/tmp/tmp0437p5lw.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0437p5lw.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum, count = 0, 0\n  for i, num in ipairs(numbers) do\n    sum = sum\
    \ + num\n    count = count + 1\n  end\n  local mean = sum / count\n  local sum_deviations\
    \ = 0\n  for i, num in ipairs(numbers) do\n    sum_deviations = sum_deviations\
    \ + math.abs(num - mean)\n  end\n  return sum_deviations / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local n = #numbers\n  if n < 2 then\n    return 0\n  end\n  local mean = mean(numbers)\n\
    \  local deviation = 0\n  for _, v in ipairs(numbers) do\n    deviation = deviation\
    \ + math.abs(v - mean)\n  end\n  return deviation / n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr123zb3o.lua:11:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpr123zb3o.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpr123zb3o.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local dev_sum = 0\n  for _, num in ipairs(numbers)\
    \ do\n    dev_sum = dev_sum + math.abs(num - mean)\n  end\n  return dev_sum /\
    \ #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr50ogv5p.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpr50ogv5p.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpr50ogv5p.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = average(numbers)\n  local sum = 0\n  for _, number in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(number - mean)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm5cv5snz.lua:7:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpm5cv5snz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpm5cv5snz.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local deviations = { }\n    for _, n in ipairs(numbers)\
    \ do\n        table.insert(deviations, math.abs(n - mean))\n    end\n    return\
    \ mean(deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf_pn33ry.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpf_pn33ry.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf_pn33ry.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local count = #numbers\n    if count == 0 then\n        return nil\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpooagvwfn.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local n = #numbers\n    if n == 0 then\n        return 0\n    end\n    local\
    \ mean = mean(numbers)\n    local function diff(n)\n        return math.abs(n\
    \ - mean)\n    end\n    local sum = 0\n    for _, v in ipairs(numbers) do\n  \
    \      sum = sum + diff(v)\n    end\n    return sum / n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo6o6cnsx.lua:11:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpo6o6cnsx.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpo6o6cnsx.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local abs_diffs = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(abs_diffs, math.abs(number - mean))\n  end\n  return mean(abs_diffs)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6268fo3z.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp6268fo3z.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp6268fo3z.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  if #numbers == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnxyidaoi.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local number_count = #numbers\n    local sum = 0\n    local mean = math.mean(numbers)\n\
    \    for i, num in ipairs(numbers) do\n        sum = sum + math.abs(num - mean)\n\
    \    end\n    return sum / number_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkod72cks.lua:9:\
    \ attempt to call a nil value (field 'mean')\nstack traceback:\n\t/tmp/tmpkod72cks.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpkod72cks.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal mean, sum = mean(numbers)\n\tfor _, number in ipairs(numbers) do\n\t\t\
    sum = sum + math.abs(number - mean)\n\tend\n\treturn sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp762g2d38.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp762g2d38.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp762g2d38.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal n = #numbers\n\tlocal x_mean = mean(numbers)\n\tlocal deviations = {}\n\
    \tfor _, num in ipairs(numbers) do\n\t\tdeviations[#deviations + 1] = math.abs(num\
    \ - x_mean)\n\tend\n\treturn mean(deviations)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz1nv3t7f.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpz1nv3t7f.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpz1nv3t7f.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1zzhrgn3.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = average(numbers)\n    local average_diffs = average(map(function(x)\
    \ return math.abs(x - mean) end, numbers))\n    return average_diffs\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzzz53iu2.lua:7:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpzzz53iu2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzzz53iu2.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = 0.0\n  for _, v in ipairs(numbers) do\n    mean = mean + v\n \
    \ end\n  mean = mean / #numbers\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsywc8foq.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local differences = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(differences, math.abs(number - mean))\n  end\n  return\
    \ mean(differences)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8n7_4eme.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp8n7_4eme.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp8n7_4eme.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local mean = average(numbers)\n  for _, x in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(x - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0jskwlsl.lua:8:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmp0jskwlsl.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp0jskwlsl.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local absolute_deviations = {}\n    for _,\
    \ v in ipairs(numbers) do\n        absolute_deviations[#absolute_deviations +\
    \ 1] = math.abs(v - mean)\n    end\n    return mean(absolute_deviations)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_cfohjie.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp_cfohjie.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_cfohjie.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local total = 0\n    for _, n in ipairs(numbers)\
    \ do\n        total = total + math.abs(n - mean)\n    end\n    return total /\
    \ #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2y7zt0xn.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2y7zt0xn.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2y7zt0xn.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = get_mean(numbers)\n    local sum = 0\n    for _, value in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(value - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiavr1hfd.lua:7:\
    \ attempt to call a nil value (global 'get_mean')\nstack traceback:\n\t/tmp/tmpiavr1hfd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpiavr1hfd.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    return mean_absolute_deviation_from_mean(numbers,\
    \ mean)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe7xavmxd.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpe7xavmxd.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpe7xavmxd.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1zzhrgn3.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = sum(numbers) / #numbers\n    local sum_of_absolute_deviations\
    \ = 0\n    for _, number in ipairs(numbers) do\n        sum_of_absolute_deviations\
    \ = sum_of_absolute_deviations + math.abs(number - mean)\n    end\n    return\
    \ sum_of_absolute_deviations / #numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_gevjdvp.lua:7:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp_gevjdvp.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp_gevjdvp.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local count = 0\n    local mean = mean(numbers)\n    for\
    \ _, number in ipairs(numbers) do\n        sum = sum + math.abs(number - mean)\n\
    \        count = count + 1\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu3ydmf2z.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpu3ydmf2z.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpu3ydmf2z.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local n = #numbers\n    local sum = 0\n    local mean = 0\n    local m, i\n\
    \    for i = 1, n do\n        sum = sum + numbers[i]\n    end\n    mean = sum\
    \ / n\n    sum = 0\n    for i = 1, n do\n        sum = sum + math.abs(numbers[i]\
    \ - mean)\n    end\n    m = sum / n\n    return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local deviations = table.map(numbers, function(x)\
    \ return math.abs(x - mean) end)\n  return mean(deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_ma7iw7.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmps_ma7iw7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps_ma7iw7.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    assert(type(numbers) == \"table\", \"numbers should be a table\")\n    assert(#numbers\
    \ > 0, \"numbers table should not be empty\")\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpooggz4y9.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum, mean = 0, mean(numbers)\n  for _, number in ipairs(numbers) do\n\
    \    sum = sum + math.abs(number - mean)\n  end\n  return sum / (#numbers)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps6kb69c7.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmps6kb69c7.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmps6kb69c7.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local abs_deviations = {}\n  for i, v in ipairs(numbers)\
    \ do\n    abs_deviations[i] = math.abs(v - mean)\n  end\n  return mean(abs_deviations)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2sboqu1k.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2sboqu1k.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2sboqu1k.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local m = mean(numbers)\n    local sum = 0\n    for i,v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - m)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9_knge_v.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9_knge_v.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp9_knge_v.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local n = 0\n  local mean = mean(numbers)\n  local abs = math.abs\n\
    \  for _, x in ipairs(numbers) do\n    sum = sum + abs(x - mean)\n    n = n +\
    \ 1\n  end\n  return sum / n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhxgqu5v.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzhxgqu5v.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpzhxgqu5v.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    -- Get the mean of this data set\n    local mean = mean(numbers)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd_bbjndd.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local count = 0\n    local mean = mean(numbers)\n    for\
    \ _, x in ipairs(numbers) do\n        sum = sum + math.abs(x - mean)\n       \
    \ count = count + 1\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctupzd__.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpctupzd__.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpctupzd__.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local len = #numbers\n    local sum = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplzyp313k.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0.0\n    local mean = 0.0\n    local variance = 0.0\n    local\
    \ count = 0\n    for _, number in ipairs(numbers) do\n        sum = sum + number\n\
    \        count = count + 1\n    end\n    mean = sum / count\n    for _, number\
    \ in ipairs(numbers) do\n        variance = variance + math.abs(number - mean)\n\
    \    end\n    return variance / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local dev_sum = 0\n  for _, v in ipairs(numbers)\
    \ do\n    dev_sum = dev_sum + math.abs(v - mean)\n  end\n  return dev_sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc85nr024.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpc85nr024.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpc85nr024.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local count = #numbers\n    local sum = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnnfpdpxf.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal n = #numbers\n\tlocal sum = 0\n\tlocal mean = 0\n\tlocal i\n\tfor i =\
    \ 1, n do\n\t\tsum = sum + numbers[i]\n\tend\n\tmean = sum / n\n\tsum = 0\n\t\
    for i = 1, n do\n\t\tsum = sum + math.abs(numbers[i] - mean)\n\tend\n\treturn\
    \ sum / n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local num = 0\n  local sum = 0\n  for i = 1, #numbers do\n    local num = numbers[i]\n\
    \    sum = sum + num\n  end\n  local mean = sum / #numbers\n  local sum = 0\n\
    \  for i = 1, #numbers do\n    local num = numbers[i]\n    sum = sum + math.abs(num\
    \ - mean)\n  end\n  return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = f_mean(numbers)\n    local absolute_differences = f_map(function(x)\
    \ return math.abs(x - mean) end, numbers)\n    return f_mean(absolute_differences)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy2k1tgyi.lua:7:\
    \ attempt to call a nil value (global 'f_mean')\nstack traceback:\n\t/tmp/tmpy2k1tgyi.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpy2k1tgyi.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = 0\n    for _, value in ipairs(numbers) do\n        mean = mean\
    \ + value\n    end\n    mean = mean / #numbers\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqjqk9a0b.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local total = 0\n  local num_numbers = 0\n  local mean = 0\n  for _, x in ipairs(numbers)\
    \ do\n    total = total + x\n    num_numbers = num_numbers + 1\n  end\n  mean\
    \ = total / num_numbers\n  local mad = 0\n  for _, x in ipairs(numbers) do\n \
    \   mad = mad + math.abs(x - mean)\n  end\n  return mad / num_numbers\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    -- Check whether we have a single value, not a list of values.\n    -- If\
    \ so, simply return 0.\n    if #numbers == 1 then\n        return 0\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd4lgtwef.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    -- Calculate mean of the dataset\n    local x_mean = mean(numbers)\n    --\
    \ For each element, calculate absolute difference with mean.\n    -- Sum up the\
    \ results for all elements and divide by the number of elements.\n    local sum\
    \ = 0\n    for _, v in ipairs(numbers) do\n        sum = sum + math.abs(v - x_mean)\n\
    \    end\n    return sum / #numbers\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp735k_2se.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp735k_2se.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp735k_2se.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    assert(numbers and #numbers > 0, 'mean_absolute_deviation: list of numbers\
    \ to analyze is required')\n    local sum = 0\n    local mean = 0\n    for _,v\
    \ in ipairs(numbers) do\n        sum = sum + v\n    end\n    mean = sum / #numbers\n\
    \    local deviations = {}\n    for _,v in ipairs(numbers) do\n        table.insert(deviations,\
    \ math.abs(v - mean))\n    end\n    return average(deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4kyvfujd.lua:18:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmp4kyvfujd.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmp4kyvfujd.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local count = 0\n    local mean = mean(numbers)\n    for\
    \ i, n in ipairs(numbers) do\n        sum = sum + math.abs(n - mean)\n       \
    \ count = count + 1\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprngkj4ot.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmprngkj4ot.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmprngkj4ot.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  -- Get mean value of all elements of the list:\n  local sum, count = 0, 0\n\
    \  for _, n in ipairs(numbers) do\n    sum = sum + n\n    count = count + 1\n\
    \  end\n  local x_mean = sum / count\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfhy_zdhd.lua:23: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local count = 0\n    local sum = 0\n    local mean = 0\n    local mad = 0\n\
    \    local abs_diff_sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8wf4609h.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local mean = mean(numbers)\n  for _, n in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(n - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcp8k83ke.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpcp8k83ke.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpcp8k83ke.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local mean = 0\n    local n = 0\n    for _, number in\
    \ ipairs(numbers) do\n        if number == number then -- skip NANs\n        \
    \    sum = sum + number\n            n = n + 1\n        end\n    end\n    mean\
    \ = sum / n\n    sum = 0\n    for _, number in ipairs(numbers) do\n        if\
    \ number == number then -- skip NANs\n            sum = sum + math.abs(number\
    \ - mean)\n        end\n    end\n    return sum / n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    if #numbers < 2 then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxg33jaf7.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local diffs = {}\n  for _, n in ipairs(numbers)\
    \ do\n    table.insert(diffs, math.abs(n - mean))\n  end\n  return mean(diffs)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ytn5edz.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp4ytn5edz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp4ytn5edz.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local mean = mean(numbers)\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3etlivij.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3etlivij.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp3etlivij.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local average = mean(numbers)\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(x - average)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzl4sa475.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzl4sa475.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzl4sa475.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local average_error = 0\n  for i, v in ipairs(numbers)\
    \ do\n    average_error = average_error + math.abs(v - mean)\n  end\n  return\
    \ average_error / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvfnabx2_.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpvfnabx2_.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvfnabx2_.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local deviations = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(deviations, math.abs(number - mean))\n  end\n  return mean(deviations)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0qe988m.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpn0qe988m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpn0qe988m.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpep5fv6yl.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpep5fv6yl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpep5fv6yl.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  if #numbers == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnxyidaoi.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = math.mean(numbers)\n  local sum = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmujzupnd.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local number_count = #numbers\n    if number_count == 0 then\n        return\
    \ nil\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvwwft8_h.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local difference_from_mean = {}\n    for\
    \ k,v in pairs(numbers) do\n        difference_from_mean[k] = math.abs(v - mean)\n\
    \    end\n    return mean(difference_from_mean)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpclmz_6gy.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpclmz_6gy.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpclmz_6gy.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = 0\n  local count = 0\n  local sum = 0\n  for _, v in ipairs(numbers)\
    \ do\n    sum = sum + v\n    count = count + 1\n  end\n  mean = sum / count\n\
    \  local mad = 0\n  local diffs = {}\n  for _, v in ipairs(numbers) do\n    local\
    \ diff = math.abs(v - mean)\n    mad = mad + diff\n    table.insert(diffs, diff)\n\
    \  end\n  local sorted_diffs = merge_sort(diffs)\n  local med_diff = sorted_diffs[math.floor(#sorted_diffs\
    \ / 2) + 1]\n  return mad / count, med_diff\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7z8ix2zy.lua:22:\
    \ attempt to call a nil value (global 'merge_sort')\nstack traceback:\n\t/tmp/tmp7z8ix2zy.lua:22:\
    \ in local 'candidate'\n\t/tmp/tmp7z8ix2zy.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local n = #numbers\n    if n == 0 then\n        return 0\n    end\n    local\
    \ mean = sum(numbers) / n\n    local abs_diff = {}\n    for i = 1, n do\n    \
    \    abs_diff[i] = math.abs(numbers[i] - mean)\n    end\n    return sum(abs_diff)\
    \ / n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3i1a0fgo.lua:11:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmp3i1a0fgo.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp3i1a0fgo.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local absolute_deviations = map(function(x) return\
    \ math.abs(x - mean) end, numbers)\n  return mean(absolute_deviations)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_vwybl4.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp0_vwybl4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp0_vwybl4.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local n = #numbers\n    local sum = 0\n    local x_mean = mean(numbers)\n\
    \    for i = 1, n do\n        sum = sum + math.abs(numbers[i] - x_mean)\n    end\n\
    \    return sum / n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd32t_a3r.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpd32t_a3r.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpd32t_a3r.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = 0\n    local mad = 0\n    local n = 0\n    for _, x in ipairs(numbers)\
    \ do\n        mean = mean + x\n        n = n + 1\n    end\n    mean = mean / n\n\
    \    for _, x in ipairs(numbers) do\n        mad = mad + math.abs(x - mean)\n\
    \    end\n    return mad / n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  -- find dataset centerpoint\n  local mean = mean(numbers)\n  -- Subtract centerpoint\
    \ from each element and sum up the absolute values\n  local abs_diffs = table_reduce(numbers,\
    \ function(a,b) return a + math.abs(b - mean) end, 0)\n  -- divide sum by the\
    \ number of elements, that's the MAD\n  return abs_diffs / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbwcqp0t5.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpbwcqp0t5.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpbwcqp0t5.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    if type(numbers) ~= \"table\" then\n        return nil\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcmhjyssy.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local n = #numbers\n    local mean = 0\n    local sum = 0\n    local mad\
    \ = 0\n    local diff\n    for i = 1, n do\n        sum = sum + numbers[i]\n \
    \   end\n    mean = sum / n\n    sum = 0\n    for i = 1, n do\n        diff =\
    \ numbers[i] - mean\n        sum = sum + math.abs(diff)\n    end\n    mad = sum\
    \ / n\n    return mad\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = sum(numbers) / #numbers\n  local mad = 0\n  for _, number in ipairs(numbers)\
    \ do\n    mad = mad + math.abs(number - mean)\n  end\n  return mad / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiuxxvv6g.lua:7:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpiuxxvv6g.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpiuxxvv6g.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum, count = 0.0, 0\n  local mean = mean(numbers)\n  for _, x in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(x - mean)\n    count = count + 1\n  end\n  return\
    \ sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3zd3e68r.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp3zd3e68r.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp3zd3e68r.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local count = 0\n  local mean = mean(numbers)\n  for _,v in\
    \ pairs(numbers) do\n    sum = sum + math.abs(v - mean)\n    count = count + 1\n\
    \  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzj2pgsqq.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzj2pgsqq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpzj2pgsqq.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  assert(type(numbers) == \"table\", \"Numbers must be an array!\")\n  assert(#numbers\
    \ > 0, \"Cannot calculate MAD of an empty array!\")\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnxaf12zx.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = math.average(numbers)\n  local dev = {}\n  for _, x in ipairs(numbers)\
    \ do\n    dev[#dev + 1] = math.abs(x - mean)\n  end\n  return math.average(dev)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsnrpkbi4.lua:7:\
    \ attempt to call a nil value (field 'average')\nstack traceback:\n\t/tmp/tmpsnrpkbi4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpsnrpkbi4.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    -- calculate mean\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + number\n    end\n    local mean = sum / #numbers\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpimnm0x0k.lua:22: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1zzhrgn3.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal total = 0\n\tlocal mean = mean(numbers)\n\tfor _, n in ipairs(numbers)\
    \ do\n\t\ttotal = total + math.abs(n - mean)\n\tend\n\treturn total / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpokqf9d4n.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpokqf9d4n.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpokqf9d4n.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local count = #numbers\n  local mean = sum(numbers) / count\n  local result\
    \ = 0\n  for _, number in ipairs(numbers) do\n    result = result + math.abs(number\
    \ - mean)\n  end\n  return result / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoqnlbqel.lua:8:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpoqnlbqel.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpoqnlbqel.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  -- calculate mean of dataset\n  local sum = 0\n  for _, num in ipairs(numbers)\
    \ do\n    sum = sum + num\n  end\n  local mean = sum / #numbers\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppaw0glui.lua:22: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local count = #numbers\n    if count == 0 then\n        return 0\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7br82urm.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  -- Calculate mean\n  local mean = average(numbers)\n  -- Calculate differences\n\
    \  local differences = {}\n  for i, number in ipairs(numbers) do\n    differences[i]\
    \ = math.abs(number - mean)\n  end\n  -- Calculate and return mean\n  return average(differences)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnbndw3pt.lua:8:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpnbndw3pt.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpnbndw3pt.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu64ibnhr.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpu64ibnhr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpu64ibnhr.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local count = 0\n  local x_mean = mean(numbers)\n  for k,v\
    \ in pairs(numbers) do\n    sum = sum + math.abs(v - x_mean)\n    count = count\
    \ + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7_jzrj2w.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp7_jzrj2w.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp7_jzrj2w.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local count = 0\n    local mean = mean(numbers)\n    for\
    \ _, value in ipairs(numbers) do\n        sum = sum + math.abs(value - mean)\n\
    \        count = count + 1\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp377oz76n.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp377oz76n.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp377oz76n.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local count = #numbers\n    local sum = 0\n    local mean = 0\n    for i\
    \ = 1, count do\n        sum = sum + numbers[i]\n    end\n    mean = sum / count\n\
    \    sum = 0\n    for i = 1, count do\n        sum = sum + math.abs(numbers[i]\
    \ - mean)\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local x_mean = mean(numbers)\n    local count = #numbers\n    local sum =\
    \ 0\n    for i = 1, count do\n        sum = sum + math.abs(numbers[i] - x_mean)\n\
    \    end\n    return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphu46ui2m.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmphu46ui2m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmphu46ui2m.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local stats = stats_for(numbers)\n    local centerpoint = stats.mean\n  \
    \  local distances = {}\n    for _, number in ipairs(numbers) do\n        distances[#distances\
    \ + 1] = math.abs(number - centerpoint)\n    end\n    return stats_for(distances).mean\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz7nuz4ue.lua:7:\
    \ attempt to call a nil value (global 'stats_for')\nstack traceback:\n\t/tmp/tmpz7nuz4ue.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpz7nuz4ue.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum, mean, result = 0, mean(numbers)\n  for _, num in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(num - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzg4p5v1w.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzg4p5v1w.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzg4p5v1w.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local count = 0\n  local mean = mean(numbers)\n  for _, number\
    \ in ipairs(numbers) do\n    sum = sum + math.abs(number - mean)\n    count =\
    \ count + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9saytlf9.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9saytlf9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9saytlf9.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    -- Calculate absolute value of each x-x_mean and add them up\n    local sum\
    \ = 0\n    for _, x in ipairs(numbers) do\n        sum = sum + math.abs(x - numbers.mean)\n\
    \    end\n    -- For a given dataset and its centerpoint, divide the sum of absolute\n\
    \    -- differences by the amount of elements\n    return sum / numbers.length\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ouq5dqo.lua:10:\
    \ attempt to perform arithmetic on a nil value (field 'mean')\nstack traceback:\n\
    \t/tmp/tmp5ouq5dqo.lua:10: in local 'candidate'\n\t/tmp/tmp5ouq5dqo.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal m = mean(numbers)\n\tlocal sum = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmdxdax1a.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local mean = mean(numbers)\n  for _, v in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjtqd4o3l.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpjtqd4o3l.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpjtqd4o3l.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local mean = 0\n    local n = 0\n    local abs = math.abs\n\
    \    for _, v in ipairs(numbers) do\n        sum = sum + v\n        n = n + 1\n\
    \    end\n    mean = sum / n\n    local mad = 0\n    for _, v in ipairs(numbers)\
    \ do\n        mad = mad + abs(v - mean)\n    end\n    return mad / n\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  if #numbers < 1 then\n    return nil\n  end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpct16q7_6.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  assert(numbers, \"No numbers provided\")\n  local num_numbers = #numbers\n\
    \  if num_numbers < 2 then\n    return 0\n  end\n  local average = mean(numbers)\n\
    \  local deviations = {}\n  for _, value in ipairs(numbers) do\n    table.insert(deviations,\
    \ math.abs(value - average))\n  end\n  return mean(deviations)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbdn_g56f.lua:12:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpbdn_g56f.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpbdn_g56f.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local mad = 0\n  for _, n in ipairs(numbers)\
    \ do\n    mad = mad + math.abs(n - mean)\n  end\n  return mad / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvaoor966.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpvaoor966.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpvaoor966.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local count = 0\n    local min = math.huge\n    local\
    \ max = -math.huge\n    local mean = 0\n    local mad = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9az55pwa.lua:22: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local count = #numbers\n    local sum = 0\n    local mean = 0\n    for i\
    \ = 1, count do\n        sum = sum + numbers[i]\n    end\n    mean = sum / count\n\
    \    local sum_of_differences = 0\n    for i = 1, count do\n        sum_of_differences\
    \ = sum_of_differences + math.abs(numbers[i] - mean)\n    end\n    return sum_of_differences\
    \ / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    -- Calculate mean\n    local N = #numbers\n    local mean = 0\n    for i\
    \ = 1, N do\n        mean = mean + numbers[i]\n    end\n    mean = mean / N\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgywvjg1e.lua:23: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local n = #numbers\n  if n == 0 then\n    return nil\n  end\n  local total\
    \ = 0\n  local mean = 0\n  for _,v in ipairs(numbers) do\n    total = total +\
    \ v\n  end\n  mean = total / n\n  total = 0\n  for _,v in ipairs(numbers) do\n\
    \    total = total + math.abs(v - mean)\n  end\n  return total / n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local n = 0\n    local min = numbers[1]\n    local max\
    \ = numbers[1]\n    for _, n in ipairs(numbers) do\n        sum = sum + n\n  \
    \      n = n + 1\n        if n < min then\n            min = n\n        end\n\
    \        if n > max then\n            max = n\n        end\n    end\n    local\
    \ mean = sum / n\n    local abs_deviation_sum = 0\n    for _, n in ipairs(numbers)\
    \ do\n        abs_deviation_sum = abs_deviation_sum + math.abs(n - mean)\n   \
    \ end\n    return abs_deviation_sum / n, min, max\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5gbiz31f.lua:32:\
    \ expected: 0.5, actual: #Inf\nstack traceback:\n\t/tmp/tmp5gbiz31f.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal sum, count = 0, 0\n\tfor _, x in ipairs(numbers) do\n\t\tsum = sum + x\n\
    \t\tcount = count + 1\n\tend\n\tlocal mean = sum / count\n\tlocal mad = 0\n\t\
    for _, x in ipairs(numbers) do\n\t\tmad = mad + math.abs(x - mean)\n\tend\n\t\
    return mad / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local count = 0\n  for _, n in ipairs(numbers) do\n    sum\
    \ = sum + n\n    count = count + 1\n  end\n  local mean = sum / count\n  sum =\
    \ 0\n  for _, n in ipairs(numbers) do\n    sum = sum + math.abs(n - mean)\n  end\n\
    \  return sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum, count = 0, 0\n    for _, n in ipairs(numbers) do\n        sum\
    \ = sum + n\n        count = count + 1\n    end\n    local mean = sum / count\n\
    \    local sum_deviation, sum_abs_deviation = 0, 0\n    for _, n in ipairs(numbers)\
    \ do\n        local deviation = n - mean\n        sum_deviation = sum_deviation\
    \ + deviation\n        sum_abs_deviation = sum_abs_deviation + math.abs(deviation)\n\
    \    end\n    return sum_abs_deviation / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = calculate_mean(numbers)\n    local total = 0\n    for _, n in\
    \ ipairs(numbers) do\n        total = total + math.abs(n - mean)\n    end\n  \
    \  return total / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6v3p39b2.lua:7:\
    \ attempt to call a nil value (global 'calculate_mean')\nstack traceback:\n\t\
    /tmp/tmp6v3p39b2.lua:7: in local 'candidate'\n\t/tmp/tmp6v3p39b2.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpep5fv6yl.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpep5fv6yl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpep5fv6yl.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = average(numbers)\n    local deviation = 0\n    for i = 1, #numbers\
    \ do\n        deviation = deviation + math.abs(numbers[i] - mean)\n    end\n \
    \   return deviation / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqswszgbg.lua:7:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpqswszgbg.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpqswszgbg.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0.0\n    local count = 0\n    local sum_of_squares = 0.0\n  \
    \  local mean = 0.0\n    local dev = 0.0\n    for _, number in pairs(numbers)\
    \ do\n        sum = sum + number\n        count = count + 1\n    end\n    mean\
    \ = sum / count\n    for _, number in pairs(numbers) do\n        dev = math.abs(number\
    \ - mean)\n        sum_of_squares = sum_of_squares + dev\n    end\n    return\
    \ sum_of_squares / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local N = #numbers\n    local sum = 0\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2k0rkqpu.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local n = 0\n  local n_numbers = #numbers\n  if n_numbers\
    \ == 0 then\n    return 0\n  end\n  local mean = mean(numbers)\n  -- to mitigate\
    \ the issue of a small quantization error causing incorrect\n  -- deviance calculation,\
    \ we use a threshold equal to a single quantization\n  -- step.\n  local threshold\
    \ = 1 / 10^4\n  local abs_difference = {}\n  for i = 1, n_numbers do\n    abs_difference[i]\
    \ = abs(numbers[i] - mean)\n    if abs_difference[i] < threshold then\n      abs_difference[i]\
    \ = 0\n    end\n    sum = sum + abs_difference[i]\n    n = n + 1\n  end\n  return\
    \ sum / n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpimg9bs7f.lua:13:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpimg9bs7f.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpimg9bs7f.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum, mean = 0, mean(numbers)\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpet14x861.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpet14x861.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpet14x861.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local mean = average(numbers)\n    for i,v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw1ommzn8.lua:8:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpw1ommzn8.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpw1ommzn8.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\n    for _, v in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(v - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpep5fv6yl.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpep5fv6yl.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpep5fv6yl.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local absolute_deviations = table.map(numbers,\
    \ function(number)\n        return math.abs(number - mean)\n    end)\n    return\
    \ mean(absolute_deviations)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprx75sboz.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmprx75sboz.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmprx75sboz.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    if type(numbers) ~= \"table\" then\n        error(\"Table argument expected\"\
    , 2)\n    end\n    local total, count = 0, 0\n    for _,n in ipairs(numbers) do\n\
    \        total = total + n\n        count = count + 1\n    end\n    local mean\
    \ = total / count\n    local deviation = 0\n    for _,n in ipairs(numbers) do\n\
    \        deviation = deviation + math.abs(n - mean)\n    end\n    return deviation\
    \ / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = get_mean(numbers)\n    local sum = 0\n    for i = 1, #numbers\
    \ do\n        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return sum\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyzweef94.lua:7:\
    \ attempt to call a nil value (global 'get_mean')\nstack traceback:\n\t/tmp/tmpyzweef94.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpyzweef94.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  -- Validate input and calculate mean\n  local mean = 0\n  local count = 0\n\
    \  for _, number in ipairs(numbers) do\n    if (type(number) == \"number\") then\n\
    \      mean = mean + number\n      count = count + 1\n    end\n  end\n  if (count\
    \ == 0) then\n    return 0\n  end\n  mean = mean / count\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsc5qaa6a.lua:29: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum, _len = 0, #numbers\n  local mean = sum / _len\n  for _index_0 =\
    \ 1, #numbers do\n    local number = numbers[_index_0]\n    sum = sum + math.abs(number\
    \ - mean)\n  end\n  return sum / _len\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_4a9tbpu.lua:19:\
    \ expected: 0.5, actual: 1.5\nstack traceback:\n\t/tmp/tmp_4a9tbpu.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    if #numbers == 0 then\n        return 0\n    end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmposje8l2w.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local len = #numbers\n    if len == 0 then\n        return nil\n    end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpilhn84_x.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local count = #numbers\n  if count == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpugejsxta.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\n    for i = 1, #numbers do\n\
    \        sum = sum + math.abs(numbers[i] - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw6q3k5dh.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpw6q3k5dh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpw6q3k5dh.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal t = type(numbers)\n\tassert(t == \"table\", \"mean_absolute_deviation:\
    \ expected a table but got \" .. t)\n\tlocal N = #numbers\n\tassert(N > 0, \"\
    mean_absolute_deviation: no input numbers given\")\n\t-- Mean of the dataset\n\
    \tlocal sum = 0\n\tfor _, num in ipairs(numbers) do\n\t\tsum = sum + num\n\tend\n\
    \tlocal mean = sum / N\n\t-- Abs. differences from the mean\n\tlocal sum_abs_diffs\
    \ = 0\n\tfor _, num in ipairs(numbers) do\n\t\tsum_abs_diffs = sum_abs_diffs +\
    \ math.abs(num - mean)\n\tend\n\treturn sum_abs_diffs / N\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local mean = 0\n  for _, number in ipairs(numbers) do\n  \
    \  sum = sum + number\n  end\n  mean = sum / #numbers\n  sum = 0\n  for _, number\
    \ in ipairs(numbers) do\n    sum = sum + math.abs(number - mean)\n  end\n  return\
    \ sum / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean, sum_deviation = mean(numbers)\n  return mean, sum_deviation / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeyamu922.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpeyamu922.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpeyamu922.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \tlocal mean, num\n\t-- Calculate the mean\n\tmean = mean(numbers)\n\tnum = #numbers\n\
    \t-- Calculate the absolute differences\n\tlocal abs_diffs = {}\n\tfor i, value\
    \ in ipairs(numbers) do\n\t\tabs_diffs[i] = math.abs(value - mean)\n\tend\n\t\
    -- Return the mean of the absolute differences\n\treturn mean(abs_diffs)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp6a38l0q.lua:9:\
    \ attempt to call a nil value (local 'mean')\nstack traceback:\n\t/tmp/tmpp6a38l0q.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpp6a38l0q.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local differences = {}\n  for _, num in ipairs(numbers)\
    \ do\n    local diff = math.abs(num - mean)\n    table.insert(differences, diff)\n\
    \  end\n  return mean(differences)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf126em5m.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpf126em5m.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpf126em5m.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = table.mean(numbers)\n  local total = 0\n  for _, num in ipairs(numbers)\
    \ do\n    total = total + math.abs(num - mean)\n  end\n  return total / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2fi4nenh.lua:7:\
    \ attempt to call a nil value (field 'mean')\nstack traceback:\n\t/tmp/tmp2fi4nenh.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2fi4nenh.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local mean = 0\n  local n = 0\n  for _, n in ipairs(numbers)\
    \ do\n    sum = sum + n\n    n = n + 1\n  end\n  mean = sum / n\n  sum = 0\n \
    \ for _, n in ipairs(numbers) do\n    sum = sum + math.abs(n - mean)\n  end\n\
    \  return sum / n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyajdlfeq.lua:25:\
    \ expected: 0.5, actual: #Inf\nstack traceback:\n\t/tmp/tmpyajdlfeq.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local num_items = #numbers\n    local sum = 0\n    local mean = 0\n    local\
    \ deviation = 0\n    local deviation_sum = 0\n    for _, num in ipairs(numbers)\
    \ do\n        sum = sum + num\n    end\n    mean = sum / num_items\n    for _,\
    \ num in ipairs(numbers) do\n        deviation = math.abs(num - mean)\n      \
    \  deviation_sum = deviation_sum + deviation\n    end\n    return deviation_sum\
    \ / num_items\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  -- In case of empty list, return NAN\n  if not numbers or #numbers == 0 then\n\
    \    return math.huge\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8lvz9g5k.lua:20: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local num_numbers = 0\n  for _, num in ipairs(numbers) do\n\
    \    sum = sum + num\n    num_numbers = num_numbers + 1\n  end\n  if num_numbers\
    \ > 0 then\n    local mean = sum / num_numbers\n    local dev_sum = 0\n    for\
    \ _, num in ipairs(numbers) do\n      dev_sum = dev_sum + math.abs(num - mean)\n\
    \    end\n    return dev_sum / num_numbers\n  else\n    return 0\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum, mean, abs_deviation = 0, 0, 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + number\n    end\n    mean = sum / #numbers\n    for\
    \ _, number in ipairs(numbers) do\n        abs_deviation = abs_deviation + math.abs(number\
    \ - mean)\n    end\n    return abs_deviation / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = average(numbers)\n    local abs_diff = map(numbers, function(x)\
    \ return math.abs(x - mean) end)\n    return average(abs_diff)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzw9j8sbe.lua:7:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpzw9j8sbe.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzw9j8sbe.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local absolute_deviations = map(numbers, function(number)\n\
    \    return math.abs(number - mean)\n  end)\n  return mean(absolute_deviations)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1xdf1v1s.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp1xdf1v1s.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp1xdf1v1s.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = average(numbers)\n  local sum = 0\n  for _, v in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy1elgm7h.lua:7:\
    \ attempt to call a nil value (global 'average')\nstack traceback:\n\t/tmp/tmpy1elgm7h.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpy1elgm7h.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local _, mean = variance(numbers)\n    local mads = {}\n    for _, num in\
    \ ipairs(numbers) do\n        table.insert(mads, math.abs(num - mean))\n    end\n\
    \    return average(mads)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbj7jwtcr.lua:7:\
    \ attempt to call a nil value (global 'variance')\nstack traceback:\n\t/tmp/tmpbj7jwtcr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpbj7jwtcr.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local average = mean(numbers)\n  for _, n in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(n - average)\n  end\n  return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzynu62kl.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzynu62kl.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpzynu62kl.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local count = #numbers\n    local sum = 0\n    local mean = 0\n    local\
    \ deviation_sum = 0\n    for _, value in ipairs(numbers) do\n        sum = sum\
    \ + value\n    end\n    mean = sum / count\n    for _, value in ipairs(numbers)\
    \ do\n        deviation_sum = deviation_sum + math.abs(value - mean)\n    end\n\
    \    return deviation_sum / count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local count = 0\n  local mean = mean(numbers)\n  for _,x in\
    \ ipairs(numbers) do\n    sum = sum + math.abs(x - mean)\n    count = count +\
    \ 1\n  end\n  return (sum / count)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpab449kxu.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpab449kxu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpab449kxu.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  -- get input values\n  local numbers = numbers\n  -- assume the mean of the\
    \ dataset is the centerpoint\n  local centerpoint = mean(numbers)\n  -- calculate\
    \ absolute differences between the centerpoint and each input\n  -- value, then\
    \ sum and average them.\n  local abs_differences = {}\n  for i,v in ipairs(numbers)\
    \ do\n    abs_differences[i] = math.abs(v - centerpoint)\n  end\n  local abs_differences_sum\
    \ = 0\n  for i,v in ipairs(abs_differences) do\n    abs_differences_sum = abs_differences_sum\
    \ + v\n  end\n  local mean_absolute_deviation = abs_differences_sum / #numbers\n\
    \  return mean_absolute_deviation\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqvga1a4d.lua:10:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpqvga1a4d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpqvga1a4d.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local n = 0\n  local mean = mean(numbers)\n  for i, v in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(v - mean)\n    n = n + 1\n  end\n  return sum /\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n\
    \    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0lprkwtm.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp0lprkwtm.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0lprkwtm.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local abs = math.abs\n  local sum = 0\n  for\
    \ _,x in ipairs(numbers) do\n    sum = sum + abs(x - mean)\n  end\n  return sum\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyuwsljhv.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpyuwsljhv.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpyuwsljhv.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local deviations = {}\n    for _, number\
    \ in ipairs(numbers) do\n        table.insert(deviations, math.abs(number - mean))\n\
    \    end\n    return mean(deviations)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplqhspvb4.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmplqhspvb4.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmplqhspvb4.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local _, mean = mean_and_stddev(numbers)\n  local sum = 0\n  for _, x in ipairs(numbers)\
    \ do\n    sum = sum + math.abs(x - mean)\n  end\n  return sum / #numbers\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp8v4128y.lua:7:\
    \ attempt to call a nil value (global 'mean_and_stddev')\nstack traceback:\n\t\
    /tmp/tmpp8v4128y.lua:7: in local 'candidate'\n\t/tmp/tmpp8v4128y.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  if not numbers or #numbers == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkqjhtfxx.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local count = 0\n    local mean = mean(numbers)\n    for\
    \ _, x in ipairs(numbers) do\n        sum = sum + math.abs(x - mean)\n       \
    \ count = count + 1\n    end\n    return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpctupzd__.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpctupzd__.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpctupzd__.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local total = 0\n    local mean = mean(numbers)\n    for _, num in ipairs(numbers)\
    \ do\n        total = total + math.abs(num - mean)\n    end\n    return total\
    \ / #numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0, 2.0}),\
    \ 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4bpc9_1p.lua:8:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp4bpc9_1p.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp4bpc9_1p.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local count = 0\n  local mean = mean(numbers)\n  for _, number\
    \ in ipairs(numbers) do\n    sum = sum + math.abs(number - mean)\n    count =\
    \ count + 1\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9saytlf9.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp9saytlf9.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp9saytlf9.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  if not numbers or #numbers == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkqjhtfxx.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local diffs = {}\n  for i, number in ipairs(numbers)\
    \ do\n    diffs[i] = math.abs(number - mean)\n  end\n  return mean(diffs)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcecx_g8w.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpcecx_g8w.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpcecx_g8w.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  if not numbers or #numbers == 0 then\n    return nil\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkqjhtfxx.lua:19: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum, mean, abs_deviation_sum = 0, 0, 0\n    for _, x in ipairs(numbers)\
    \ do\n        sum = sum + x\n    end\n    mean = sum / #numbers\n    for _, x\
    \ in ipairs(numbers) do\n        abs_deviation_sum = abs_deviation_sum + math.abs(x\
    \ - mean)\n    end\n    return abs_deviation_sum / #numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local accumulator = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvdxijpbb.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = (reduce(numbers, function(a, b) return a + b end) / #numbers)\n\
    \    local absolute_deviations = map(numbers, function(number)\n        return\
    \ math.abs(number - mean)\n    end)\n    return reduce(absolute_deviations, function(a,\
    \ b) return a + b end) / #absolute_deviations\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2s39jfde.lua:7:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmp2s39jfde.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2s39jfde.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 0
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local sum = 0\n  local mean = 0\n  local count = 0\n  local max, min\n  for\
    \ _,n in ipairs(numbers) do\n    if not min or n < min then min = n end\n    if\
    \ not max or n > max then max = n end\n    sum = sum + n\n    count = count +\
    \ 1\n  end\n  if count > 0 then\n    mean = sum / count\n  end\n  if min == max\
    \ then\n    return 0\n  end\n  sum = 0\n  for _,n in ipairs(numbers) do\n    sum\
    \ = sum + math.abs(n - mean)\n  end\n  return sum / count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local sum = 0\n    local n = 0\n    local mean = mean(numbers)\n    for i\
    \ = 1, #numbers do\n        n = n + 1\n        sum = sum + math.abs(numbers[i]\
    \ - mean)\n    end\n    return sum / n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2_gd6hnk.lua:9:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2_gd6hnk.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2_gd6hnk.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  local mean = mean(numbers)\n  local sum = 0\n  for _,v in ipairs(numbers) do\n\
    \    sum = sum + math.abs(v - mean)\n  end\n  return sum / #numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrsj16v2.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpzrsj16v2.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpzrsj16v2.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local mean = mean(numbers)\n    local sum = 0\n    for _, number in ipairs(numbers)\
    \ do\n        sum = sum + math.abs(number - mean)\n    end\n    return sum / #numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n\
    \    lu.assertEquals(candidate({1.0, 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0,\
    \ 2.0, 3.0, 4.0}), 1.0)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
    \ 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu64ibnhr.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmpu64ibnhr.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmpu64ibnhr.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local average = mean(numbers)\n    local abs_deviations = {}\n    for _,\
    \ x in ipairs(numbers) do\n        table.insert(abs_deviations, math.abs(x - average))\n\
    \    end\n    return mean(abs_deviations)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2jgcpr_t.lua:7:\
    \ attempt to call a nil value (global 'mean')\nstack traceback:\n\t/tmp/tmp2jgcpr_t.lua:7:\
    \ in local 'candidate'\n\t/tmp/tmp2jgcpr_t.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \    local average = mean(numbers)\n    local sum = 0\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk7r0r2oj.lua:18: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
- exit_code: 1
  program: "-- For a given list of input numbers, calculate Mean Absolute Deviation\n\
    -- around the mean of this dataset.\n-- Mean Absolute Deviation is the average\
    \ absolute difference between each\n-- element and a centerpoint (mean in this\
    \ case):\n-- MAD = average | x - x_mean |\nlocal function mean_absolute_deviation(numbers)\n\
    \  -- Calculate mean.\n  local sum = 0\n  for _, x in ipairs(numbers) do\n   \
    \ sum = sum + x\n  end\n  local x_mean = sum / #numbers\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = mean_absolute_deviation\n    lu.assertEquals(candidate({1.0,\
    \ 2.0}), 0.5)\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0}), 1.0)\n   \
    \ lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}), 1.2)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnggpf0dy.lua:22: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659822037
