language: lua
name: HumanEval_26_remove_duplicates
results:
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local out = {}\n    local hash = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not hash[v] then\n            hash[v] = true\n            out[#out\
    \ + 1] = v\n        end\n    end\n    return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp51c9npzm.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp51c9npzm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local result = {}\n    local seen = {}\n    for _, value in ipairs(numbers)\
    \ do\n        if not seen[value] then\n            result[#result + 1] = value\n\
    \            seen[value] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph45s2iol.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmph45s2iol.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, number in ipairs(numbers) do\n    unique[number]\
    \ = true\n  end\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if unique[number] then\n      result[#result + 1] = number\n      unique[number]\
    \ = nil\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkpztpf2k.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpkpztpf2k.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local result = {}\n    for n in iterator(numbers) do\n\
    \        if not seen[n] then\n            seen[n] = true\n            result[#result\
    \ + 1] = n\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpakf8te7p.lua:6:\
    \ attempt to call a nil value (global 'iterator')\nstack traceback:\n\t/tmp/tmpakf8te7p.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpakf8te7p.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\t\t\
    if not seen[n] then\n\t\t\ttable.insert(result, n)\n\t\t\tseen[n] = true\n\t\t\
    end\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvodayhbz.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpvodayhbz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local set = {}\n  local result = {}\n  for _, value in ipairs(numbers) do\n\
    \    if not set[value] then\n      set[value] = true\n      table.insert(result,\
    \ value)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc2ity965.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpc2ity965.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\t\t\
    if not seen[n] then\n\t\t\tresult[#result + 1] = n\n\t\t\tseen[n] = true\n\t\t\
    end\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bpv6llk.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp9bpv6llk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local t = {}\n  for _, n in ipairs(numbers) do\n    if not t[n] then\n    \
    \  t[n] = true\n      coroutine.yield(n)\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodjs8cgz.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpodjs8cgz.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal set = {}\n\tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\
    \t\tif not set[number] then\n\t\t\tset[number] = true\n\t\t\ttable.insert(result,\
    \ number)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1q9z3bmq.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp1q9z3bmq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for _, n in ipairs(numbers) do\n  \
    \  if not seen[n] then\n      table.insert(result, n)\n      seen[n] = true\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihlhe6mp.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpihlhe6mp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local list = {}\n    for _,n in ipairs(numbers) do\n        if not list[n]\
    \ then\n            list[n] = true\n            coroutine.yield(n)\n        end\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjylg6imh.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpjylg6imh.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local unique = {}\n  for _, num in ipairs(numbers) do\n\
    \    if not seen[num] then\n      unique[#unique + 1] = num\n      seen[num] =\
    \ true\n    end\n  end\n  return unique\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjivtzfb8.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpjivtzfb8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local output = {}\n    local tmp = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not tmp[v] then\n            tmp[v] = true\n            table.insert(output,\
    \ v)\n        end\n    end\n    return output\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpky_m0zwd.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpky_m0zwd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    -- We do this with a Lua table mapping the numbers we've already seen\n \
    \   -- to \"true\".\n    local seen = {}\n    local result = {}\n    for _, n\
    \ in ipairs(numbers) do\n        if not seen[n] then\n            seen[n] = true\n\
    \            table.insert(result, n)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi613zvoh.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpi613zvoh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local duplicates = {}\n    local unique = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not duplicates[number] then\n            duplicates[number] =\
    \ true\n            table.insert(unique, number)\n        end\n    end\n    return\
    \ unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmponusz7lu.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmponusz7lu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local results = {}\n    local tracker = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not tracker[number] then\n            results[#results + 1] =\
    \ number\n            tracker[number] = true\n        end\n    end\n    return\
    \ results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkl4tj1ay.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpkl4tj1ay.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local o = {}\n  local s = {}\n  for _, v in ipairs(numbers) do\n    if not\
    \ s[v] then\n      o[#o+1] = v\n      s[v] = true\n    end\n  end\n  return o\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f0wm_w7.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp8f0wm_w7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local output = {}\n  local met = {}\n  for _,n in ipairs(numbers) do\n    if\
    \ not met[n] then\n      output[#output+1] = n\n      met[n] = true\n    end\n\
    \  end\n  return output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpotkezrd0.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpotkezrd0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local list = {}\n  for _, n in ipairs(numbers) do\n    if not list[n] then\n\
    \      list[n] = true\n      coroutine.yield(n)\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphyb1dhkx.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmphyb1dhkx.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local result = {}\n    local found = {}\n    for _, i in ipairs(numbers)\
    \ do\n        if not found[i] then\n            table.insert(result, i)\n    \
    \        found[i] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxzfx6ir8.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxzfx6ir8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local uniques = {}\n  local result = {}\n  for i, number in ipairs(numbers)\
    \ do\n    if not uniques[number] then\n      result[#result + 1] = number\n  \
    \    uniques[number] = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3tdesa32.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp3tdesa32.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local number_set = {}\n  local unique_numbers = {}\n  for i, number in ipairs(numbers)\
    \ do\n    if not number_set[number] then\n      number_set[number] = true\n  \
    \    table.insert(unique_numbers, number)\n    end\n  end\n  return unique_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmirw6pe4.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpmirw6pe4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local set = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n   \
    \ if not set[n] then\n      set[n] = true\n      table.insert(result, n)\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq2bfyap.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpcq2bfyap.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpiuax7g.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmplpiuax7g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local no_dups = {}\n    local flags = {}\n    for i, v in ipairs(numbers)\
    \ do\n        if not flags[v] then\n            table.insert(no_dups, v)\n   \
    \         flags[v] = true\n        end\n    end\n    return no_dups\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7qefhop.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpq7qefhop.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal count = {}\n\tlocal result = {}\n\tfor _,v in ipairs(numbers) do\n\t\t\
    if not count[v] then\n\t\t\tcount[v] = true\n\t\t\ttable.insert(result, v)\n\t\
    \tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp232sg7ua.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp232sg7ua.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local tab = {}\n  for _, n in ipairs(numbers) do\n    if not tab[n] then\n\
    \      tab[n] = true\n    else\n      tab[n] = nil\n    end\n  end\n  local result\
    \ = {}\n  for n in pairs(tab) do\n    table.insert(result, n)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local no_dupes = {}\n  local numbers_count = {}\n  for i, v in ipairs(numbers)\
    \ do\n    if not numbers_count[v] then\n      numbers_count[v] = 1\n      no_dupes[#no_dupes\
    \ + 1] = v\n    else\n      numbers_count[v] = numbers_count[v] + 1\n    end\n\
    \  end\n  return no_dupes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxkbljqbn.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxkbljqbn.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local found = {}\n  local cleaned = {}\n  for _, n in ipairs(numbers) do\n\
    \    if not found[n] then\n      table.insert(cleaned, n)\n      found[n] = true\n\
    \    end\n  end\n  return cleaned\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlvujvc4.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpqlvujvc4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal found = {}\n\tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\
    \t\tif not found[number] then\n\t\t\ttable.insert(result, number)\n\t\t\tfound[number]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpacqeplgz.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpacqeplgz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local out = {}\n    local seen = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(out, number)\n\
    \            seen[number] = true\n        end\n    end\n    return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmrgw21yy.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpmrgw21yy.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local result = {}\n    local seen = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            result[#result + 1] = number\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwktg5_p_.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpwktg5_p_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \t-- TODO: Implement me\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46vgbzg8.lua:10:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp46vgbzg8.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3c37ost.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpp3c37ost.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local unique = {}\n    for _, v in ipairs(numbers) do\n        if unique[v]\
    \ then\n            unique[v] = nil\n        else\n            unique[v] = true\n\
    \        end\n    end\n    local r = {}\n    for v, _ in pairs(unique) do\n  \
    \      r[#r + 1] = v\n    end\n    return r\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for i, number in ipairs(numbers) do\n    unique[number]\
    \ = i\n  end\n  local result = {}\n  for i, number in ipairs(numbers) do\n   \
    \ if unique[number] == i then\n      result[#result + 1] = number\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppq9unzv9.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmppq9unzv9.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  for i = #numbers, 1, -1 do\n    local n = numbers[i]\n \
    \   if seen[n] then\n      table.remove(numbers, i)\n    else\n      seen[n] =\
    \ true\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5wa0ut3l.lua:18:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp5wa0ut3l.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local previous = {}\n  local result = {}\n  for _, x in ipairs(numbers) do\n\
    \    if not previous[x] then\n      previous[x] = true\n      table.insert(result,\
    \ x)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpro0ksw0h.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpro0ksw0h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tlocal removed = {}\n\tfor i, number in ipairs(numbers) do\n\
    \t\tif seen[number] then\n\t\t\tremoved[#removed + 1] = number\n\t\telse\n\t\t\
    \tseen[number] = true\n\t\tend\n\tend\n\tfor _, number in ipairs(removed) do\n\
    \t\tfor i, val in ipairs(numbers) do\n\t\t\tif val == number then\n\t\t\t\ttable.remove(numbers,\
    \ i)\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\tend\n\treturn numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprgai4p17.lua:29:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmprgai4p17.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tlocal result = {}\n\tfor _, v in ipairs(numbers) do\n\t\t\
    if not seen[v] then\n\t\t\ttable.insert(result, v)\n\t\t\tseen[v] = true\n\t\t\
    end\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4i6tv5sk.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp4i6tv5sk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  for _,n in ipairs(numbers) do\n    seen[n] = true\n  end\n\
    \  local out = {}\n  for _,n in ipairs(numbers) do\n    if seen[n] then\n    \
    \  seen[n] = nil\n      table.insert(out, n)\n    end\n  end\n  return out\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppcxb0p28.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmppcxb0p28.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local number_set = {}\n    local output = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not number_set[number] then\n            table.insert(output,\
    \ number)\n            number_set[number] = true\n        end\n    end\n    return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvlewf1wo.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpvlewf1wo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local unique = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ unique[number] then\n            unique[number] = true\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            table.insert(result, number)\n            unique[number] =\
    \ nil\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjd0_s5p.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpnjd0_s5p.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal list = {}\n\tfor i = 1, #numbers do\n\t\tlocal number = numbers[i]\n\t\
    \tif list[number] == nil then\n\t\t\tlist[number] = true\n\t\telse\n\t\t\tlist[number]\
    \ = false\n\t\tend\n\tend\n\tlocal new_list = {}\n\tfor i = 1, #numbers do\n\t\
    \tlocal number = numbers[i]\n\t\tif list[number] then\n\t\t\tnew_list[#new_list\
    \ + 1] = number\n\t\tend\n\tend\n\treturn new_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local no_duplicates = {}\n    for _, num in ipairs(numbers)\
    \ do\n        if not seen[num] then\n            table.insert(no_duplicates, num)\n\
    \            seen[num] = true\n        end\n    end\n    return no_duplicates\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3gxgakix.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp3gxgakix.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local result = {}\n    local seen = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not seen[v] then\n            table.insert(result, v)\n          \
    \  seen[v] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok56xur2.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpok56xur2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local uniques = {}\n    local sorted = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not uniques[number] then\n            uniques[number] = true\n\
    \            table.insert(sorted, number)\n        end\n    end\n    return sorted\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzq7cvm1t.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpzq7cvm1t.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for i, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      seen[number] = true\n      result[#result\
    \ + 1] = number\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq70i598.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfq70i598.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal result = {}\n\tlocal hash = {}\n\tfor _, value in ipairs(numbers) do\n\
    \t\tif not hash[value] then\n\t\t\tresult[#result + 1] = value\n\t\t\thash[value]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rqgm7fa.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp3rqgm7fa.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local s = Set.new(numbers)\n  local res = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if s:has(n) then\n      s:remove(n)\n      table.insert(res, n)\n  \
    \  end\n  end\n  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4s7sw1_8.lua:4:\
    \ attempt to index a nil value (global 'Set')\nstack traceback:\n\t/tmp/tmp4s7sw1_8.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmp4s7sw1_8.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local set = {}\n    local i = 1\n    while i <= #numbers do\n        local\
    \ number = numbers[i]\n        if set[number] then\n            remove(numbers,\
    \ i)\n        else\n            set[number] = true\n            i = i + 1\n  \
    \      end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq0nhl_4.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpoq0nhl_4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal set = {}\n\tlocal result = {}\n\tfor _,v in ipairs(numbers) do\n\t\tif\
    \ not set[v] then\n\t\t\tset[v] = true\n\t\t\ttable.insert(result, v)\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplx2lrq79.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmplx2lrq79.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal out = {}\n\tlocal seen = {}\n\tfor _, v in ipairs(numbers) do\n\t\tif\
    \ not seen[v] then\n\t\t\ttable.insert(out, v)\n\t\t\tseen[v] = true\n\t\tend\n\
    \tend\n\treturn out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjaj8lz2u.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpjaj8lz2u.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for i = 1, #numbers do\n    local number = numbers[i]\n\
    \    if not unique[number] then\n      unique[number] = true\n    else\n     \
    \ numbers[i] = nil\n    end\n  end\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpatwt67_u.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 5=4, 7=5}\nstack traceback:\n\t/tmp/tmpatwt67_u.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local is_a_member = {}\n    local unique_numbers = {}\n    for _, number\
    \ in ipairs(numbers) do\n        if not is_a_member[number] then\n           \
    \ table.insert(unique_numbers, number)\n            is_a_member[number] = true\n\
    \        end\n    end\n    return unique_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz9cjj55u.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpz9cjj55u.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local unique = {}\n    for _, v in ipairs(numbers) do\n        if not unique[v]\
    \ then\n            unique[v] = true\n        end\n    end\n    local new_list\
    \ = {}\n    for _, v in ipairs(numbers) do\n        if unique[v] then\n      \
    \      table.insert(new_list, v)\n            unique[v] = nil\n        end\n \
    \   end\n    return new_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaniv888x.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpaniv888x.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal hash = {}\n\tlocal output = {}\n\tfor _, number in ipairs(numbers) do\n\
    \t\tif not hash[number] then\n\t\t\thash[number] = true\n\t\t\ttable.insert(output,\
    \ number)\n\t\tend\n\tend\n\treturn output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9nbmtxb2.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp9nbmtxb2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, v in ipairs(numbers) do\n  \
    \  if not seen[v] then\n      result[#result + 1] = v\n      seen[v] = true\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprlnpnqu1.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmprlnpnqu1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local set = {}\n  local no_duplicates = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not set[number] then\n      table.insert(no_duplicates, number)\n\
    \      set[number] = true\n    end\n  end\n  return no_duplicates\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq87o8bj9.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpq87o8bj9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local remaining = {}\n    local used = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not used[n] then\n            remaining[#remaining + 1] = n\n\
    \            used[n] = true\n        end\n    end\n    return remaining\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58o8x_bl.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp58o8x_bl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal unique = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif not unique[n] then\n\
    \t\t\tunique[n] = true\n\t\tend\n\tend\n\tlocal result = {}\n\tfor _, n in ipairs(numbers)\
    \ do\n\t\tif unique[n] then\n\t\t\ttable.insert(result, n)\n\t\t\tunique[n] =\
    \ nil\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8kat88_.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpf8kat88_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local result = {}\n    local seen = {}\n    for _, n in ipairs(numbers) do\n\
    \        if not seen[n] then\n            result[#result + 1] = n\n          \
    \  seen[n] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwifywle_.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpwifywle_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local counted = {}\n  for _, v in ipairs(numbers) do\n\
    \    counted[v] = (counted[v] or 0) + 1\n  end\n  for _, v in ipairs(numbers)\
    \ do\n    if counted[v] == 1 then\n      table.insert(result, v)\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\
    \t\tif not seen[number] then\n\t\t\ttable.insert(result, number)\n\t\t\tseen[number]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ptdu9gm.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp8ptdu9gm.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local keepers = {}\n    local uniques = {}\n    for _, value in ipairs(numbers)\
    \ do\n        if not keepers[value] then\n            keepers[value] = true\n\
    \            table.insert(uniques, value)\n        end\n    end\n    return uniques\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoevrs5fq.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpoevrs5fq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local ordered_set = ordered_set()\n  local result = {}\n  for _, number in\
    \ ipairs(numbers) do\n    if not ordered_set[number] then\n      table.insert(result,\
    \ number)\n      ordered_set[number] = true\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph__33sv_.lua:4:\
    \ attempt to call a nil value (global 'ordered_set')\nstack traceback:\n\t/tmp/tmph__33sv_.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmph__33sv_.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvyf7n_72.lua:10:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvyf7n_72.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for i = 1, #numbers do\n    local value\
    \ = numbers[i]\n    if not seen[value] then\n      result[#result + 1] = value\n\
    \      seen[value] = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw36eejqz.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpw36eejqz.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal i, j = 1, #numbers\n\twhile i <= j do\n\t\tlocal x = numbers[i]\n\t\t\
    local k = i + 1\n\t\twhile k <= j do\n\t\t\tif numbers[k] == x then\n\t\t\t\t\
    numbers[k], numbers[j] = numbers[j], numbers[k]\n\t\t\t\tj = j - 1\n\t\t\telse\n\
    \t\t\t\tk = k + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_glya12.lua:26:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 5, 4, 3, 2}\nstack traceback:\n\t/tmp/tmpl_glya12.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal last = nil\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\t\t\
    if n ~= last then\n\t\t\tresult[#result + 1] = n\n\t\t\tlast = n\n\t\tend\n\t\
    end\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpix3tp2_w.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpix3tp2_w.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            seen[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj117llzj.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpj117llzj.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local found = {}\n    local new_list = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not found[n] then\n            new_list[#new_list + 1] = n\n\
    \            found[n] = true\n        end\n    end\n    return new_list\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfj6oxooo.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfj6oxooo.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \t-- we use a hash to keep track of unique elements\n\tlocal unique = {}\n\tfor\
    \ _, number in ipairs(numbers) do\n\t\tunique[number] = true\n\tend\n\t-- now\
    \ we can go through the unique keys\n\tlocal result = {}\n\tfor number in pairs(unique)\
    \ do\n\t\tresult[#result + 1] = number\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpobd3i191.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpobd3i191.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tlocal result = {}\n\tfor _, item in ipairs(numbers) do\n\t\
    \tif not seen[item] then\n\t\t\ttable.insert(result, item)\n\t\t\tseen[item] =\
    \ true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcd8nts69.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpcd8nts69.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _,v in ipairs(numbers) do\n   \
    \ if not seen[v] then\n      table.insert(result, v)\n      seen[v] = true\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1icwaanv.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp1icwaanv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal result = {}\n\tlocal used = {}\n\tfor _, number in ipairs(numbers) do\n\
    \t\tif not used[number] then\n\t\t\tresult[#result + 1] = number\n\t\t\tused[number]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5snsmdf.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpv5snsmdf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local unique = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not seen[v] then\n            table.insert(unique, v)\n          \
    \  seen[v] = true\n        end\n    end\n    return unique\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptk13p8f7.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmptk13p8f7.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal output = {}\n\tlocal duplicate_check = {}\n\tfor i = 1, #numbers do\n\t\
    \tlocal number = numbers[i]\n\t\tif duplicate_check[number] == nil then\n\t\t\t\
    duplicate_check[number] = true\n\t\t\toutput[#output + 1] = number\n\t\tend\n\t\
    end\n\treturn output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0_pa7rx.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpf0_pa7rx.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    -- IMPLEMENT THIS FUNCTION\n    -- remove duplicates\n    local non_duplicate_numbers\
    \ = {}\n    local number_count = {}\n    for _, number in ipairs(numbers) do\n\
    \        if number_count[number] == nil then\n            number_count[number]\
    \ = 1\n        else\n            number_count[number] = number_count[number] +\
    \ 1\n        end\n    end\n    for _, number in ipairs(numbers) do\n        if\
    \ number_count[number] == 1 then\n            table.insert(non_duplicate_numbers,\
    \ number)\n        end\n    end\n    return non_duplicate_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local all_numbers = {}\n  local unique_numbers = {}\n  for i, v in ipairs(numbers)\
    \ do\n    if all_numbers[v] == nil then\n      all_numbers[v] = true\n      unique_numbers[#unique_numbers\
    \ + 1] = v\n    end\n  end\n  return unique_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkzw_8er.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmptkzw_8er.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    -- Check each number, if it is in the set, remove it. Otherwise, add it.\n\
    \    local numbers_map = {}\n    local unique_numbers = {}\n    for i, v in ipairs(numbers)\
    \ do\n        if numbers_map[v] then\n            numbers_map[v] = numbers_map[v]\
    \ + 1\n        else\n            numbers_map[v] = 1\n        end\n    end\n  \
    \  for i, v in ipairs(numbers) do\n        if numbers_map[v] == 1 then\n     \
    \       table.insert(unique_numbers, v)\n        end\n    end\n    return unique_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen_values = {}\n    local output = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen_values[number] then\n            table.insert(output,\
    \ number)\n            seen_values[number] = true\n        end\n    end\n    return\
    \ output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp072nk1bq.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp072nk1bq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local n = {}\n  for _, v in ipairs(numbers) do\n    if not n[v] then\n    \
    \  n[v] = true\n      coroutine.yield(v)\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvwle_xz0.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpvwle_xz0.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal ret = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif not table.contains(ret,\
    \ n) then\n\t\t\ttable.insert(ret, n)\n\t\tend\n\tend\n\treturn ret\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpodyaa54n.lua:6:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpodyaa54n.lua:6:\
    \ in local 'candidate'\n\t/tmp/tmpodyaa54n.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local value_counts = {}\n  for _, value in ipairs(numbers) do\n    value_counts[value]\
    \ = (value_counts[value] or 0) + 1\n  end\n  local unique_values = {}\n  for _,\
    \ value in ipairs(numbers) do\n    if value_counts[value] == 1 then\n      table.insert(unique_values,\
    \ value)\n    end\n  end\n  return unique_values\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for i, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vb4hpjz.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp_vb4hpjz.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\
    \t\tif not seen[number] then\n\t\t\tresult[#result + 1] = number\n\t\t\tseen[number]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon17s4ci.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpon17s4ci.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tassert(type(numbers) == \"table\")\n\tlocal result = {}\n\tlocal occurrences\
    \ = {}\n\tfor _, number in ipairs(numbers) do\n\t\tif not occurrences[number]\
    \ then\n\t\t\toccurrences[number] = 1\n\t\t\ttable.insert(result, number)\n\t\t\
    end\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnp5wo622.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpnp5wo622.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local deduped = {}\n    local used = {}\n    for _, v in ipairs(numbers)\
    \ do\n        if not used[v] then\n            table.insert(deduped, v)\n    \
    \        used[v] = true\n        end\n    end\n    return deduped\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq3bqudd.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpoq3bqudd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local numbers_seen = {}\n  local unique_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not numbers_seen[number] then\n      table.insert(unique_numbers,\
    \ number)\n      numbers_seen[number] = true\n    end\n  end\n  return unique_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0db5m9ay.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp0db5m9ay.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal visited = {}\n\tlocal result = {}\n\tfor _, i in ipairs(numbers) do\n\t\
    \tif not visited[i] then\n\t\t\tvisited[i] = true\n\t\t\ttable.insert(result,\
    \ i)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb1oqxazn.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpb1oqxazn.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen_numbers = {}\n  local distinct_numbers = {}\n  for _, number in\
    \ ipairs(numbers) do\n    if not seen_numbers[number] then\n      table.insert(distinct_numbers,\
    \ number)\n      seen_numbers[number] = true\n    end\n  end\n  return distinct_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphpydf805.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmphpydf805.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, value in ipairs(numbers) do\n    unique[value]\
    \ = true\n  end\n  local output = {}\n  for _, value in ipairs(numbers) do\n \
    \   if unique[value] then\n      output[#output + 1] = value\n      unique[value]\
    \ = nil\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphopd256c.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmphopd256c.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, n in ipairs(numbers) do\n    if not unique[n] then\n\
    \      unique[n] = true\n    end\n  end\n  local result = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if unique[n] then\n      result[#result + 1] = n\n      unique[n] =\
    \ nil\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_grfwae.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpy_grfwae.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for i, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      seen[number] = true\n      result[#result\
    \ + 1] = number\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfq70i598.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpfq70i598.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, value in ipairs(numbers) do\n    unique[value]\
    \ = 1\n  end\n  local results = {}\n  for value, _ in pairs(unique) do\n    table.insert(results,\
    \ value)\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu59b40vg.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpu59b40vg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local found = {}\n    local result = {}\n    for i, v in ipairs(numbers)\
    \ do\n        if found[v] == nil then\n            result[#result + 1] = v\n \
    \           found[v] = true\n        end\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmply89k83y.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmply89k83y.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local sorted = { }\n  for _, number in ipairs(numbers) do\n    sorted[number]\
    \ = (sorted[number] or 0) + 1\n  end\n  local unique = { }\n  for _, number in\
    \ ipairs(numbers) do\n    if sorted[number] == 1 then\n      unique[#unique +\
    \ 1] = number\n    end\n  end\n  return unique\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local found = {}\n    local result = {}\n    for k, v in ipairs(numbers)\
    \ do\n        if not found[v] then\n            table.insert(result, v)\n    \
    \        found[v] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxhv5ovgq.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxhv5ovgq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local result = {}\n    local seen = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not seen[v] then\n            table.insert(result, v)\n          \
    \  seen[v] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok56xur2.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpok56xur2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal map = {}\n\tlocal result = {}\n\tfor i, x in ipairs(numbers) do\n\t\t\
    if not map[x] then\n\t\t\tmap[x] = true\n\t\t\tresult[#result + 1] = x\n\t\tend\n\
    \tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqnfgmzel.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpqnfgmzel.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local done = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not done[number] then\n            done[number] = true\n    \
    \        table.insert(result, number)\n        end\n    end\n    return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7hdg8wf.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpb7hdg8wf.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local out = {}\n    local seen = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not seen[v] then\n            table.insert(out, v)\n            seen[v]\
    \ = true\n        end\n    end\n    return out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjjnvgo_m.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpjjnvgo_m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local uniques = {}\n    local results = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not uniques[number] then\n            uniques[number] = true\n\
    \            table.insert(results, number)\n        end\n    end\n    return results\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqncru1oy.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpqncru1oy.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local results = {}\n  local seen = {}\n  for _,v in ipairs(numbers) do\n  \
    \  if not seen[v] then\n      table.insert(results, v)\n      seen[v] = true\n\
    \    end\n  end\n  return results\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0cs10ni.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpp0cs10ni.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local found = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not found[number] then\n            table.insert(result, number)\n\
    \            found[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplqg1p6d3.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmplqg1p6d3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local counts = {}\n    for _, number in ipairs(numbers) do\n        counts[number]\
    \ = (counts[number] or 0) + 1\n    end\n    local non_duplicates = {}\n    for\
    \ _, number in ipairs(numbers) do\n        if counts[number] == 1 then\n     \
    \       table.insert(non_duplicates, number)\n        end\n    end\n    return\
    \ non_duplicates\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, n in ipairs(numbers) do\n    unique[n] = true\n\
    \  end\n  local result = {}\n  for _, n in ipairs(numbers) do\n    if unique[n]\
    \ then\n      table.insert(result, n)\n      unique[n] = nil\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjj4wnh0s.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpjj4wnh0s.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local numbers_set = {}\n  local result = {}\n  for i, n in ipairs(numbers)\
    \ do\n    if not numbers_set[n] then\n      numbers_set[n] = true\n      result[#result\
    \ + 1] = n\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcw16d3ho.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpcw16d3ho.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal output = {}\n\tlocal function handler(i)\n\t\tif not contains(output,\
    \ i) then\n\t\t\ttable.insert(output, i)\n\t\tend\n\tend\n\ttable.foreach(numbers,\
    \ handler)\n\treturn output\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2ixt280.lua:10:\
    \ attempt to call a nil value (field 'foreach')\nstack traceback:\n\t/tmp/tmps2ixt280.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmps2ixt280.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, n in ipairs(numbers) do\n    if not unique[n] then\n\
    \      unique[n] = true\n    end\n  end\n  return unique\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphbz37ma5.lua:17:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmphbz37ma5.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal cache = {}\n\tlocal result = {}\n\tfor _, number in ipairs(numbers) do\n\
    \t\tif not cache[number] then\n\t\t\tcache[number] = true\n\t\t\tresult[#result\
    \ + 1] = number\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcaoyow8z.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpcaoyow8z.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, number in ipairs(numbers) do\n    if not unique[number]\
    \ then\n      unique[number] = true\n    end\n  end\n  local result = {}\n  for\
    \ _, number in ipairs(numbers) do\n    if unique[number] then\n      table.insert(result,\
    \ number)\n      unique[number] = nil\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsuygeaxc.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpsuygeaxc.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n  \
    \  if not seen[n] then\n      table.insert(result, n)\n      seen[n] = true\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe6q972kd.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpe6q972kd.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal result = {}\n\tlocal used = {}\n\tfor i,v in ipairs(numbers) do\n\t\t\
    if used[v] then\n\t\t\tused[v] = 2\n\t\telse\n\t\t\tused[v] = 1\n\t\t\tresult[#result+1]\
    \ = v\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3mt2vr4j.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp3mt2vr4j.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tlocal result = {}\n\tfor i, number in ipairs(numbers) do\n\
    \t\tif not seen[number] then\n\t\t\tresult[#result + 1] = number\n\t\t\tseen[number]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_e06jdkq.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp_e06jdkq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local result = {}\n    local duplicates = {}\n    for _, x in ipairs(numbers)\
    \ do\n        if duplicates[x] then\n            duplicates[x] = nil\n       \
    \ elseif result[x] then\n            duplicates[x] = true\n        else\n    \
    \        result[x] = true\n        end\n    end\n    local values = {}\n    for\
    \ k, _ in pairs(result) do\n        table.insert(values, k)\n    end\n    return\
    \ values\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5qh2_k4.lua:27:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx5qh2_k4.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal result = {}\n\tlocal already_seen = {}\n\tfor _, v in ipairs(numbers)\
    \ do\n\t\tif not already_seen[v] then\n\t\t\ttable.insert(result, v)\n\t\t\talready_seen[v]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdt7u7li4.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpdt7u7li4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local uniques = {}\n  local seen = {}\n  for _, n in ipairs(numbers) do\n \
    \   if not seen[n] then\n      table.insert(uniques, n)\n      seen[n] = true\n\
    \    end\n  end\n  return uniques\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeae38pm6.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpeae38pm6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    return filter(numbers, function(x) return unique(numbers, x) end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdf9niu1e.lua:4:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpdf9niu1e.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpdf9niu1e.lua:10: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local i = 1\n  while i <= #numbers do\n    local n = numbers[i]\n\
    \    if seen[n] then\n      table.remove(numbers, i)\n    else\n      seen[n]\
    \ = true\n      i = i + 1\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcjg1co99.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpcjg1co99.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  if numbers == nil then\n    return nil\n  end\n  local temp = {}\n  local result\
    \ = {}\n  for _, k in ipairs(numbers) do\n    if temp[k] == nil then\n      temp[k]\
    \ = true\n      table.insert(result, k)\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpas5uoikp.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpas5uoikp.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    -- Your code goes here.\n    local result = {}\n    local set = {}\n    for\
    \ _, v in ipairs(numbers) do\n        if not set[v] then\n            table.insert(result,\
    \ v)\n            set[v] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcqe14rfm.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpcqe14rfm.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      table.insert(result, number)\n      seen[number]\
    \ = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp3c37ost.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpp3c37ost.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local results = {}\n    for _,v in ipairs(numbers) do\n\
    \        if not seen[v] then\n            seen[v] = true\n            table.insert(results,\
    \ v)\n        end\n    end\n    return results\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9vpifm8w.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp9vpifm8w.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local no_duplicates = {}\n  local already_seen = {}\n  for _, n in ipairs(numbers)\
    \ do\n    if not already_seen[n] then\n      no_duplicates[#no_duplicates + 1]\
    \ = n\n      already_seen[n] = true\n    end\n  end\n  return no_duplicates\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbls3hjq0.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpbls3hjq0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, number in ipairs(numbers) do\n    if not unique[number]\
    \ then\n      unique[number] = true\n    end\n  end\n  local result = {}\n  for\
    \ i, number in ipairs(numbers) do\n    if unique[number] then\n      table.insert(result,\
    \ number)\n      unique[number] = nil\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkr1ti2uf.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpkr1ti2uf.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, x in ipairs(numbers) do\n    if not unique[x] then\n\
    \      unique[x] = true\n      coroutine.yield(x)\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprp1wrn7s.lua:16:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmprp1wrn7s.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local uniques = {}\n  for i, num in ipairs(numbers) do\n\
    \    if not seen[num] then\n      table.insert(uniques, num)\n      seen[num]\
    \ = true\n    end\n  end\n  return uniques\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplme0vjmu.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmplme0vjmu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local no_duplicates = {}\n    local present = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not present[number] then\n            table.insert(no_duplicates,\
    \ number)\n            present[number] = true\n        end\n    end\n    return\
    \ no_duplicates\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7ns6opv.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpq7ns6opv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal list = {}\n\tfor _,n in ipairs(numbers) do\n\t\tif list[n] == nil then\n\
    \t\t\tlist[n] = 1\n\t\telse\n\t\t\tlist[n] = list[n] + 1\n\t\tend\n\tend\n\tlocal\
    \ new_list = {}\n\tfor _,n in ipairs(numbers) do\n\t\tif list[n] == 1 then\n\t\
    \t\ttable.insert(new_list, n)\n\t\tend\n\tend\n\treturn new_list\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tfor i = #numbers, 1, -1 do\n\t\tif seen[numbers[i]] then\n\
    \t\t\ttable.remove(numbers, i)\n\t\telse\n\t\t\tseen[numbers[i]] = true\n\t\t\
    end\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2tfeb3qp.lua:17:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp2tfeb3qp.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local container = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n\
    \    if not container[n] then\n      container[n] = true\n      table.insert(result,\
    \ n)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptzns11s8.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmptzns11s8.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, v in ipairs(numbers) do\n    if not unique[v] then\n\
    \      unique[v] = true\n    end\n  end\n  local u = {}\n  for k, _ in pairs(unique)\
    \ do\n    table.insert(u, k)\n  end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysvzd6kh.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpysvzd6kh.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  for _, v in ipairs(numbers) do\n    if seen[v] then\n  \
    \    seen[v] = seen[v] + 1\n    else\n      seen[v] = 1\n    end\n  end\n  local\
    \ new_list = {}\n  for _, v in ipairs(numbers) do\n    if seen[v] == 1 then\n\
    \      table.insert(new_list, v)\n    end\n  end\n  return new_list\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local uniques = {}\n    for _, num in ipairs(numbers)\
    \ do\n        if not seen[num] then\n            table.insert(uniques, num)\n\
    \            seen[num] = true\n        end\n    end\n    return uniques\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4agpsn2m.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp4agpsn2m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local values = {}\n    local new = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not values[v] then\n            table.insert(new, v)\n           \
    \ values[v] = true\n        end\n    end\n    return new\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp18ux_i6o.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp18ux_i6o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local known = {}\n  local unique = {}\n  for _, v in ipairs(numbers) do\n \
    \   if not known[v] then\n      unique[#unique + 1] = v\n      known[v] = true\n\
    \    end\n  end\n  return unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptou5e_fu.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmptou5e_fu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local last_number = 0\n    local is_duplicate = {}\n    local result = {}\n\
    \    for _, number in ipairs(numbers) do\n        if last_number == number then\n\
    \            is_duplicate[number] = true\n        else\n            last_number\
    \ = number\n        end\n    end\n    for _, number in ipairs(numbers) do\n  \
    \      if not is_duplicate[number] then\n            table.insert(result, number)\n\
    \        end\n    end\n    return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdhlk_o8g.lua:27:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 2, 4, 3, 5}\nstack traceback:\n\t/tmp/tmpdhlk_o8g.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, number in ipairs(numbers) do\n    unique[number]\
    \ = true\n  end\n  local result = {}\n  for number, _ in pairs(unique) do\n  \
    \  table.insert(result, number)\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2vughir.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmph2vughir.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local unique = {}\n    for _, value in ipairs(numbers) do\n        unique[value]\
    \ = true\n    end\n    return unique\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3p8l55d.lua:15:\
    \ expected: {1, 2, 3, 4}\nactual: {true, true, true, true}\nstack traceback:\n\
    \t/tmp/tmp_3p8l55d.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local result = {}\n  local seen = {}\n  for i, num in ipairs(numbers) do\n\
    \    if not seen[num] then\n      table.insert(result, num)\n      seen[num] =\
    \ true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnq9s9jdv.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpnq9s9jdv.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  return fun.iter(numbers):filter(function(v, _, seen)\n    if seen[v] then\n\
    \      return false\n    else\n      seen[v] = true\n      return true\n    end\n\
    \  end, {}):totable()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvxr1im5r.lua:4:\
    \ attempt to index a nil value (global 'fun')\nstack traceback:\n\t/tmp/tmpvxr1im5r.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpvxr1im5r.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local result = {}\n    for _, x in ipairs(numbers) do\n\
    \        if not seen[x] then\n            seen[x] = true\n            table.insert(result,\
    \ x)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxyufy14h.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxyufy14h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local uniques = {}\n    local seen = {}\n    for _, num in ipairs(numbers)\
    \ do\n        if not seen[num] then\n            uniques[#uniques + 1] = num\n\
    \            seen[num] = true\n        end\n    end\n    return uniques\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptegdlr9b.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmptegdlr9b.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local function is_duplicate(number)\n        local occurrences = 0\n    \
    \    for _, n in ipairs(numbers) do\n            if n == number then\n       \
    \         occurrences = occurrences + 1\n            end\n        end\n      \
    \  return occurrences > 1\n    end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpccok2v67.lua:22: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local keep = {}\n  local dups = {}\n  for _, num in ipairs(numbers) do\n  \
    \  if keep[num] == nil then\n      keep[num] = true\n    else\n      dups[num]\
    \ = true\n    end\n  end\n  local res = {}\n  for _, num in ipairs(numbers) do\n\
    \    if dups[num] == nil then\n      table.insert(res, num)\n    end\n  end\n\
    \  return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tlocal result = {}\n\tfor _, n in ipairs(numbers) do\n\t\t\
    if not seen[n] then\n\t\t\tresult[#result + 1] = n\n\t\t\tseen[n] = true\n\t\t\
    end\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bpv6llk.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp9bpv6llk.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not seen[number] then\n      seen[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_pl6km0e.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp_pl6km0e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local t = {}\n    for i, number in ipairs(numbers) do\n        t[number]\
    \ = true\n    end\n    local res = {}\n    for i, number in ipairs(numbers) do\n\
    \        if t[number] then\n            res[#res + 1] = number\n            t[number]\
    \ = false\n        end\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhvmmyyh.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmprhvmmyyh.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local num_map = {}\n  local num_list = {}\n  for _, v in ipairs(numbers) do\n\
    \    if not num_map[v] then\n      num_map[v] = true\n      table.insert(num_list,\
    \ v)\n    end\n  end\n  return num_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxnvzq22c.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpxnvzq22c.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  -- Use a map to keep track of the numbers we have seen.\n  local index = {}\n\
    \  local unique = {}\n  for _, number in ipairs(numbers) do\n    if not index[number]\
    \ then\n      index[number] = true\n      table.insert(unique, number)\n    end\n\
    \  end\n  return unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv84ciq6u.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpv84ciq6u.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local unique = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ unique[number] then\n            unique[number] = true\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            table.insert(result, number)\n            unique[number] =\
    \ nil\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjd0_s5p.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpnjd0_s5p.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local known = {}\n    local ret = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not known[v] then\n            table.insert(ret, v)\n            known[v]\
    \ = true\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2_8ow2eu.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp2_8ow2eu.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local result = {}\n    local hash = {}\n    for _, n in ipairs(numbers) do\n\
    \        if not hash[n] then\n            hash[n] = true\n            table.insert(result,\
    \ n)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptday1wh6.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmptday1wh6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local uniques = {}\n  for i, n in ipairs(numbers) do\n \
    \   if not seen[n] then\n      table.insert(uniques, n)\n      seen[n] = true\n\
    \    end\n  end\n  return uniques\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo5ryls0.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpmo5ryls0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local filtered = {}\n  for _, v in ipairs(numbers) do\n\
    \    if not seen[v] then\n      table.insert(filtered, v)\n      seen[v] = true\n\
    \    end\n  end\n  return filtered\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp72okq67a.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp72okq67a.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local set = {}\n  local duplicates = {}\n  for i = 1, #numbers do\n    local\
    \ num = numbers[i]\n    if set[num] then\n      duplicates[num] = true\n    else\n\
    \      set[num] = true\n    end\n  end\n  local numbers2 = {}\n  for i = 1, #numbers\
    \ do\n    local num = numbers[i]\n    if not duplicates[num] then\n      numbers2[#numbers2\
    \ + 1] = num\n    end\n  end\n  return numbers2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal result = {}\n\tlocal seen = {}\n\tfor _, number in ipairs(numbers) do\n\
    \t\tif not seen[number] then\n\t\t\tresult[#result + 1] = number\n\t\t\tseen[number]\
    \ = true\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6hh8xlg9.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp6hh8xlg9.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local unique = {}\n    for _, n in ipairs(numbers) do\n        if not unique[n]\
    \ then\n            unique[n] = true\n        end\n    end\n    local result =\
    \ {}\n    for n, _ in pairs(unique) do\n        table.insert(result, n)\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4s2c9o0b.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp4s2c9o0b.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal out = {}\n\tlocal lookup = {}\n\tlocal n = 0\n\tfor i = 1, #numbers do\n\
    \t\tlocal x = numbers[i]\n\t\tif not lookup[x] then\n\t\t\tn = n + 1\n\t\t\tout[n]\
    \ = x\n\t\t\tlookup[x] = true\n\t\tend\n\tend\n\treturn out\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw8ba91dl.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpw8ba91dl.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local cache = {}\n  local result = {}\n  for _, number in ipairs(numbers) do\n\
    \    if not cache[number] then\n      cache[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9m44whsp.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp9m44whsp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local count_map = {}\n  local result = {}\n  for _, n in ipairs(numbers) do\n\
    \    if count_map[n] == nil then\n      count_map[n] = 1\n      table.insert(result,\
    \ n)\n    else\n      count_map[n] = count_map[n] + 1\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpypsf46de.lua:22:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpypsf46de.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local uniques = {}\n  local dupes = {}\n  for _,n in ipairs(numbers) do\n \
    \   if uniques[n] then\n      table.insert(dupes, n)\n    else\n      uniques[n]\
    \ = true\n    end\n  end\n  for _,n in ipairs(dupes) do\n    table.remove_first(numbers,\
    \ n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ds45cic.lua:21:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp9ds45cic.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local tmp = {}\n  local result = {}\n  for i = 1, #numbers do\n    local number\
    \ = numbers[i]\n    if not tmp[number] then\n      tmp[number] = true\n      result[#result\
    \ + 1] = number\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpztvdelfd.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpztvdelfd.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local uniques = {}\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    if not uniques[number] then\n      uniques[number] = true\n      table.insert(result,\
    \ number)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwjm7na1.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpbwjm7na1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local words = {}\n  local result = {}\n  for _,v in ipairs(numbers) do\n  \
    \  local word = tostring(v)\n    if not words[word] then\n      result[#result+1]\
    \ = v\n      words[word] = true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj466rtl1.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpj466rtl1.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local i = 1\n    while i <= #numbers do\n        local\
    \ v = numbers[i]\n        if seen[v] then\n            table.remove(numbers, i)\n\
    \        else\n            seen[v] = true\n            i = i + 1\n        end\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp628d8ar2.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmp628d8ar2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local used = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not used[number] then\n            table.insert(result, number)\n\
    \            used[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6_alnbzp.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp6_alnbzp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen_already = {}\n  local result = {}\n  for i = 1, #numbers do\n  \
    \  local number = numbers[i]\n    if not seen_already[number] then\n      table.insert(result,\
    \ number)\n      seen_already[number] = true\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw97s5hxb.lua:21:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpw97s5hxb.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for _, v in ipairs(numbers) do\n    if not unique[v] then\n\
    \      unique[v] = true\n    end\n  end\n  local ret = {}\n  for _, v in ipairs(numbers)\
    \ do\n    if unique[v] then\n      table.insert(ret, v)\n      unique[v] = nil\n\
    \    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkb_adxh7.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpkb_adxh7.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  return fun.chain(numbers)\n    :map(function(number)\n      return {number,\
    \ number}\n    end)\n    :foldl(function(map, number)\n      map[number] = (map[number]\
    \ or 0) + 1\n      return map\n    end, {})\n    :filter(function(number, times)\n\
    \      return times == 1\n    end)\n    :keys()\n    :totable()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv9_eqzii.lua:4:\
    \ attempt to index a nil value (global 'fun')\nstack traceback:\n\t/tmp/tmpv9_eqzii.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpv9_eqzii.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if not seen[number] then\n            table.insert(result, number)\n\
    \            seen[number] = true\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplpiuax7g.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmplpiuax7g.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal number_counts = {}\n\tfor _, number in ipairs(numbers) do\n\t\tnumber_counts[number]\
    \ = (number_counts[number] or 0) + 1\n\tend\n\tlocal non_duplicates = {}\n\tfor\
    \ _, number in ipairs(numbers) do\n\t\tif number_counts[number] == 1 then\n\t\t\
    \ttable.insert(non_duplicates, number)\n\t\tend\n\tend\n\treturn non_duplicates\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local uniques = {}\n  local dups = {}\n  for i = 1, #numbers do\n    local\
    \ num = numbers[i]\n    if uniques[num] then\n      dups[num] = true\n    else\n\
    \      uniques[num] = true\n    end\n  end\n  local result = {}\n  for i = 1,\
    \ #numbers do\n    local num = numbers[i]\n    if not dups[num] then\n      result[#result\
    \ + 1] = num\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal last = {}\n\tfor _, n in ipairs(numbers) do\n\t\tif last[n] then\n\t\t\
    \tlast[n] = nil\n\t\telse\n\t\t\tlast[n] = true\n\t\tend\n\tend\n\treturn table.values(last)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprwc8qo5h.lua:12:\
    \ attempt to call a nil value (field 'values')\nstack traceback:\n\t/tmp/tmprwc8qo5h.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmprwc8qo5h.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local unique = {}\n    for _, number in ipairs(numbers) do\n        unique[number]\
    \ = true\n    end\n    local result = {}\n    for _, number in ipairs(numbers)\
    \ do\n        if unique[number] then\n            table.insert(result, number)\n\
    \            unique[number] = nil\n        end\n    end\n    return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nfgfhda.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp8nfgfhda.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local set = {}\n  local result = {}\n  for _, v in ipairs(numbers) do\n   \
    \ if not set[v] then\n      table.insert(result, v)\n      set[v] = true\n   \
    \ end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw33ifaj4.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpw33ifaj4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    -- Create a table and use it as a set to track whether a number has been\n\
    \    -- seen before.\n    local set = {}\n    local result = {}\n    for _, num\
    \ in ipairs(numbers) do\n        if not set[num] then\n            -- Add element\
    \ to result and mark it as seen.\n            result[#result + 1] = num\n    \
    \        set[num] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmknxac_g.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpmknxac_g.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    --[[ TODO: Implement function here ]]\n    local map = {}\n    local result\
    \ = {}\n    for i = 1, #numbers do\n        if map[numbers[i]] == nil then\n \
    \           map[numbers[i]] = 1\n            table.insert(result, numbers[i])\n\
    \        else\n            map[numbers[i]] = map[numbers[i]] + 1\n        end\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1vfiue7m.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp1vfiue7m.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 0
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \t-- In: list of integers.\n\t-- Out: list of integers.\n\t-- Ex: remove_duplicates({1,\
    \ 2, 1, 3, 2, 4}) -> {1, 2, 3, 4}\n\tlocal result = {}\n\tlocal counter = {}\n\
    \tfor _, n in ipairs(numbers) do\n\t\tcounter[n] = (counter[n] or 0) + 1\n\tend\n\
    \tfor _, n in ipairs(numbers) do\n\t\tif counter[n] == 1 then\n\t\t\ttable.insert(result,\
    \ n)\n\t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local count = {}\n    local result = {}\n    for _,\
    \ n in ipairs(numbers) do\n        if not seen[n] then\n            result[#result\
    \ + 1] = n\n            seen[n] = true\n            count[n] = 1\n        else\n\
    \            count[n] = count[n] + 1\n        end\n    end\n    return result,\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8iaxo0g8.lua:24:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp8iaxo0g8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  return (moses.reduce(numbers, function(acc, number)\n    if not moses.detect(acc,\
    \ function(n) return n == number end) then\n      table.insert(acc, number)\n\
    \    end\n    return acc\n  end, {}))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc2skru7d.lua:4:\
    \ attempt to index a nil value (global 'moses')\nstack traceback:\n\t/tmp/tmpc2skru7d.lua:4:\
    \ in local 'candidate'\n\t/tmp/tmpc2skru7d.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, v in ipairs(numbers) do\n  \
    \  if not seen[v] then\n      table.insert(result, v)\n      seen[v] = true\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx42mj7s3.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx42mj7s3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal unique = {}\n\tlocal result = {}\n\tfor _, v in ipairs(numbers) do\n\t\
    \tif not unique[v] then\n\t\t\ttable.insert(result, v)\n\t\t\tunique[v] = true\n\
    \t\tend\n\tend\n\treturn result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbant0oj6.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpbant0oj6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local uniques = {}\n  local keys = {}\n  for i, number in ipairs(numbers) do\n\
    \    if not keys[number] then\n      keys[number] = true\n      uniques[#uniques\
    \ + 1] = number\n    end\n  end\n  return uniques\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpel6jh5a4.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpel6jh5a4.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local ret = {}\n    local history = {}\n    for _, num in ipairs(numbers)\
    \ do\n        if not history[num] then\n            table.insert(ret, num)\n \
    \           history[num] = true\n        end\n    end\n    return ret\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpapfaobze.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpapfaobze.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    -- Use a map to keep track of how many times each element occurs\n    local\
    \ occurrence_count = {}\n    for _, x in ipairs(numbers) do\n        occurrence_count[x]\
    \ = (occurrence_count[x] or 0) + 1\n    end\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy1n4ow49.lua:18: ''end'' expected (to close ''function'' at
    line 3) near <eof>

    '
  stdout: ''
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local new_list = {}\n    local hash = {}\n    for _, n in ipairs(numbers)\
    \ do\n        if not hash[n] then\n            new_list[#new_list + 1] = n\n \
    \           hash[n] = true\n        end\n    end\n    return new_list\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1azi8fz1.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp1azi8fz1.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local result = {}\n    for _, v in ipairs(numbers) do\n\
    \        if not seen[v] then\n            result[#result + 1] = v\n          \
    \  seen[v] = true\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99hdd6d6.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp99hdd6d6.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local index = 1\n  while index <= #numbers do\n    local\
    \ num = numbers[index]\n    if seen[num] then\n      table.remove(numbers, index)\n\
    \    else\n      seen[num] = true\n      index = index + 1\n    end\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpds0g_uu5.lua:20:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpds0g_uu5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local uniques = {}\n  local output = {}\n  for _, n in ipairs(numbers) do\n\
    \    if not uniques[n] then\n      table.insert(output, n)\n      uniques[n] =\
    \ true\n    end\n  end\n  return output\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6qbmkzrq.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmp6qbmkzrq.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local unique = {}\n    for _, number in ipairs(numbers) do\n        if not\
    \ unique[number] then\n            unique[number] = true\n        end\n    end\n\
    \    local result = {}\n    for _, number in ipairs(numbers) do\n        if unique[number]\
    \ then\n            table.insert(result, number)\n            unique[number] =\
    \ nil\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnjd0_s5p.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpnjd0_s5p.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local unique = {}\n    for _, n in ipairs(numbers) do\n        if not unique[n]\
    \ then\n            unique[n] = true\n        end\n    end\n    local result =\
    \ {}\n    for _, n in ipairs(numbers) do\n        if unique[n] then\n        \
    \    table.insert(result, n)\n            unique[n] = nil\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuh7pr2zj.lua:25:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpuh7pr2zj.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local set = {}\n  local result = {}\n  for i, number in ipairs(numbers) do\n\
    \    if not set[number] then\n      set[number] = true\n      result[#result +\
    \ 1] = number\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxe98rhl.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpvxe98rhl.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local unique = {}\n  for i = 1, #numbers do\n    unique[numbers[i]] = true\n\
    \  end\n  local numbers_without_duplicates = {}\n  for i = 1, #numbers do\n  \
    \  if unique[numbers[i]] then\n      table.insert(numbers_without_duplicates,\
    \ numbers[i])\n      unique[numbers[i]] = false\n    end\n  end\n  return numbers_without_duplicates\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = remove_duplicates\n\
    \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, 2,\
    \ 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1, 2, 3, 2, 4, 3, 5}),\
    \ {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd81zvae8.lua:23:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpd81zvae8.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  -- TODO: Write your implementation here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq13zhti8.lua:10:\
    \ expected: {}\nactual: nil\nstack traceback:\n\t/tmp/tmpq13zhti8.lua:10: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \  local seen = {}\n  local result = {}\n  for _, num in ipairs(numbers) do\n\
    \    if not seen[num] then\n      table.insert(result, num)\n      seen[num] =\
    \ true\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf863554k.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpf863554k.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \    local seen = {}\n    local result = {}\n    for _, n in ipairs(numbers) do\n\
    \        if not seen[n] then\n            seen[n] = true\n            table.insert(result,\
    \ n)\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = remove_duplicates\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu767gm0m.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpu767gm0m.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
- exit_code: 1
  program: "-- From a list of integers, remove all elements that occur more than once.\n\
    -- Keep order of elements left the same as in the input.\nlocal function remove_duplicates(numbers)\n\
    \tlocal seen = {}\n\tlocal unique = {}\n\tfor _, num in ipairs(numbers) do\n\t\
    \tif not seen[num] then\n\t\t\ttable.insert(unique, num)\n\t\t\tseen[num] = true\n\
    \t\tend\n\tend\n\treturn unique\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = remove_duplicates\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4}), {1, 2, 3, 4})\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 2, 4, 3, 5}), {1, 4, 5})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx5t24608.lua:20:\
    \ expected: {1, 4, 5}\nactual: {1, 2, 3, 4, 5}\nstack traceback:\n\t/tmp/tmpx5t24608.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821976
