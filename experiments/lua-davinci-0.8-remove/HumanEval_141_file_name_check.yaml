name: HumanEval_141_file_name_check
language: lua
prompt: "-- Create a function which takes a string representing a file's name, and\
  \ returns\n-- 'Yes' if the the file's name is valid, and returns 'No' otherwise.\n\
  -- A file's name is considered to be valid if and only if all the following conditions\
  \ \n-- are met:\n-- - There should not be more than three digits ('0'-'9') in the\
  \ file's name.\n-- - The file's name contains exactly one dot '.'\n-- - The substring\
  \ before the dot should not be empty, and it starts with a letter from \n-- the\
  \ latin alphapet ('a'-'z' and 'A'-'Z').\n-- - The substring after the dot should\
  \ be one of these: ['txt', 'exe', 'dll']\n-- Examples:\nlocal function file_name_check(file_name)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = file_name_check\n\
  \    lu.assertEquals(candidate('example.txt'), 'Yes')\n    lu.assertEquals(candidate('1example.dll'),\
  \ 'No')\n    lu.assertEquals(candidate('s1sdf3.asd'), 'No')\n    lu.assertEquals(candidate('K.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('MY16FILE3.exe'), 'Yes')\n    lu.assertEquals(candidate('His12FILE94.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('_Y.txt'), 'No')\n    lu.assertEquals(candidate('?aREYA.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('/this_is_valid.dll'), 'No')\n    lu.assertEquals(candidate('this_is_valid.wow'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_valid.txt'), 'Yes')\n    lu.assertEquals(candidate('this_is_valid.txtexe'),\
  \ 'No')\n    lu.assertEquals(candidate('#this2_i4s_5valid.ten'), 'No')\n    lu.assertEquals(candidate('@this1_is6_valid.exe'),\
  \ 'No')\n    lu.assertEquals(candidate('this_is_12valid.6exe4.txt'), 'No')\n   \
  \ lu.assertEquals(candidate('all.exe.txt'), 'No')\n    lu.assertEquals(candidate('I563_No.exe'),\
  \ 'Yes')\n    lu.assertEquals(candidate('Is3youfault.txt'), 'Yes')\n    lu.assertEquals(candidate('no_one#knows.dll'),\
  \ 'Yes')\n    lu.assertEquals(candidate('1I563_Yes3.exe'), 'No')\n    lu.assertEquals(candidate('I563_Yes3.txtt'),\
  \ 'No')\n    lu.assertEquals(candidate('final..txt'), 'No')\n    lu.assertEquals(candidate('final132'),\
  \ 'No')\n    lu.assertEquals(candidate('_f4indsartal132.'), 'No')\n    lu.assertEquals(candidate('.txt'),\
  \ 'No')\n    lu.assertEquals(candidate('s.'), 'No')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    if file_name:match(\"[^0-9]*[0-9][^0-9]*[0-9][^0-9]*[0-9][^0-9]*\"\
    ) then\n        return \"No\"\n    end\n    if not file_name:match(\"^[A-Za-z]+[^%.]*%.(txt|exe|dll)$\"\
    ) then\n        return \"No\"\n    end\n    return \"Yes\"\nend", "    return\
    \ \"?\"\nend", "  local digits = file_name:gsub(\"%D\",\"\")\n  if #digits > 3\
    \ then\n    return No\n  end\n  local sub = file_name:match(\"^[a-zA-Z]+\")\n\
    \  if not sub then\n    return No\n  end\n  local ending = file_name:match(\"\
    %.(%w+)$\")\n  local endings = {['txt'] = true, ['exe'] = true, ['dll'] = true}\n\
    \  if endings[ending] then\n    return Yes\n  end\n  return No\nend\nprint(file_name_check(\"\
    123.txt\"))   -- Yes\nprint(file_name_check(\"1.txt\"))     -- Yes\nprint(file_name_check(\"\
    abc.txt\"))   -- Yes\nprint(file_name_check(\"a1.txt\"))    -- Yes\nprint(file_name_check(\"\
    1a.txt\"))    -- No\nprint(file_name_check(\"1234.txt\"))  -- No\nprint(file_name_check(\"\
    123.exe\"))   -- Yes\nprint(file_name_check(\"123.exe.txt\")) -- No\nprint(file_name_check(\"\
    a.txt\"))     -- No\nprint(file_name_check(\"abc.txt.\"))  -- No\nprint(file_name_check(\"\
    abc.exe\"))   -- Yes\nprint(file_name_check(\"abc.dll\"))   -- Yes\nprint(file_name_check(\"\
    abc.doc\"))   -- No\nprint(file_name_check(\"abc.txt1\"))  -- No\nprint(file_name_check(\"\
    abc.txt.123\")) -- No", "    local _, count = file_name:gsub(\"%d\", \"\")\n \
    \   local count_letter, _ = file_name:gsub(\"[a-zA-Z]\", \"\")\n    if count >\
    \ 3 then\n        return \"No\"\n    end\n    if count_letter == 0 then\n    \
    \    return \"No\"\n    end\n    if file_name:match(\"%.%a%a%a$\") then\n    \
    \    return \"Yes\"\n    end\n    return \"No\"\nend", "    return 42\nend", end,
  "    local name, ext = file_name:match('(.*)%.(.*)')\n    local l = #name\n    if\
    \ not name:match('^[%a]') or name:match('%d%d%d') or ext ~= 'txt' and ext ~= 'exe'\
    \ and ext ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend",
  "\t-- FILL HERE\nend", '    if string.match(file_name, "%d%d%d") then return "No"
    end', "\tif file_name:match(\"%D%D%D\") then\n\t\treturn \"No\"\n\telseif file_name:match(\"\
    %D%.%D\") then\n\t\tlocal a = file_name:match(\"%D%.\")\n\t\tlocal b = file_name:match(\"\
    %D%D%D%.%D%D%D\")\n\t\tif a == \"txt\" or a == \"exe\" or a == \"dll\" then\n\t\
    \t\treturn \"Yes\"\n\t\telseif b == \"txt\" or b == \"exe\" or b == \"dll\" then\n\
    \t\t\treturn \"Yes\"\n\t\telse\n\t\t\treturn \"No\"\n\t\tend\n\telseif file_name:match(\"\
    %D%D%.%D\") then\n\t\tlocal a = file_name:match(\"%D%D%.\")\n\t\tif a == \"txt\"\
    \ or a == \"exe\" or a == \"dll\" then\n\t\t\treturn \"Yes\"\n\t\telse\n\t\t\t\
    return \"No\"\n\t\tend\n\telse\n\t\treturn \"No\"\n\tend\nend\nprint(file_name_check(\"\
    a.exe\"))\nprint(file_name_check(\"a.dll\"))\nprint(file_name_check(\"a.txt\"\
    ))\nprint(file_name_check(\"a.dfd\"))\nprint(file_name_check(\"a..dfd\"))\nprint(file_name_check(\"\
    a.dfd.dll\"))\nprint(file_name_check(\"s.txt\"))\nprint(file_name_check(\"s.sss\"\
    ))\nprint(file_name_check(\"12.txt\"))\nprint(file_name_check(\"12.exe\"))\nprint(file_name_check(\"\
    12.asd\"))\nprint(file_name_check(\"1.asd\"))\nprint(file_name_check(\"1.asd.txt\"\
    ))\nprint(file_name_check(\"1.txt\"))\nprint(file_name_check(\"1.exe\"))\nprint(file_name_check(\"\
    1.dll\"))\nprint(file_name_check(\"123.txt\"))\nprint(file_name_check(\"123.exe\"\
    ))\nprint(file_name_check(\"", "   local result = yes\n   local digits = 0\n \
    \  local extensions = {'txt', 'exe', 'dll'}\n   local substrings = split(file_name,\
    \ '.')\n   if #substrings ~= 2 then\n      result = no\n   elseif substrings[1]\
    \ == '' or not re.match(substrings[1], [[^[a-zA-Z]]]) then\n      result = no\n\
    \   else\n      for i = 1, #substrings[1] do\n         if substrings[1]:sub(i,\
    \ i) >= '0' and substrings[1]:sub(i, i) <= '9' then\n            digits = digits\
    \ + 1\n         end\n      end\n      if digits > 3 then\n         result = no\n\
    \      else\n         local found = false\n         for i = 1, #extensions do\n\
    \            if substrings[2] == extensions[i] then\n               found = true\n\
    \               break\n            end\n         end\n         if not found then\n\
    \            result = no\n         end\n      end\n   end\n   return result\n\
    end\nassert(file_name_check('hello.txt') == yes)\nassert(file_name_check('hello.com')\
    \ == no)\nassert(file_name_check('w1w.dll') == yes)\nassert(file_name_check('w1w.exe')\
    \ == yes)\nassert(file_name_check('1w1w.exe') == no)\nassert(file_name_check('11w.exe')\
    \ == no)\nassert(file_name_check('1.exe') == no)\nassert(file_name_check('w.exe')\
    \ == yes)\nassert(file_name_check('w.dll') == yes)\nassert(file_name_check('w.txt')\
    \ == yes)\nassert(file_name_check('w.com') == no)\nassert(file_name_check('wwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwwww",
  "    local count = 0;\n    local dot = false;\n    local before_dot = false;\n \
    \   local after_dot = false;\n    for i = 1, string.len(file_name) do\n      \
    \  local c = string.sub(file_name, i, i);\n        if (c == '.') then\n      \
    \      if (dot) then\n                return 'No';\n            end\n        \
    \    dot = true;\n        elseif (c == '0' or c == '1' or c == '2' or c == '3'\
    \ or c == '4' or c == '5' \n            or c == '6' or c == '7' or c == '8' or\
    \ c == '9') then\n            count = count + 1;\n            if (count > 3) then\n\
    \                return 'No';\n            end\n        elseif (c == 'a' or c\
    \ == 'b' or c == 'c' or c == 'd' or c == 'e' or c == 'f' \n            or c ==\
    \ 'g' or c == 'h' or c == 'i' or c == 'j' or c == 'k' or c == 'l' \n         \
    \   or c == 'm' or c == 'n' or c == 'o' or c == 'p' or c == 'q' or c == 'r' \n\
    \            or c == 's' or c == 't' or c == 'u' or c == 'v' or c == 'w' or c\
    \ == 'x' \n            or c == 'y' or c == 'z' or c == 'A' or c == 'B' or c ==\
    \ 'C' or c == 'D' \n            or c == 'E' or c == 'F' or c == 'G' or c == 'H'\
    \ or c == 'I' or c == 'J' \n            or c == 'K' or c == 'L' or c == 'M' or\
    \ c == 'N' or c == 'O' or c == 'P' \n            or c == 'Q' or c == 'R' or c\
    \ == 'S' or c == 'T' or c == 'U' or c == 'V' \n            or c == 'W", "\t--\
    \ Place your code here\n\tlocal a, b, c = string.match(file_name, \"^([a-zA-Z]*)(%d+)([a-zA-Z]+).([a-zA-Z]+)$\"\
    )\n\tif a == nil or b == nil or c == nil then\n\t\treturn \"No\"\n\tend\n\tif\
    \ string.len(b) > 3 then\n\t\treturn \"No\"\n\tend\n\tif string.find(c, \"txt\"\
    ) ~= 1 and string.find(c, \"exe\") ~= 1 and string.find(c, \"dll\") ~= 1 then\n\
    \t\treturn \"No\"\n\tend\n\treturn \"Yes\"\nend", "    -- Insert your code here\n\
    \    return nil\nend", "\nend", "    --Your implementation here\nend", "    local\
    \ digits = 0\n    local dot_count = 0\n    local ext = nil\n    for c in file_name:gmatch('.')\
    \ do\n        if c:match('%d') then\n            digits = digits + 1\n       \
    \ elseif c == '.' then\n            dot_count = dot_count + 1\n        elseif\
    \ c:match('%a') then\n            ext = c\n        end\n    end\n    if digits\
    \ > 3 or dot_count ~= 1 or not ext then\n        return 'No'\n    end\n    ext\
    \ = file_name:sub(file_name:find('.') + 1)\n    if ext == 'txt' or ext == 'exe'\
    \ or ext == 'dll' then\n        return 'Yes'\n    end\n    return 'No'\nend\n\
    assert(file_name_check('valid_file_name.txt') == 'Yes')\nassert(file_name_check('invalid.exe')\
    \ == 'No')\nassert(file_name_check('invalid.txt') == 'No')\nassert(file_name_check('valid.dll')\
    \ == 'Yes')\nassert(file_name_check('invalid_number.invalid') == 'No')\nassert(file_name_check('123.txt')\
    \ == 'No')\nassert(file_name_check('invalid_number') == 'No')\nassert(file_name_check('invalid_number.txt')\
    \ == 'No')\nprint('Yes')", "\tlocal digits = 0\n\tlocal dot_index\n\tlocal extension\n\
    \tfor i = 1, file_name:len() do\n\t\tif file_name:sub(i, i) >= '0' and file_name:sub(i,\
    \ i) <= '9' then\n\t\t\tdigits = digits + 1\n\t\t\tif digits > 3 then\n\t\t\t\t\
    return 'No'\n\t\t\tend\n\t\telseif file_name:sub(i, i) == '.' then\n\t\t\tif dot_index\
    \ then\n\t\t\t\treturn 'No'\n\t\t\tend\n\t\t\tdot_index = i\n\t\telseif file_name:sub(i,\
    \ i) == ' ' then\n\t\t\treturn 'No'\n\t\tend\n\tend\n\tif not dot_index then\n\
    \t\treturn 'No'\n\tend\n\tif dot_index == 1 then\n\t\treturn 'No'\n\tend\n\tif\
    \ not (file_name:sub(1, 1) >= 'a' and file_name:sub(1, 1) <= 'z' or\n\t\t\tfile_name:sub(1,\
    \ 1) >= 'A' and file_name:sub(1, 1) <= 'Z') then\n\t\treturn 'No'\n\tend\n\textension\
    \ = file_name:sub(dot_index + 1, file_name:len())\n\tif extension ~= 'txt' and\
    \ extension ~= 'exe' and extension ~= 'dll' then\n\t\treturn 'No'\n\tend\n\treturn\
    \ 'Yes'\nend\nassert(file_name_check('file.txt') == 'Yes')\nassert(file_name_check('file.exe')\
    \ == 'Yes')\nassert(file_name_check('file.dll') == 'Yes')\nassert(file_name_check('file.exe12')\
    \ == 'No')\nassert(file_name_check('file.txt3') == 'No')\nassert(file_name_check('file.txt99')\
    \ == 'No')\nassert(file_name_check('file.txt12') == 'No')\nassert(file_name_check('file.txt456')\
    \ == 'No')\nassert(file_name_check", "    return file_name\nend", "    -- your\
    \ code here\n    local dot = file_name:find(\"%.\")\n    local dot_count = file_name:gsub(\"\
    %.\", \"\"):len()\n    local digits_count = file_name:gsub(\"%d\", \"\"):len()\n\
    \    local dots_count = file_name:gsub(\"%.\", \"\"):len()\n    local valid_extensions\
    \ = {\"txt\", \"exe\", \"dll\"}\n    local extension_valid = false\n    local\
    \ dot_pos = 0\n    local dots_count = 0\n    local digits_count = 0\n    local\
    \ len = file_name:len()\n    local file_name_without_extension = \"\"\n    local\
    \ file_name_extension = \"\"\n    local extension_pos = 0\n    local extension_valid\
    \ = false\n    local ext_len = file_name:len()", "    local file_name_pattern\
    \ = \n        [[^[a-zA-Z][\\w]*\\.[txt|exe|dll]$]]\n    return file_name:match(file_name_pattern)\
    \ ~= nil and 'Yes' or 'No'\nend", "    local dot_pos = file_name:find(\"%.\")\n\
    \    if dot_pos == nil then\n        return \"No\"\n    end\n    local latin_letter\
    \ = file_name:sub(1, 1):find(\"[A-Za-z]\")\n    if latin_letter == nil then\n\
    \        return \"No\"\n    end\n    local extention = file_name:sub(dot_pos +\
    \ 1)\n    if extention ~= \"txt\" and extention ~= \"exe\" and extention ~= \"\
    dll\" then\n        return \"No\"\n    end\n    local digit_count = 0\n    for\
    \ i = 1, #file_name do\n        local digit = file_name:sub(i, i):find(\"[0-9]\"\
    )\n        if digit ~= nil then\n            digit_count = digit_count + 1\n \
    \       end\n    end\n    if digit_count > 3 then\n        return \"No\"\n   \
    \ end\n    return \"Yes\"\nend", "    -- do the things\nend", "    file_name =\
    \ file_name:match(\"([^\\\\/]+)$\")\n    local ext = file_name:match(\"^[^.]+%.(%w+)$\"\
    )\n    local name = file_name:match(\"^([^.]+)%.%w+$\")\n    local digits = file_name:match(\"\
    %d\")\n    if not name or not ext or digits == nil then return \"No\" end\n  \
    \  if string.len(digits) > 3 then return \"No\" end\n    if ext ~= \"txt\" and\
    \ ext ~= \"exe\" and ext ~= \"dll\" then return \"No\" end\n    if not name:match(\"\
    ^[a-zA-Z]\") then return \"No\" end\n    return \"Yes\"\nend\nprint(file_name_check(\"\
    my.exe\")) -- Yes\nprint(file_name_check(\"my.txt\")) -- Yes\nprint(file_name_check(\"\
    my.dll\")) -- Yes\nprint(file_name_check(\"1.dll\")) -- No\nprint(file_name_check(\"\
    my.x\")) -- No\nprint(file_name_check(\"my\")) -- No\nprint(file_name_check(\"\
    123123123123123123123123.txt\")) -- No\nprint(file_name_check(\"my..exe\")) --\
    \ No\nprint(file_name_check(\"my.exe.exe\")) -- No\nprint(file_name_check(\"my.exe.txt\"\
    )) -- No\nprint(file_name_check(\"my1.exe\")) -- No\nprint(file_name_check(\"\
    my-1.exe\")) -- No\nprint(file_name_check(\"123123123123123123123123.txt\")) --\
    \ No", "   return error\"TODO\"\nend", "  if type(file_name) ~= 'string' then\
    \ return 'No' end\n  local c1, c2, c3 = string.match(file_name, \"(%l%w*)%.(%l%l%l)\"\
    )\n  if not c1 or not c2 then return 'No' end\n  if string.len(c1) == 0 or string.len(c3)\
    \ ~= 0 then return 'No' end\n  if c2 ~= 'txt' and c2 ~= 'exe' and c2 ~= 'dll'\
    \ then return 'No' end\n  return 'Yes'\nend", "  assert(type(file_name) == 'string')\n\
    \  local dot_pos = string.find(file_name, '.')\n  if dot_pos == nil then\n   \
    \ return 'No'\n  end\n  if dot_pos == 1 then\n    return 'No'\n  end\n  local\
    \ file_name_without_extension = string.sub(file_name, 1, dot_pos - 1)\n  local\
    \ extension = string.sub(file_name, dot_pos + 1)\n  if string.len(file_name_without_extension)\
    \ < 1 then\n    return 'No'\n  end\n  if string.find(file_name_without_extension,\
    \ '%d') ~= nil then\n    return 'No'\n  end\n  if string.len(file_name_without_extension)\
    \ > 3 then\n    return 'No'\n  end\n  if extension ~= 'txt' and extension ~= 'exe'\
    \ and extension ~= 'dll' then\n    return 'No'\n  end\n  return 'Yes'\nend", "\t\
    if file_name:match('%d%d%d') then\n\t\treturn 'No'\n\tend\n\tlocal first_part,\
    \ last_part = file_name:match('^([%w_]-)%.([%w_]+)$')\n\tif not first_part or\
    \ not last_part then\n\t\treturn 'No'\n\tend\n\tif last_part == 'txt' or last_part\
    \ == 'exe' or last_part == 'dll' then\n\t\treturn 'Yes'\n\tend\n\treturn 'No'\n\
    end", "    local digits = 0\n    local dot_pos = 0\n    local dot_found = false\n\
    \    local ext_pos = 0\n    local ext_found = false\n    local i = 1\n    while\
    \ file_name:sub(i, i) ~= \"\" do\n        local c = file_name:sub(i, i)\n    \
    \    if c == \".\" then\n            if dot_found then\n                return\
    \ false\n            end\n            dot_found = true\n            dot_pos =\
    \ i\n        elseif c >= \"0\" and c <= \"9\" then\n            digits = digits\
    \ + 1\n            if digits > 3 then\n                return false\n        \
    \    end\n        elseif (c >= \"a\" and c <= \"z\") or (c >= \"A\" and c <= \"\
    Z\") then\n            if not dot_found then\n                if i == 1 then\n\
    \                    return false\n                end\n            else\n   \
    \             if i == dot_pos + 1 then\n                    return false\n   \
    \             end\n                ext_pos = i\n                ext_found = true\n\
    \            end\n        else\n            return false\n        end\n      \
    \  i = i + 1\n    end\n    if not dot_found then\n        return false\n    end\n\
    \    if not ext_found then\n        return false\n    end\n    local ext = file_name:sub(ext_pos,\
    \ #file_name)\n    if ext ~= \"txt\" and ext ~= \"exe\" and ext ~= \"dll\" then\n\
    \        return false\n    end\n    return true\nend", "    local ext_list = {'txt',\
    \ 'exe', 'dll'}\n    local ext_set = Set(ext_list)\n    local valid_name = file_name:match('^%a[%w]*%.(%a+)$')\n\
    \    local valid_digits = (file_name:match('%d') or ''):len() <= 3\n    return\
    \ (valid_name and valid_digits and ext_set[valid_name]) and 'Yes' or 'No'\nend",
  "  local file_name_before_dot = file_name:match(\"^[%a][%w]*\")\n  local file_name_after_dot\
    \ = file_name:match(\"[%a][%w]*$\")\n  local number_of_digits = file_name:match(\"\
    %d\")\n  local dot_number = file_name:match(\"%.\")\n  if file_name_before_dot\
    \ ~= nil and file_name_after_dot ~= nil and\n      dot_number == 1 and \n    \
    \  (file_name_after_dot == \"txt\" or file_name_after_dot == \"exe\" or\n    \
    \  file_name_after_dot == \"dll\") and\n      number_of_digits:len() <= 3 then\n\
    \    return \"Yes\"\n  else\n    return \"No\"\n  end\nend", "  return \"Yes\"\
    \nend", "\tlocal count, dot_pos = 0, 0\n\tfor i = 1, #file_name do\n\t\tif '0'\
    \ <= file_name:sub(i, i) and file_name:sub(i, i) <= '9' then\n\t\t\tcount = count\
    \ + 1\n\t\t\tif count > 3 then\n\t\t\t\treturn No\n\t\t\tend\n\t\telseif file_name:sub(i,\
    \ i) == '.' then\n\t\t\tdot_pos = i\n\t\tend\n\tend\n\tif dot_pos == 0 or file_name:sub(1,\
    \ dot_pos - 1) == '' then\n\t\treturn No\n\tend\n\tif file_name:sub(dot_pos +\
    \ 1, dot_pos + 3) ~= 'txt' and file_name:sub(dot_pos + 1, dot_pos + 3) ~= 'exe'\
    \ and file_name:sub(dot_pos + 1, dot_pos + 3) ~= 'dll' then\n\t\treturn No\n\t\
    end\n\treturn Yes\nend", "  -- write your code here\n  local num_digits, num_dots\
    \ = 0, 0\n  local extension\n  for idx = 1, #file_name do\n    local char = file_name:sub(idx,\
    \ idx)\n    if string.find(char, \"%d\") then\n      num_digits = num_digits +\
    \ 1\n    elseif char == \".\" then\n      num_dots = num_dots + 1\n      extension\
    \ = file_name:sub(idx + 1)\n    end\n  end\n  if num_digits > 3 or num_dots ~=\
    \ 1 or #extension == 0 then\n    return \"No\"\n  end\n  local substring = file_name:sub(1,\
    \ file_name:find(\".\") - 1)\n  local first_char = substring:sub(1, 1)\n  if string.find(first_char,\
    \ \"%a\") and string.find(extension, \"[txt|exe|dll]\") then\n    return \"Yes\"\
    \n  end\n  return \"No\"\nend", "\t-- your code here\nend", "    -- write your\
    \ code here\n    local i, sub1, sub2, count_num, count_dot, sub3 = 1, \"\", \"\
    \", 0, 0, \"\"\n    while i <= #file_name do\n        if string.sub(file_name,\
    \ i, i) == \".\" then\n            count_dot = count_dot + 1\n            sub1\
    \ = sub2\n            sub2 = \"\"\n        elseif count_dot == 0 then\n      \
    \      sub2 = sub2 .. string.sub(file_name, i, i)\n        elseif count_dot ==\
    \ 1 then\n            sub3 = sub3 .. string.sub(file_name, i, i)\n        end\n\
    \        if string.find(\"0123456789\", string.sub(file_name, i, i)) then\n  \
    \          count_num = count_num + 1\n        end\n        i = i + 1\n    end\n\
    \    if count_dot ~= 1 or count_num > 3 or #sub1 == 0 or not string.find(\"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    , string.sub(sub1, 1, 1)) or (sub3 ~= \"txt\" and sub3 ~= \"exe\" and sub3 ~=\
    \ \"dll\") then\n        return \"No\"\n    else\n        return \"Yes\"\n   \
    \ end\nend", "    -- Your implementation goes here\n    -- first split the name\
    \ by dots\n    local parts = string.split(file_name, \".\")\n    -- check if the\
    \ length of the splitted name is equal to 2\n    if #parts ~= 2 then\n       \
    \ return No\n    end\n    -- check if the first part matches the regex\n    if\
    \ not string.match(parts[1], \"^[a-zA-Z][a-zA-Z0-9]*$\") then\n        return\
    \ No\n    end\n    -- check if the second part matches the regex\n    if not string.match(parts[2],\
    \ \"^txt$|^exe$|^dll$\") then\n        return No\n    end\n    -- check if the\
    \ number of digits is larger than 3\n    if #string.gsub(parts[1], \"[^0-9]\"\
    , \"\") > 3 then\n        return No\n    end\n    return Yes\nend", "\tlocal first_pattern\
    \ = \"(%a%d*)(%.)(%a%a%a)\"\n\tlocal second_pattern = \"^\" .. first_pattern ..\
    \ \"$\"\n\tlocal first_match = first_pattern:match(file_name)\n\tif first_match\
    \ == nil then\n\t\treturn No\n\tend\n\tlocal last_part = first_match:match(second_pattern)\n\
    \tif last_part == nil then\n\t\treturn No\n\tend\n\treturn Yes\nend", "    return\
    \ file_name:match('^%a+%d?%d?%d?%.(txt|exe|dll)$') and 'Yes' or 'No'\nend", " \
    \   return No\nend", "    -- body\nend\nassert(file_name_check(\"a.txt\") == \"\
    Yes\")\nassert(file_name_check(\"a.exe\") == \"Yes\")\nassert(file_name_check(\"\
    a.dll\") == \"Yes\")\nassert(file_name_check(\"no.dll\") == \"No\")\nassert(file_name_check(\"\
    a.txtb\") == \"No\")\nassert(file_name_check(\"a.txt.a\") == \"No\")\nassert(file_name_check(\"\
    no.txt\") == \"No\")\nassert(file_name_check(\"a000.txt\") == \"No\")\nassert(file_name_check(\"\
    a.1.2.3.txt\") == \"No\")\nassert(file_name_check(\"a..txt\") == \"No\")\nassert(file_name_check(\"\
    a.txt.exe\") == \"No\")\nassert(file_name_check(\"a.txt.exe.dll\") == \"No\")\n\
    assert(file_name_check(\"a.exe.txt\") == \"No\")\nassert(file_name_check(\"a.exe.dll\"\
    ) == \"No\")\nassert(file_name_check(\"a.dll.exe\") == \"No\")\nassert(file_name_check(\"\
    a.txt.exe.dll.exe\") == \"No\")\nassert(file_name_check(\"a.txt.txt.txt\") ==\
    \ \"No\")\nassert(file_name_check(\"a.exe.exe.exe\") == \"No\")\nassert(file_name_check(\"\
    a.dll.dll.dll\") == \"No\")\nassert(file_name_check(\"a.dll.dll.dll.dll\") ==\
    \ \"No\")\nassert(file_name_check(\"a.txt.txt.txt.txt\") == \"No\")\nassert(file_name_check(\"\
    a.exe.exe.exe.exe\") == \"No\")\nassert(file_name_check(\"a.\") == \"No\")\nassert(file_name_check(\"\
    a.txt.\") == \"No\")\nassert(file_name_check(\"a.exe.\") == \"No\")\nassert(file_name_check(\"\
    a.dll.\") == \"No\")\nassert(file_name_check", "    local digits_allowed = 3\n\
    \    local ext_allowed = {txt = true, exe = true, dll = true}\n    local digits_num\
    \ = 0\n    local first_ext_char = false\n    local extension = false\n    for\
    \ i = 1, #file_name do\n        local char = file_name:sub(i, i)\n        if char:match('%d')\
    \ then\n            digits_num = digits_num + 1\n        elseif char == '.' then\n\
    \            if extension then\n                return 'No'\n            end\n\
    \            extension = true\n        elseif char:match('%a') then\n        \
    \    if not extension then\n                first_ext_char = true\n          \
    \  end\n        else\n            return 'No'\n        end\n    end\n    if extension\
    \ and first_ext_char and ext_allowed[file_name:match('%.(.+)$')] and digits_num\
    \ <= digits_allowed then\n        return 'Yes'\n    end\n    return 'No'\nend",
  end, "\treturn file_name:match('[0-9]') and file_name:match('[0-9][0-9][0-9]') ==\
    \ nil and file_name:match('.') and file_name:match('[a-zA-Z]+') and file_name:match('%.[txt]+')\
    \ or file_name:match('%.[exe]+') or file_name:match('%.[dll]+') and true or false\n\
    end", "    error(\"TODO\")\nend\nassert(file_name_check('AB90.exe') == \"Yes\"\
    )\nassert(file_name_check('AB.txt') == \"Yes\")\nassert(file_name_check('12345.txt')\
    \ == \"No\")\nassert(file_name_check('12345.txt') == \"No\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes\")\nassert(file_name_check('AB12.txt')\
    \ == \"Yes\")\nassert(file_name_check('AB12.txt') == \"Yes", "\t-- if string.match(file_name,\
    \ \"%d%d%d%.%w+\") then return \"No\" end -- for 2 digits\n\tif string.match(file_name,\
    \ \"%d%d%d%d+%.%w+\") then return \"No\" end\n\tif string.match(file_name, \"\
    %.%w+\") then return \"No\" end\n\tif string.match(file_name, \"%d%.%w+\") then\
    \ return \"No\" end\n\tif string.match(file_name, \"%d%d%.%w+\") then return \"\
    No\" end\n\tif string.match(file_name, \"%d%d%d%.%w+\") then return \"No\" end\n\
    \tif string.match(file_name, \"%a%a*%.$\") then return \"No\" end\n\tif string.match(file_name,\
    \ \"%a%a*%.%w%w%w$\") then return \"No\" end\n\tif string.match(file_name, \"\
    %a%a*%.%w%w%w$\") and\n\tstring.match(file_name, \"%a%a*%.%w%w%w$\") ~= \"txt\"\
    \ and\n\tstring.match(file_name, \"%a%a*%.%w%w%w$\") ~= \"exe\" and\n\tstring.match(file_name,\
    \ \"%a%a*%.%w%w%w$\") ~= \"dll\" then\n\t\treturn \"No\"\n\tend\n\treturn \"Yes\"\
    \nend", "  local f = file_name:gmatch('([%a%d]+)')\n  local file_name, file_type\
    \ = f(), f()\n  if file_name:match('%d') and file_name:match('%d'):len() > 3 then\n\
    \    return 'No'\n  end\n  if not file_type or file_type ~= 'txt' and file_type\
    \ ~= 'exe' and file_type ~= 'dll' then\n    return 'No'\n  end\n  return 'Yes'\n\
    end", "\t-- your code here\n\tif(file_name:match(\"^[A-Za-z]+%.[a-zA-Z]*[A-Za-z]$\"\
    )) then\n\t\treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend", "    -- '^'\
    \ - start of string, '$' - end of string\n    -- '[1-9]' - any digit from 1 to\
    \ 9\n    -- '%d' - any digit from 0 to 9\n    -- '%l' - any lowercase letter from\
    \ 'a' to 'z'\n    -- '%u' - any uppercase letter from 'A' to 'Z'\n    -- '%a'\
    \ - any letter\n    -- '%s' - any space character\n    -- '%p' - any punctuation\
    \ character\n    -- '%w' - any alphanumeric character\n    -- '%x' - any hexadecimal\
    \ digit (0-9, a-f, A-F)\n    -- '+' - one or more\n    -- '*' - zero or more\n\
    \    -- '?' - zero or one\n    -- '-' - range\n    -- '[' - class: '['+'['+']'+']'\
    \ = '[[]' = '['\n    -- '.' - any character except newline\n    -- '%' - escape\
    \ character\n    -- '%.' - dot\n    -- '%(%d%)' - only first digit\n    -- '%1'\
    \ - one digit, '%2' - two digits, etc.\n    -- '%0%d' - zero or more digits\n\
    \    -- '%0%d%d' - zero or more digits\n    -- '%0%d%d' - zero or more digits\n\
    \    -- '%%' - '%'\n    -- # - length\n    -- '%%a' - 'a'\n    -- '()' - group\n\
    \    -- '%1%.%2%' - first group, dot, second group\n    -- '%(' - start of group\n\
    \    -- '%(%l%w*%d*%' - first group: any letter, zero or more alphanumeric characters,\
    \ zero or more digits\n    -- '%(%l%w*%d*%)' - first group: any letter, zero or\
    \ more alphanumeric characters, zero or more digits\n    -- '%(%l%w*%d*%)%.%(%l%w*%d*%)'\
    \ - first group: any letter, zero or more alphanumeric characters, zero or more",
  "    local cnt_digits = file_name:gsub('%d', '')\n    local cnt_dots = file_name:gsub('%.',\
    \ '')\n    local cnt_alpha = file_name:gsub('%a', '')\n    if cnt_digits:len()\
    \ - file_name:len() <= 3 and\n    cnt_dots:len() - file_name:len() == 1 and\n\
    \    cnt_alpha:len() - file_name:len() == 1 and\n    file_name:match('^%a') and\n\
    \    file_name:match('%a+%..+') and\n    file_name:match('%a+%.[txde]+') then\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend\nassert(file_name_check('hello.txt')\
    \ == 'Yes')\nassert(file_name_check('Ddd.exe') == 'Yes')\nassert(file_name_check('123.dll')\
    \ == 'Yes')\nassert(file_name_check('hello.txtxx') == 'No')\nassert(file_name_check('greetings.dll')\
    \ == 'No')\nassert(file_name_check('..dll') == 'No')\nassert(file_name_check('..exe')\
    \ == 'No')\nassert(file_name_check('..txt') == 'No')\nassert(file_name_check('1231231234.dll')\
    \ == 'No')\nassert(file_name_check('0010100010.exe') == 'No')\nassert(file_name_check('111.exe')\
    \ == 'No')\nassert(file_name_check('hello.txt.exe') == 'No')\nassert(file_name_check('1231231234.exe')\
    \ == 'No')\nassert(file_name_check('0010100010.txt') == 'No')\nassert(file_name_check('hello.exe')\
    \ == 'No')\nassert(file_name_check('greetings.exe') == 'No')\nassert(file_name_check('greetings.dll')\
    \ == 'No')\nassert(file_name_check('exe') == 'No')\nassert(", "\tlocal _, n1 =\
    \ file_name:gsub(\"%d\", \"\")\n\tlocal n2, _ = file_name:gsub(\"%.\", \"\")\n\
    \tlocal f_name, ext = file_name:match(\"^([^.]*).([^.]*)$\")\n\tlocal f_f = string.match(f_name,\
    \ \"^[A-Za-z]\")\n\tlocal ext_f = ext == \"txt\" or ext == \"exe\" or ext == \"\
    dll\"\n\tlocal n3 = #f_name\n\treturn n1 <= 3 and n2 == 1 and n3 > 0 and f_f and\
    \ ext_f and \"Yes\" or \"No\"\nend", "\t-- Write your code here\n    --local t\
    \ = {}\n    --local count = 0\n    local t1 = {}\n    local dot = 0\n    for i\
    \ = 1, #file_name do\n        --if file_name:sub(i,i) == '.' then \n         \
    \ --  table.insert(t, file_name:sub(i+1))\n            --break\n        --end\n\
    \        --if file_name:sub(i,i) >= '0' and file_name:sub(i,i) <= '9' then\n \
    \         --  count = count + 1\n        --end\n        if file_name:sub(i,i)\
    \ == '.' then \n            dot = dot + 1\n        end\n        table.insert(t1,\
    \ file_name:sub(i,i))\n    end\n    --if count > 3 then\n      --  return 'No'\n\
    \    --end\n    if dot > 1 then \n        return 'No'\n    end\n    if t1[1] >=\
    \ '0' and t1[1] <= '9' then\n        return 'No'\n    end\n    --if t[1] ~= 'txt'\
    \ and t[1] ~= 'exe' and t[1] ~= 'dll' then\n      --  return 'No'\n    --end\n\
    \    if file_name:sub(-3,-1) ~= 'txt' and file_name:sub(-3,-1) ~= 'exe' and file_name:sub(-3,-1)\
    \ ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend", "    local\
    \ dot_pos = string.find(file_name, '.')\n    if dot_pos == nil then\n        return\
    \ 'No'\n    end\n    local file_name_length = string.len(file_name)\n    local\
    \ file_prefix = string.sub(file_name, 1, dot_pos - 1)\n    local file_suffix =\
    \ string.sub(file_name, dot_pos + 1, file_name_length)\n    local num_digits =\
    \ 0\n    for i = 1, string.len(file_prefix) do\n        local char = string.sub(file_prefix,\
    \ i, i)\n        if (char >= '0') and (char <= '9') then\n            num_digits\
    \ = num_digits + 1\n        end\n    end\n    if num_digits > 3 then\n       \
    \ return 'No'\n    end\n    if (string.len(file_prefix) == 0) or\n        (string.sub(file_prefix,\
    \ 1, 1) < 'A') or\n        (string.sub(file_prefix, 1, 1) > 'z') or\n        ((string.sub(file_prefix,\
    \ 1, 1) > 'Z') and (string.sub(file_prefix, 1, 1) < 'a')) then\n        return\
    \ 'No'\n    end\n    if (file_suffix ~= 'txt') and (file_suffix ~= 'exe') and\
    \ (file_suffix ~= 'dll') then\n        return 'No'\n    end\n    return 'Yes'\n\
    end", "  -- this is the longest solution i can figure out\n  -- i will try to\
    \ make it shorter later\n  local len = string.len(file_name)\n  local dot_pos\
    \ = 0\n  local digit_cnt = 0\n  local file_kind = ''\n  for i = 1, len do\n  \
    \  if string.byte(file_name, i) > 47 and string.byte(file_name, i) < 58 then\n\
    \      digit_cnt = digit_cnt + 1\n    end\n    if string.byte(file_name, i) ==\
    \ 46 then\n      dot_pos = i\n    end\n  end\n  file_kind = string.sub(file_name,\
    \ dot_pos+1, len)\n  if digit_cnt > 3 then\n    return 'No'\n  end\n  if dot_pos\
    \ < 2 then\n    return 'No'\n  end\n  if not (string.byte(file_name, 1) > 64 and\
    \ string.byte(file_name, 1) < 91) and not (string.byte(file_name, 1) > 96 and\
    \ string.byte(file_name, 1) < 123) then\n    return 'No'\n  end\n  if file_kind\
    \ ~= 'txt' and file_kind ~= 'exe' and file_kind ~= 'dll' then\n    return 'No'\n\
    \  end\n  return 'Yes'\nend", "    return \"No\"\nend", "    local m = file_name:match(\"\
    ^[a-zA-Z](%d*)%.(txt|exe|dll)$\")\n    if m and m:len() <= 3 then\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "    local count = 0\n\
    \    local txt_count = 0\n    local period_pos = 0\n    for i = 1, #file_name\
    \ do\n        if file_name:sub(i, i) == '.' then\n            period_pos = i\n\
    \        end\n        if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <=\
    \ '9' then\n            count = count + 1\n        end\n        if file_name:sub(i,\
    \ i) == 't' and file_name:sub(i + 1, i + 1) == 'x' and file_name:sub(i + 2, i\
    \ + 2) == 't' then\n            txt_count = txt_count + 1\n        end\n    end\n\
    \    if count <= 3 and period_pos ~= 1 and txt_count >= 1 then\n        return\
    \ 'Yes'\n    else\n        return 'No'\n    end\nend", "   local digits = 0\n\
    \   local dot = false\n   local before_dot = false\n   local after_dot = false\n\
    \   for i=1, #file_name do\n      local c = file_name:sub(i,i)\n      if c >=\
    \ '0' and c <= '9' then\n         digits = digits + 1\n      elseif c == '.' then\n\
    \         dot = true\n      elseif dot == false then\n         if i == 1 then\n\
    \            if (c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z') then\n    \
    \           before_dot = true\n            end\n         else\n            if\
    \ (c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z') or (c >= '0' and c <= '9')\
    \ then\n               before_dot = true\n            end\n         end\n    \
    \  else\n         if (c >= 'a' and c <= 'z') or (c >= 'A' and c <= 'Z') then\n\
    \            after_dot = true\n         end\n      end\n   end\n   local after_dot_txt\
    \ = file_name:sub(-3) == 'txt'\n   local after_dot_exe = file_name:sub(-3) ==\
    \ 'exe'\n   local after_dot_dll = file_name:sub(-3) == 'dll'\n   return digits\
    \ <= 3 and dot and before_dot and (after_dot_txt or after_dot_exe or after_dot_dll)\n\
    end", "    -- your code here\nend", "    return false\nend", "\tlocal function\
    \ file_name_error_msg(error_msg)\n\t\treturn {\n\t\t\tsuccess = false,\n\t\t\t\
    error_msg = error_msg\n\t\t}\n\tend", "  local _, digit_count = file_name:gsub('%d',\
    \ '')\n  if digit_count > 3 then\n    return 'No'\n  end\n  local a, b = file_name:match('^([a-zA-Z][a-zA-Z0-9]*)%.([a-zA-Z0-9]+)$')\n\
    \  if not a or not b then\n    return 'No'\n  end\n  if b ~= 'txt' and b ~= 'exe'\
    \ and b ~= 'dll' then\n    return 'No'\n  end\n  return 'Yes'\nend", "\t-- TODO:\n\
    end", "    -- your code here\n    if file_name:find('[%d]') > 4 then\n       \
    \ return 'No'\n    end\n    if file_name:find('%.') ~= 1 then\n        return\
    \ 'No'\n    end\n    local dot_pos = file_name:find('%.')\n    local before_dot\
    \ = file_name:sub(1, dot_pos - 1)\n    local after_dot = file_name:sub(dot_pos\
    \ + 1)\n    if #before_dot == 0 or before_dot:find('[%a]') ~= 1 then\n       \
    \ return 'No'\n    end\n    if after_dot ~= 'txt' and after_dot ~= 'exe' and after_dot\
    \ ~= 'dll' then\n        return 'No'\n    end\n    return 'Yes'\nend", "    --\
    \ your code goes here\n    if #file_name == 0 then return 'No' end\n    local\
    \ function check_extension(ext)\n        return ext == 'txt' or ext == 'exe' or\
    \ ext == 'dll'\n    end\n    local file_name_list = string.split(file_name, '.')\n\
    \    if #file_name_list ~= 2 then return 'No' end\n    if file_name_list[1] ==\
    \ '' then return 'No' end\n    if not string.match(file_name_list[1], '^[%a][%w]*$')\
    \ then return 'No' end\n    if #string.gsub(file_name_list[1], '%d', '') > 3 then\
    \ return 'No' end\n    if not check_extension(file_name_list[2]) then return 'No'\
    \ end\n    return 'Yes'\nend", "    error \"TODO\"\nend", "  local left, right\
    \ = file_name:match(\"^([%a%d]+)%.([%a%d]+)$\")\n  if not left or not right then\
    \ return 'No' end\n  local count = 0\n  for c in left:gmatch(\"%d\") do count\
    \ = count + 1 end\n  if count > 3 then return 'No' end\n  if right ~= 'txt' and\
    \ right ~= 'exe' and right ~= 'dll' then return 'No' end\n  return 'Yes'\nend",
  "\treturn #(file_name:match(\"^[a-zA-Z]+[%d]*%.%a+$\")) ~= 0 and #(file_name:match(\"\
    %d+\")) <= 3\nend", "    local max_digits = 3\n    if file_name:match(\"[0-9]\"\
    ) == nil then\n        return \"No\"\n    end\n    local num_digits = string.len(file_name:match(\"\
    [0-9]+\"))\n    if num_digits > max_digits then\n        return \"No\"\n    end\n\
    \    if file_name:match(\"[^%.]%.$\") == nil then\n        return \"No\"\n   \
    \ end\n    if file_name:match(\"^[a-zA-Z]+%.\") == nil then\n        return \"\
    No\"\n    end\n    local extension = file_name:match(\"[^%.]+$\")\n    if extension\
    \ ~= \"txt\" and extension ~= \"exe\" and extension ~= \"dll\" then\n        return\
    \ \"No\"\n    end\n    return \"Yes\"\nend", "    local digits = 0\n    local\
    \ file_ext = \"\"\n    local sub_ext = false\n    local dot_count = 0\n    local\
    \ file_name_no_ext\n    for i = 1, #file_name do\n        local curr_char = file_name:sub(i,\
    \ i)\n        if curr_char == \".\" then\n            if i == 1 then\n       \
    \         return No\n            end\n            dot_count = dot_count + 1\n\
    \            if #file_name - i < 3 then\n                return No\n         \
    \   end\n            file_ext = file_name:sub(i + 1, i + 3)\n            if file_ext\
    \ == \"txt\" or file_ext == \"exe\" or file_ext == \"dll\" then\n            \
    \    sub_ext = true\n            end\n            file_name_no_ext = file_name:sub(1,\
    \ i - 1)\n        elseif curr_char:match(\"%d\") then\n            digits = digits\
    \ + 1\n        end\n    end\n    if digits > 3 or dot_count > 1 or not sub_ext\
    \ or not file_name_no_ext:match(\"^[a-zA-Z]\") then\n        return No\n    end\n\
    \    return Yes\nend", "    -- TODO: return 'Yes' if the file's name is valid,\
    \ and 'No' otherwise.\nend\nassert(file_name_check(\"file.txt\") == \"Yes\")\n\
    assert(file_name_check(\"file.exe\") == \"Yes\")\nassert(file_name_check(\"file.dll\"\
    ) == \"Yes\")\nassert(file_name_check(\"file.txt.exe\") == \"No\")\nassert(file_name_check(\"\
    file.txt.dll\") == \"No\")\nassert(file_name_check(\"file.zip\") == \"No\")\n\
    assert(file_name_check(\"123456.txt\") == \"No\")\nassert(file_name_check(\"12345.txt\"\
    ) == \"Yes\")\nassert(file_name_check(\"1.txt\") == \"Yes\")\nassert(file_name_check(\"\
    file.t\") == \"No\")\nassert(file_name_check(\"file.tx\") == \"No\")\nassert(file_name_check(\"\
    file.txtx\") == \"No\")\nassert(file_name_check(\"file..txt\") == \"No\")\nassert(file_name_check(\"\
    file.\") == \"No\")\nassert(file_name_check(\"file\") == \"No\")\nassert(file_name_check(\"\
    .\") == \"No\")\nassert(file_name_check(\"\") == \"No\")\nassert(file_name_check(\"\
    file.txtt\") == \"No\")\nassert(file_name_check(\"file.txe\") == \"No\")\nassert(file_name_check(\"\
    file.dlll\") == \"No\")\nassert(file_name_check(\"1a.txt\") == \"Yes\")\nassert(file_name_check(\"\
    a.txt\") == \"Yes\")\nassert(file_name_check(\"a\") == \"No\")\nassert(file_name_check(\"\
    1a\") == \"No\")\nassert(file_name_check(\"a1\") == \"No\")\nassert(file_name_check(\"\
    a_a.txt\") == \"No\")\nassert(file_name_check(\"a_1.txt\") == \"No\")\nassert(file_name_check(\"\
    1_a.txt\") == \"No\")\nassert(file_name_", "\tlocal pattern = '[a-zA-Z][a-zA-Z0-9]*%.(txt|exe|dll)'\n\
    \tlocal pattern_without_ext = '[a-zA-Z][a-zA-Z0-9]*'\n\tlocal pattern_ext = '(txt|exe|dll)'\n\
    \tlocal num_digits = 0\n\tlocal without_ext, ext\n\tlocal result = 'No'\n\tif\
    \ string.match(file_name, pattern) then\n\t\twithout_ext = string.match(file_name,\
    \ pattern_without_ext)\n\t\tfor s in string.gmatch(without_ext, '%d') do\n\t\t\
    \tnum_digits = num_digits + 1\n\t\tend\n\t\tif num_digits <= 3 then\n\t\t\text\
    \ = string.match(file_name, pattern_ext)\n\t\t\tif ext then\n\t\t\t\tresult =\
    \ 'Yes'\n\t\t\tend\n\t\tend\n\tend\n\treturn result\nend", "  return 'No'\nend",
  "    -- write your code here\n    return nil\nend", "\tlocal name, ext = file_name:match(\"\
    (.+)%.(.+)\")\n\treturn (\n\t\tfile_name:find(\"^[%a]\") and \n\t\tfile_name:find(\"\
    %d\", 3) and \n\t\tname:len() > 0 and \n\t\text:find(\"^(txt|exe|dll)$\")\n\t\
    ) and \"Yes\" or \"No\"\nend", "    -- You can use 'lower' and 'upper' functions\
    \ from string module to convert letters to lower/upper\n    -- case (you can use\
    \ string.lower(file_name) to convert the whole string to lower case).\n    --\
    \ You can check if a string starts with a letter from a to z using the following\
    \ condition:\n    -- file_name:sub(1, 1):match('%a') == file_name:sub(1, 1)\n\
    \    -- You can use 'gmatch' function to iterate through all letters in a string\
    \ (for example: \n    -- for l in file_name:gmatch('.') do print(l) end will print\
    \ all letters in the file_name)\n    -- gmatch function iterates through all matches\
    \ of its pattern parameter, and in this case\n    -- the pattern '.' matches any\
    \ character.\n    -- You can use file_name:sub(s, e) to get the substring between\
    \ index s and index e.\n    -- You can use #file_name to get the file's name length.\n\
    \    -- You can use file_name:find(pattern, init, plain) to find the start and\
    \ end indices of the\n    -- first occurrence of the specified pattern. The function\
    \ returns nil if there is no such\n    -- occurrence. The function returns start\
    \ and end indices if such occurence exist. If a third\n    -- parameter is given\
    \ and it is a boolean true value, the function will do a plain search,\n    --\
    \ without any magic characters.\n    -- For example:\n    -- 'abc123'.find('%d',\
    \ 1, true) returns nil because '%d' is a magic character which means\n    -- digit\
    \ ('0'-'9'), so the function will try to find if there is a digit in 'abc123'\
    \ but it\n    -- won't find any.\n    -- 'abc123'.find('%d', 1, false) returns\
    \ 4 because '%d' is a magic character which means\n    -- digit ('0'-'9'), so\
    \ the function will try to find if there is a digit in 'abc123' and\n    -- in\
    \ this case it will find '1' on index 4.\n    -- 'abc123'.find('%d', 1) will return\
    \ the same value as\n    -- 'abc123'.find('%d', 1, false)", "    if not file_name:match(\"\
    %d%d%d%.\") or\n       not file_name:match(\"%a[a-zA-Z]*%.\") or\n       not file_name:match(\"\
    %.\") or\n       not file_name:match(\"%.[a-zA-Z]*\") then\n           return\
    \ \"No\"\n    end\n    local substr = file_name:match(\"%.[a-zA-Z]*\")\n    substr\
    \ = substr:sub(2)\n    for i=1,#substr do\n        if substr:byte(i) < 97 or substr:byte(i)\
    \ > 122 then\n            return \"No\"\n        end\n    end\n    if substr ==\
    \ \"txt\" or substr == \"exe\" or substr == \"dll\" then\n        return \"Yes\"\
    \n    end\n    return \"No\"\nend", "\tlocal valid_extensions = {['txt'] = true,\
    \ ['exe'] = true, ['dll'] = true}\n\t\n\tif file_name:find(\"%d\") and #file_name:gsub(\"\
    %d\", \"\") < 3 then\n\t\tlocal ext, name = file_name:match(\"(%w+)%.(%w+)\")\n\
    \t\tif ext and name and valid_extensions[ext] and name:match(\"^%a\") then\n\t\
    \t\treturn 'Yes'\n\t\tend\n\tend\n\treturn 'No'\nend", "\t-- write your solution\
    \ here\n\tlocal str = file_name\n\tlocal len = string.len(str)\n\tlocal count\
    \ = 0\n\tfor i = 1, len do\n\t\tif string.sub(str, i, i) == '.' then\n\t\t\tfor\
    \ j = 1, i - 1 do\n\t\t\t\tif (string.sub(str, j, j) >= '0') and (string.sub(str,\
    \ j, j) <= '9') then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\
    \tif (count > 3) or (i == 1) then\n\t\t\t\treturn false\n\t\t\tend\n\t\t\tlocal\
    \ t = i + 1\n\t\t\tlocal exp = string.sub(str, t, len)\n\t\t\tif (exp == 'txt')\
    \ or (exp == 'exe') or (exp == 'dll') then\n\t\t\t\treturn true\n\t\t\telse\n\t\
    \t\t\treturn false\n\t\t\tend\n\t\tend\n\tend\n\treturn false\nend\nprint(file_name_check('hello.txt'))\n\
    print(file_name_check('hello.exe'))\nprint(file_name_check('hello.dll'))\nprint(file_name_check('1.txt'))\n\
    print(file_name_check('1.exe'))\nprint(file_name_check('1.dll'))\nprint(file_name_check('01.txt'))\n\
    print(file_name_check('01.exe'))\nprint(file_name_check('01.dll'))\nprint(file_name_check('001.txt'))\n\
    print(file_name_check('001.exe'))\nprint(file_name_check('001.dll'))\nprint(file_name_check('001.pdf'))\n\
    print(file_name_check('001.txt.exe'))\nprint(file_name_check('001.txt.dll'))\n\
    print(file_name_check('001.exe.txt'))\nprint(file_name_check('001.exe.dll'))\n\
    print(file_name_check('001.dll.txt'", "    local sub1, sub2 = \"\", \"\"\n   \
    \ local count = 0\n    for i = 1, #file_name do\n        if file_name:sub(i, i)\
    \ == \".\" then\n            sub1 = file_name:sub(1, i - 1)\n            sub2\
    \ = file_name:sub(i + 1, #file_name)\n            break\n        end\n    end\n\
    \    for i = 1, #sub1 do\n        if sub1:sub(i, i) == \"0\" or sub1:sub(i, i)\
    \ == \"1\" or sub1:sub(i, i) == \"2\" or sub1:sub(i, i) == \"3\" or sub1:sub(i,\
    \ i) == \"4\" or sub1:sub(i, i) == \"5\" or sub1:sub(i, i) == \"6\" or sub1:sub(i,\
    \ i) == \"7\" or sub1:sub(i, i) == \"8\" or sub1:sub(i, i) == \"9\" then\n   \
    \         count = count + 1\n        end\n    end\n    if sub1 == \"\" or sub2\
    \ == \"\" or count > 3 or sub2 ~= \"txt\" and sub2 ~= \"exe\" and sub2 ~= \"dll\"\
    \ then\n        return \"No\"\n    else\n        return \"Yes\"\n    end\nend",
  "    -- Write your code here.\n    local num = 0\n    local dot_pos = -1\n    local\
    \ dot_pos2 = -1\n    local flag = false\n    for i = 1, #file_name do\n      \
    \  if file_name:sub(i, i) >= '0' and file_name:sub(i, i) <= '9' then\n       \
    \     num = num + 1\n        end\n        if file_name:sub(i, i) == '.' then\n\
    \            if dot_pos == -1 then\n                dot_pos = i\n            else\n\
    \                dot_pos2 = i\n            end\n        end\n    end\n    if num\
    \ > 3 then\n        return \"No\"\n    end\n    if dot_pos == -1 or dot_pos2 ~=\
    \ -1 then\n        return \"No\"\n    end\n    if dot_pos == 1 then\n        return\
    \ \"No\"\n    end\n    if dot_pos == #file_name then\n        return \"No\"\n\
    \    end\n    if (file_name:sub(1, 1) >= 'a' and file_name:sub(1, 1) <= 'z') or\
    \ (file_name:sub(1, 1) >= 'A' and file_name:sub(1, 1) <= 'Z') then\n        flag\
    \ = true\n    end\n    if flag == false then\n        return \"No\"\n    end\n\
    \    if file_name:sub(dot_pos + 1, dot_pos + 3) == \"txt\" or file_name:sub(dot_pos\
    \ + 1, dot_pos + 3) == \"exe\" or file_name:sub(dot_pos + 1, dot_pos + 3) == \"\
    dll\" then\n        return \"Yes\"\n    else\n        return \"No\"\n    end\n\
    end", "  if string.match(file_name, \"%d%d%d\") and\n     string.match(file_name,\
    \ \"%.%a%a%a\") and\n     string.match(file_name, \"%a.*%.\") and\n     string.match(file_name,\
    \ \"%.txt$\") or\n     string.match(file_name, \"%.exe$\") or\n     string.match(file_name,\
    \ \"%.dll$\") then\n     return \"Yes\"\n   else\n     return \"No\"\n   end\n\
    end", "  -- your code\nend", "  \nend", "   if file_name == nil then return 'No'\
    \ end\n   if string.match(file_name, '^[a-zA-Z]+[0-9]*%.[a-zA-Z]+$') == nil then\
    \ return 'No' end\n   if string.match(file_name, '%d%d%d') ~= nil then return\
    \ 'No' end\n   if string.match(file_name, '%.') == nil then return 'No' end\n\
    \   if string.match(file_name, '^%.') ~= nil then return 'No' end\n   if string.match(file_name,\
    \ '%.$') ~= nil then return 'No' end\n   if string.match(file_name, '%.exe$')\
    \ == nil and string.match(file_name, '%.txt$') == nil \n      and string.match(file_name,\
    \ '%.dll$') == nil then return 'No' end\n   return 'Yes'\nend", "    if not file_name:match(\"\
    %.\") then return false end\n    if string.match(file_name, \"%d\") and string.match(file_name,\
    \ \"%d%d\") and string.match(file_name, \"%d%d%d\") then return false end\n  \
    \  if string.match(file_name, \"%.\") and not string.match(file_name, \"%.\")[2]\
    \ then return false end\n    if not file_name:match(\"%.\") and not file_name:match(\"\
    %a\") then return false end\n    if file_name:match(\"%.\") and (not file_name:match(\"\
    %.\")[2] or not file_name:match(\"%.\")[3]) then return false end\n    if not\
    \ file_name:match(\"%.\")[3] or not file_name:match(\"%.\")[4] then return false\
    \ end\n    if not file_name:match(\"%.\")[4] or not file_name:match(\"%.\")[5]\
    \ then return false end\n    if file_name:match(\"%.\")[5] then return false end\n\
    \    local ext = file_name:match(\"%.\")[3] .. file_name:match(\"%.\")[4]\n  \
    \  if not (ext == \"txt\" or ext == \"exe\" or ext == \"dll\") then return false\
    \ end\n    return true\nend\nassert(file_name_check(\"hello.txt\") == true)\n\
    assert(file_name_check(\"hello.exe\") == true)\nassert(file_name_check(\"hello.dll\"\
    ) == true)\nassert(file_name_check(\"hello.100\") == false)\nassert(file_name_check(\"\
    hello.txt10\") == false)\nassert(file_name_check(\"hellotxt\") == false)\nassert(file_name_check(\"\
    hello_world.exe\") == false)\nassert(file_name_check(\"hello.world.exe\") == false)\n\
    assert(file_name_check(\"a.out\") == false)\nassert(file_name_check(\"123.456\"\
    ) == false)\nassert(file_name_check(\"hello.txt.exe\") == false)", end, "end\n\
    assert(file_name_check('something.txt') == 'Yes')\nassert(file_name_check('...exe')\
    \ == 'No')\nassert(file_name_check('1.txt') == 'No')\nassert(file_name_check('s4.dll')\
    \ == 'No')\nassert(file_name_check('s.dll') == 'Yes')\nassert(file_name_check('a.dll')\
    \ == 'Yes')\nassert(file_name_check('s4.dll') == 'No')\nassert(file_name_check('s4.DLL')\
    \ == 'No')\nassert(file_name_check('a.txt') == 'Yes')\nassert(file_name_check('a')\
    \ == 'No')\nassert(file_name_check('a.') == 'No')\nassert(file_name_check('a.txt1')\
    \ == 'No')\nassert(file_name_check('a.txt123') == 'No')\nassert(file_name_check('a.txt1.txt')\
    \ == 'No')\nassert(file_name_check('11.txt') == 'No')\nassert(file_name_check('111.txt')\
    \ == 'No')\nassert(file_name_check('111.dll') == 'No')\nassert(file_name_check('111.exe')\
    \ == 'No')\nassert(file_name_check('111.') == 'No')\nassert(file_name_check('111..')\
    \ == 'No')\nassert(file_name_check('1..') == 'No')\nassert(file_name_check('1.1.txt')\
    \ == 'No')\nassert(file_name_check('12.txt') == 'Yes')\nassert(file_name_check('12.ex')\
    \ == 'No')\nassert(file_name_check('1.txt') == 'Yes')\nassert(file_name_check('1.exe')\
    \ == 'Yes')\nassert(file_name_check('1.dll') == 'Yes')\nassert(file_name_check('1')\
    \ == 'No')\nassert(file_name_check('.') == 'No')\nassert(file_name_check('..')\
    \ == 'No')\nassert", "    return file_name:match(\"^[a-zA-Z]+%d?%d?%d?%.(txt|exe|dll)$\"\
    ) and 'Yes' or 'No'\nend", "\treturn No\nend", "  local regex_pattern = '^[a-zA-Z][a-zA-Z0-9]{0,2}\\\
    \\.txt$'\n  local regex_pattern = '^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.exe$'\n  local\
    \ regex_pattern = '^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.dll$'\n  local regex_pattern\
    \ = '^[a-zA-Z][a-zA-Z0-9]{0,2}\\\\.(txt|exe|dll)$'\n  local regex_pattern = '[0-9]{3}'\n\
    \  local regex_pattern = '[^0-9]{3}'\n  local regex_pattern = '[a-zA-Z]{3}'\n\
    \  local regex_pattern = '[^a-zA-Z]{3}'\n  local regex_pattern = '[a-zA-Z]{3}[^a-zA-Z]{1}'\n\
    \  local regex_pattern = '[a-zA-Z]{3}[^a-zA-Z]{1}[a-zA-Z]{3}'\n  return string.match(file_name,\
    \ regex_pattern)\nend\nassert(file_name_check('some_file.txt') == 'Yes')\nassert(file_name_check('some.file.txt')\
    \ == 'No')\nassert(file_name_check('abc_123.exe') == 'Yes')\nassert(file_name_check('abc_1.2.exe')\
    \ == 'No')\nassert(file_name_check('abc_12.dll') == 'Yes')\nassert(file_name_check('abc_1.2.dll')\
    \ == 'No')\nassert(file_name_check('abc123.txt') == 'No')\nassert(file_name_check('abc1234.txt')\
    \ == 'No')\nassert(file_name_check('abc12.exe') == 'No')\nassert(file_name_check('abc1.exe')\
    \ == 'No')\nassert(file_name", "\tlocal pre_dot = file_name:match(\"^[A-Za-z][A-Za-z0-9]*\"\
    )\n\tlocal post_dot = file_name:match(\"[^.]+$\")\n\tlocal digits = file_name:match(\"\
    %d+\")\n\tlocal is_valid = 0\n\tif string.len(digits) <= 3 then\n\t\tis_valid\
    \ = is_valid + 1\n\tend\n\tif file_name:match(\"^.*%.%a+$\") and not file_name:match(\"\
    ^%.%a+$\") then\n\t\tis_valid = is_valid + 1\n\tend\n\tif pre_dot then\n\t\tis_valid\
    \ = is_valid + 1\n\tend\n\tif post_dot == \"txt\" or post_dot == \"exe\" or post_dot\
    \ == \"dll\" then\n\t\tis_valid = is_valid + 1\n\tend\n\tif is_valid == 4 then\n\
    \t\treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\tend\nend", "    local count_for_letters\
    \ = 0\n    local count_for_numbers = 0\n    local counter_for_dots = 0\n    local\
    \ count_for_possible_extensions = 0\n    local extension_index = 1\n    for i\
    \ = 1, #file_name do\n        if string.match(file_name, \"%l\") then\n      \
    \      count_for_letters = count_for_letters + 1\n        elseif string.match(file_name,\
    \ \"%d\") then\n            count_for_numbers = count_for_numbers + 1\n      \
    \  elseif string.match(file_name, \"%.\") then\n            count_for_possible_extensions\
    \ = count_for_possible_extensions + 1\n            extension_index = i\n     \
    \   end\n    end\n    local extension = string.sub(file_name, extension_index\
    \ + 1)\n    if string.match(extension, \"txt\") or string.match(extension, \"\
    exe\") or string.match(extension, \"dll\") then\n        count_for_possible_extensions\
    \ = count_for_possible_extensions + 1\n    end\n    if count_for_letters > 0 and\
    \ count_for_numbers < 4 and count_for_possible_extensions == 2 then\n        return\
    \ \"Yes\"\n    else\n        return \"No\"\n    end\nend", "    local num_counter\
    \ = 0;\n    local is_txt = false;\n    local is_exe = false;\n    local is_dll\
    \ = false;\n    local is_dot = false;\n    local is_empty = false;\n    local\
    \ is_char = false;\n    for i = 1, #file_name do\n        if file_name:sub(i,\
    \ i) == '.' then\n            is_dot = true;\n        elseif file_name:sub(i,\
    \ i) == '.' then\n            is_dot = true;\n        elseif tonumber(file_name:sub(i,\
    \ i)) ~= nil then\n            num_counter = num_counter + 1;\n        elseif\
    \ tonumber(file_name:sub(i, i)) == nil then\n            if file_name:sub(i, i)\
    \ == '.' then\n                is_dot = true;\n            elseif file_name:sub(i,\
    \ i) == ' ' then\n                is_empty = true;\n            elseif file_name:sub(i,\
    \ i) == '\\n' then\n                is_empty = true;\n            elseif file_name:sub(i,\
    \ i) == '\\r' then\n                is_empty = true;\n            elseif file_name:sub(i,\
    \ i) == '\\t' then\n                is_empty = true;\n            elseif file_name:sub(i,\
    \ i) == '~' then\n                is_empty = true;\n            elseif file_name:sub(i,\
    \ i) == '&' then\n                is_empty = true;\n            elseif file_name:sub(i,\
    \ i) == '*' then\n                is_empty = true;\n            elseif file_name:sub(i,\
    \ i) == '$' then\n                is_empty = true;\n            elseif file_name:sub(i,\
    \ i) == '#' then\n                is_empty = true;\n            elseif file_name:sub(i,\
    \ i) == '(' then\n                is_empty = true;\n            elseif file_name:sub(i,\
    \ i) == ')' then\n                is_empty = true;\n            elseif file_name:sub(i",
  "\tlocal name_part = file_name:match(\"^%a+\")\n\tlocal ext_part = file_name:match(\"\
    %.(%a+)$\")\n\tlocal file_name_without_ext = file_name:match(\"^(.+)%..+$\")\n\
    \tlocal digit_count = file_name_without_ext:gsub(\"%D\", \"\")\n\tlocal exts =\
    \ { txt = true, exe = true, dll = true }\n\t\n\tif #digit_count > 3 then\n\t\t\
    return \"No\"\n\telseif name_part == nil or ext_part == nil then\n\t\treturn \"\
    No\"\n\telseif exts[ext_part] == nil then\n\t\treturn \"No\"\n\telse\n\t\treturn\
    \ \"Yes\"\n\tend\nend\nassert(file_name_check(\"123.txt\") == \"No\")\nassert(file_name_check(\"\
    123.exe\") == \"No\")\nassert(file_name_check(\"abc.txt\") == \"Yes\")\nassert(file_name_check(\"\
    123.TXT\") == \"No\")\nassert(file_name_check(\"123.exe\") == \"No\")\nassert(file_name_check(\"\
    1.dll\") == \"No\")\nassert(file_name_check(\"a.txt\") == \"Yes\")\nassert(file_name_check(\"\
    A.txt\") == \"Yes\")\nassert(file_name_check(\"abc.dll\") == \"Yes\")\nassert(file_name_check(\"\
    abc.exe\") == \"Yes\")\nassert(file_name_check(\"abc.txt\") == \"Yes\")\nassert(file_name_check(\"\
    abc1.txt\") == \"Yes\")\nassert(file_name_check(\"abc2.txt\") == \"Yes\")\nassert(file_name_check(\"\
    abc_1.txt\") == \"Yes\")\nassert(file_name_check(\"abc_1.txt\") == \"Yes\")\n\
    assert(file_name_check(\"abc_2.txt\") == \"Yes\")\nassert(file_name_check(\"abc_1000.txt\"\
    ) == \"Yes\")\nassert(file_name_check(\"abc_1001.txt\") == \"No\")\nassert(file_name",
  "    -- \"____\" is for a missing piece of the puzzle\n    -- your code goes here\n\
    \    local str_pos, counter, digit_found, alpha_found, ext_found = 1, 0, false,\
    \ false, false\n    while str_pos <= #file_name do\n        local char = file_name:sub(str_pos,\
    \ str_pos)\n        if char >= '0' and char <= '9' then\n            digit_found\
    \ = true\n            counter = counter + 1\n        elseif char == '.' then\n\
    \            if counter <= 3 and not ext_found then\n                ext_found\
    \ = true\n            else\n                return No\n            end\n     \
    \   elseif char >= 'a' and char <= 'z' or char >= 'A' and char <= 'Z' then\n \
    \           alpha_found = true\n        else\n            return No\n        end\n\
    \        str_pos = str_pos + 1\n    end\n    if counter <= 3 and alpha_found and\
    \ ext_found then\n        return Yes\n    else\n        return No\n    end\nend",
  "    -- write your code here\nend", "    local file_name_length = #file_name\n \
    \   local file_name_extensions = {'txt', 'exe', 'dll'}\n    local last_dot_position\
    \ = string.find(file_name, '%.', 1, true)\n    local last_dot_index = file_name_length\n\
    \    local count_digits = 0\n    local count_dots = 0\n    local not_in_table\
    \ = true\n    local extension = ''\n    local sub_string = ''\n    local name\
    \ = ''\n    local i = 1\n    while i <= file_name_length do\n        local char\
    \ = string.sub(file_name, i, i)\n        if char == '.' then\n            count_dots\
    \ = count_dots + 1\n            last_dot_index = i\n        elseif char == '0'\
    \ or char == '1' or char == '2' or char == '3' or char == '4' or\n           \
    \ char == '5' or char == '6' or char == '7' or char == '8' or char == '9' then\n\
    \            count_digits = count_digits + 1\n        end\n        i = i + 1\n\
    \    end\n    if count_dots == 1 and count_digits <= 3 then\n        extension\
    \ = string.sub(file_name, last_dot_index + 1, file_name_length)\n        sub_string\
    \ = string.sub(file_name, 1, last_dot_index - 1)\n        if sub_string ~= ''\
    \ then\n            if string.find(sub_string, '%a', 1, true) == 1 then\n    \
    \            for key, value in pairs(file_name_extensions) do\n              \
    \      if value == extension then\n                        not_in_table = false\n\
    \                    end\n                end\n                if not_in_table\
    \ then\n                    return 'No'\n                else\n              \
    \      return 'Yes'\n                end\n            else\n                return\
    \ 'No'\n            end\n        else\n            return 'No'\n        end\n\
    \    else\n        return 'No'\n    end\nend", "    if not file_name:match(\"\
    ^[a-zA-Z]\") then\n        return \"No\"\n    end\n    if not file_name:match(\"\
    [.]\") then\n        return \"No\"\n    end\n    if file_name:match(\"[.]\") and\
    \ file_name:match(\"[.]\"):len() ~= 1 then\n        return \"No\"\n    end\n \
    \   if file_name:match(\"%d\"):len() > 3 then\n        return \"No\"\n    end\n\
    \    if file_name:match(\"%a+%.(txt|exe|dll)$\") then\n        return \"Yes\"\n\
    \    end\n    return \"No\"\nend", "\tif type(file_name) ~= 'string' then\n\t\t\
    return 'No'\n\tend\n\tlocal fname, fext = file_name:match(\"([^.]+)%.([^.]+)\"\
    )\n\tif fname == nil or fext == nil then\n\t\treturn 'No'\n\tend\n\tlocal c =\
    \ 0\n\tfor i in fname:gmatch(\"%d\") do\n\t\tc = c + 1\n\tend\n\tif c > 3 then\n\
    \t\treturn 'No'\n\tend\n\tif not fname:match(\"[a-zA-Z]\") then\n\t\treturn 'No'\n\
    \tend\n\tif fext ~= 'txt' and fext ~= 'exe' and fext ~= 'dll' then\n\t\treturn\
    \ 'No'\n\tend\n\treturn 'Yes'\nend", "\treturn No\nend", "    -- your code\nend\n\
    print(file_name_check('my_file.txt'))", "    -- your implementation here\n   \
    \ if string.match(file_name, \"%d%d%d\") ~= nil then\n        return \"No\"\n\
    \    end\n    if file_name:match(\"%.\") == nil then\n        return \"No\"\n\
    \    end\n    if file_name:match(\"%d\") == \"\" then\n        return \"No\"\n\
    \    end\n    if file_name:match(\"%.\") == \"\" then\n        return \"No\"\n\
    \    end\n    local ext = file_name:match(\"%.[^%.]*$\")\n    if ext ~= \".txt\"\
    \ and ext ~= \".exe\" and ext ~= \".dll\" then\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend", "  -- TODO: write your code here\n  return 'No'\nend",
  "\tlocal cnt = 0\n\tlocal dot\n\tfor i = 1, #file_name do\n\t\tlocal c = file_name:sub(i,\
    \ i)\n\t\tif c >= '0' and c <= '9' then\n\t\t\tcnt = cnt + 1\n\t\t\tif cnt > 3\
    \ then\n\t\t\t\treturn \"No\"\n\t\t\tend\n\t\telseif c == '.' then\n\t\t\tif dot\
    \ then\n\t\t\t\treturn \"No\"\n\t\t\tend\n\t\t\tdot = i\n\t\telseif c >= 'a' and\
    \ c <= 'z' or c >= 'A' and c <= 'Z' then\n\t\t\tif not dot then\n\t\t\t\treturn\
    \ \"No\"\n\t\t\tend\n\t\telse\n\t\t\treturn \"No\"\n\t\tend\n\tend\n\tif not dot\
    \ then\n\t\treturn \"No\"\n\tend\n\tlocal suffix = file_name:sub(dot + 1)\n\t\
    if suffix == \"txt\" or suffix == \"exe\" or suffix == \"dll\" then\n\t\treturn\
    \ \"Yes\"\n\tend\n\treturn \"No\"\nend", "\t-- your code here\n\tlocal count_digit\
    \ = 0\n\tlocal dot_index\n\tfor i = 1, #file_name do\n\t\tif file_name:sub(i,\
    \ i) == '.' then\n\t\t\tdot_index = i\n\t\telseif file_name:sub(i, i):find('%d')\
    \ then\n\t\t\tcount_digit = count_digit + 1\n\t\tend\n\tend\n\t\n\tif count_digit\
    \ > 3 then\n\t\treturn 'No'\n\tend\n\t\n\tif not dot_index then\n\t\treturn 'No'\n\
    \tend\n\t\n\tlocal prefix = file_name:sub(1, dot_index - 1)\n\tif #prefix == 0\
    \ or not prefix:sub(1, 1):find('[%l]') then\n\t\treturn 'No'\n\tend\n\t\n\tlocal\
    \ postfix = file_name:sub(dot_index + 1)\n\tif postfix ~= 'txt' and postfix ~=\
    \ 'exe' and postfix ~= 'dll' then\n\t\treturn 'No'\n\tend\n\t\n\treturn 'Yes'\n\
    end\nassert(file_name_check('123.asd') == 'No')\nassert(file_name_check('a.txt')\
    \ == 'Yes')\nassert(file_name_check('asd.asd.asd') == 'No')\nassert(file_name_check('asd.txt')\
    \ == 'Yes')\nassert(file_name_check('12345.txt') == 'No')\nassert(file_name_check('asd.txtasd')\
    \ == 'No')\nassert(file_name_check('asd.txt.asd') == 'No')\nassert(file_name_check('a.txt.asd')\
    \ == 'No')\nassert(file_name_check('123asd.asd') == 'No')\nassert(file_name_check('123.asd.123')\
    \ == 'No')\nassert(file_name_check('asd.123') == 'No')\nassert(file_name_check('123.123')\
    \ == 'No')\nassert(file_name_check('asd.dll') == 'Yes')\n", "    if string.match(file_name,\
    \ \"%d%d%d\") then return 'No' end\n    if not string.match(file_name, \"^[%a][%w]*%.[txt|exe|dll]$\"\
    ) then return 'No' end\n    return 'Yes'\nend", "  -- body\nend", "    if file_name:match('%d%d%d')\
    \ then\n        return 'No'\n    end\n    if file_name:match('%.%w+$') then\n\
    \        return 'No'\n    end\n    if not file_name:match('^%a+%.%w+$') then\n\
    \        return 'No'\n    end\n    if not file_name:match('^%a+%.(txt|exe|dll)$')\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend", "\t-- TODO: replace\
    \ the underscore ('_') with your implementation.\n\treturn 'No'\nend", "    return\
    \ nil\nend", "  -- implement this\nend", "\tlocal dot_index = file_name:find('.')\n\
    \tif not dot_index then\n\t\treturn 'No'\n\tend\n\t\n\tlocal pre_dot_string =\
    \ file_name:sub(1, dot_index - 1)\n\tlocal after_dot_string = file_name:sub(dot_index\
    \ + 1)\n\t\n\tif #pre_dot_string == 0 then\n\t\treturn 'No'\n\tend\n\t\n\tlocal\
    \ first_char = pre_dot_string:sub(1, 1)\n\tif not first_char:match('%a') then\n\
    \t\treturn 'No'\n\tend\n\t\n\tlocal digit_count = #pre_dot_string:gsub('%D', '')\n\
    \tif digit_count > 3 then\n\t\treturn 'No'\n\tend\n\t\n\tlocal valid_extensions\
    \ = {'txt', 'exe', 'dll'}\n\tfor _, ext in ipairs(valid_extensions) do\n\t\tif\
    \ ext == after_dot_string then\n\t\t\treturn 'Yes'\n\t\tend\n\tend\n\t\n\treturn\
    \ 'No'\nend", "\tlocal valid_extension = {txt = true, exe = true, dll = true}\n\
    \tlocal name, extension = file_name:match('^([%a%d]+)\\.(%a+)$')\n\tif not name\
    \ or not extension then\n\t\treturn No\n\tend\n\tlocal digit_count = name:gsub('%D',\
    \ ''):len()\n\tif digit_count > 3 then\n\t\treturn No\n\tend\n\tif not valid_extension[extension]\
    \ then\n\t\treturn No\n\tend\n\treturn Yes\nend\nassert(file_name_check('a.txt')\
    \ == Yes)\nassert(file_name_check('a.dll') == Yes)\nassert(file_name_check('a.exe')\
    \ == Yes)\nassert(file_name_check('abc.abc') == No)\nassert(file_name_check('abc')\
    \ == No)\nassert(file_name_check('abc.dll.dll') == No)\nassert(file_name_check('abc.dll.txt')\
    \ == No)\nassert(file_name_check('abc.d') == No)\nassert(file_name_check('123.txt')\
    \ == Yes)\nassert(file_name_check('b123.txt') == Yes)\nassert(file_name_check('b1.txt')\
    \ == Yes)\nassert(file_name_check('b12345.txt') == No)\nassert(file_name_check('b123e.txt')\
    \ == No)\nassert(file_name_check('b123e.txt') == No)\nassert(file_name_check('b123ee.txt')\
    \ == No)", "    -- Write your code here ...\n    local index = string.find(file_name,\"\
    %.\")\n    local name = string.sub(file_name,1,index-1)\n    local tail = string.sub(file_name,index+1)\n\
    \    if string.find(name,\"%d\") then return \"No\" end\n    if string.find(name,\"\
    ^%d\") then return \"No\" end\n    if string.len(tail) == 3 then\n        if tail\
    \ == \"txt\" or tail == \"exe\" or tail == \"dll\" then\n            return \"\
    Yes\"\n        end\n    end\n    return \"No\"\nend\nprint(file_name_check(\"\
    helloworld.exe\"))\nprint(file_name_check(\"helloworld.EXE\"))\nprint(file_name_check(\"\
    helloworld.txt\"))\nprint(file_name_check(\"hello.world.txt\"))\nprint(file_name_check(\"\
    helloworld.txt.exe\"))\nprint(file_name_check(\"helloworld.txt.dll\"))\nprint(file_name_check(\"\
    helloworld.dll.exe\"))\nprint(file_name_check(\"hello.txt\"))\nprint(file_name_check(\"\
    hello.exe\"))\nprint(file_name_check(\"hello.dll\"))\nprint(file_name_check(\"\
    1helloworld.txt\"))\nprint(file_name_check(\"helloworldtxt\"))\nprint(file_name_check(\"\
    hel012lo.txt\"))\nprint(file_name_check(\"helloworld.0121\"))\nprint(file_name_check(\"\
    helloworld.0121.txt\"))\nprint(file_name_check(\"he1lloworld.0121.txt\"))\nprint(file_name_check(\"\
    he11lloworld.0121.txt\"))\nprint(file_name_check(\"he111lloworld.0121.txt\"))\n\
    print(file_name_check(\"0121.txt\"))\nprint(file_name_check(\"0121.txt.exe\"))\n\
    print(file_name_check(\"0121.txt.txt\"))\nprint(file_name_check(\"0121.txt.dll\"\
    ))\nprint(file_name_check(\"0121", "  -- TODO\nend", "  return nil\nend", "  \
    \  local valid_suffixes = {'txt', 'exe', 'dll'}\n    local dot_index = file_name:find('.')\n\
    \    if not dot_index then\n        return 'No'\n    end\n    local base = file_name:sub(1,\
    \ dot_index - 1)\n    local suffix = file_name:sub(dot_index + 1)\n    local num_digits\
    \ = #base:gsub('[^0-9]', '')\n    local is_valid_base = base:match('[a-zA-Z]')\
    \ and #base > 0\n    local is_valid_suffix = valid_suffixes[suffix]\n    return\
    \ (num_digits <= 3 and is_valid_base and is_valid_suffix) and 'Yes' or 'No'\n\
    end", "\tlocal check_latin = file_name:match('^[A-Za-z]') \n\tlocal check_number\
    \ = file_name:match('[%d]')\n\tlocal check_ext = file_name:match('%.[^.]*$')",
  "    local check_number = function(file_name)\n        for _, i in ipairs(file_name)\
    \ do\n            if i >= '0' and i <= '9' then\n                return false\n\
    \            end\n        end\n        return true\n    end\n    local strs =\
    \ split(file_name, '.')\n    if #strs ~= 2 then\n        return No\n    end\n\
    \    if #strs[1] == 0 or #strs[2] == 0 then\n        return No\n    end\n    if\
    \ check_number(strs[1]) == false then\n        return No\n    end\n    if strs[2]\
    \ ~= 'txt' and strs[2] ~= 'exe' and strs[2] ~= 'dll' then\n        return No\n\
    \    end\n    return Yes\nend", "    -- First, check if number of digits is less\
    \ than 4. Use the function count_digits.\n    -- Then, check if the file's name\
    \ contains exactly one dot '.'.\n    -- Then, check if the substring before the\
    \ dot is empty and starts with a letter\n    -- from the latin alphapet.\n   \
    \ -- And then, check if the substring after the dot is one of ['txt', 'exe', 'dll'].\n\
    end", "    -- Your code goes here\nend", "  local digit_count = 0\n  local dot_position\
    \ = 0\n  local file_type = ''\n  for index,char in ipairs(file_name) do\n    if\
    \ char:match('%d') then\n      digit_count = digit_count + 1\n    elseif char\
    \ == '.' then\n      dot_position = index\n    end\n  end\n  if digit_count >\
    \ 3 then\n    return 'No'\n  end\n  if dot_position == 0 then\n    return 'No'\n\
    \  end\n  if dot_position == 1 then\n    return 'No'\n  end\n  if not file_name:sub(1,\
    \ dot_position - 1):match('[a-zA-Z]') then\n    return 'No'\n  end\n  if not file_name:sub(dot_position\
    \ + 1):match('(txt)|(exe)|(dll)') then\n    return 'No'\n  end\n  return 'Yes'\n\
    end\nassert(file_name_check('image.txt') == 'Yes')\nassert(file_name_check('123456.jpg')\
    \ == 'No')\nassert(file_name_check('1234.exe') == 'Yes')\nassert(file_name_check('1234.txt')\
    \ == 'Yes')\nassert(file_name_check('1234.dll') == 'Yes')\nassert(file_name_check('1234.exe.png')\
    \ == 'No')\nassert(file_name_check('image.exe.png') == 'No')\nassert(file_name_check('image.dll.png')\
    \ == 'No')\nassert(file_name_check('image.txt.png') == 'No')\nassert(file_name_check('image..txt')\
    \ == 'No')\nassert(file_name_check('image.txt.') == 'No')\nassert(file_name_check('image..')\
    \ == 'No')\nassert(file_name_check('12.txt') == 'Yes')\nassert(file_name_check('1.txt')\
    \ == 'Yes')\nassert(file_name_check('1.exe') == 'Yes')\nassert(file_name_check('1.dll')\
    \ == 'Yes')\nassert(file_", "end\nassert(file_name_check('hello.txt') == 'Yes')\n\
    assert(file_name_check('hello.exe') == 'Yes')\nassert(file_name_check('helloworld.txt')\
    \ == 'No')\nassert(file_name_check('helloworld12.txt') == 'No')\nassert(file_name_check('hello_world.txt')\
    \ == 'No')\nassert(file_name_check('hello.txt1') == 'No')\nassert(file_name_check('h.txt')\
    \ == 'No')\nassert(file_name_check('hello.exe1') == 'No')\nassert(file_name_check('hello.exee')\
    \ == 'No')\nassert(file_name_check('hello.doc') == 'No')\nassert(file_name_check('1hello.txt')\
    \ == 'No')\nprint('OK!')", "\t\n\tlocal c = string.gmatch(file_name, \"%d\")\n\
    \tlocal cnt = 0\n\tfor _ in c do\n\t\tcnt = cnt + 1\n\tend\n\t\n\tlocal c = string.gmatch(file_name,\
    \ \"%.\")\n\tlocal cnt2 = 0\n\tfor _ in c do\n\t\tcnt2 = cnt2 + 1\n\tend\n\t\n\
    \tlocal c = string.gmatch(file_name, \"%w+\")\n\tlocal str = c()\n\t\n\tlocal\
    \ suffix = string.sub(file_name, #str + 2)\n\tlocal a = {['txt'] = 1, ['exe']\
    \ = 1, ['dll'] = 1}\n\tif cnt <= 3 and cnt2 == 1 and string.match(str, \"%l\"\
    ) and a[suffix] then\n\t\treturn 'Yes'\n\telse\n\t\treturn 'No'\n\tend\nend",
  "    -- student's code\nend", "    -- write your code here\n    return \"Yes\"\n\
    end", "\t-- your code goes here\nend", "    if not file_name:match('%d') or not\
    \ file_name:match('[a-zA-Z]') then return 'No' end\n    local first, last = file_name:match('([a-zA-Z]-)%.(.+)')\n\
    \    if first:len() < 1 or last:len() < 3 then return 'No' end\n    if last ~=\
    \ 'txt' and last ~= 'exe' and last ~= 'dll' then return 'No' end\n    return 'Yes'\n\
    end", "\t-- write your code here\n\tlocal count = 0\n\tfor i = 1, #file_name do\n\
    \t\tif string.match(file_name, \"%a\") then\n\t\t\tif string.match(file_name,\
    \ \"%d\") then\n\t\t\t\tcount = count + 1\n\t\t\t\tif count > 3 then\n\t\t\t\t\
    \treturn \"No\"\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tif string.match(file_name,\
    \ \"%.\") then\n\t\tif (string.match(file_name, \"txt\") or string.match(file_name,\
    \ \"exe\") or string.match(file_name, \"dll\")) then\n\t\t\treturn \"Yes\"\n\t\
    \tend\n\tend\n\treturn \"No\"\nend", "    return No\nend", end, "  return ((file_name:match('%d%d%d')\
    \ == nil) and \n          (file_name:match('%.') ~= nil) and \n          (file_name:match('%..*')\
    \ == file_name:match('%..+')) and \n          (file_name:match('^%.[%a]') == nil)\
    \ and \n          (file_name:match('%.[%w]+$') ~= nil) and \n          (file_name:match('%.[%w]+$')\
    \ == '.' .. file_name:match('%.[%w]+$'):sub(2))) and\n          (file_name:match('%.[%w]+$')\
    \ == '.txt' or \n           file_name:match('%.[%w]+$') == '.exe' or \n      \
    \     file_name:match('%.[%w]+$') == '.dll')\nend", "\t\nend", "    local digits\
    \ = 0\n    local dot = 0\n    local extension = ''\n    local is_valid = true\n\
    \    for i = 1, #file_name do\n        local c = file_name:sub(i, i)\n       \
    \ if c >= '0' and c <= '9' then\n            digits = digits + 1\n        elseif\
    \ c == '.' then\n            dot = dot + 1\n        elseif dot == 0 then\n   \
    \         if not (c >= 'a' and c <= 'z' or c >= 'A' and c <= 'Z') then\n     \
    \           is_valid = false\n                break\n            end\n       \
    \ elseif dot == 1 then\n            extension = extension .. c\n        end\n\
    \    end\n    is_valid = is_valid and digits <= 3 and dot == 1 and \n        (extension\
    \ == 'txt' or extension == 'exe' or extension == 'dll')\n    return is_valid and\
    \ 'Yes' or 'No'\nend", "    -- check if the file name is a string and if it is\
    \ empty\n    if type(file_name) ~= 'string' or file_name == '' then\n        return\
    \ 'No'\n    end", "    -- #file_name >= 3\n    -- #file_name <= 256\n    -- #file_name\
    \ - #(file_name:gsub('[^0-9]', '')) <= 3\n    -- file_name:gsub('[^%.]', '') ==\
    \ '.'\n    -- file_name:sub(1, 1):match('[a-zA-Z]')\n    -- file_name:sub(1, file_name:find('%.')\
    \ - 1):match('^[a-zA-Z]')\n    -- file_name:sub(file_name:find('%.') + 1):match('^(txt|exe|dll)$')\n\
    \    if #file_name < 3 or #file_name > 256 or #file_name - #(file_name:gsub('[^0-9]',\
    \ '')) > 3\n        or file_name:gsub('[^%.]', '') ~= '.'\n        or not file_name:sub(1,\
    \ 1):match('[a-zA-Z]')\n        or not file_name:sub(1, file_name:find('%.') -\
    \ 1):match('^[a-zA-Z]')\n        or not file_name:sub(file_name:find('%.') + 1):match('^(txt|exe|dll)$')\
    \ then\n        return 'No'\n    end\n    return 'Yes'\nend", "    local isvalid\
    \ = true\n    local dots, digits = 0, 0\n    local counter = 0\n    local prefix,\
    \ suffix\n    local num_suffix = {['txt'] = true, ['exe'] = true, ['dll'] = true}\n\
    \    for char in file_name:gmatch(\".\") do\n        if char == '.' then\n   \
    \         dots = dots + 1\n            counter = counter + 1\n            prefix\
    \ = file_name:sub(1, counter - 1)\n            suffix = file_name:sub(counter\
    \ + 1)\n        elseif char:match(\"%d\") then\n            digits = digits +\
    \ 1\n        end\n    end\n    if isvalid and (dots ~= 1 or digits > 3 or prefix:match(\"\
    ^%l\") == nil or \n        not num_suffix[suffix]) then\n        isvalid = false\n\
    \    end\n    return isvalid and 'Yes' or 'No'\nend", "    return (not ((file_name:match(\"\
    %d\")) and (file_name:match(\"%d%d\")) and (file_name:match(\"%d%d%d\")))) and\
    \ \n    (file_name:match(\"%.\")) and (file_name:match(\"^[%a]\") and file_name:match(\"\
    [%a]*\")) and \n    (file_name:match(\"%.[a-zA-Z]+\") == \".txt\" or file_name:match(\"\
    %.[a-zA-Z]+\") == \".exe\" or file_name:match(\"%.[a-zA-Z]+\") == \".dll\")\n\
    end\nassert(file_name_check(\"u.dll\") == true)\nassert(file_name_check(\"u.d\"\
    ) == false)\nassert(file_name_check(\"u.d1l1\") == false)\nassert(file_name_check(\"\
    u.d.ll\") == false)\nassert(file_name_check(\"99.dll\") == false)\nassert(file_name_check(\"\
    99.ddl\") == false)\nassert(file_name_check(\"99.dddl\") == false)\nassert(file_name_check(\"\
    9.dll\") == true)\nassert(file_name_check(\"9.ddl\") == false)\nassert(file_name_check(\"\
    9.dddl\") == false)\nassert(file_name_check(\"99.dll\") == false)\nassert(file_name_check(\"\
    99.ddl\") == false)\nassert(file_name_check(\"99.dddl\") == false)\nassert(file_name_check(\"\
    999.dll\") == false)\nassert(file_name_check(\"999.ddl\") == false)\nassert(file_name_check(\"\
    999.dddl\") == false)\nassert(file_name_check(\"u.dll\") == true)\nassert(file_name_check(\"\
    u.d\") == false)\nassert(file_name_check(\"u.d1l1\") == false)\nassert(file_name_check(\"\
    u.d.ll\") == false)\nassert(file_name_check(\"u.d\") == false)\nassert(file",
  "    local count = 0\n    local dot = false\n    local suffix = true\n    local\
    \ prefix = false\n    local v = ''\n    for i=1,#file_name do\n        if string.match(file_name:sub(i,i),'%d')\
    \ ~= nil then\n            count = count + 1\n        elseif file_name:sub(i,i)\
    \ == '.' then\n            dot = true\n        elseif string.match(file_name:sub(i,i),'%a')\
    \ ~= nil then\n            v = v .. file_name:sub(i,i)\n        end\n    end\n\
    \    if count > 3 then\n        return 'No'\n    elseif dot == false then\n  \
    \      return 'No'\n    elseif string.match(v,'%u') == nil then\n        return\
    \ 'No'\n    elseif string.match(file_name:sub(#file_name-2,#file_name),'txt')\
    \ == nil and string.match(file_name:sub(#file_name-2,#file_name),'exe') == nil\
    \ and string.match(file_name:sub(#file_name-2,#file_name),'dll') == nil then\n\
    \        return 'No'\n    else\n        return 'Yes'\n    end\nend", "\t-- TODO:\
    \ Implemetnt this function by using Lua's 'string' library.\n\tlocal count = 0\n\
    \tlocal length = string.len(file_name)\n\tfor i = 1, length do\n\t\tif string.sub(file_name,\
    \ i, i) == \".\" then\n\t\t\tif (i == 1) or (i == length) then\n\t\t\t\treturn\
    \ \"No\"\n\t\t\tend\n\t\t\tif count ~= 1 then\n\t\t\t\treturn \"No\"\n\t\t\tend\n\
    \t\telseif string.find(file_name, \"%d\") then\n\t\t\tcount = count + 1\n\t\t\t\
    if count > 3 then\n\t\t\t\treturn \"No\"\n\t\t\tend\n\t\telseif (string.sub(file_name,\
    \ i, i) ~= '.') and\n\t\t       (string.sub(file_name, i, i) ~= 'a') and\n\t\t\
    \       (string.sub(file_name, i, i) ~= 'b') and\n\t\t       (string.sub(file_name,\
    \ i, i) ~= 'c') and\n\t\t       (string.sub(file_name, i, i) ~= 'd') and\n\t\t\
    \       (string.sub(file_name, i, i) ~= 'e') and\n\t\t       (string.sub(file_name,\
    \ i, i) ~= 'f') and\n\t\t       (string.sub(file_name, i, i) ~= 'g') and\n\t\t\
    \       (string.sub(file_name, i, i) ~= 'h') and\n\t\t       (string.sub(file_name,\
    \ i, i) ~= 'i') and\n\t\t       (string.sub(file_name, i, i) ~= 'j') and\n\t\t\
    \       (string.sub(file_name, i, i) ~= 'k') and\n\t\t       (string.sub(file_name,\
    \ i, i) ~= 'l') and\n\t\t       (string.sub(file_name, i, i) ~= 'm') and\n\t\t\
    \       (string.sub(file_name, i, i", "    local last_dot_pos = file_name:match(\"\
    .*()%.\")\n    if not last_dot_pos then\n        return 'No'\n    end\n    local\
    \ first_part = file_name:sub(1, last_dot_pos - 1)\n    local second_part = file_name:sub(last_dot_pos\
    \ + 1)\n    local first_part_valid = first_part:match(\"^[a-zA-Z][a-zA-Z0-9]*$\"\
    )\n    local second_part_valid = second_part:match(\"^(txt|exe|dll)$\")\n    local\
    \ digit_count = first_part:gsub(\"%d\", \"\")\n    if digit_count > 3 then\n \
    \       return 'No'\n    end\n    if first_part_valid and second_part_valid then\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend", "    return\
    \ 'Yes'\nend", end, "\tlocal _, n = file_name:gsub(\"%d\", \"\")\n\tif n > 3 then\n\
    \t\treturn \"No\"\n\tend\n\tlocal a, b = file_name:find(\"%.\")\n\tif not a or\
    \ not b then\n\t\treturn \"No\"\n\tend\n\tif a == 1 then\n\t\treturn \"No\"\n\t\
    end\n\tlocal _, n = file_name:sub(1, a-1):gsub(\"%d\", \"\")\n\tif n > 0 then\n\
    \t\treturn \"No\"\n\tend\n\tlocal s = file_name:sub(b+1)\n\tif not (s == \"txt\"\
    \ or s == \"exe\" or s == \"dll\") then\n\t\treturn \"No\"\n\tend\n\treturn \"\
    Yes\"\nend", "\tlocal first_part, second_part = file_name:match(\"(.+)%.(%w+)\"\
    )\n\tlocal digits = file_name:match(\"%d+\")\n\tif first_part == nil or second_part\
    \ == nil or #digits > 3 or #digits == 0 then\n\t\treturn \"No\"\n\tend\n\tlocal\
    \ valid_first_part = first_part:match(\"^[a-zA-Z]%w*\")\n\tlocal valid_second_part\
    \ = second_part == \"txt\" or second_part == \"exe\" or second_part == \"dll\"\
    \n\tif valid_first_part and valid_second_part then\n\t\treturn \"Yes\"\n\telse\n\
    \t\treturn \"No\"\n\tend\nend", "    local name, ext = file_name:match(\"^([%a][%w_]*)%.(txt|exe|dll)$\"\
    )\n    return #name > 0 and #name <= 8 and #ext > 0 and #ext <= 3 and #file_name:match(\"\
    %d\") <= 3\n        and #file_name:match(\"%.\") == 1 and \"Yes\" or \"No\"\n\
    end", "    local name, ext = file_name:match(\"(.+)%.(.+)\")\n    if not name\
    \ or #name == 0 or #name:gsub(\"%d\", \"\") > 3 or not ext then\n        return\
    \ \"No\"\n    end\n    local num_digits = #name:gsub(\"%D\", \"\")\n    if num_digits\
    \ == 0 or num_digits > 3 then\n        return \"No\"\n    end\n    if ext ~= \"\
    txt\" and ext ~= \"exe\" and ext ~= \"dll\" then\n        return \"No\"\n    end\n\
    \    return \"Yes\"\nend", "    -- write your solution here\nend", "  local first_part,\
    \ ext, digits_count = file_name:match(\"([a-zA-Z]%w+).([^.]+)[.]?(%d*)\")\n  if\
    \ ext and first_part and #digits_count <= 3 and (ext == \"txt\" or ext == \"exe\"\
    \ or ext == \"dll\") then\n    return \"Yes\"\n  else\n    return \"No\"\n  end\n\
    end", "  \nend", "\tlocal letter = true\n\tlocal digit = 0\n\tlocal ext = false\n\
    \tlocal point = false\n\tlocal text = \"\"\n\tlocal ext_name = \"\"\n\tfor i =\
    \ 1, #file_name do\n\t\tif string.find(file_name, \"[A-Za-z]\") == i then\n\t\t\
    \tletter = true\n\t\t\ttext = text .. file_name:sub(i, i)\n\t\t\tif digit > 3\
    \ then\n\t\t\t\tdigit = 0\n\t\t\t\tletter = false\n\t\t\tend\n\t\telseif string.find(file_name,\
    \ \"[0-9]\") == i then\n\t\t\tdigit = digit + 1\n\t\t\ttext = text .. file_name:sub(i,\
    \ i)\n\t\telseif string.find(file_name, \".\") == i then\n\t\t\tpoint = true\n\
    \t\t\tif not text:match('^[A-Za-z]+$') then\n\t\t\t\treturn \"No\"\n\t\t\tend\n\
    \t\telseif point then\n\t\t\text_name = ext_name .. file_name:sub(i, i)\n\t\t\
    end\n\tend\n\tif letter and point and (ext_name == \"txt\" or ext_name == \"exe\"\
    \ or ext_name == \"dll\") then\n\t\treturn \"Yes\"\n\telse\n\t\treturn \"No\"\n\
    \tend\nend", "    local first_digit = file_name:find('%d')\n    local last_digit\
    \ = file_name:match('(%d%d%d)')\n    local last_digit_index = file_name:find(last_digit)",
  "    local digits_count = 0\n    local dot_count = 0\n    local flag = true\n  \
    \  local extension = ''\n    local isValid = 'Yes'\n    for i = 1, string.len(file_name)\
    \ do\n        local curr_char = string.sub(file_name, i, i)\n        if (string.byte(curr_char)\
    \ >= 48 and string.byte(curr_char) <= 57) then\n            digits_count = digits_count\
    \ + 1\n        elseif curr_char == '.' then\n            dot_count = dot_count\
    \ + 1\n            flag = false\n        elseif flag and (string.byte(curr_char)\
    \ < 65 or (string.byte(curr_char) > 90 and string.byte(curr_char) < 97) or string.byte(curr_char)\
    \ > 122) then\n            return 'No'\n        elseif (not flag) and (string.byte(curr_char)\
    \ < 65 or (string.byte(curr_char) > 90 and string.byte(curr_char) < 97) or string.byte(curr_char)\
    \ > 122) then\n            return 'No'\n        end\n        if not flag then\n\
    \            extension = extension .. curr_char\n        end\n    end\n    if\
    \ (digits_count > 3 or dot_count ~= 1 or (extension ~= 'txt' and extension ~=\
    \ 'exe' and extension ~= 'dll')) then\n        isValid = 'No'\n    end\n    return\
    \ isValid\nend\nassert(file_name_check('somevalidname.txt') == 'Yes')\nassert(file_name_check('somename.exe')\
    \ == 'Yes')\nassert(file_name_check('somename.dll') == 'Yes')\nassert(file_name_check('12.dll')\
    \ == 'No')\nassert(file_name_check('someinvalid_name.dll') == 'No')\nassert(file_name_check('a.txt')\
    \ == 'Yes')\nassert(file_name_check('A.txt') == 'Yes')\nassert(file_name_check('a.exe')\
    \ == 'Yes')\nassert(file_name_check('", end, "  local count_digits = 0\n  local\
    \ count_dots = 0\n  local dot_index\n  local file_extension = \"\"\n  for i =\
    \ 1, #file_name do\n    local c = file_name:sub(i, i)\n    if c:match(\"%d\")\
    \ then\n      count_digits = count_digits + 1\n    elseif c == \".\" then\n  \
    \    count_dots = count_dots + 1\n      dot_index = i\n    end\n  end\n  if count_digits\
    \ > 3 or count_dots ~= 1 then\n    return No\n  end\n  local file_name_without_extension\
    \ = file_name:sub(1, dot_index - 1)\n  if #file_name_without_extension == 0 or\
    \ not file_name_without_extension:match(\"^[a-zA-Z]\") then\n    return No\n \
    \ end\n  file_extension = file_name:sub(dot_index + 1)\n  if file_extension ==\
    \ \"txt\" or file_extension == \"exe\" or file_extension == \"dll\" then\n   \
    \ return Yes\n  end\n  return No\nend", "  return true\nend", "    return No\n\
    end", "    if type(file_name) ~= 'string' then\n        return \"No\"\n    end\n\
    \    local dot_index = string.find(file_name, '%.')\n    if not dot_index then\n\
    \        return \"No\"\n    end\n    local sub_name_prefix = string.sub(file_name,\
    \ 1, dot_index - 1)\n    local sub_name_suffix = string.sub(file_name, dot_index\
    \ + 1)\n    if not (\n        string.match(sub_name_prefix, '^[a-zA-Z][a-zA-Z0-9]*$')\
    \ and\n        string.match(sub_name_suffix, '^[a-zA-Z][a-zA-Z0-9]*$') and\n \
    \       (sub_name_suffix == 'txt' or sub_name_suffix == 'exe' or sub_name_suffix\
    \ == 'dll')\n    ) then\n        return \"No\"\n    end\n    local digit_count\
    \ = 0\n    for i = 1, string.len(sub_name_prefix) do\n        if string.match(string.sub(sub_name_prefix,\
    \ i, i), '%d') then\n            digit_count = digit_count + 1\n        end\n\
    \    end\n    for i = 1, string.len(sub_name_suffix) do\n        if string.match(string.sub(sub_name_suffix,\
    \ i, i), '%d') then\n            digit_count = digit_count + 1\n        end\n\
    \    end\n    if digit_count > 3 then\n        return \"No\"\n    end\n    return\
    \ \"Yes\"\nend", end, "    -- Write your code here\n    return nil\nend\nassert(file_name_check(\"\
    12345678.txt\") == \"No\")\nassert(file_name_check(\"abcdefghijkl.txt\") == \"\
    No\")\nassert(file_name_check(\"1a2b3c4d5e6f.txt\") == \"No\")\nassert(file_name_check(\"\
    1a2b3c4d5e6f.dll\") == \"No\")\nassert(file_name_check(\"1a2b3c4d5e6f.exe\") ==\
    \ \"No\")\nassert(file_name_check(\"a1b2c3d4e5f6.txt\") == \"Yes\")\nassert(file_name_check(\"\
    abcd.txt\") == \"Yes\")\nassert(file_name_check(\"a.exe\") == \"Yes\")\nassert(file_name_check(\"\
    ABCD.txt\") == \"Yes\")\nassert(file_name_check(\"a.txt\") == \"Yes\")\nassert(file_name_check(\"\
    a.dll\") == \"Yes\")\nassert(file_name_check(\"a.exe\") == \"Yes\")\nassert(file_name_check(\"\
    123.txt\") == \"Yes\")\nassert(file_name_check(\"a.doc\") == \"No\")\nassert(file_name_check(\"\
    a1b2c3d4e5f6.do\") == \"No\")\nassert(file_name_check(\"a1b2c3d4e5f6.txt.exe\"\
    ) == \"No\")\nassert(file_name_check(\"1a2b3c4d5e6f.txt.exe\") == \"No\")\nassert(file_name_check(\"\
    a1b2c3d4e5f6.txt1\") == \"No\")\nassert(file_name_check(\"a1b2c3d4e5f6.txt2\"\
    ) == \"No\")\nassert(file_name_check(\"a1b2c3d4e5f6.txt3\") == \"No\")\nassert(file_name_check(\"\
    1a2b3c4d5e6f.exe\") == \"No\")\nassert(file_name", "  if(file_name:match(\"%d%d%d\"\
    )==nil) then\n    local t = file_name:find(\"%.\")\n    if(t~=nil) then\n    \
    \  local s = file_name:sub(1,t-1)\n      if(s:match(\"%a+\")==s) then\n      \
    \  local e = file_name:sub(t+1)\n        if(e==\"txt\" or e==\"exe\" or e==\"\
    dll\") then\n          return \"Yes\"\n        end\n      end\n    end\n  end\n\
    \  return \"No\"\nend", "    -- YOUR CODE HERE\nend", '    local is_valid = true',
  end, "    -- your code\nend", "    local number_of_digits = 0\n    local number_of_dots\
    \ = 0\n    local number_of_letters = 0\n    local number_of_letters_after_dot\
    \ = 0\n    local substring_before_dot = \"\"\n    local substring_after_dot =\
    \ \"\"\n    for i = 1, string.len(file_name) do\n        local current_char =\
    \ string.sub(file_name, i, i)\n        if current_char >= '0' and current_char\
    \ <= '9' then\n            number_of_digits = number_of_digits + 1\n        elseif\
    \ current_char == '.' then\n            number_of_dots = number_of_dots + 1\n\
    \        elseif (current_char >= 'a' and current_char <= 'z') or (current_char\
    \ >= 'A' and current_char <= 'Z') then\n            number_of_letters = number_of_letters\
    \ + 1\n            substring_before_dot = substring_before_dot .. current_char\n\
    \        end\n    end\n    for i = string.len(file_name), 1, -1 do\n        local\
    \ current_char = string.sub(file_name, i, i)\n        if current_char == '.' then\n\
    \            break\n        else\n            number_of_letters_after_dot = number_of_letters_after_dot\
    \ + 1\n            substring_after_dot = current_char .. substring_after_dot\n\
    \        end\n    end\n    if number_of_digits > 3 or number_of_dots ~= 1 or number_of_letters\
    \ < 1 or \n    substring_after_dot ~= \"txt\" and substring_after_dot ~= \"exe\"\
    \ and substring_after_dot ~= \"dll\" then\n        return \"No\"\n    else\n \
    \       return \"Yes\"\n    end\nend", "    local first,second = string.match(file_name,\"\
    (.-)%.(.*)\")\n    if first and second then\n        local count = 0\n       \
    \ local first_letter = true\n        for i = 1,string.len(first) do\n        \
    \    local c = string.sub(first,i,i)\n            if c >= '0' and c <= '9' then\n\
    \                count = count + 1\n            elseif first_letter and (c < 'a'\
    \ or c > 'z') and (c < 'A' or c > 'Z') then\n                return \"No\"\n \
    \           else\n                first_letter = false\n            end\n    \
    \    end\n        if count > 3 then\n            return \"No\"\n        end\n\
    \        if second == \"txt\" or second == \"exe\" or second == \"dll\" then\n\
    \            return \"Yes\"\n        end\n    end\n    return \"No\"\nend", " \
    \ local t = {}\n  local n = 0\n  for i in string.gmatch(file_name, \"%d\") do\n\
    \    t[#t + 1] = i\n    n = n + 1\n  end\n  if n > 3 then\n    return \"No\"\n\
    \  end\n  local t1, t2 = string.match(file_name, \"^([a-zA-Z]+)%.([a-zA-Z]+)$\"\
    )\n  if t1 == nil or t2 == nil then\n    return \"No\"\n  end\n  local t = {}\n\
    \  t[\"txt\"] = 1\n  t[\"exe\"] = 1\n  t[\"dll\"] = 1\n  if t[t2] == nil then\n\
    \    return \"No\"\n  end\n  return \"Yes\"\nend", "\tif not file_name:match(\"\
    ^%a%a*%.[tT][xX][tT]$\") and not file_name:match(\"^%a%a*%.[eE][xX][eE]$\") and\
    \ not file_name:match(\"^%a%a*%.[dD][lL][lL]$\") then\n\t\treturn \"No\"\n\tend\n\
    \tif file_name:match(\"%d\") then\n\t\tlocal found = string.match(file_name, \"\
    %d\")\n\t\tlocal num_of_digits = string.match(file_name, \"%d+\")\n\t\tif found\
    \ ~= num_of_digits then\n\t\t\treturn \"No\"\n\t\tend\n\tend\n\treturn \"Yes\"\
    \nend", "\tlocal tok_start, tok_end = file_name:find('[.]')\n\tif tok_start ==\
    \ nil then return 'No' end\n\tlocal name = file_name:sub(1, tok_start - 1)\n\t\
    local digits = name:gsub('%D', '')\n\tif digits:len() > 3 then return 'No' end\n\
    \tlocal suffix = file_name:sub(tok_end + 1)\n\tif suffix ~= 'txt' and suffix ~=\
    \ 'exe' and suffix ~= 'dll' then return 'No' end\n\tlocal letter = name:gsub('%W',\
    \ '')\n\tif letter:len() ~= 1 then return 'No' end\n\treturn 'Yes'\nend\nassert(file_name_check('a.txt')\
    \ == 'Yes')\nassert(file_name_check('a.exe') == 'Yes')\nassert(file_name_check('1.exe')\
    \ == 'No')\nassert(file_name_check('a.123') == 'No')\nassert(file_name_check('....')\
    \ == 'No')\nassert(file_name_check('a.b') == 'No')\nassert(file_name_check('a..txt')\
    \ == 'No')\nassert(file_name_check('a.txt.123') == 'No')\nassert(file_name_check('a.dll')\
    \ == 'Yes')\nassert(file_name_check('b.dll') == 'Yes')\nassert(file_name_check('c.dll')\
    \ == 'Yes')\nassert(file_name_check('x.dll') == 'Yes')\nassert(file_name_check('y.dll')\
    \ == 'Yes')\nassert(file_name_check('z.dll') == 'Yes')\nassert(file_name_check('a.txt')\
    \ == 'Yes')\nassert(file_name_check('aa.txt') == 'Yes')\nassert(file_name_check('aaa.txt')\
    \ == 'Yes')\nassert(file_name_check('aaaa.txt') == 'No')\nassert(file_name_check('xxx.txt')\
    \ == 'Yes')\nassert(file_name_check('xxxxxxxxx.txt') == '", "  return \"No\"\n\
    end", "    local ext = \"\"\n    if file_name:find(\"%.\") then\n        ext =\
    \ file_name:match(\"%..*\")\n    end\n    local digits = file_name:match(\"(%d+)\"\
    )\n    return (file_name:find(\"^[a-zA-Z]\") and ext:match(\"^%.[a-zA-Z]+$\")\n\
    \        and (digits == nil or #digits <= 3)) and \"Yes\" or \"No\"\nend", " \
    \ --print(file_name)\n  local s, e = file_name:find(\"%d\")\n  if e then\n   \
    \ --print(e)\n    local n_s, n_e = file_name:find(\"%d\", e + 1)\n    if n_e then\n\
    \      local t_s, t_e = file_name:find(\"%d\", n_e + 1)\n      if t_e then\n \
    \       return \"No\"\n      end\n    end\n  end\n  local dot_i = file_name:find(\"\
    %.\")\n  local format_i = file_name:find(\"%w+$\")\n  local format = file_name:sub(format_i)\n\
    \  if dot_i then\n    local name = file_name:sub(1, dot_i - 1)\n    local f =\
    \ name:find(\"%a\")\n    if not f then\n      return \"No\"\n    end\n    if format\
    \ ~= \"txt\" and format ~= \"exe\" and format ~= \"dll\" then\n      return \"\
    No\"\n    end\n    return \"Yes\"\n  else\n    return \"No\"\n  end\nend", " \
    \ return 'Your result'\nend", "end\nassert(file_name_check(\"D.exe\") == \"Yes\"\
    )\nassert(file_name_check(\"D.asd\") == \"No\")\nassert(file_name_check(\"D.dll\"\
    ) == \"Yes\")\nassert(file_name_check(\"D.txt\") == \"Yes\")\nassert(file_name_check(\"\
    D.123\") == \"No\")\nassert(file_name_check(\"D.11\") == \"No\")\nassert(file_name_check(\"\
    D.1\") == \"No\")\nassert(file_name_check(\"123D.txt\") == \"No\")\nassert(file_name_check(\"\
    123D.txt\") == \"No\")\nassert(file_name_check(\"123.123\") == \"No\")\nassert(file_name_check(\"\
    123.exe\") == \"No\")\nassert(file_name_check(\"123.txt\") == \"No\")\nassert(file_name_check(\"\
    123.dll\") == \"No\")\nassert(file_name_check(\"123.123.123\") == \"No\")\nassert(file_name_check(\"\
    D..\") == \"No\")\nassert(file_name_check(\"..\") == \"No\")\nassert(file_name_check(\"\
    .\") == \"No\")\nassert(file_name_check(\"\") == \"No\")\nassert(file_name_check(\"\
    123456.exe\") == \"No\")", "    -- Your code goes here.\nend", "    -- write your\
    \ code here\n    local sub = file_name:match(\"^[a-zA-Z]+[a-zA-Z0-9]*%.%a+$\"\
    )\n    if sub then\n        sub = sub:match(\"^[a-zA-Z]+[a-zA-Z0-9]*%.\")\n  \
    \      local n = #(sub:match(\"%d+\"))\n        local dot_pos = sub:find(\"%.\"\
    )\n        if n <= 3 and dot_pos ~= 1 and dot_pos ~= sub:len() then\n        \
    \    return \"Yes\"\n        end\n    end\n    return \"No\"\nend", "    --[[\
    \ \n        Write your code here, \n        Return 'Yes' for valid file name,\
    \ \n        and 'No' for invalid file name.\n    ]]\n    return file_name\nend",
  "    local digits = 0\n    local dot = nil\n    local file_name_valid = true\n \
    \   for i = 1, #file_name do\n        local char = file_name:sub(i, i)\n     \
    \   if char:find('%d') then\n            digits = digits + 1\n        elseif char\
    \ == '.' then\n            dot = i\n        end\n    end\n    if digits > 3 then\n\
    \        file_name_valid = false\n    end\n    if dot == nil then\n        file_name_valid\
    \ = false\n    end\n    if dot == 1 then\n        file_name_valid = false\n  \
    \  end\n    if not file_name:sub(1, dot - 1):find('%a') then\n        file_name_valid\
    \ = false\n    end\n    local file_extension = file_name:sub(dot + 1)\n    if\
    \ file_extension ~= 'txt' and file_extension ~= 'exe' and file_extension ~= 'dll'\
    \ then\n        file_name_valid = false\n    end\n    if file_name_valid then\n\
    \        return 'Yes'\n    else\n        return 'No'\n    end\nend", "    if not\
    \ file_name then\n        return \"No\"\n    end\n    local file, extension =\
    \ file_name:match(\"([^%.]+)%.([^%.]+)\")\n    if not file or not extension then\n\
    \        return \"No\"\n    end\n    local n = file:gsub(\"%d\", \"\")\n    if\
    \ file:len() - n:len() > 3 then\n        return \"No\"\n    end\n    if not file:match(\"\
    ^[a-zA-Z]\") then\n        return \"No\"\n    end\n    if not (extension == \"\
    txt\" or extension == \"exe\" or extension == \"dll\") then\n        return \"\
    No\"\n    end\n    return \"Yes\"\nend", "    if file_name then\n    -- TODO:\n\
    \        -- file_name = file_name:match(\"^(%a+)%.(%a+)$\")\n        local name,\
    \ extension = file_name:match(\"^(.+)%.(.+)$\")\n        local digits = file_name:match(\"\
    .*(%d+).*\")\n        if  (not (file_name:match(\"%.\"))) then return \"No\" end\n\
    \        if ((not name) or (not extension)) then return \"No\" end\n        if\
    \ (not name:match(\"^%a+$\")) then return \"No\" end\n        if ((extension ~=\
    \ \"txt\") and (extension ~= \"exe\") and (extension ~= \"dll\")) then return\
    \ \"No\" end\n        if (digits and (digits:len() > 3)) then return \"No\" end\n\
    \        return \"Yes\"\n    end\n    return \"No\"\nend", "  if not type(file_name)\
    \ == 'string' then return 'No' end\n  local file_name_split = file_name:split('%.')\n\
    \  if #file_name_split ~= 2 then return 'No' end\n  if #file_name_split[1] ==\
    \ 0 then return 'No' end\n  if #file_name_split[2] > 3 then return 'No' end\n\
    \  if file_name_split[2] ~= 'txt' and file_name_split[2] ~= 'exe' and file_name_split[2]\
    \ ~= 'dll' then return 'No' end\n  local digits = file_name_split[1]:split('%d')\n\
    \  if #digits < 3 then return 'No' end\n  return 'Yes'\nend", "\t-- body\nend",
  "\tlocal dot_index = file_name:find(\"%.\")\n\tlocal sub1 = file_name:sub(1, dot_index\
    \ - 1)\n\tlocal sub2 = file_name:sub(dot_index + 1)\n\tlocal valid = (file_name:match(\"\
    %d\") or \"\"):len() <= 3\n\t\t\t\tand (dot_index > 1)\n\t\t\t\tand (sub1:match(\"\
    %a\") == sub1)\n\t\t\t\tand (sub2 == \"txt\" or sub2 == \"exe\" or sub2 == \"\
    dll\")\n\treturn valid and \"Yes\" or \"No\"\nend", "    local str = string.match(file_name,\"\
    ^[A-Za-z][%w_]+%.%w+$\")\n    local num = 0\n    for i = 1, #file_name do\n  \
    \      if string.match(file_name[i],\"%d\") then\n            num = num + 1\n\
    \        end\n    end\n    if num > 3 then\n        return 'No'\n    end\n   \
    \ local type = string.match(file_name,\"%.%w+$\")\n    if type == 'txt' or type\
    \ == 'exe' or type == 'dll' then\n        return 'Yes'\n    else\n        return\
    \ 'No'\n    end\nend", "    if not string.match(file_name, '^%a+%.[Tt][Xx][Tt]$')\
    \ and\n       not string.match(file_name, '^%a+%.[Ee][Xx][Ee]$') and\n       not\
    \ string.match(file_name, '^%a+%.[Dd][Ll][Ll]$') then\n        return 'No'\n \
    \   end\n    if string.match(file_name, '%d') == nil then\n        return 'No'\n\
    \    end\n    return 'Yes'\nend", "    -- -- NOTE: the following lines are commented\
    \ out to prevent\n    -- -- compilation errors, as the implementation and examples\n\
    \    -- -- are not provided.\n    -- return No\n    -- return Yes\nend", "   \
    \ -- write your code here\nend", "    local matched = string.match(file_name,\
    \ \"^%a[%w%d]*%.(txt|exe|dll)$\")\n    if matched then\n        return 'Yes'\n\
    \    else\n        return 'No'\n    end\nend", "  -- Your code here\nend", "\t\
    -- write your function body here\n\tif not file_name:match('^[a-zA-Z]%d*%.?%d*%.?%d*%.?(%w+)$')\
    \ then\n\t\treturn 'No'\n\tend\n\treturn {'txt', 'exe', 'dll'}:includes(file_name:match('^[a-zA-Z]%d*%.?%d*%.?%d*%.?(%w+)$'))\
    \ and 'Yes' or 'No'\nend", "    local one_dot = file_name:find('%.')\n    local\
    \ dot_pos = file_name:find('%.%l+$')\n    local digits = file_name:match('%d+')\n\
    \    if digits and #digits > 3 then\n        return 'No'\n    elseif one_dot and\
    \ dot_pos then\n        local before_dot = file_name:sub(1, dot_pos - 1)\n   \
    \     local after_dot = file_name:sub(dot_pos + 1)\n        if before_dot:match('^%a')\
    \ and\n            (after_dot == 'txt' or after_dot == 'exe' or after_dot == 'dll')\
    \ then\n            return 'Yes'\n        end\n    end\n    return 'No'\nend",
  "    -- Insert your code here\nend", "    local max_num_count = 3\n    local num_count\
    \ = file_name:gsub('%d', '')\n    local dot_count = file_name:gsub('%.', '')\n\
    \    local ext_count = file_name:gsub('%d', '')\n    local filter = {[1] = '.txt',\
    \ [2] = '.exe', [3] = '.dll'}\n    local filter_len = filter.len\n    local file_name_len\
    \ = #file_name\n    local ext_len = #ext_count", "  return nil\nend", end, " \
    \   -- implement your code here\nend\nassert(file_name_check('a.txt') == 'Yes')\n\
    assert(file_name_check('1234.exe') == 'No')\nassert(file_name_check('aa.txt')\
    \ == 'Yes')\nassert(file_name_check('a.txt1') == 'No')\nassert(file_name_check('a.dll')\
    \ == 'Yes')\nassert(file_name_check('abb.dll') == 'Yes')\nassert(file_name_check('abbbb.dll')\
    \ == 'No')\nassert(file_name_check('abbbb..dll') == 'No')\nassert(file_name_check('abbbb.dll.')\
    \ == 'No')\nassert(file_name_check('abbbb.dll.1') == 'No')\nassert(file_name_check('abbbb.dll3')\
    \ == 'No')\nassert(file_name_check('abbbb.dll33') == 'No')\nassert(file_name_check('Abb.dll')\
    \ == 'Yes')\nassert(file_name_check('Abb.dll3') == 'No')\nassert(file_name_check('Abb.dll33')\
    \ == 'No')\nassert(file_name_check('Abbbb.dll') == 'No')\nassert(file_name_check('Abbbb.dll1')\
    \ == 'No')\nassert(file_name_check('Abbbb.dll12') == 'No')\nassert(file_name_check('Abbbb.dll13')\
    \ == 'No')\nassert(file_name_check('a1.txt') == 'Yes')\nassert(file_name_check('a11.txt')\
    \ == 'No')\nassert(file_name_check('a1.txt.1') == 'No')\nassert(file_name_check('a1.txt.12')\
    \ == 'No')\nassert(file_name_check('a1.txt.123') == 'No')\nassert(file_name_check('a1.txt.1234')\
    \ == 'No')\nassert(file_name_check('a1.txt') == 'Yes')\nassert(file_name_check('a11.txt')\
    \ == '", "  local str,count = string.gsub(file_name,\"%d\",\"\")\n  if(count >\
    \ 3) then return No end\n  local dot_index = string.find(file_name,\"%.\")\n \
    \ if(dot_index == nil) then return No end\n  local before_dot = string.sub(file_name,1,dot_index-1)\n\
    \  if(string.len(before_dot) < 1) then return No end\n  local char = string.sub(before_dot,1,1)\n\
    \  if((char < \"a\" or char > \"z\") and (char < \"A\" or char > \"Z\")) then\
    \ return No end\n  local after_dot = string.sub(file_name,dot_index+1,string.len(file_name))\n\
    \  if(after_dot ~= \"txt\" and after_dot ~= \"exe\" and after_dot ~= \"dll\")\
    \ then return No end\n  return Yes\nend\nprint(file_name_check(\"Convert.txt\"\
    ))\nprint(file_name_check(\"convert.txt\"))\nprint(file_name_check(\"convert.txt2\"\
    ))\nprint(file_name_check(\"1convert.txt\"))\nprint(file_name_check(\"convert.txt23\"\
    ))\nprint(file_name_check(\"convert23.txt\"))\nprint(file_name_check(\"convert\"\
    ))\nprint(file_name_check(\"convert.txt12\"))\nprint(file_name_check(\"convert.txt.\"\
    ))\nprint(file_name_check(\"convert23.txt\"))\nprint(file_name_check(\"convert.dll.txt\"\
    ))\nprint(file_name_check(\"convert.dll\"))\nprint(file_name_check(\"convert.exe\"\
    ))\nprint(file_name_check(\"convert.exe12\"))\nprint(file_name_check(\"convert.exe.txt\"\
    ))\nprint(file_name_check(\"convert.bmp\"))\nprint(file_name_check(\"convert.exe23\"\
    ))", "\tlocal function before_dot_check(file_name)\n\t\tlocal function is_letter(c)\n\
    \t\t\treturn c:lower() ~= c:upper()\n\t\tend\n\t\tif file_name:match(\"^%a\")\
    \ and not file_name:match(\"%d\") then return true\n\t\telse return false end\n\
    \tend\n\tlocal function is_dot(c)\n\t\treturn c == \".\"\n\tend\n\tlocal function\
    \ after_dot_check(file_name)\n\t\tfor i=1, #file_name do\n\t\t\tif is_dot(file_name:sub(i,i))\
    \ then\n\t\t\t\treturn file_name:sub(i+1) == \"txt\" or file_name:sub(i+1) ==\
    \ \"exe\" or file_name:sub(i+1) == \"dll\"\n\t\t\tend\n\t\tend\n\tend\n\tlocal\
    \ function digits_count(file_name)\n\t\tlocal count = 0\n\t\tfor i=1, #file_name\
    \ do\n\t\t\tif file_name:sub(i,i):match(\"%d\") then count = count + 1 end\n\t\
    \tend\n\t\treturn count\n\tend\n\tlocal function dots_count(file_name)\n\t\tlocal\
    \ count = 0\n\t\tfor i=1, #file_name do\n\t\t\tif is_dot(file_name:sub(i,i)) then\
    \ count = count + 1 end\n\t\tend\n\t\treturn count\n\tend\n\tif digits_count(file_name)\
    \ > 3 or dots_count(file_name) ~= 1 or not before_dot_check(file_name) or not\
    \ after_dot_check(file_name) then\n\t\treturn \"No\"\n\telse\n\t\treturn \"Yes\"\
    \n\tend\nend\nprint(file_name_check(\"a.txt\")) -- \"Yes\"\nprint(file_name_check(\"\
    a.exe\")) -- \"Yes\"\nprint(file_name_check(\"a.dll\")) -- \"Yes\"\nprint(file_name_check(\"\
    a.doc\")) -- \"No\"\nprint(file_name_check(\"a.a.txt\")) -- \"No\""]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
