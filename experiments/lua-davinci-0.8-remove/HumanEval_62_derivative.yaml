name: HumanEval_62_derivative
language: lua
prompt: "-- xs represent coefficients of a polynomial.\n-- xs[0] + xs[1] * x + xs[2]\
  \ * x^2 + ....\n-- Return derivative of this polynomial in the same form.\nlocal\
  \ function derivative(xs)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = derivative\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), {1, 4, 12, 20})\n    lu.assertEquals(candidate({1,\
  \ 2, 3}), {2, 6})\n    lu.assertEquals(candidate({3, 2, 1}), {2, 2})\n    lu.assertEquals(candidate({3,\
  \ 2, 1, 0, 4}), {2, 2, 0, 16})\n    lu.assertEquals(candidate({1}), {})\nend\n\n\
  os.exit(lu.LuaUnit.run())"
completions: ["    local res = {}\n    for i = 1, #xs - 1 do\n        res[i] = xs[i]\
    \ * i\n    end\n    return res\nend", "    local result = {}\n    for i = #xs,\
    \ 2, -1 do\n        table.insert(result, xs[i] * (i - 1))\n    end\n    return\
    \ result\nend", "    local ys = {}\n    for i = 1, #xs - 1 do\n        ys[i] =\
    \ xs[i] * i\n    end\n    return ys\nend", "  local new_xs = {}\n  for i = 1,\
    \ #xs - 1 do\n    table.insert(new_xs, (i) * xs[i + 1])\n  end\n  return new_xs\n\
    end", "\tlocal n = #xs\n\tif n < 2 then return {} end\n\tlocal dxs = {}\n\tfor\
    \ i = 1, n - 1 do\n\t\tdxs[i] = xs[i + 1] * i\n\tend\n\treturn dxs\nend", "  --\
    \ xs[i+1] * i\n  local new_xs = {}\n  for i = 1, #xs do\n    new_xs[i] = xs[i]\
    \ * i\n  end\n  return new_xs\nend", "    local derivative = {}\n    for i = 1,\
    \ #xs - 1 do\n        derivative[i] = xs[i] * i\n    end\n    return derivative\n\
    end", "  local len = #xs\n  local res = {}\n  for i = 2, len do\n    res[i - 1]\
    \ = xs[i] * (i - 1)\n  end\n  return res\nend", "\tlocal new_xs = {}\n\tlocal\
    \ len = #xs\n\tfor i = 1, len-1 do\n\t\tnew_xs[i] = (i) * xs[i+1]\n\tend\n\treturn\
    \ new_xs\nend", "  local res = {}\n  for i = 1, #xs - 1 do\n    res[i] = xs[i]\
    \ * i\n  end\n  return res\nend", "  local n = #xs - 1\n  local ys = {}\n  for\
    \ i = 1, n do\n    ys[i] = xs[i + 1] * i\n  end\n  return ys\nend", "    local\
    \ res = {}\n    for i = 2, #xs do\n        res[i - 1] = xs[i] * (i - 1)\n    end\n\
    \    return res\nend", "    local result = {}\n    for i = 1, #xs - 1 do\n   \
    \     table.insert(result, xs[i] * i)\n    end\n    return result\nend", "   \
    \ local res = {}\n    for k = 1, #xs - 1 do\n        res[k] = xs[k + 1] * k\n\
    \    end\n    return res\nend", "  local d = {}\n  for i = 1, #xs - 1 do\n   \
    \ d[i] = xs[i] * i\n  end\n  return d\nend", "    local dxs = {}\n    for i =\
    \ 1, #xs - 1 do\n        dxs[i] = xs[i + 1] * i\n    end\n    return dxs\nend",
  "    local r = {}\n    for i = 1, #xs - 1 do\n        r[i] = (i + 1) * xs[i + 1]\n\
    \    end\n    return r\nend", "    local res = {}\n    for i = 2, #xs do\n   \
    \     res[i - 1] = (i - 1) * xs[i]\n    end\n    return res\nend", "\tlocal n\
    \ = #xs\n\tlocal ys = {}\n\tfor i = 2, n do\n\t\tys[i - 1] = xs[i] * (i - 1)\n\
    \tend\n\treturn ys\nend", "\tlocal dxs = {}\n\tfor i, x in ipairs(xs) do\n\t\t\
    if i > 1 then\n\t\t\tdxs[i - 1] = i * x\n\t\tend\n\tend\n\treturn dxs\nend", "\t\
    local n = #xs\n\tlocal r = { }\n\tfor i = 2, n do\n\t\tr[i - 1] = (i - 1) * xs[i]\n\
    \tend\n\treturn r\nend", "    local dxs = {}\n    for i = 1, #xs - 1 do\n    \
    \    dxs[i] = xs[i + 1] * i\n    end\n    return dxs\nend", "  local dx = {}\n\
    \  for i = 1, #xs - 1 do\n    dx[i] = xs[i] * i\n  end\n  return dx\nend", " \
    \ local r = {}\n  local d = #xs\n  for i = 2, d do\n    r[i - 1] = (i - 1) * xs[i]\n\
    \  end\n  return r\nend", "  local xs_ = {}\n  for i = 2, #xs do\n    xs_[i -\
    \ 1] = xs[i] * (i - 1)\n  end\n  return xs_\nend", "    local ys = {}\n    for\
    \ i = 1, #xs do\n        ys[i - 1] = xs[i] * i\n    end\n    return ys\nend",
  "  local n = #xs\n  local result = {}\n  for i = 1, n-1 do\n    result[i] = xs[i+1]\
    \ * i\n  end\n  return result\nend", "    local result = {}\n    for i = 1, #xs\
    \ - 1 do\n        result[i] = (i) * xs[i + 1]\n    end\n    return result\nend",
  "  -- xs[0] + xs[1] * x + xs[2] * x^2 + ....\n  -- -> xs[1] + 2 * xs[2] * x + ....\n\
    \  -- -> xs[2] + 3 * xs[3] * x + ....\n  local d = {}\n  for i = 1, #xs - 1 do\n\
    \    d[i] = xs[i + 1] * i\n  end\n  return d\nend", "  local result = {}\n  for\
    \ i,x in ipairs(xs) do\n    result[i-1] = (i-1) * x\n  end\n  return result\n\
    end", "    local ys = {}\n    for i = 2, #xs do\n        ys[i - 1] = (i - 1) *\
    \ xs[i]\n    end\n    return ys\nend", "  local n = #xs\n  local i = n - 1\n \
    \ local out = {}\n  while i > 0 do\n    xs[i] = i * xs[i]\n    i = i - 1\n  end\n\
    \  return xs\nend", "    local d = {}\n    for i = 1, #xs - 1 do\n        d[i]\
    \ = (i+1) * xs[i+1]\n    end\n    return d\nend", "  local dx = {}\n  for i =\
    \ 2, #xs do\n    table.insert(dx, (i - 1) * xs[i])\n  end\n  return dx\nend",
  "   local xs_ = {}\n   local n = #xs\n   for i = 2, n do\n      xs_[i-1] = xs[i]\
    \ * (i-1)\n   end\n   return xs_\nend", "    if #xs == 1 then\n        return\
    \ {0}\n    end\n    local ys = {}\n    for i = 2, #xs do\n        ys[i - 1] =\
    \ (i - 1) * xs[i]\n    end\n    return ys\nend", "    local res = {}\n    for\
    \ i = 2, #xs do\n        res[i - 1] = (i - 1) * xs[i]\n    end\n    return res\n\
    end", "   local dxs = {}\n   for i = 2, #xs do\n      dxs[i - 1] = i * xs[i]\n\
    \   end\n   return dxs\nend", "   local xs_ = {}\n   for i = 2, #xs do\n     \
    \ xs_[i - 1] = (i - 1) * xs[i]\n   end\n   return xs_\nend", "    local res =\
    \ {}\n    for i = 1, #xs - 1 do\n        res[i] = xs[i + 1] * i\n    end\n   \
    \ return res\nend", "  local result = {}\n  for i = 1, #xs - 1 do\n    result[i]\
    \ = xs[i] * i\n  end\n  return result\nend", "  local new_xs = {}\n  for i,x in\
    \ ipairs(xs) do\n    if i > 1 then\n      new_xs[i-1] = x * (i-1)\n    end\n \
    \ end\n  return new_xs\nend", "    local n = #xs\n    if n <= 1 then\n       \
    \ return {0}\n    end\n    local ys = {}\n    for i = 1, n - 1 do\n        ys[i]\
    \ = xs[i] * (n - i)\n    end\n    return ys\nend", "  local new_xs = {}\n  for\
    \ i,v in ipairs(xs) do\n    new_xs[i-1] = v * (i-1)\n  end\n  return new_xs\n\
    end", "  local ret = {}\n  local count = #xs - 1\n  for i = 1, count do\n    ret[i]\
    \ = xs[i + 1] * i\n  end\n  return ret\nend", "    local n = #xs\n    local ys\
    \ = {}\n    for i = 1, n - 1 do\n        ys[i] = xs[i] * (n - i)\n    end\n  \
    \  return ys\nend", "    local r = {}\n    for i = 1, #xs - 1 do\n        r[i]\
    \ = xs[i + 1] * i\n    end\n    return r\nend", "   local n = #xs\n   local ys\
    \ = {}\n   for i = 1, n-1 do\n      ys[i] = xs[i+1] * i\n   end\n   return ys\n\
    end", "    local m = #xs\n    local ys = {}\n    for i = 1, m - 1 do\n       \
    \ ys[i] = (i + 1) * xs[i + 1]\n    end\n    return ys\nend", "   local n = #xs\n\
    \   local dxs = {}\n   for i = 2, n do\n      table.insert(dxs, xs[i] * (i - 1))\n\
    \   end\n   return dxs\nend", "   local xs1 = {}\n   for i = 2, #xs do\n     \
    \ xs1[i-1] = xs[i] * i\n   end\n   return xs1\nend", "   local n = #xs\n   local\
    \ res = {}\n   for i = 2, n do\n      res[i - 1] = xs[i] * (i - 1)\n   end\n \
    \  return res\nend", "  local new_xs = {}\n  for i = 2, #xs do\n    new_xs[i -\
    \ 1] = (i - 1) * xs[i]\n  end\n  return new_xs\nend", "   local dx = {}\n   for\
    \ i = 2, #xs do\n      dx[i-1] = xs[i] * i\n   end\n   return dx\nend", "  local\
    \ n = #xs\n  local ys = {}\n  for i = 2, n do\n    table.insert(ys, (i - 1) *\
    \ xs[i])\n  end\n  return ys\nend", "    local ys = {}\n    for i = 2, #xs do\n\
    \        ys[i - 1] = (i - 1) * xs[i]\n    end\n    return ys\nend", "    local\
    \ ans = {}\n    for i = 1, #xs - 1 do\n        ans[i] = (i) * xs[i + 1]\n    end\n\
    \    return ans\nend", "  local n = #xs\n  local r = { }\n  local i = 1\n  while\
    \ i < n do\n    table.insert(r, i * xs[i + 1])\n    i = i + 1\n  end\n  return\
    \ r\nend", "    local dxs = {}\n    for i, x in ipairs(xs) do\n        if i ==\
    \ 1 then\n            dxs[1] = 0\n        else\n            dxs[i] = i * x\n \
    \       end\n    end\n    return dxs\nend", "   local ys = {}\n   for i = 1, #xs-1\
    \ do\n      ys[i] = xs[i] * i\n   end\n   return ys\nend", "  local res = {}\n\
    \  local n = #xs\n  if n == 0 then\n    return res\n  end\n  local i = 1\n  while\
    \ i < n do\n    res[i] = xs[i + 1] * i\n    i = i + 1\n  end\n  return res\nend",
  "  local dy = {}\n  for i, x in ipairs(xs) do\n    if i > 1 then\n      dy[i - 1]\
    \ = x * (i - 1)\n    end\n  end\n  return dy\nend", "\tlocal dy = {}\n\tfor i\
    \ = 2, #xs do\n\t\tdy[i - 1] = xs[i] * (i - 1)\n\tend\n\treturn dy\nend", "  local\
    \ t = {}\n  for i = 1, #xs - 1 do\n    t[i] = xs[i] * (#xs - i)\n  end\n  return\
    \ t\nend", "    local n = #xs\n    if n == 1 then\n        return {}\n    end\n\
    \    local result = {}\n    for i = 1, n - 1 do\n        table.insert(result,\
    \ xs[i] * (n - i))\n    end\n    return result\nend", "  local n = #xs - 1\n \
    \ local derivative_coeffs = {}\n  for i=1, n do\n    derivative_coeffs[i] = (i+1)\
    \ * xs[i+1]\n  end\n  return derivative_coeffs\nend", "  local drv = {}\n  for\
    \ i = 2, #xs do\n    drv[i - 1] = xs[i] * (i - 1)\n  end\n  return drv\nend",
  "    local result = {}\n    for i, x in ipairs(xs) do\n        if i > 1 then\n \
    \           result[i - 1] = x * (i - 1)\n        end\n    end\n    return result\n\
    end", "\tlocal n = #xs\n\tlocal ys = {}\n\tfor i = 1, n - 1 do\n\t\tys[i] = xs[i]\
    \ * (n - i)\n\tend\n\treturn ys\nend", "    local dxs = {}\n    for i = 1, #xs\
    \ - 1 do\n        table.insert(dxs, xs[i] * i)\n    end\n    return dxs\nend",
  "    local n = #xs\n    if n == 1 then\n        return {}\n    end\n    local dxs\
    \ = {}\n    for i = 1, n - 1 do\n        dxs[i] = xs[i] * (n - i)\n    end\n \
    \   return dxs\nend", "  local result = {}\n  for i = 2, #xs do\n    table.insert(result,\
    \ (i - 1) * xs[i])\n  end\n  return result\nend", "    local n = #xs\n    local\
    \ ys = {}\n    for i = 2, n do\n        table.insert(ys, (i - 1) * xs[i])\n  \
    \  end\n    return ys\nend", "  local result = {}\n  for i, x in ipairs(xs) do\n\
    \    if i > 1 then\n      table.insert(result, (i - 1) * x)\n    end\n  end\n\
    \  return result\nend", "  local n = #xs\n  local dxs = {}\n  for i = 1, n-1 do\n\
    \    dxs[i] = (i+1) * xs[i+1]\n  end\n  return dxs\nend", "    local d = {table.unpack(xs)}\n\
    \    for i=1,#d do\n        d[i] = d[i] * i\n    end\n    table.remove(d, 1)\n\
    \    return d\nend", "  local dxs = {}\n  for i = 1, #xs - 1 do\n    dxs[i] =\
    \ (i + 1) * xs[i + 1]\n  end\n  return dxs\nend", "    local newXs = {}\n    for\
    \ i = 2, #xs do\n        newXs[i - 1] = (i - 1) * xs[i]\n    end\n    return newXs\n\
    end", "\tlocal result = {}\n\tfor i = 1, #xs - 1 do\n\t\ttable.insert(result,\
    \ xs[i] * i)\n\tend\n\treturn result\nend", "    local dxs = {}\n    for i = 1,\
    \ #xs - 1 do\n        dxs[i] = (i) * xs[i + 1]\n    end\n    return dxs\nend",
  "    local ret = {}\n    for i = 1, #xs do\n        ret[i - 1] = xs[i] * i\n   \
    \ end\n    return ret\nend", "  local dxs = {}\n  for i = 1, #xs do\n    dxs[i\
    \ - 1] = xs[i] * i\n  end\n  return dxs\nend", "  local len = #xs\n  local result\
    \ = {}\n  for i = 2, len do\n    table.insert(result, (i - 1) * xs[i])\n  end\n\
    \  return result\nend", "    local result = {}\n    for i = 1, #xs - 1 do\n  \
    \      table.insert(result, xs[i] * i)\n    end\n    return result\nend", "  \
    \  local n = #xs\n    local ys = {}\n    for i = 1, n - 1 do\n        ys[i] =\
    \ xs[i] * (n - i)\n    end\n    return ys\nend", "    local result = {}\n    for\
    \ i = 2, #xs do\n        table.insert(result, (i - 1) * xs[i])\n    end\n    return\
    \ result\nend", "\tlocal dxs = {}\n\tfor i, x in ipairs(xs) do\n\t\tif i == 1\
    \ then\n\t\t\ttable.insert(dxs, 0)\n\t\telse\n\t\t\ttable.insert(dxs, x * (i -\
    \ 1))\n\t\tend\n\tend\n\treturn dxs\nend", "  assert(type(xs) == \"table\", \"\
    xs should be a table\")\n  local ys = {}\n  for i = 2, #xs do\n    ys[i - 1] =\
    \ (i - 1) * xs[i]\n  end\n  return ys\nend", "  local res = {}\n  local max_exp\
    \ = #xs\n  for exp = 1, max_exp - 1 do\n    res[exp - 1] = exp * xs[exp]\n  end\n\
    \  return res\nend", "  local result = {}\n  for i = 2, #xs do\n    table.insert(result,\
    \ xs[i] * (i - 1))\n  end\n  return result\nend", "  local newxs = {}\n  for i,\
    \ x in ipairs(xs) do\n    newxs[i] = (i - 1) * x\n  end\n  return newxs\nend",
  "    local res = {}\n    for i = 1, #xs do\n        res[i - 1] = xs[i] * i\n   \
    \ end\n    return res\nend", "  local t = {}\n  for i = 1, #xs - 1 do\n    t[i]\
    \ = xs[i] * i\n  end\n  return t\nend", "    local xs1 = {}\n    for i, x in ipairs(xs)\
    \ do\n        xs1[i] = x * (i - 1)\n    end\n    return xs1\nend", "    local\
    \ dxs = {}\n    for i = 2, #xs do\n        dxs[i - 1] = xs[i] * i\n    end\n \
    \   return dxs\nend", "    local dxs = {}\n    for i = 1, #xs do\n        if i\
    \ == 1 then\n            -- d/dx 1 = 0\n            table.insert(dxs, 0)\n   \
    \     else\n            table.insert(dxs, xs[i] * i)\n        end\n    end\n \
    \   return dxs\nend", "    local n = #xs\n    local ys = {}\n    for i = 1, n\
    \ - 1 do\n        ys[i] = xs[i] * (n - i)\n    end\n    return ys\nend", "   local\
    \ dxs = {}\n   for i = 1, #xs - 1 do\n      dxs[i] = (i + 1) * xs[i + 1]\n   end\n\
    \   return dxs\nend", "  local dx = {}\n  for i = 1, #xs - 1 do\n    dx[i] = xs[i]\
    \ * i\n  end\n  return dx\nend", "    local res = {}\n    for i = 1, #xs - 1 do\n\
    \        res[i] = (i + 1) * xs[i + 1]\n    end\n    return res\nend", "  local\
    \ dxs = {}\n  local n = #xs\n  for i = 2, n do\n    dxs[i - 1] = (i - 1) * xs[i]\n\
    \  end\n  return dxs\nend", "  local res = {}\n  for i = 1, #xs do\n    res[i\
    \ - 1] = xs[i] * i\n  end\n  return res\nend", "    local coeffs = {}\n    for\
    \ i, x in ipairs(xs) do\n        if i > 1 then\n            table.insert(coeffs,\
    \ (i - 1) * x)\n        end\n    end\n    return coeffs\nend", "    local res\
    \ = {}\n    for i = 2, #xs do\n        res[i - 1] = xs[i] * (i - 1)\n    end\n\
    \    return res\nend", "    local n = #xs\n    local dxs = {}\n    for i = 2,\
    \ n do\n        dxs[i - 1] = (i - 1) * xs[i]\n    end\n    return dxs\nend", " \
    \   local dx = {}\n    for i = 2, #xs do\n        dx[i - 1] = i * xs[i]\n    end\n\
    \    return dx\nend", "  local result = {}\n  for i = 1, #xs - 1 do\n    table.insert(result,\
    \ xs[i] * i)\n  end\n  return result\nend", "  local n = #xs - 1\n  local coeffs\
    \ = {}\n  for i=0,n-1 do\n    coeffs[i+1] = (n-i) * xs[i+1]\n  end\n  return coeffs\n\
    end", "    local ys = {}\n    for i, x in ipairs(xs) do\n        if i >= 2 then\n\
    \            table.insert(ys, (i - 1) * x)\n        end\n    end\n    return ys\n\
    end", "  local xs_derivative = {}\n  for i = #xs, 1, -1 do\n    table.insert(xs_derivative,\
    \ i * xs[i])\n  end\n  return xs_derivative\nend", "   local result = {}\n   for\
    \ i = 2, #xs do\n      result[i - 1] = xs[i] * (i - 1)\n   end\n   return result\n\
    end", "  local dxs = {}\n  for i = 2, #xs do\n    dxs[i - 1] = i * xs[i]\n  end\n\
    \  return dxs\nend", "   local dx = {}\n   for i=1,#xs do\n      dx[i] = xs[i]\
    \ * i\n   end\n   table.remove(dx, 1)\n   return dx\nend", "  local n = #xs\n\
    \  local derivative = {}\n  for i = 1, n-1 do\n    derivative[i] = xs[i+1] * i\n\
    \  end\n  return derivative\nend", "    local ret = {}\n    for i = 1, #xs - 1\
    \ do\n        table.insert(ret, i * xs[i + 1])\n    end\n    return ret\nend",
  "    local dxs = {}\n    for i = 2, #xs do\n        dxs[i - 1] = i * xs[i]\n   \
    \ end\n    return dxs\nend", "    local result = {}\n    for i = #xs, 1, -1 do\n\
    \        table.insert(result, xs[i] * i)\n    end\n    return result\nend", " \
    \  local d = {}\n   for i = 1, #xs do\n      d[i - 1] = xs[i] * i\n   end\n  \
    \ return d\nend", "  local dxs = {}\n  local deg = #xs\n  local n = deg - 1\n\
    \  for i = 1, n do\n    dxs[i] = n * xs[i + 1]\n  end\n  return dxs\nend", " \
    \   local xs2 = {}\n    local n = #xs\n    for i=2,n do\n        xs2[i-1] = (i-1)\
    \ * xs[i]\n    end\n    return xs2\nend", "    local result = {}\n    for i =\
    \ 1, #xs - 1 do\n        table.insert(result, xs[i] * i)\n    end\n    return\
    \ result\nend", "  local dx = {}\n  for i = 1, #xs do\n    dx[i - 1] = xs[i] *\
    \ i\n  end\n  return dx\nend", "    local ys = {}\n    for i = 1, #xs - 1 do\n\
    \        ys[i] = (i+1) * xs[i+1]\n    end\n    return ys\nend", "   local dx =\
    \ {}\n   for i = 2, #xs do\n      dx[i-1] = xs[i] * i\n   end\n   return dx\n\
    end", "  local n = #xs\n  local dx = {}\n  for i = 1, n - 1 do\n    dx[i] = xs[i]\
    \ * (n - i)\n  end\n  return dx\nend", "   local ret = {}\n   for i = 1, #xs -\
    \ 1 do\n      ret[i] = xs[i] * i\n   end\n   return ret\nend", "    local dxs\
    \ = {}\n    for i = 2, #xs do\n        table.insert(dxs, (i - 1) * xs[i])\n  \
    \  end\n    return dxs\nend", "   --for i = #xs, 1, -1 do\n   --   xs[i] = xs[i]\
    \ * (#xs - i)\n   --end\n   --xs[#xs] = nil\n   local rxs = {}\n   for i = 2,\
    \ #xs do\n      rxs[i - 1] = xs[i] * (i - 1)\n   end\n   return rxs\nend", " \
    \   local n = #xs\n    local xs2 = {}\n    for i = 1, n - 1 do\n        xs2[i]\
    \ = xs[i] * (n - i)\n    end\n    return xs2\nend", "    local ys = {}\n    for\
    \ i = 2, #xs do\n        ys[i - 1] = xs[i] * (i - 1)\n    end\n    return ys\n\
    end", "    local dx = {}\n    for i = 1, #xs - 1 do\n        dx[i] = (i + 1) *\
    \ xs[i + 1]\n    end\n    return dx\nend", "  local newxs = {}\n  for i = 1, #xs\
    \ - 1 do\n    table.insert(newxs, xs[i] * i)\n  end\n  return newxs\nend", " \
    \   -- Note that the degree of derivative is 1 less than the original polynomial.\n\
    \    local dxs = {}\n    for i = 2, #xs do\n        dxs[i - 1] = (i - 1) * xs[i]\n\
    \    end\n    return dxs\nend", "   local n = #xs\n   if n == 1 then\n      return\
    \ {0}\n   end\n   local ys = {}\n   for i = 1, n - 1 do\n      ys[i] = (i + 1)\
    \ * xs[i + 1]\n   end\n   return ys\nend", "   local n = #xs - 1\n   local ys\
    \ = {}\n   for i = 1, n do\n      ys[i] = xs[i + 1] * i\n   end\n   return ys\n\
    end", "    local out = {}\n    for i=2,#xs do\n        table.insert(out, (i-1)\
    \ * xs[i])\n    end\n    return out\nend", "  local n = #xs\n  local ys = {}\n\
    \  for i = 2, n do\n    ys[i - 1] = xs[i] * (i - 1)\n  end\n  return ys\nend",
  "    local out = {}\n    for i = 1, #xs - 1 do\n        table.insert(out, xs[i]\
    \ * i)\n    end\n    return out\nend", "    local new_xs = {}\n    for i = 2,\
    \ #xs do\n        new_xs[i - 1] = xs[i] * (i - 1)\n    end\n    return new_xs\n\
    end", "  local ys = {}\n  for i = 2, #xs do\n    ys[i - 1] = xs[i] * (i - 1)\n\
    \  end\n  return ys\nend", "  local n = #xs\n  local dx = {}\n  for i = 2, n do\n\
    \    dx[i - 1] = xs[i] * (i - 1)\n  end\n  return dx\nend", "   local ys = {}\n\
    \   local n = #xs\n   for i = 1, n - 1 do\n      ys[i] = (i + 1) * xs[i + 1]\n\
    \   end\n   return ys\nend", "  local res = {}\n  for i = #xs, 1, -1 do\n    if\
    \ i > 1 then res[i - 1] = i * xs[i] end\n  end\n  return res\nend", "    local\
    \ r = {}\n    for i = #xs, 1, -1 do\n        r[i - 1] = xs[i] * i\n    end\n \
    \   return r\nend", "    local n = #xs\n    local dxs = {}\n    for i = 1, n -\
    \ 1 do\n        dxs[i] = xs[i + 1] * i\n    end\n    return dxs\nend", "    local\
    \ dxs = {}\n    for i = 2, #xs do\n        dxs[i - 1] = xs[i] * i\n    end\n \
    \   return dxs\nend", "    local result = {}\n    for i = 2, #xs do\n        result[i\
    \ - 1] = (i - 1) * xs[i]\n    end\n    return result\nend", "  local ys = {}\n\
    \  for i = 2, #xs do\n    ys[i - 1] = xs[i] * (i - 1)\n  end\n  return ys\nend",
  "   local n = #xs\n   local dxs = {}\n   for i = 1, n - 1 do\n      dxs[i] = (i\
    \ + 1) * xs[i + 1]\n   end\n   return dxs\nend", "    local ys = {}\n    for i\
    \ = 2, #xs do\n        ys[i - 1] = xs[i] * (i - 1)\n    end\n    return ys\nend",
  "    local dxs = {}\n    for i = 1, #xs do\n        table.insert(dxs, xs[i] * i)\n\
    \    end\n    return dxs\nend", "  local new_xs = {}\n  for i = 2, #xs do\n  \
    \  new_xs[i - 1] = (i - 1) * xs[i]\n  end\n  return new_xs\nend", "  local dx\
    \ = {}\n  for i = #xs, 2, -1 do\n    dx[i - 1] = xs[i] * i\n  end\n  return dx\n\
    end", "  local n = #xs\n  local ys = {}\n  for i = 2, n do\n    ys[i - 1] = xs[i]\
    \ * (i - 1)\n  end\n  return ys\nend", "    local len = #xs\n    local new = {}\n\
    \    for i = 1, len - 1 do\n        new[i] = xs[i + 1] * i\n    end\n    return\
    \ new\nend", "    local res = {}\n    for i = #xs, 1, -1 do\n        table.insert(res,\
    \ i * xs[i])\n    end\n    return res\nend", "  local dxs = {}\n  for i = 1, #xs\
    \ - 1 do\n    dxs[i] = xs[i] * i\n  end\n  return dxs\nend", "    local res =\
    \ {}\n    for i = 1, #xs - 1 do\n        res[i] = xs[i + 1] * i\n    end\n   \
    \ return res\nend", "    local n = #xs\n    if n == 1 then\n        return {0}\n\
    \    end\n    local result = {}\n    for i = 1, n - 1 do\n        result[i] =\
    \ xs[i + 1] * i\n    end\n    return result\nend", "  local n = #xs\n  if n ==\
    \ 1 then\n    return {0}\n  end\n  local ys = {}\n  for i = 2, n do\n    ys[i\
    \ - 1] = (i - 1) * xs[i]\n  end\n  return ys\nend", "  local ys = {}\n  for i\
    \ = 1, #xs do\n    ys[i] = xs[i] * i\n  end\n  return ys\nend", "  if xs[1] ==\
    \ 0 then\n    return derivative({unpack(xs, 2)})\n  end\n  local result = {}\n\
    \  for i, x in ipairs(xs) do\n    if i == 1 then\n      break\n    end\n    result[i\
    \ - 1] = x * (i - 1)\n  end\n  return result\nend", "  local dx = {}\n  for i\
    \ = 2, #xs do\n    table.insert(dx, (i - 1) * xs[i])\n  end\n  return dx\nend",
  "    local result = {}\n    for i = 2, #xs do\n        result[i - 1] = xs[i] * (i\
    \ - 1)\n    end\n    return result\nend", "    local dxs = {}\n    for i, x in\
    \ ipairs(xs) do\n        if i > 1 then\n            dxs[i - 1] = i * x\n     \
    \   end\n    end\n    return dxs\nend", "    local dx = {}\n    for i = 1, #xs\
    \ - 1 do\n        dx[i] = xs[i + 1] * i\n    end\n    return dx\nend", "  local\
    \ dxs = {}\n  for i = 2, #xs do\n    dxs[i - 1] = xs[i] * i\n  end\n  return dxs\n\
    end", "    local dxs = {}\n    local n = #xs\n    local i = 0\n    while i < n\
    \ - 1 do\n        dxs[i] = xs[i + 1] * (i + 1)\n        i = i + 1\n    end\n \
    \   return dxs\nend", "    local result = {}\n    for i = 2, #xs do\n        result[i\
    \ - 1] = (i - 1) * xs[i]\n    end\n    return result\nend", "  local result =\
    \ {}\n  for i = #xs - 1, 1, -1 do\n    result[i] = xs[i] * i\n  end\n  return\
    \ result\nend", "  local dxs = {}\n  for i = 1, #xs - 1 do\n    dxs[i] = xs[i]\
    \ * i\n  end\n  return dxs\nend", "   -- Derivative of a polynomial x^i * y^j\
    \ is i * x^(i-1) * y^j\n   local dx = {}\n   for i=2,#xs do\n      dx[i-1] = (i-1)\
    \ * xs[i]\n   end\n   return dx\nend", "  local result = {}\n  for i, x in ipairs(xs)\
    \ do\n    if i == 1 then\n      break\n    end\n    result[i - 1] = x * (i - 1)\n\
    \  end\n  return result\nend", "    local n = #xs\n    local ys = {}\n    for\
    \ i = 2, n do\n        ys[i - 1] = xs[i] * (i - 1)\n    end\n    return ys\nend",
  "    local result = {}\n    local n = #xs - 1\n    for i = 0, n-1 do\n        result[i]\
    \ = xs[i+1] * (n-i)\n    end\n    return result\nend", "   local result = {}\n\
    \   for i = 1, #xs - 1 do\n      table.insert(result, xs[i] * i)\n   end\n   return\
    \ result\nend", "    local n = #xs\n    local dxs = {}\n    for i = 1, n-1 do\n\
    \        dxs[i] = (i+1) * xs[i+1]\n    end\n    return dxs\nend", "   local len\
    \ = #xs\n   if len < 2 then\n      return nil\n   end\n   local ys = {}\n   for\
    \ i = 2, len do\n      ys[i - 1] = xs[i] * (i - 1)\n   end\n   return ys\nend",
  "  local dxs = {}\n  for i = #xs - 1, 1, -1 do\n    dxs[i] = xs[i + 1] * i\n  end\n\
    \  return dxs\nend", "    local n = #xs\n    local dxs = {}\n    for i = 1, n\
    \ - 1 do\n        table.insert(dxs, xs[i] * (n - i))\n    end\n    return dxs\n\
    end", "   local out = {}\n   for i=1,#xs-1 do\n      out[i] = (i+1) * xs[i+1]\n\
    \   end\n   return out\nend", "   local diff = {}\n   local n = #xs\n   for i\
    \ = 2, n do\n      diff[i-1] = xs[i] * (i-1)\n   end\n   return diff\nend", " \
    \  local n = #xs - 1\n   local ys = {}\n   for i = 1, n do\n      ys[i] = (i+1)\
    \ * xs[i+1]\n   end\n   return ys\nend", "  local n = #xs\n  if n == 1 then\n\
    \    return {0}\n  end\n  local ys = {0}\n  for i = 1, n - 1 do\n    ys[i] = xs[i\
    \ + 1] * i\n  end\n  return ys\nend", "   local result = {}\n   for i = 1, #xs\
    \ - 1 do\n      table.insert(result, xs[i] * i)\n   end\n   return result\nend",
  "  local dx = {}\n  for i = 1, #xs - 1 do\n    dx[i] = xs[i + 1] * i\n  end\n  return\
    \ dx\nend", "  local n = #xs\n  local ys = {}\n  for i = 1, n - 1 do\n    ys[i]\
    \ = (i + 1) * xs[i + 1]\n  end\n  return ys\nend", "  local r = {}\n  for i, v\
    \ in ipairs(xs) do\n    if i > 1 then r[i - 1] = (i - 1) * v end\n  end\n  return\
    \ r\nend", "    local n = #xs\n    if n == 1 then\n        return {0}\n    end\n\
    \    local dxs = {}\n    for i = 1, n - 1 do\n        dxs[i] = (i + 1) * xs[i\
    \ + 1]\n    end\n    return dxs\nend", "  local n = #xs - 1\n  local res = {}\n\
    \  for i = 1, n do\n    res[i] = (i + 1) * xs[i + 1]\n  end\n  return res\nend",
  "    local n = #xs\n    local ys = {}\n    for i = 1, n-1 do\n        ys[i] = xs[i]\
    \ * (n-i)\n    end\n    return ys\nend", "   local acc = {}\n   for i,x in ipairs(xs)\
    \ do\n      acc[i-1] = x * (i-1)\n   end\n   return acc\nend", "   local result\
    \ = {}\n   for k, v in ipairs(xs) do\n      if k ~= 1 then\n         table.insert(result,\
    \ v * (k - 1))\n      end\n   end\n   return result\nend", "  local ret = {}\n\
    \  for i = 1, #xs - 1 do\n    ret[i] = (i + 1) * xs[i + 1]\n  end\n  return ret\n\
    end", "    local dx = {}\n    for i, x in ipairs(xs) do\n        if i == 1 then\n\
    \            break\n        end\n        dx[i - 1] = x * (i - 1)\n    end\n  \
    \  return dx\nend", "    local ret = {}\n    for i = 2, #xs do\n        table.insert(ret,\
    \ xs[i] * (i - 1))\n    end\n    return ret\nend", "  local n = #xs\n  local dxs\
    \ = {}\n  local x = 1\n  for i = 1, n - 1 do\n    table.insert(dxs, xs[i] * x)\n\
    \    x = x + 1\n  end\n  return dxs\nend", "  local t = {}\n  for i = 1, #xs -\
    \ 1 do\n    table.insert(t, (i * xs[i+1]))\n  end\n  return t\nend", "    if #xs\
    \ == 1 then\n        return {0}\n    end\n    local res = {}\n    for i=2,#xs\
    \ do\n        res[i-1] = xs[i] * (i-1)\n    end\n    return res\nend", "  local\
    \ n = #xs\n  if n == 1 then\n    return {0}\n  end\n  local der = {}\n  for i\
    \ = 2, n do\n    der[i - 1] = xs[i] * (i - 1)\n  end\n  return der\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
