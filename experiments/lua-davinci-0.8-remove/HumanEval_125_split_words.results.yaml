language: lua
name: HumanEval_125_split_words
results:
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local function from_comma(t, s)\n        if s:find(',') then\n\
    \            local parts = s:split(',')\n            local parts_num = table.getn(parts)\n\
    \            for i = 1, parts_num do\n                table.insert(t, parts[i])\n\
    \            end\n        else\n            table.insert(t, s)\n        end\n\
    \        return t\n    end\n    local function from_space(t, s)\n        if s:find('\
    \ ') then\n            local parts = s:split(' ')\n            local parts_num\
    \ = table.getn(parts)\n            for i = 1, parts_num do\n                table.insert(t,\
    \ parts[i])\n            end\n        else\n            table.insert(t, s)\n \
    \       end\n        return t\n    end\n    local function from_letter(t, s)\n\
    \        local s_len = s:len()\n        local odd_count = 0\n        for i = 1,\
    \ s_len do\n            local char = s:sub(i, i)\n            local char_code\
    \ = string.byte(char)\n            if char_code % 2 == 1 then\n              \
    \  odd_count = odd_count + 1\n            end\n        end\n        table.insert(t,\
    \ odd_count)\n        return t\n    end\n    if txt:find(' ') then\n        words\
    \ = from_space(words, txt)\n    elseif txt:find(',') then\n        words = from_comma(words,\
    \ txt)\n    else\n        words = from_letter(words, txt)\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpanzupch5.lua:23:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpanzupch5.lua:23:\
    \ in local 'from_space'\n\t/tmp/tmpanzupch5.lua:47: in local 'candidate'\n\t/tmp/tmpanzupch5.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ string.find(txt, ' ') then\n        return split(txt, ' ')\n    elseif string.find(txt,\
    \ ',') then\n        return split(txt, ',')\n    else\n        return #table.filter(txt:lower():to_array(),\
    \ function(a) return (string.byte(a) - string.byte('a')) % 2 == 1 end)\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1y0mmbmz.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmp1y0mmbmz.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp1y0mmbmz.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  return\
    \ txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\"\
    ) and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"\
    ^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or\
    \ txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\"\
    ) and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"\
    ^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or\
    \ txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\"\
    ) and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"\
    ^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or\
    \ txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\"\
    ) and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"\
    ^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or\
    \ txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"^%s*$\"\
    ) and 0 or txt:match(\"^%s*$\") and 0 or txt:match(\"\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprfrm06_g.lua:8: unfinished string near ''"''

    '
  stdout: ''
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  if txt:find(\"\
    %s\") then\n    return txt:split(\"%s\")\n  elseif txt:find(\",\") then\n    return\
    \ txt:split(\",\")\n  else\n    local t = 0\n    for i = 1, #txt do\n      if\
    \ txt:byte(i) % 2 == 1 then\n        t = t + 1\n      end\n    end\n    return\
    \ t\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq6uycmvc.lua:9:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpq6uycmvc.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpq6uycmvc.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7lunn_n.lua:13:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpl7lunn_n.lua:13:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  return\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp52ao4xcs.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp52ao4xcs.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ your code goes here\n    return txt\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxs2vx502.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmpxs2vx502.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ res = {}\n    for word in string.gmatch(txt, \"%S+\") do\n        res[#res +\
    \ 1] = word\n    end\n    if #res == 0 then\n        for word in string.gmatch(txt,\
    \ \"[^,]+\") do\n            res[#res + 1] = word\n        end\n    end\n    if\
    \ #res == 0 then\n        local sum = 0\n        for word in string.gmatch(txt,\
    \ \"[a-z]\") do\n            sum = sum + (string.byte(word) - ord('a')) % 2\n\
    \        end\n        return sum\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoaiof7dp.lua:31:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpoaiof7dp.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\" \") then\n        return string.split(txt, \" \")\n    elseif txt:find(\"\
    ,\") then\n        return string.split(txt, \",\")\n    else \n        local sum\
    \ = 0\n        for i = 1, txt:len() do\n            if txt:sub(i, i):byte() -\
    \ 97 % 2 == 1 then\n                sum = sum + 1\n            end\n        end\n\
    \        return sum\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeon2xfv0.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpeon2xfv0.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpeon2xfv0.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\treturn\
    \ txt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppisfou5u.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmppisfou5u.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi0p9xzbm.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpi0p9xzbm.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local result = {}\n    -- if no whitespaces exists, split on\
    \ commas\n    if string.find(txt, ' ') == nil then\n        words = string.split(txt,\
    \ ',')\n        -- print(words)\n        if #words == 1 then\n            -- no\
    \ commas, return the number of lower-case letters with odd order in the alphabet\n\
    \            for i = 1, #txt do\n                if string.byte(txt, i) - string.byte('a')\
    \ % 2 == 1 then\n                    result[#result + 1] = txt[i]\n          \
    \      end\n            end\n            return #result\n        else\n      \
    \      return words\n        end\n    else\n        words = string.split(txt,\
    \ ' ')\n        return words\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2p9sbpvx.lua:26:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp2p9sbpvx.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmp2p9sbpvx.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt == nil then\n        return nil\n    end\n    if txt:find(\"%s\") then\n\
    \        local wordlist = {}\n        for word in txt:gmatch(\"%S+\") do\n   \
    \         table.insert(wordlist, word)\n        end\n        return wordlist\n\
    \    elseif txt:find(\",\") then\n        local wordlist = {}\n        for word\
    \ in txt:gmatch(\"[^,]+\") do\n            table.insert(wordlist, word)\n    \
    \    end\n        return wordlist\n    else\n        local count = 0\n       \
    \ for c in txt:gmatch(\".\") do\n            if ord(c) % 2 == 1 then\n       \
    \         count = count + 1\n            end\n        end\n        return count\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptaw25988.lua:26:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmptaw25988.lua:26:\
    \ in local 'candidate'\n\t/tmp/tmptaw25988.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ s = txt:find(\" \")\n  if s then\n    local t = {}\n    local i = 1\n    while\
    \ i <= #txt do\n      local f = txt:find(\" \", i)\n      if f then\n        t[#t+1]\
    \ = txt:sub(i, f-1)\n        i = f + 1\n      else\n        t[#t+1] = txt:sub(i)\n\
    \        i = #txt + 1\n      end\n    end\n    return t\n  else\n    s = txt:find(\"\
    ,\")\n    if s then\n      local t = {}\n      local i = 1\n      while i <= #txt\
    \ do\n        local f = txt:find(\",\", i)\n        if f then\n          t[#t+1]\
    \ = txt:sub(i, f-1)\n          i = f + 1\n        else\n          t[#t+1] = txt:sub(i)\n\
    \          i = #txt + 1\n        end\n      end\n      return t\n    else\n  \
    \    local count = 0\n      for i = 1, #txt do\n        if txt:byte(i) % 2 ==\
    \ 1 then\n          count = count + 1\n        end\n      end\n      return count\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfxooolh6.lua:59:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpfxooolh6.lua:59: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ result = {}\n  local len = string.len(txt)\n  local idx = 0\n  local start =\
    \ 1\n  while idx < len do\n    local curr = string.sub(txt, idx, idx)\n    if\
    \ curr == ' ' then\n      if idx ~= start then\n        table.insert(result, string.sub(txt,\
    \ start, idx-1))\n      end\n      start = idx + 1\n    elseif curr == ',' then\n\
    \      if idx ~= start then\n        table.insert(result, string.sub(txt, start,\
    \ idx-1))\n      end\n      start = idx + 1\n    end\n    idx = idx + 1\n  end\n\
    \  if idx ~= start then\n    table.insert(result, string.sub(txt, start, idx))\n\
    \  end\n  if #result > 0 then\n    return result\n  else\n    local count = 0\n\
    \    local prev_is_odd = false\n    for idx = 0, 25 do\n      local c = string.char(idx\
    \ + string.byte('a'))\n      local is_odd = idx % 2 == 1\n      if is_odd ~= prev_is_odd\
    \ then\n        local num = string.gsub(txt, c, '')\n        num = len - #num\n\
    \        count = count + num\n      end\n      prev_is_odd = is_odd\n    end\n\
    \    return count\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx0s2qpu3.lua:54:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpx0s2qpu3.lua:54: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  --local\
    \ output_table = {}\n  local output_table = {}\n  if txt:find(\"%s\") then\n \
    \   local num_spaces = #(txt:split(\"%s\"))\n    for i = 1, num_spaces, 1 do\n\
    \      output_table[i] = txt:split(\"%s\")[i]\n    end\n  elseif txt:find(\",\"\
    ) then\n    local num_commas = #(txt:split(\",\"))\n    for i = 1, num_commas,\
    \ 1 do\n      output_table[i] = txt:split(\",\")[i]\n    end\n  else\n    local\
    \ chars = {}\n    local odd_count = 0\n    for i = 1, #txt, 1 do\n      chars[i]\
    \ = txt:sub(i, i)\n    end\n    for i = 1, #chars, 1 do\n      if string.byte(chars[i])\
    \ % 2 == 1 then\n        odd_count = odd_count + 1\n      end\n    end\n    return\
    \ odd_count\n  end\n  return output_table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqx0ph0ml.lua:11:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpqx0ph0ml.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpqx0ph0ml.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n \n  --\
    \ TODO\n \nend\n \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpezmfb7tb.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpezmfb7tb.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ result = {}\n    for word in string.gmatch(txt, \"%w+\") do\n        result[#result\
    \ + 1] = word\n    end\n    return #result == 0 and count_odd(txt) or result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1bzo1m37.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmp1bzo1m37.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ l = {}\n    for i in string.gmatch(txt, \"[^%s]+\") do\n        table.insert(l,\
    \ i)\n    end\n    if #l == 0 then\n        local count = 0\n        for i in\
    \ string.gmatch(txt, \"[^,]+\") do\n            table.insert(l, i)\n        end\n\
    \        if #l == 0 then\n            for i in string.gmatch(txt, \"[a-z]+\")\
    \ do\n                count = count + #i % 2\n            end\n            return\
    \ count\n        end\n    end\n    return l\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7us4igv.lua:31:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp_7us4igv.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    error(\"\
    TODO: implement\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfk9nfwty.lua:8:\
    \ TODO: implement\nstack traceback:\n\t/tmp/tmpfk9nfwty.lua:8: in local 'candidate'\n\
    \t/tmp/tmpfk9nfwty.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = {}\n\tlocal word = ''\n\tlocal letter = 0\n\tlocal count = 0\n\tlocal\
    \ hasSplit = false\n\tfor i=1,#txt do\n\t\tletter = txt:sub(i,i)\n\t\tif letter\
    \ == ' ' then\n\t\t\ttable.insert(words, word)\n\t\t\tword = ''\n\t\t\thasSplit\
    \ = true\n\t\telseif letter == ',' then\n\t\t\ttable.insert(words, word)\n\t\t\
    \tword = ''\n\t\t\thasSplit = true\n\t\telse\n\t\t\tword = word .. letter\n\t\t\
    end\n\tend\n\tif word ~= '' then\n\t\ttable.insert(words, word)\n\tend\n\tif hasSplit\
    \ then\n\t\treturn words\n\telse\n\t\tfor i=1,#txt do\n\t\t\tletter = txt:sub(i,i)\n\
    \t\t\tif math.fmod(string.byte(letter)-97,2) == 1 then\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nhdq_8v.lua:48:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp1nhdq_8v.lua:48: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ word_list = {}\n    local word_start_i = 1\n    local word_end_i = 0\n    for\
    \ i = 1, string.len(txt) do\n        local c = string.sub(txt, i, i)\n       \
    \ if string.match(c, \"[%s,]\") then\n            word_end_i = i\n           \
    \ if word_end_i > word_start_i then\n                table.insert(word_list, string.sub(txt,\
    \ word_start_i, word_end_i - 1))\n            end\n            word_start_i =\
    \ i + 1\n        end\n    end\n    if word_start_i <= string.len(txt) then\n \
    \       table.insert(word_list, string.sub(txt, word_start_i, string.len(txt)))\n\
    \    end\n    if #word_list > 0 then\n        return word_list\n    else\n   \
    \     return string.len(txt)\n    end\nend\nassert(split_words(\"abcdef\") ==\
    \ 3)\nassert(split_words(\"abc def\") == {\"abc\", \"def\"})\nassert(split_words(\"\
    abc,def\") == {\"abc\", \"def\"})\nassert(split_words(\"abc, def\") == {\"abc\"\
    , \"def\"})\nassert(split_words(\"abc ,def\") == {\"abc\", \"def\"})\nassert(split_words(\"\
    abc, def, ghi\") == {\"abc\", \"def\", \"ghi\"})\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpnxyk5nza.lua:30: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpnxyk5nza.lua:30: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\"%s\") then\n        return txt:split(\"%s\")\n    elseif txt:find(\"\
    ,\") then\n        return txt:split(\",\")\n    else\n        local res = 0\n\
    \        for i = 1, #txt do\n            if (i % 2 == 1) and txt:sub(i, i):find(\"\
    %l\") then\n                res = res + 1\n            end\n        end\n    \
    \    return res\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0_3d2zt2.lua:9:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp0_3d2zt2.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0_3d2zt2.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ list = {}\n\tfor i in string.gmatch(txt, \"%S+\") do table.insert(list, i) end\
    \ \n\tif #list == 0 then\n\t\tfor i in string.gmatch(txt, \"[^,]+\") do table.insert(list,\
    \ i) end \n\t\tif #list == 0 then\n\t\t\treturn #string.gsub(txt, \"[^a-z]\",\
    \ \"\")\n\t\tend\n\tend\n\treturn list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka2s3ilc.lua:23:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpka2s3ilc.lua:23: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ the real answer is return the txt string itself, we just do this for the example.\n\
    \    if contains_whitespace(txt) then\n        return split_whitespace(txt)\n\
    \    elseif contains_comma(txt) then\n        return split_comma(txt)\n    else\n\
    \        return count_odd(txt)\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx_ysnibt.lua:9:\
    \ attempt to call a nil value (global 'contains_whitespace')\nstack traceback:\n\
    \t/tmp/tmpx_ysnibt.lua:9: in local 'candidate'\n\t/tmp/tmpx_ysnibt.lua:21: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = stringx.split(txt)\n    if #words == 1 then\n        local commas =\
    \ stringx.split(txt, ',')\n        if #commas == 1 then\n            local counter\
    \ = 0\n            for i=1,#txt do\n                local ch = txt:sub(i,i)\n\
    \                local number = string.byte(ch) - 97\n                if number\
    \ % 2 == 1 then\n                    counter = counter + 1\n                end\n\
    \            end\n            return counter\n        else\n            return\
    \ commas\n        end\n    else\n        return words\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfrq4p56g.lua:8:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmpfrq4p56g.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpfrq4p56g.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ n_words = 0\n    for word in string.gmatch(txt, \"%S+\") do\n        n_words\
    \ = n_words + 1\n    end\n    if n_words > 0 then\n        return n_words\n  \
    \  end\n    n_words = 0\n    for char in string.gmatch(txt, \".\") do\n      \
    \  if string.byte(char) >= 97 and string.byte(char) <= 122 then\n            n_words\
    \ = n_words + 1\n        end\n    end\n    return n_words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglmyi5qh.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 2\nstack traceback:\n\t/tmp/tmpglmyi5qh.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\" \") then\n        return strsplit(\" \", txt)\n    elseif txt:find(\"\
    ,\") then\n        return strsplit(\",\", txt)\n    else\n        local t = {}\n\
    \        for i = 1, #txt do\n            t[i] = txt:sub(i, i)\n        end\n \
    \       local count = 0\n        for i = 1, #t do\n            if string.byte(t[i])\
    \ - string.byte(\"a\") % 2 == 1 then\n                count = count + 1\n    \
    \        end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpil9l9phq.lua:9:\
    \ attempt to call a nil value (global 'strsplit')\nstack traceback:\n\t/tmp/tmpil9l9phq.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpil9l9phq.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ string.find(txt, \"%s\") then\n        return string.split(txt, \"%s\")\n  \
    \  elseif string.find(txt, \",\") then\n        return string.split(txt, \",\"\
    )\n    else\n        local n = 0\n        for i = 1, #txt do\n            if string.byte(txt,\
    \ i) % 2 == 1 then\n                n = n + 1\n            end\n        end\n\
    \        return n\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxw3an6mp.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpxw3an6mp.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxw3an6mp.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ split_words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxw1h2gx.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x559486626690\nstack traceback:\n\
    \t/tmp/tmpnxw1h2gx.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ t = {}\n\tlocal w = {}\n\tlocal l = 1\n\tfor s in string.gmatch(txt, \"[%w]+\"\
    ) do\n\t\tt[l] = s\n\t\tl = l + 1\n\tend\n\tif l > 1 then\n\t\treturn t\n\tend\n\
    \tt = {}\n\tl = 1\n\tfor s in string.gmatch(txt, \"[^,]+\") do\n\t\tt[l] = s\n\
    \t\tl = l + 1\n\tend\n\tif l > 1 then\n\t\treturn t\n\tend\n\tlocal i = 0\n\t\
    for s in string.gmatch(txt, \".\") do\n\t\tlocal o = string.byte(s) - string.byte('a')\n\
    \t\tif o % 2 == 1 then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn i\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuk3l9grc.lua:40:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpuk3l9grc.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ t = {}\n    local s = nil\n    local word = nil\n    local n = string.len(txt)\n\
    \    local b = 0\n    local i = 0\n    local in_word = false\n    local ch\n \
    \   for i = 1, n do\n        ch = string.sub(txt, i, i)\n        if string.find(ch,\
    \ \"%s\") then\n            -- space\n            if in_word then\n          \
    \      table.insert(t, word)\n                word = nil\n                in_word\
    \ = false\n            end\n        elseif string.find(ch, \",\") then\n     \
    \       -- comma\n            if in_word then\n                table.insert(t,\
    \ word)\n                word = nil\n                in_word = false\n       \
    \     end\n            table.insert(t, ch)\n        else\n            if in_word\
    \ then\n                word = word .. ch\n            else\n                word\
    \ = ch\n                in_word = true\n            end\n        end\n    end\n\
    \    if in_word then\n        table.insert(t, word)\n    end\n    if #t == 0 then\n\
    \        b = 0\n        for i = 1, n do\n            if string.find(string.sub(txt,\
    \ i, i), \"%l\") then\n                b = b + (i % 2)\n            end\n    \
    \    end\n        return b\n    else\n        return t\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw1kgd15.lua:62:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \",\", \"world!\"}\n\
    stack traceback:\n\t/tmp/tmpxw1kgd15.lua:62: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = {}\n\tlocal i = 1\n\tfor w in string.gmatch(txt, \"[%a%d]+\") do\n\t\
    \twords[i] = w\n\t\ti = i + 1\n\tend\n\tif i > 1 then\n\t\treturn words\n\tend\n\
    \ti = 1\n\tfor w in string.gmatch(txt, \"[^,]+\") do\n\t\twords[i] = w\n\t\ti\
    \ = i + 1\n\tend\n\tif i > 1 then\n\t\treturn words\n\tend\n\ti = 0\n\tfor j =\
    \ 1, string.len(txt) do\n\t\tlocal c = string.sub(txt, j, j)\n\t\tlocal o = string.byte(c)\
    \ - 97\n\t\tif o % 2 == 1 then\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn i\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2faxf_es.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmp2faxf_es.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ r = txt:match(\"^([^%s]+)%s+(.*)$\")\n  if r then return split_words(r) end\n\
    \  r = txt:match(\"^([^,]+)%,(.*)$\")\n  if r then return split_words(r) end\n\
    \  return txt:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpytioorjn.lua:18:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 5\nstack traceback:\n\t/tmp/tmpytioorjn.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local commas = string.gmatch(txt, ',')\n  local ws = string.gmatch(txt,\
    \ '%s')\n  if commas then\n    for word in string.gmatch(txt, '[^,]+') do\n  \
    \    table.insert(words, word)\n    end\n  elseif ws then\n    for word in string.gmatch(txt,\
    \ '[^%s]+') do\n      table.insert(words, word)\n    end\n  else\n    local odds\
    \ = 0\n    for c in string.gmatch(txt, '.') do\n      if string.byte(c) % 2 ==\
    \ 1 then\n        odds = odds + 1\n      end\n    end\n    return odds\n  end\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpptf979bx.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello world!\"}\nstack traceback:\n\
    \t/tmp/tmpptf979bx.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ out_table = {}\n    local s_txt = string.gsub(txt, \"%s\", \"\")\n    if string.find(s_txt,\
    \ \"%s\") then\n        for i in string.gmatch(txt, \"%S+\") do\n            table.insert(out_table,\
    \ i)\n        end\n    elseif string.find(s_txt, \",\") then\n        for i in\
    \ string.gmatch(txt, \"%w+\") do\n            table.insert(out_table, i)\n   \
    \     end\n    else\n        for i in string.gmatch(txt, \"[a-z]\") do\n     \
    \       local c = string.byte(i) - 97\n            if c % 2 == 0 then\n      \
    \          table.insert(out_table, c)\n            end\n        end\n    end\n\
    \    return out_table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5bght06.lua:32:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {4, 14, 22, 14}\nstack traceback:\n\
    \t/tmp/tmpq5bght06.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  if string.find(txt,\
    \ \" \") ~= nil then\n    return str.split(txt, \" \")\n  elseif string.find(txt,\
    \ \",\") ~= nil then\n    return str.split(txt, \",\")\n  else\n    local c =\
    \ 0\n    for i = 1, #txt do\n      local v = string.byte(txt, i) - 96\n      if\
    \ v % 2 == 1 then\n        c = c + 1\n      end\n    end\n    return c\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2pqo_c2d.lua:9:\
    \ attempt to index a nil value (global 'str')\nstack traceback:\n\t/tmp/tmp2pqo_c2d.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp2pqo_c2d.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ res = {}\n    local sep, patt = ' ', '%s+'\n    -- if txt:find(',') then\n \
    \   --     sep, patt = ',', ','\n    -- end\n    for str in string.gmatch(txt,\
    \ patt) do\n        table.insert(res, str)\n    end\n    return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp350atolq.lua:22:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\" \"}\nstack traceback:\n\t/tmp/tmp350atolq.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        words[#words + 1]\
    \ = word\n    end\n    if #words == 0 then\n        for char in txt:gmatch(\"\
    .\") do\n            words[#words + 1] = char\n        end\n    end\n    if #words\
    \ == 0 then\n        return txt:len()\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwjnnaqub.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpwjnnaqub.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tif not\
    \ txt then return end\n\tlocal word = txt:match('^([^%s,]+)')\n\tif not word then\
    \ return end\n\treturn word, split_words(txt:sub(#word+1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00__nb4c.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello\"\nstack traceback:\n\t/tmp/tmp00__nb4c.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\t-- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps35jgxzw.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmps35jgxzw.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    print(txt)\n\
    \    local res = {}\n    local tmp = \"\"\n    for i = 1, string.len(txt) do\n\
    \        local ch = string.sub(txt, i, i)\n        local ord = string.byte(ch)\
    \ - string.byte('a')\n        if ord >= 0 and ord <= 25 then\n            if string.len(tmp)\
    \ > 0 then\n                res[#res + 1] = tmp\n                tmp = \"\"\n\
    \            end\n            if ord % 2 == 0 then\n                res[#res +\
    \ 1] = ch\n            end\n        elseif ch == ' ' then\n            if string.len(tmp)\
    \ > 0 then\n                res[#res + 1] = tmp\n                tmp = \"\"\n\
    \            end\n        elseif ch == ',' then\n            if string.len(tmp)\
    \ > 0 then\n                res[#res + 1] = tmp\n                tmp = \"\"\n\
    \            end\n            res[#res + 1] = ch\n        else\n            tmp\
    \ = tmp .. ch\n        end\n    end\n    if string.len(tmp) > 0 then\n       \
    \ res[#res + 1] = tmp\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "Hello world!\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9zo91lhn.lua:46:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"H\", \"e\", \"o\", \"w\", \"o\"\
    , \"!\"}\nstack traceback:\n\t/tmp/tmp9zo91lhn.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ #txt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngomicrl.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 12\nstack traceback:\n\t/tmp/tmpngomicrl.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  if txt:find('\
    \ ') then return s.split(txt, ' ')\n  elseif txt:find(',') then return s.split(txt,\
    \ ',')\n  else\n    local index, ret = 0, 0\n    for c in s.gmatch(txt, '.') do\n\
    \      if (index % 2 == 0) and c:find('[a-z]') then ret = ret + 1 end\n      index\
    \ = index + 1\n    end\n    return ret\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu1czwz0s.lua:8:\
    \ attempt to index a nil value (global 's')\nstack traceback:\n\t/tmp/tmpu1czwz0s.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpu1czwz0s.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ whitespace = string.find(txt, '%s')\n  local comma = string.find(txt, ',')\n\
    \  local result = nil\n  if whitespace then\n    result = {}\n    for word in\
    \ string.gmatch(txt, '%S+') do\n      table.insert(result, word)\n    end\n  elseif\
    \ comma then\n    result = {}\n    for word in string.gmatch(txt, '[^,]+') do\n\
    \      table.insert(result, word)\n    end\n  else\n    local count = 0\n    for\
    \ char in string.gmatch(txt, '.') do\n      local ord = string.byte(char) - string.byte('a')\n\
    \      if ord % 2 == 1 then\n        count = count + 1\n      end\n    end\n \
    \   result = count\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5de669qc.lua:43:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp5de669qc.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ start = 0\n  local i = 1\n  local last_split = 0\n  local txt_len = string.len(txt)\n\
    \  local res = {}\n  while i <= txt_len do\n    if string.byte(txt, i) == 32 then\n\
    \      res[#res + 1] = string.sub(txt, start, i - 1)\n      start = i + 1\n  \
    \    last_split = i\n    elseif string.byte(txt, i) == 44 then\n      res[#res\
    \ + 1] = string.sub(txt, start, i - 1)\n      start = i + 1\n      last_split\
    \ = i\n    end\n    i = i + 1\n  end\n  res[#res + 1] = string.sub(txt, start,\
    \ last_split)\n  if #res == 1 then\n    local sum = 0\n    for i = 1, txt_len\
    \ do\n      if (string.byte(txt, i) - 96) % 2 == 1 then\n        sum = sum + 1\n\
    \      end\n    end\n    return sum\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvmjncaot.lua:41:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"\"}\nstack traceback:\n\
    \t/tmp/tmpvmjncaot.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local parts = split(txt, '[,%s]+')\n    local n = 0\n    for\
    \ i, w in ipairs(parts) do\n        n = n + 1\n        words[n] = w\n    end\n\
    \    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyg83ubqm.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpyg83ubqm.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpyg83ubqm.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        table.insert(words,\
    \ word)\n    end\n    if #words == 0 then\n        for word in txt:gmatch(\"[^,]+\"\
    ) do\n            table.insert(words, word)\n        end\n    end\n    if #words\
    \ == 0 then\n        local word = txt:gsub(\"[^a-z]\", \"\")\n        local sum\
    \ = 0\n        for i = 1, #word do\n            local c = word:sub(i, i)\n   \
    \         local o = ord(c)\n            if o % 2 == 1 then\n                sum\
    \ = sum + 1\n            end\n        end\n        return sum\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1gsvh71g.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp1gsvh71g.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\"%s\") ~= nil then\n        local ret = {}\n        for word in txt:gmatch(\"\
    [^%s]+\") do\n            table.insert(ret, word)\n        end\n        return\
    \ ret\n    elseif txt:find(\",\") ~= nil then\n        local ret = {}\n      \
    \  for word in txt:gmatch(\"[^,]+\") do\n            table.insert(ret, word)\n\
    \        end\n        return ret\n    else\n        local n = 0\n        for i\
    \ = 1, #txt do\n            if (string.byte(txt, i) - 96) % 2 == 1 then\n    \
    \            n = n + 1\n            end\n        end\n        return n\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrjesod9.lua:39:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpxrjesod9.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    for\
    \ w in txt:gmatch('[^%s]+') do\n        -- TODO: your code here\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5lj5wicq.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp5lj5wicq.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\t-- Return\
    \ the number of lower-case letters with odd order in the alphabet, ord('a') =\
    \ 0, ord('b') = 1, ... ord('z') = 25\n\tlocal function count(str)\n\t\tlocal cnt\
    \ = 0\n\t\tfor i = 1, #str do\n\t\t\tlocal c = str:sub(i, i)\n\t\t\tif c:match(\"\
    [a-z]\") then\n\t\t\t\tlocal n = string.byte(c) - string.byte(\"a\")\n\t\t\t\t\
    if n % 2 == 1 then\n\t\t\t\t\tcnt = cnt + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\
    \t\treturn cnt\n\tend\n\t-- Split on commas\n\tlocal function split_commas(str)\n\
    \t\tlocal t = {}\n\t\tfor w in str:gmatch(\"[^,]+\") do\n\t\t\tt[#t + 1] = w\n\
    \t\tend\n\t\treturn t\n\tend\n\t-- Split on whitespace\n\tlocal function split_spaces(str)\n\
    \t\tlocal t = {}\n\t\tfor w in str:gmatch(\"[^%s]+\") do\n\t\t\tt[#t + 1] = w\n\
    \t\tend\n\t\treturn t\n\tend\n\tlocal w = split_spaces(txt)\n\tif #w > 0 then\n\
    \t\treturn w\n\tend\n\tw = split_commas(txt)\n\tif #w > 0 then\n\t\treturn w\n\
    \tend\n\treturn count(txt)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_l55y4v8.lua:53:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp_l55y4v8.lua:53: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  if txt:find('%s')\
    \ then\n    local words = {}\n    for word in txt:gmatch('%S+') do\n      table.insert(words,\
    \ word)\n    end\n    return words\n  elseif txt:find(',') then\n    local words\
    \ = {}\n    for word in txt:gmatch('[^,]+') do\n      table.insert(words, word)\n\
    \    end\n    return words\n  else\n    local count = 0\n    for c in txt:gmatch('%a')\
    \ do\n      if ((c:byte()-97) % 2) == 1 then\n        count = count + 1\n    \
    \  end\n    end\n    return count\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbnqecclc.lua:40:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpbnqecclc.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ txt = txt:gsub(\"%s\", \",\")\n    if string.find(txt, \",\") then\n       \
    \ return strsplit(\",\", txt)\n    else\n        local count = 0\n        for\
    \ i = 1, #txt do\n            local c = string.byte(txt, i)\n            if c\
    \ >= 97 and c <= 122 and i % 2 == 1 then\n                count = count + 1\n\
    \            end\n        end\n        return count\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz3wzj81d.lua:10:\
    \ attempt to call a nil value (global 'strsplit')\nstack traceback:\n\t/tmp/tmpz3wzj81d.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpz3wzj81d.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ string.gmatch(txt, \"%g+\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxijk7wwn.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x56258c0b6bd0\nstack traceback:\n\
    \t/tmp/tmpxijk7wwn.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ ret\n\tif #txt == 0 then\n\t\treturn 0\n\tend\n\tif txt:find('%s') then\n\t\t\
    ret = txt:split('%s')\n\telseif txt:find(',') then\n\t\tret = txt:split(',')\n\
    \telse\n\t\tlocal number = 0\n\t\tfor i = 1, #txt do\n\t\t\tif txt:byte(i) % 2\
    \ == 1 then\n\t\t\t\tnumber = number + 1\n\t\t\tend\n\t\tend\n\t\treturn number\n\
    \tend\n\treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpot5vt_pv.lua:13:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpot5vt_pv.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpot5vt_pv.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if(txt:find(\"\
    %s\")) then\n        local res = {}\n        for word in txt:gmatch(\"%S+\") do\n\
    \            table.insert(res, word)\n        end\n        return res\n    elseif(txt:find(\"\
    ,\")) then\n        local res = {}\n        for word in txt:gmatch(\"[^,]+\")\
    \ do\n            table.insert(res, word)\n        end\n        return res\n \
    \   else\n        local count = 0\n        for ch in txt:gmatch(\".\") do\n  \
    \          local n = string.byte(ch) - string.byte('a')\n            if n%2 ==\
    \ 1 then\n                count = count + 1\n            end\n        end\n  \
    \      return count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ev7a3fn.lua:41:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp3ev7a3fn.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0m7yl_s6.lua:9: <name> expected near ''end''

    '
  stdout: ''
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ r = {}\n  for w in txt:gmatch(\"%w+\") do\n    r[#r+1] = w\n  end\n  if #r >\
    \ 0 then\n    return r\n  end\n  for w in txt:gmatch(\"[^,]+\") do\n    r[#r+1]\
    \ = w\n  end\n  if #r > 0 then\n    return r\n  end\n  local lc = txt:lower()\n\
    \  local sum = 0\n  for c in lc:gmatch(\".\") do\n    local o = string.byte(c)\
    \ - string.byte('a')\n    if o%2 == 1 then\n      sum = sum + 1\n    end\n  end\n\
    \  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1na135p.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpe1na135p.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ #txt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpngomicrl.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 12\nstack traceback:\n\t/tmp/tmpngomicrl.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ REPLACE THIS LINE\n    return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp40cvz4cy.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 0\nstack traceback:\n\t/tmp/tmp40cvz4cy.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  if string.find(txt,\
    \ \"%s\") then\n    txt = string.gsub(txt, \"%s\", \",\")\n  end\n  if string.find(txt,\
    \ \",\") then\n    return string.split(txt, \",\")\n  end\n  local cnt = 0\n \
    \ for w in string.gmatch(txt, \"%l\") do\n    cnt = cnt + math.fmod(string.byte(w)\
    \ - 97, 2)\n  end\n  return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphvm3yxa3.lua:12:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmphvm3yxa3.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmphvm3yxa3.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ splitted = {}\n    for word in string.gmatch(txt, \"[^%s]+\") do\n        table.insert(splitted,\
    \ word)\n    end\n    if #splitted > 0 then\n        return splitted\n    end\n\
    \    local splitted = {}\n    for word in string.gmatch(txt, \"[^,]+\") do\n \
    \       table.insert(splitted, word)\n    end\n    if #splitted > 0 then\n   \
    \     return splitted\n    end\n    local letter_count = 0\n    for i = 1, #txt\
    \ do\n        local c = txt:sub(i, i)\n        local char_val = string.byte(c)\n\
    \        if char_val >= ord('a') and char_val <= ord('z') then\n            if\
    \ (char_val - ord('a')) % 2 == 1 then\n                letter_count = letter_count\
    \ + 1\n            end\n        end\n    end\n    return letter_count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsl7h94_r.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpsl7h94_r.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    if txt:find(\"%s\") then\n        for w in txt:gmatch(\"[^%s]+\"\
    ) do\n            table.insert(words, w)\n        end\n    elseif txt:find(\"\
    ,\") then\n        for w in txt:gmatch(\"[^,]+\") do\n            table.insert(words,\
    \ w)\n        end\n    else\n        local count = 0\n        for i=1, #txt do\n\
    \            local c = txt:sub(i,i)\n            if (string.byte(c) - 96) % 2\
    \ == 1 then\n                count = count + 1\n            end\n        end\n\
    \        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpriof5fw6.lua:38:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpriof5fw6.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: Implement here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdosuzkey.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpdosuzkey.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    if has_whitespace(txt) then\n        local t = 0\n        local\
    \ s = 0\n        for i = 1, #txt do\n            local c = txt:sub(i, i)\n   \
    \         if c == ' ' then\n                words[#words + 1] = txt:sub(s, t -\
    \ 1)\n                s = i + 1\n            end\n            t = t + 1\n    \
    \    end\n        words[#words + 1] = txt:sub(s, t)\n    elseif has_comma(txt)\
    \ then\n        local t = 0\n        local s = 0\n        for i = 1, #txt do\n\
    \            local c = txt:sub(i, i)\n            if c == ',' then\n         \
    \       words[#words + 1] = txt:sub(s, t - 1)\n                s = i + 1\n   \
    \         end\n            t = t + 1\n        end\n        words[#words + 1] =\
    \ txt:sub(s, t)\n    else\n        local count = 0\n        for i = 1, #txt do\n\
    \            local c = txt:sub(i, i)\n            local n = ord(c)\n         \
    \   if n % 2 == 1 then\n                count = count + 1\n            end\n \
    \       end\n        return count\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp_ohole8.lua:9:\
    \ attempt to call a nil value (global 'has_whitespace')\nstack traceback:\n\t\
    /tmp/tmpp_ohole8.lua:9: in local 'candidate'\n\t/tmp/tmpp_ohole8.lua:50: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tif string.find(txt,\
    \ '%s') then\n\t\tword_table = {}\n\t\tfor word in string.gmatch(txt, '%S+') do\n\
    \t\t\ttable.insert(word_table, word)\n\t\tend\n\t\treturn word_table\n\telseif\
    \ string.find(txt, ',') then\n\t\tword_table = {}\n\t\tfor word in string.gmatch(txt,\
    \ '%S+') do\n\t\t\ttable.insert(word_table, word)\n\t\tend\n\t\treturn word_table\n\
    \telse\n\t\treturn string.len(txt)\n\tend\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvay4z3q.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpsvay4z3q.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  return\
    \ txt:gsub(\"[%s,]\", \" \"):gsub(\"%d%l+\", \"#\"):gsub(\"%p\", \"\"):split()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw99zcgpt.lua:8:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpw99zcgpt.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpw99zcgpt.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  if (string.find(txt,\
    \ \" \")) then\n    return string.split(txt, \" \")\n  elseif (string.find(txt,\
    \ \",\")) then\n    return string.split(txt, \",\")\n  else\n    local c = 0\n\
    \    for i = 1, string.len(txt) do\n      local ord = string.byte(txt, i) - string.byte(\"\
    a\")\n      if (ord % 2 == 1) then\n        c = c + 1\n      end\n    end\n  \
    \  return c\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0cbr2d9q.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp0cbr2d9q.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0cbr2d9q.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ whitespace_count = #txt:gsub(\"%s+\", \"\");\n  local comma_count = #txt:gsub(\"\
    ,\", \"\");\n  local word_list = {};\n  if whitespace_count ~= #txt then\n   \
    \ word_list = str_split(txt, \" \");\n  elseif comma_count ~= #txt then\n    word_list\
    \ = str_split(txt, \",\");\n  else\n    return #txt:gsub(\"[a-z]\", \"\");\n \
    \ end\n  return word_list;\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsqxzuyku.lua:12:\
    \ attempt to call a nil value (global 'str_split')\nstack traceback:\n\t/tmp/tmpsqxzuyku.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpsqxzuyku.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local i = 1\n  local t = string.gmatch(txt, \"%w+\")\n  while\
    \ true do\n    local w = t()\n    if w == nil then break end\n    words[i] = w\n\
    \    i = i + 1\n  end\n  local n = #words\n  if n == 0 then\n    local j = 0\n\
    \    for c in string.gmatch(txt, \"[a-z]\") do\n      j = j + 1\n      if j %\
    \ 2 == 1 then\n        words[n + 1] = c\n        n = n + 1\n      end\n    end\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprserc70x.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmprserc70x.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  -- Fill\
    \ in your answer here, the function name must match the function name in the examples\n\
    \  local n = 0\n  local s = string.find(txt, \" \")\n  local c = string.find(txt,\
    \ \",\")\n  if s == nil and c == nil then\n    return #txt\n  elseif s == nil\
    \ then\n    local a = string.split(txt, \",\")\n    for i = 1, #a do\n      local\
    \ s = 0\n      for j = 1, #a[i] do\n        s = s + a[i]:byte(j)\n      end\n\
    \      if s % 2 == 1 then\n        n = n + 1\n      end\n    end\n    return n\n\
    \  else\n    local a = string.split(txt, \" \")\n    return a\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppr7e4gjt.lua:27:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmppr7e4gjt.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmppr7e4gjt.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ string.match(txt, '%d+')\n        or select(2, string.gsub(txt, '[a-z]', ''))\n\
    \        or select(2, string.gsub(txt, '[a-z]+', ' '))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdr135n9_.lua:16:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 9\nstack traceback:\n\t/tmp/tmpdr135n9_.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = txt:split(' ')\n\tif words and #words > 1 then\n\t\treturn words\n\t\
    end\n\twords = txt:split(',')\n\tif words and #words > 1 then\n\t\treturn words\n\
    \tend\n\tlocal n = 0\n\tfor i=1,#txt do\n\t\tlocal c = txt:sub(i,i)\n\t\tlocal\
    \ o = (ord(c) - ord('a')) % 2\n\t\tif o == 1 then\n\t\t\tn = n + 1\n\t\tend\n\t\
    end\n\treturn n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpd6v1il8y.lua:8:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpd6v1il8y.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpd6v1il8y.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  for word in txt:gmatch(\"%w+\") do\n    table.insert(words, word)\n\
    \  end\n  if #words > 0 then\n    return words\n  end\n  local odd = 0\n  for\
    \ word in txt:gmatch(\"%l\") do\n    if word:byte() % 2 == 1 then\n      odd =\
    \ odd + 1\n    end\n  end\n  return odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufhodeu1.lua:27:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpufhodeu1.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = {}\n\tlocal index = 1\n\tfor word in string.gmatch(txt, \"%w+\") do\n\
    \t\twords[index] = word\n\t\tindex = index + 1\n\tend\n\tif #words > 0 then\n\t\
    \treturn words\n\tend\n\tindex = 1\n\tfor word in string.gmatch(txt, \"[^,]+\"\
    ) do\n\t\twords[index] = word\n\t\tindex = index + 1\n\tend\n\tif #words > 0 then\n\
    \t\treturn words\n\tend\n\tlocal sum = 0\n\tfor i = 1, #txt do\n\t\tlocal char\
    \ = string.sub(txt, i, i)\n\t\tlocal num = string.byte(char) - string.byte('a')\n\
    \t\tif num % 2 == 1 then\n\t\t\tsum = sum + 1\n\t\tend\n\tend\n\treturn sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijy0vrvf.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpijy0vrvf.lua:39: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ function odd_letters(txt)\n\t\tlocal count = 0\n\t\tfor i = 1, #txt do\n\t\t\
    \tlocal c = txt:sub(i, i)\n\t\t\tif c:match(\"%l\") and i % 2 == 1 then\n\t\t\t\
    \tcount = count + 1\n\t\t\tend\n\t\tend\n\t\treturn count\n\tend\n\tlocal words\
    \ = {}\n\tlocal sep = txt:find(\" \")\n\tif sep then\n\t\tfor w in txt:gmatch(\"\
    %S+\") do\n\t\t\ttable.insert(words, w)\n\t\tend\n\telse\n\t\tsep = txt:find(\"\
    ,\")\n\t\tif sep then\n\t\t\tfor w in txt:gmatch(\"[^,]+\") do\n\t\t\t\ttable.insert(words,\
    \ w)\n\t\t\tend\n\t\telse\n\t\t\treturn odd_letters(txt)\n\t\tend\n\tend\n\treturn\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsfb6cv8k.lua:45:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpsfb6cv8k.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes455spk.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpes455spk.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxowwyhn.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmppxowwyhn.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local whitespace = string.find(txt, \" \")\n    local comma\
    \ = string.find(txt, \",\")\n    if whitespace then\n        for word in string.gmatch(txt,\
    \ \"%S+\") do\n            table.insert(words, word)\n        end\n    elseif\
    \ comma then\n        local word = \"\"\n        for char in string.gmatch(txt,\
    \ \".\") do\n            if char == \",\" then\n                table.insert(words,\
    \ word)\n                word = \"\"\n            else\n                word =\
    \ word .. char\n            end\n        end\n        table.insert(words, word)\n\
    \    else\n        local odd = 0\n        for char in string.gmatch(txt, \".\"\
    ) do\n            if string.byte(char) % 2 == 1 then\n                odd = odd\
    \ + 1\n            end\n        end\n        return odd\n    end\n    return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd0eed0a.lua:46:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmppd0eed0a.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ not txt then return -1 end\n    local words = {}\n    local cnt\n    cnt = string.gsub(txt,\
    \ \"[%s,]+\", function(w) table.insert(words, w) end)\n    if #words == 0 then\n\
    \        cnt = 0\n        for i = 1, #txt do\n            if txt:byte(i) - ord('a')\
    \ % 2 == 1 then\n                cnt = cnt + 1\n            end\n        end\n\
    \    end\n    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsvoxq0iu.lua:26:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmpsvoxq0iu.lua:26: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ write your code here\n    if string.find(txt,\"%s\") then\n    \treturn txt:gmatch(\"\
    %w+\")\n    elseif string.find(txt,\",\") then\n    \treturn txt:gmatch(\"%w+\"\
    )\n    else\n    \tlocal n = 0\n    \tfor c in txt:gmatch(\"%w\") do\n    \t\t\
    local a = c:byte() - ord('a')\n    \t\tif a % 2 == 1 then\n    \t\t\tn = n + 1\n\
    \    \t\tend\n    \tend\n    \treturn n\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp085br3m5.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55a8d36128e0\nstack traceback:\n\
    \t/tmp/tmp085br3m5.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local n = 1\n    local m = 1\n    for i = 1, #txt do\n     \
    \   if txt:sub(i, i) == ' ' then\n            words[n] = txt:sub(m, i-1)\n   \
    \         n = n + 1\n            m = i + 1\n        elseif txt:sub(i, i) == ','\
    \ then\n            words[n] = txt:sub(m, i-1)\n            n = n + 1\n      \
    \      m = i + 1\n        end\n    end\n    words[n] = txt:sub(m, #txt)\n    if\
    \ words[1] == nil then\n        local cnt = 0\n        for i = 1, #txt do\n  \
    \          if (txt:sub(i, i) ~= ',') and (txt:sub(i, i) ~= ' ') then\n       \
    \         local a = string.byte(txt:sub(i, i))\n                if (a >= string.byte('a'))\
    \ and (a <= string.byte('z')) then\n                    if (a % 2 == 1) then\n\
    \                        cnt = cnt + 1\n                    end\n            \
    \    end\n            end\n        end\n        return cnt\n    else\n       \
    \ return words\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiou_nsl2.lua:46:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpiou_nsl2.lua:46: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ result\n    if txt:find(\"%S\") then\n        result = txt:gmatch(\"%S+\")\n\
    \    elseif txt:find(\",\") then\n        result = txt:gmatch(\"%S+\")\n    else\n\
    \        local count = 0\n        for i = 1, #txt do\n            if (txt:byte(i)\
    \ - 0x61) % 2 == 1 then\n                count = count + 1\n            end\n\
    \        end\n        result = count\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttaar7pn.lua:28:\
    \ expected: {\"Hello\", \"world!\"}\nactual: function: 0x55e4d3bc2840\nstack traceback:\n\
    \t/tmp/tmpttaar7pn.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in txt:gmatch(\"%S+\") do\n        words[#words + 1]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ words = {}\n    for word in txt:gmatch(\"[^,]+\") do\n        words[#words +\
    \ 1] = word\n    end\n    if #words > 0 then\n        return words\n    end\n\
    \    local count = 0\n    for i=1,txt:len() do\n        local ch = txt:sub(i,i)\n\
    \        if ch:match(\"%l\") and i % 2 == 1 then\n            count = count +\
    \ 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu454xg5z.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpu454xg5z.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt == nil then\n        return nil\n    end\n    local whitespace_pattern =\
    \ '[%s]+'\n    local comma_pattern = '[,]+'\n    local words = string.gmatch(txt,\
    \ whitespace_pattern)\n    local chars = string.gmatch(txt, comma_pattern)\n \
    \   if words ~= nil then\n        local list = {}\n        for item in words do\n\
    \            table.insert(list, item)\n        end\n        return list\n    elseif\
    \ chars ~= nil then\n        local list = {}\n        for item in chars do\n \
    \           table.insert(list, item)\n        end\n        return list\n    else\n\
    \        local odd_chars = {}\n        for i = 1, #txt do\n            if string.byte(txt,\
    \ i) % 2 == 1 then\n                table.insert(odd_chars, string.byte(txt, i))\n\
    \            end\n        end\n        return #odd_chars\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4op7c6rr.lua:41:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\" \"}\nstack traceback:\n\t/tmp/tmp4op7c6rr.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ tbl = {}\n    local split_on = ' '\n    for word in string.gmatch(txt, '([^'\
    \ .. split_on .. ']+)') do\n        if word:match('[a-z]') then \n           \
    \ tbl[#tbl + 1] = word\n        end\n    end\n    if #tbl == 0 then\n        split_on\
    \ = ','\n        for word in string.gmatch(txt, '([^' .. split_on .. ']+)') do\n\
    \            if word:match('[a-z]') then \n                tbl[#tbl + 1] = word\n\
    \            end\n        end\n    end\n    if #tbl == 0 then\n        local count\
    \ = 0\n        for i = 1, #txt do\n            local ascii = string.byte(txt,\
    \ i)\n            if ascii >= 97 and ascii <= 122 then\n                if (ascii\
    \ - 96) % 2 == 1 then\n                    count = count + 1\n               \
    \ end\n            end\n        end\n        return count\n    end\n    return\
    \ tbl\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpabv7oq3u.lua:42:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpabv7oq3u.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = {}\n\t\n\tif txt == nil then\n\t\treturn {}\n\tend\n\t\n\tif string.find(txt,\
    \ ',') ~= nil then\n\t\twords = string.split(txt, ',')\n\telseif string.find(txt,\
    \ ' ') ~= nil then\n\t\twords = string.split(txt, ' ')\n\telse\n\t\treturn #string.gsub(txt,\
    \ '[^aeiouy]', '')\n\tend\n\t\n\treturn words\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplburtk5j.lua:17:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmplburtk5j.lua:17:\
    \ in local 'candidate'\n\t/tmp/tmplburtk5j.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1120fv2.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpz1120fv2.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    for\
    \ c in txt:gmatch('%s') do\n        return txt:split(c)\n    end\n    for c in\
    \ txt:gmatch(',') do\n        return txt:split(c)\n    end\n    local count =\
    \ 0\n    for i = 1, #txt do\n        local c = txt:sub(i, i)\n        local o\
    \ = c:byte() - string.byte('a')\n        if o % 2 == 1 then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0mubst_n.lua:9:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp0mubst_n.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp0mubst_n.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1120fv2.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpz1120fv2.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ split_list = {}\n    for word in string.gmatch(txt, '%S+') do\n        split_list[#split_list\
    \ + 1] = word\n    end\n    if #split_list == 0 then\n        for word in string.gmatch(txt,\
    \ '[^,]+') do\n            split_list[#split_list + 1] = word\n        end\n \
    \   end\n    if #split_list == 0 then\n        local letter_count = 0\n      \
    \  for word in string.gmatch(txt, '.') do\n            if word ~= ' ' and word\
    \ ~= ',' then\n                local number = string.byte(word) - string.byte('a')\n\
    \                if number % 2 == 1 then\n                    letter_count = letter_count\
    \ + 1\n                end\n            end\n        end\n        return letter_count\n\
    \    end\n    return split_list\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf608wq5q.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpf608wq5q.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  \nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vmm4eyk.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp_vmm4eyk.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ table.concat(split(txt, \" \"), \",\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw24u193u.lua:8:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpw24u193u.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpw24u193u.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ n = txt:match(' ')\n    if n then\n        local res = {}\n        for word\
    \ in txt:gmatch('%S+') do\n            table.insert(res, word)\n        end\n\
    \        return res\n    end\n    local n = txt:match(',')\n    if n then\n  \
    \      local res = {}\n        for word in txt:gmatch('[^,]+') do\n          \
    \  table.insert(res, word)\n        end\n        return res\n    end\n    local\
    \ cnt = 0\n    for i = 1, txt:len() do\n        local c = txt:sub(i, i)\n    \
    \    local n = c:byte() - ord('a')\n        if n % 2 == 1 then\n            cnt\
    \ = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvjwpudii.lua:27:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmpvjwpudii.lua:27:\
    \ in local 'candidate'\n\t/tmp/tmpvjwpudii.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local n = 0\n    for word in txt:gmatch(\"%w+\") do\n      \
    \  words[#words + 1] = word\n        n = n + 1\n    end\n    if n > 0 then\n \
    \       return words\n    end\n    n = 0\n    for c in txt:gmatch(\"%w\") do\n\
    \        if string.byte(c) - string.byte('a') % 2 == 1 then\n            n = n\
    \ + 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpye7va760.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpye7va760.lua:29: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ your code here\n    return (txt:gsub(\"%s\", \",\"):gsub(\"[^a-z,]\", \"\"):gsub(\"\
    ,\", function(...) return string.char(97 + (select(1, ...):len() % 2)) end))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdtxq_to8.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"ellobworld\"\nstack traceback:\n\
    \t/tmp/tmpdtxq_to8.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ string.find(txt, \",\") then\n        return string.split(txt, \",\")\n    elseif\
    \ string.find(txt, \" \") then\n        return string.split(txt, \" \")\n    else\n\
    \        local count = 0\n        for i = 1, #txt do\n            if string.byte(txt,\
    \ i) % 2 == 1 then\n                count = count + 1\n            end\n     \
    \   end\n        return count\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwknaivul.lua:11:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpwknaivul.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpwknaivul.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local w = \"\"\n    local flag = false\n    for i = 1, #txt\
    \ do\n        local ch = txt:sub(i, i)\n        if ch == \" \" or ch == \",\"\
    \ then\n            flag = true\n            words[#words + 1] = w\n         \
    \   w = \"\"\n        else\n            w = w .. ch\n        end\n    end\n  \
    \  if #w > 0 then\n        words[#words + 1] = w\n    end\n    if flag then\n\
    \        return words\n    else\n        local cnt = 0\n        for i = 1, #txt\
    \ do\n            local ch = txt:sub(i, i)\n            local idx = string.byte(ch)\
    \ - 97\n            if idx % 2 == 1 then\n                cnt = cnt + 1\n    \
    \        end\n        end\n        return cnt\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaerrtxx9.lua:44:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpaerrtxx9.lua:44: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ function ord(char)\n        return string.byte(char) - string.byte('a')\n  \
    \  end\n    local function is_odd(n)\n        return n % 2 == 1\n    end\n   \
    \ local function filter_odd(chars)\n        local indices = {}\n        for i,\
    \ char in ipairs(chars) do\n            if is_odd(ord(char)) then\n          \
    \      table.insert(indices, i)\n            end\n        end\n        return\
    \ indices\n    end\n    local function count_odd(chars)\n        return table.maxn(filter_odd(chars))\n\
    \    end\n    local function split_on_commas(txt)\n        local words = {}\n\
    \        for word in string.gmatch(txt, '([^,]+)') do\n            table.insert(words,\
    \ word)\n        end\n        return words\n    end\n    local function split_on_whitespace(txt)\n\
    \        local words = {}\n        for word in string.gmatch(txt, '([^%s]+)')\
    \ do\n            table.insert(words, word)\n        end\n        return words\n\
    \    end\n    if string.find(txt, ',') ~= nil then\n        return split_on_commas(txt)\n\
    \    elseif string.find(txt, '%s') ~= nil then\n        return split_on_whitespace(txt)\n\
    \    else\n        return count_odd(txt)\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp37nr81uj.lua:54:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello world\", \"!\"}\nstack\
    \ traceback:\n\t/tmp/tmp37nr81uj.lua:54: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tif txt:find(\"\
    %s\") then \n\t\tlocal words = {}\n\t\tfor word in txt:gmatch(\"%w+\") do\n\t\t\
    \ttable.insert(words, word)\n\t\tend\n\t\treturn words\n\telseif txt:find(\",\"\
    ) then\n\t\tlocal words = {}\n\t\tfor word in txt:gmatch(\"%w+\") do\n\t\t\ttable.insert(words,\
    \ word)\n\t\tend\n\t\treturn words\n\telse\n\t\tlocal sum = 0\n\t\tfor letter\
    \ in txt:gmatch(\"%w\") do\n\t\t\tlocal alpha_index = string.byte(letter:lower())\
    \ - string.byte(\"a\")\n\t\t\tif alpha_index % 2 == 1 then\n\t\t\t\tsum = sum\
    \ + 1\n\t\t\tend\n\t\tend\n\t\treturn sum\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf2g_ii5w.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpf2g_ii5w.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ i = 1\n\tlocal w = \"\"\n\tlocal words = {}\n\tlocal found_whitespace = false\n\
    \tlocal found_comma = false\n\twhile i <= #txt do\n\t\tlocal c = txt:sub(i,i)\n\
    \t\tif c == \" \" then\n\t\t\tif not found_whitespace then\n\t\t\t\twords[#words+1]\
    \ = w\n\t\t\t\tw = \"\"\n\t\t\t\tfound_whitespace = true\n\t\t\tend\n\t\telseif\
    \ c == \",\" then\n\t\t\tif not found_comma then\n\t\t\t\twords[#words+1] = w\n\
    \t\t\t\tw = \"\"\n\t\t\t\tfound_comma = true\n\t\t\tend\n\t\telse\n\t\t\tw = w\
    \ .. c\n\t\tend\n\t\ti = i + 1\n\tend\n\tif #w > 0 then\n\t\twords[#words+1] =\
    \ w\n\tend\n\tif #words > 0 then\n\t\treturn words\n\telse\n\t\tlocal odd_letters\
    \ = 0\n\t\tfor i = 1,26 do\n\t\t\tif i % 2 == 1 then\n\t\t\t\todd_letters = odd_letters\
    \ + txt:lower():gsub(string.char(i+ord('a')-1), \"\"):len()\n\t\t\tend\n\t\tend\n\
    \t\treturn odd_letters\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperx95zp3.lua:53:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmperx95zp3.lua:53: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: split_words\n    return nil\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkk81ocga.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpkk81ocga.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n   --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprwzmk3yd.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmprwzmk3yd.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = {}\n\tlocal match = txt:match('^%s+')\n\tif match then\n\t\tlocal w\
    \ = ''\n\t\tfor ch in txt:gmatch('%S+') do\n\t\t\tw = w .. ch\n\t\t\tif w:find('%s')\
    \ then\n\t\t\t\ttable.insert(words, w)\n\t\t\t\tw = ''\n\t\t\tend\n\t\tend\n\t\
    \treturn words\n\tend\n\tlocal match = txt:match('^%s+')\n\tif match then\n\t\t\
    return match\n\tend\n\tlocal count = 0\n\tfor ch in txt:gmatch('%a') do\n\t\t\
    if (string.byte(ch) - 96) % 2 == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeecn3ws9.lua:37:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 4\nstack traceback:\n\t/tmp/tmpeecn3ws9.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  -- TODO:\
    \ write code here\n  local whitespace = string.find(txt,\" \")\n  local comma\
    \ = string.find(txt,\",\")\n  if whitespace == nil and comma == nil then\n   \
    \ local lowertext = string.lower(txt)\n    local oddcount = 0\n    for i = 1,\
    \ string.len(lowertext) do\n      if i % 2 == 1 then\n        local a = string.byte(lowertext,i)\n\
    \        if a == 97 or a == 99 or a == 101 or a == 103 or a == 105 or a == 107\
    \ or a == 109 or a == 111 or a == 113 or a == 115 or a == 117 or a == 119 or a\
    \ == 121 or a == 123 then\n          oddcount = oddcount + 1\n        end\n  \
    \    end\n    end\n    return oddcount\n  elseif whitespace == nil then\n    local\
    \ t = {}\n    for i in string.gmatch(txt,\",\") do\n      table.insert(t,i)\n\
    \    end\n    return t\n  else\n    local t = {}\n    for i in string.gmatch(txt,\"\
    %S+\") do\n      table.insert(t,i)\n    end\n    return t\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmg08lia.lua:42:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\",\"}\nstack traceback:\n\t/tmp/tmpjmg08lia.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ string.find(txt, \" \") ~= nil then\n        local ret = {}\n        for word\
    \ in string.gmatch(txt, \"%S+\") do\n            table.insert(ret, word)\n   \
    \     end\n        return ret\n    elseif string.find(txt, \",\") ~= nil then\n\
    \        local ret = {}\n        for word in string.gmatch(txt, \"%a+\") do\n\
    \            table.insert(ret, word)\n        end\n        return ret\n    else\n\
    \        local total = 0\n        for c in string.gmatch(txt, \"%a\") do\n   \
    \         if (string.byte(c) - string.byte('a')) % 2 == 1 then\n             \
    \   total = total + 1\n            end\n        end\n        return total\n  \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjnxxxcd.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpsjnxxxcd.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  if not\
    \ txt then return nil end\n  local words = {}\n  local i = 1\n  local j = string.find(txt,\
    \ \" \")\n  local comma = string.find(txt, \",\")\n  if j then\n    while j do\n\
    \      words[i] = string.sub(txt, 1, j-1)\n      txt = string.sub(txt, j+1)\n\
    \      i = i + 1\n      j = string.find(txt, \" \")\n    end\n    if txt ~= \"\
    \" then words[i] = txt end\n  elseif comma then\n    while comma do\n      words[i]\
    \ = string.sub(txt, 1, comma-1)\n      txt = string.sub(txt, comma+1)\n      i\
    \ = i + 1\n      comma = string.find(txt, \",\")\n    end\n    if txt ~= \"\"\
    \ then words[i] = txt end\n  else\n    local num = 0\n    for k=1, #txt do\n \
    \     local c = string.sub(txt, k, k)\n      local ord = string.byte(c)\n    \
    \  if ord > 96 and ord < 123 and ord % 2 == 1 then\n        num = num + 1\n  \
    \    end\n    end\n    return num\n  end\n  return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl2byz6g3.lua:51:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpl2byz6g3.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ txt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjtsm92b5.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmpjtsm92b5.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ res = {}\n\tlocal w = txt:gmatch(\"%w+\")\n\tif w() then\n\t\tfor word in w\
    \ do\n\t\t\tres[#res+1] = word\n\t\tend\n\t\treturn res\n\tend\n\tw = txt:gmatch(\"\
    %S+\")\n\tif w() then\n\t\tfor word in w do\n\t\t\tres[#res+1] = word\n\t\tend\n\
    \t\treturn res\n\tend\n\tlocal res = 0\n\tfor i = 1,#txt do\n\t\tif txt:sub(i,i):match(\"\
    %l\") and i%2 == 1 then\n\t\t\tres = res + 1\n\t\tend\n\tend\n\treturn res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvggrsvp7.lua:35:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"world\"}\nstack traceback:\n\t\
    /tmp/tmpvggrsvp7.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = regex_match(txt, \"%S+\")\n  if words then return words end\n  local\
    \ words = regex_match(txt, \"[^,]+\")\n  if words then return words end\n  return\
    \ string.lower(txt):gsub(\"[^a-z]\", \"\"):len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz_hg1wuf.lua:8:\
    \ attempt to call a nil value (global 'regex_match')\nstack traceback:\n\t/tmp/tmpz_hg1wuf.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpz_hg1wuf.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = string.gmatch(txt, '%w+')\n    local ret = {}\n    for w in words do\n\
    \        table.insert(ret, w)\n    end\n    if #ret == 0 then\n        local letters\
    \ = string.gmatch(txt, '%w')\n        for l in letters do\n            table.insert(ret,\
    \ l)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxcon245n.lua:25:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpxcon245n.lua:25: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tif txt\
    \ == nil then return nil end\n\tlocal words = {}\n\tlocal index = 0\n\tfor w in\
    \ string.gmatch(txt, \"%S+\") do\n\t\twords[index] = w\n\t\tindex = index + 1\n\
    \tend\n\tif index == 0 then\n\t\tfor w in string.gmatch(txt, \"[a-z]+\") do\n\t\
    \t\twords[index] = w\n\t\t\tindex = index + 1\n\t\tend\n\tend\n\tif index == 0\
    \ then\n\t\tlocal odd = 0\n\t\tfor i = 1, string.len(txt) do\n\t\t\tlocal ch =\
    \ string.byte(txt, i)\n\t\t\tif ch >= string.byte('a') and ch <= string.byte('z')\
    \ then\n\t\t\t\tif (ch - string.byte('a')) % 2 == 1 then\n\t\t\t\t\todd = odd\
    \ + 1\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\treturn odd\n\tend\n\treturn words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xj1dmzi.lua:39:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {0=\"Hello\", \"world!\"}\nstack\
    \ traceback:\n\t/tmp/tmp6xj1dmzi.lua:39: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ sep = ' '\n  local sep2 = ','\n  local sep3 = \"'\"\n  local words = {}\n  local\
    \ pattern = string.format(\"([^%s]+)\", sep)\n  local pattern2 = string.format(\"\
    ([^%s]+)\", sep2)\n  local pattern3 = string.format(\"([^%s]+)\", sep3)\n  txt:gsub(pattern,\
    \ function(c) words[#words+1] = c end)\n  txt:gsub(pattern2, function(c) words[#words+1]\
    \ = c end)\n  txt:gsub(pattern3, function(c) words[#words+1] = c end)\n  if #words\
    \ == 0 then\n    local count = 0\n    for i = 1,#txt do\n      if txt:byte(i)%2\
    \ == 1 then\n        count = count + 1\n      end\n    end\n    return count\n\
    \  else\n    return words\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9uf0llfk.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world!\", \"Hello world!\"\
    , \"Hello world!\"}\nstack traceback:\n\t/tmp/tmp9uf0llfk.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\" \") then\n        local words = {}\n        for word in txt:gmatch(\"\
    ([^ ]+)\") do\n            table.insert(words, word)\n        end\n        return\
    \ words\n    elseif txt:find(\",\") then\n        local words = {}\n        for\
    \ word in txt:gmatch(\"([^,]+)\") do\n            table.insert(words, word)\n\
    \        end\n        return words\n    else\n        local sum = 0\n        for\
    \ i = 1, #txt do\n            local c = txt:sub(i, i)\n            if (c:byte()\
    \ % 2) == 1 then\n                sum = sum + 1\n            end\n        end\n\
    \        return sum\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfl3islo.lua:40:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpwfl3islo.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: write code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdc92_h1a.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpdc92_h1a.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  if txt:find(\"\
    \ \") then\n    return split(txt, \" \")\n  elseif txt:find(\",\") then\n    return\
    \ split(txt, \",\")\n  else\n    local counter = 0\n    for i = 1, txt:len() do\n\
    \      if txt:byte(i) % 2 == 1 then\n        counter = counter + 1\n      end\n\
    \    end\n    return counter\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsppx7ymu.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpsppx7ymu.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpsppx7ymu.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local last_start = 1\n    local word_index = 1\n    local word_length\
    \ = 0\n    local is_last_char_space = false\n    for i = 1, #txt do\n        local\
    \ char = txt:sub(i, i)\n        local is_space = char == ' '\n        local is_end\
    \ = i == #txt\n        if is_space or is_end then\n            if word_length\
    \ > 0 then\n                words[word_index] = txt:sub(last_start, i)\n     \
    \           word_index = word_index + 1\n                word_length = 0\n   \
    \         end\n            last_start = i + 1\n        else\n            word_length\
    \ = word_length + 1\n        end\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nr5x7d8.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello \", \"world!\"}\nstack traceback:\n\
    \t/tmp/tmp8nr5x7d8.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local fpat = \"(.-)%s*([^%s]+)\"\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1r0i8n0e.lua:24: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ idx = string.find(txt, \"%s\")\n  if idx then\n    local n = {}\n    for i in\
    \ string.gmatch(txt, \"%S+\") do\n      n[#n+1] = i\n    end\n    return n\n \
    \ else\n    idx = string.find(txt, \",\")\n    if idx then\n      local n = {}\n\
    \      for i in string.gmatch(txt, \"[^,]+\") do\n        n[#n+1] = i\n      end\n\
    \      return n\n    else\n      local s = 0\n      for i = 1, string.len(txt)\
    \ do\n        local c = string.sub(txt, i, i)\n        local o = string.byte(c)\
    \ - 97\n        if o % 2 == 1 then\n          s = s + 1\n        end\n      end\n\
    \      return s\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms6cr2m8.lua:46:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpms6cr2m8.lua:46: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = txt:split(\"%s+\")\n  if #words == 1 then\n    local words2 = txt:split(\"\
    ,\")\n    if #words2 == 1 then\n      local i = 0\n      for c in txt:gmatch(\"\
    .\") do\n        i = i + 1\n        if i % 2 == 1 and (c >= 'a' and c <= 'z')\
    \ then\n          return 1\n        end\n      end\n      return 0\n    else\n\
    \      return words2\n    end\n  else\n    return words\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_0ze9be6.lua:8:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmp_0ze9be6.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp_0ze9be6.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: write me!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxtyx5i44.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpxtyx5i44.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:split()\n    if words[1] == nil then\n        words = txt:split(',')\n\
    \        if words[1] == nil then\n            return txt:gsub('%W', ''):len()\n\
    \        end\n    end\n    return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk3hjn_uc.lua:8:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpk3hjn_uc.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpk3hjn_uc.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ chk=1\n  for i=1,#txt do\n    if txt:sub(i,i)==' ' then\n      chk=2\n    end\n\
    \    if txt:sub(i,i)==',' then\n      chk=3\n    end\n  end\n  if chk==1 then\n\
    \    local ret=0\n    for i=1,#txt do\n      if string.byte(txt:sub(i,i))-96<0\
    \ then\n        else\n          ret=ret+1\n      end\n    end\n    return ret\n\
    \  end\n  if chk==2 then\n    local ret={}\n    local word\n    for word in txt:gmatch(\"\
    %w+\") do\n      table.insert(ret,word)\n    end\n    return ret\n  end\n  if\
    \ chk==3 then\n    local ret={}\n    local word\n    for word in txt:gmatch(\"\
    [^,]+\") do\n      table.insert(ret,word)\n    end\n    return ret\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8gbujz2o.lua:48:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmp8gbujz2o.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    if txt:find(\" \") then\n        -- Split on whitespace\n  \
    \      for w in txt:gmatch(\"%S+\") do\n            words[#words + 1] = w\n  \
    \      end\n    elseif txt:find(\",\") then\n        -- Split on commas\n    \
    \    for w in txt:gmatch(\"[^,]+\") do\n            words[#words + 1] = w\n  \
    \      end\n    else\n        -- Count odd position chars and return the number\n\
    \        local sum = 0\n        for c in txt:gmatch(\"%a\") do\n            if\
    \ c:byte() % 2 == 1 then\n                sum = sum + 1\n            end\n   \
    \     end\n        return sum\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqrwc34_.lua:40:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmphqrwc34_.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  for word in txt:gmatch(\"%S+\") do\n    words[#words + 1] = word\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoyr1cfjj.lua:19:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpoyr1cfjj.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppxowwyhn.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmppxowwyhn.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  return\
    \ txt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit0lqq62.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmpit0lqq62.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ split = nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6s3_njdq.lua:23: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  -- \n\
    \  if txt == nil then return nil end\n  local result, count, s = {}\n  count =\
    \ txt:gsub(\"%s+\", function(s) table.insert(result, s) end)\n  if count > 0 then\
    \ return result end\n  count = txt:gsub(\",\", function(s) table.insert(result,\
    \ s) end)\n  if count > 0 then return result end\n  for c in txt:gmatch\".\" do\n\
    \    s = c:byte() - string.byte('a')\n    if s % 2 == 1 then count = count + 1\
    \ end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp68pnr2jy.lua:12:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmp68pnr2jy.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmp68pnr2jy.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70ip2yc9.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"\"\nstack traceback:\n\t/tmp/tmp70ip2yc9.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  return\
    \ txt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpit0lqq62.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmpit0lqq62.lua:14: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n   local\
    \ ans = {}\n   local comma = txt:find(',')\n   if comma then\n      for w in txt:gmatch('([^,]+)')\
    \ do\n         table.insert(ans, w)\n      end\n   else\n      for w in txt:gmatch('([^%s]+)')\
    \ do\n         table.insert(ans, w)\n      end\n   end\n   if #ans == 0 then\n\
    \      local ret = 0\n      for c in txt:gmatch('([a-z])') do\n         local\
    \ o = c:byte() - 96\n         if o % 2 == 1 then\n            ret = ret + 1\n\
    \         end\n      end\n      return ret\n   end\n   return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb3onuub4.lua:37:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello world\", \"!\"}\nstack\
    \ traceback:\n\t/tmp/tmpb3onuub4.lua:37: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt == nil then return 0 end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp72pcxg9t.lua:23: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ Compute output here\n    -- ...\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9hsaujo.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpc9hsaujo.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  -- your\
    \ code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24jhpxo2.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp24jhpxo2.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ whitespace = string.find(txt, '%s')\n    local comma = string.find(txt, ',')\n\
    \    if whitespace then\n        return split(txt, '%s')\n    elseif comma then\n\
    \        return split(txt, ',')\n    else\n        local count = 0\n        for\
    \ i = 1, #txt do\n            if txt:byte(i) - 96 % 2 == 1 then\n            \
    \    count = count + 1\n            end\n        end\n        return count\n \
    \   end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqcttbp1y.lua:11:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpqcttbp1y.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpqcttbp1y.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    for\
    \ i = 1, #txt do\n        if txt:byte(i) == 32 then\n            return txt:match(\"\
    (%w+)%s+(%w+)\")\n        elseif txt:byte(i) == 44 then\n            return txt:match(\"\
    (%w+),(%w+)\")\n        else\n            txt = txt:lower()\n            local\
    \ odd = 0\n            for i = 1, #txt do\n                if txt:byte(i) % 2\
    \ == 1 then\n                    odd = odd + 1\n                end\n        \
    \    end\n            return odd\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpomj0gpvl.lua:29:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 5\nstack traceback:\n\t/tmp/tmpomj0gpvl.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ function odd_order_count(s)\n        local count = 0\n        for c in s:gmatch(\"\
    .\") do\n            if c:lower() ~= c:upper() and c:lower():byte() % 2 == 1 then\n\
    \                count = count + 1\n            end\n        end\n        return\
    \ count\n    end\n    if txt:find(\"%s\") then\n        return txt:split()\n \
    \   elseif txt:find(\",\") then\n        return txt:split(\",\")\n    else\n \
    \       return odd_order_count(txt)\n    end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps_q6cofw.lua:18:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmps_q6cofw.lua:18:\
    \ in local 'candidate'\n\t/tmp/tmps_q6cofw.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local word = ''\n  for i=1,#txt do\n    local c = txt:sub(i,i)\n\
    \    if c == ' ' then\n      words[#words+1] = word\n      word = ''\n    elseif\
    \ c == ',' then\n      words[#words+1] = word\n      return words\n    else\n\
    \      word = word .. c\n    end\n  end\n  words[#words+1] = word\n  if #words\
    \ > 0 then\n    return words\n  else\n    local ct = 0\n    for i=1,#txt do\n\
    \      local c = txt:sub(i,i)\n      if (c:byte() >= 97) and (c:byte() <= 122)\
    \ and (c:byte() % 2 ~= 0) then\n        ct = ct + 1\n      end\n    end\n    return\
    \ ct\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpippq3h1c.lua:41:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\"}\nstack traceback:\n\t\
    /tmp/tmpippq3h1c.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  return\
    \ (1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6lvgctl.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: 1\nstack traceback:\n\t/tmp/tmps6lvgctl.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ spaces,commans = txt:find(\"%s\"),txt:find(\",\")\n    if spaces then \n   \
    \     local parts = {}\n        for word in txt:gmatch(\"[^%s]+\") do\n      \
    \      table.insert(parts,word)\n        end\n        return parts\n    elseif\
    \ commans then\n        local parts = {}\n        for word in txt:gmatch(\"[^,]+\"\
    ) do\n            table.insert(parts,word)\n        end\n        return parts\n\
    \    else\n        return txt:lower():gsub(\".\",\"\"):len()\n    end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuxrbecea.lua:33:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpuxrbecea.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes455spk.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpes455spk.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ parts = {}\n\tif not txt:find(\"%s\") then\n\t\tif not txt:find(\",\") then\n\
    \t\t\treturn txt:len()\n\t\telse\n\t\t\tparts = txt:split(\",\")\n\t\tend\n\t\
    else\n\t\tparts = txt:split(\"%s\")\n\tend\n\tfor i, v in ipairs(parts) do\n\t\
    \tparts[i] = tonumber(v) or v\n\tend\n\treturn parts\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk9gp02w_.lua:16:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpk9gp02w_.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpk9gp02w_.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local i = 1\n    for word in string.gmatch(txt, \"[^,%s]+\"\
    ) do\n        words[i] = word\n        i = i + 1\n    end\n    if #words == 0\
    \ then\n        local n = 0\n        for c in string.gmatch(txt, \"[a-z]\") do\n\
    \            local d = string.byte(c) - 97\n            if d % 2 == 1 then\n \
    \               n = n + 1\n            end\n        end\n        return n\n  \
    \  end\n    return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuarf_oy0.lua:32:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmpuarf_oy0.lua:32: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ result = {}\n  for w in txt:gmatch(\"%S+\") do\n    result[#result + 1] = w\n\
    \  end\n  if #result == 0 then\n    for w in txt:gmatch(\"[^,]+\") do\n      result[#result\
    \ + 1] = w\n    end\n  end\n  if #result == 0 then\n    for w in txt:gmatch(\"\
    .\") do\n      if w:lower() ~= w then\n        error(\"Invalid word: \" .. w)\n\
    \      end\n      if (string.byte(w) - string.byte('a')) % 2 == 1 then\n     \
    \   result[#result + 1] = w\n      end\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ynuu96e.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp1ynuu96e.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  -- Your\
    \ code here\n  local result = {}\n  if txt:find(' ') == nil then\n    local count\
    \ = 0\n    local tmp = txt:lower()\n    for i = 1, #tmp do\n      if (ord(tmp:sub(i,\
    \ i)) % 2) == 1 then\n        count = count + 1\n      end\n    end\n    return\
    \ count\n  else\n    return txt:split(' ')\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgoxln3mx.lua:20:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpgoxln3mx.lua:20:\
    \ in local 'candidate'\n\t/tmp/tmpgoxln3mx.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\treturn\
    \ \"\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_hyb5t2.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"\"\nstack traceback:\n\t/tmp/tmps_hyb5t2.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  for\
    \ i=1,#txt do\n    if txt:sub(i,i) == ' ' then\n      local words = {}\n     \
    \ local word = \"\"\n      for j=1,#txt do\n        if txt:sub(j,j) == ' ' then\n\
    \          words[#words+1] = word\n          word = \"\"\n        else\n     \
    \     word = word .. txt:sub(j,j)\n        end\n      end\n      words[#words+1]\
    \ = word\n      return words\n    end\n  end\n  for i=1,#txt do\n    if txt:sub(i,i)\
    \ == ',' then\n      local words = {}\n      local word = \"\"\n      for j=1,#txt\
    \ do\n        if txt:sub(j,j) == ',' then\n          words[#words+1] = word\n\
    \          word = \"\"\n        else\n          word = word .. txt:sub(j,j)\n\
    \        end\n      end\n      words[#words+1] = word\n      return words\n  \
    \  end\n  end\n  local n = 0\n  for i=1,#txt do\n    if txt:sub(i,i) ~= 'a' and\
    \ txt:sub(i,i) ~= 'e' and txt:sub(i,i) ~= 'i' and txt:sub(i,i) ~= 'o' and txt:sub(i,i)\
    \ ~= 'u' then\n      n = n + 1\n    end\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfwnghso.lua:56:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmpcfwnghso.lua:56: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ -1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg465yuzn.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: -1\nstack traceback:\n\t/tmp/tmpg465yuzn.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = { txt:match((txt:gsub(\"[^%s]+\", \"(%s*)%1\"))) }\n\tlocal pos = 1\n\
    \tfor i = 1, #words do\n\t\tif words[i] ~= '' then\n\t\t\twords[pos] = words[i]\n\
    \t\t\tpos = pos + 1\n\t\tend\n\tend\n\tif pos == 1 then\n\t\twords = {}\n\t\t\
    words[1] = txt:match(\"^[^,]+\")\n\t\tif words[1] == nil then\n\t\t\tlocal res\
    \ = 0\n\t\t\tfor i = 1, txt:len() do\n\t\t\t\tif i % 2 == 1 then\n\t\t\t\t\tres\
    \ = res + txt:sub(i, i):byte(1) - 97\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn res\n\
    \t\tend\n\tend\n\treturn words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp86xgb1_r.lua:8:\
    \ invalid use of '%' in replacement string\nstack traceback:\n\t/tmp/tmp86xgb1_r.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp86xgb1_r.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in string.gmatch(txt, \"[%a]+\") do\n        words[#words\
    \ + 1] = word\n    end\n    local num_words = #words\n    if num_words > 0 then\n\
    \        return words\n    end\n    local words = {}\n    for word in string.gmatch(txt,\
    \ \"[^,]+\") do\n        words[#words + 1] = word\n    end\n    local num_words\
    \ = #words\n    if num_words > 0 then\n        return words\n    end\n    local\
    \ count = 0\n    for c in string.gmatch(txt, \".\") do\n        if (string.byte(c)\
    \ - string.byte('a')) % 2 == 1 then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydyj0cl2.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpydyj0cl2.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in string.gmatch(txt, \"([^ ]+)\") do\n        words[#words\
    \ + 1] = word\n    end\n    if #words > 0 then\n        return words\n    end\n\
    \    words = {}\n    for word in string.gmatch(txt, \"([^,]+)\") do\n        words[#words\
    \ + 1] = word\n    end\n    if #words > 0 then\n        return words\n    end\n\
    \    local count = 0\n    for i = 1, #txt do\n        local c = string.byte(txt,\
    \ i) - string.byte('a')\n        if c % 2 == 1 then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4zo931u.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpc4zo931u.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word_start, word_end = 0, 0\n    while word_end < #txt\
    \ do\n        while word_end < #txt and txt:sub(word_end + 1, word_end + 1):match(\"\
    %s\") do\n            word_end = word_end + 1\n        end\n        word_start\
    \ = word_end + 1\n        while word_end < #txt and not txt:sub(word_end + 1,\
    \ word_end + 1):match(\"%s\") do\n            word_end = word_end + 1\n      \
    \  end\n        if word_start <= word_end then\n            words[#words + 1]\
    \ = txt:sub(word_start, word_end)\n        end\n    end\n    if #words == 0 then\n\
    \        words = {}\n        word_start, word_end = 0, 0\n        while word_end\
    \ < #txt do\n            while word_end < #txt and txt:sub(word_end + 1, word_end\
    \ + 1):match(\",\") do\n                word_end = word_end + 1\n            end\n\
    \            word_start = word_end + 1\n            while word_end < #txt and\
    \ not txt:sub(word_end + 1, word_end + 1):match(\",\") do\n                word_end\
    \ = word_end + 1\n            end\n            if word_start <= word_end then\n\
    \                words[#words + 1] = txt:sub(word_start, word_end)\n         \
    \   end\n        end\n    end\n    if #words == 0 then\n        return txt:gsub(\"\
    [^a-z]\", \"\"):len()\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd3oh0u6g.lua:48:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpd3oh0u6g.lua:48: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ lst = {}\n    for w in string.gmatch(txt, \"%w+\") do\n        lst[#lst + 1]\
    \ = w\n    end\n    local count = #lst\n    if count > 0 then return lst end\n\
    \    lst = {}\n    for w in string.gmatch(txt, \"%w+,%w+\") do\n        lst[#lst\
    \ + 1] = w\n    end\n    count = #lst\n    if count > 0 then return lst end\n\
    \    count = 0\n    for i = 1, #txt do\n        local s = string.byte(txt, i)\n\
    \        if s >= string.byte('a') and s <= string.byte('z') and s % 2 == 1 then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy6u062rb.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpy6u062rb.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in string.gmatch(txt, \"[^%s]+\") do\n        words[#words\
    \ + 1] = word\n    end\n    if #words > 0 then\n        return words\n    end\n\
    \    words = {}\n    for word in string.gmatch(txt, \"[^,]+\") do\n        words[#words\
    \ + 1] = word\n    end\n    if #words > 0 then\n        return words\n    end\n\
    \    local odd_count = 0\n    for letter in string.gmatch(txt, \".\") do\n   \
    \     local i = string.byte(letter) - 97\n        if i % 2 == 0 then\n       \
    \     odd_count = odd_count + 1\n        end\n    end\n    return odd_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vm9b6vd.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp2vm9b6vd.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes455spk.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpes455spk.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823712
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = stringx.split(txt, \" \")\n    if #words > 1 then\n        return words\n\
    \    end\n    local words = stringx.split(txt, \",\")\n    if #words > 1 then\n\
    \        return words\n    end\n    local cnt = 0\n    for i = 1, string.len(txt)\
    \ do\n        local char = string.sub(txt, i, i)\n        local code = string.byte(char)\n\
    \        if code >= 97 and code <= 122 and (code % 2 == 1) then\n            cnt\
    \ = cnt + 1\n        end\n    end\n    return cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpabicotm_.lua:8:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmpabicotm_.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpabicotm_.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\" \") then\n        return string.split(txt, \" \")\n    elseif txt:find(\"\
    ,\") then\n        return string.split(txt, \",\")\n    else\n        local sum\
    \ = 0\n        for ch in txt:gmatch(\".\") do\n            local ch = string.byte(ch)\
    \ - 96\n            if ch % 2 == 1 then\n                sum = sum + 1\n     \
    \       end\n        end\n        return sum\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxs2v_pa_.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpxs2v_pa_.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpxs2v_pa_.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local spaces = {}\n  local commas = {}\n  local i = 1\n  while\
    \ i <= #txt do\n    local c = txt:sub(i,i)\n    if c == ' ' then\n      spaces[#spaces+1]\
    \ = i\n    elseif c == ',' then\n      commas[#commas+1] = i\n    end\n    i =\
    \ i + 1\n  end\n  local indices = spaces\n  if #indices == 0 then\n    indices\
    \ = commas\n  end\n  if #indices == 0 then\n    -- Count the number of lower-case\
    \ letters with odd order in the alphabet\n    return math.floor(#txt/2) + 1\n\
    \  end\n  -- Split on the whitespaces or commas\n  for i = 1, #indices do\n  \
    \  words[i] = txt:sub(i, indices[i] - 1)\n  end\n  words[#indices+1] = txt:sub(indices[#indices]+1)\n\
    \  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8n44yuac.lua:44:\
    \ expected: 3, actual: 4\nstack traceback:\n\t/tmp/tmp8n44yuac.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ Write your code here\n    local split = string.gmatch(txt, \"%S+\")\n    if\
    \ #split == 0 then\n        split = string.gmatch(txt, \"%S+\")\n        if #split\
    \ == 0 then\n            local odd = 0\n            for i = 1, #txt do\n     \
    \           local c = string.byte(txt, i)\n                if c >= 97 and c <=\
    \ 122 then\n                    if i % 2 == 1 then\n                        odd\
    \ = odd + 1\n                    end\n                end\n            end\n \
    \           return odd\n        end\n    end\n    local words = {}\n    for w\
    \ in split do\n        table.insert(words, w)\n    end\n    return words\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgv5y9072.lua:10:\
    \ attempt to get length of a function value (local 'split')\nstack traceback:\n\
    \t/tmp/tmpgv5y9072.lua:10: in local 'candidate'\n\t/tmp/tmpgv5y9072.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  -- implement\
    \ your function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_4r5fpv.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpo_4r5fpv.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  local count = 0\n  local split = ','\n  if txt:find(' ') then\n\
    \    split = ' '\n  end\n  for w in txt:gmatch('[^'..split..']+') do\n    table.insert(words,\
    \ w)\n  end\n  if #words == 0 then\n    for i = 1, #txt do\n      if string.byte(txt,\
    \ i) % 2 == 1 then\n        count = count + 1\n      end\n    end\n    table.insert(words,\
    \ count)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9mw2mdqd.lua:35:\
    \ expected: 3, actual: {\"abcdef\"}\nstack traceback:\n\t/tmp/tmp9mw2mdqd.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ res = {}\n    local idx, len, prev_idx = 1, #txt, 1\n    while idx <= len do\n\
    \        local c = txt:sub(idx, idx)\n        if c == ' ' or c == ',' then\n \
    \           if idx > prev_idx then\n                table.insert(res, txt:sub(prev_idx,\
    \ idx - 1))\n            end\n            prev_idx = idx + 1\n        end\n  \
    \      idx = idx + 1\n    end\n    if prev_idx <= len then\n        table.insert(res,\
    \ txt:sub(prev_idx, len))\n    end\n    if #res == 0 then\n        local odd_cnt\
    \ = 0\n        for idx = 1, len do\n            local c = txt:sub(idx, idx)\n\
    \            local c_idx = string.byte(c) - string.byte('a')\n            if c_idx\
    \ % 2 == 1 then\n                odd_cnt = odd_cnt + 1\n            end\n    \
    \    end\n        return odd_cnt\n    end\n    return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0bym3u1m.lua:42:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp0bym3u1m.lua:42: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ res = {}\n\tif string.find(txt, \"%s\") then\n\t\tfor word in string.gmatch(txt,\
    \ \"[^%s]+\") do\n\t\t\ttable.insert(res, word)\n\t\tend\n\telseif string.find(txt,\
    \ \",\") then\n\t\tfor word in string.gmatch(txt, \"[^,]+\") do\n\t\t\ttable.insert(res,\
    \ word)\n\t\tend\n\telse\n\t\tlocal count = 0\n\t\tfor i = 1, #txt do\n\t\t\t\
    if string.byte(txt, i) % 2 == 1 then\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\
    \tend\n\t\tres = count\n\tend\n\treturn res\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc51isrs6.lua:37:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpc51isrs6.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  if string.find(txt,\",\") then\n    for w in string.gmatch(txt,\"\
    ([^,]+)\") do\n      table.insert(words,w)\n    end\n  elseif string.find(txt,\"\
    \ \") then\n    for w in string.gmatch(txt,\"([^ ]+)\") do\n      table.insert(words,w)\n\
    \    end\n  else\n    local sum = 0\n    for l in string.gmatch(txt,\".\") do\n\
    \      local c = string.byte(l)\n      local idx = c - string.byte(\"a\")\n  \
    \    if idx % 2 == 1 then\n        sum = sum + 1\n      end\n    end\n    return\
    \ sum\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3rk7v94.lua:36:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello world\", \"!\"}\nstack\
    \ traceback:\n\t/tmp/tmph3rk7v94.lua:36: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyii82_3.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpmyii82_3.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    for word in string.gmatch(txt, \"[^ ]+\") do\n        words[#words\
    \ + 1] = word\n    end\n    if #words == 0 then\n        local letters = 0\n \
    \       for letter in string.gmatch(txt, \"[^,]+\") do\n            letters =\
    \ letters + 1\n        end\n        if letters == 0 then\n            local alphabet\
    \ = 0\n            for _ in string.gmatch(txt, \"[^ ]+\") do\n               \
    \ alphabet = alphabet + 1\n            end\n            return alphabet % 2\n\
    \        end\n        return letters\n    end\n    return words\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqp9rfjxs.lua:33:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpqp9rfjxs.lua:33: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    assert(txt\
    \ == nil or type(txt) == \"string\", \"the text must be a string\")\n    local\
    \ result = {}\n    -- YOUR CODE GOES HERE\n    local words = {}\n    if string.find(txt,\
    \ \"%s\") then\n        words = string.split(txt, \"%s\")\n    elseif string.find(txt,\
    \ \",\") then\n        words = string.split(txt, \",\")\n    else\n        local\
    \ count = 0\n        for char in string.gmatch(txt, \".\") do\n            if\
    \ string.byte(char) % 2 == 1 then\n                count = count + 1\n       \
    \     end\n        end\n        words = {count}\n    end\n    for _, word in ipairs(words)\
    \ do\n        table.insert(result, word)\n    end\n    return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpis09dxh8.lua:13:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpis09dxh8.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmpis09dxh8.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ function cmp(a, b)\n    return a[1] < b[1]\n  end\n  local function split_on_commas(txt)\n\
    \    local words = {}\n    local _, count = txt:gsub(\",\", \",\")\n    if count\
    \ == 0 then return txt:lower() end\n    for x in txt:gmatch(\"[^,]+\") do table.insert(words,\
    \ x) end\n    return words\n  end\n  local function count_lower_case_odd_order(txt)\n\
    \    local tbl = {}\n    for c in txt:gmatch(\".\") do tbl[c] = c end\n    local\
    \ count = 0\n    for k,v in tbl do\n      if v:lower() == v and k % 2 == 1 then\
    \ count = count + 1 end\n    end\n    return count\n  end\n  local function words_are_numbers(lst)\n\
    \    for _, v in ipairs(lst) do\n      if not tonumber(v) then return false end\n\
    \    end\n    return true\n  end\n  local function sort_words(lst)\n    table.sort(lst,\
    \ cmp)\n    return lst\n  end\n  local function flatten(arr)\n    local ret =\
    \ {}\n    for _, v in ipairs(arr) do\n      for _, v2 in ipairs(v) do\n      \
    \  table.insert(ret, v2)\n      end\n    end\n    return ret\n  end\n  local function\
    \ flatten_if_all_numbers(lst)\n    if words_are_numbers(lst) then return {table.concat(lst,\
    \ \"\")} end\n    return lst\n  end\n  local function split_on_whitespace(txt)\n\
    \    local words = {}\n    local _, count = txt:gsub(\"%s+\", \" \")\n    if count\
    \ == 0 then return split_on_commas(txt) end\n    for x in txt:gmatch(\"[^%s]+\"\
    ) do table.insert(words, x) end\n    return words\n  end\n  local words = split_on_whitespace(txt)\n\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg6swe4_6.lua:73: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ found_whitespace = false\n    local found_comma = false\n    local words = {}\n\
    \    local word = \"\"\n    for i=1, #txt do\n        local char = txt:sub(i,i)\n\
    \        if char == \" \" or char == \"\\t\" or char == \"\\n\" then\n       \
    \     if not found_whitespace then\n                if #word > 0 then\n      \
    \              table.insert(words, word)\n                    word = \"\"\n  \
    \              end\n                found_whitespace = true\n            end\n\
    \        elseif char == \",\" then\n            if not found_comma then\n    \
    \            if #word > 0 then\n                    table.insert(words, word)\n\
    \                    word = \"\"\n                end\n                found_comma\
    \ = true\n            end\n        else\n            word = word .. char\n   \
    \         found_whitespace = false\n            found_comma = false\n        end\n\
    \    end\n    if #word > 0 then\n        table.insert(words, word)\n    end\n\
    \    if found_whitespace then\n        return words\n    elseif found_comma then\n\
    \        return #words\n    else\n        local odd_count = 0\n        for i=1,\
    \ #words do\n            if ord(words[i]) % 2 == 1 then\n                odd_count\
    \ = odd_count + 1\n            end\n        end\n        return odd_count\n  \
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2wo_o1_x.lua:46:\
    \ attempt to call a nil value (global 'ord')\nstack traceback:\n\t/tmp/tmp2wo_o1_x.lua:46:\
    \ in local 'candidate'\n\t/tmp/tmp2wo_o1_x.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words = {}\n  -- For each word\n  for word in txt:gmatch(\"%w+\") do\n    words[#words\
    \ + 1] = word\n  end\n  -- If there are no words we have to split by commas\n\
    \  if #words == 0 then\n    for word in txt:gmatch(\"[^,]+\") do\n      words[#words\
    \ + 1] = word\n    end\n  end\n  -- If there are no commas we have to split by\
    \ numbers\n  if #words == 0 then\n    for word in txt:gmatch(\"%d+\") do\n   \
    \   words[#words + 1] = word\n    end\n  end\n  -- If there are no numbers we\
    \ have to return the number of lower-case letters with odd order in the alphabet\n\
    \  if #words == 0 then\n    local count = 0\n    for letter in txt:gmatch(\"%a\"\
    ) do\n      local index = string.byte(letter) - string.byte('a')\n      if index\
    \ % 2 == 1 then\n        count = count + 1\n      end\n    end\n    return count\n\
    \  end\n  return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffhxf7i8.lua:42:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpffhxf7i8.lua:42: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt == nil then\n        return nil\n    end\n    if txt:find(\"%s\") ~= nil\
    \ then\n        return str_split(txt, \" \")\n    elseif txt:find(\",\") ~= nil\
    \ then\n        return str_split(txt, \",\")\n    else\n        local count =\
    \ 0\n        for i=1, #txt do\n            local char = txt:sub(i,i)\n       \
    \     local char_nbr = string.byte(char) - string.byte(\"a\")\n            local\
    \ is_odd = (char_nbr % 2) == 1\n            if is_odd then\n                count\
    \ = count + 1\n            end\n        end\n        return count\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu0yi35xs.lua:12:\
    \ attempt to call a nil value (global 'str_split')\nstack traceback:\n\t/tmp/tmpu0yi35xs.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpu0yi35xs.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ words = stringx.split(txt, ',')\n\tif #words > 1 then\n\t\treturn words\n\t\
    end\n\t\n\twords = stringx.split(txt, ' ')\n\tif #words > 1 then\n\t\treturn words\n\
    \tend\n\t\n\tlocal letters = {}\n\tfor c in txt:gmatch(\".\") do\n\t\tletters[#letters\
    \ + 1] = c\n\tend\n\t\n\tlocal cnt = 0\n\tfor i, l in ipairs(letters) do\n\t\t\
    local ch = string.byte(l, 1)\n\t\tif ch >= 97 and ch <= 122 and i % 2 == 1 then\n\
    \t\t\tcnt = cnt + 1\n\t\tend\n\tend\n\t\n\treturn cnt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadmjrtxt.lua:8:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmpadmjrtxt.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpadmjrtxt.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ string.find(txt, ' ') ~= nil then\n        return split(txt, ' ')\n    elseif\
    \ string.find(txt, ',') ~= nil then\n        return split(txt, ',')\n    else\n\
    \        local sum = 0\n        for i = 1, string.len(txt) do\n            local\
    \ pos = string.byte(txt, i) - string.byte('a')\n            if pos % 2 == 1 then\n\
    \                sum = sum + 1\n            end\n        end\n        return sum\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpufqnsc7r.lua:9:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpufqnsc7r.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpufqnsc7r.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if(txt:find(\"\
    %s\")) then\n        local tokens = {}\n        for token in txt:gmatch(\"%S+\"\
    ) do table.insert(tokens, token) end\n        return tokens\n    elseif(txt:find(\"\
    ,\")) then\n        local tokens = {}\n        for token in txt:gmatch(\"[^,]+\"\
    ) do table.insert(tokens, token) end\n        return tokens\n    else\n      \
    \  local count = 0\n        for i = 1, txt:len() do\n            if(txt:byte(i)\
    \ % 2 == 1) then\n                count = count + 1\n            end\n       \
    \ end\n        return count\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuud_wstv.lua:35:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpuud_wstv.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ not txt then return nil end\n    local words = {}\n    for word in string.gmatch(txt,\
    \ \"[^%s]+\") do\n        table.insert(words, word)\n    end\n    if #words ==\
    \ 0 then\n        local comma_words = {}\n        for word in string.gmatch(txt,\
    \ \"[^,]+\") do\n            table.insert(comma_words, word)\n        end\n  \
    \      if #comma_words == 0 then\n            local count = 0\n            for\
    \ i = 1, string.len(txt) do\n                local c = string.sub(txt, i, i)\n\
    \                if (string.byte(c) >= 97 and string.byte(c) <= 122) then\n  \
    \                  if (i % 2 == 1) then\n                        count = count\
    \ + 1\n                    end\n                end\n            end\n       \
    \     return count\n        else\n            return comma_words\n        end\n\
    \    else\n        return words\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqjev7tu.lua:41:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpsqjev7tu.lua:41: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ words, lowercase_letters = {}, {}\n  if txt:find('%s') then\n    words = txt:split('%s')\n\
    \  elseif txt:find(',') then\n    words = txt:split(',')\n  else\n    local n\
    \ = #txt\n    for i = 1, n do\n      if txt:sub(i, i):find('[a-z]') then\n   \
    \     local j = i % 2 == 0 and 0 or 1\n        lowercase_letters[j] = lowercase_letters[j]\
    \ or {}\n        lowercase_letters[j][txt:sub(i, i)] = i\n      end\n    end\n\
    \    if lowercase_letters[0] and lowercase_letters[1] then\n      for i = 0, 1\
    \ do\n        for key, _ in pairs(lowercase_letters[i]) do\n          words[#words\
    \ + 1] = key\n        end\n      end\n    else\n      words = lowercase_letters[0]\
    \ and lowercase_letters[0] or lowercase_letters[1]\n    end\n  end\n  return words\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr3dr53dd.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpr3dr53dd.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpr3dr53dd.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ split = {}\n    local word = \"\"\n    local find = txt:find(\" \")\n    if\
    \ find == nil then\n        find = txt:find(\",\")\n        if find == nil then\n\
    \            for i = 1, string.len(txt) do\n                local c = string.lower(txt:sub(i,\
    \ i))\n                local n = string.byte(c) - 97\n                if n % 2\
    \ == 1 then\n                    split[#split + 1] = n\n                end\n\
    \            end\n        else\n            for i = 1, string.len(txt) do\n  \
    \              local c = txt:sub(i, i)\n                if c == \",\" then\n \
    \                   split[#split + 1] = word\n                    word = \"\"\n\
    \                else\n                    word = word .. c\n                end\n\
    \            end\n            split[#split + 1] = word\n        end\n    else\n\
    \        for i = 1, string.len(txt) do\n            local c = txt:sub(i, i)\n\
    \            if c == \" \" then\n                split[#split + 1] = word\n  \
    \              word = \"\"\n            else\n                word = word .. c\n\
    \            end\n        end\n        split[#split + 1] = word\n    end\n   \
    \ return split\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmsih7o7.lua:55:\
    \ expected: 3, actual: {1, 3, 5}\nstack traceback:\n\t/tmp/tmpjmsih7o7.lua:55:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ string.find(txt, \"%s\") then\n        return string.split(txt, \"%s\")\n  \
    \  elseif string.find(txt, \",\") then\n        return string.split(txt, \",\"\
    )\n    else\n        local odd_count = 0\n        for i=1, #txt do\n         \
    \   local ord = string.byte(txt, i) - 97\n            if ord % 2 == 1 then\n \
    \               odd_count = odd_count + 1\n            end\n        end\n    \
    \    return odd_count\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp01cw58la.lua:9:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmp01cw58la.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmp01cw58la.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ txt_lower = txt:lower()\n    if txt_lower:find(\"%s\") ~= nil then\n       \
    \ return txt_lower:split(\"%s\")\n    elseif txt_lower:find(\",\") ~= nil then\n\
    \        return txt_lower:split(\",\")\n    else\n        local odd_letters =\
    \ {}\n        for l in txt_lower:gmatch(\"%a\") do\n            if (string.byte(l)\
    \ - 97) % 2 == 1 then\n                table.insert(odd_letters, l)\n        \
    \    end\n        end\n        return #odd_letters\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzl4wnc1g.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpzl4wnc1g.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpzl4wnc1g.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ YOUR CODE HERE\n    -- local list_of_words = {}\n    -- local final_list = {}\n\
    \    -- for word in string.gmatch(txt, \"%S+\") do\n    --     table.insert(list_of_words,\
    \ word)\n    -- end\n    -- if #list_of_words == 0 then\n    --     list_of_words\
    \ = txt:split(\",\")\n    -- end\n    -- if #list_of_words == 0 then\n    -- \
    \    count = 0\n    --     for letter in string.gmatch(txt, \"%a\") do\n    --\
    \         local number = string.byte(letter) - string.byte(\"a\")\n    --    \
    \     if number % 2 == 1 then\n    --             count = count + 1\n    --  \
    \       end\n    --     end\n    --     return count\n    -- end\n    -- for i,\
    \ word in ipairs(list_of_words) do\n    --     table.insert(final_list, word)\n\
    \    -- end\n    -- return final_list\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0uypot0.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmph0uypot0.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\" \") ~= nil then\n        local words = {}\n        for word in txt:gmatch(\"\
    %w+\") do\n            table.insert(words, word)\n        end\n        return\
    \ words\n    elseif txt:find(\",\") ~= nil then\n        local words = {}\n  \
    \      for word in txt:gmatch(\"%w+\") do\n            table.insert(words, word)\n\
    \        end\n        return words\n    else\n        local sum = 0\n        for\
    \ i = 1, txt:len() do\n            if txt:sub(i, i):byte() - ord('a') % 2 == 1\
    \ then\n                sum = sum + 1\n            end\n        end\n        return\
    \ sum\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfcobl0_.lua:34:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello\", \"world\"}\nstack traceback:\n\
    \t/tmp/tmpqfcobl0_.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ whitespace_pos = txt:find(\"%s\")\n  if whitespace_pos ~= nil then\n    return\
    \ txt:split(\"%s\")\n  end\n  local comma_pos = txt:find(\",\")\n  if comma_pos\
    \ ~= nil then\n    return txt:split(\",\")\n  end\n  return count_lower_odd(txt)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpedwtl_77.lua:10:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmpedwtl_77.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpedwtl_77.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  local\
    \ list = {}\n  for i in string.gmatch(txt, \"%S+\") do\n    table.insert(list,\
    \ i)\n  end\n  if table.getn(list) == 0 then\n    list = {}\n    for i in string.gmatch(txt,\
    \ \",\") do\n      table.insert(list, i)\n    end\n    if table.getn(list) ==\
    \ 0 then\n      counter = 0\n      for i = 1,string.len(txt) do\n        if string.sub(txt,i,i)\
    \ == string.char(i) then\n          counter = counter + 1\n        end\n     \
    \ end\n      return counter\n    end\n  end\n  return list\nend\n</code>\n\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphn9g1n_b.lua:29: unexpected symbol near ''<''

    '
  stdout: ''
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ index = {}\n    local ret = {}\n    local words = string.split(txt, ' ')\n \
    \   if words[1] then\n        return words\n    end\n    local words = string.split(txt,\
    \ ',')\n    if words[1] then\n        return words\n    end\n    for i=1,#txt\
    \ do\n        if txt:sub(i,i) >= 'a' and txt:sub(i,i) <= 'z' then\n          \
    \  table.insert(index, i)\n        end\n    end\n    for _,v in ipairs(index)\
    \ do\n        if v % 2 == 1 then\n            table.insert(ret, txt:sub(v,v))\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfp7lhmd7.lua:10:\
    \ attempt to call a nil value (field 'split')\nstack traceback:\n\t/tmp/tmpfp7lhmd7.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpfp7lhmd7.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  if not\
    \ txt then return nil end\n  local words = {}\n  if #txt == 0 then return words\
    \ end\n  local is_dig = true\n  for i = 1, #txt do\n    if string.find(txt, '[%w_]')\
    \ then\n      is_dig = false\n      break\n    end\n  end\n  if is_dig then return\
    \ txt end\n  local in_word = false\n  local ch = nil\n  local pos = 0\n  local\
    \ start = 0\n  local len = #txt\n  local is_first = true\n  local is_quot = false\n\
    \  local is_comm = false\n  for i = 1, len do\n    ch = string.sub(txt, i, i)\n\
    \    if ch == '\"' then\n      if not is_quot then is_quot = true end\n      if\
    \ is_first then\n        is_first = false\n        start = i\n      end\n    elseif\
    \ ch == ',' then\n      if not is_comm then is_comm = true end\n      if not is_quot\
    \ then\n        if not in_word then\n          in_word = true\n          start\
    \ = i\n        else\n          in_word = false\n          pos = pos + 1\n    \
    \      words[pos] = string.sub(txt, start, i - 1)\n        end\n      end\n  \
    \  elseif not is_quot then\n      if not in_word then\n        in_word = true\n\
    \        start = i\n      end\n    end\n  end\n  if is_quot then return #txt end\n\
    \  if not is_comm then\n    local res = 0\n    for i = 1, len do\n      ch = string.sub(txt,\
    \ i, i)\n      if not string.find(ch, '[%w_]') then\n        res = res + math.ceil(math.log(string.byte(ch)\
    \ - string.byte('a') + 1) / math.log(2))\n      end\n    end\n    return res\n\
    \  end\n  if in_word then\n    pos = pos + 1\n    words[pos] = string.sub(txt,\
    \ start, len)\n  end\n  return words\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03itwf43.lua:75:\
    \ expected: {\"Hello\", \"world!\"}\nactual: #NaN\nstack traceback:\n\t/tmp/tmp03itwf43.lua:75:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    if\
    \ txt:find(\"%s\") then\n        return stringx.split(txt, \"%s\")\n    elseif\
    \ txt:find(\",\") then\n        return stringx.split(txt, \",\")\n    else\n \
    \       local num = 0\n        for i = 1, #txt do\n            local c = txt:sub(i,\
    \ i)\n            if c:byte() - 96 & 1 == 1 then\n                num = num +\
    \ 1\n            end\n        end\n        return num\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi8vtko84.lua:9:\
    \ attempt to index a nil value (global 'stringx')\nstack traceback:\n\t/tmp/tmpi8vtko84.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpi8vtko84.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  for\
    \ _, s in ipairs({\" \", \",\"}) do\n    local r = {}\n    local i = 1\n    for\
    \ w in string.gmatch(txt, \"[^\" .. s .. \"]+\") do\n      r[i] = w\n      i =\
    \ i + 1\n    end\n    if #r > 1 then\n      return r\n    end\n  end\n  local\
    \ r = 0\n  for i, c in ipairs(txt) do\n    local n = string.byte(c) - string.byte(\"\
    a\")\n    if n % 2 == 1 then\n      r = r + 1\n    end\n  end\n  return r\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyj4f_lc1.lua:36:\
    \ expected: 3, actual: 0\nstack traceback:\n\t/tmp/tmpyj4f_lc1.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO: implement this function\n    return \nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wj3ptld.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp8wj3ptld.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ Your code here.\n    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpogx4vhry.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpogx4vhry.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = txt:split(\" \")\n    if (#words > 1) then\n        return words\n \
    \   end\n    local parts = txt:split(\",\")\n    if (#parts > 1) then\n      \
    \  return parts\n    end\n    local res = 0\n    for i = 1, #txt do\n        local\
    \ ch = txt:sub(i, i)\n        local v = string.byte(ch) - string.byte('a')\n \
    \       if (v % 2 ~= 0) then\n            res = res + 1\n        end\n    end\n\
    \    return res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphc3yvqp7.lua:8:\
    \ attempt to call a nil value (method 'split')\nstack traceback:\n\t/tmp/tmphc3yvqp7.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmphc3yvqp7.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ number = 0\n    local words = {}\n    local index = 0\n    for word in string.gmatch(txt,\
    \ '%S+') do\n        index = index + 1\n        words[index] = word\n    end\n\
    \    if #words > 0 then\n        return words\n    end\n    words = {}\n    for\
    \ word in string.gmatch(txt, '[^,]+') do\n        index = index + 1\n        words[index]\
    \ = word\n    end\n    if #words > 0 then\n        return words\n    end\n   \
    \ for c in string.gmatch(txt, '[a-z]') do\n        if (string.byte(c) - 97) %\
    \ 2 == 1 then\n            number = number + 1\n        end\n    end\n    return\
    \ number\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplwk_vd9p.lua:38:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmplwk_vd9p.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n\tlocal\
    \ ret = {}\n\tfor word in txt:gmatch(\"%S+\") do\n\t\tret[#ret+1] = word\n\tend\n\
    \tif #ret == 0 then\n\t\tfor word in txt:gmatch(\"%a+\") do\n\t\t\tret[#ret+1]\
    \ = word\n\t\tend\n\t\tif #ret == 0 then\n\t\t\tlocal len = txt:len()\n\t\t\t\
    local sum = 0\n\t\t\tfor i = 1, len do\n\t\t\t\tlocal c = txt:sub(i, i)\n\t\t\t\
    \tlocal n = string.byte(c) - string.byte('a')\n\t\t\t\tif (n % 2) == 1 then\n\t\
    \t\t\t\tsum = sum + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\treturn sum\n\t\tend\n\tend\n\
    \treturn ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwhyyhhb.lua:36:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpdwhyyhhb.lua:36: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    return\
    \ nil\nend\n \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3we1ngc0.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmp3we1ngc0.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n   local\
    \ words = {}\n   for word in txt:gmatch(\"%S+\") do table.insert(words, word)\
    \ end\n   return words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = split_words\n    lu.assertEquals(candidate('Hello world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n\
    \    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world', '!'})\n\
    \    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokdqhhq0.lua:17:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmpokdqhhq0.lua:17: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n  -- TODO\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = split_words\n\
    \    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb66kt9g.lua:14:\
    \ expected: {\"Hello\", \"world!\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphb66kt9g.lua:14:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ TODO replace this with your code\n    return txt\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = split_words\n    lu.assertEquals(candidate('Hello\
    \ world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello,world!'),\
    \ {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello world,!'), {'Hello',\
    \ 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world !'), {'Hello,Hello,world',\
    \ '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n    lu.assertEquals(candidate('aaabb'),\
    \ 2)\n    lu.assertEquals(candidate('aaaBb'), 1)\n    lu.assertEquals(candidate(''),\
    \ 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9yawfzys.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \"Hello world!\"\nstack traceback:\n\
    \t/tmp/tmp9yawfzys.lua:15: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ words = {}\n    local word = \"\"\n    local i = 1\n    while i <= #txt do\n\
    \        local char = txt:sub(i, i)\n        if char == \" \" or char == \",\"\
    \ then\n            if word ~= \"\" then\n                table.insert(words,\
    \ word)\n                word = \"\"\n            end\n        else\n        \
    \    word = word .. char\n        end\n        i = i + 1\n    end\n    if word\
    \ ~= \"\" then\n        table.insert(words, word)\n    end\n    if #words == 0\
    \ then\n        local count = 0\n        for c in txt:gmatch(\".\") do\n     \
    \       if string.byte(c) >= 97 and string.byte(c) <= 122 then\n             \
    \   if count % 2 == 0 then\n                    count = count + 1\n          \
    \      end\n            end\n        end\n        return count\n    end\n    return\
    \ words\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4cx2s3vd.lua:45:\
    \ expected: {\"Hello\", \"world,!\"}\nactual: {\"Hello\", \"world\", \"!\"}\n\
    stack traceback:\n\t/tmp/tmp4cx2s3vd.lua:45: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    local\
    \ tbl = {}\n    local ind = 0\n    for s in string.gmatch(txt, \"%S+\") do\n \
    \       table.insert(tbl, s)\n        ind = ind + 1\n    end\n    if ind > 0 then\n\
    \        return tbl\n    end\n    ind = 0\n    for s in string.gmatch(txt, \"\
    %a\") do\n        ind = ind + 1\n    end\n    if ind > 0 then\n        return\
    \ ind\n    end\n    ind = 0\n    for s in string.gmatch(txt, \"%a\") do\n    \
    \    if ind % 2 == 0 then\n            ind = ind + 1\n        end\n    end\n \
    \   return ind\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello',\
    \ 'world!'})\n    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4awv0k0t.lua:37:\
    \ expected: {\"Hello\", \"world!\"}\nactual: {\"Hello,world!\"}\nstack traceback:\n\
    \t/tmp/tmp4awv0k0t.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659823713
- exit_code: 1
  program: "-- Given a string of words, return a list of words split on whitespace,\
    \ if no whitespaces exists in the text you\n-- should split on commas ',' if no\
    \ commas exists you should return the number of lower-case letters with odd order\
    \ in the\n-- alphabet, ord('a') = 0, ord('b') = 1, ... ord('z') = 25\n-- Examples\n\
    -- >>> split_words(\"abcdef\") \n-- 3\nlocal function split_words(txt)\n    --\
    \ body\n    return string.match(txt, \"^[a-zA-Z ]+$\") and string.gmatch(txt,\
    \ \"[a-zA-Z]+\") or string.match(txt, \"^[a-zA-Z, ]+$\") and string.gmatch(txt,\
    \ \"[a-zA-Z]+\") or type(txt) == \"string\" and string.gsub(txt, \"[a-zA-Z]+\"\
    , \"\")\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = split_words\n    lu.assertEquals(candidate('Hello world!'), {'Hello', 'world!'})\n\
    \    lu.assertEquals(candidate('Hello,world!'), {'Hello', 'world!'})\n    lu.assertEquals(candidate('Hello\
    \ world,!'), {'Hello', 'world,!'})\n    lu.assertEquals(candidate('Hello,Hello,world\
    \ !'), {'Hello,Hello,world', '!'})\n    lu.assertEquals(candidate('abcdef'), 3)\n\
    \    lu.assertEquals(candidate('aaabb'), 2)\n    lu.assertEquals(candidate('aaaBb'),\
    \ 1)\n    lu.assertEquals(candidate(''), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp_0qaqh3.lua:15:\
    \ expected: {\"Hello\", \"world!\"}\nactual: \" !\"\nstack traceback:\n\t/tmp/tmpp_0qaqh3.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659823713
