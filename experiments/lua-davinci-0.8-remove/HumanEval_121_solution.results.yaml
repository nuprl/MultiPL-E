language: lua
name: HumanEval_121_solution
results:
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local ret = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then\n      ret = ret + lst[i]\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzggs8kzf.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpzggs8kzf.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return (function()\n    local _accum_0 = 0\n    local _len_0 = 1\n    for _index_0\
    \ = 1, #lst do\n      local i = lst[_index_0]\n      if _index_0 % 2 == 0 then\n\
    \        _accum_0 = _accum_0 + i\n      end\n      _len_0 = _len_0 + 1\n    end\n\
    \    return _accum_0\n  end)()\nend\nreturn {\n  solution = solution\n}\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfhd06tw3.lua:24: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return sum(filter(odds, evenPositions(lst)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4nxlul2q.lua:8:\
    \ attempt to call a nil value (global 'evenPositions')\nstack traceback:\n\t/tmp/tmp4nxlul2q.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp4nxlul2q.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return foldl(\n    function(acc, v, k)\n      if k % 2 == 0 and v % 2 == 1\
    \ then\n        return acc + v\n      else\n        return acc\n      end\n  \
    \  end,\n    0,\n    lst\n  )\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg5egpqiw.lua:8:\
    \ attempt to call a nil value (global 'foldl')\nstack traceback:\n\t/tmp/tmpg5egpqiw.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpg5egpqiw.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and i %\
    \ 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv1wofnn.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpwv1wofnn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if (i % 2 == 0) and\
    \ (v % 2 == 1) then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpajqstwdr.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpajqstwdr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and i %\
    \ 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv1wofnn.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpwv1wofnn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local s = 0\n  for i = 1, #lst, 2 do\n    if (i % 2 == 0) then\n      s = s\
    \ + lst[i]\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpor79mpr_.lua:20:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmpor79mpr_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, value in ipairs(lst) do\n    if ((i % 2) == 0) and\
    \ ((value % 2) ~= 0) then\n      sum = sum + value\n    end\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpccehy3zy.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpccehy3zy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if (i % 2 ~= 0) and (lst[i]\
    \ % 2 == 0) then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3r1iqo_.lua:20:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmpu3r1iqo_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return (reduce(lst, function(a, b) return a + b end, 0))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5rldw9kq.lua:8:\
    \ attempt to call a nil value (global 'reduce')\nstack traceback:\n\t/tmp/tmp5rldw9kq.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmp5rldw9kq.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = 0\n    for k, v in ipairs(lst) do\n        if (k % 2 == 0)\
    \ and (v % 2 == 1) then\n            result = result + v\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyx22wrnh.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpyx22wrnh.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ i % 2 == 0 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4t7op7x.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpc4t7op7x.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, n in ipairs(lst) do\n        if i % 2 == 0 and\
    \ n % 2 == 1 then\n            sum = sum + n\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzv29v7b5.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpzv29v7b5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local result = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 ==\
    \ 1 then\n      result = result + lst[i]\n    end\n  end\n  return result\nend\n\
    return solution\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5hpzqo6d.lua:17: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local function even_idx(i) return (i % 2) == 0 end\n  local function odd_value(x)\
    \ return (x % 2) == 1 end\n  local t = {}\n  for i, v in ipairs(lst) do\n    if\
    \ even_idx(i) and odd_value(v) then\n      table.insert(t, v)\n    end\n  end\n\
    \  return table.reduce(t, add)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp_nwp_n9.lua:16:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmpp_nwp_n9.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpp_nwp_n9.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fidi1ov.lua:14:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmp1fidi1ov.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for k, v in ipairs(lst) do\n        if k % 2 == 0 and\
    \ v % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk28yepxs.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpk28yepxs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local value = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 and i % 2 ==\
    \ 0 then\n      value = value + lst[i]\n    end\n  end\n  return value\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0uoxwft.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpl0uoxwft.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return sum(filter(odd, select(even, lst)))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbbwt9cb.lua:8:\
    \ bad argument #1 to 'select' (number expected, got nil)\nstack traceback:\n\t\
    /tmp/tmpvbbwt9cb.lua:8: in local 'candidate'\n\t/tmp/tmpvbbwt9cb.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- #1\n  -- local acc = 0\n  -- for i,v in ipairs(lst) do\n  --   if i % 2\
    \ == 0 and v % 2 == 1 then\n  --     acc = acc + v\n  --   end\n  -- end\n  --\
    \ return acc\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxge1384z.lua:29: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    -- Iterate through the list\n    local sum = 0\n    for i,v in ipairs(lst)\
    \ do\n        -- Check for odd elements in even positions\n        if i % 2 ==\
    \ 0 and v % 2 == 1 then\n            sum = sum + v\n        end\n    end\n   \
    \ return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4efcn_i2.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp4efcn_i2.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, x in ipairs(lst) do\n        if i % 2 == 0 and\
    \ x % 2 == 1 then\n            sum = sum + x\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdnpsycm.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmppdnpsycm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 0 and lst[i] %\
    \ 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88tuvngv.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp88tuvngv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48l9s6ha.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp48l9s6ha.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 0 and\
    \ v % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe4g3pv_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpfe4g3pv_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  if lst == nil then\n    return nil\n  end\n  local result = 0\n  for i, n in\
    \ ipairs(lst) do\n    if n % 2 == 1 and i % 2 == 0 then\n      result = result\
    \ + n\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkp5dmcxf.lua:23:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpkp5dmcxf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if type(lst) ~= \"table\" then\n        return nil\n    end\n    local ret\
    \ = 0\n    for idx, val in ipairs(lst) do\n        if (idx % 2 == 0) and (val\
    \ % 2 == 1) then\n            ret = ret + val\n        end\n    end\n    return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4by19tl.lua:23:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpt4by19tl.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   local ans = 0\n   for index, val in ipairs(lst) do\n      if index % 2 ==\
    \ 0 and val % 2 == 1 then\n         ans = ans + val\n      end\n   end\n   return\
    \ ans\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpon_4s46_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpon_4s46_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local res = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and i % 2 ==\
    \ 0 then res = res + v end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9635_tuu.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp9635_tuu.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 0 and lst[i] %\
    \ 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88tuvngv.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp88tuvngv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if type(lst) ~= \"table\" then return nil end\n    local sum = 0\n    for\
    \ i, el in ipairs(lst) do\n        if type(el) == \"number\" and el % 2 == 1 and\
    \ i % 2 == 0 then sum = sum + el end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxfjcjo7k.lua:19:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpxfjcjo7k.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 and i % 2 == 0\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a9_6lh9.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp8a9_6lh9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local res = 0\n  for k, v in ipairs(lst) do\n    if ((k % 2 == 0) and (v %\
    \ 2 ~= 0)) then\n      res = res + v\n    end\n  end\n  return res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7cynqk1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe7cynqk1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplrknsfu8.lua:14:\
    \ expected: 12, actual: nil\nstack traceback:\n\t/tmp/tmplrknsfu8.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if (i % 2 == 0) and (lst[i] % 2 ==\
    \ 1) then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q819mhd.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp8q819mhd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = 0\n    for i = 1, #lst do\n        if i % 2 == 0 and lst[i]\
    \ % 2 == 1 then\n            result = result + lst[i]\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwq84mm8w.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpwq84mm8w.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \treturn __\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2exs42xp.lua:14:\
    \ expected: 12, actual: nil\nstack traceback:\n\t/tmp/tmp2exs42xp.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local result = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 ==\
    \ 1 then\n      result = result + lst[i]\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3b_qozjg.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp3b_qozjg.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and i %\
    \ 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv1wofnn.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpwv1wofnn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, val in ipairs(lst) do\n        if math.fmod(i,\
    \ 2) == 0 and math.fmod(val, 2) == 1 then\n            sum = sum + val\n     \
    \   end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrqmmsjx.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpxrqmmsjx.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local count = 0\n    for index, number in ipairs(lst) do\n        if (index\
    \ % 2 ~= 0) and (number % 2 == 0) then\n            count = count + number\n \
    \       end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8zbamxp.lua:20:\
    \ expected: 12, actual: 0\nstack traceback:\n\t/tmp/tmpt8zbamxp.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if (lst[i] % 2 ~= 0) and (i % 2 ==\
    \ 0) then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bs79ym8.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp9bs79ym8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nreturn solution\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprlmovgxz.lua:17: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local tot = 0\n  for k, v in ipairs(lst) do\n    if k % 2 == 0 and v % 2 ==\
    \ 1 then\n      tot = tot + v\n    end\n  end\n  return tot\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv4a53tcy.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpv4a53tcy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local res = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 0 and\
    \ v % 2 == 1 then\n            res = res + v\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jj51b08.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp2jj51b08.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 0 and\
    \ v % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe4g3pv_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpfe4g3pv_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \t-- Create a placeholder for the result.\n\tlocal result = 0\n\t\n\t-- Iterate\
    \ over the list with indices,\n\t-- and add to the result the odd number at even\
    \ position.\n\tfor i, x in ipairs(lst) do\n\t\tif i % 2 == 0 and x % 2 == 1 then\n\
    \t\t\tresult = result + x\n\t\tend\n\tend\n\t\n\t-- Return the result.\n\treturn\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz157wmrc.lua:26:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpz157wmrc.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local s = 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 0 and v %\
    \ 2 == 1 then\n            s = s + v\n        end\n    end\n    return s\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99gjvjf8.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp99gjvjf8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local res = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and i %\
    \ 2 == 0 then\n            res = res + lst[i]\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3lvkicy.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpf3lvkicy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = 0\n    for i = 1, #lst do\n        if i % 2 == 0 and lst[i]\
    \ % 2 == 1 then\n            result = result + lst[i]\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwq84mm8w.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpwq84mm8w.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and i %\
    \ 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv1wofnn.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpwv1wofnn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for k, v in ipairs(lst) do\n    if (k % 2 == 0) and (v % 2\
    \ == 1) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwrmeoqyt.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpwrmeoqyt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if (i % 2 == 0) and (v % 2\
    \ == 1) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc91utkhm.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpc91utkhm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 and i % 2 == 0\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a9_6lh9.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp8a9_6lh9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local result = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 ==\
    \ 1 then\n      result = result + lst[i]\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3b_qozjg.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp3b_qozjg.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return sum(filter(function(n) return n % 2 == 1 end, filter(is_even, lst)))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph0qh0h22.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmph0qh0h22.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmph0qh0h22.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, x in ipairs(lst) do\n        if i % 2 == 0 and\
    \ x % 2 == 1 then\n            sum = sum + x\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppdnpsycm.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmppdnpsycm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if (i % 2 == 0) and (v % 2\
    \ == 1) then sum = sum + v end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpda6c7lg6.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpda6c7lg6.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   local sum = 0\n   for i, v in ipairs(lst) do\n      if (i % 2 == 0) and (v\
    \ % 2 == 1) then\n         sum = sum + v\n      end\n   end\n   return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyp4vz6y.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpmyp4vz6y.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local odd_sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 ==\
    \ 1 then\n      odd_sum = odd_sum + lst[i]\n    end\n  end\n  return odd_sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ekvjy3t.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp7ekvjy3t.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for idx, val in ipairs(lst) do\n        if (val % 2 ~=\
    \ 0) and (idx % 2 == 0) then\n            sum = sum + val\n        end\n    end\n\
    \    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5qfn95bf.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp5qfn95bf.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local res = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 and i % 2 == 0\
    \ then\n      res = res + lst[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwej3fq_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpgwej3fq_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 0 and v\
    \ % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7nzwxgd.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmps7nzwxgd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and i %\
    \ 2 == 0 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwv1wofnn.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpwv1wofnn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and\
    \ i % 2 == 0 then\n            result = result + lst[i]\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb91duir8.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpb91duir8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local r = 0\n  for i,v in ipairs(lst) do\n    if (i % 2 == 0) and (v % 2 ==\
    \ 1) then\n      r = r + v\n    end\n  end\n  return r\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphu_e4vnn.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmphu_e4vnn.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for k, v in ipairs(lst) do\n        if k % 2 == 0 and\
    \ v % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk28yepxs.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpk28yepxs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return sum(filter(lst, isOdd, isEven))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf63xaikk.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpf63xaikk.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpf63xaikk.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local count = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2\
    \ == 1 then count = count + v end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkdpxsyti.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpkdpxsyti.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzjxk0r_v.lua:22: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 0
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    -- set up initial conditions\n    local sum = 0\n    local index = 0\n  \
    \  -- loop through lst\n    for i, v in ipairs(lst) do\n        -- if this is\
    \ an even index\n        if (index % 2 == 0) then\n            -- and v is odd\n\
    \            if (v % 2 == 1) then\n                -- add it to the sum\n    \
    \            sum = sum + v\n            end\n        end\n        -- increment\
    \ the index\n        index = index + 1\n    end\n    -- return the sum\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    sum = 0\n    for k, v in pairs(lst) do\n        if (k % 2 == 0) and (v %\
    \ 2 ~= 0) then\n            sum = sum + v\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt70_2i13.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpt70_2i13.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local res = 0\n  for i, v in ipairs(lst) do\n    if ((i%2) == 0) and ((v%2)\
    \ == 1) then\n      res = res + v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tyc9xvq.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp6tyc9xvq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local accumulator = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] %\
    \ 2 == 1 then\n      accumulator = accumulator + lst[i]\n    end\n  end\n  return\
    \ accumulator\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy31w8i4o.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpy31w8i4o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \t\n\tlocal res = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg03q_3jw.lua:23: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local answer = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 0 and v % 2\
    \ == 1 then\n      answer = answer + v\n    end\n  end\n  return answer\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsvasw4r.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpzsvasw4r.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local ans = 0\n  for i,v in ipairs(lst) do\n    if (i % 2 == 0) and (v % 2\
    \ == 1) then\n      ans = ans + v\n    end\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpufrc1qh_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpufrc1qh_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \   local sum = 0\n   for i, v in ipairs(lst) do\n      if i % 2 == 0 and v %\
    \ 2 == 1 then\n         sum = sum + v\n      end\n   end\n   return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9w94n_e5.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp9w94n_e5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local count = 0\n    for i, v in ipairs(lst) do\n        if (i % 2 == 0)\
    \ and (v % 2 == 1) then\n            count = count + v\n        end\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl14phl_l.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpl14phl_l.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 0
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local r = 0\n  for i = 1, #lst, 2 do\n    r = r + (lst[i] % 2 == 1 and lst[i]\
    \ or 0)\n  end\n  return r\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and i % 2 ==\
    \ 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh4gkar_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpeh4gkar_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return sum(filter(function(x) return is_odd(x) end,\n                   \
    \  filter(function(x) return is_even(x) end,\n                          index(lst))))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbefj8_l.lua:10:\
    \ attempt to call a nil value (global 'index')\nstack traceback:\n\t/tmp/tmpxbefj8_l.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpxbefj8_l.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    if #lst == 0 then return 0 end\n    local sum = 0\n    for k, v in ipairs(lst)\
    \ do\n        if k % 2 == 0 and v % 2 == 1 then\n            sum = sum + v\n \
    \       end\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes9kalhp.lua:21:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpes9kalhp.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    sum = 0\n    i = 1\n    while i <= #lst do\n        if lst[i] % 2 == 1 and\
    \ i % 2 == 0 then\n            sum = sum + lst[i]\n        end\n        i = i\
    \ + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxxf_6lt4.lua:22:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpxxf_6lt4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if (i % 2 == 0) and (v % 2\
    \ == 1) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc91utkhm.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpc91utkhm.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- TODO: implement solution\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkwevxr76.lua:14:\
    \ expected: 12, actual: nil\nstack traceback:\n\t/tmp/tmpkwevxr76.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return sum(map(function(e, k) return (k % 2 == 0 and e % 2 == 1) and e or\
    \ 0 end, lst))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpao8i2kuu.lua:8:\
    \ attempt to call a nil value (global 'map')\nstack traceback:\n\t/tmp/tmpao8i2kuu.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpao8i2kuu.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if (i % 2 == 0) and (lst[i] % 2 ==\
    \ 1) then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q819mhd.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp8q819mhd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspqrdunr.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpspqrdunr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return reduce(function(a, b) return a + b end, filter(function(a) return a\
    \ % 2 == 1 end, filter(function(a, b) return b % 2 == 0 end, ipairs(lst))))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph2fjl2hz.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmph2fjl2hz.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmph2fjl2hz.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local res = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ i % 2 == 0 then\n            res = res + v\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpos7pymb9.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpos7pymb9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then sum = sum + lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bib4nqt.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp4bib4nqt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal result = 0\n\tfor i, v in ipairs(lst) do\n\t\tif (i % 2 == 0) and (v %\
    \ 2 == 1) then\n\t\t\tresult = result + v\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqx0ajyi6.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpqx0ajyi6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, n in ipairs(lst) do\n        if i % 2 == 0 and\
    \ n % 2 == 1 then\n            sum = sum + n\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzv29v7b5.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpzv29v7b5.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return sum(grep(lst, {[2] = true}, function(i) return i % 2 ~= 0 end))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuc0c_3_e.lua:8:\
    \ attempt to call a nil value (global 'grep')\nstack traceback:\n\t/tmp/tmpuc0c_3_e.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpuc0c_3_e.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return nil\nend\nreturn solution\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf8s6yedj.lua:11: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- <TODO>\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0q7k90i4.lua:14:\
    \ expected: 12, actual: nil\nstack traceback:\n\t/tmp/tmp0q7k90i4.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local x = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 == 1\
    \ then\n      x = x + v\n    end\n  end\n  return x\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpois9sbgv.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpois9sbgv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local odd = lst[2]\n    for i = 4, #lst, 2 do\n        odd = odd + lst[i]\n\
    \    end\n    return odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv585id85.lua:18:\
    \ expected: 12, actual: 9\nstack traceback:\n\t/tmp/tmpv585id85.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local res = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and i % 2 ==\
    \ 0 then\n      res = res + v\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsgrt9h1f.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpsgrt9h1f.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and i % 2 ==\
    \ 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh4gkar_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpeh4gkar_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return sum_even_odd_positions(lst, true)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgf7ntpf2.lua:8:\
    \ attempt to call a nil value (global 'sum_even_odd_positions')\nstack traceback:\n\
    \t/tmp/tmpgf7ntpf2.lua:8: in local 'candidate'\n\t/tmp/tmpgf7ntpf2.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tif (i % 2 == 0) and (lst[i] % 2 ==\
    \ 1) then\n\t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpav72cpss.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpav72cpss.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if (i % 2 == 0) and (lst[i]\
    \ % 2 == 1) then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkbtfas5o.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpkbtfas5o.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i,v in ipairs(lst) do\n        if (i % 2 == 0) and\
    \ (v % 2 == 1) then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nreturn solution\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo44nu8vj.lua:17: <eof> expected near ''lu''

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \t-- Body of your function here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeecv2xjl.lua:14:\
    \ expected: 12, actual: nil\nstack traceback:\n\t/tmp/tmpeecv2xjl.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if (lst[i] % 2 == 1) and (i % 2 ==\
    \ 0) then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvktudo7.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpxvktudo7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return sum(filter(lst, function(x) return x % 2 == 1 end))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpurhxojra.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpurhxojra.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpurhxojra.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if(v % 2 == 1 and i % 2 ==\
    \ 0) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1a9o409z.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp1a9o409z.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzjxk0r_v.lua:22: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, val in ipairs(lst) do\n    if i % 2 == 0 and val %\
    \ 2 == 1 then\n      sum = sum + val\n    end\n  end\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp029e9wx6.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp029e9wx6.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for index, value in ipairs(lst) do\n    if math.fmod(index,\
    \ 2) == 0 and math.fmod(value, 2) == 1 then\n      sum = sum + value\n    end\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovv9j_yq.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpovv9j_yq.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- body\n  local res = 0\n  for i, v in ipairs(lst) do\n    if (i % 2 == 0)\
    \ and (v % 2 == 1) then\n      res = res + v\n    end\n  end\n  return res\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7s79vtu0.lua:21:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp7s79vtu0.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, e in ipairs(lst) do\n    if e % 2 == 1 and i % 2 ==\
    \ 0 then\n      sum = sum + e\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ig4_asy.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp0ig4_asy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then sum = sum + lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bib4nqt.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp4bib4nqt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  -- Type your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiucxwr1f.lua:14:\
    \ expected: 12, actual: nil\nstack traceback:\n\t/tmp/tmpiucxwr1f.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and i % 2 ==\
    \ 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh4gkar_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpeh4gkar_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local new_list = {}\n    for i = 1, #lst do\n        if (i % 2 == 0) and\
    \ (lst[i] % 2 ~= 0) then\n            table.insert(new_list, lst[i])\n       \
    \ end\n    end\n    local result = 0\n    for i = 1, #new_list do\n        result\
    \ = result + new_list[i]\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpchi0zucz.lua:24:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpchi0zucz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 and i % 2 == 0\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a9_6lh9.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp8a9_6lh9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local total = 0\n    for k, v in ipairs(lst) do\n        if k % 2 == 0 and\
    \ v % 2 == 1 then\n            total = total + v\n        end\n    end\n    return\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpduw4w871.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpduw4w871.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and i % 2 ==\
    \ 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh4gkar_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpeh4gkar_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\tfor i, v in ipairs(lst) do\n\t\tif i % 2 == 0 and v % 2 ==\
    \ 1 then\n\t\t\tsum = sum + v\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6gaj6ol.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmps6gaj6ol.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local res = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 0 and\
    \ v % 2 == 1 then\n            res = res + v\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jj51b08.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp2jj51b08.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if v % 2 == 1 and\
    \ i % 2 == 0 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4t7op7x.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpc4t7op7x.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = 0\n    for i, v in ipairs(lst) do\n        if (i % 2 == 0)\
    \ and (v % 2 == 1) then\n            result = result + v\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuio8iumw.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpuio8iumw.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspqrdunr.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpspqrdunr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local res = 0\n  for i = 1, #lst do\n    if (i % 2 == 0) and (lst[i] % 2 ==\
    \ 1) then\n      res = res + lst[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3tnsz77.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpy3tnsz77.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return sum(filter(lst, odd, even))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq171dg_5.lua:8:\
    \ attempt to call a nil value (global 'filter')\nstack traceback:\n\t/tmp/tmpq171dg_5.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpq171dg_5.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local result = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 ==\
    \ 1 then\n      result = result + lst[i]\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3b_qozjg.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp3b_qozjg.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return accumulate(add, 0, select(even, filter(odd, enumerate(lst))))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkzxd67ll.lua:8:\
    \ attempt to call a nil value (global 'enumerate')\nstack traceback:\n\t/tmp/tmpkzxd67ll.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpkzxd67ll.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local odd_sum = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 0\
    \ and v % 2 == 1 then\n            odd_sum = odd_sum + v\n        end\n    end\n\
    \    return odd_sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpet9bp4o9.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpet9bp4o9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return table.reduce(lst, function(acc, x, i)\n        if i % 2 == 0 and x\
    \ % 2 == 1 then\n            return acc + x\n        else\n            return\
    \ acc\n        end\n    end, 0)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx3phpx7y.lua:8:\
    \ attempt to call a nil value (field 'reduce')\nstack traceback:\n\t/tmp/tmpx3phpx7y.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpx3phpx7y.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for k, v in ipairs(lst) do\n    if k % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0a6ohy2.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpf0a6ohy2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local res = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 and i % 2 == 0\
    \ then\n      res = res + lst[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgwej3fq_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpgwej3fq_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48l9s6ha.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp48l9s6ha.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return red(odd, even, 0, lst)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsib123xb.lua:8:\
    \ attempt to call a nil value (global 'red')\nstack traceback:\n\t/tmp/tmpsib123xb.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpsib123xb.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if (i % 2 == 0) and\
    \ (v % 2 == 1) then sum = sum + v end\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpww1ql_a3.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpww1ql_a3.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    return sum(filter(filter_odd, filter_even_positions(lst)))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv37_e701.lua:8:\
    \ attempt to call a nil value (global 'filter_even_positions')\nstack traceback:\n\
    \t/tmp/tmpv37_e701.lua:8: in local 'candidate'\n\t/tmp/tmpv37_e701.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspqrdunr.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpspqrdunr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i,v in ipairs(lst) do\n        if i % 2 == 0 and v\
    \ % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7nzwxgd.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmps7nzwxgd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for k, v in ipairs(lst) do\n    if k % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0a6ohy2.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpf0a6ohy2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal result = 0\n\tfor k, v in ipairs(lst) do\n\t\tif k % 2 == 0 and v % 2\
    \ == 1 then\n\t\t\tresult = result + v\n\t\tend\n\tend\n\treturn result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptkqzsb3b.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmptkqzsb3b.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspqrdunr.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpspqrdunr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return sum(filter(snd, filter(odd, zip(lst, enumFromTo(1, #lst)))))\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoqx2drgc.lua:8:\
    \ attempt to call a nil value (global 'enumFromTo')\nstack traceback:\n\t/tmp/tmpoqx2drgc.lua:8:\
    \ in local 'candidate'\n\t/tmp/tmpoqx2drgc.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local even = {}\n  local odd = {}\n  for i, n in ipairs(lst) do\n    if n %\
    \ 2 == 0 then even[#even + 1] = n else odd[#odd + 1] = n end\n  end\n  return\
    \ sumOf(even) + sumOf(odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ff3fu9_.lua:13:\
    \ attempt to call a nil value (global 'sumOf')\nstack traceback:\n\t/tmp/tmp8ff3fu9_.lua:13:\
    \ in local 'candidate'\n\t/tmp/tmp8ff3fu9_.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local res = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 0 and\
    \ v % 2 == 1 then\n            res = res + v\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jj51b08.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp2jj51b08.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local odd_numbers = {}\n    local i = 1\n    while i <= #lst do\n       \
    \ if lst[i] % 2 == 1 then\n            table.insert(odd_numbers, lst[i])\n   \
    \     end\n        i = i + 2\n    end\n    return sum(odd_numbers)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpalgl7quh.lua:16:\
    \ attempt to call a nil value (global 'sum')\nstack traceback:\n\t/tmp/tmpalgl7quh.lua:16:\
    \ in local 'candidate'\n\t/tmp/tmpalgl7quh.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspqrdunr.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpspqrdunr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then sum = sum + lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4bib4nqt.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp4bib4nqt.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  return sum(select_odd_at_even_positions(lst))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0z8tsgbo.lua:8:\
    \ attempt to call a nil value (global 'select_odd_at_even_positions')\nstack traceback:\n\
    \t/tmp/tmp0z8tsgbo.lua:8: in local 'candidate'\n\t/tmp/tmp0z8tsgbo.lua:14: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 0 and lst[i] %\
    \ 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88tuvngv.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp88tuvngv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local result = 0\n    for i, num in ipairs(lst) do\n        if i % 2 == 0\
    \ and num % 2 == 1 then\n            result = result + num\n        end\n    end\n\
    \    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpykjphjos.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpykjphjos.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for k, v in ipairs(lst) do\n        if k % 2 == 0 and\
    \ v % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk28yepxs.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpk28yepxs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local res = 0\n    for i = 1, #lst do\n        if lst[i] % 2 == 1 and i %\
    \ 2 == 0 then\n            res = res + lst[i]\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3lvkicy.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpf3lvkicy.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if (i % 2 == 0) and (v % 2\
    \ == 1) then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptoao7wq_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmptoao7wq_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n   \
    \ lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp16vfpt1s.lua:22: ''end'' expected (to close ''function'' at
    line 7) near <eof>

    '
  stdout: ''
  timestamp: 1659823688
- exit_code: 0
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local s = 0\n  for i = 1, #lst, 2 do\n    if lst[i] % 2 == 1 then\n      s\
    \ = s + lst[i]\n    end\n  end\n  return s\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    -- Write your code here\n    local ret = 0\n    for i = 1, #lst do\n    \
    \    if lst[i] % 2 == 1 and i % 2 == 0 then\n            ret = ret + lst[i]\n\
    \        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuo7p8dn.lua:21:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpzuo7p8dn.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local total = 0\n  for i, v in ipairs(lst) do\n    if math.fmod(i, 2) == 0\
    \ and math.fmod(v, 2) == 1 then\n      total = total + v\n    end\n  end\n  return\
    \ total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum3sntr4.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpum3sntr4.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal res, tmp = 0, 0\n\tfor i, v in ipairs(lst) do\n\t\tif v % 2 == 1 and i\
    \ % 2 == 0 then\n\t\t\tres = res + v\n\t\tend\n\tend\n\treturn res\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryz0x01w.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpryz0x01w.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    -- body\n    local sum = 0\n    for i = 1, #lst do\n        if (lst[i] %\
    \ 2 ~= 0) and (i % 2 == 0) then\n            sum = sum + lst[i]\n        end\n\
    \    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n\
    \    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprarsd5e4.lua:21:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmprarsd5e4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if (v % 2 == 1) and\
    \ (i % 2 == 0) then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9f0xbddi.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp9f0xbddi.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local ans = 0\n  for i, v in ipairs(lst) do\n    if (v % 2 ~= 0) and (i % 2\
    \ == 0) then ans = ans + v end\n  end\n  return ans\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9lsdoz0r.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp9lsdoz0r.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \tlocal sum = 0\n\tfor i = 1, #lst do\n\t\tif lst[i] % 2 == 1 and i % 2 == 0 then\n\
    \t\t\tsum = sum + lst[i]\n\t\tend\n\tend\n\treturn sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt8l7fkio.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpt8l7fkio.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local odds = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then odds = odds + v end\n  end\n  return odds\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzg11n1fx.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpzg11n1fx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if (i % 2 == 0) and (lst[i] % 2 ==\
    \ 1) then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8q819mhd.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp8q819mhd.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i = 1, #lst do\n        if i % 2 == 0 and lst[i] %\
    \ 2 == 1 then\n            sum = sum + lst[i]\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp88tuvngv.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp88tuvngv.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 0 and\
    \ v % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe4g3pv_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpfe4g3pv_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    -- solution([5, 8, 7, 1])\n    -- (5, 8, 7, 1)\n    -- (5, 8, 7, 1)\n   \
    \ -- (5, 8, 7, 1)\n    -- (5, 8, 7, 1)\n    -- (5, 8, 7, 1)\n    -- 12\n    return\
    \ (((lst[2] + lst[4]) + lst[6]) + lst[8]) + lst[10]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfz5iqt7q.lua:15:\
    \ attempt to perform arithmetic on a nil value (field 'integer index')\nstack\
    \ traceback:\n\t/tmp/tmpfz5iqt7q.lua:15: in local 'candidate'\n\t/tmp/tmpfz5iqt7q.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8kq1mh1.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpe8kq1mh1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if (i % 2 == 0) and (lst[i] % 2 ==\
    \ 1) then sum = sum + lst[i] end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdlq4ornx.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpdlq4ornx.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local rtn = 0\n  for i,v in ipairs(lst) do\n    if i % 2 == 0 and v % 2 ==\
    \ 1 then\n      rtn = rtn + v\n    end\n  end\n  return rtn\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6wq8cgzb.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp6wq8cgzb.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i, v in ipairs(lst) do\n    if v % 2 == 1 and i % 2 ==\
    \ 0 then\n      sum = sum + v\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh4gkar_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpeh4gkar_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 0 and\
    \ v % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe4g3pv_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpfe4g3pv_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local res = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then\n      res = res + lst[i]\n    end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85ef87y7.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp85ef87y7.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspqrdunr.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpspqrdunr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 0 and\
    \ v % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe4g3pv_.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpfe4g3pv_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local res = 0\n    for i, v in ipairs(lst) do\n        if i % 2 == 0 and\
    \ v % 2 == 1 then\n            res = res + v\n        end\n    end\n    return\
    \ res\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jj51b08.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp2jj51b08.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \    local sum = 0\n    for k, v in ipairs(lst) do\n        if k % 2 == 0 and\
    \ v % 2 == 1 then\n            sum = sum + v\n        end\n    end\n    return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = solution\n    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk28yepxs.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpk28yepxs.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i,v in ipairs(lst) do\n    if (i % 2 == 0) and (v % 2\
    \ == 1) then sum = sum + v end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpda6c7lg6.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpda6c7lg6.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if lst[i] % 2 == 1 and i % 2 == 0\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8a9_6lh9.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmp8a9_6lh9.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local result = 0\n  for k, v in ipairs(lst) do\n    if k % 2 == 0 and v % 2\
    \ == 1 then\n      result = result + v\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solution\n\
    \    lu.assertEquals(candidate({5, 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3,\
    \ 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30, 13, 24, 321}), 0)\n   \
    \ lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2, 4,\
    \ 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk5u17lj8.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpk5u17lj8.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local res = 0\n  for i, j in ipairs(lst) do\n    if i % 2 == 0 and j % 2 ~=\
    \ 0 then res = res + j end\n  end\n  return res\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm85daolo.lua:18:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpm85daolo.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
- exit_code: 1
  program: "-- Given a non-empty list of integers, return the sum of all of the odd\
    \ elements that are in even positions.\n-- Examples\n-- >>> solution([5, 8, 7,\
    \ 1]) \n-- 12\n-- >>> solution([3, 3, 3, 3, 3]) \n-- 9\nlocal function solution(lst)\n\
    \  local sum = 0\n  for i = 1, #lst do\n    if i % 2 == 0 and lst[i] % 2 == 1\
    \ then\n      sum = sum + lst[i]\n    end\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = solution\n    lu.assertEquals(candidate({5,\
    \ 8, 7, 1}), 12)\n    lu.assertEquals(candidate({3, 3, 3, 3, 3}), 9)\n    lu.assertEquals(candidate({30,\
    \ 13, 24, 321}), 0)\n    lu.assertEquals(candidate({5, 9}), 5)\n    lu.assertEquals(candidate({2,\
    \ 4, 8}), 0)\n    lu.assertEquals(candidate({30, 13, 23, 32}), 23)\n    lu.assertEquals(candidate({3,\
    \ 13, 2, 9}), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpspqrdunr.lua:20:\
    \ expected: 12, actual: 1\nstack traceback:\n\t/tmp/tmpspqrdunr.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659823688
