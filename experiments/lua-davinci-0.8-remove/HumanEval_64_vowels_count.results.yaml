language: lua
name: HumanEval_64_vowels_count
results:
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  local has_y = false\n  for i = 1, #s do\n    local c = s:sub(i,\
    \ i)\n    if string.find(\"aeiou\", c) then\n      count = count + 1\n    elseif\
    \ c == \"y\" then\n      has_y = true\n    end\n  end\n  if has_y and count ==\
    \ 0 then\n    count = 1\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvp5jfzlk.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpvp5jfzlk.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local s = s:lower()\n    local i = 0\n    local count = 0\n    for i = 0,\
    \ #s do\n        if string.find(\"aeiouy\", s:sub(i, i)) then\n            count\
    \ = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpryr4qdr3.lua:21:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpryr4qdr3.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- TODO: your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6tl4moql.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp6tl4moql.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   local vowels = { a = true, e = true, i = true, o = true, u = true }\n   local\
    \ count = 0\n   local last = nil\n   for char in s:gmatch\".\" do\n      if char\
    \ == 'y' and last == nil then\n         count = count + 1\n      elseif vowels[char]\
    \ then\n         count = count + 1\n      end\n      last = char\n   end\n   return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdnp2j6hv.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpdnp2j6hv.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i=1,\
    \ #s do\n        local c = s:sub(i, i)\n        for j=1, #vowels do\n        \
    \    if c == vowels[j] then\n                count = count + 1\n            end\n\
    \        end\n    end\n    if s:sub(-1) == 'y' then\n        count = count + 1\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot256cur.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpot256cur.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  local vowels = 'aeiouy'\n  for i = 1, #s do\n    local c\
    \ = s:sub(i, i)\n    if vowels:find(c) ~= nil then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi409d8xt.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpi409d8xt.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local c = 0\n    for a, i in s:gmatch('[aeiou]') do\n        c = c + 1\n\
    \    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjpqqhkym.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpjpqqhkym.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {\n        a = true,\n        e = true,\n        i = true,\n\
    \        o = true,\n        u = true,\n        y = true\n    }\n    local count\
    \ = 0\n    local last_char = ''\n    for _, char in ipairs({s:byte(1, -1)}) do\n\
    \        if vowels[string.char(char)] then\n            count = count + 1\n  \
    \      end\n        last_char = string.char(char)\n    end\n    if last_char ==\
    \ 'y' then\n        count = count - 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmwcu17ed.lua:33:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpmwcu17ed.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for _,\
    \ char in ipairs(s:split('')) do\n        if char == 'y' and #s == _ then\n  \
    \          count = count + 1\n        elseif char:find('[aeiou]') then\n     \
    \       count = count + 1\n        end\n    end\n    return count\nend\nassert(vowels_count('doggy')\
    \ == 3)\nassert(vowels_count('santa') == 2)\nassert(vowels_count('tomato') ==\
    \ 3)\nassert(vowels_count('bad') == 1)\nassert(vowels_count('apostrophe') == 4)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpg0fi1m60.lua:9: attempt to call a nil value (method 'split')\n\
    stack traceback:\n\t/tmp/tmpg0fi1m60.lua:9: in local 'vowels_count'\n\t/tmp/tmpg0fi1m60.lua:18:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 0
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    s = s:lower()\n    local count = 0\n    for i = 1, #s do\n        if s:sub(i,\
    \ i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o'\
    \ or s:sub(i, i) == 'u' then\n            count = count + 1\n        end\n   \
    \ end\n    if s:sub(#s, #s) == 'y' then\n        count = count + 1\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- TODO: implement the function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpex62_upj.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpex62_upj.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- s = assert(s, 'expected a string')\n    s = tostring(s)\n    -- print(#s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vc = 0\n    for i = 1,\
    \ #s do\n        local c = s:sub(i, i)\n        for j = 1, #vowels do\n      \
    \      if c == vowels[j] then\n                vc = vc + 1\n            end\n\
    \        end\n    end\n    return vc\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rnmbja1.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp3rnmbja1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local ch = s:sub(i, i)\n \
    \       if ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u' then\n\
    \            count = count + 1\n        elseif ch == 'y' and i == #s then\n  \
    \          count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3d74394.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpv3d74394.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    return s:gsub(\"[^aeiouy]\",\"\"):len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v5ebkg_.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp9v5ebkg_.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx0jaevh.lua:12:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpjx0jaevh.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- ...\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp410c8qzb.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp410c8qzb.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx0jaevh.lua:12:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpjx0jaevh.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- your code here\nend\nassert(vowels_count('abracadabra') == 5)\nassert(vowels_count('aeiou')\
    \ == 5)\nassert(vowels_count('why') == 1)\nassert(vowels_count('bye') == 2)\n\
    assert(vowels_count('tomato') == 3)\nassert(vowels_count('potato') == 3)\nassert(vowels_count('syzygy')\
    \ == 3)\nassert(vowels_count('rhythm') == 2)\nassert(vowels_count('chlorophyll')\
    \ == 4)\nassert(vowels_count('columbus') == 3)\nassert(vowels_count('dictionary')\
    \ == 4)\nassert(vowels_count('autonomous') == 4)\nassert(vowels_count('volcano')\
    \ == 3)\nassert(vowels_count('library') == 3)\nassert(vowels_count('nth') == 1)\n\
    assert(vowels_count('carpet') == 2)\nassert(vowels_count('rhyme') == 2)\nassert(vowels_count('almanac')\
    \ == 3)\nassert(vowels_count('alphabet') == 3)\nassert(vowels_count('abacus')\
    \ == 2)\nassert(vowels_count('pneumonia') == 4)\nassert(vowels_count('pharmacy')\
    \ == 3)\nassert(vowels_count('rhyme') == 2)\nassert(vowels_count('cyclops') ==\
    \ 3)\nassert(vowels_count('rhythm') == 2)\nassert(vowels_count('quartz') == 2)\n\
    assert(vowels_count('quadcopter') == 3)\nassert(vowels_count('abracadabra') ==\
    \ 5)\nassert(vowels_count('pneumonoultramicroscopicsilicovolcanoconiosis') ==\
    \ 10)\nassert(vowels_count('psychology') == 4)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp5txauumc.lua:9: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp5txauumc.lua:9: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n       c == 'y' or (c\
    \ == 'y' and i == #s) then\n      count = count + 1\n    end\n  end\n  return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp85bkylyj.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp85bkylyj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local cnt = 0\n  for c in s:gmatch(\"[aeiou]\") do\n    cnt = cnt + 1\n  end\n\
    \  if c == \"y\" then\n    cnt = cnt + 1\n  end\n  return cnt\nend\nassert(vowels_count(\"\
    luarocks\") == 3)\nassert(vowels_count(\"luarocksy\") == 4)\nassert(vowels_count(\"\
    a\") == 1)\nassert(vowels_count(\"hy\") == 1)\nassert(vowels_count(\"y\") == 1)\n\
    assert(vowels_count(\"\") == 0)\nassert(vowels_count(\"ghfds\") == 0)\nassert(vowels_count(\"\
    abcd\") == 1)\nassert(vowels_count(\"yello\") == 2)\nassert(vowels_count(\"yellow\"\
    ) == 3)\nassert(vowels_count(\"yellot\") == 2)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpjg_d1dkq.lua:17: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpjg_d1dkq.lua:17: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  if not type(s) == \"string\" then return 0 end\n  local num_vowels = 0\n  local\
    \ vowels = {\"a\", \"e\", \"i\", \"o\", \"u\"}\n  for i=1, #s do\n    local c\
    \ = s:sub(i, i)\n    for k, v in pairs(vowels) do\n      if c == v then\n    \
    \    num_vowels = num_vowels + 1\n      end\n    end\n  end\n  return num_vowels\n\
    end\nassert(vowels_count(\"hello\") == 2)\nassert(vowels_count(\"hooohoohoy\"\
    ) == 6)\nassert(vowels_count(\"frooob\") == 2)\nassert(vowels_count(\"a\") ==\
    \ 1)\nassert(vowels_count(\"\") == 0)\nassert(vowels_count(3) == 0)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpblbdicpo.lua:22: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpblbdicpo.lua:22: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local last_char = string.sub(s, -1)\n    if last_char\
    \ == 'y' then\n        count = count + 1\n    end\n    for i = 1, #s do\n    \
    \    local c = string.sub(s, i, i)\n        if c == 'a' or c == 'e' or c == 'i'\
    \ or c == 'o' or c == 'u' then\n            count = count + 1\n        end\n \
    \   end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu4h4nldu.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpu4h4nldu.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  local len = #s\n  for i = 1, len do\n    local curr = s:sub(i,\
    \ i)\n    if (curr == 'a' or curr == 'e' or curr == 'i' or curr == 'o' or curr\
    \ == 'u') or (curr == 'y' and i == len) then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nprint(vowels_count('hello'))\nprint(vowels_count('world'))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "2\n1\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhbnvy_i.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpjhbnvy_i.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    return select(2, s:gsub(\"[aeiouyAEIOUY]\", \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_tvkr_fi.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmp_tvkr_fi.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local counter = 0\n    for\
    \ i = 1, #s do\n        if s[i] == 'y' and i == #s then\n            counter =\
    \ counter + 1\n        elseif table.contains(vowels, s[i]) then\n            counter\
    \ = counter + 1\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoe40whhd.lua:12:\
    \ attempt to call a nil value (field 'contains')\nstack traceback:\n\t/tmp/tmpoe40whhd.lua:12:\
    \ in local 'candidate'\n\t/tmp/tmpoe40whhd.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local n = 0\n    for c in s:gmatch '.' do\n        if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' or\n            c == 'y' and s:find(c, #s)\
    \ == #s then\n            n = n + 1\n        end\n    end\n    return n\nend\n\
    assert(vowels_count 'hello' == 2)\nassert(vowels_count 'mother' == 2)\nassert(vowels_count\
    \ 'elementary' == 4)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpqktlov3y.lua:18: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpqktlov3y.lua:18: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local v = 0\n  for c in s:gmatch(\".\") do\n    if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' or\n       (c == 'y' and #s == 1) then\n  \
    \    v = v + 1\n    end\n  end\n  return v\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdvym589z.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpdvym589z.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6428g5n.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpb6428g5n.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local n = 0\n    for _, c in pairs(s:lower():gmatch('[aeiouy]')) do\n   \
    \     n = n + 1\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphw30e91c.lua:8:\
    \ bad argument #1 to 'for iterator' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmphw30e91c.lua:8: in local 'candidate'\n\t/tmp/tmphw30e91c.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {\n        ['a'] = true,\n        ['e'] = true,\n        ['i']\
    \ = true,\n        ['o'] = true,\n        ['u'] = true,\n        ['y'] = true,\n\
    \    }\n    local n_vowels = 0\n    for i = 1, #s do\n        local c = s:sub(i,\
    \ i)\n        if vowels[c] then\n            n_vowels = n_vowels + 1\n       \
    \ end\n    end\n    return n_vowels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz33w6f_c.lua:29:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpz33w6f_c.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnujgf6z_.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpnujgf6z_.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local ct = 0\n    local last = #s\n    if last == 0 then return 0 end\n \
    \   local lastchar = s:sub(last, last)\n    if lastchar == 'y' then\n        ct\
    \ = ct + 1\n    end\n    for i = 1, last - 1 do\n        local char = s:sub(i,\
    \ i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char\
    \ == 'u' then\n            ct = ct + 1\n        end\n    end\n    return ct\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdwyorktq.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpdwyorktq.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 0
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    s = s:lower()\n    local count = 0\n    for i = 1, #s do\n        if s:sub(i,\
    \ i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o'\
    \ or s:sub(i, i) == 'u' then\n            count = count + 1\n        end\n   \
    \ end\n    if s:sub(#s, #s) == 'y' then\n        count = count + 1\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal VOWELS = {'a', 'e', 'i', 'o', 'u'}\n\tlocal i = 0\n\tlocal c = 0\n\twhile\
    \ i < #s do\n\t\tlocal char = s:sub(i, i)\n\t\tif table.contains(VOWELS, char)\
    \ then\n\t\t\tc = c + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn c\nend\nassert(\
    \ vowels_count('strawberry') == 4 )\nassert( vowels_count('onion') == 3 )\nassert(\
    \ vowels_count('fat') == 1 )\nassert( vowels_count('fry') == 1 )\nassert( vowels_count('blueberry')\
    \ == 4 )\nassert( vowels_count('rhythm') == 2 )\nassert( vowels_count('yes') ==\
    \ 2 )\nassert( vowels_count('triple') == 2 )\nassert( vowels_count('eel') == 2\
    \ )\nassert( vowels_count('red') == 1 )\nassert( vowels_count('happy') == 2 )\n\
    assert( vowels_count('berry') == 2 )\nassert( vowels_count('y') == 1 )\nassert(\
    \ vowels_count('my') == 1 )\nassert( vowels_count('cake') == 2 )\nassert( vowels_count('maple')\
    \ == 2 )\nassert( vowels_count('honey') == 2 )\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpa881b5_z.lua:12: attempt to call a nil value (field 'contains')\n\
    stack traceback:\n\t/tmp/tmpa881b5_z.lua:12: in local 'vowels_count'\n\t/tmp/tmpa881b5_z.lua:19:\
    \ in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgbgorf4l.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpgbgorf4l.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      count = count\
    \ + 1\n    elseif c == 'y' and i == #s then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7t1y96an.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp7t1y96an.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- TODO: implement\nend\nassert(vowels_count(\"rabbit\") == 2)\nassert(vowels_count(\"\
    love\") == 2)\nassert(vowels_count(\"apple\") == 2)\nassert(vowels_count(\"pikachu\"\
    ) == 3)\nassert(vowels_count(\"rabbitrabbitrabbit\") == 8)\nassert(vowels_count(\"\
    worl\") == 1)\nassert(vowels_count(\"yolll\") == 4)\nprint(\"Exercise 7 passed!\"\
    )\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpnfcgv9ha.lua:9: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpnfcgv9ha.lua:9: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, s:len() do\n        local l = s:sub(i, i)\n\
    \        if l == 'a' or l == 'e' or l == 'i' or l == 'o' or l == 'u' or\n    \
    \       (l == 'y' and i == s:len()) then\n            count = count + 1\n    \
    \    end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppqt3hghf.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmppqt3hghf.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- TODO: implement this function\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5z28ko2r.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp5z28ko2r.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local\
    \ count = 0\n    local last = string.sub(s, -1)\n    for i=1, #s do\n        local\
    \ char = string.sub(s, i, i)\n        if vowels[char] then\n            count\
    \ = count + 1\n        end\n    end\n    if last == 'y' then\n        count =\
    \ count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9q0mnno.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpn9q0mnno.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local vowels = {['a'] = 1, ['e'] = 1, ['i'] = 1, ['o'] = 1, ['u'] = 1, ['y']\
    \ = 1}\n  local result = 0\n  local last = string.sub(s, -1)\n  for i = 1, #s\
    \ - 1 do\n    if vowels[string.sub(s, i, i)] then\n      result = result + 1\n\
    \    end\n  end\n  if vowels[last] then\n    result = result + 1\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4u___7yo.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4u___7yo.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = 'aeiouy'\n    local counter = 0\n    for i = 1, #s do\n  \
    \      if vowels:find(s:sub(i, i), 1, true) then\n            counter = counter\
    \ + 1\n        end\n    end\n    return counter\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9ncissu.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpi9ncissu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal vowel = 0\n\tlocal array = {}\n\tlocal pattern = \"[aeiouAEIOU]\"\n\t\
    array = split(s)\n\tfor i=1, #array do\n\t\tfor ch in gmatch(array[i], pattern)\
    \ do\n\t\t\tvowel = vowel + 1\n\t\tend\n\tend\n\treturn vowel\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzjovl7es.lua:10:\
    \ attempt to call a nil value (global 'split')\nstack traceback:\n\t/tmp/tmpzjovl7es.lua:10:\
    \ in local 'candidate'\n\t/tmp/tmpzjovl7es.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- This is not the best way to do this, but it is a way.\n    -- Try to use\
    \ a loop and keep a counter.\n    -- You will also need to check that the input\
    \ is a string.\n    local count = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u',\
    \ 'y'}\n    for i = 1, #s do\n        if vowels[s:sub(i, i)] then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg21wyha8.lua:23:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpg21wyha8.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  return s:gsub(\"[^aeiouy]\", \"\"):len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cwudpmk.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5cwudpmk.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- ..\nend\nassert(vowels_count(\"bravo\") == 2)\nassert(vowels_count(\"\
    oscar\") == 3)\nassert(vowels_count(\"yankee\") == 3)\nassert(vowels_count(\"\
    yankee1\") == 3)\nassert(vowels_count(\"yankee11\") == 4)\nassert(vowels_count(\"\
    yankee13\") == 5)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpjlc8w6w5.lua:9: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpjlc8w6w5.lua:9: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for i\
    \ = 1, #s do\n        local c = s:sub(i, i)\n        for _, vowel in ipairs(vowels)\
    \ do\n            if c == vowel then\n                count = count + 1\n    \
    \        end\n        end\n    end\n    if s:sub(-1) == 'y' then\n        count\
    \ = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpszh1xl7x.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpszh1xl7x.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   return string.gsub(s, \"[aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm3slgqw.lua:13:\
    \ expected: 2, actual: \"bcd\"\nstack traceback:\n\t/tmp/tmpmm3slgqw.lua:13: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n    \
    \        count = count + 1\n        elseif c == 'y' and i == #s then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5my1irq4.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5my1irq4.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for char in s:gmatch('[aeiouy]') do\n        count =\
    \ count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxrf4bqhv.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpxrf4bqhv.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzs9vxk15.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpzs9vxk15.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local vowels = 0\n  local vowels_except_y = { 'a', 'e', 'i', 'o', 'u' }\n \
    \ for i = 1, #s do\n    if vowels_except_y[s:sub(i, i)] then\n      vowels = vowels\
    \ + 1\n    elseif s:sub(i, i) == 'y' and i == #s then\n      vowels = vowels +\
    \ 1\n    end\n  end\n  return vowels\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0evfym3.lua:22:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpz0evfym3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n  \
    \      if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n    \
    \        count = count + 1\n        elseif c == 'y' and i == #s then\n       \
    \     count = count + 1\n        end\n    end\n    return count\nend\nassert(vowels_count('abc')\
    \ == 1)\nassert(vowels_count('abcdef') == 2)\nassert(vowels_count('abcdefgh')\
    \ == 3)\nassert(vowels_count('abcdefghi') == 4)\nassert(vowels_count('abcdefghij')\
    \ == 5)\nassert(vowels_count('abcdefghijk') == 5)\nassert(vowels_count('bcdefghijk')\
    \ == 0)\nassert(vowels_count('aby') == 2)\nassert(vowels_count('abyd') == 2)\n\
    assert(vowels_count('abyde') == 3)\nassert(vowels_count('abydef') == 3)\nassert(vowels_count('abydefg')\
    \ == 4)\nassert(vowels_count('abydefgh') == 4)\nassert(vowels_count('abydefghi')\
    \ == 5)\nassert(vowels_count('abydefghij') == 5)\nassert(vowels_count('abydefghijk')\
    \ == 5)\nassert(vowels_count('bcyd') == 1)\nassert(vowels_count('bcyde') == 2)\n\
    assert(vowels_count('bcydef') == 2)\nassert(vowels_count('bcydefg') == 3)\nassert(vowels_count('bcydefgh')\
    \ == 3)\nassert(vowels_count('bcydefghi') == 4)\nassert(vowels_count('bcydefghij')\
    \ == 4)\nassert(vowels_count('bcydefghijk') == 4)\nassert(vowels_count('bcy')\
    \ == 1)\nassert(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8kw_cou7.lua:44: '')'' expected (to close ''('' at line 43)
    near ''=''

    '
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    if #s == 0 then\n        return 0\n    elseif #s == 1 then\n        if string.find(\"\
    aeiouy\", s) then\n            return 1\n        else\n            return 0\n\
    \        end\n    else\n        if string.find(\"aeiouy\", s:sub(1, 1)) then\n\
    \            return 1 + vowels_count(s:sub(2))\n        else\n            return\
    \ vowels_count(s:sub(2))\n        end\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttebyue3.lua:28:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpttebyue3.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnujgf6z_.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpnujgf6z_.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal count = 0\n\tfor i = 1, #s do\n\t\tif s:sub(i, i) == 'a' or s:sub(i, i)\
    \ == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or\
    \ (s:sub(i, i) == 'y' and i == #s) then\n\t\t\tcount = count + 1\n\t\tend\n\t\
    end\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp788bqwve.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp788bqwve.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local cnt = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n    \
    \    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n        \
    \   (c == 'y' and i == #s) then\n            cnt = cnt + 1\n        end\n    end\n\
    \    return cnt\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg0nd7dg7.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpg0nd7dg7.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnujgf6z_.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpnujgf6z_.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  return #s:gsub(\"[aeiouyAEIOUY]\", \"\")\nend\nprint(\"\\nVowels count\")\n\
    print(vowels_count(\"Lua\"))\nprint(vowels_count(\"Lua is Awesome\"))\nprint(vowels_count(\"\
    Why Lua is awesome?\"))\nprint(vowels_count(\"That's why!\"))\nprint(vowels_count(\"\
    Haskell\"))\nprint(vowels_count(\"Haskell is awesome\"))\nprint(vowels_count(\"\
    Why Haskell is awesome?\"))\nprint(vowels_count(\"That's why!\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "\nVowels count\n1\n7\n11\n9\n5\n11\n15\n9\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpy1ctcr5h.lua:22: expected: 2, actual: 3\nstack traceback:\n\
    \t/tmp/tmpy1ctcr5h.lua:22: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local r = 0\n    for i = 1, string.len(s) do\n        if 'aeiouyAEIOUY'\n\
    \            :find(string.sub(s, i, i), 1, true) then\n            r = r + 1\n\
    \        end\n    end\n    return r\nend\nassert(vowels_count('aeiouy') == 6)\n\
    assert(vowels_count('aeiou') == 5)\nassert(vowels_count('aeiou') == 5)\nassert(vowels_count('abcdefghijk')\
    \ == 3)\nassert(vowels_count('edabit') == 3)\nassert(vowels_count('developer')\
    \ == 4)\nassert(vowels_count('EOI') == 2)\nassert(vowels_count('lifeisshort')\
    \ == 3)\nassert(vowels_count('love') == 2)\nassert(vowels_count('sky') == 1)\n\
    assert(vowels_count('stranger') == 3)\nassert(vowels_count('trybe') == 3)\nassert(vowels_count('why')\
    \ == 0)\nassert(vowels_count('Yellow') == 2)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp46ewxjam.lua:10: ''then'' expected near '':''

    '
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = 'aeiouy'\n    local count = 0\n    for i=1,#s do\n       \
    \ if vowels:find(s:sub(i,i)) then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvz8u70dk.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpvz8u70dk.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for c in s:gmatch('[aeiouy]') do\n    count = count + 1\n\
    \  end\n  if count == 0 and s:sub(-1, -1) == 'y' then\n    count = 1\n  end\n\
    \  return count\nend\nassert(vowels_count('hello') == 2)\nassert(vowels_count('happy')\
    \ == 2)\nassert(vowels_count('happi') == 2)\nassert(vowels_count('happyy') ==\
    \ 3)\nassert(vowels_count('e') == 1)\nassert(vowels_count('y') == 1)\nassert(vowels_count('xyz')\
    \ == 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpi1zsavwk.lua:22: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpi1zsavwk.lua:22: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm06zumvp.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpm06zumvp.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local total = 0\n    local vowel = {a = true, e = true, i = true, o = true,\
    \ u = true, y = true}\n    for i = 1, #s do\n        if vowel[s:sub(i, i)] then\n\
    \            total = total + 1\n        end\n    end\n    return total\nend\n\
    assert(vowels_count(\"air\") == 2)\nassert(vowels_count(\"berry\") == 3)\nassert(vowels_count(\"\
    \") == 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpgb8sd_jg.lua:17: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpgb8sd_jg.lua:17: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx0jaevh.lua:12:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpjx0jaevh.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- Your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg67n6xg8.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpg67n6xg8.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx0jaevh.lua:12:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpjx0jaevh.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    if string.len(s) == 0 then\n        return 0\n    elseif string.find(s, \"\
    a\") == 1 then\n        return 1 + vowels_count(string.sub(s, 2))\n    elseif\
    \ string.find(s, \"e\") == 1 then\n        return 1 + vowels_count(string.sub(s,\
    \ 2))\n    elseif string.find(s, \"i\") == 1 then\n        return 1 + vowels_count(string.sub(s,\
    \ 2))\n    elseif string.find(s, \"o\") == 1 then\n        return 1 + vowels_count(string.sub(s,\
    \ 2))\n    elseif string.find(s, \"u\") == 1 then\n        return 1 + vowels_count(string.sub(s,\
    \ 2))\n    elseif string.find(s, \"y\") == 1 then\n        return 1 + vowels_count(string.sub(s,\
    \ 2))\n    else\n        return vowels_count(string.sub(s, 2))\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthspnbm2.lua:30:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpthspnbm2.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local c = 0\n  for i = 1, #s do\n    if (s:sub(i, i) == 'a' or s:sub(i, i)\
    \ == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u' or\n\
    \      (s:sub(i, i) == 'y' and i == #s)) then\n      c = c + 1\n    end\n  end\n\
    \  return c\nend\nassert(vowels_count('abracadabra') == 5)\nassert(vowels_count('ate')\
    \ == 2)\nassert(vowels_count('apple') == 2)\nassert(vowels_count('appley') ==\
    \ 3)\nassert(vowels_count('lemon') == 2)\nassert(vowels_count('plethora') == 3)\n\
    assert(vowels_count('room') == 2)\nassert(vowels_count('the') == 1)\nassert(vowels_count('typhoon')\
    \ == 3)\nassert(vowels_count('you') == 2)\nassert(vowels_count('your') == 2)\n\
    assert(vowels_count('youth') == 2)\nassert(vowels_count('youtube') == 2)\nassert(vowels_count('zoom')\
    \ == 1)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpo6m48rk_.lua:24: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpo6m48rk_.lua:24: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- PLACE YOUR CODE HERE\n  local count = 0\n  for i = 1, string.len(s) do\n\
    \    if s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i,\
    \ i) == 'o' or s:sub(i, i) == 'u' or (s:sub(i, i) == 'y' and i == string.len(s))\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo5nozpgw.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpo5nozpgw.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   local count = 0\n   for _, c in s:gmatch '.' do\n      if c:match '[aeiou]y?'\
    \ then\n         count = count + 1\n      end\n   end\n   return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf9f7qih2.lua:9:\
    \ attempt to index a nil value (local 'c')\nstack traceback:\n\t/tmp/tmpf9f7qih2.lua:9:\
    \ in local 'candidate'\n\t/tmp/tmpf9f7qih2.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local\
    \ count = 0\n  for i = 1, #s do\n    local letter = s:sub(i, i)\n    if vowels[letter]\
    \ then\n      count = count + 1\n    end\n  end\n  local last_letter = s:sub(-1)\n\
    \  if last_letter == 'y' then\n    count = count + 1\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3hotsaw.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpn3hotsaw.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal n = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo6bu7vho.lua:21: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnujgf6z_.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpnujgf6z_.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 0
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local s = s:lower()\n    local count = 0\n    for i = 1, #s do\n        if\
    \ s:sub(i, i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i)\
    \ == 'o' or s:sub(i, i) == 'u' then\n            count = count + 1\n        end\n\
    \    end\n    if s:sub(#s, #s) == 'y' then\n        count = count + 1\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- TODO: Write the function\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7xxct8r.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpy7xxct8r.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {['a'] = true, ['e'] = true, ['i'] = true, ['o'] = true, ['u']\
    \ = true}\n    local count = 0\n    for i = 1, string.len(s) do\n        if vowels[string.sub(s,\
    \ i, i)] then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpalggocw8.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpalggocw8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    if #s == 0 then\n        return 0\n    elseif s:find(\"[aeiouy]\") then\n\
    \        return 1 + vowels_count(s:sub(s:find(\"[aeiouy]\") + 1))\n    else\n\
    \        return 0\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2hrkp_4j.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp2hrkp_4j.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local\
    \ count = 0\n    local last = string.sub(s, string.len(s))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh7ifwtl.lua:23: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  return #s:gsub(\"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9gvuahgk.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp9gvuahgk.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local v = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n      (c == 'y' and i ==\
    \ #s) then\n      v = v + 1\n    end\n  end\n  return v\nend\nassert(vowels_count(\"\
    hello\") == 2)\nassert(vowels_count(\"world\") == 1)\nassert(vowels_count(\"motorcycles\"\
    ) == 4)\nassert(vowels_count(\"fly\") == 1)\nassert(vowels_count(\"dry\") == 1)\n\
    assert(vowels_count(\"play\") == 2)\nassert(vowels_count(\"stay\") == 2)\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmphqa2wlga.lua:19: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmphqa2wlga.lua:19: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- if s == \"\" then return 0 end\n  local n = 0\n  for i = 1, #s do\n    local\
    \ c = s:sub(i, i)\n    if c == \"a\" or c == \"e\" or c == \"i\" or c == \"o\"\
    \ or c == \"u\" or\n      (c == \"y\" and i == #s) then\n      n = n + 1\n   \
    \ end\n  end\n  return n\nend\nassert(vowels_count(\"\") == 0)\nassert(vowels_count(\"\
    ii\") == 2)\nassert(vowels_count(\"lid\") == 1)\nassert(vowels_count(\"not a word\"\
    ) == 1)\nassert(vowels_count(\"wonderful\") == 4)\nassert(vowels_count(\"empty\
    \ vowels\") == 2)\nassert(vowels_count(\"wry\") == 1)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpkl7q0tog.lua:21: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpkl7q0tog.lua:21: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local count = 0\n    for _,\
    \ v in ipairs(vowels) do\n        for w in s:gmatch(v) do\n            count =\
    \ count + 1\n        end\n    end\n    return count\nend\nassert(vowels_count('amor')\
    \ == 2)\nassert(vowels_count('trem') == 1)\nassert(vowels_count('pudim') == 3)\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp8adoazqk.lua:18: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp8adoazqk.lua:18: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for c in s:gmatch('.') do\n    if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' or\n      (c == 'y' and s:sub(s:len()) == 'y')\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfe_k99n8.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpfe_k99n8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for c in s:gmatch(\".\") do\n    if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' or\n       c == 'y' and s:sub(#s) == 'y'\
    \ then\n      count = count + 1\n    end\n  end\n  return count\nend\nprint(vowels_count(\"\
    hello world\"))\nprint(vowels_count(\"sammy\"))\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "3\n2\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph6kngvc3.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmph6kngvc3.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local c = 0\n  for i = 1, #s do\n    local c1 = s:sub(i, i)\n    if c1 == 'a'\
    \ or c1 == 'e' or c1 == 'i' or c1 == 'o' or c1 == 'u' or\n       c1 == 'y' and\
    \ i == #s then\n      c = c + 1\n    end\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq17suvi_.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpq17suvi_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpec41yk95.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpec41yk95.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   local result = 0\n   local i = 1\n   while i <= #s do\n      local c = s:sub(i,\
    \ i)\n      if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \         result = result + 1\n      elseif c == 'y' and i == #s then\n      \
    \   result = result + 1\n      end\n      i = i + 1\n   end\n   return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwg0bge_0.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpwg0bge_0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local c = 0\n    for i = 1, string.len(s) do\n        if string.sub(s, i,\
    \ i) == 'a' or string.sub(s, i, i) == 'e' or string.sub(s, i, i) == 'i' or string.sub(s,\
    \ i, i) == 'o' or string.sub(s, i, i) == 'u' or string.sub(s, i, i) == 'y' then\n\
    \            c = c + 1\n        end\n    end\n    return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg03jjioa.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpg03jjioa.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    if string.len(s) == 0 then\n        return 0\n    elseif string.find(\"aeiouy\"\
    , string.sub(s, string.len(s), string.len(s))) then\n        return 1 + vowels_count(string.sub(s,\
    \ 1, string.len(s) - 1))\n    else\n        return vowels_count(string.sub(s,\
    \ 1, string.len(s) - 1))\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp22r3ficu.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp22r3ficu.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm06zumvp.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpm06zumvp.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    end\nassert(vowels_count(\"word\") == 1)\nassert(vowels_count(\"attitude\") ==\
    \ 4)\nassert(vowels_count(\"streamline\") == 4)\nassert(vowels_count(\"abracadabra\"\
    ) == 5)\nassert(vowels_count(\"yolo\") == 2)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpwumtz9za.lua:8: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpwumtz9za.lua:8: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal n = 0\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n\t\t   (c == 'y' and i ==\
    \ #s) then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nassert(vowels_count(\"\
    hello\") == 2)\nassert(vowels_count(\"toto\") == 2)\nassert(vowels_count(\"tetu\"\
    ) == 2)\nassert(vowels_count(\"titi\") == 2)\nassert(vowels_count(\"tyty\") ==\
    \ 2)\nassert(vowels_count(\"yoyo\") == 3)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp9kt1m0wh.lua:21: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp9kt1m0wh.lua:21: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local counter = 0\n  for i,v in ipairs(s) do\n    if v == 'a' or v == 'e' or\
    \ v == 'i' or v == 'o' or v == 'u' or v == 'y' then\n      counter = counter +\
    \ 1\n    end\n  end\n  return counter\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw17ydftl.lua:19:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpw17ydftl.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal count = 0\n\tfor char in s:gmatch(\"%a\") do\n\t\tif char == \"a\" or\
    \ char == \"e\" or char == \"i\" or char == \"o\" or char == \"u\" or char ==\
    \ \"y\" then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e5ncg4u.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5e5ncg4u.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {\n        ['a'] = true,\n        ['e'] = true,\n        ['i']\
    \ = true,\n        ['o'] = true,\n        ['u'] = true,\n        ['y'] = true,\n\
    \    }\n    local count = 0\n    for c in s:gmatch(\".\") do\n        if vowels[c]\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5uv382q.lua:28:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpq5uv382q.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal count = 0\n\tlocal vowel = {a=1, e=1, i=1, o=1, u=1, y=1}\n\tlocal last_char\
    \ = string.sub(s, string.len(s))\n\tfor i = 1, string.len(s) do\n\t\tif vowel[string.sub(s,\
    \ i, i)] then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\tif vowel[last_char]\
    \ then\n\t\tcount = count + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamslnaw0.lua:24:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpamslnaw0.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  local vowels = 'aeiouy'\n  for i = 1, #s do\n    local letter\
    \ = s:sub(i, i)\n    if vowels:find(letter) then\n      count = count + 1\n  \
    \  end\n  end\n  if count == 0 and s:sub(-1) == 'y' then\n    count = 1\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpes_58sio.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpes_58sio.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  s = s:lower()\n  local i = 0\n  while i < #s do\n    local ch = s:sub(i, i)\n\
    \    if ch == 'a' or ch == 'e' or ch == 'i' or ch == 'o' or ch == 'u' or\n   \
    \   (ch == 'y' and i == #s - 1) then\n      return true\n    end\n    i = i +\
    \ 1\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz37r4p45.lua:23:\
    \ expected: 2, actual: true\nstack traceback:\n\t/tmp/tmpz37r4p45.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local end_with_y = string.sub(s, -1) == 'y'\n    for\
    \ i=1,#s do\n        local c = string.sub(s, i, i)\n        if (c == 'a' or c\
    \ == 'e' or c == 'i' or c == 'o' or c == 'u') or\n           (c == 'y' and i ==\
    \ #s) or\n           (c == 'y' and end_with_y) then\n            count = count\
    \ + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4mwtmquz.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp4mwtmquz.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local result = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    for i\
    \ = 1, #s do\n        local c = s:sub(i, i)\n        if (vowels[c] or (c == 'y'\
    \ and i == #s)) then\n            result = result + 1\n        end\n    end\n\
    \    return result\nend\nassert(vowels_count('ab') == 1)\nassert(vowels_count('aeiouy')\
    \ == 6)\nassert(vowels_count('abcd') == 1)\nassert(vowels_count('xyz') == 0)\n\
    assert(vowels_count('hello') == 2)\nassert(vowels_count('hamburger') == 3)\nassert(vowels_count('yep')\
    \ == 1)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp79c3tud1.lua:17: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp79c3tud1.lua:17: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = 'aeiouy'\n    local count = 0\n    for ch in s:gmatch('.')\
    \ do\n        if vowels:find(ch) then\n            count = count + 1\n       \
    \ end\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn3gzj6x8.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpn3gzj6x8.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- Write code here to return number of vowels in s\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexvtx51m.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpexvtx51m.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \t-- your code here\n\tif s:sub(-1) == \"y\" then\n\t\treturn #(s:gsub(\"[aeiou]\"\
    , \"\"))\n\telse\n\t\treturn #(s:gsub(\"[aeiouy]\", \"\"))\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9j8jc9o.lua:18:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpy9j8jc9o.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- Your solution here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqgxwta19.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpqgxwta19.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   local cnt = 0\n   for i = 1, #s do\n      if string.find(\"aeiouy\", string.sub(s,\
    \ i, i)) then\n         cnt = cnt + 1\n      end\n   end\n   return cnt\nend\n\
    assert(vowels_count(\"abracadabra\") == 5)\nassert(vowels_count(\"rozy\") == 2)\n\
    assert(vowels_count(\"abracadabry\") == 6)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpvo8sp5np.lua:17: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpvo8sp5np.lua:17: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   -- TODO:\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpap0hw36g.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpap0hw36g.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local c = 0\n    for i = 1,\
    \ #s do\n        local ch = s:sub(i, i)\n        for _, v in ipairs(vowels) do\n\
    \            if ch == v then\n                c = c + 1\n            end\n   \
    \     end\n    end\n    if c > 0 and s:sub(-1) == 'y' then\n        c = c + 1\n\
    \    end\n    return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppomafeqi.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmppomafeqi.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    return s:gsub(\"[^aeiouy]\",\"\"):len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9v5ebkg_.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp9v5ebkg_.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local function is_vowel(c)\n    if string.find(\"aeiouy\", c) then\n      return\
    \ true\n    else\n      return false\n    end\n  end\n  local count = 0\n  for\
    \ i = 1, #s do\n    if is_vowel(s:sub(i, i)) then\n      count = count + 1\n \
    \   end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8yg2wsar.lua:27:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp8yg2wsar.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local c = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      c = c + 1\n    end\n\
    \  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9qn8mgke.lua:11:\
    \ attempt to add a 'string' with a 'number'\nstack traceback:\n\t/tmp/tmp9qn8mgke.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmp9qn8mgke.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- TODO: body goes here.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1emwqux.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpn1emwqux.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local result = 0\n  for i = 1, string.len(s) do\n    if (string.find(\"aeiouy\"\
    , string.sub(s, i, i)) ~= nil) then\n      result = result + 1\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsrs0etca.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpsrs0etca.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local i, count = 1, 0\n  while i <= #s do\n    local letter = s:sub(i, i)\n\
    \    if letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter\
    \ == 'u' or letter == 'y' then\n      count = count + 1\n    end\n    i = i +\
    \ 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmth704dd.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpmth704dd.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  return\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphmzc59eu.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmphmzc59eu.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal n = 0\n\tlocal t = {}\n\tfor w in s:gmatch('[aeiouy]') do\n\t\tif t[w]\
    \ then\n\t\t\tn = n + 1\n\t\t\tt[w] = nil\n\t\telse\n\t\t\tt[w] = true\n\t\tend\n\
    \tend\n\tif s:sub(-1) == 'y' then\n\t\tn = n + 1\n\tend\n\treturn n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3kvemkfz.lua:26:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp3kvemkfz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  return s:gsub(\"[^aeiouy]\", \"\"):len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cwudpmk.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5cwudpmk.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- your code goes here\nend\nassert(vowels_count(\"banana\") == 3)\nassert(vowels_count(\"\
    radical\") == 3)\nassert(vowels_count(\"hysterectomy\") == 5)\nassert(vowels_count(\"\
    yttrium\") == 2)\nassert(vowels_count(\"rhythm\") == 2)\nassert(vowels_count(\"\
    polyphony\") == 4)\nassert(vowels_count(\"hippopotamus\") == 5)\nassert(vowels_count(\"\
    my\") == 1)\nassert(vowels_count(\"by\") == 1)\nassert(vowels_count(\"syzygy\"\
    ) == 3)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpa80ia8zp.lua:9: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpa80ia8zp.lua:9: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local vowels = {a = 1, e = 1, i = 1, o = 1, u = 1, y = 1}\n  local n = 0\n\
    \  for i = 1, #s do\n    if vowels[s:sub(i, i)] ~= nil then\n      n = n + 1\n\
    \    end\n  end\n  return n\nend\nprint(vowels_count(\"snappysam\"))\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "3\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphjuz8bj_.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmphjuz8bj_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local chars = {}\n  for c in s:gmatch(\"%a\") do\n    table.insert(chars, c)\n\
    \  end\n  local n = 0\n  local is_vowel = function(c)\n    return c == 'a' or\
    \ c == 'e' or c == 'i' or c == 'o' or c == 'u'\n  end\n  local is_end_vowel =\
    \ function(c)\n    return c == 'y'\n  end\n  for i = 1, #chars do\n    if is_vowel(chars[i])\
    \ then\n      n = n + 1\n    elseif is_end_vowel(chars[i]) and i == #chars then\n\
    \      n = n + 1\n    end\n  end\n  return n\nend\nprint(vowels_count(\"hello\"\
    ))\nprint(vowels_count(\"hybrid\"))\nprint(vowels_count(\"xyz\"))\nprint(vowels_count(\"\
    aioue\"))\nprint(vowels_count(\"\"))\nprint(vowels_count(\"rhythm\"))\nprint(vowels_count(\"\
    why\"))\nprint(vowels_count(\"y\"))\nprint(vowels_count(\"Rovaniemi\"))\nprint(vowels_count(\"\
    aeiouy\"))\nprint(vowels_count(\"aeiouyaeiouy\"))\nprint(vowels_count(\"aeiouyaeiouyaeiouy\"\
    ))\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "2\n1\n0\n5\n0\n0\n1\n1\n5\n6\n11\n16\nF\nFailed tests:\n-------------\n\
    1) test_humaneval\n/tmp/tmpbasd880h.lua:44: expected: 3, actual: 2\nstack traceback:\n\
    \t/tmp/tmpbasd880h.lua:44: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local vowels = {a = true, e = true, i = true, o = true, u = true}\n  local\
    \ count = 0\n  for c in s:gmatch('.') do\n    if vowels[c] and (c ~= 'y' or c\
    \ == s:sub(-1)) then\n      count = count + 1\n    end\n  end\n  return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2orkxeac.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp2orkxeac.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    return s:gsub(\"[^aeiouy]\",\"\"):len()\nend\nassert(vowels_count(\"hello\"\
    ) == 2)\nassert(vowels_count(\"yellow\") == 2)\nassert(vowels_count(\"science\"\
    ) == 2)\nassert(vowels_count(\"programming\") == 4)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpfvllxpoe.lua:10: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpfvllxpoe.lua:10: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local total = 0\n  for _, v in utf8.codes(s) do\n    if v == 97 or v == 101\
    \ or v == 105 or v == 111 or v == 117 then\n      total = total + 1\n    end\n\
    \  end\n  return total\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbdbd2zj1.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpbdbd2zj1.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnujgf6z_.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpnujgf6z_.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    count = 0\n    vowels = \"aeiouy\"\n    for i = 1, #s do\n        if string.find(vowels,\
    \ string.sub(s, i, i)) ~= nil then\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8513fdxa.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp8513fdxa.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- Implement me\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0160si9a.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp0160si9a.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \t-- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffn65r2c.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpffn65r2c.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local last = string.sub(s, -1)\n    for i = 1, string.len(s)\
    \ do\n        local c = string.sub(s, i, i)\n        if c == 'a' or c == 'e' or\
    \ c == 'i' or c == 'o' or c == 'u' then\n            count = count + 1\n     \
    \   end\n    end\n    if last == 'y' then\n        count = count + 1\n    end\n\
    \    return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1wn_7fj1.lua:25:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp1wn_7fj1.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    end\ntest_vowels_count()\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp4ot_31hm.lua:8: attempt to call a nil value (global 'test_vowels_count')\n\
    stack traceback:\n\t/tmp/tmp4ot_31hm.lua:8: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_16w1zck.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp_16w1zck.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx0jaevh.lua:12:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpjx0jaevh.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local counter = 0\n    local str = string.lower(s)\n    for i=1,#str do\n\
    \        if str:sub(i,i) == 'a' or str:sub(i,i) == 'e' or str:sub(i,i) == 'i'\
    \ or str:sub(i,i) == 'o' or str:sub(i,i) == 'u' or str:sub(i,i) == 'y' then\n\
    \            counter = counter + 1\n        end\n    end\n    return counter\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpetbxkfv_.lua:23:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpetbxkfv_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  local y_vowel = false\n  for i = 1, #s do\n    local c =\
    \ s:sub(i, i)\n    if c == 'y' then\n      if i == #s then\n        y_vowel =\
    \ true\n      end\n    elseif c == 'a' or c == 'e' or c == 'i' or c == 'o' or\
    \ c == 'u' then\n      count = count + 1\n    end\n  end\n  if y_vowel then\n\
    \    count = count + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7it9_tte.lua:29:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp7it9_tte.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- vowels are 'a', 'e', 'i', 'o', 'u', 'y'\n    -- but 'y' is a vowel only\
    \ when it is at the end of the given word\n    -- e.g., 'sky' is a word, but not\
    \ 'sly'\n    -- only one 'y' at the end of the word is counted\n    -- e.g., 'sky'\
    \ has one vowel, but not 'skyy'\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjauj56nl.lua:25: ''end'' expected (to close ''function'' at
    line 6) near <eof>

    '
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- Fill in your code here.\nend\nprint(vowels_count(\"Hello\")) -- 2\nprint(vowels_count(\"\
    function\")) -- 3\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "\n\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcq7m_uys.lua:15:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpcq7m_uys.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  return s:gsub(\"[^aeiouy]\", \"\"):len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cwudpmk.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5cwudpmk.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- STUB: replace this line with your code\n  return 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8bjnlk3p.lua:14:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp8bjnlk3p.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local number = 0\n    for i=1,\
    \ string.len(s) do\n        if (s:sub(i, i) == 'y' and i == string.len(s)) or\n\
    \            table.index_of(vowels, s:sub(i, i)) > 0 then\n            number\
    \ = number + 1\n        end\n    end\n    return number\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpamoh0x4i.lua:11:\
    \ attempt to call a nil value (field 'index_of')\nstack traceback:\n\t/tmp/tmpamoh0x4i.lua:11:\
    \ in local 'candidate'\n\t/tmp/tmpamoh0x4i.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {['a'] = true, ['e'] = true, ['i'] = true, ['o'] = true, ['u']\
    \ = true}\n    local l = #s\n    local count = 0\n    for i = 1, l do\n      \
    \  local ch = s:sub(i, i)\n        if vowels[ch] then\n            count = count\
    \ + 1\n        end\n    end\n    if (count > 0) and (s:sub(l, l) == 'y') then\n\
    \        count = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpek9ib737.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpek9ib737.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- TODO: implement function here\nend\nassert(vowels_count(\"aeiou\") == 5)\n\
    assert(vowels_count(\"aeiouy\") == 6)\nassert(vowels_count(\"aeiouy.\") == 6)\n\
    assert(vowels_count(\"bcdfghjkl\") == 0)\nassert(vowels_count(\"bcdfghjkly\")\
    \ == 1)\nassert(vowels_count(\"bcd fghjkl\") == 0)\nassert(vowels_count(\"\")\
    \ == 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmptfiega2n.lua:9: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmptfiega2n.lua:9: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {a = true, e = true, i = true, o = true, u = true}\n    local\
    \ sum = 0\n    for c in s:gmatch('.') do\n        if vowels[c] then\n        \
    \    sum = sum + 1\n        end\n    end\n    if s:sub(-1) == 'y' then\n     \
    \   sum = sum + 1\n    end\n    return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0gzkgql3.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp0gzkgql3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvenjfgkk.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpvenjfgkk.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  --[[\n  Variables:\n  s: given string\n  vowel_count: number of vowels\n  ]]\n\
    \  vowel_count = 0\n  --[[\n  Helper functions:\n  is_vowel: given a letter and\
    \ string, check if the letter is a vowel\n  or the end letter of the string\n\
    \  ]]\n  function is_vowel(letter, s)\n    --[[\n    Variables:\n    bool: true\
    \ or false indicating whether letter is a vowel\n    ]]\n    bool = false\n  \
    \  -- if letter is a vowel and it is not the end letter of the string\n    if\
    \ (letter == 'a' or letter == 'e' or letter == 'i' or letter == 'o' or letter\
    \ == 'u') and letter ~= s[#s] then\n      bool = true\n    -- if letter is 'y'\
    \ and it is the end letter of the string\n    elseif letter == 'y' and letter\
    \ == s[#s] then\n      bool = true\n    end\n    return bool\n  end\n  -- iterate\
    \ through every letter in string\n  for i = 1,#s do\n    if is_vowel(s:sub(i,i),\
    \ s) then\n      vowel_count = vowel_count + 1\n    end\n  end\n  return vowel_count\n\
    end\nassert(vowels_count(\"coderbyte\") == 3)\nassert(vowels_count(\"y\") == 1)\n\
    assert(vowels_count(\"hello\") == 2)\nassert(vowels_count(\"coderbytey\") == 4)\n\
    assert(vowels_count(\"coderbytex\") == 3)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpptw30jik.lua:42: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpptw30jik.lua:42: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal count = 0\n\tfor c in s:gmatch(\"[aeiouy]\") do\n\t\tcount = count + 1\n\
    \tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpezklgwea.lua:18:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpezklgwea.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  return #s:lower():gsub(\"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj0xqu9_b.lua:16:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpj0xqu9_b.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- body\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvenjfgkk.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpvenjfgkk.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    if s == \"\" then\n        return 0\n    elseif not string.find(s, \"[aeiouy]\"\
    ) then\n        return 0\n    else\n        local i = string.find(s, \"[aeiouy]\"\
    )\n        local c = string.sub(s, i, i)\n        if i == string.len(s) then\n\
    \            return 1 + vowels_count(string.sub(s, 1, i - 1))\n        else\n\
    \            return vowels_count(string.sub(s, 1, i - 1)) + vowels_count(string.sub(s,\
    \ i + 1))\n        end\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kxws8ok.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8kxws8ok.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   local count = 0\n   for c in s:gmatch(\".\") do\n      if c == 'a' or c ==\
    \ 'e' or c == 'i' or c == 'o' or c == 'u' or\n         c == 'y' and (c == string.sub(s,\
    \ -1)) then\n         count = count + 1\n      end\n   end\n   return count\n\
    end\nprint(\"vowels_count('vowels'):\", vowels_count('vowels'))\nprint(\"vowels_count('fry'):\"\
    , vowels_count('fry'))\nprint(\"vowels_count('fly'):\", vowels_count('fly'))\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "vowels_count('vowels'):\t2\nvowels_count('fry'):\t1\nvowels_count('fly'):\t\
    1\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1fqgju64.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp1fqgju64.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    --[[\n    local vowels = { 'a', 'e', 'i', 'o', 'u' }\n    local count = 0\n\
    \    for i = 1, #s do\n        for j = 1, #vowels do\n            if s:sub(i,\
    \ i) == vowels[j] then\n                count = count + 1\n            end\n \
    \       end\n    end\n    return count\n    --]]\n    return (s:gsub('[^aeiouy]',\
    \ ''):gsub('y$', ''):len())\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm9kwjlxh.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpm9kwjlxh.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  -- TODO: write your code here\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk9o0x2lc.lua:15:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpk9o0x2lc.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \treturn #s:gsub(\"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpazhvcqgf.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpazhvcqgf.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    return #s:gsub(\"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfaq0akjh.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpfaq0akjh.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local c = 0\n    for x in s:gmatch(\"[aeiouy]\") do\n        c = c + 1\n\
    \    end\n    if (s:sub(-1) == \"y\") then\n        c = c + 1\n    end\n    return\
    \ c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeb0zw244.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpeb0zw244.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \treturn string.len(string.gsub(s, \"[^aeiouy]\", \"\"))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk106cddm.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpk106cddm.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnujgf6z_.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpnujgf6z_.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- Add your code here\n  return s:gsub(\"[^aeiouy]\", \"\"):len()\nend\nassert(vowels_count(\"\
    aa\") == 2)\nassert(vowels_count(\"aeiou\") == 5)\nassert(vowels_count(\"ab\"\
    ) == 1)\nassert(vowels_count(\"cy\") == 1)\nassert(vowels_count(\"c\") == 0)\n\
    assert(vowels_count(\"\") == 0)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprrljd793.lua:21:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmprrljd793.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local n = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n      \
    \  if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n        (c\
    \ == 'y' and i == #s) then\n            n = n + 1\n        end\n    end\n    return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6or2rv4.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpj6or2rv4.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 0
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    s = s:lower()\n    local count = 0\n    for i = 1, #s do\n        if s:sub(i,\
    \ i) == 'a' or s:sub(i, i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o'\
    \ or s:sub(i, i) == 'u' then\n            count = count + 1\n        end\n   \
    \ end\n    if count == 0 then\n        return 0\n    elseif s:sub(#s, #s) == 'y'\
    \ then\n        return count + 1\n    else\n        return count\n    end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal vowels = \"aeiouy\"\n\tlocal count = 0\n\tfor i = 1, #s do\n\t\tlocal\
    \ letter = s:sub(i, i)\n\t\tif vowels:find(letter) then\n\t\t\tcount = count +\
    \ 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiza6q1nv.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpiza6q1nv.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if i ==\
    \ #s and c == 'y' then\n      count = count + 1\n    elseif c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' then\n      count = count + 1\n    end\n\
    \  end\n  return count\nend\nassert(vowels_count(\"berry\") == 3)\nassert(vowels_count(\"\
    beautiful\") == 3)\nassert(vowels_count(\"beauty\") == 3)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpt_m29iy0.lua:18: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpt_m29iy0.lua:18: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal vowels = {[\"a\"] = 1, [\"e\"] = 1, [\"i\"] = 1, [\"o\"] = 1, [\"u\"]\
    \ = 1, [\"y\"] = 1}\n\tlocal count = 0\n\tfor i=1,#s do\n\t\tlocal c = s:sub(i,i)\n\
    \t\tif i == #s and c == \"y\" then\n\t\t\tcount = count + 1\n\t\telseif vowels[c]\
    \ == 1 then\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu8z7g1q3.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpu8z7g1q3.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- YOUR CODE HERE\n  local vowel_count = 0\n  for i=1,#s do\n    local c =\
    \ s:sub(i,i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ or (c == 'y' and i == #s) then\n      vowel_count = vowel_count + 1\n    end\n\
    \  end\n  return vowel_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpowcp5p3k.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpowcp5p3k.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   local vowel_count = 0\n   for i = 1, s:len() do\n      local char = s:sub(i,\
    \ i)\n      if char == 'a' or char == 'e' or char == 'i' or char == 'o' or char\
    \ == 'u' then\n         vowel_count = vowel_count + 1\n      elseif char == 'y'\
    \ and i == s:len() then\n         vowel_count = vowel_count + 1\n      end\n \
    \  end\n   return vowel_count\nend\nassert(vowels_count('caterpillar') == 4)\n\
    assert(vowels_count('moo') == 2)\nassert(vowels_count('good') == 2)\nassert(vowels_count('gym')\
    \ == 1)\nassert(vowels_count('combinatorics') == 4)\nassert(vowels_count('y')\
    \ == 1)\nassert(vowels_count('xy') == 0)\nassert(vowels_count('yy') == 1)\nprint\
    \ 'OK'\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpgcv60a56.lua:21: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpgcv60a56.lua:21: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local n = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      n = n + 1\n    elseif\
    \ c == 'y' and i == #s then\n      n = n + 1\n    end\n  end\n  return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgzn77uwi.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpgzn77uwi.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  --\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm06zumvp.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpm06zumvp.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for _, c in utf8.codes(s) do\n        if c == \"a\"\
    \ or c == \"e\" or c == \"i\" or c == \"o\" or c == \"u\" or c == \"y\" then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpag621con.lua:19:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpag621con.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local vowels = {['a'] = true, ['e'] = true, ['i'] = true, ['o'] = true, ['u']\
    \ = true}\n  local count = 0\n  for _, c in utf8.codes(s) do\n    local char =\
    \ utf8.char(c)\n    if vowels[char] then\n      count = count + 1\n    end\n \
    \ end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1z1ecto.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpw1z1ecto.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local cnt = 0\n  for i = 1, #s do\n    local char = s:sub(i, i)\n    if char\
    \ == 'a' or char == 'e' or char == 'i' or char == 'o' or char == 'u' or\n    \
    \   (char == 'y' and i == #s) then\n      cnt = cnt + 1\n    end\n  end\n  return\
    \ cnt\nend\nassert(vowels_count('hello') == 2)\nassert(vowels_count('there') ==\
    \ 2)\nassert(vowels_count('yay') == 2)\nassert(vowels_count('rhythm') == 0)\n\
    assert(vowels_count('envelope') == 3)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmpe0sp8y2p.lua:21: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmpe0sp8y2p.lua:21: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx0jaevh.lua:12:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpjx0jaevh.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local n = 0\n    for i = 1, #s do\n        local c = s:sub(i, i)\n      \
    \  if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n        \
    \    n = n + 1\n        elseif c == 'y' and i == #s then\n            n = n +\
    \ 1\n        end\n    end\n    return n\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfo_m5pjg.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpfo_m5pjg.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for _, c in pairs{'a', 'e', 'i', 'o', 'u', 'y'} do\n\
    \        for n in s:gmatch(c) do\n            count = count + 1\n        end\n\
    \    end\n    return count\nend\nassert(vowels_count('dog') == 1)\nassert(vowels_count('elephant')\
    \ == 4)\nassert(vowels_count('papyrology') == 7)\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: "lua: /tmp/tmp48laqj9c.lua:16: assertion failed!\nstack traceback:\n\t[C]:\
    \ in function 'assert'\n\t/tmp/tmp48laqj9c.lua:16: in main chunk\n\t[C]: in ?\n"
  stdout: ''
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx0jaevh.lua:12:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpjx0jaevh.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local number_of_vowels = 0\n    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local last_symbol = string.sub(s, -1)\n    for i = 1, #s do\n        for\
    \ _, vowel in ipairs(vowels) do\n            if string.sub(s, i, i) == vowel or\
    \ (string.sub(s, i, i) == 'y' and i == #s) then\n                number_of_vowels\
    \ = number_of_vowels + 1\n            end\n        end\n    end\n    return number_of_vowels\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunc7kmn5.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpunc7kmn5.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local v = {'a', 'e', 'i', 'o', 'u'}\n  local count = 0\n  for i = 1, string.len(s)\
    \ do\n    if (string.match(s, '[aeiou]') == s[i]) or\n      (string.match(s, '[aeiou]')\
    \ == s[i - 1] and s[i] == 'y') then\n      count = count + 1\n    end\n  end\n\
    \  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_fghica.lua:21:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpt_fghica.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   if #s == 0 then\n      return 0\n   elseif string.find(\"aeiouy\", string.sub(s,\
    \ 1, 1)) then\n      return 1 + vowels_count(string.sub(s, 2))\n   else\n    \
    \  return vowels_count(string.sub(s, 2))\n   end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq8_3pvm_.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpq8_3pvm_.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 0
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local count = 0\n  s = s:lower()\n  for i=1,#s do\n    if s:sub(i,i) == 'a'\
    \ or s:sub(i,i) == 'e' or s:sub(i,i) == 'i' or s:sub(i,i) == 'o' or s:sub(i,i)\
    \ == 'u' then\n      count = count + 1\n    elseif s:sub(i,i) == 'y' and i ==\
    \ #s then\n      count = count + 1\n    end\n  end\n  return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- Implement me!\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3ggs3v5.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpv3ggs3v5.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- write your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe38t_32_.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpe38t_32_.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local v = 0\n  for w in s:gmatch(\".\") do\n    if w == \"a\" or w == \"e\"\
    \ or w == \"i\" or w == \"o\" or w == \"u\" then\n      v = v + 1\n    elseif\
    \ w == \"y\" and w == string.sub(s, string.len(s)) then\n      v = v + 1\n   \
    \ end\n  end\n  return v\nend\nprint(vowels_count(\"flawless\")) --> 3\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "2\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3z4c_mq_.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp3z4c_mq_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    -- iterate through each character in the string\n  \
    \  for i = 1, #s do\n        local c = s:sub(i, i)\n        -- check to see if\
    \ the character is a vowel\n        if (c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u') or\n            (c == 'y' and i == #s) then\n          \
    \  count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp50j23hga.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp50j23hga.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = {\n        a = true,\n        e = true,\n        i = true,\n\
    \        o = true,\n        u = true,\n        y = true\n    }\n    -- TODO: Implement\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamxljq8e.lua:21:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpamxljq8e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local vowels = \"aeiouy\"\n    local t = 0\n    for v in s:gmatch(\"[aeiouy]\"\
    ) do\n        t = t + 1\n    end\n    return t\nend\nprint(vowels_count(\"hello\"\
    )) -- 2\nprint(vowels_count(\"world\")) -- 1\nprint(vowels_count(\"tweety\"))\
    \ -- 2\nprint(vowels_count(\"This is not a vowel sequence\")) -- 7\nprint(vowels_count(\"\
    syzygy\")) -- 3\nprint(vowels_count(\"fly\")) -- 1\nprint(vowels_count(\"flyy\"\
    )) -- 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "2\n1\n3\n10\n3\n1\n2\nF\nFailed tests:\n-------------\n1) test_humaneval\n\
    /tmp/tmp9fb8668p.lua:26: expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp9fb8668p.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjx0jaevh.lua:12:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpjx0jaevh.lua:12: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \treturn #string.gsub(s, \"[aeiouy]\", \"\")\nend\nprint(vowels_count(\"defer\"\
    )) --> 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "3\nF\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgdxfafxb.lua:14:\
    \ expected: 2, actual: 3\nstack traceback:\n\t/tmp/tmpgdxfafxb.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- YOUR CODE HERE\n  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr2pjg8mz.lua:14:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpr2pjg8mz.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \tlocal n = 0\n\tfor i = 1, #s do\n\t\tlocal c = s:sub(i, i)\n\t\tif c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' or\n\t\t\t(c == 'y' and i ==\
    \ #s) then\n\t\t\tn = n + 1\n\t\tend\n\tend\n\treturn n\nend\nassert(vowels_count('hello')\
    \ == 2)\nassert(vowels_count('why') == 1)\nassert(vowels_count('home') == 2)\n\
    assert(vowels_count('school') == 2)\nassert(vowels_count('barn') == 1)\nassert(vowels_count('park')\
    \ == 1)\nassert(vowels_count('tree') == 2)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp00kilbxf.lua:29:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp00kilbxf.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- TODO\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_16w1zck.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmp_16w1zck.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    -- your code here\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoq4qn_wo.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpoq4qn_wo.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    if s == \"\" then\n        return 0\n    elseif string.match(s, \"^[aeiou]\"\
    ) then\n        return 1 + vowels_count(string.sub(s, 2))\n    elseif string.match(s,\
    \ \"^y$\") then\n        return 1\n    else\n        return vowels_count(string.sub(s,\
    \ 2))\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3aewdgrq.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp3aewdgrq.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    local last_char = string.sub(s, -1)\n    local s_nocase\
    \ = string.lower(s)\n    for i = 1, #s_nocase do\n        local char = string.sub(s_nocase,\
    \ i, i)\n        if char == 'a' or char == 'e' or char == 'i' or char == 'o' or\
    \ char == 'u' then\n            count = count + 1\n        end\n    end\n    if\
    \ last_char == 'y' then\n        count = count + 1\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzv03mz0g.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzv03mz0g.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local count = 0\n    for c in s:gmatch('%a') do\n        if c == 'a' or c\
    \ == 'e' or c == 'i' or c == 'o' or c == 'u' then\n            count = count +\
    \ 1\n        elseif c == 'y' and #s > 1 and s:sub(#s, #s) == 'y' then\n      \
    \      count = count + 1\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5e8oalty.lua:22:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5e8oalty.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local len = #s\n    local count = 0\n    for i = 1, len do\n        local\
    \ c = s:sub(i, i)\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or\
    \ c == 'u' then\n            count = count + 1\n        elseif c == 'y' and i\
    \ == len then\n            count = count + 1\n        end\n    end\n    return\
    \ count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr1y3ellp.lua:24:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpr1y3ellp.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  -- <your code here>\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkn9il_37.lua:13:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpkn9il_37.lua:13: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local num = 0\n    for i = 1, #s do\n        if string.find(\"aeiou\", string.sub(s,\
    \ i, i)) then\n            num = num + 1\n        end\n    end\n    if (string.sub(s,\
    \ #s, #s) == \"y\") then\n        num = num + 1\n    end\n    return num\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkwximpm.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpbkwximpm.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local vowels = 0\n  for i = 1, #s do\n    local c = s:sub(i, i)\n    if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n      vowels = vowels\
    \ + 1\n    elseif c == 'y' and i == #s then\n      vowels = vowels + 1\n    end\n\
    \  end\n  return vowels\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0xem3k0.lua:23:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmph0xem3k0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    return #s:gsub(\"[^aeiouy]\", \"\")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfaq0akjh.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpfaq0akjh.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \   local n = 0\n   for i = 1, #s do\n      if s:sub(i, i) == 'a' or s:sub(i,\
    \ i) == 'e' or s:sub(i, i) == 'i' or s:sub(i, i) == 'o' or s:sub(i, i) == 'u'\
    \ or s:sub(i, i) == 'y' then\n         n = n + 1\n      end\n   end\n   return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkvjkcral.lua:20:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpkvjkcral.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  return s:gsub(\"[^aeiouy]\", \"\"):len()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = vowels_count\n    lu.assertEquals(candidate('abcde'),\
    \ 2)\n    lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cwudpmk.lua:14:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp5cwudpmk.lua:14: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \  local sum = 0\n  local v = {'a', 'e', 'i', 'o', 'u'}\n  for i = 1, #s do\n\
    \    for j = 1, #v do\n      if s:sub(i, i) == v[j] then\n        sum = sum +\
    \ 1\n      end\n    end\n  end\n  if s:sub(-1) == 'y' then\n    sum = sum + 1\n\
    \  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = vowels_count\n    lu.assertEquals(candidate('abcde'), 2)\n \
    \   lu.assertEquals(candidate('Alone'), 3)\n    lu.assertEquals(candidate('key'),\
    \ 2)\n    lu.assertEquals(candidate('bye'), 1)\n    lu.assertEquals(candidate('keY'),\
    \ 2)\n    lu.assertEquals(candidate('bYe'), 1)\n    lu.assertEquals(candidate('ACEDY'),\
    \ 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsqi66m7f.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmpsqi66m7f.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
- exit_code: 1
  program: "-- Write a function vowels_count which takes a string representing\n--\
    \ a word as input and returns the number of vowels in the string.\n-- Vowels in\
    \ this case are 'a', 'e', 'i', 'o', 'u'. Here, 'y' is also a\n-- vowel, but only\
    \ when it is at the end of the given word.\n-- Example:\nlocal function vowels_count(s)\n\
    \    local function isvowel(c)\n        return c == 'a' or c == 'e' or c == 'i'\
    \ or c == 'o' or c == 'u'\n    end\n    local i = 0\n    for c in s:gmatch\".\"\
    \ do\n        if isvowel(c) then\n            i = i + 1\n        end\n    end\n\
    \    if s:sub(-1) == 'y' then\n        i = i + 1\n    end\n    return i\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = vowels_count\n\
    \    lu.assertEquals(candidate('abcde'), 2)\n    lu.assertEquals(candidate('Alone'),\
    \ 3)\n    lu.assertEquals(candidate('key'), 2)\n    lu.assertEquals(candidate('bye'),\
    \ 1)\n    lu.assertEquals(candidate('keY'), 2)\n    lu.assertEquals(candidate('bYe'),\
    \ 1)\n    lu.assertEquals(candidate('ACEDY'), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0im2ycb5.lua:26:\
    \ expected: 3, actual: 2\nstack traceback:\n\t/tmp/tmp0im2ycb5.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659821735
