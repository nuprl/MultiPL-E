name: HumanEval_7_filter_by_substring
language: lua
prompt: "-- Filter an input list of strings only for ones that contain given substring\n\
  local function filter_by_substring(strings, substring)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'},\
  \ 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
  \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = {}\n    local substring_len = #substring\n    for\
    \ _, str in ipairs(strings) do\n        if string.sub(str, 1, substring_len) ==\
    \ substring then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "  local result = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string:find(substring) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend", "    local filtered = {}\n    for k,v\
    \ in pairs(strings) do\n        if v:find(substring) then\n            table.insert(filtered,\
    \ v)\n        end\n    end\n    return filtered\nend", "\tlocal out = {}\n\tfor\
    \ _, value in ipairs(strings) do\n\t\tif (string.find(value, substring)) then\n\
    \t\t\ttable.insert(out, value)\n\t\tend\n\tend\n\treturn out\nend", "\tlocal result\
    \ = {}\n\tfor k, v in pairs(strings) do\n\t\tif string.find(v, substring) then\n\
    \t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend", "  return\
    \ table.filter(strings, function(s) return s:find(substring) end)\nend", "  local\
    \ res = {}\n  for _, v in ipairs(strings) do\n    if string.find(v, substring)\
    \ then\n      table.insert(res, v)\n    end\n  end\n  return res\nend", "\treturn\
    \ table.filter(strings, function(v) return string.find(v, substring) end)\nend",
  "    local result = {}\n    for _, s in ipairs(strings) do\n        if string.find(s,\
    \ substring) then\n            table.insert(result, s)\n        end\n    end\n\
    \    return result\nend", "  local result = {}\n  for i = 1, #strings do\n   \
    \ if strings[i]:find(substring) then\n      table.insert(result, strings[i])\n\
    \    end\n  end\n  return result\nend", "  return helpers.list(filter(strings,\
    \ function(s)\n    return s:find(substring) ~= nil\n  end))\nend", "    local\
    \ filtered = {}\n    for _, s in ipairs(strings) do\n        if string.find(s,\
    \ substring) then\n            table.insert(filtered, s)\n        end\n    end\n\
    \    return filtered\nend", "  local result = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string:find(substring) then\n      table.insert(result, string)\n\
    \    end\n  end\n  return result\nend", "\tlocal new_list = {}\n\tfor _, entry\
    \ in ipairs(strings) do\n\t\tif string.find(entry, substring) then\n\t\t\ttable.insert(new_list,\
    \ entry)\n\t\tend\n\tend\n\treturn new_list\nend", "    local new_strings = {}\n\
    \    for i, s in ipairs(strings) do\n        if string.find(s, substring) then\n\
    \            table.insert(new_strings, s)\n        end\n    end\n    return new_strings\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:find(substring) then\n            table.insert(result, str)\n        end\n\
    \    end\n    return result\nend", "\tlocal ret = {}\n\tfor _, v in ipairs(strings)\
    \ do\n\t\tif v:find(substring) then\n\t\t\ttable.insert(ret, v)\n\t\tend\n\tend\n\
    \treturn ret\nend", "    local result = {}\n    for i = 1, #strings do\n     \
    \   if strings[i]:find(substring) then\n            table.insert(result, strings[i])\n\
    \        end\n    end\n    return result\nend", "\tlocal ret = {}\n\tfor _,v in\
    \ ipairs(strings) do\n\t\tif string.find(v, substring) then\n\t\t\ttable.insert(ret,\
    \ v)\n\t\tend\n\tend\n\treturn ret\nend", "    local strings_filtered = {}\n \
    \   for _, name in ipairs(strings) do\n        if string.find(name, substring)\
    \ then\n            table.insert(strings_filtered, name)\n        end\n    end\n\
    \    return strings_filtered\nend", "  local items = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(string, substring) then\n      table.insert(items, string)\n\
    \    end\n  end\n  return items\nend", "    local result = {}\n    for _, s in\
    \ ipairs(strings) do\n        if string.find(s, substring) then\n            table.insert(result,\
    \ s)\n        end\n    end\n    return result\nend", "    local ret = {}\n   \
    \ for k,v in pairs(strings) do\n        if string.find(v, substring) then\n  \
    \          table.insert(ret, v)\n        end\n    end\n    return ret\nend", " \
    \ local filtered = {}\n  for _,v in ipairs(strings) do\n    if v:find(substring)\
    \ then\n      table.insert(filtered, v)\n    end\n  end\n  return filtered\nend",
  "    local result = {}\n    for i,v in ipairs(strings) do\n        if v:find(substring)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "\tlocal res = {}\n\tfor _, s in ipairs(strings) do\n\t\tif s:find(substring)\
    \ then\n\t\t\ttable.insert(res, s)\n\t\tend\n\tend\n\treturn res\nend", "    local\
    \ out = {}\n    for _, s in ipairs(strings) do\n        if string.find(s, substring)\
    \ then\n            table.insert(out, s)\n        end\n    end\n    return out\n\
    end", "\tlocal filtered = {}\n\tfor _, str in ipairs(strings) do\n\t\tif string.find(str,\
    \ substring) then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\tend\n\treturn\
    \ filtered\nend", "\tlocal filtered = {}\n\tfor i = 1, #strings do\n\t\tif (string.find(strings[i],\
    \ substring) ~= nil) then\n\t\t\ttable.insert(filtered, strings[i])\n\t\tend\n\
    \tend\n\treturn filtered\nend", "\tlocal result = {}\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif str:find(substring) then\n\t\t\ttable.insert(result, str)\n\t\tend\n\
    \tend\n\treturn result\nend", "    if not strings then return {} end\n    local\
    \ result = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "\tlocal result = {}\n\tlocal i = 1\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif string.find(str, substring) then\n\t\t\tresult[i] = str\n\t\t\ti\
    \ = i + 1\n\t\tend\n\tend\n\treturn result\nend", "    local strings_to_return\
    \ = {}\n    for i, v in ipairs(strings) do\n        if string.find(v, substring)\
    \ then\n            table.insert(strings_to_return, v)\n        end\n    end\n\
    \    return strings_to_return\nend", "\tif not strings then return nil end\n\t\
    if not substring then return strings end\n\tlocal new_list = {}\n\tfor _, str\
    \ in ipairs(strings) do\n\t\tif str:find(substring) then\n\t\t\ttable.insert(new_list,\
    \ str)\n\t\tend\n\tend\n\treturn new_list\nend", "    local ret = {}\n    for\
    \ _, x in ipairs(strings) do\n        if x:match(substring) then\n           \
    \ table.insert(ret, x)\n        end\n    end\n    return ret\nend", "    local\
    \ new_list = {}\n    for _, str in ipairs(strings) do\n        if string.find(str,\
    \ substring) then\n            table.insert(new_list, str)\n        end\n    end\n\
    \    return new_list\nend", "    local results = {}\n    for _, str in ipairs(strings)\
    \ do\n        if string.find(str, substring) then\n            table.insert(results,\
    \ str)\n        end\n    end\n    return results\nend", "\tlocal substring_len\
    \ = #substring\n\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\t\
    if str:sub(1, substring_len) == substring then\n\t\t\ttable.insert(result, str)\n\
    \t\tend\n\tend\n\treturn result\nend", "\tlocal filtered = {}\n\tfor i, v in ipairs(strings)\
    \ do\n\t\tif string.find(v, substring) then\n\t\t\ttable.insert(filtered, v)\n\
    \t\tend\n\tend\n\treturn filtered\nend", "    local result = {}\n    for k, v\
    \ in pairs(strings) do\n        if string.find(v, substring) then\n          \
    \  table.insert(result, v)\n        end\n    end\n    return result\nend", "\t\
    local matches = {}\n\tfor i, v in ipairs(strings) do\n\t\tif string.find(v, substring)\
    \ then\n\t\t\ttable.insert(matches, v)\n\t\tend\n\tend\n\treturn matches\nend",
  "    local filtered = {}\n    for _, str in ipairs(strings) do\n        if string.find(str,\
    \ substring) then\n            table.insert(filtered, str)\n        end\n    end\n\
    \    return filtered\nend", "  local res = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string:find(substring) then table.insert(res, string) end\n  end\n\
    \  return res\nend", "    local filtered = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:find(substring) then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend", "  local ret = {}\n \
    \ for i, str in ipairs(strings) do\n    if string.find(str, substring) then\n\
    \      table.insert(ret, str)\n    end\n  end\n  return ret\nend", "\tif substring\
    \ == \"\" then\n\t\treturn strings\n\tend\n\tlocal result = {}\n\tfor _, str in\
    \ ipairs(strings) do\n\t\tif string.find(str, substring, 1, true) then\n\t\t\t\
    table.insert(result, str)\n\t\tend\n\tend\n\treturn result\nend", "\tlocal res\
    \ = {}\n\tfor _, str in ipairs(strings) do\n\t\tif string.find(str, substring)\
    \ then\n\t\t\ttable.insert(res, str)\n\t\tend\n\tend\n\treturn res\nend", "  local\
    \ ret = {}\n  for _, v in ipairs(strings) do\n    if v:find(substring) then table.insert(ret,\
    \ v) end\n  end\n  return ret\nend", "\treturn filter(function(s) return s:find(substring)\
    \ end, strings)\nend", "    local ret = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:match(substring) then\n            table.insert(ret, str)\n\
    \        end\n    end\n    return ret\nend", "\tlocal result = {}\n\tfor _, string\
    \ in ipairs(strings) do\n\t\tif string:match(substring) then\n\t\t\ttable.insert(result,\
    \ string)\n\t\tend\n\tend\n\treturn result\nend", "\tlocal substring_length =\
    \ #substring\n\tlocal substring_lower = substring:lower()\n\tlocal t = {}\n\t\
    for _, str in ipairs(strings) do\n\t\tif str:sub(1, substring_length):lower()\
    \ == substring_lower then\n\t\t\tt[#t + 1] = str\n\t\tend\n\tend\n\treturn t\n\
    end", "    local result = {}\n    for _, v in ipairs(strings) do\n        if v:find(substring)\
    \ then\n            table.insert(result, v)\n        end\n    end\n    return\
    \ result\nend", "\tlocal matches = {}\n\tlocal j = 1\n\tfor i, str in ipairs(strings)\
    \ do\n\t\tif string.find(str, substring) then\n\t\t\tmatches[j] = str\n\t\t\t\
    j = j + 1\n\t\tend\n\tend\n\treturn matches\nend", "\tlocal filtered = {}\n\t\
    for _, str in ipairs(strings) do\n\t\tif str:find(substring) then\n\t\t\ttable.insert(filtered,\
    \ str)\n\t\tend\n\tend\n\treturn filtered\nend", "  local result = {}\n  for _,\
    \ str in ipairs(strings) do\n    if string.find(str, substring) then\n      table.insert(result,\
    \ str)\n    end\n  end\n  return result\nend", "  if not (strings and substring)\
    \ then return end\n  local filtered = {}\n  for _, v in ipairs(strings) do\n \
    \   if v:find(substring) then\n      table.insert(filtered, v)\n    end\n  end\n\
    \  return filtered\nend", "\tlocal found = {}\n\tlocal function check_substring(str)\n\
    \t\tif str and str:find(substring) then\n\t\t\tfound[#found+1] = str\n\t\tend\n\
    \tend\n\tfor _, str in ipairs(strings) do\n\t\tcheck_substring(str)\n\tend\n\t\
    return found\nend", "\tlocal filtered = {}\n\tfor k,v in pairs(strings) do\n\t\
    \tif (v:find(substring) ~= nil) then\n\t\t\ttable.insert(filtered, v)\n\t\tend\n\
    \tend\n\treturn filtered\nend", "    local result = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string:match(substring) then\n            table.insert(result,\
    \ string)\n        end\n    end\n    return result\nend", "  local t = {}\n  for\
    \ _, name in ipairs(strings) do\n    if string.find(name, substring) then\n  \
    \    table.insert(t, name)\n    end\n  end\n  return t\nend", "\tlocal result\
    \ = {}\n\tfor _,str in ipairs(strings) do\n\t\tif str:match(substring) then\n\t\
    \t\ttable.insert(result, str)\n\t\tend\n\tend\n\treturn result\nend", "    local\
    \ ret = {}\n    for _, v in ipairs(strings) do\n        if v:find(substring) then\n\
    \            table.insert(ret, v)\n        end\n    end\n    return ret\nend",
  "  local found_strings = {}\n  for _, string in ipairs(strings) do\n    if string:find(substring)\
    \ then\n      table.insert(found_strings, string)\n    end\n  end\n  return found_strings\n\
    end", "    local ret = {}\n    for _, s in ipairs(strings) do\n        if string.find(s,\
    \ substring) then\n            table.insert(ret, s)\n        end\n    end\n  \
    \  return ret\nend", "    local filtered = {}\n    for _, v in ipairs(strings)\
    \ do\n        if string.find(v, substring) then\n            table.insert(filtered,\
    \ v)\n        end\n    end\n    return filtered\nend", "    local result = {}\n\
    \    for _, s in ipairs(strings) do\n        if string.find(s, substring) then\n\
    \            table.insert(result, s)\n        end\n    end\n    return result\n\
    end", "    local result = {}\n    for _, str in ipairs(strings) do\n        if\
    \ str:find(substring) then\n            table.insert(result, str)\n        end\n\
    \    end\n    return result\nend", "\tlocal result = {}\n\tfor _, str in ipairs(strings)\
    \ do\n\t\tif string.find(str, substring) then\n\t\t\ttable.insert(result, str)\n\
    \t\tend\n\tend\n\treturn result\nend", "    if substring == nil or #substring\
    \ == 0 then\n        return strings\n    end\n    local out = {}\n    for _, str\
    \ in ipairs(strings) do\n        if str:lower():find(substring:lower(), 1, true)\
    \ then\n            table.insert(out, str)\n        end\n    end\n    return out\n\
    end", "  local out = {}\n  for _, str in ipairs(strings) do\n    if str:match(substring)\
    \ then\n      table.insert(out, str)\n    end\n  end\n  return out\nend", "  \
    \  local results = {}\n    for _, v in ipairs(strings) do\n        if v:find(substring)\
    \ then\n            table.insert(results, v)\n        end\n    end\n    return\
    \ results\nend", "  local result = {}\n  for _, str in ipairs(strings) do\n  \
    \  if str:find(substring) then\n      table.insert(result, str)\n    end\n  end\n\
    \  return result\nend", "  local filtered = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:find(substring) then\n      table.insert(filtered, s)\n    end\n\
    \  end\n  return filtered\nend", "\tlocal res = {}\n\tfor i, v in ipairs(strings)\
    \ do\n\t\tif v:find(substring) then\n\t\t\tres[#res + 1] = v\n\t\tend\n\tend\n\
    \treturn res\nend", "  local ret = {}\n  for _, v in ipairs(strings) do\n    if\
    \ v:find(substring) then\n      table.insert(ret, v)\n    end\n  end\n  return\
    \ ret\nend", "    local list = {}\n    for _, str in ipairs(strings) do\n    \
    \    if str:find(substring) then\n            table.insert(list, str)\n      \
    \  end\n    end\n    return list\nend", "\tlocal result = {}\n\tfor _, s in ipairs(strings)\
    \ do\n\t\tif s:find(substring) then\n\t\t\ttable.insert(result, s)\n\t\tend\n\t\
    end\n\treturn result\nend", "\tlocal substring_lower = utils.lower(substring)\n\
    \tlocal filtered = {}\n\tfor i, str in ipairs(strings) do\n\t\tif utils.lower(str):find(substring_lower)\
    \ then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\tend\n\treturn filtered\n\
    end", "\t-- Index every substring\n\tlocal substrings = {}\n\tfor i,str in ipairs(strings)\
    \ do\n\t\tlocal s = string.find(str, substring)\n\t\tif s then\n\t\t\tsubstrings[#substrings+1]\
    \ = {i, s}\n\t\tend\n\tend\n\t-- Sort substrings by first appearance index\n\t\
    table.sort(substrings, function(a,b) return a[2] < b[2] end)\n\t-- Assemble new\
    \ list\n\tlocal out = {}\n\tfor i,s in ipairs(substrings) do\n\t\tout[#out+1]\
    \ = strings[s[1]]\n\tend\n\treturn out\nend", "    local res = {}\n    for _,\
    \ word in ipairs(strings) do\n        if string.find(word, substring) then\n \
    \           table.insert(res, word)\n        end\n    end\n    return res\nend",
  "\tlocal filtered = {}\n\tfor i, val in ipairs(strings) do\n\t\tif string.find(val,\
    \ substring) then\n\t\t\ttable.insert(filtered, val)\n\t\tend\n\tend\n\treturn\
    \ filtered\nend", "\tlocal filtered = {}\n\tfor _,str in ipairs(strings) do\n\t\
    \tif str:find(substring) then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\t\
    end\n\treturn filtered\nend", "    local result = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:find(substring) then\n            table.insert(result, str)\n\
    \        end\n    end\n    return result\nend", "  local filtered = {}\n  for\
    \ _,str in ipairs(strings) do\n    if str:find(substring) then\n      table.insert(filtered,\
    \ str)\n    end\n  end\n  return filtered\nend", "  local ret = {}\n  for _, s\
    \ in ipairs(strings) do\n    if string.find(s, substring) then\n      table.insert(ret,\
    \ s)\n    end\n  end\n  return ret\nend", "    local filtered = {}\n    for i,\
    \ str in ipairs(strings) do\n        if str:find(substring) then\n           \
    \ table.insert(filtered, str)\n        end\n    end\n    return filtered\nend",
  "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:match(substring)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "\tlocal filtered = {}\n\tfor _, str in ipairs(strings) do\n\t\
    \tif str:find(substring) then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\t\
    end\n\treturn filtered\nend", "\tlocal result = {}\n\tfor k,v in pairs(strings)\
    \ do\n\t\tif string.find(v, substring) then\n\t\t\ttable.insert(result, v)\n\t\
    \tend\n\tend\n\treturn result\nend", "  local result = {}\n  for _, v in ipairs(strings)\
    \ do\n    if v:match(substring) then\n      table.insert(result, v)\n    end\n\
    \  end\n  return result\nend", "    local ret = {}\n    for _, str in ipairs(strings)\
    \ do\n        if string.find(str, substring) then\n            table.insert(ret,\
    \ str)\n        end\n    end\n    return ret\nend", "\tlocal ret = {}\n\tfor _,v\
    \ in ipairs(strings) do\n\t\tif v:find(substring) then\n\t\t\ttable.insert(ret,\
    \ v)\n\t\tend\n\tend\n\treturn ret\nend", "\treturn vim.tbl_filter(function(s)\
    \ return vim.fn.match(s, substring) ~= -1 end, strings)\nend", "    local result\
    \ = {}\n    for _, v in ipairs(strings) do\n        if v:find(substring) then\n\
    \            table.insert(result, v)\n        end\n    end\n    return result\n\
    end", "    local filtered = {}\n    for _,v in ipairs(strings) do\n        if\
    \ v:find(substring) then\n            table.insert(filtered, v)\n        end\n\
    \    end\n    return filtered\nend", "    local filtered = {}\n    for _, s in\
    \ ipairs(strings) do\n        if s:find(substring) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "    local filtered = {}\n\
    \    for _,string in ipairs(strings) do\n        if string:match(substring) then\n\
    \            table.insert(filtered, string)\n        end\n    end\n    return\
    \ filtered\nend", "    local filtered = {}\n    for _, str in ipairs(strings)\
    \ do\n        if str:find(substring) then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend", "\tlocal filtered = {}\n\
    \tfor i = 1, #strings do\n\t\tif string.find(strings[i], substring) then\n\t\t\
    \ttable.insert(filtered, strings[i])\n\t\tend\n\tend\n\treturn filtered\nend",
  "    local result = {}\n    for _, str in ipairs(strings) do\n        if string.find(str,\
    \ substring) then\n            table.insert(result, str)\n        end\n    end\n\
    \    return result\nend", "\tlocal filtered = {}\n\tfor _,v in ipairs(strings)\
    \ do\n\t\tif v:find(substring) then\n\t\t\ttable.insert(filtered, v)\n\t\tend\n\
    \tend\n\treturn filtered\nend", "\tlocal result = {}\n\tfor i, v in ipairs(strings)\
    \ do\n\t\tif v:match(substring) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\
    \tend\n\treturn result\nend", "    local ret = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(ret,\
    \ s)\n        end\n    end\n    return ret\nend", "    local filtered = {}\n \
    \   for _, v in ipairs(strings) do\n        if string.find(v, substring) then\n\
    \            table.insert(filtered, v)\n        end\n    end\n    return filtered\n\
    end", "  local ret = {}\n  for i, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(ret, str)\n    end\n  end\n  return ret\nend", "  local\
    \ result = {}\n  for _, str in ipairs(strings) do\n    if string.find(str, substring)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "\tlocal filtered = {}\n\tfor i = 1, #strings do\n\t\tif string.find(strings[i],\
    \ substring) then\n\t\t\ttable.insert(filtered, strings[i])\n\t\tend\n\tend\n\t\
    return filtered\nend", "\tlocal result = {}\n\tfor _, string in ipairs(strings)\
    \ do\n\t\tif string:find(substring) then\n\t\t\ttable.insert(result, string)\n\
    \t\tend\n\tend\n\treturn result\nend", "  local results = {}\n  for _, s in ipairs(strings)\
    \ do\n    if s:find(substring) then\n      table.insert(results, s)\n    end\n\
    \  end\n  return results\nend", "\tlocal res = {}\n\tfor i = 1, #strings do\n\t\
    \tif strings[i]:find(substring) then\n\t\t\tres[#res + 1] = strings[i]\n\t\tend\n\
    \tend\n\treturn res\nend", "\treturn List.filter(strings, function(s) return string.find(s,\
    \ substring) end)\nend", "    local results = {}\n    for _, string in ipairs(strings)\
    \ do\n        if string:find(substring) then\n            table.insert(results,\
    \ string)\n        end\n    end\n    return results\nend", "\tlocal results =\
    \ {}\n\tfor _, string in ipairs(strings) do\n\t\tif string:find(substring) then\n\
    \t\t\ttable.insert(results, string)\n\t\tend\n\tend\n\treturn results\nend", " \
    \ local result = {}\n  for _, str in ipairs(strings) do\n    if str:match(substring)\
    \ then\n      table.insert(result, str)\n    end\n  end\n  return result\nend",
  "    local filtered = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(filtered, s)\n        end\n    end\n    return\
    \ filtered\nend", "\tlocal result = {}\n\tfor _, v in ipairs(strings) do\n\t\t\
    if v:find(substring) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn\
    \ result\nend", "    local filtered = {}\n    for _, s in ipairs(strings) do\n\
    \        if s:find(substring) then\n            table.insert(filtered, s)\n  \
    \      end\n    end\n    return filtered\nend", "    local res = {}\n    for _,\
    \ v in ipairs(strings) do\n        if v:find(substring) then\n            table.insert(res,\
    \ v)\n        end\n    end\n    return res\nend", "\tsubstring = string.lower(substring)\n\
    \tlocal result = {}\n\tfor i, v in ipairs(strings) do\n\t\tif string.find(string.lower(v),\
    \ substring, 1, true) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\t\
    return result\nend", "  local filtered = {}\n  for i,string in ipairs(strings)\
    \ do\n    if string:find(substring) then\n      table.insert(filtered, string)\n\
    \    end\n  end\n  return filtered\nend", "    if not strings then return nil\
    \ end\n    if not substring then return strings end\n    local ret = {}\n    for\
    \ k,v in pairs(strings) do\n        if string.find(v, substring) then\n      \
    \      table.insert(ret, v)\n        end\n    end\n    return ret\nend", "\tlocal\
    \ results = {}\n\tfor _, s in ipairs(strings) do\n\t\tif string.find(s, substring)\
    \ then\n\t\t\ttable.insert(results, s)\n\t\tend\n\tend\n\treturn results\nend",
  "\tlocal filtered = {}\n\tfor i, v in ipairs(strings) do\n\t\tif v:find(substring)\
    \ then\n\t\t\ttable.insert(filtered, v)\n\t\tend\n\tend\n\treturn filtered\nend",
  "  local filtered = {}\n  for _,s in ipairs(strings) do\n    if s:find(substring)\
    \ then table.insert(filtered, s) end\n  end\n  return filtered\nend", "    local\
    \ filtered = {}\n    for _, str in ipairs(strings) do\n        if str:find(substring)\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "\tlocal filtered = {}\n\tfor _,s in ipairs(strings) do\n\t\t\
    if s:find(substring) then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\t\
    return filtered\nend", "    local filtered = {}\n    for i,string in ipairs(strings)\
    \ do\n        if string:find(substring) then\n            table.insert(filtered,\
    \ string)\n        end\n    end\n    return filtered\nend", "  local result =\
    \ {}\n  for _, s in ipairs(strings) do\n    if string.find(s, substring) then\n\
    \      table.insert(result, s)\n    end\n  end\n  return result\nend", "    local\
    \ res = {}\n    for i, str in ipairs(strings) do\n        if str:find(substring)\
    \ then\n            table.insert(res, str)\n        end\n    end\n    return res\n\
    end", "  local res = {}\n  for i = 1, #strings do\n    if string.find(strings[i],\
    \ substring) then\n      res[#res + 1] = strings[i]\n    end\n  end\n  return\
    \ res\nend", "  local filtered = {}\n  for _, str in ipairs(strings) do\n    if\
    \ str:find(substring) then\n      table.insert(filtered, str)\n    end\n  end\n\
    \  return filtered\nend", "\tlocal found = {}\n\tfor _, string in ipairs(strings)\
    \ do\n\t\tif string:find(substring) then\n\t\t\ttable.insert(found, string)\n\t\
    \tend\n\tend\n\treturn found\nend", "    if not strings then return {} end\n \
    \   if not substring then return strings end\n    local substring = substring:lower()\n\
    \    local ret = {}\n    for _, str in ipairs(strings) do\n        if str:lower():find(substring,\
    \ 1, true) then\n            table.insert(ret, str)\n        end\n    end\n  \
    \  return ret\nend", "\tlocal result = {}\n\tfor _, string in ipairs(strings)\
    \ do\n\t\tif string:find(substring) then\n\t\t\ttable.insert(result, string)\n\
    \t\tend\n\tend\n\treturn result\nend", "    local filtered = {}\n    for i,s in\
    \ ipairs(strings) do\n        if string.find(s, substring) then\n            table.insert(filtered,\
    \ s)\n        end\n    end\n    return filtered\nend", "\tlocal result = {}\n\t\
    for _, v in ipairs(strings) do\n\t\tif string.find(v, substring) then\n\t\t\t\
    table.insert(result, v)\n\t\tend\n\tend\n\treturn result\nend", "    local ret\
    \ = {}\n    for i, str in ipairs(strings) do\n        if str:find(substring) then\n\
    \            table.insert(ret, str)\n        end\n    end\n    return ret\nend",
  "    if not strings then return {} end\n    local result = {}\n    for i = 1, #strings\
    \ do\n        if strings[i]:find(substring) then table.insert(result, strings[i])\
    \ end\n    end\n    return result\nend", "\tlocal filtered = {}\n\tfor _, s in\
    \ ipairs(strings) do\n\t\tif s:find(substring) then\n\t\t\ttable.insert(filtered,\
    \ s)\n\t\tend\n\tend\n\treturn filtered\nend", "  local filtered = {}\n  for i\
    \ = 1, #strings do\n    if strings[i]:find(substring) then\n      table.insert(filtered,\
    \ strings[i])\n    end\n  end\n  return filtered\nend", "  local new_strings =\
    \ {}\n  for key, value in pairs(strings) do\n    if (string.find(value, substring)\
    \ ~= nil) then\n      table.insert(new_strings, value)\n    end\n  end\n  return\
    \ new_strings\nend", "    local filtered = {}\n    for _,str in ipairs(strings)\
    \ do\n        if str:match(substring) then\n            table.insert(filtered,\
    \ str)\n        end\n    end\n    return filtered\nend", "\tlocal filtered = {}\n\
    \tfor _, str in ipairs(strings) do\n\t\tif string.find(str, substring) then\n\t\
    \t\ttable.insert(filtered, str)\n\t\tend\n\tend\n\treturn filtered\nend", "  return\
    \ table.filter(strings, function(s) return s:find(substring) end)\nend", "   \
    \ local filtered = {}\n    for _, str in ipairs(strings) do\n        if str:find(substring)\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "\tlocal filtered = {}\n\tfor i,s in ipairs(strings) do\n\t\t\
    if s:find(substring) then\n\t\t\ttable.insert(filtered, s)\n\t\tend\n\tend\n\t\
    return filtered\nend", "    local strings_to_keep = {}\n    for _, s in ipairs(strings)\
    \ do\n        if string.find(s, substring) then\n            table.insert(strings_to_keep,\
    \ s)\n        end\n    end\n    return strings_to_keep\nend", "  local filtered\
    \ = {}\n  for _, value in ipairs(strings) do\n    if string.find(value, substring)\
    \ then\n      table.insert(filtered, value)\n    end\n  end\n  return filtered\n\
    end", "    local rv = {}\n    for _,s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(rv, s)\n        end\n    end\n    return rv\n\
    end", "    local ret = {}\n    for _, str in ipairs(strings) do\n        if str:find(substring)\
    \ then\n            table.insert(ret, str)\n        end\n    end\n    return ret\n\
    end", "    local out = {}\n    for i, v in ipairs(strings) do\n        if v:find(substring)\
    \ then\n            table.insert(out, v)\n        end\n    end\n    return out\n\
    end", "    local filtered = {}\n    for _, str in ipairs(strings) do\n       \
    \ if string.find(str, substring) then\n            table.insert(filtered, str)\n\
    \        end\n    end\n    return filtered\nend", "    local ret = {}\n    for\
    \ _,v in ipairs(strings) do\n        if v:find(substring) then\n            table.insert(ret,\
    \ v)\n        end\n    end\n    return ret\nend", "\tlocal filtered = {}\n\tfor\
    \ _, string in ipairs(strings) do\n\t\tif string:find(substring) then\n\t\t\t\
    table.insert(filtered, string)\n\t\tend\n\tend\n\treturn filtered\nend", "  local\
    \ filtered = {}\n  for _, str in ipairs(strings) do\n    if str:find(substring)\
    \ then\n      table.insert(filtered, str)\n    end\n  end\n  return filtered\n\
    end", "    local t = {}\n    for _, s in ipairs(strings) do\n        if string.find(s,\
    \ substring) then\n            table.insert(t, s)\n        end\n    end\n    return\
    \ t\nend", "    local result = {}\n    for _, line in ipairs(strings) do\n   \
    \     if line:find(substring) then\n            table.insert(result, line)\n \
    \       end\n    end\n    return result\nend", "    local result = {}\n    for\
    \ _, v in ipairs(strings) do\n        if v:find(substring) then\n            table.insert(result,\
    \ v)\n        end\n    end\n    return result\nend", "  local result = {}\n  for\
    \ _, str in ipairs(strings) do\n    if string.find(str, substring) then\n    \
    \  table.insert(result, str)\n    end\n  end\n  return result\nend", "\tlocal\
    \ res = {}\n\tfor _, line in ipairs(strings) do\n\t\tif string.find(line, substring)\
    \ then\n\t\t\ttable.insert(res, line)\n\t\tend\n\tend\n\treturn res\nend", " \
    \   local filtered = {}\n    for _, str in ipairs(strings) do\n        if (str:match(substring))\
    \ then\n            table.insert(filtered, str)\n        end\n    end\n    return\
    \ filtered\nend", "\tlocal result = {}\n\tfor _, str in ipairs(strings) do\n\t\
    \tif str:find(substring) then\n\t\t\ttable.insert(result, str)\n\t\tend\n\tend\n\
    \treturn result\nend", "\tlocal ret = {}\n\tfor _,str in ipairs(strings) do\n\t\
    \tif str:find(substring) then\n\t\t\ttable.insert(ret, str)\n\t\tend\n\tend\n\t\
    return ret\nend", "\tlocal filtered = {}\n\tfor _, str in ipairs(strings) do\n\
    \t\tif str:find(substring) then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\t\
    end\n\treturn filtered\nend", "\tif not strings then return end\n\tlocal ret =\
    \ {}\n\tfor i, string in ipairs(strings) do\n\t\tif string:find(substring) then\
    \ table.insert(ret, string) end\n\tend\n\treturn ret\nend", "    local result\
    \ = {}\n    for _, str in ipairs(strings) do\n        if str:find(substring) then\n\
    \            table.insert(result, str)\n        end\n    end\n    return result\n\
    end", "  local substr_filter = {}\n  for _, str in ipairs(strings) do\n    if\
    \ string.find(str, substring) then\n      table.insert(substr_filter, str)\n \
    \   end\n  end\n  return substr_filter\nend", "\tlocal res = {}\n\tfor i, str\
    \ in ipairs(strings) do\n\t\tif str:find(substring) then\n\t\t\tres[#res + 1]\
    \ = str\n\t\tend\n\tend\n\treturn res\nend", "    local result = {}\n    for _,\
    \ string in ipairs(strings) do\n        if string:find(substring) then\n     \
    \       table.insert(result, string)\n        end\n    end\n    return result\n\
    end", "  local result = {}\n  for i = 1, #strings do\n    if strings[i]:match(substring)\
    \ then\n      table.insert(result, strings[i])\n    end\n  end\n  return result\n\
    end", "    local filtered = {}\n    for i, str in ipairs(strings) do\n       \
    \ if str:find(substring) then\n            table.insert(filtered, str)\n     \
    \   end\n    end\n    return filtered\nend", "    local ret = {}\n    for i, s\
    \ in ipairs(strings) do\n        if (string.find(s, substring) ~= nil) then\n\
    \            table.insert(ret, s)\n        end\n    end\n    return ret\nend",
  "\tlocal res = {}\n\tfor i, str in ipairs(strings) do\n\t\tif (string.find(str,\
    \ substring)) then\n\t\t\ttable.insert(res, str)\n\t\tend\n\tend\n\treturn res\n\
    end", "    return pl.List.filter(strings, function(v) return string.find(v, substring)\
    \ end)\nend", "    local filtered = {}\n    for _, string in ipairs(strings) do\n\
    \        if string:find(substring) then\n            table.insert(filtered, string)\n\
    \        end\n    end\n    return filtered\nend", "    local output = {}\n   \
    \ for _, str in ipairs(strings) do\n        if str:find(substring) then\n    \
    \        table.insert(output, str)\n        end\n    end\n    return output\n\
    end", "    local result = {}\n    for _, s in ipairs(strings) do\n        if s:find(substring)\
    \ then\n            table.insert(result, s)\n        end\n    end\n    return\
    \ result\nend", "  local res = {}\n  for i, str in ipairs(strings) do\n    if\
    \ str:find(substring) then\n      table.insert(res, str)\n    end\n  end\n  return\
    \ res\nend", "\tlocal result = {}\n\tfor _, v in ipairs(strings) do\n\t\tif string.find(v,\
    \ substring) then\n\t\t\ttable.insert(result, v)\n\t\tend\n\tend\n\treturn result\n\
    end", "\tlocal result = {}\n\tfor _, string in ipairs(strings) do\n\t\tif string:find(substring)\
    \ then\n\t\t\ttable.insert(result, string)\n\t\tend\n\tend\n\treturn result\n\
    end", "    local res = {}\n    for _, s in ipairs(strings) do\n        if string.find(s,\
    \ substring) then\n            table.insert(res, s)\n        end\n    end\n  \
    \  return res\nend", "    local result = {}\n    for _, v in ipairs(strings) do\n\
    \        if string.find(v, substring) then\n            table.insert(result, v)\n\
    \        end\n    end\n    return result\nend", "  local function contains(string)\n\
    \    return string:find(substring)\n  end\n  return utils.filter(strings, contains)\n\
    end", "\tlocal out = {}\n\tfor _, str in ipairs(strings) do\n\t\tif str:find(substring)\
    \ then\n\t\t\ttable.insert(out, str)\n\t\tend\n\tend\n\treturn out\nend", "  local\
    \ ret = {}\n  for _, str in ipairs(strings) do\n    if string.find(str, substring)\
    \ then\n      table.insert(ret, str)\n    end\n  end\n  return ret\nend", "  local\
    \ out = {}\n  for _, str in ipairs(strings) do\n    if string.find(str, substring)\
    \ then\n      table.insert(out, str)\n    end\n  end\n  return out\nend", "  local\
    \ substrings = {}\n  for i, s in ipairs(strings) do\n    if string.find(s, substring)\
    \ then\n      table.insert(substrings, s)\n    end\n  end\n  return substrings\n\
    end", "  local matches = {}\n  for _, word in ipairs(strings) do\n    if (word:find(substring))\
    \ then\n      table.insert(matches, word)\n    end\n  end\n  return matches\n\
    end", "  return List.filter(strings, function(s) return string.find(s, substring)\
    \ end)\nend", "    local filtered = {}\n    for _, str in ipairs(strings) do\n\
    \        if str:find(substring) then\n            table.insert(filtered, str)\n\
    \        end\n    end\n    return filtered\nend", "    local out = {}\n    for\
    \ i, string in ipairs(strings) do\n        if string:find(substring) then\n  \
    \          table.insert(out, string)\n        end\n    end\n    return out\nend",
  "  if not strings then return {} end\n  local new_list = {}\n  for _,s in ipairs(strings)\
    \ do\n    if string.find(s, substring) then\n      table.insert(new_list, s)\n\
    \    end\n  end\n  return new_list\nend", "\tlocal filtered = {}\n\tfor _,s in\
    \ ipairs(strings) do\n\t\tif string.find(s, substring) then\n\t\t\ttable.insert(filtered,\
    \ s)\n\t\tend\n\tend\n\treturn filtered\nend", "\tlocal filtered = {}\n\tfor _,\
    \ v in ipairs(strings) do\n\t\tif not string.find(v, substring) then\n\t\t\ttable.insert(filtered,\
    \ v)\n\t\tend\n\tend\n\treturn filtered\nend", "  local filtered = {}\n  local\
    \ substring_length = string.len(substring)\n  local function is_substring(string)\n\
    \    local string_length = string.len(string)\n    if string_length < substring_length\
    \ then\n      return false\n    end\n    return string.sub(string, 1, substring_length)\
    \ == substring\n  end\n  for _, string in ipairs(strings) do\n    if is_substring(string)\
    \ then\n      table.insert(filtered, string)\n    end\n  end\n  return filtered\n\
    end", "    local res = {}\n    for i = 1, #strings do\n        if strings[i]:find(substring)\
    \ then\n            res[#res + 1] = strings[i]\n        end\n    end\n    return\
    \ res\nend", "\tlocal filtered = {}\n\tfor _, str in ipairs(strings) do\n\t\t\
    if string.find(str, substring) then\n\t\t\ttable.insert(filtered, str)\n\t\tend\n\
    \tend\n\treturn filtered\nend", "  local filtered = {}\n  for _,v in ipairs(strings)\
    \ do\n    if string.find(v, substring) then\n      table.insert(filtered, v)\n\
    \    end\n  end\n  return filtered\nend", "    if substring == nil or strings\
    \ == nil then\n        return strings\n    end\n    local filtered = {}\n    for\
    \ _, str in ipairs(strings) do\n        if str:match(substring) then\n       \
    \     table.insert(filtered, str)\n        end\n    end\n    return filtered\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
