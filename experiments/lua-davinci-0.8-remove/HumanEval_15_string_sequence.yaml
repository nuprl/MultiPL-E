name: HumanEval_15_string_sequence
language: lua
prompt: "-- Return a string containing space-delimited numbers starting from 0 upto\
  \ n inclusive.\nlocal function string_sequence(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_sequence\n\
  \    lu.assertEquals(candidate(0), '0')\n    lu.assertEquals(candidate(3), '0 1\
  \ 2 3')\n    lu.assertEquals(candidate(10), '0 1 2 3 4 5 6 7 8 9 10')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\
    \treturn table.concat(t, \" \")\nend", "  local result = ''\n  for i = 0, n do\n\
    \    result = result .. tostring(i) .. ' '\n  end\n  return result\nend", "\t\
    local t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend", "\tlocal a = {}\n\tfor i = 0, n do\n\t\ta[i] = i\n\tend\n\treturn\
    \ table.concat(a, \" \")\nend", "    local s = \"\"\n    for i = 0, n, 1 do\n\
    \        s = s .. i .. \" \"\n    end\n    return s\nend", "  return table.concat(numbers_upto(n),\
    \ \" \")\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\
    \tend\n\treturn table.concat(t, \" \")\nend", "  local r = {}\n  for i = 0, n\
    \ do\n    r[i + 1] = i\n  end\n  return table.concat(r, \" \")\nend", "\tlocal\
    \ t = {}\n\tfor i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend", "  local s = ''\n  for i = 0, n do\n    s = s .. i .. ' '\n  end\n\
    \  return s\nend", "  local res = {}\n  for i = 0, n do\n    res[i + 1] = i\n\
    \  end\n  return table.concat(res, \" \")\nend", "    local numbers = {}\n   \
    \ for i = 0, n do\n        numbers[i] = tostring(i)\n    end\n    return table.concat(numbers,\
    \ \" \")\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, \" \")\nend", "\tlocal r = { }\n\tfor i =\
    \ 0, n do\n\t\tr[#r + 1] = tostring(i)\n\tend\n\treturn table.concat(r, \" \"\
    )\nend", "  local seq = {}\n  for i = 0, n do\n    seq[i] = i\n  end\n  return\
    \ table.concat(seq, \" \")\nend", "    local s = ''\n    for i = 0, n do\n   \
    \     s = s .. tostring(i) .. ' '\n    end\n    return s\nend", "\tlocal s = {}\n\
    \tfor i = 0, n do\n\t\ts[i + 1] = tostring(i)\n\tend\n\treturn table.concat(s,\
    \ \" \")\nend", "    if n == 0 then\n        return \"0\"\n    else\n        return\
    \ string_sequence(n-1) .. \" \" .. tostring(n)\n    end\nend", "\tlocal a = {}\n\
    \tfor i = 0, n do\n\t\ta[i] = tostring(i)\n\tend\n\treturn table.concat(a, \"\
    \ \")\nend", "    if n > 0 then\n        return table.concat({string_sequence(n-1),\
    \ n, n}, \" \")\n    else\n        return \"\"\n    end\nend", "    local values\
    \ = {}\n    for i = 0, n do\n        values[i] = tostring(i)\n    end\n    return\
    \ table.concat(values, \" \")\nend", "  return table.concat({unpack(\n    {n =\
    \ n, [n] = n},\n    function(self, i)\n      if i == 0 then return 0 end\n   \
    \   return self[i - 1]\n    end\n  )}, \" \")\nend", "    local r = {}\n    for\
    \ i = 0, n do\n        r[i + 1] = tostring(i)\n    end\n    return table.concat(r,\
    \ \" \")\nend", "\tlocal s = {}\n\tfor i = 0, n do\n\t\ts[i + 1] = tostring(i)\n\
    \tend\n\treturn table.concat(s, \" \")\nend", "\tassert(n >= 0, \"bad argument\
    \ #1 to 'string_sequence' (expected non-negative integer)\")\n\tif n == 0 then\
    \ return \"0\" end\n\tlocal result = { }\n\tfor i = 0, n do\n\t\tresult[i + 1]\
    \ = tostring(i)\n\tend\n\treturn table.concat(result, \" \")\nend", "  return\
    \ table.concat(range(n), \" \")\nend", "    local t = {}\n    for i = 0, n do\n\
    \        t[#t + 1] = i\n    end\n    return table.concat(t, \" \")\nend", "  \
    \  local seq = ''\n    for i = 0, n do\n        seq = seq .. i .. ' '\n    end\n\
    \    return seq\nend", "\tlocal seq = \"\"\n\tfor i = 0, n do\n\t\tseq = seq ..\
    \ i .. \" \"\n\tend\n\treturn seq\nend", "    local str = \"\"\n    for i = 0,\
    \ n do\n        str = str .. i .. \" \"\n    end\n    return str\nend", "    local\
    \ t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend", "    local s = {}\n    for i = 0, n do\n        s[i + 1] = i\n\
    \    end\n    return table.concat(s, \" \")\nend", "    if n < 0 then return \"\
    \" end\n    if n == 0 then return \"0\" end\n    local t = {}\n    for i = 0,\
    \ n do t[#t + 1] = i end\n    return table.concat(t, \" \")\nend", "    return\
    \ table.concat(table_sequence(n), \" \")\nend", "\tassert(n >= 0)\n\tlocal t =\
    \ {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend", "\tif n < 0 then return '' end\n\tif n == 0 then return '0' end\n\
    \treturn string_sequence(n // 10) .. ' ' .. tostring(n % 10)\nend", "    local\
    \ s = \"\"\n    for i = 0, n do\n        s = s .. i .. \" \"\n    end\n    return\
    \ s\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, \" \")\nend", "\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \")\n\
    end", "    local s = ''\n    for i = 0, n do\n        s = s .. ' ' .. i\n    end\n\
    \    return s\nend", "  local t = {}\n  for i = 0, n do\n    t[i + 1] = tostring(i)\n\
    \  end\n  return table.concat(t, \" \")\nend", "  local t = {}\n  for i = 0, n\
    \ do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t, \" \")\nend",
  "    local s = {}\n    for i = 0, n do\n        s[i + 1] = i\n    end\n    return\
    \ table.concat(s, \" \")\nend", "    local t = {}\n    for i = 0, n do\n     \
    \   t[#t + 1] = tostring(i)\n    end\n    return table.concat(t, \" \")\nend",
  "\tif not n then return end\n\tif n < 0 then return end\n\tlocal res = ''\n\tfor\
    \ i = 0, n do\n\t\tres = res .. i .. ' '\n\tend\n\treturn res\nend", "\tlocal\
    \ t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, \" \")\nend", "\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \")\n\
    end", "  local res = {}\n  for i = 0, n do\n    res[i + 1] = tostring(i)\n  end\n\
    \  return table.concat(res, \" \")\nend", "\tlocal result = { }\n\tfor i = 0,\
    \ n do\n\t\tresult[i + 1] = tostring(i)\n\tend\n\treturn table.concat(result,\
    \ \" \")\nend", "\treturn table.concat({ n and string_sequence(n - 1) or \"\"\
    , tostring(n or 0) }, \" \")\nend", "  if n < 0 then\n    return \"\"\n  end\n\
    \  local array = {}\n  for i = 0, n do\n    array[i + 1] = i\n  end\n  return\
    \ table.concat(array, \" \")\nend", "\tlocal str = {}\n\tfor i = 0, n do\n\t\t\
    str[i] = tostring(i)\n\tend\n\treturn table.concat(str, \" \")\nend", "    local\
    \ t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return\
    \ table.concat(t, \" \")\nend", "\tlocal s, i = {}, 0\n\twhile i <= n do\n\t\t\
    s[i+1] = tostring(i)\n\t\ti = i + 1\n\tend\n\treturn table.concat(s, \" \")\n\
    end", "  local out = {}\n  for i = 0, n do out[i + 1] = tostring(i) end\n  return\
    \ table.concat(out, \" \")\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i+1]\
    \ = tostring(i)\n\tend\n\treturn table.concat(t, \" \")\nend", "  assert(n >=\
    \ 0)\n  local t = {}\n  for i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n \
    \ return table.concat(t, \" \")\nend", "  local t = {}\n  for i = 0, n do\n  \
    \  t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend", "    local t = {}\n\
    \    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend", "\tlocal r = {}\n\tfor i = 0, n do\n\t\tr[i + 1] = i\n\tend\n\t\
    return table.concat(r, \" \")\nend", "    local t = {}\n    for i = 0, n do\n\
    \        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t, \" \")\n\
    end", "\tlocal buf = {}\n\tfor i = 0, n do\n\t\tbuf[#buf + 1] = tostring(i)\n\t\
    end\n\treturn table.concat(buf, \" \")\nend", "  if n < 0 then return \"\" end\n\
    \  return table.concat(range(n + 1), \" \")\nend", "    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend", "    local s = {}\n    for i = 0, n do\n        s[i] = tostring(i)\n\
    \    end\n    return table.concat(s, \" \")\nend", "  local num = {}\n  for i\
    \ = 0, n do\n    num[i] = tostring(i)\n  end\n  return table.concat(num, \" \"\
    )\nend", "    local a = {}\n    for i = 0, n do\n        a[i] = i\n    end\n \
    \   return table.concat(a, \" \")\nend", "    return table.concat({string.rep(\"\
    0 \", n), \"\"}, \" \")\nend", "\tlocal a = {}\n\tfor i = 0, n do\n\t\ta[i] =\
    \ tostring(i)\n\tend\n\treturn table.concat(a, \" \")\nend", "  local t = {}\n\
    \  for i = 0, n do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend",
  "  local t = {}\n  for i = 0, n do\n    t[i+1] = tostring(i)\n  end\n  return table.concat(t,\
    \ \" \")\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\
    \tend\n\treturn table.concat(t, \" \")\nend", "    local s = \"\"\n    for i =\
    \ 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend", "\tlocal\
    \ seq = {}\n\tfor i = 0, n do\n\t\tseq[i] = tostring(i)\n\tend\n\treturn table.concat(seq,\
    \ \" \")\nend", "    local seq = {}\n    for i = 0, n do\n        seq[i] = i\n\
    \    end\n    return table.concat(seq, \" \")\nend", "  if n < 1 then return \"\
    0\" end\n  return map(function(i) return tostring(i) end, range(n+1)).join(\"\
    \ \")\nend", "  local result = {}\n  for i = 0, n do\n    result[i + 1] = tostring(i)\n\
    \  end\n  return table.concat(result, \" \")\nend", "\tlocal str = ''\n\tfor i\
    \ = 0, n do\n\t\tstr = str .. ' ' .. i\n\tend\n\treturn str\nend", "  local a\
    \ = {}\n  for i = 0, n do\n    a[i + 1] = i\n  end\n  return table.concat(a, \"\
    \ \")\nend", "\tlocal r = {}\n\tfor i = 0, n do\n\t\tr[i + 1] = tostring(i)\n\t\
    end\n\treturn table.concat(r, \" \")\nend", "    local t = {}\n    for i = 0,\
    \ n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t, \"\
    \ \")\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, \" \")\nend", "\tlocal s = ''\n\tfor i =\
    \ 0, n do\n\t\ts = s .. i .. ' '\n\tend\n\treturn s\nend", "  local t = {}\n \
    \ for i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t,\
    \ \" \")\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n\
    \    end\n    return table.concat(t, \" \")\nend", "\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \")\n\
    end", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\t\
    return table.concat(t, \" \")\nend", "  local out = { }\n  for i = 0, n do\n \
    \   out[i+1] = tostring(i)\n  end\n  return table.concat(out, \" \")\nend", " \
    \   local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n    end\n    return\
    \ table.concat(t, \" \")\nend", "  if n < 0 then return \"\" end\n  local t =\
    \ {}\n  for i = 0, n do t[#t + 1] = tostring(i) end\n  return table.concat(t,\
    \ \" \")\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n\
    \    end\n    return table.concat(t, \" \")\nend", "\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \")\n\
    end", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, \" \")\nend", "  local t = {}\n  for i =\
    \ 0, n do\n    t[i + 1] = i\n  end\n  return table.concat(t, \" \")\nend", "\t\
    local t = {}\n\tfor i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n\
    \    end\n    return table.concat(t, \" \")\nend", "\treturn table.concat(table.pack(table.unpack(function(n)\n\
    \t\tlocal t = {}\n\t\tfor i = 0, n do t[i] = tostring(i) end\n\t\treturn t\n\t\
    end(n))), \" \")\nend", "  local buf = {}\n  for i = 0, n do\n    buf[#buf + 1]\
    \ = i\n  end\n  return table.concat(buf, \" \")\nend", "\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \"\
    \ \")\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, \" \")\nend", "    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return table.concat(t,\
    \ \" \")\nend", "  local t = {}\n  for i = 0, n do\n    t[i + 1] = tostring(i)\n\
    \  end\n  return table.concat(t, \" \")\nend", "    local result = {}\n    for\
    \ i = 0, n do\n        result[i] = i\n    end\n    return table.concat(result,\
    \ \" \")\nend", "  local t = {}\n  for i = 0, n do\n    t[i + 1] = tostring(i)\n\
    \  end\n  return table.concat(t, \" \")\nend", "  local r = {}\n  for i = 0, n\
    \ do\n    r[i + 1] = i\n  end\n  return table.concat(r, \" \")\nend", "\treturn\
    \ string.rep(\" 0\", n + 1)\nend", "\tassert(type(n) == \"number\")\n\tlocal values\
    \ = {}\n\tfor i = 0, n do\n\t\tvalues[i + 1] = tostring(i)\n\tend\n\treturn table.concat(values,\
    \ \" \")\nend", "  local t = {}\n  for i = 0, n do\n    t[i+1] = tostring(i)\n\
    \  end\n  return table.concat(t, \" \")\nend", "    local result = {}\n    for\
    \ i = 0, n do\n        result[i + 1] = tostring(i)\n    end\n    return table.concat(result,\
    \ \" \")\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = i\n\
    \    end\n    return table.concat(t, \" \")\nend", "  local t = {}\n  for i =\
    \ 0, n do\n    t[i] = i\n  end\n  return table.concat(t, \" \")\nend", "    local\
    \ str = ''\n    for i = 0, n do\n        str = str .. ' ' .. i\n    end\n    return\
    \ str\nend", "  local t = {}\n  for i = 0, n do\n    t[i] = tostring(i)\n  end\n\
    \  return table.concat(t, \" \")\nend", "\tlocal s = '0'\n\tfor i = 1, n do\n\t\
    \ts = s .. ' ' .. i\n\tend\n\treturn s\nend", "  local t = {}\n  for i = 0, n\
    \ do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend", "\tlocal s\
    \ = \"\"\n\tfor i = 0, n do\n\t\ts = s .. \" \" .. i\n\tend\n\treturn s\nend",
  "  if n == 0 then return \"0\" end\n  local s = {}\n  for i = 0, n do s[i] = tostring(i)\
    \ end\n  return table.concat(s, \" \")\nend", "  local t = {}\n  for i = 0, n\
    \ do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend", "    local\
    \ string = \"\"\n    for i = 0, n do\n        string = string .. i .. \" \"\n\
    \    end\n    return string\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i\
    \ + 1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \")\nend", "    local\
    \ t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n    return\
    \ table.concat(t, \" \")\nend", "    local t = {}\n    for i = 0, n do\n     \
    \   t[#t + 1] = tostring(i)\n    end\n    return table.concat(t, \" \")\nend",
  "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn\
    \ table.concat(t, \" \")\nend", "  local t = {}\n  for i = 0, n do\n    t[i +\
    \ 1] = i\n  end\n  return table.concat(t, \" \")\nend", "\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\
    \treturn table.concat(t, \" \")\nend", "\tlocal s = ''\n\tfor i = 0, n do\n\t\t\
    s = s .. ' ' .. i\n\tend\n\treturn s\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\
    \t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \")\nend", "    local\
    \ s = \"\"\n    for i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return\
    \ s\nend", "\tlocal text = \"\"\n\tfor i = 0, n do\n\t\ttext = text .. tostring(i)\
    \ .. \" \"\n\tend\n\treturn text\nend", "    if n == 0 then\n        return \"\
    0\"\n    else\n        return string_sequence(n-1) .. \" \" .. tostring(n)\n \
    \   end\nend", "  local t = {}\n  for i = 0, n do\n    t[i+1] = i\n  end\n  return\
    \ table.concat(t, \" \")\nend", "    local s = {}\n    for i = 0, n do\n     \
    \   s[i + 1] = tostring(i)\n    end\n    return table.concat(s, \" \")\nend",
  "    local result = {}\n    for i = 0, n do\n        result[i] = tostring(i)\n \
    \   end\n    return table.concat(result, \" \")\nend", "    local s = \"\";\n\
    \    for i = 0, n do\n        s = s .. \" \" .. i;\n    end\n    return s;\nend",
  "\tif n == 0 then\n\t\treturn \"0\"\n\telse\n\t\treturn string.rep(\"0 \", n)\n\t\
    end\nend", "    if n == 0 then\n        return '0'\n    else\n        return string_sequence(n-1)\
    \ .. ' ' .. tostring(n)\n    end\nend", "\tlocal s = ''\n\tfor i = 0, n do\n\t\
    \ts = s .. tostring(i) .. ' '\n\tend\n\treturn s\nend", "\tlocal t = {}\n\tfor\
    \ i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \"\
    )\nend", "    local sequence = {}\n    for i = 0, n do\n        sequence[i] =\
    \ i\n    end\n    return table.concat(sequence, \" \")\nend", "  return table.concat(range(n),\
    \ \" \")\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, \" \")\nend", "    local t = {}\n    for\
    \ i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t, \" \"\
    )\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\
    \treturn table.concat(t, \" \")\nend", "\treturn table.concat(utility.map(utility.range(n),tostring),\"\
    \ \")\nend", "  local result = {}\n  for i = 0, n do\n    result[i + 1] = tostring(i)\n\
    \  end\n  return table.concat(result, \" \")\nend", "  assert(n >= 0, \"n must\
    \ be positive\")\n  return (\":1:2:3:4:5:6:7:8:9:10:\"):rep(n):sub(2, -2)\nend",
  "  if n == 0 then return '0' end\n  local s = {}\n  for i = 0, n do s[i+1] = tostring(i)\
    \ end\n  return table.concat(s, ' ')\nend", "  return string.rep(\" 0\", n)\n\
    end", "    if n == 0 then\n        return \"0\"\n    else\n        return string_sequence(n-1)\
    \ .. \" \" .. tostring(n)\n    end\nend", "  local t = {}\n  for i = 0, n do\n\
    \    t[i + 1] = tostring(i)\n  end\n  return table.concat(t, \" \")\nend", "\t\
    local t = {}\n\tfor i = 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend", "  local t = {}\n  for i = 0, n do\n    t[i+1] = tostring(i)\n\
    \  end\n  return table.concat(t, \" \")\nend", "\tlocal seq = \"\"\n\tfor i =\
    \ 0, n do\n\t\tseq = seq .. i .. \" \"\n\tend\n\treturn seq\nend", "\tlocal s\
    \ = {};\n\tfor i = 0, n do\n\t\ts[i] = tostring(i);\n\tend\n\treturn table.concat(s,\
    \ \" \");\nend", "    if n == 0 then\n        return \"0\"\n    else\n       \
    \ return string_sequence(n-1) .. \" \" .. tostring(n)\n    end\nend", "\tlocal\
    \ t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\tend\n\treturn table.concat(t,\
    \ \" \")\nend", "    if n == 0 then\n        return \"0\"\n    else\n        return\
    \ string_sequence(n-1) .. \" \" .. tostring(n)\n    end\nend", "\tassert(type(n)\
    \ == \"number\")\n\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i+1] = tostring(i)\n\
    \tend\n\treturn table.concat(t, \" \")\nend", "  local t = {}\n  for i = 0, n\
    \ do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend", "  local t\
    \ = {}\n  for i = 0, n do\n    t[i+1] = tostring(i)\n  end\n  return table.concat(t,\
    \ \" \")\nend", "    if n == 0 then\n        return \"0\"\n    else\n        return\
    \ string_sequence(n-1) .. \" \" .. tostring(n)\n    end\nend", "  local t = {}\n\
    \  for i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t,\
    \ \" \")\nend", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, \" \")\nend", "    local digits = {}\n  \
    \  for i = 0, n do\n        digits[i] = tostring(i)\n    end\n    return table.concat(digits,\
    \ \" \")\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i+1] = tostring(i)\n\
    \tend\n\treturn table.concat(t, \" \")\nend", "    local seq = {}\n    for i =\
    \ 0, n do\n        seq[i + 1] = i\n    end\n    return table.concat(seq, \" \"\
    )\nend", "    local ret = {}\n    for i = 0, n do\n        ret[i + 1] = tostring(i)\n\
    \    end\n    return table.concat(ret, \" \")\nend", "    local s = \"\"\n   \
    \ for i = 0, n do\n        s = s .. \" \" .. i\n    end\n    return s\nend", " \
    \   local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n    end\n\
    \    return table.concat(t, \" \")\nend", "\tassert(n >= 0, \"negative n\")\n\t\
    if n == 0 then\n\t\treturn \"0\"\n\tend\n\tlocal s = {}\n\tfor i = 0, n do\n\t\
    \ts[i + 1] = i\n\tend\n\treturn table.concat(s, \" \")\nend", "    local buffer\
    \ = {}\n    for i = 0, n do\n        buffer[#buffer + 1] = tostring(i)\n    end\n\
    \    return table.concat(buffer, \" \")\nend", "  local t = {}\n  for i = 0, n\
    \ do\n    t[i+1] = i\n  end\n  return table.concat(t, \" \")\nend", "    if n\
    \ == 0 then\n        return \"0\"\n    else\n        return n..\" \"..string_sequence(n-1)\n\
    \    end\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\tt[i + 1] = tostring(i)\n\
    \tend\n\treturn table.concat(t, \" \")\nend", "\tlocal sequence = {}\n\tfor i\
    \ = 0, n do\n\t\tsequence[i] = i\n\tend\n\treturn table.concat(sequence, \" \"\
    )\nend", "  local str = \"\"\n  for i = 0, n do\n    str = str .. i .. \" \"\n\
    \  end\n  return str\nend", "    local s = {}\n    for i = 0, n do\n        s[i]\
    \ = i\n    end\n    return table.concat(s, \" \")\nend", "    local t = {}\n \
    \   for i = 0, n do\n        t[#t + 1] = i\n    end\n    return table.concat(t,\
    \ \" \")\nend", "\tlocal i, s = 0, {}\n\twhile i <= n do\n\t\ts[i + 1] = i\n\t\
    \ti = i + 1\n\tend\n\treturn table.concat(s, \" \")\nend", "\tlocal string_sequence\
    \ = {}\n\tfor i = 0, n do\n\t\tstring_sequence[i + 1] = tostring(i)\n\tend\n\t\
    return table.concat(string_sequence, \" \")\nend", "\tlocal t = {}\n\tfor i =\
    \ 0, n do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \")\n\
    end", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, \" \")\nend", "    local s = ''\n    for\
    \ i = 0, n do\n        s = s .. i .. ' '\n    end\n    return s\nend", "  if n\
    \ <= 0 then return \"0\" end\n  local t = {}\n  for i = 0, n do t[#t+1] = tostring(i)\
    \ end\n  return table.concat(t, \" \")\nend", "\tlocal t = {}\n\tfor i = 0, n\
    \ do\n\t\tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \")\nend",
  "  local t = {}\n  for i = 0, n do\n    t[i + 1] = i\n  end\n  return table.concat(t,\
    \ \" \")\nend", "\tlocal seq = {}\n\tfor i = 0, n do\n\t\tseq[i] = i\n\tend\n\t\
    return table.concat(seq, \" \")\nend", "    local sequence = {}\n    for i = 0,\
    \ n do\n        sequence[i] = i\n    end\n    return table.concat(sequence, \"\
    \ \")\nend", "  local seq = {}\n  for i = 0, n do\n    seq[i] = tostring(i)\n\
    \  end\n  return table.concat(seq, \" \")\nend", "  assert(n >= 0)\n  local t\
    \ = {}\n  for i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n  return table.concat(t,\
    \ \" \")\nend", "\tassert(n >= 0)\n\tlocal s = \"\"\n\tfor i = 0, n do\n\t\ts\
    \ = s .. i .. \" \"\n\tend\n\treturn s\nend", "\tlocal result = {}\n\tfor i =\
    \ 0, n do\n\t\tresult[i] = tostring(i)\n\tend\n\treturn table.concat(result, \"\
    \ \")\nend", "\tlocal result = ''\n\tfor i = 0, n, 1 do\n\t\tresult = result ..\
    \ tostring(i) .. ' '\n\tend\n\treturn result\nend", "  if n < 0 then\n    return\
    \ ''\n  end\n  return string.rep(' ', n) .. '0\\n' .. string_sequence(n - 1)\n\
    end", "    local t = {}\n    for i = 0, n do\n        t[#t + 1] = tostring(i)\n\
    \    end\n    return table.concat(t, \" \")\nend", "    local str = \"0\"\n  \
    \  for i = 1, n do\n        str = str .. \" \" .. i\n    end\n    return str\n\
    end", "  local t = {}\n  for i = 0, n do\n    t[i + 1] = tostring(i)\n  end\n\
    \  return table.concat(t, \" \")\nend", "\tlocal t = {}\n\tfor i = 0, n do\n\t\
    \tt[i+1] = tostring(i)\n\tend\n\treturn table.concat(t, \" \")\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
