name: HumanEval_102_choose_num
language: lua
prompt: "-- This function takes two positive numbers x and y and returns the\n-- biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n-- there's no\
  \ such number, then the function should return -1.\n-- For example:\nlocal function\
  \ choose_num(x, y)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
  \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13, 12),\
  \ -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
  \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
  \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
  \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local x = tonumber(x)\n    local y = tonumber(y)\n    local max\
    \ = -1\n    if x % 2 == 0 then\n        max = x\n    else\n        max = x + 1\n\
    \    end\n    while max < y do\n        if max % 2 == 0 then\n            return\
    \ max\n        end\n        max = max + 1\n    end\n    return -1\nend", "\tlocal\
    \ i=0\n\tif x%2==0 then i=x else i=x+1 end\n\twhile i<=y do\n\t\treturn i\n\t\t\
    i=i+2\n\tend\n\treturn -1\nend", "  return -1 -- TODO: add your code here\nend",
  "  local num = math.max(x, y)\n  local found = false\n  while num >= x do\n    if\
    \ (num % 2) == 0 then\n      found = true\n      break\n    end\n    num = num\
    \ - 1\n  end\n  if found then\n    return num\n  else\n    return -1\n  end\n\
    end", "    local num = -1\n    if(x%2 == 0) then\n        num = x\n    else\n\
    \        x = x + 1\n    end\n    while(x <= y) do\n        if(num < x) then\n\
    \            num = x\n        end\n        x = x + 2\n    end\n    return num\n\
    end", "  \n    local z = 0\n    for i = y, x, -1 do\n       if(i % 2 == 0) then\
    \ \n            z = i\n        end\n    end\n    if(z ~= 0) then\n        return\
    \ z\n    else\n        return -1\n    end\n    \nend", "    -- body\nend", " \
    \   local result = -1\n    if x % 2 == 0 then\n        result = x\n    else\n\
    \        x = x + 1\n    end\n    for n = x, y, 2 do\n        result = n\n    end\n\
    \    return result\nend", "    local max = -1\n    for i = x, y do\n        if\
    \ i % 2 == 0 and i > max then\n            max = i\n        end\n    end\n   \
    \ return max\nend", "    for i = y, x, -1 do\n        if i % 2 == 0 then\n   \
    \         return i\n        end\n    end\n    return -1\nend", "    if x == nil\
    \ or y == nil then\n        return -1\n    end\n    if x % 2 == 0 then\n     \
    \   return x\n    elseif y % 2 == 0 then\n        return y\n    else\n       \
    \ return -1\n    end\nend", "    local num = -1\n    if x%2 == 0 then\n      \
    \  num = x\n    elseif x+1 <= y then\n        num = x+1\n    end\n    return num\n\
    end", "    if x % 2 == 0 then\n        if x > y then\n            return x\n \
    \       elseif y % 2 == 0 then\n            return y\n        else\n         \
    \   local k = math.floor(y / 2)\n            return k * 2\n        end\n    else\n\
    \        return choose_num(x + 1, y)\n    end\nend", "  \nend", "    return -1\n\
    end", "    if x % 2 == 0 then\n        return y % 2 == 0 and math.max(x, y) or\
    \ x\n    else\n        return y % 2 == 0 and y or -1\n    end\nend", "    -- Add\
    \ code here\nend", "  if (x > y) then\n    return -1\n  end\n  if (x % 2 == 0)\
    \ then\n    return x\n  end\n  return choose_num(x + 1, y)\nend", end, "    --\
    \ x and y are assumed to be positive and x <= y\n    if x < 0 or y < 0 then\n\
    \        return -1\n    end\n    if (x % 2 == 0) then\n        return x\n    else\n\
    \        return choose_num(x + 1, y)\n    end\nend", "    -- TODO: fill in the\
    \ missing code here\nend", '  if x >= y then return -1 end', "\tfor i = y, x,\
    \ -1 do\n\t\tif i % 2 == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\n\
    end\nprint(choose_num(3, 7))\nprint(choose_num(8, 8))\nprint(choose_num(2, 3))\n\
    print(choose_num(1, 3))\nprint(choose_num(1, 1))\nprint(choose_num(1, 0))", "\t\
    local num = 0\n\t-- find biggest even number\n\tif y % 2 == 0 then\n\t\tnum =\
    \ y\n\telseif y-1 % 2 == 0 then\n\t\tnum = y-1\n\telseif y-2 % 2 == 0 then\n\t\
    \tnum = y-2\n\telseif y-3 % 2 == 0 then\n\t\tnum = y-3\n\telseif y-4 % 2 == 0\
    \ then\n\t\tnum = y-4\n\telseif y-5 % 2 == 0 then\n\t\tnum = y-5\n\telseif y-6\
    \ % 2 == 0 then\n\t\tnum = y-6\n\telseif y-7 % 2 == 0 then\n\t\tnum = y-7\n\t\
    elseif y-8 % 2 == 0 then\n\t\tnum = y-8\n\telseif y-9 % 2 == 0 then\n\t\tnum =\
    \ y-9\n\telse\n\t\tnum = -1\n\tend\n\t-- check that it is in the range\n\tif num\
    \ < x then\n\t\tnum = -1\n\tend\n\treturn num\nend", "    error \"Not implemented\"\
    \nend", "    -- Your code here\n    return -1\nend", "    -- write your code here\n\
    end", "\tlocal z = -1\n\tlocal even = math.max(x, y) % 2\n\t\n\tif even ~= 0 then\n\
    \t\teven = even - 1\n\tend\n\t\n\twhile even > 0 do\n\t\teven = even - 2\n\tend\n\
    \t\n\twhile math.max(x, y) - even <= 0 do\n\t\teven = even - 2\n\tend\n\t\n\t\
    if even >= math.min(x, y) then\n\t\tz = even\n\tend\n\t\n\treturn z\nend", "end\n\
    assert(choose_num(0, 0) == 0)\nassert(choose_num(0, 4) == 4)\nassert(choose_num(4,\
    \ 4) == 4)\nassert(choose_num(1, 5) == 4)\nassert(choose_num(5, 1) == 4)\nassert(choose_num(0,\
    \ -5) == -1)\nassert(choose_num(3, 5) == 4)\nassert(choose_num(2, 10) == 10)\n\
    assert(choose_num(1, 1) == -1)\nassert(choose_num(2, 3) == -1)\nassert(choose_num(10,\
    \ 2) == 10)\nassert(choose_num(5, 8) == 8)\nassert(choose_num(8, 5) == 8)\nassert(choose_num(4,\
    \ 8) == 8)\nassert(choose_num(8, 4) == 8)\nassert(choose_num(1, 2) == -1)\nassert(choose_num(3,\
    \ 4) == -1)\nassert(choose_num(2, 3) == -1)\nassert(choose_num(3, 2) == -1)\n\
    assert(choose_num(4, 5) == -1)\nassert(choose_num(5, 4) == -1)\nassert(choose_num(6,\
    \ 5) == -1)\nassert(choose_num(5, 6) == -1)\nassert(choose_num(3, 5) == 4)\nassert(choose_num(5,\
    \ 3) == 4)\nassert(choose_num(3, 6) == 6)\nassert(choose_num(6, 3) == 6)\nassert(choose_num(6,\
    \ 8) == 8)\nassert(choose_num(8, 6) == 8)\nassert(choose_num(4, 6) == 6)\nassert(choose_num(6,\
    \ 4) == 6)\nassert(choose_num(4, 5) == -1)\nassert(choose_num(5, 4) == -1)\n",
  "\t-- find the biggest number in the range\n\tlocal biggest = 0;\n\tif x >= y then\n\
    \t\tbiggest = x;\n\telse\n\t\tbiggest = y;\n\tend\n\t\n\t-- test for even number,\
    \ if yes, then return that\n\tif biggest % 2 == 0 then\n\t\treturn biggest;\n\t\
    end\n\t\n\t-- test for odd number, if yes, then search for an even number\n\t\
    if biggest % 2 == 1 then\n\t\tlocal check = biggest;\n\t\twhile check > 0 do\n\
    \t\t\tif check % 2 == 0 then\n\t\t\t\treturn check;\n\t\t\tend\n\t\t\tcheck =\
    \ check - 1;\n\t\tend\n\tend\n\t\n\t-- if no even number is found, then return\
    \ -1\n\treturn -1;\nend", "\t-- YOUR CODE HERE\nend", "\tlocal r = x\n\tif x%2==1\
    \ then\n\t\tr = x+1\n\tend\n\tif r > y then\n\t\treturn -1\n\tend\n\treturn r\n\
    end", "    -- check the preconditions\n    assert(x >= 0 and y >= 0 and type(x)\
    \ == \"number\" and type(y) == \"number\")\n    -- calculate the max even number\n\
    \    local max_even = -1;\n    if x % 2 == 0 then\n        max_even = x\n    else\n\
    \        max_even = x + 1\n    end\n    while max_even <= y do\n        if max_even\
    \ % 2 == 0 then\n            return max_even\n        end\n        max_even =\
    \ max_even + 1\n    end\n    return -1\nend", "  -- TODO: write the function body\n\
    \  if x%2 == 1 then\n    x = x + 1\n  end\n  while x <= y do\n    if x%2 == 0\
    \ then\n      return x\n    end\n    x = x + 1\n  end\n  return -1\nend", "\t\
    if x % 2 == 0 then\n\t\treturn x\n\telseif x + 1 <= y then\n\t\treturn x + 1\n\
    \telse\n\t\treturn -1\n\tend\nend", "\tif x%2 == 0 then\n\t\tif y > x then return\
    \ y\n\t\telse return x\n\t\tend\n\telse\n\t\tif x%2 == 0 then\n\t\t\tif y > x\
    \ then return y\n\t\t\telse return x\n\t\t\tend\n\t\telse return -1\n\t\tend\n\
    \tend\nend\nassert(choose_num(1, 8) == 8)\nassert(choose_num(3, 8) == 8)\nassert(choose_num(3,\
    \ 7) == 6)\nassert(choose_num(3, 9) == 8)\nassert(choose_num(4, 4) == 4)\nassert(choose_num(4,\
    \ 5) == 4)\nassert(choose_num(4, 6) == 6)\nassert(choose_num(5, 6) == -1)", " \
    \   assert(type(x) == \"number\" and type(y) == \"number\" and x > 0 and y > 0,\
    \ \"invalid input\")\n    if (x % 2 == 0) then\n        return x\n    elseif (y\
    \ % 2 == 0) then\n        return y\n    else\n        return -1\n    end\nend",
  "  -- Your code goes here\nend", "  for i = y, x, -1 do\n    if i % 2 == 0 then\n\
    \      return i\n    end\n  end\n  return -1\nend", "    if x % 2 == 0 then\n\
    \        return y\n    elseif y % 2 == 0 then\n        return x\n    elseif x\
    \ % 2 == 0 and y % 2 == 0 then\n        return y\n    elseif x > y and x % 2 ==\
    \ 0 then\n        return x\n    elseif x < y and y % 2 == 0 then\n        return\
    \ y\n    else\n        return -1\n    end\nend", "\t-- body\nend", "\tlocal max\
    \ = -1\n\tfor i = x, y do\n\t\tif i % 2 == 0 and i > max then\n\t\t\tmax = i\n\
    \t\tend\n\tend\n\treturn max\nend", "\tif not(x < y) then\n\t\terror(\"x must\
    \ be less than y\")\n\tend\n\tlocal result = -1\n\tfor i = y, x, -1 do\n\t\tif\
    \ i % 2 == 0 then\n\t\t\tresult = i\n\t\t\tbreak\n\t\tend\n\tend\n\treturn result\n\
    end", "    -- YOUR CODE GOES HERE\nend", "    -- your code goes here\nend", " \
    \   local result = x\n    if y % 2 == 0 then \n        result = y\n    end\n \
    \   for i = x, y do\n        if i % 2 == 0 and i > result then\n            result\
    \ = i\n        end\n    end\n    if result % 2 == 0 then\n        return result\n\
    \    else\n        return -1\n    end\nend", "    if x % 2 == 0 then\n       \
    \ if x > y then\n            return -1\n        else\n            return x\n \
    \       end\n    else\n        return choose_num(x + 1, y)\n    end\nend", " \
    \ --TODO: write your code here\nend", "\tlocal l = {}\n\tfor i = x, y do\n\t\t\
    if math.fmod(i, 2) == 0 then\n\t\t\ttable.insert(l, i)\n\t\tend\n\tend\n\tlocal\
    \ max = -1\n\tfor i = 1, #l do\n\t\tif l[i] > max then\n\t\t\tmax = l[i]\n\t\t\
    end\n\tend\n\treturn max\nend", "\t-- TODO: Your solution here.\nend", "    for\
    \ i = y, x, -1 do\n        if i % 2 == 0 then\n            return i\n        end\n\
    \    end\n    return -1\nend", end, "  return ((x + y) / 2):floor()\nend", " \
    \ local n = -1\n  local i = x\n  while i <= y do\n    if math.fmod(i, 2) == 0\
    \ then\n      n = i\n    end\n    i = i + 1\n  end\n  return n\nend", '    if
    x > y then return -1 end', "  \n  -- Write some code here\n  \nend", "\tif (x\
    \ % 2 == 0) then\n\t\tif (x >= y) then\n\t\t\treturn x\n\t\telse\n\t\t\treturn\
    \ choose_num(x + 2, y)\n\t\tend\n\telse\n\t\tif (x + 1 >= y) then\n\t\t\treturn\
    \ -1\n\t\telse\n\t\t\treturn choose_num(x + 2, y)\n\t\tend\n\tend\nend", "   \
    \ if x <= y then\n        if x % 2 == 0 then\n            if x == y then\n   \
    \             return x\n            else\n                return choose_num(x\
    \ + 2, y)\n            end\n        else\n            return choose_num(x + 1,\
    \ y)\n        end\n    else\n        return -1\n    end\nend", "    local arr\
    \ = {}\n    local size = 0\n    for i = x, y do\n        if i % 2 == 0 then\n\
    \            size = size + 1\n            arr[size] = i\n        end\n    end\n\
    \    if size == 0 then\n        return -1\n    end\n    local result = arr[1]\n\
    \    for i = 2, size do\n        if arr[i] > result then\n            result =\
    \ arr[i]\n        end\n    end\n    return result\nend", "    -- FIXME!\nend",
  "    -- YOUR CODE HERE\n    if x%2 == 0 then\n        return x\n    elseif x+1 <\
    \ y then\n        return choose_num(x+1, y)\n    else\n        return -1\n   \
    \ end\nend", "    --[[\n    if x > y then\n        return -1\n    end\n    for\
    \ i = y, x, -1 do\n        if i % 2 == 0 then\n            return i\n        end\n\
    \    end\n    return -1\n    ]]", "  -- returning -1 if x is greater than y\n\
    \  if x > y then return -1 end\n  -- returning -1 if x and y are not positive\n\
    \  if x < 0 or y < 0 then return -1 end\n  -- assigning y to max if y is even\n\
    \  if y % 2 == 0 then max = y end\n  -- assigning y-1 to max if y is odd\n  if\
    \ y % 2 == 1 then max = y-1 end\n  -- starting loop from max to x\n  for i = max,\
    \ x, -2 do\n    -- returning a value if i is even\n    if i % 2 == 0 then return\
    \ i end\n  end\n  -- returning -1 if no even number is found\n  return -1\nend",
  "    -- TODO\nend", "\tif (x % 2) == 0 then\n\t\tif x == y then\n\t\t\treturn x\n\
    \t\telseif x > y then\n\t\t\treturn -1\n\t\telse\n\t\t\treturn choose_num(x +\
    \ 2, y)\n\t\tend\n\telse\n\t\treturn choose_num(x + 1, y)\n\tend\nend", end, " \
    \ -- Your solution here\nend", "  return x\nend", "   if x > y then return -1\
    \ end\n   if x % 2 == 0 then\n      return y % 2 == 0 and y or choose_num(x, y\
    \ - 1)\n   else\n      return choose_num(x + 1, y)\n   end\nend", "    while x\
    \ <= y do\n        if x % 2 == 0 then\n            return x\n        end\n   \
    \     x = x + 1\n    end\n    return -1\nend", "\t-- ... your code here\n\tx =\
    \ math.floor(x)\n\ty = math.floor(y)\n\tif x > y then\n\t\treturn -1\n\tend\n\t\
    if x%2 == 0 then\n\t\tif y%2 == 0 then\n\t\t\treturn y\n\t\telse\n\t\t\treturn\
    \ y-1\n\t\tend\n\telse\n\t\tif y%2 == 0 then\n\t\t\treturn y\n\t\telse\n\t\t\t\
    return y-1\n\t\tend\n\tend\nend", "    if x >= y then\n        return -1\n   \
    \ end\n    if y % 2 == 0 then\n        return y\n    end\n    if y - 1 % 2 ==\
    \ 0 then\n        return y - 1\n    end\n    return choose_num(x, y - 2)\nend",
  "    if x % 2 == 0 then \n        return math.max(x,y)\n    elseif y % 2 == 0 then\n\
    \        return y\n    else \n        return -1\n    end\nend", "    -- ... your\
    \ code here\nend", "\tif x % 2 == 0 then\n\t\tif x == y then\n\t\t\treturn x\n\
    \t\telse\n\t\t\treturn choose_num(x + 2, y)\n\t\tend\n\telse\n\t\tif x == y then\n\
    \t\t\treturn -1\n\t\telse\n\t\t\treturn choose_num(x + 1, y)\n\t\tend\n\tend\n\
    end", "  -- Code goes here.\n  if x == y then\n    if x % 2 == 0 then return x\n\
    \    else return -1 end\n  end\n  if x == 1 then return 2 end\n  if x % 2 == 0\
    \ then return choose_num(x+1, y)\n  else return choose_num(x+2, y) end\nend",
  "    local n = -1\n    for i = x, y do\n        if n % 2 == 0 then\n           \
    \ n = i\n        end\n    end\n    return n\nend\nprint(choose_num(0, 10))", " \
    \   -- Returns a number from 1 to 6 inclusive\n    local n = math.random(x, y)\n\
    \    return n\nend", "    -- Write your code here\nend", "  -- your code here\n\
    end", "\t-- Create a table containing all even numbers in [x, y] inclusive\n\t\
    local evens = {}\n\tfor n = x, y do\n\t\tif n % 2 == 0 then evens[#evens + 1]\
    \ = n end\n\tend\n\t-- Return the largest number in the table (or -1 if the table\
    \ is empty)\n\treturn evens[#evens] or -1\nend", "\tif x % 2 == 0 then \n\t\t\
    return x\n\telseif x % 2 == 1 then\n\t\treturn choose_num(x + 1, y)\n\tend\nend",
  "\t-- return -1\n\treturn -1\nend", "    if x > y then return -1 end\n    if x %\
    \ 2 == 0 then return x end\n    return choose_num(x + 1, y)\nend", "\tif x > y\
    \ then\n\t\treturn -1\n\tend\n\tlocal even_num = y - (y % 2)\n\twhile even_num\
    \ >= x do\n\t\treturn even_num\n\tend\n\treturn -1\nend", "    for i = y, x, -1\
    \ do\n        if i % 2 == 0 then\n            return i\n        end\n    end\n\
    \    return -1\nend", "  local max = 0\n  for i = x, y do\n    if i % 2 == 0 and\
    \ i > max then\n      max = i\n    end\n  end\n  if max == 0 then\n    return\
    \ -1\n  else\n    return max\n  end\nend", "    if x % 2 == 0 then return math.max(x,\
    \ y) end\n    return math.max(x + 1, y)\nend", "   -- Your code here\n   num =\
    \ x;\n   if num % 2 == 0 then\n\t  max = num;\n   else\n      num = num + 1;\n\
    \      max = num;\n   end\n   for i = num, y do\n      if i % 2 == 0 then\n\t\t\
    \ max = i;\n\t  end\n   end\n   if max < x then\n      return -1;\n   else\n \
    \     return max;\n   end\nend", "    local i = x\n    while (i <= y) do\n   \
    \     if (i % 2 == 0) then return i end\n        i = i + 1\n    end\n    return\
    \ -1\nend", "    if x > y then\n        return -1\n    end\n    if x % 2 == 0\
    \ then\n        return x\n    end\n    if x % 2 == 1 then\n        return choose_num(x\
    \ + 1, y)\n    end\nend", "  return 0\nend", "    if (x < 0) or (y < 0) then\n\
    \        return -1\n    end\n    if x > y then\n        x, y = y, x\n    end\n\
    \    while y >= x do\n        if y % 2 == 0 then\n            return y\n     \
    \   end\n        y = y - 1\n    end\n    return -1\nend", "   --write your code\
    \ here\nend", "\tif y < x then\n\t\treturn -1\n\tend\n\tlocal largest = x\n\t\
    for i = x, y do\n\t\tif i % 2 == 0 and i > largest then\n\t\t\tlargest = i\n\t\
    \tend\n\tend\n\tif largest % 2 == 0 then\n\t\treturn largest\n\telse\n\t\treturn\
    \ -1\n\tend\nend", "\tif x > y then\n\t\treturn -1\n\tend\n\tif x % 2 == 0 then\n\
    \t\treturn x\n\tend\n\treturn choose_num(x + 1, y)\nend", "\t-- TODO: implement\
    \ choose_num\n\t\n\t-- The following line is not correct! \n\t-- The function\
    \ should return the biggest even number between x and y.\n\treturn 0\nend", " \
    \ \n  -- loop from x to y\n  for i = x, y do\n    -- if the number is even, return\
    \ it\n    if i % 2 == 0 then\n      return i\n    end\n  end\n  \n  -- if we've\
    \ reached this point, it means that there were no even\n  -- numbers in the range,\
    \ so we return -1.\n  return -1\nend", "    if x%2 == 0 then\n        return x\n\
    \    else\n        if x+1 < y then\n            return x+1\n        else\n   \
    \         return -1\n        end\n    end\nend", "  local num = -1\n  for i =\
    \ x, y do\n    if i % 2 == 0 and i > num then\n      num = i\n    end\n  end\n\
    \  return num\nend", "  if x > y then return -1 end\n  local n = x\n  while n\
    \ <= y do\n    if math.fmod(n, 2) == 0 then\n      return n\n    end\n    n =\
    \ n + 1\n  end\n  return -1\nend", "    local res = -1\n    if x%2 == 0 then res\
    \ = x end\n    while x < y do\n        x = x + 1\n        if x%2 == 0 then res\
    \ = x end\n    end\n    return res\nend", "  local min_num = math.min(x, y)\n\
    \  local max_num = math.max(x, y)\n  local num = max_num\n  while num > min_num\
    \ do\n    if num % 2 == 0 then\n      return num\n    end\n    num = num - 1\n\
    \  end\n  return -1\nend", "    -- go here\nend", "  -- your code here:\nend",
  "    -- ...\nend\n```", "    if x > y then\n        return -1\n    end\n    local\
    \ mod_x = x % 2\n    local mod_y = y % 2\n    local diff = y - x\n    local adjust_min\
    \ = mod_x == 0 and x or x + 1\n    local adjust_max = mod_y == 0 and y or y -\
    \ 1\n    if diff <= 0 then\n        return mod_x == 0 and x or mod_y == 0 and\
    \ y or -1\n    end\n    local num = (diff + adjust_min) // 2\n    return num %\
    \ 2 == 0 and num or -1\nend", "    -- TODO: Implement this function!\n    local\
    \ counter = x\n    while true do\n        if (counter > y) then\n            return\
    \ -1\n        elseif (counter % 2 == 0) then\n            return counter\n   \
    \     end\n        counter = counter + 1\n    end\nend", "    local n = x\n  \
    \  while n <= y do\n        if n % 2 == 0 then\n            return n\n       \
    \ end\n        n = n + 1\n    end\n    return -1\nend", "  if x > y then return\
    \ -1 end\n  if x % 2 == 0 then\n    return x\n  else\n    return choose_num(x\
    \ + 1, y)\n  end\nend", end, "    local biggest = -1\n    local num = x", "  \
    \  local i = x\n    if i%2 ~= 0 then i = i + 1 end\n    for j = i, y, 2 do\n \
    \       if j%2 == 0 then return j end\n    end\n    return -1\nend", "  local\
    \ current_num = math.max(x, y)\n  while current_num >= x do\n    if current_num\
    \ % 2 == 0 then\n      return current_num\n    end\n    current_num = current_num\
    \ - 1\n  end\n  return -1\nend", "    if (x == y) then\n        if (x % 2 == 0)\
    \ then\n            return x\n        else\n            return -1\n        end\n\
    \    end\n    return choose_num(x + 1, y)\nend", "\tlocal xx = x % 2 == 0 and\
    \ x or x + 1\n\tlocal yy = y % 2 == 0 and y or y - 1\n\t\n\tfor i = yy, xx, -2\
    \ do\n\t\tif i >= xx then\n\t\t\treturn i\n\t\tend\n\tend\n\t\n\treturn -1\nend",
  "  local c_num = -1\n  if x % 2 == 0 then\n    c_num = x\n  else\n    x = x + 1\n\
    \  end\n  while x <= y do\n    if x % 2 == 0 then\n      c_num = x\n    end\n\
    \    x = x + 1\n  end\n  return c_num\nend", "   -- Write your implementation\
    \ here\nend", "    if x <= y then\n        if x % 2 == 0 then\n            return\
    \ x\n        elseif y % 2 == 0 then\n            return y\n        else\n    \
    \        return -1\n        end\n    else\n        return -1\n    end\nend", " \
    \  \n   -- To Do: Write function", "    if x % 2 == 0 then\n        if x < y then\n\
    \            return x\n        elseif x == y then\n            return x\n    \
    \    elseif x > y then\n            return -1\n        end\n    elseif x % 2 ~=\
    \ 0 then\n        return choose_num(x + 1, y)\n    end\nend", "    -- If x is\
    \ even, then return x.\n    if x % 2 == 0 then\n        return x\n    -- If x\
    \ is odd, then increment it by 1.\n    elseif x % 2 == 1 then\n        x = x +\
    \ 1\n    end\n    -- If x is greater than y, then there is no such number, so\
    \ return -1.\n    if x > y then\n        return -1\n    -- If not, then continue\
    \ searching.\n    else\n        while x <= y do\n            -- If x is even,\
    \ then return x.\n            if x % 2 == 0 then\n                return x\n \
    \           -- If x is odd, then increment it by 1.\n            elseif x % 2\
    \ == 1 then\n                x = x + 1\n            end\n        end\n    end\n\
    end", "  local max_even = -1\n  for i = x, y do\n    if i % 2 == 0 and i > max_even\
    \ then\n      max_even = i\n    end\n  end\n  return max_even\nend", "    local\
    \ a = math.floor(x)\n    local b = math.floor(y)\n    if a > b then\n        return\
    \ -1\n    end\n    if a % 2 == 0 then\n        return b\n    else\n        return\
    \ b - 1\n    end\nend", "\t-- your code here\n\tlocal result = -1\n\tfor i = x,\
    \ y do\n\t\tif i % 2 == 0 then\n\t\t\tresult = i\n\t\tend\n\tend\n\treturn result\n\
    end", "\treturn -1\nend", "\tif x%2 ~= 0 then x = x + 1 end\n\tif y%2 ~= 0 then\
    \ y = y - 1 end\n\tif x > y then return -1 end\n\treturn y\nend", end, "  -- fill\
    \ the code here\n  local res\n  if x % 2 == 0 then\n    res = x\n  elseif y %\
    \ 2 == 0 then\n    res = y\n  else\n    res = -1\n  end\n  return res\nend", " \
    \   if x > y then\n        return -1\n    end\n    if x % 2 == 0 then\n      \
    \  x = x\n    else\n        x = x + 1\n    end\n    for i = x, y, 2 do\n     \
    \   return i\n    end\nend", "    local list = {}\n    local num = -1\n    if\
    \ x <= y then\n        for i = x, y do\n            if i % 2 == 0 then\n     \
    \           table.insert(list, i)\n            end\n        end\n        if #list\
    \ > 0 then\n            table.sort(list)\n            num = list[#list]\n    \
    \    end\n    end\n    return num\nend", "  -- type checks\n  assert(type(x) ==\
    \ \"number\")\n  assert(type(y) == \"number\")\n  assert(x >= 0)\n  assert(y >=\
    \ 0)\n  assert(x <= y)", "\tlocal s = ''\n\t\n\tfor i = x, y do\n\t\tif i % 2\
    \ == 0 then\n\t\t\ts = i\n\t\tend\n\tend\n\tif s ~= '' then\n\t\treturn s\n\t\
    else\n\t\treturn -1\n\tend\nend", "    if x > y then\n        return -1\n    end\n\
    \    if x % 2 == 0 then\n        return x\n    end\n    if y % 2 == 0 then\n \
    \       return y\n    end\n    if x % 2 == 1 and y % 2 == 1 then\n        return\
    \ -1\n    end\nend", "    local min = math.min(x, y)\n    local max = math.max(x,\
    \ y)\n    local num = max", "\tif x % 2 == 0 then\n\t\treturn y % 2 == 0 and y\
    \ or y - 1\n\telse\n\t\treturn x + (y - x) % 2\n\tend\nend", "  for i = y, x,\
    \ -1 do\n    if i % 2 == 0 then\n      return i\n    end\n  end\n  return -1\n\
    end", "    if x % 2 == 0 then\n        if x > y then\n            return x\n \
    \       elseif y > x then\n            return y\n        elseif x == y then\n\
    \            return x\n        end\n    else\n        return choose_num(x + 1,\
    \ y)\n    end\nend", end, "  local n = x\n  while n <= y do\n    if n % 2 == 0\
    \ then\n      return n\n    end\n    n = n + 1\n  end\n  return -1\nend", "  return\
    \ -1\nend", "    assert(x <= y)\n    for i = y, x, -1 do\n        if i % 2 ==\
    \ 0 then\n            return i\n        end\n    end\n    return -1\nend", "\t\
    local num = -1;\n\tfor n = x, y do\n\t\tif n % 2 == 0 then\n\t\t\tnum = n;\n\t\
    \tend\n\tend\n\treturn num;\nend", "    if x < y then\n        if x % 2 == 0 then\n\
    \            return x\n        else\n            return x + 1\n        end\n \
    \   elseif x > y then\n        if y % 2 == 0 then\n            return y\n    \
    \    else\n            return y + 1\n        end\n    else\n        if x % 2 ==\
    \ 0 then\n            return x\n        else\n            return -1\n        end\n\
    \    end\nend", "    if x == y then\n        if (x % 2) == 0 then\n          \
    \  return x\n        else\n            return -1\n        end\n    elseif x <\
    \ y then\n        if x % 2 == 0 then\n            return x\n        else\n   \
    \         return choose_num(x + 1, y)\n        end\n    else\n        if y % 2\
    \ == 0 then\n            return y\n        else\n            return choose_num(y\
    \ + 1, x)\n        end\n    end\nend", end, "    -- FIXME!\nend", "  x = math.floor(x)\n\
    \  y = math.floor(y)\n  if x%2 == 0 then\n    return math.max(x, y)\n  else\n\
    \    return math.max(x+1, y)\n  end\nend", "    local z = 0\n    if x%2 == 0 then\n\
    \        z = x\n    else\n        z = x+1\n    end\n    for k=z,y,2 do\n     \
    \   return k\n    end\n    return -1\nend", "  local i = math.max(x, y)\n  while\
    \ i >= math.min(x, y) do\n    if (i % 2 == 0) then\n      return i\n    end\n\
    \    i = i - 1\n  end\n  return -1\nend", "    local max = -1\n    for i = x,\
    \ y do\n        if i % 2 == 0 and i > max then\n            max = i\n        end\n\
    \    end\n    return max\nend", "    local n = x - x % 2\n    for n = n, y, 2\
    \ do\n        if n >= x and n <= y then\n            return n\n        end\n \
    \   end\n    return -1\nend", "\nend", "\t-- Your code here\n\treturn -1\nend",
  '', "  if x >= y then\n    return -1\n  end\n  for i = y, x, -1 do\n    if i % 2\
    \ == 0 then\n      return i\n    end\n  end\n  return -1\nend", "  -- I'd like\
    \ to use the function math.max() but I can't do this because\n  -- I'm trying\
    \ to implement it myself. So I will use the following pattern:\n  if x > y then\n\
    \    return choose_num(y, x)\n  end\n  -- I have to check each number between\
    \ x and y to see whether it is even\n  -- and return the biggest one that is even.\n\
    \  local max_even = -1\n  for i = x, y do\n    if i % 2 == 0 then\n      max_even\
    \ = i\n    end\n  end\n  return max_even\nend", "\tif x%2==0 then\n\t\treturn\
    \ x\n\telse\n\t\treturn choose_num(x+1, y)\n\tend\nend\nprint(choose_num(1, 10))",
  "\tif x%2 == 0 then\n\t\tif x > y then return -1\n\t\telse return x\n\t\tend\n\t\
    else\n\t\tif x+1 > y then return -1\n\t\telse return x+1\n\t\tend\n\tend\nend",
  "\t-- We need to check x and y if they are both positive, otherwise we return -1\n\
    \tif (x <= 0) or (y <= 0) then\n\t\treturn -1\n\tend\n\t-- At this point, we know\
    \ that x and y are positive\n\tlocal a = math.min(x, y) -- Lower limit for our\
    \ for loop\n\tlocal b = math.max(x, y) -- Upper limit for our for loop\n\tfor\
    \ i = b, a, -1 do -- We iterate backwards, so we start from the biggest number\n\
    \t\tif i % 2 == 0 then -- Is it even?\n\t\t\treturn i\n\t\tend\n\tend\n\treturn\
    \ -1 -- If no even numbers in the range, then we return -1\nend", "    local result\
    \ = -1\n    for i = y, x, -1 do\n        if i % 2 == 0 then\n            result\
    \ = i\n            break\n        end\n    end\n    return result\nend", "  local\
    \ n = math.max(x, y)\n  if n % 2 == 0 then\n    return n\n  else\n    if n > x\
    \ then\n      return n - 1\n    else\n      return -1\n    end\n  end\nend", " \
    \   error(\"not implemented\")\nend", "\tif x > y then return -1 end\n\tfor i\
    \ = y, x, -1 do\n\t\tif i % 2 == 0 then return i end\n\tend\n\treturn -1\nend",
  end, "    -- Fill this function body.\nend", "\t-- TODO\nend", "    -- your code\
    \ goes here\nend\n ", "  -- Body of the function\nend", '  local i = math.max(x,
    y)', "    if x > y then\n        return -1\n    end\n    if x % 2 == 0 then\n\
    \        x = x\n    else\n        x = x + 1\n    end\n    for i = x, y, 2 do\n\
    \        if y % 2 == 0 then\n            return y\n        end\n    end\n    return\
    \ x\nend", "    local n = x\n    while n <= y do\n        if (n % 2 == 0) then\n\
    \            return n\n        end\n        n = n + 1\n    end\n    return -1\n\
    end", '  local ret = -1', "    if x > y then\n        return -1\n    end\n   \
    \ if x % 2 == 0 then\n        return x\n    end\n    return choose_num(x + 1,\
    \ y)\nend", "\terror(\"Not implemented\")\nend", "    if x > y then\n        return\
    \ -1\n    end\n    local temp = y\n    while temp >= x do\n        if temp % 2\
    \ == 0 then\n            return temp\n        end\n        temp = temp - 1\n \
    \   end\n    return -1\nend", '    local maximum = -1', "\tlocal n = 0\n\tif (x\
    \ % 2 == 0) then\n\t\tn = x\n\telse\n\t\tn = x + 1\n\tend\n\twhile (n <= y) do\n\
    \t\tif (n % 2 == 0) then\n\t\t\treturn n\n\t\tend\n\t\tn = n + 1\n\tend\n\treturn\
    \ -1\nend", "    -- number of even numbers in range [x, y] inclusive\n    local\
    \ n = math.floor((y - x) / 2) + 1 \n    if n > 0 then\n        -- biggest even\
    \ number in range [x, y] inclusive\n        return 2 * (n - 1) + x\n    else\n\
    \        return -1\n    end\nend\nprint(choose_num(6, 8))   --> 6\nprint(choose_num(8,\
    \ 12))  --> 10\nprint(choose_num(10, 20)) --> 18\nprint(choose_num(1, 10))  -->\
    \ 8\nprint(choose_num(100, 200)) --> 198\nprint(choose_num(1, 1))  --> -1\nprint(choose_num(1,\
    \ 3))  --> -1\nprint(choose_num(4, 4))  --> 4\nprint(choose_num(5, 5))  --> -1\n\
    print(choose_num(5, 6))  --> -1\nprint(choose_num(5, 7))  --> 6\nprint(choose_num(5,\
    \ 8))  --> 6", "    local num = -1\n    if x % 2 == 0 then\n        num = x\n\
    \    else\n        x = x + 1\n    end\n    for i = x, y, 2 do\n        num = i\n\
    \    end\n    return num\nend\nprint(choose_num(12, 15))\nprint(choose_num(2,\
    \ 3))\nprint(choose_num(2, 4))\nprint(choose_num(25, 31))\nprint(choose_num(30,\
    \ 32))\nprint(choose_num(32, 32))", "    x = math.ceil(x)\n    if y < x then return\
    \ -1 end\n    for i = y, x, -1 do\n        if i % 2 == 0 then return i end\n \
    \   end\n    return -1\nend", '    local selected_num = -1', "\tx = math.floor(x)\n\
    \ty = math.floor(y)\n\tif x > y then\n\t\treturn -1\n\tend\n\tfor i = y, x, -1\
    \ do\n\t\tif i % 2 == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend",
  "    -- write here the missing code.\nend", "\tlocal start = 1\n\tif x % 2 == 0\
    \ then\n\t\tstart = x\n\telse\n\t\tstart = x + 1\n\tend\n\tfor i = start, y, 2\
    \ do\n\t\tif i % 2 == 0 then\n\t\t\treturn i\n\t\tend\n\tend\n\treturn -1\nend",
  "\tlocal number = math.max(x, y)\n\tif number % 2 == 0 then\n\t\treturn number\n\
    \telse\n\t\treturn number - 1\n\tend\nend", "\tlocal result = -1\n\tif x < y then\n\
    \t\tlocal count = x\n\t\twhile count <= y do\n\t\t\tif count % 2 == 0 then\n\t\
    \t\t\tresult = count\n\t\t\tend\n\t\t\tcount = count + 1\n\t\tend\n\tend\n\treturn\
    \ result\nend", "  local i = y\n  if x <= y then\n    while i % 2 ~= 0 do\n  \
    \    i = i - 1\n    end\n    return i\n  else\n    return -1\n  end\nend\nprint(\"\
    choose_num(2, 5) = \" .. choose_num(2, 5))\nprint(\"choose_num(20, 5) = \" ..\
    \ choose_num(20, 5))\nprint(\"choose_num(12, 14) = \" .. choose_num(12, 14))\n\
    print(\"choose_num(6, 6) = \" .. choose_num(6, 6))\nprint(\"choose_num(14, 15)\
    \ = \" .. choose_num(14, 15))\nprint(\"choose_num(15, 14) = \" .. choose_num(15,\
    \ 14))\nprint(\"choose_num(40, 40) = \" .. choose_num(40, 40))\nprint(\"choose_num(0,\
    \ 0) = \" .. choose_num(0, 0))", "   -- Use a for loop to find the first even\
    \ number between x and y\n   for i = x, y do\n      if (i % 2 == 0) then\n   \
    \      return i\n      end\n   end\n   return -1\nend", "\tif (x % 2 == 0 and\
    \ y % 2 == 0) then\n\t\tif (x > y) then\n\t\t\treturn x\n\t\telse\n\t\t\treturn\
    \ y\n\t\tend\n\telseif (x % 2 == 0 and y % 2 ~= 0) then\n\t\treturn x\n\telseif\
    \ (x % 2 ~= 0 and y % 2 == 0) then\n\t\treturn y\n\telse\n\t\treturn -1\n\tend\n\
    end", "    local bigger = math.max(x, y)\n    local smaller = math.min(x, y)\n\
    \    local even = 0\n    if math.fmod(bigger, 2) == 0 then\n        even = bigger\n\
    \    else\n        if math.fmod(bigger - 1, 2) == 0 then\n            even = bigger\
    \ - 1\n        else\n            even = -1\n        end\n    end\n    if even\
    \ > smaller then\n        return smaller\n    else\n        return even\n    end\n\
    end", "    -- TODO: Write me!\n    local number = 0\n    while x <= y do\n   \
    \     if x % 2 == 0 then\n            number = x\n        end\n        x = x +\
    \ 1\n    end\n    if number == 0 then\n        return -1\n    else\n        return\
    \ number\n    end\nend", "  -- implementation here\nend", "    if x % 2 == 0 then\n\
    \        return x\n    elseif x + 1 == y then\n        return -1\n    else\n \
    \       return choose_num(x + 1, y)\n    end\nend", "\t-- ...\nend", "\tif x %\
    \ 2 == 0 then\n\t\treturn x\n\telseif x + 1 == y then\n\t\treturn -1\n\telse\n\
    \t\treturn choose_num(x + 1, y)\n\tend\nend", "\treturn 'Not implemented'\nend",
  "    if x > y then\n        return -1\n    end\n    local ret = -1\n    for i =\
    \ x, y do\n        if i % 2 == 0 then\n            ret = i\n        end\n    end\n\
    \    return ret\nend\nassert(choose_num(1, 1) == -1)\nassert(choose_num(1, 2)\
    \ == 2)\nassert(choose_num(1, 3) == 2)\nassert(choose_num(1, 4) == 4)\nassert(choose_num(1,\
    \ 5) == 4)\nassert(choose_num(1, 6) == 6)\nassert(choose_num(1, 7) == 6)\nassert(choose_num(1,\
    \ 8) == 8)\nassert(choose_num(1, 9) == 8)\nassert(choose_num(1, 10) == 10)\nassert(choose_num(1,\
    \ 11) == 10)\nassert(choose_num(1, 12) == 12)\nassert(choose_num(1, 13) == 12)\n\
    assert(choose_num(1, 14) == 14)\nassert(choose_num(1, 15) == 14)\nassert(choose_num(1,\
    \ 16) == 16)\nassert(choose_num(1, 17) == 16)\nassert(choose_num(1, 18) == 18)\n\
    assert(choose_num(1, 19) == 18)\nassert(choose_num(1, 20) == 20)\nassert(choose_num(1,\
    \ 21) == 20)\nassert(choose_num(1, 22) == 22)\nassert(choose_num(1, 23) == 22)\n\
    assert(choose_num(1, 24) == 24)\nassert(choose_num(1, 25) == 24)\nassert(choose_num(1,\
    \ 26) == 26)\nassert(choose_num(1, 27) == 26)\nassert(choose_num(1, 28) == 28)\n\
    assert(choose_num(1, 29) == 28)\nassert(choose_num(1, 30) == 30)\nassert(cho",
  "    -- your implementation here\n    local num = math.min(x, y)\n    if num % 2\
    \ == 0 then\n        return num\n    else\n        num = num + 1\n    end\n  \
    \  if num > math.max(x, y) then\n        return -1\n    else\n        return num\n\
    \    end\nend", "\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
