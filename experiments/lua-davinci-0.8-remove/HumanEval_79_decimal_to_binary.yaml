name: HumanEval_79_decimal_to_binary
language: lua
prompt: "-- You will be given a number in decimal form and your task is to convert\
  \ it to\n-- binary format. The function should return a string, with each character\
  \ representing a binary\n-- number. Each character in the string will be '0' or\
  \ '1'.\n-- There will be an extra couple of characters 'db' at the beginning and\
  \ at the end of the string.\n-- The extra characters are there to help with the\
  \ format.\n-- Examples:\nlocal function decimal_to_binary(decimal)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = decimal_to_binary\n\
  \    lu.assertEquals(candidate(0), 'db0db')\n    lu.assertEquals(candidate(32),\
  \ 'db100000db')\n    lu.assertEquals(candidate(103), 'db1100111db')\n    lu.assertEquals(candidate(15),\
  \ 'db1111db')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = 'db'\n  local rest = decimal\n  local len = 0\n  while\
    \ rest > 0 do\n    result = result .. tostring(rest % 2)\n    rest = math.floor(rest\
    \ / 2)\n    len = len + 1\n  end\n  if len < 8 then\n    for i = 1, 8 - len do\n\
    \      result = result .. '0'\n    end\n  end\n  return result .. 'db'\nend",
  "    local binary = ''\n    local extra = 'db'\n    local result = ''\n    while\
    \ decimal ~= 0 do\n        local bit = decimal % 2\n        binary = binary ..\
    \ bit\n        decimal = math.floor(decimal / 2)\n    end\n    local i = #binary\n\
    \    while i >= 1 do\n        result = result .. binary:sub(i, i)\n        i =\
    \ i - 1\n    end\n    return extra .. result .. extra\nend", "    local str =\
    \ \"db\"\n    while decimal > 0 do\n        if decimal % 2 == 0 then\n       \
    \     str = \"0\" .. str\n        else\n            str = \"1\" .. str\n     \
    \   end\n        decimal = math.floor(decimal / 2)\n    end\n    return str ..\
    \ \"db\"\nend", "  local binary_str = 'db'\n  local binary_str_index = 2\n  while\
    \ decimal ~= 0 do\n    binary_str_index = binary_str_index + 1\n    local binary_str_digit\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    binary_str = binary_str\
    \ .. tostring(binary_str_digit)\n  end\n  return binary_str .. 'db'\nend\nprint(decimal_to_binary(1)\
    \ == 'db0001db')\nprint(decimal_to_binary(10) == 'db1010db')\nprint(decimal_to_binary(1023)\
    \ == 'db1111111111db')", "  if decimal == 0 then return \"db01db\" end\n  local\
    \ binary = \"\"\n  while decimal > 0 do\n    binary = decimal % 2 .. binary\n\
    \    decimal = math.floor(decimal / 2)\n  end\n  return \"db\" .. (\"0\"):rep(8\
    \ - #binary) .. binary .. \"db\"\nend", "    local m = decimal\n    local t =\
    \ {}\n    while m > 0 do\n        t[#t + 1] = m % 2\n        m = m // 2\n    end\n\
    \    return 'db' .. table.concat(t):reverse() .. 'db'\nend", "    local number\
    \ = string.format(\"%x\", decimal)\n    local result = ''\n    for i = 1, #number\
    \ do\n        result = result .. string.format(\"%04b\", string.byte(number, i))\n\
    \    end\n    return 'db' .. result .. 'db'\nend", "  local sign = 1\n  if decimal\
    \ < 0 then\n    sign = -1\n    decimal = -decimal\n  end\n  local result = ''\n\
    \  while decimal > 0 do\n    result = result .. tostring(decimal % 2)\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  result = result .. '0'\n  result = 'db'\
    \ .. result .. 'd'\n  if sign == -1 then\n    result = '1' .. result\n  else\n\
    \    result = '0' .. result\n  end\n  return result\nend", "    return 'db' ..\
    \ string.rep('0', decimal) .. 'db'\nend", "    -- write your code here\n    local\
    \ function to_binary(dec)\n        if dec == 0 then\n            return \"\"\n\
    \        else\n            local rest = dec % 2\n            return to_binary((dec\
    \ - rest) / 2) .. tostring(rest)\n        end\n    end\n    return \"db\" .. to_binary(decimal)\
    \ .. \"db\"\nend", "  return 'db' .. tostring(decimal):gsub('(%d)', {\n    ['0']\
    \ = '01110000b',\n    ['1'] = '01110001b',\n    ['2'] = '01110010b',\n    ['3']\
    \ = '01110011b',\n    ['4'] = '01110100b',\n    ['5'] = '01110101b',\n    ['6']\
    \ = '01110110b',\n    ['7'] = '01110111b',\n    ['8'] = '01111000b',\n    ['9']\
    \ = '01111001b',\n  }) .. 'db'\nend", "    local bin = \"\"\n    while decimal\
    \ > 0 do\n        local remainder = decimal % 2\n        bin = remainder .. bin\n\
    \        decimal = math.floor(decimal / 2)\n    end\n    return \"db\" .. bin\
    \ .. \"db\"\nend", "   local binary = ''\n   local num = decimal\n   local remainder\
    \ = 0\n   local space = '0'\n   local counter = 0\n   local test = 0\n   local\
    \ db_test = 0\n   local db_test2 = 0\n   local done = 0\n   local db_size = 2\n\
    \   local db_size2 = 0\n   local db_end = ''\n   local db_end2 = ''\n   local\
    \ num_check = 0\n   while num ~= 0 do\n      num = math.floor(num/2)\n      counter\
    \ = counter + 1\n   end\n   while num_check < counter do\n      num_check = num_check\
    \ + 1\n      if num_check == 1 then\n         test = 1\n      else\n         test\
    \ = test * 2\n      end\n   end\n   num = decimal\n   counter = 0\n   while test\
    \ ~= 0 do\n      if test == 1 then\n         while db_test < db_size do\n    \
    \        db_test = db_test + 1\n            binary = binary .. 'd'\n         end\n\
    \         binary = binary .. 'b'\n      end\n      remainder = num % 2\n     \
    \ num = math.floor(num/2)\n      if remainder == 1 then\n         binary = binary\
    \ .. '1'\n      else\n         binary = binary .. '0'\n      end\n      test =\
    \ math.floor(test/2)\n      counter = counter + 1\n      if counter == 4 then\n\
    \         binary = binary .. space\n         counter = 0\n      end\n   end\n\
    \   counter = 0\n   while binary:sub(#binary-counter,#binary-counter) == '0' do\n\
    \      counter = counter + 1\n   end\n   db_end = binary:sub(#binary-counter+1,#binary)\n\
    \   db_end2 = 'db'\n   counter = 0\n   for n = 1, #db_end do\n      if db_end:sub(n,n)\
    \ == 'd' then\n         counter = counter + 1\n      end\n   end\n   db_size2\
    \ = db_size + counter\n   while db_test2 < db_size2 do\n      db_test2 = db_test2\
    \ + 1\n      db_end2 = db_end2", "  return 'db' .. (decimal > 0 and decimal:gsub('.',\
    \ function(d)\n    return ('01'):sub(d + 1, d + 1)\n  end) or '0') .. 'db'\nend",
  "    local base = 2 -- binary base\n    local result = {} -- store the result here\n\
    \    repeat\n        -- check if the decimal is odd or even,\n        -- (decimal\
    \ % base) returns the remainder of the division operation\n        local last\
    \ = decimal % base\n        -- insert the last digit at the beginning of the result\
    \ table\n        table.insert(result, 1, last)\n        -- floor the result, because\
    \ we have to do integer divisions\n        decimal = math.floor(decimal / base)\n\
    \    until decimal == 0\n    -- use table.concat to convert the table with the\
    \ numbers to a string\n    return \"db\" .. table.concat(result) .. \"db\"\nend",
  "\tlocal binary_reverse = \"\"\n\tlocal new_string = \"db\"\n\tlocal end_string\
    \ = \"db\"\n\tlocal quotient = decimal\n\tlocal remainder = 0\n\tlocal function\
    \ binary_convert()\n\t\tremainder = quotient % 2\n\t\tquotient = quotient / 2\n\
    \t\tbinary_reverse = binary_reverse .. tostring(remainder)\n\t\tif quotient >\
    \ 1 then\n\t\t\tbinary_convert()\n\t\telseif quotient == 1 then\n\t\t\tbinary_reverse\
    \ = binary_reverse .. tostring(quotient)\n\t\tend\n\tend\n\tbinary_convert()\n\
    \tbinary_reverse = string.reverse(binary_reverse)\n\tnew_string = new_string ..\
    \ binary_reverse\n\tnew_string = new_string .. end_string\n\treturn new_string\n\
    end", "  local t = {}\n  local i = 1\n  while decimal > 0 do\n    t[i] = decimal\
    \ % 2\n    decimal = math.floor(decimal / 2)\n    i = i + 1\n  end\n  return 'db'\
    \ .. table.concat(t, '') .. 'db'\nend", "    local str = \"\"\n    while decimal\
    \ > 0 do\n        local rest = decimal % 2\n        str = rest .. str\n      \
    \  decimal = (decimal - rest) / 2\n    end\n    return \"db\" .. str .. \"db\"\
    \nend", "  return 'db' .. tostring(decimal):gsub('.', function(d)\n    return\
    \ { [0] = '000', [1] = '001', [2] = '010', [3] = '011', [4] = '100', [5] = '101',\
    \ [6] = '110', [7] = '111' }[tonumber(d)]\n  end) .. 'db'\nend\nprint(decimal_to_binary(53))\
    \ -- 'db110101db'\nprint(decimal_to_binary(2.5)) -- 'db10.1db'\nprint(decimal_to_binary(0.12345))\
    \ -- 'db0.00010010011111011011010110110111011011011101101110111100110011010db'",
  "\tlocal bit_array = {}\n\tif decimal <= 0 then\n\t\treturn 'db0db'\n\tend\n\tfor\
    \ i = 0, 31 do\n\t\tlocal bit = decimal >> i\n\t\tif bit % 2 == 1 then\n\t\t\t\
    table.insert(bit_array, '1')\n\t\telse\n\t\t\ttable.insert(bit_array, '0')\n\t\
    \tend\n\tend\n\tlocal result = 'db'\n\tfor i = #bit_array, 1, -1 do\n\t\tresult\
    \ = result .. bit_array[i]\n\tend\n\treturn result .. 'db'\nend", "  local binary,\
    \ function_result\n  function_result = 'db'\n  repeat\n    binary = decimal %\
    \ 2\n    decimal = math.floor(decimal / 2)\n    function_result = tostring(binary)\
    \ .. function_result\n  until decimal == 0\n  return 'db' .. function_result ..\
    \ 'db'\nend", "    local decimal = decimal\n    local binary = ''\n    while decimal\
    \ > 0 do\n        local rem = decimal % 2\n        decimal = math.floor(decimal\
    \ / 2)\n        binary = rem .. binary\n    end\n    return 'db' .. binary ..\
    \ 'db'\nend", "    local bin = ''\n    repeat\n        bin = bin .. (decimal %\
    \ 2)\n        decimal = math.floor(decimal / 2)\n    until decimal == 0\n    return\
    \ 'db' .. bin .. 'db'\nend", "    return \"db\" .. bin:reverse():sub(bin:find(\"\
    %d+\"), #bin) .. \"db\"\nend", '    decimal = math.floor(decimal)', "  local function\
    \ calc(decimal)\n    if decimal == 0 then return '' end\n    local ans = ''\n\
    \    local r = decimal % 2\n    ans = tostring(r)..ans\n    return calc(math.floor(decimal/2))..ans\n\
    \  end\n  return 'db'..calc(decimal)..'db'\nend", "  return dec_to_bin(decimal)\n\
    end", "    local result = ''\n    local db = 'db'\n    while decimal > 0 do\n\
    \        result = tostring(decimal % 2) .. result\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return db .. result .. db\nend", "    local first_binary\
    \ = string.char(0, 0)\n    local extra_couple = 'db'\n    local last_binary =\
    \ string.char(0, 0)\n    --\u0432\u044B\u0447\u0438\u0441\u043B\u044F\u0435\u043C\
    \ \u043F\u0435\u0440\u0432\u044B\u0439 \u0431\u0438\u0442 \u0434\u0435\u0441\u044F\
    \u0442\u0438\u0447\u043D\u043E\u0433\u043E \u0447\u0438\u0441\u043B\u0430\n  \
    \  if (decimal >= 128) then\n        first_binary = string.char(1, 0)\n      \
    \  decimal = decimal - 128\n    end\n    --\u0432\u044B\u0447\u0438\u0441\u043B\
    \u044F\u0435\u043C \u0432\u0442\u043E\u0440\u043E\u0439 \u0431\u0438\u0442 \u0434\
    \u0435\u0441\u044F\u0442\u0438\u0447\u043D\u043E\u0433\u043E \u0447\u0438\u0441\
    \u043B\u0430\n    if (decimal >= 64) then\n        first_binary = string.char(1,\
    \ 1)\n        decimal = decimal - 64\n    end\n    --\u0432\u044B\u0447\u0438\u0441\
    \u043B\u044F\u0435\u043C \u0442\u0440\u0435\u0442\u0438\u0439 \u0431\u0438\u0442\
    \ \u0434\u0435\u0441\u044F\u0442\u0438\u0447\u043D\u043E\u0433\u043E \u0447\u0438\
    \u0441\u043B\u0430\n    if (decimal >= 32) then\n        last_binary = string.char(1,\
    \ 0)\n        decimal = decimal - 32\n    end\n    --\u0432\u044B\u0447\u0438\u0441\
    \u043B\u044F\u0435\u043C \u0447\u0435\u0442\u0432\u0435\u0440\u0442\u044B\u0439\
    \ \u0431\u0438\u0442 \u0434\u0435\u0441\u044F\u0442\u0438\u0447\u043D\u043E\u0433\
    \u043E \u0447\u0438\u0441\u043B\u0430\n    if (decimal >= 16) then\n        last_binary\
    \ = string.char(1, 1)\n        decimal = decimal - 16\n    end\n    --\u0432\u044B\
    \u0447\u0438\u0441\u043B\u044F\u0435\u043C \u043F\u044F\u0442\u044B\u0439 \u0431\
    \u0438\u0442 \u0434\u0435\u0441\u044F\u0442\u0438\u0447\u043D\u043E\u0433\u043E\
    \ \u0447\u0438\u0441\u043B\u0430\n    if (decimal >= 8) then\n        first_binary\
    \ = string.char(1, 0)\n        decimal = decimal - 8\n    end\n    --\u0432\u044B\
    \u0447\u0438\u0441\u043B\u044F\u0435\u043C \u0448\u0435\u0441\u0442\u043E\u0439\
    \ \u0431\u0438\u0442 \u0434\u0435\u0441\u044F\u0442\u0438\u0447\u043D\u043E\u0433\
    \u043E \u0447\u0438\u0441\u043B\u0430\n    if (decimal >= 4) then\n        first_binary\
    \ = string.char(1, 1)\n        decimal = decimal", "    local result = 'db'\n\
    \    local integral, fractional = decimal:match('(%d+)%.(%d+)')\n    local integral,\
    \ fractional = tonumber(integral), tonumber(fractional)\n    if integral > 0 then\n\
    \        result = result .. integer_part(integral)\n    end\n    if fractional\
    \ > 0 then\n        result = result .. '.' .. fractional_part(fractional)\n  \
    \  end\n    return result .. 'db'\nend", "    -- your code here\n    local a =\
    \ ''\n    while decimal ~= 0 do\n        local b = decimal % 2\n        a = tostring(b)\
    \ .. a\n        decimal = (decimal - b) / 2\n    end\n    return 'db' .. a ..\
    \ 'db'\nend", "    return \"db\" .. string.format(\"%b\", decimal) .. \"db\"\n\
    end", "    local binary = ''\n    while decimal > 0 do\n        local remainder\
    \ = decimal % 2\n        binary = tostring(remainder) .. binary\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return 'db' .. binary .. 'db'\nend",
  "\t-- TODO: write your code here!\nend", "\tlocal result = ''\n\twhile decimal >\
    \ 0 do\n\t\tresult = tostring(decimal % 2) .. result\n\t\tdecimal = math.floor(decimal\
    \ / 2)\n\tend\n\treturn result\nend\nassert(decimal_to_binary(8) == '1000')\n\
    assert(decimal_to_binary(8.5) == '1000')\nassert(decimal_to_binary(6) == '110')\n\
    assert(decimal_to_binary(6.5) == '110')", "  -- TODO: convert the decimal number\
    \ to binary format.\n  -- For example, decimal_to_binary(13) = \"db011011db\"\n\
    \  decimal = tostring(decimal)\n  local binary = {}\n  for i = 1, #decimal do\n\
    \    local bs = {}\n    local remain = decimal:sub(i, i)\n    for j = 1,8 do\n\
    \      remain = math.fmod(remain, 2)\n      bs[#bs + 1] = remain\n      remain\
    \ = (decimal:sub(i, i) - remain) / 2\n    end\n    local b1 = table.concat(bs):reverse()\n\
    \    local b2 = b1:match(\"0*(%d+)\")\n    binary[#binary + 1] = b2 or \"0\"\n\
    \  end\n  return \"db\" .. table.concat(binary) .. \"db\"\nend", "    local function\
    \ dec2bin(decimal)\n        if decimal == 0 then return '' end\n        local\
    \ last = decimal % 2\n        return dec2bin(math.floor(decimal / 2)) .. last\n\
    \    end\n    return 'db' .. dec2bin(decimal) .. 'db'\nend", "\tlocal i=0;\n\t\
    local bin = \"\";\n\tlocal tmp = \"\";\n\twhile decimal>0 do\n\t\ttmp = decimal%2;\n\
    \t\tdecimal = (decimal-tmp)/2;\n\t\tif tmp==1 then\n\t\t\tbin = bin..\"1\";\n\t\
    \telse\n\t\t\tbin = bin..\"0\";\n\t\tend\n\tend\n\tbin = \"db\"..bin..\"db\";\n\
    \treturn bin;\nend", "    local binary = ''\n    while decimal > 0 do\n      \
    \  binary = (decimal % 2 == 0 and '0' or '1') .. binary\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. binary .. 'db'\nend\nassert(decimal_to_binary(3)\
    \ == 'db011db')\nassert(decimal_to_binary(4) == 'db100db')\nassert(decimal_to_binary(7)\
    \ == 'db111db')", "  local dec_bin_table = {'db'}\n  repeat\n    if decimal %\
    \ 2 ~= 0 then\n      table.insert(dec_bin_table, '1')\n    else\n      table.insert(dec_bin_table,\
    \ '0')\n    end\n    decimal = math.floor(decimal / 2)\n  until decimal <= 0\n\
    \  table.insert(dec_bin_table, 'db')\n  return table.concat(dec_bin_table)\nend",
  "  return \"db\" .. tostring(decimal):gsub(\".\", function(c)\n    return string.format(\"\
    %02x\", c:byte())\n  end) .. \"db\"\nend", "  local quotient, remainder, binary\
    \ = decimal, 0, 'db'\n  local extra_one = false\n  while quotient > 0 do\n   \
    \ remainder = quotient % 2\n    quotient = math.floor(quotient / 2)\n    if remainder\
    \ == 1 then\n      binary = binary .. '1'\n    else\n      binary = binary ..\
    \ '0'\n    end\n  end\n  if binary == 'db0' then\n    binary = binary .. '1'\n\
    \    extra_one = true\n  end\n  binary = binary .. 'db'\n  binary = string.reverse(binary)\n\
    \  if extra_one then\n    binary = string.sub(binary, 2, #binary)\n  end\n  return\
    \ binary\nend", "    if decimal < 0 then\n        return 'db' .. '0' .. 'db'\n\
    \    end\n    if decimal == 0 then\n        return 'db' .. '0' .. 'db'\n    end\n\
    \    if decimal == 1 then\n        return 'db' .. '1' .. 'db'\n    end\n    if\
    \ decimal % 2 == 0 then\n        return decimal_to_binary(decimal / 2) .. '0'\n\
    \    else\n        return decimal_to_binary(decimal / 2) .. '1'\n    end\nend",
  "  local string_binary = \"\"\n  local tmp_binary\n  while decimal > 0 do\n    tmp_binary\
    \ = decimal % 2\n    decimal = math.floor(decimal / 2)\n    string_binary = string_binary\
    \ .. tmp_binary\n  end\n  return string_binary\nend", "    local tbl, r = {},\
    \ \"\"\n    while decimal > 0 do\n        r = tostring(decimal % 2) .. r\n   \
    \     decimal = math.floor(decimal / 2)\n    end\n    return string.format(\"\
    db%sdb\", r)\nend", "    local binary = 'db'\n    while decimal > 0 do\n     \
    \   local remainder = decimal % 2\n        binary = binary .. tostring(remainder)\n\
    \        decimal = (decimal - remainder) / 2\n    end\n    return binary .. 'db'\n\
    end", "    -- write your code here\n    local bits = {}\n    local b = 'd'\n \
    \   local num = tonumber(decimal)", "    local result = {}\n    local dec = tonumber(decimal)\n\
    \    if dec < 0 then\n        error(\"Wrong parameter type\")\n    end\n    repeat\n\
    \        local div = math.floor(dec / 2)\n        local mod = dec % 2\n      \
    \  dec = div\n        table.insert(result, mod)\n    until dec == 0\n    local\
    \ len = #result\n    if len < 8 then\n        for i = 1, 8 - len do\n        \
    \    table.insert(result, 0)\n        end\n    end\n    return string.format(\"\
    db%sdb\", table.concat(result))\nend", "  local binary = \"db\"\n  local num =\
    \ decimal\n  while num > 0 do\n    local rem = num % 2\n    num = (num - rem)\
    \ / 2\n    binary = binary .. rem\n  end\n  return binary .. \"db\"\nend", " \
    \ local text = ''\n  local digits = {'0', '1'}\n  while decimal > 0 do\n    local\
    \ digit = decimal % 2\n    local digit_char = digits[digit + 1]\n    text = digit_char\
    \ .. text\n    decimal = (decimal - digit) / 2\n  end\n  return 'db' .. text ..\
    \ 'db'\nend", "    local db = 'db'\n    local binary = ''\n    local next_smaller_power_of_two\
    \ = 1\n    while decimal > 0 do\n        -- binary = binary .. tostring(math.floor(decimal\
    \ % 2)) -- this is slow\n        if decimal >= next_smaller_power_of_two then\n\
    \            decimal = decimal - next_smaller_power_of_two\n            binary\
    \ = binary .. '1'\n        else\n            binary = binary .. '0'\n        end\n\
    \        next_smaller_power_of_two = next_smaller_power_of_two * 2\n    end\n\
    \    return db .. string.reverse(binary) .. db\nend", "  local result = ''\n \
    \ while decimal > 0 do\n    local remainder = decimal % 2\n    result = result\
    \ .. remainder\n    decimal = (decimal - remainder) / 2\n  end\n  return 'db'\
    \ .. string.reverse(result) .. 'db'\nend", "   -- code here\nend", "   local remainder\n\
    \   local remainder2\n   local binary = \"\"\n   local unary = \"\"\n   local\
    \ result = \"\"\n   if decimal == 0 then\n      return 0\n   end\n   while decimal\
    \ > 0 do\n      remainder = decimal % 2\n      binary = binary .. remainder\n\
    \      decimal = math.floor(decimal / 2)\n   end\n   while #binary > 0 do\n  \
    \    remainder2 = string.sub(binary, #binary, #binary)\n      unary = unary ..\
    \ remainder2\n      binary = string.sub(binary, 1, #binary - 1)\n   end\n   for\
    \ i = 1, #unary do\n      result = result .. string.sub(unary, i, i)\n   end\n\
    \   return \"db\" .. result .. \"db\"\nend", "    local quotient, reminder\n \
    \   local result = \"\"\n    repeat\n        quotient = decimal / 2\n        reminder\
    \ = decimal % 2\n        decimal = quotient\n        result = tostring(reminder)\
    \ .. result\n    until decimal == 0\n    return 'db' .. result .. 'db'\nend",
  "  local binary_string = \"\"\n  repeat\n    local quotient = decimal % 2\n    binary_string\
    \ = quotient .. binary_string\n    decimal = (decimal - quotient) / 2\n  until\
    \ decimal == 0\n  return \"db\" .. binary_string .. \"db\"\nend", "    local bit_string\
    \ = \"db\"\n    repeat\n        if decimal % 2 == 0 then\n            bit_string\
    \ = bit_string .. \"0\"\n        else\n            bit_string = bit_string ..\
    \ \"1\"\n        end\n        decimal = math.floor(decimal / 2)\n    until decimal\
    \ == 0\n    return bit_string .. \"db\"\nend", "    local binary = ''", "\t--return\n\
    end", "  local binary = \"db\" .. dec_to_bin(decimal) .. \"db\"\n  return binary\n\
    end", "    local binary = \"\"\n    local sign = \"\"\n    if decimal < 0 then\n\
    \        sign = \"-\"\n        decimal = -decimal\n    end\n    while decimal\
    \ > 0 do\n        binary = decimal % 2 .. binary\n        decimal = decimal //\
    \ 2\n    end\n    if binary == \"\" then\n        binary = \"0\"\n    end\n  \
    \  return \"db\" .. sign .. binary .. \"db\"\nend", "    local binary = \"\"\n\
    \    local decimal_number = decimal\n    local remainder = 0\n    repeat\n   \
    \     remainder = decimal_number % 2\n        binary = remainder .. binary\n \
    \       decimal_number = (decimal_number - remainder) / 2\n    until decimal_number\
    \ == 0\n    return \"db\" .. binary .. \"db\"\nend", "    local result = ''\n\
    \    while decimal > 0 do\n        local digit = decimal % 2\n        result =\
    \ digit .. result\n        decimal = math.floor(decimal / 2)\n    end\n    return\
    \ 'db' .. result .. 'db'\nend", "    local result = \"db\"\n    local bit\n  \
    \  while decimal > 0 do\n        bit = (decimal - (decimal%2)) / 2\n        result\
    \ = result .. tostring(decimal%2)\n        decimal = bit\n    end\n    return\
    \ result .. \"db\"\nend\nassert(decimal_to_binary(2) == \"db10db\")\nassert(decimal_to_binary(9)\
    \ == \"db1001db\")\nassert(decimal_to_binary(99) == \"db1100011db\")", "    local\
    \ bin_stack = {}\n    while decimal ~= 0 do\n        local last = decimal % 2\n\
    \        if last == 0 then\n            table.insert(bin_stack, '0')\n       \
    \ else\n            table.insert(bin_stack, '1')\n        end\n        decimal\
    \ = (decimal - last) / 2\n    end\n    local binary = table.concat(bin_stack):reverse()\n\
    \    return \"db\" .. binary .. \"db\"\nend", "    local integer, fraction = decimal:match(\"\
    (%d+)%.(%d+)\")\n    local decimal = tonumber(integer)\n    local fraction = tonumber(\"\
    0.\" .. fraction)\n    local binary = {}\n    while decimal > 0 do\n        table.insert(binary,\
    \ decimal % 2)\n        decimal = decimal / 2\n    end\n    while fraction > 0\
    \ do\n        fraction = fraction * 2\n        if fraction >= 1 then\n       \
    \     table.insert(binary, 1)\n            fraction = fraction - 1\n        else\n\
    \            table.insert(binary, 0)\n        end\n    end\n    return \"db\"\
    \ .. table.concat(binary):reverse() .. \"db\"\nend\nprint(decimal_to_binary(\"\
    50.3\"))", "\tlocal bin = \"\"\n\twhile decimal > 0 do\n\t\tbin = string.format(\"\
    %s%d\", bin, decimal % 2)\n\t\tdecimal = math.floor(decimal / 2)\n\tend\n\treturn\
    \ \"db\" .. bin .. \"db\"\nend", "   if decimal == 0 then return 'db0db' end\n\
    \   local first = decimal % 2\n   local rest = (decimal - first) / 2\n   return\
    \ 'db' .. decimal_to_binary(rest) .. first .. 'db'\nend", "  return 'db' .. to_binary(decimal)\
    \ .. 'db'\nend", "    local function add_db(string)\n        return \"db\" ..\
    \ string .. \"db\"\n    end\n    if decimal == 0 then\n        return add_db(\"\
    0\")\n    end\n    local binary = \"\"\n    while decimal > 0 do\n        local\
    \ remaining = decimal % 2\n        decimal = (decimal - remaining) / 2\n     \
    \   binary = tostring(remaining) .. binary\n    end\n    return add_db(binary)\n\
    end", "    local one_bit = 2^0\n    local binary_number = \"\"\n    local number_of_bits\
    \ = 0\n    while one_bit <= decimal do\n        one_bit = one_bit * 2\n      \
    \  number_of_bits = number_of_bits + 1\n    end\n    local one_bit = 2^(number_of_bits\
    \ - 1)\n    for i = 1, number_of_bits do\n        if decimal >= one_bit then\n\
    \            binary_number = binary_number .. \"1\"\n            decimal = decimal\
    \ - one_bit\n        else\n            binary_number = binary_number .. \"0\"\n\
    \        end\n        one_bit = one_bit / 2\n    end\n    return \"db\" .. binary_number\
    \ .. \"db\"\nend", "    return string.format(\"db%0.0fdb\", decimal:match(\"^db(%d+)db$\"\
    ))\nend", "    local db = 'db'\n    local binary = {}\n    local value = decimal\n\
    \    while value ~= 0 do\n        local bit = value % 2\n        binary[#binary\
    \ + 1] = bit\n        value = (value - bit) / 2\n    end\n    binary = db .. table.concat(binary):reverse()\
    \ .. db\n    return binary\nend", "   local binary = 'db'\n   for i = 1, #decimal\
    \ do\n      local dec = string.sub(decimal, i, i)\n      binary = binary .. math.pow(2,\
    \ dec)\n   end\n   return binary .. 'db'\nend", "  return ('db%0' .. (decimal:len()\
    \ * 4) .. 'bdb'):format(decimal)\nend", "    -- Convert the decimal to binary\
    \ number, with each char representing a '0' or '1'.\n    -- Keep the leading zeros.\n\
    \    -- There will be an extra couple of characters 'db' at the beginning and\
    \ at the end of the string.\n    -- The extra characters are there to help with\
    \ the format.\n    local b = \"db\"\n    for i = 7, 0, -1 do\n        local pow\
    \ = 2 ^ i\n        if decimal >= pow then\n            b = b .. \"1\"\n      \
    \      decimal = decimal - pow\n        else\n            b = b .. \"0\"\n   \
    \     end\n    end\n    return b .. \"db\"\nend", "    local binary = \"\"\n \
    \   while decimal > 0 do\n        if decimal % 2 == 0 then\n            binary\
    \ = \"0\" .. binary\n        else\n            binary = \"1\" .. binary\n    \
    \    end\n        decimal = math.floor(decimal / 2)\n    end\n    binary = \"\
    db\" .. binary .. \"db\"\n    return binary\nend", "    local result = ''\n  \
    \  while decimal > 0 do\n        local rest = decimal % 2\n        result = tostring(rest)\
    \ .. result\n        decimal = (decimal - rest) / 2\n    end\n    return 'db'\
    \ .. result .. 'db'\nend\nassert(decimal_to_binary(0) == 'dbdb')\nassert(decimal_to_binary(1)\
    \ == 'db1db')\nassert(decimal_to_binary(2) == 'db10db')\nassert(decimal_to_binary(3)\
    \ == 'db11db')\nassert(decimal_to_binary(4) == 'db100db')\nassert(decimal_to_binary(5)\
    \ == 'db101db')\nassert(decimal_to_binary(6) == 'db110db')\nassert(decimal_to_binary(7)\
    \ == 'db111db')\nassert(decimal_to_binary(8) == 'db1000db')\nassert(decimal_to_binary(9)\
    \ == 'db1001db')\nassert(decimal_to_binary(10) == 'db1010db')\nassert(decimal_to_binary(11)\
    \ == 'db1011db')\nassert(decimal_to_binary(12) == 'db1100db')\nassert(decimal_to_binary(13)\
    \ == 'db1101db')\nassert(decimal_to_binary(14) == 'db1110db')\nassert(decimal_to_binary(15)\
    \ == 'db1111db')\nassert(decimal_to_binary(16) == 'db10000db')\nassert(decimal_to_binary(17)\
    \ == 'db10001db')\nassert(decimal_to_binary(18) == 'db10010db')\nassert(decimal_to_binary(19)\
    \ == 'db10011db')\nassert(decimal_to_binary(20) == 'db10100db')\nassert(decimal_to_binary(21)\
    \ == 'db10101db')\nassert(decimal_to_binary(22) == 'db10110db')\nassert(decimal_to_binary(23)\
    \ == 'db10111db')\nassert(decimal_to_binary", "    local binary = \"\"\n    while\
    \ decimal > 0 do\n        binary = binary .. math.floor(decimal % 2)\n       \
    \ decimal = math.floor(decimal / 2)\n    end\n    return string.reverse(binary)\n\
    end", "  local binary = ''\n  repeat\n    local remainder = decimal % 2\n    binary\
    \ = remainder .. binary\n    decimal = (decimal - remainder) / 2\n  until decimal\
    \ == 0\n  return binary\nend\nprint('===== binary =====')\nprint(decimal_to_binary(1))\n\
    print(decimal_to_binary(2))\nprint(decimal_to_binary(3))\nprint(decimal_to_binary(100))\n\
    print(decimal_to_binary(255))\nprint(decimal_to_binary(65535))\nprint('===== octal\
    \ =====')\nprint(string.format('%o', 65535))\nprint('===== hexadecimal =====')\n\
    print(string.format('%x', 65535))", "    local stack = {}\n    if decimal < 0\
    \ then\n        -- if negative, insert the sign\n        table.insert(stack, '-')\n\
    \        decimal = -decimal\n    end\n    if decimal == 0 then\n        table.insert(stack,\
    \ '0')\n    end\n    while decimal > 0 do\n        local m = decimal % 2\n   \
    \     table.insert(stack, m)\n        decimal = (decimal - m) / 2\n    end\n \
    \   return 'db' .. table.concat(stack) .. 'db'\nend", "  local binary = {\n  \
    \  db = \"\",\n    db = \"\"\n  }\n  local result = {}\n  local error = \"Whoops,\
    \ looks like the number is out of bounds.\"\n  local double = string.format(\"\
    %.2f\", decimal)\n  local split = double:split(\".\")\n  if split[1] > 30 or split[2]\
    \ > 30 then\n    return error\n  end\n  if split[1] == \"0\" then\n    binary.db\
    \ = \"db\"\n  else\n    while split[1] ~= \"0\" do\n      local remainder = split[1]\
    \ % 2\n      table.insert(result, remainder)\n      split[1] = (split[1] - remainder)\
    \ / 2\n    end\n    binary.db = \"\"\n  end\n  if split[2] == \"0\" then\n   \
    \ binary.db = binary.db .. \"db\"\n  else\n    local result2 = {}\n    table.insert(result2,\
    \ \".\")\n    while split[2] ~= \"0\" do\n      local remainder = split[2] * 2\n\
    \      local remainder = string.format(\"%.1f\", remainder)\n      local remainder\
    \ = tonumber(remainder)\n      table.insert(result2, remainder)\n      split[2]\
    \ = (split[2] * 2) - remainder\n    end\n    result2 = table.concat(result2)\n\
    \    binary.db = binary.db .. result2\n  end\n  result = table.concat(result)\n\
    \  result = string.reverse(result)\n  binary.db = binary.db .. result\n  return\
    \ binary.db\nend", "    -- your code here\nend\ndecimal_to_binary(13) -- should\
    \ return 'db1101db'\ndecimal_to_binary(22) -- should return 'db10110db'\ndecimal_to_binary(1)\
    \ -- should return 'db1db'\ndecimal_to_binary(99999) -- should return 'db110001110011101111db'\n\
    decimal_to_binary(1575) -- should return 'db1100011101011db'", "  -- your code\
    \ here.\nend", "    -- some code\nend", "   --\n   local str = 'db'\n   local\
    \ i = 1\n   repeat\n      --\n      local digit = 1\n      local binary_num =\
    \ 2^i\n      --\n      repeat\n         --\n         if (decimal >= binary_num)\
    \ then\n            --\n            decimal = decimal - binary_num\n         \
    \   str = str .. '1'\n         else\n            --\n            str = str ..\
    \ '0'\n         end\n         --\n         binary_num = binary_num / 2\n     \
    \    digit = digit + 1\n         --\n      until digit == 4\n      --\n      i\
    \ = i + 1\n      --\n   until decimal == 0\n   --\n   str = str .. 'db'\n   --\n\
    \   return str\nend", "  return string.format(\"db%sdb\",\n    ({string.rep('0',\
    \ 8 - string.len(string.format(\"%x\", decimal)) % 8) .. string.format(\"%x\"\
    , decimal)})[1]:gsub(\".\", function(c) return \"db\" .. string.format(\"%04b\"\
    , string.byte(c)) end))\nend", "    return decimal\nend", "\t-- your code here\n\
    end", "  local binary = \"\"\n  while decimal > 0 do\n    local reminder = math.fmod(decimal,\
    \ 2)\n    binary = binary .. tostring(reminder)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return \"db\" .. string.reverse(binary) .. \"db\"\nend", "  \
    \  local n = \"\"\n    repeat\n        n = n .. tostring(decimal % 2)\n      \
    \  decimal = math.floor(decimal / 2)\n    until decimal == 0\n    return string.reverse(n)\n\
    end", "  local sign = \"0\"\n  if decimal < 0 then\n    sign = \"1\"\n    decimal\
    \ = -decimal\n  end\n  local result = \"\"\n  while decimal > 0 do\n    result\
    \ = tostring(decimal % 2) .. result\n    decimal = math.floor(decimal / 2)\n \
    \ end\n  return \"db\" .. sign .. result .. \"db\"\nend", "    -- You can only\
    \ use built-in functions:\n    -- bit32\n    -- math\n    -- string\n    -- table\n\
    \    -- Extra characters are omitted.\n    return 'db' .. 'db'\nend", "  local\
    \ binary_prefix, binary_suffix = 'db', 'db'\n  local binary_string = ''\n  local\
    \ remainder", "    local arr = {}\n    while decimal > 0 do\n        arr[#arr\
    \ + 1] = math.fmod(decimal, 2)\n        decimal = math.floor(decimal / 2)\n  \
    \  end\n    for i = 1, (8 - #arr) do\n        arr[#arr + 1] = 0\n    end\n   \
    \ local rev = {}\n    for i = #arr, 1, -1 do\n        rev[#rev + 1] = arr[i]\n\
    \    end\n    return table.concat(rev, '')\nend", "  local lookup_table = {'0',\
    \ '1'}\n  local dec = decimal\n  local bin = ''\n  local rem = 0\n  repeat\n \
    \   rem = math.fmod(dec, 2)\n    dec = math.floor(dec / 2)\n    bin = bin .. lookup_table[rem\
    \ + 1]\n  until dec == 0\n  return 'db' .. string.reverse(bin) .. 'db'\nend",
  "    -- todo\nend", "  local i = 0\n  local bin = \"\"\n  while decimal > 0 do\n\
    \    i = i + 1\n    if decimal % 2 == 0 then\n      bin = \"0\" .. bin\n    else\n\
    \      bin = \"1\" .. bin\n    end\n    decimal = decimal / 2\n  end\n  return\
    \ \"db\" .. bin .. \"db\"\nend", "    local binary_string = ''\n    local binary_string_rev\
    \ = ''\n    local remainder\n    repeat\n        remainder = decimal % 2\n   \
    \     binary_string = binary_string .. remainder\n        decimal = math.floor(decimal\
    \ / 2)\n    until decimal == 0\n    for i = 1, #binary_string do\n        binary_string_rev\
    \ = binary_string_rev .. string.sub(binary_string, #binary_string - i + 1, #binary_string\
    \ - i + 1)\n    end\n    return 'db' .. binary_string_rev .. 'db'\nend\ntest.assert_equals(decimal_to_binary(100),\
    \ 'db1100100db')\ntest.assert_equals(decimal_to_binary(255), 'db11111111db')\n\
    test.assert_equals(decimal_to_binary(534), 'db10000010010db')\ntest.assert_equals(decimal_to_binary(10),\
    \ 'db1010db')\ntest.assert_equals(decimal_to_binary(20), 'db10100db')\ntest.assert_equals(decimal_to_binary(40),\
    \ 'db101000db')\ntest.assert_equals(decimal_to_binary(45), 'db101101db')\ntest.assert_equals(decimal_to_binary(96),\
    \ 'db1100000db')\ntest.assert_equals(decimal_to_binary(500), 'db111110100db')\n\
    test.assert_equals(decimal_to_binary(501), 'db111110101db')\ntest.assert_equals(decimal_to_binary(502),\
    \ 'db111110110db')\ntest.assert_equals(decimal_to_binary(503), 'db111110111db')\n\
    test.assert_equals(decimal_to_binary(504), 'db111111000db')\ntest.assert_equals(decimal_to_binary(505),\
    \ 'db111111001db')\ntest.assert_equals(decimal_to_binary(506), 'db111111010db')\n\
    test.assert_equals(decimal_to_binary(507), 'db111111011db", "  local db = \"\"\
    \n  while decimal > 0 do\n    db = (decimal % 2) .. db\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return db\nend", "    local bit = 0\n    local binary = \"\"\n\
    \    while decimal > 0 do\n        local tmp = decimal % 2\n        binary = tostring(tmp)\
    \ .. binary\n        decimal = (decimal - tmp) / 2\n    end\n    return \"db\"\
    \ .. binary .. \"db\"\nend", "    decimal = decimal + 2 ^ 32  -- make unsigned\n\
    \    local result = \"db\"\n    for i = 32, 1, -1 do\n        local power = 2\
    \ ^ (i - 1)\n        if decimal >= power then\n            result = result ..\
    \ \"1\"\n            decimal = decimal - power\n        else\n            result\
    \ = result .. \"0\"\n        end\n    end\n    return result .. \"db\"\nend",
  "    local binary = \"\"\n    repeat\n        binary = string.char(decimal % 2 +\
    \ 48) .. binary\n        decimal = math.floor(decimal / 2)\n    until decimal\
    \ <= 0\n    return 'db' .. binary .. 'db'\nend", "    local binary = \"\"\n  \
    \  local isDone = false\n    local isEven = false\n    while isDone == false do\n\
    \        if decimal == 0 then\n            isDone = true\n        else\n     \
    \       if decimal % 2 == 0 then\n                isEven = true\n            else\n\
    \                isEven = false\n            end\n            if isEven == true\
    \ then\n                binary = \"0\" .. binary\n            else\n         \
    \       binary = \"1\" .. binary\n            end\n            decimal = math.floor(decimal\
    \ / 2)\n        end\n    end\n    return \"db\" .. binary .. \"db\"\nend", "\t\
    local binary = \"db\"\n\twhile decimal > 0 do\n\t\tlocal bit = math.fmod(decimal,\
    \ 2)\n\t\tdecimal = math.floor(decimal / 2)\n\t\tbinary = binary .. bit\n\tend\n\
    \tbinary = binary .. \"db\"\n\treturn binary\nend", "\tlocal bin = \"\"\n\twhile\
    \ decimal > 0 do\n\t\tlocal remainder = decimal % 2\n\t\tbin = tostring(remainder)\
    \ .. bin\n\t\tdecimal = math.floor(decimal / 2)\n\tend\n\tbin = string.format(\"\
    %08d\", bin)\n\tbin = \"db\" .. bin .. \"db\"\n\treturn bin\nend", "\tlocal bin\
    \ = \"db\"\n\tlocal quotient = decimal\n\twhile quotient > 0 do\n\t\tbin = bin\
    \ .. quotient % 2\n\t\tquotient = math.floor(quotient / 2)\n\tend\n\treturn bin\
    \ .. \"db\"\nend", "  if not tonumber(decimal) then return nil end\n  local binary\
    \ = \"db\"\n  local index = 1\n  local first, last, byte = byte(decimal, index,\
    \ index)\n  while byte do\n    local n = byte % 2\n    if n == 0 then\n      binary\
    \ = binary .. \"0\"\n    else\n      binary = binary .. \"1\"\n    end\n    index\
    \ = index + 1\n    first, last, byte = byte(decimal, index, index)\n  end\n  return\
    \ binary .. \"db\"\nend", "  local db = \"\"\n  local i = 0\n  local last = decimal\n\
    \  repeat\n    local last = decimal - 2^i\n    if last >= 0 then\n      db = db\
    \ .. \"1\"\n      decimal = last\n    else\n      db = db .. \"0\"\n    end\n\
    \    i = i + 1\n  until decimal == 0\n  return \"db\" .. db .. \"db\"\nend", " \
    \   local value = math.floor(decimal)\n    local binary = \"\"\n    while value\
    \ ~= 0 do\n        local reminder = value % 2\n        value = (value - reminder)\
    \ / 2\n        binary = binary .. tostring(reminder)\n    end\n    return \"db\"\
    \ .. string.reverse(binary) .. \"db\"\nend", "  local bin_str = \"db\"\n  local\
    \ base = 2\n  while decimal > 0 do\n    if decimal % base >= 10 then\n      bin_str\
    \ = \"A\" .. bin_str\n    else\n      bin_str = tostring(decimal % base) .. bin_str\n\
    \    end\n    decimal = math.floor(decimal / base)\n  end\n  return bin_str ..\
    \ \"db\"\nend", "    local binary = \"\"\n    local db = \"db\"\n    local bit_length\
    \ = string.len(decimal)\n    local binary_length = bit_length * 8\n    local base_ten\
    \ = tonumber(decimal)\n    local base_two = \"\"\n    for i = 1, binary_length\
    \ do\n        base_two = base_two .. \"0\"\n    end\n    local base_two = tonumber(base_two)\n\
    \    local difference = 0\n    while base_ten ~= 0 do\n        difference = base_ten\
    \ - base_two\n        if difference < 0 then\n            binary = binary .. \"\
    0\"\n        else\n            binary = binary .. \"1\"\n            base_ten\
    \ = difference\n        end\n        base_two = base_two / 2\n    end\n    return\
    \ db .. binary .. db\nend", "  local binary_string = ''\n  while decimal ~= 0\
    \ do\n    binary_string = tostring(decimal % 2) .. binary_string\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return 'db' .. binary_string .. 'db'\nend",
  "end\ndecimal_to_binary(1) == \"db11db\"\ndecimal_to_binary(2) == \"db100db\"\n\
    decimal_to_binary(100) == \"db1100100db\"\ndecimal_to_binary(255) == \"db11111111db\"",
  "  -- Add the db's\n  local binary = 'db'\n  -- write your code here\n  --\n  --\n\
    \  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  --\n  -- remove\
    \ this when you're done\n  return binary\nend", "\tassert(type(decimal) == \"\
    number\", \"Arg #1 must be a number\")\n\tlocal bin_nums = {1, 2, 4, 8, 16, 32,\
    \ 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072, 262144,\
    \ 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864, 134217728,\
    \ 268435456, 536870912, 1073741824, 2147483648, 4294967296, 8589934592, 17179869184,\
    \ 34359738368, 68719476736, 137438953472, 274877906944, 549755813888, 1099511627776,\
    \ 2199023255552, 4398046511104, 8796093022208, 17592186044416, 35184372088832,\
    \ 70368744177664, 140737488355328, 281474976710656, 562949953421312, 1125899906842624,\
    \ 2251799813685248, 4503599627370496, 9007199254740992, 18014398509481984, 36028797018963968,\
    \ 72057594037927936, 144115188075855872, 288230376151711744, 576460752303423488,\
    \ 1152921504606846976, 2305843009213693952, 4611686018427387904, 9223372036854775808}\n\
    \tlocal binary = {'d', 'b'}\n\tlocal count = 1\n\twhile decimal > 0 do\n\t\tif\
    \ count > #bin_nums then\n\t\t\tprint(\"Out of range\")\n\t\t\treturn nil\n\t\t\
    end\n\t\tif decimal >= bin_nums[count] then\n\t\t\ttable.insert(binary, '1')\n\
    \t\t\tdecimal = decimal - bin_nums[count]\n\t\telse\n\t\t\ttable.insert(binary,\
    \ '0')\n\t\tend\n\t\tcount = count + 1\n\tend\n", "    local r = {}\n    while\
    \ decimal > 0 do\n        table.insert(r, (decimal % 2) == 1 and 1 or 0)\n   \
    \     decimal = decimal // 2\n    end\n    if #r == 0 then\n        return 'db0db'\n\
    \    end\n    return 'db' .. table.concat(r):reverse() .. 'db'\nend", "  return\
    \ 'db' .. string.format('%b', decimal) .. 'db'\nend", "    local binary = {}\n\
    \    while decimal >= 1 do\n        table.insert(binary,1,decimal%2)\n       \
    \ decimal = math.floor(decimal/2)\n    end\n    table.insert(binary,1,0)\n   \
    \ table.insert(binary,1,0)\n    table.insert(binary,1,0)\n    local s = \"db\"\
    \n    for i = 1, #binary do\n        s = s .. binary[i]\n    end\n    s = s ..\
    \ \"db\"\n    return s\nend", "  local t = {db = '', bin = '', db = ''}\n  repeat\n\
    \    local rest = decimal % 2\n    t[#t + 1] = rest\n    decimal = (decimal -\
    \ rest) / 2\n  until decimal == 0\n  for i = #t, 1, -1 do\n    t.bin = t.bin ..\
    \ t[i]\n  end\n  return t.db .. t.bin .. t.db\nend", "   return 'db' .. dec_to_bin(decimal)\
    \ .. 'db'\nend", "    local bin = ''\n    while decimal ~= 0 do\n        local\
    \ quotient = math.floor(decimal / 2)\n        local remainder = decimal % 2\n\
    \        bin = tostring(remainder) .. bin\n        decimal = quotient\n    end\n\
    \    if bin == '' then bin = '0' end\n    return 'db' .. bin .. 'db'\nend", " \
    \ -- TODO\nend", "  local binary = {}\n  while true do\n    local div, mod = math.modf(decimal\
    \ / 2)\n    table.insert(binary, math.ceil(mod))\n    if div == 0 then break end\n\
    \    decimal = div\n  end\n  return 'db' .. table.concat(binary) .. 'db'\nend",
  end, "    return 'db' .. toBin(decimal) .. 'db'\nend\nprint(decimal_to_binary(0))\
    \ -- db0000000000000000db\nprint(decimal_to_binary(1)) -- db0000000000000001db\n\
    print(decimal_to_binary(2)) -- db0000000000000010db\nprint(decimal_to_binary(3))\
    \ -- db0000000000000011db\nprint(decimal_to_binary(4)) -- db0000000000000100db\n\
    print(decimal_to_binary(5)) -- db0000000000000101db\nprint(decimal_to_binary(6))\
    \ -- db0000000000000110db\nprint(decimal_to_binary(7)) -- db0000000000000111db\n\
    print(decimal_to_binary(8)) -- db0000000000001000db\nprint(decimal_to_binary(9))\
    \ -- db0000000000001001db\nprint(decimal_to_binary(10)) -- db0000000000001010db\n\
    print(decimal_to_binary(11)) -- db0000000000001011db\nprint(decimal_to_binary(12))\
    \ -- db0000000000001100db\nprint(decimal_to_binary(13)) -- db0000000000001101db\n\
    print(decimal_to_binary(14)) -- db0000000000001110db\nprint(decimal_to_binary(15))\
    \ -- db0000000000001111db\nprint(decimal_to_binary(16)) -- db0000000000010000db\n\
    print(decimal_to_binary(17)) -- db0000000000010001db\nprint(decimal_to_binary(18))\
    \ -- db0000000000010010db\nprint(decimal_to_binary(19)) -- db0000000000010011db\n\
    print(decimal_to_binary(20)) -- db0000000000010100db\nprint(decimal_to_binary(21))\
    \ -- db0000000000010101db\nprint(decimal_to_binary(22)) -- db0000000000010110db\n\
    print(decimal_to_binary(23)) -- db0000000000010111db\nprint(decimal_to_binary(24))\
    \ -- db0000000000011000db\nprint(decimal_to_binary(25)) -- db0000000000011001db\n\
    print(decimal_to_binary(26)) -- db00000000", "    local binary = {\n        ['0']\
    \ = '0000',\n        ['1'] = '0001',\n        ['2'] = '0010',\n        ['3'] =\
    \ '0011',\n        ['4'] = '0100',\n        ['5'] = '0101',\n        ['6'] = '0110',\n\
    \        ['7'] = '0111',\n        ['8'] = '1000',\n        ['9'] = '1001',\n \
    \       ['a'] = '1010',\n        ['b'] = '1011',\n        ['c'] = '1100',\n  \
    \      ['d'] = '1101',\n        ['e'] = '1110',\n        ['f'] = '1111',\n   \
    \ }\n    local result = ''\n    for i = 1, #decimal do\n        result = result\
    \ .. binary[decimal:sub(i, i)]\n    end\n    return 'db' .. result .. 'db'\nend",
  "    -- write your code here\n    local result = \"\"\n    local remainder = \"\"\
    \n    repeat\n        remainder = decimal % 2\n        decimal = math.floor(decimal\
    \ / 2)\n        result = remainder .. result\n    until decimal == 0\n    return\
    \ \"db\" .. result .. \"db\"\nend", "\tlocal binary = {};\n\tlocal num = decimal;\n\
    \tlocal j = 0;\n\twhile num > 0 do\n\t\tlocal i = math.fmod(num, 2);\n\t\tnum\
    \ = math.floor(num / 2);\n\t\tbinary[j + 1] = i;\n\t\tj = j + 1;\n\tend\n\tlocal\
    \ str = \"db\";\n\tfor i = j - 1, 0, -1 do\n\t\tstr = str .. binary[i];\n\tend\n\
    \tstr = str .. \"db\";\n\treturn str;\nend", "    return 'db' .. (decimal < 2\
    \ and decimal or decimal % 2 .. decimal_to_binary(math.floor(decimal / 2))) ..\
    \ 'db'\nend", "  local binary = decbin(decimal)\n  local bin = \"db\" .. binary\
    \ .. \"db\"\n  return bin\nend", "  if decimal == 0 then return \"db0db\" end\n\
    \  local bin_num = \"db\"\n  repeat\n    local remainder = decimal % 2\n    decimal\
    \ = math.floor(decimal / 2)\n    bin_num = bin_num .. remainder\n  until decimal\
    \ == 0\n  return bin_num .. \"db\"\nend\nprint(decimal_to_binary(0) == \"db0db\"\
    )\nprint(decimal_to_binary(2) == \"db10db\")\nprint(decimal_to_binary(3) == \"\
    db11db\")\nprint(decimal_to_binary(4) == \"db100db\")\nprint(decimal_to_binary(9)\
    \ == \"db1001db\")\nprint(decimal_to_binary(10) == \"db1010db\")\nprint(decimal_to_binary(11)\
    \ == \"db1011db\")\nprint(decimal_to_binary(32) == \"db100000db\")\nprint(decimal_to_binary(100)\
    \ == \"db1100100db\")\nprint(decimal_to_binary(1000) == \"db1111101000db\")\n\
    print(decimal_to_binary(1000000) == \"db11110100001001000000db\")", "    --[[\n\
    \    -- returns the binary representation of a decimal number\n    --]]\n    local\
    \ binary_str = ''\n    -- check for negative number\n    if decimal < 0 then\n\
    \        binary_str = '1'\n        decimal = decimal + 1\n    else\n        binary_str\
    \ = '0'\n    end\n    -- find two's complement of decimal\n    while decimal ~=\
    \ 0 do\n        local remainder = decimal % 2\n        binary_str = string.format('%d%s',\
    \ remainder, binary_str)\n        decimal = (decimal - remainder) / 2\n    end\n\
    \    -- pad binary string\n    local padding = '0'\n    for i = 1, 31 do\n   \
    \     padding = padding .. '0'\n    end\n    binary_str = string.format('%s%s',\
    \ padding, binary_str)\n    -- insert db\n    binary_str = string.format('db%sdb',\
    \ binary_str)\n    return binary_str\nend", "    local base,bin,x,rem=2,\"db\"\
    ,decimal,\"\"\n    while x~=0 do\n        rem=x%base..rem\n        x=math.floor(x/base)\n\
    \    end\n    return bin..rem..bin\nend", "\t\n\tlocal binary = {}\n\t\n\tfor\
    \ i = 0, decimal - 1 do\n\t\t\n\t\tif binary[1] == nil then\n\t\t\t\n\t\t\ttable.insert(binary,\
    \ '1')\n\t\t\t\n\t\telse\n\t\t\t\n\t\t\tfor j = 1, #binary do\n\t\t\t\t\n\t\t\t\
    \tif binary[j] == '1' then\n\t\t\t\t\t\n\t\t\t\t\tbinary[j] = '0'\n\t\t\t\t\t\n\
    \t\t\t\telseif binary[j] == '0' then\n\t\t\t\t\t\n\t\t\t\t\tbinary[j] = '1'\n\t\
    \t\t\t\t\n\t\t\t\tend\n\t\t\t\t\n\t\t\tend\n\t\t\t\n\t\t\tif binary[#binary] ==\
    \ '1' then\n\t\t\t\t\n\t\t\t\ttable.insert(binary, '0')\n\t\t\t\t\n\t\t\tend\n\
    \t\t\t\n\t\tend\n\t\t\n\tend\n\t\n\tlocal str = \"\"\n\t\n\tfor k = 1, #binary\
    \ do\n\t\t\n\t\tstr = str .. binary[k]\n\t\t\n\tend\n\t\n\treturn 'db' .. str\
    \ .. 'db'\n\t\nend", "\tlocal r = \"db\"\n\twhile decimal > 0 do\n\t\tr = r ..\
    \ tostring(decimal % 2)\n\t\tdecimal = math.floor(decimal / 2)\n\tend\n\treturn\
    \ r .. \"db\"\nend", "    local function pow(base,exp)\n        if exp == 0 then\
    \ return 1 end\n        return base * pow(base,exp-1)\n    end\n    if not decimal\
    \ then return 'db11db' end\n    local result = {}\n    local base = 2\n    local\
    \ exp = 0\n    while decimal > 0 do\n        local quotient = math.floor(decimal\
    \ / pow(base,exp))\n        if quotient == 1 then\n            decimal = decimal\
    \ - pow(base,exp)\n            table.insert(result,quotient)\n        else\n \
    \           table.insert(result,0)\n        end\n        exp = exp + 1\n    end\n\
    \    return 'db' .. string.reverse(table.concat(result)) .. 'db'\nend", "    local\
    \ binary = ''\n    local digits = {}\n    local i = 0\n    while decimal > 0 do\n\
    \        local rest = decimal % 2\n        digits[i] = rest\n        decimal =\
    \ (decimal - rest) / 2\n        i = i + 1\n    end\n    for i = i - 1, 0, -1 do\n\
    \        binary = binary .. digits[i]\n    end\n    return string.format('db%sdb',\
    \ binary)\nend", "    local bit_len = math.floor(math.log(decimal) / math.log(2))\
    \ + 1\n    local binary = string.rep('0', bit_len)\n    for pos = bit_len, 1,\
    \ -1 do\n        local bit = 2 ^ (pos - 1)\n        if decimal >= bit then\n \
    \           binary = string.sub(binary, 1, pos - 1) .. '1' .. string.sub(binary,\
    \ pos + 1)\n            decimal = decimal - bit\n        end\n    end\n    return\
    \ 'db' .. binary .. 'db'\nend", "  local binary = {}\n  local quotient = decimal\n\
    \  local remainder\n  local str = \"\"\n  while quotient ~= 0 do\n    remainder\
    \ = quotient % 2\n    quotient = math.floor(quotient / 2)\n    table.insert(binary,\
    \ remainder)\n  end\n  for i = #binary, 1, -1 do\n    str = str .. binary[i]\n\
    \  end\n  if string.len(str) < 8 then\n    local zero_num = 8 - string.len(str)\n\
    \    for i = 1, zero_num do\n      str = \"0\" .. str\n    end\n  end\n  return\
    \ \"db\" .. str .. \"db\"\nend", "\tlocal base = 2\n\tlocal result = ''\n\twhile\
    \ decimal > 0 do\n\t\tresult = math.fmod(decimal, base) .. result\n\t\tdecimal\
    \ = math.floor(decimal / base)\n\tend\n\treturn 'db' .. result .. 'db'\nend",
  "    local dec = decimal\n    local t = {}\n    local db = \"db\"\n    while dec\
    \ ~= 0 do\n        local rest = dec % 2\n        table.insert(t, rest)\n     \
    \   dec = (dec - rest) / 2\n    end\n    local bin = db\n    for i = #t, 1, -1\
    \ do\n        bin = bin .. t[i]\n    end\n    bin = bin .. \"db\"\n    return\
    \ bin\nend\nassert(decimal_to_binary(2) == \"db01db\")\nassert(decimal_to_binary(10)\
    \ == \"db1010db\")\nassert(decimal_to_binary(15) == \"db1111db\")\nassert(decimal_to_binary(21)\
    \ == \"db10101db\")", "    return \"db\" .. decimal .. \"db\"\nend", "  local\
    \ binary = {}\n  for i = 0, 9 do\n    local n = decimal % 2\n    decimal = (decimal\
    \ - n) / 2\n    table.insert(binary, 1, n)\n  end\n  return 'db' .. table.concat(binary)\
    \ .. 'db'\nend", "  return 'db' .. decimal .. 'db'\nend", "  local answer = \"\
    \"\n  local total = 0\n  local exponent = 0\n  repeat\n    total = 0\n    for\
    \ i = 0, exponent do\n      total = total + 2^i\n    end\n    if total > decimal\
    \ then\n      answer = answer .. '0'\n    else\n      answer = answer .. '1'\n\
    \      decimal = decimal - total\n    end\n    exponent = exponent + 1\n  until\
    \ decimal == 0\n  return string.format(\"db%sdb\", answer)\nend", "  local db\
    \ = string.format(\"%q\", dec2bin(decimal))\n  return \"db\" .. db:sub(2, -2)\
    \ .. \"db\"\nend", "    local sign = '0'\n    if decimal < 0 then\n        sign\
    \ = '1'\n        decimal = -decimal\n    end\n    local bin = ''\n    while decimal\
    \ > 0 do\n        bin = tostring(decimal % 2) .. bin\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return 'db' .. sign .. bin .. 'db'\nend", "end\nassert(decimal_to_binary(8)\
    \ == 'db00db')\nassert(decimal_to_binary(3) == 'db011db')\nassert(decimal_to_binary(1)\
    \ == 'db01db')\nassert(decimal_to_binary(0) == 'db0db')\nassert(decimal_to_binary(5)\
    \ == 'db101db')\nassert(decimal_to_binary(10) == 'db1010db')\nassert(decimal_to_binary(6)\
    \ == 'db110db')\nassert(decimal_to_binary(11) == 'db1011db')\nassert(decimal_to_binary(42)\
    \ == 'db101010db')\nassert(decimal_to_binary(85) == 'db1010101db')\nassert(decimal_to_binary(255)\
    \ == 'db11111111db')", "    local result = ''\n    while decimal > 0 do\n    \
    \    local binary = decimal % 2\n        result = binary .. result\n        decimal\
    \ = math.floor(decimal / 2)\n    end\n    return result\nend", "  local tmp =\
    \ {}\n  local function recurse(rest)\n    local d = math.floor(rest/2)\n    local\
    \ r = rest % 2\n    if r == 0 then r = \"0\" else r = \"1\" end\n    table.insert(tmp,\
    \ 1, r)\n    if d ~= 0 then\n      recurse(d)\n    end\n  end\n  recurse(decimal)\n\
    \  return 'db' .. table.concat(tmp) .. 'db'\nend", "    return 'db' .. decimal:reverse():gsub('(%d%d%d)',\
    \ '%1,'):reverse():gsub(',$', ''):gsub(',', 'd,b') .. 'db'\nend", "  if decimal\
    \ ~= 0 then\n    return decimal_to_binary(math.floor(decimal / 2)) .. decimal\
    \ % 2\n  else\n    return ''\n  end\nend", "    --[[\n    local bin = dec_to_bin(decimal)\n\
    \    return string.format(\"db%0\" .. string.len(decimal) .. \"db\", bin)\n  \
    \  --]]\n    return \"db\" .. dec_to_bin(decimal) .. \"db\"\nend", "    local\
    \ answer = string.format(\"%d\", 0x40000000 + decimal)\n    answer = string.sub(answer,\
    \ 3)\n    answer = string.gsub(answer, \"0\", \"d\")\n    answer = string.gsub(answer,\
    \ \"1\", \"b\")\n    answer = \"db\" .. answer .. \"d\"\n    return answer\nend",
  "    local function convert(a)\n        local result = {'db'}\n        while a ~=\
    \ 0 do\n            local temp = a % 2\n            a = math.floor(a / 2)\n  \
    \          table.insert(result, temp)\n        end\n        table.insert(result,\
    \ 'db')\n        return result\n    end\n    return table.concat(convert(decimal))\n\
    end\nprint(decimal_to_binary(555))\nprint(decimal_to_binary(1555))\nprint(decimal_to_binary(12345678901234567890))\n\
    print(decimal_to_binary(0))", "  local bin = {}\n  local q = math.floor(decimal\
    \ / 2)\n  local r = math.fmod(decimal, 2)\n  table.insert(bin, r)\n  while q >\
    \ 0 do\n    r = math.fmod(q, 2)\n    q = math.floor(q / 2)\n    table.insert(bin,\
    \ r)\n  end\n  local result = \"db\"\n  for i = #bin, 1, -1 do\n    result = result\
    \ .. bin[i]\n  end\n  return result .. \"db\"\nend", "    return 'db' .. decimal:gsub('%d',\
    \ {['0'] = '0000', ['1'] = '0001', ['2'] = '0010', ['3'] = '0011', ['4'] = '0100',\
    \ ['5'] = '0101', ['6'] = '0110', ['7'] = '0111', ['8'] = '1000', ['9'] = '1001'})\
    \ .. 'db'\nend", "  local start_binary = 'db'\n  local finish_binary = 'db'\n\
    \  local binary = ''\n  local decimal_number = decimal\n  while decimal_number\
    \ > 0 do\n    binary = binary .. tostring(decimal_number % 2)\n    decimal_number\
    \ = math.floor(decimal_number / 2)\n  end\n  return start_binary .. string.reverse(binary)\
    \ .. finish_binary\nend", "    local result = \"\"\n    while decimal > 0 do\n\
    \        local remainder = decimal % 2\n        result = tostring(remainder) ..\
    \ result\n        decimal = math.floor(decimal / 2)\n    end\n    return \"db\"\
    \ .. result .. \"db\"\nend", "    local t = {}\n    local base = { 1, 2, 4, 8,\
    \ 16, 32, 64, 128, 256, 512, 1024, 2048, 4096, 8192, 16384, 32768, 65536, 131072,\
    \ 262144, 524288, 1048576, 2097152, 4194304, 8388608, 16777216, 33554432, 67108864,\
    \ 134217728, 268435456, 536870912, 1073741824, 2147483648 }\n    local cnt = 0\n\
    \    repeat\n        cnt = cnt + 1\n        local b = (decimal % 2)\n        decimal\
    \ = math.floor(decimal / 2)\n        t[cnt] = b\n    until decimal == 0\n    t[cnt\
    \ + 1] = 'db'\n    t[1] = 'db'\n    return table.concat(t)\nend", "  local bin\
    \ = string.format(\"%b\", decimal)\n  return \"db\" .. bin .. \"db\"\nend", " \
    \   -- do something here\nend", "  local binary_string = decimal_to_binary_helper(decimal)\n\
    \  return 'db' .. binary_string .. 'db'\nend", "  local binary = ''\n  while decimal\
    \ ~= 0 do\n    local remainder = decimal % 2\n    binary = tostring(remainder)\
    \ .. binary\n    decimal = (decimal - remainder) / 2\n  end\n  return 'db' ..\
    \ binary .. 'db'\nend\nassert(decimal_to_binary(4) == 'db0100db')\nassert(decimal_to_binary(11)\
    \ == 'db1011db')\nassert(decimal_to_binary(23) == 'db10111db')\nassert(decimal_to_binary(0)\
    \ == 'db0db')\nassert(decimal_to_binary(1) == 'db1db')", "\tlocal str = {}\n\t\
    local rev = {}\n\tlocal b = \"\"\n\twhile decimal > 0 do\n\t\ttable.insert(str,\
    \ tostring(decimal % 2))\n\t\tdecimal = math.floor(decimal / 2)\n\tend\n\tfor\
    \ i = #str, 1, -1 do\n\t\ttable.insert(rev, str[i])\n\tend\n\tfor j = 1, #rev\
    \ do\n\t\tb = b .. rev[j]\n\tend\n\treturn \"db\" .. b .. \"db\"\nend", "    local\
    \ binary = 'db' .. string.format('%b', decimal) .. 'db'\n    local all_ones =\
    \ string.gsub(binary, '0', '1')\n    return binary, all_ones\nend", "  local binary\
    \ = 'db'\n  while decimal > 0 do\n    binary = binary .. (decimal % 2)\n    decimal\
    \ = math.floor(decimal / 2)\n  end\n  return string.reverse(binary) .. 'db'\n\
    end", "    local binary = ''\n    while decimal > 0 do\n        local digit =\
    \ decimal % 2\n        binary = binary .. tostring(digit)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return binary\nend", "  local binary = ''\n  local function\
    \ converter(d)\n    if d == 0 then return '' end\n    local b, r = math.modf(d\
    \ / 2)\n    return converter(b) .. tostring(r * 2)\n  end\n  local b = converter(decimal)\n\
    \  if #b == 0 then return 'db0db' end\n  return 'db' .. b .. 'db'\nend\nprint(decimal_to_binary(109))\n\
    </code>\nOutput:\n<code>db1101101db\n</code>\n", "  local binary = \"\"\n  repeat\n\
    \    local quotient = math.floor(decimal / 2)\n    local remainder = decimal %\
    \ 2\n    decimal = quotient\n    binary = tostring(remainder) .. binary\n  until\
    \ decimal == 0\n  return binary\nend", "\tlocal binary = \"db\"\n\trepeat\n\t\t\
    binary = (decimal % 2 == 0 and \"0\" or \"1\") .. binary\n\t\tdecimal = math.floor(decimal\
    \ / 2)\n\tuntil decimal == 0\n\treturn binary .. \"db\"\nend", "    local str\
    \ = 'db'\n    while decimal ~= 0 do\n        str = str .. decimal % 2\n      \
    \  decimal = math.floor(decimal / 2)\n    end\n    return str .. 'db'\nend\nassert(decimal_to_binary(45)\
    \ == 'db101101db')\nassert(decimal_to_binary(0) == 'db0db')\nassert(decimal_to_binary(1)\
    \ == 'db1db')\nassert(decimal_to_binary(2) == 'db10db')\nassert(decimal_to_binary(3)\
    \ == 'db11db')", "  local binary = \"db\"\n  while decimal > 0 do\n    binary\
    \ = binary .. (decimal % 2)\n    decimal = math.floor(decimal / 2)\n  end\n  return\
    \ binary .. \"db\"\nend", "\tlocal value = string.format(\"%x\", decimal)\n\t\
    local bin = string.gsub(value, \".\", function(c)\n\t\treturn string.format(\"\
    %04d\", tonumber(c, 16))\n\tend)\n\treturn \"db\" .. bin .. \"db\"\nend", "  --\
    \ ...\nend\nassert(decimal_to_binary(18) == 'db000110db')\nassert(decimal_to_binary(42)\
    \ == 'db00101010db')\nassert(decimal_to_binary(81) == 'db01010001db')", "  if\
    \ decimal == 0 then return 'db00000000db' end\n  local binary = {}\n  while decimal\
    \ > 0 do\n    table.insert(binary, 1, (decimal % 2))\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  local str = 'db'\n  for i = 1, 8 - #binary do\n    str = str\
    \ .. '0'\n  end\n  for i = 1, #binary do\n    str = str .. binary[i]\n  end\n\
    \  return str .. 'db'\nend", "  local n = string.format(\"%08d\",tonumber(decimal))\n\
    \  local bits = {'0000','0001','0010','0011','0100','0101','0110','0111','1000','1001','1010','1011','1100','1101','1110','1111'}\n\
    \  local bits2 = {'0000','0001','0010','0011','0100','0101','0110','0111','1000','1001','1010','1011','1100','1101','1110','1111'}\n\
    \  local b = \"\"\n  for p in n:gmatch(\"%d%d\") do\n    for i=1,#bits do\n  \
    \    if p == bits[i] then\n        b = b..bits2[i]\n      end\n    end\n  end\n\
    \  return 'db'..b..'db'\nend", "  local num = ''\n  while decimal > 0 do\n   \
    \ num = num .. tostring(decimal % 2)\n    decimal = math.floor(decimal / 2)\n\
    \  end\n  return 'db' .. string.reverse(num) .. 'db'\nend", "    local binary\
    \ = 'db'", "    local binary = 'db' .. dec_to_bin(decimal) .. 'db'\n    return\
    \ binary\nend", "    local result = \"\"\n    local remainder = 0\n    repeat\n\
    \        remainder = decimal % 2\n        decimal = math.floor(decimal / 2)\n\
    \        result = result .. remainder\n    until decimal == 0\n    return result\n\
    end", "  local binary = {}\n  local k = 1\n  local dig = 0\n  local mask = 1\n\
    \  local c = 0\n  while true do\n    if mask > decimal then\n      if k == 1 then\n\
    \        binary[k] = '0'\n      end\n      break\n    end\n    dig = math.floor(decimal\
    \ / mask) % 2\n    c = c + dig\n    if c == 1 or c == 3 then\n      binary[k]\
    \ = '1'\n    else\n      binary[k] = '0'\n    end\n    k = k + 1\n    mask = mask\
    \ * 2\n  end\n  return 'db' .. table.concat(binary) .. 'db'\nend\nprint(decimal_to_binary(5))\n\
    print(decimal_to_binary(0))\nprint(decimal_to_binary(4))\nprint(decimal_to_binary(13))\n\
    print(decimal_to_binary(18))\nprint(decimal_to_binary(19))\nprint(decimal_to_binary(10000))\n\
    print(decimal_to_binary(99999))\nprint(decimal_to_binary(1000000001))\nprint(decimal_to_binary(1000000009))\n\
    print(decimal_to_binary(1000000000))\nprint(decimal_to_binary(999999999))\nprint(decimal_to_binary(1000000000))\n\
    print(decimal_to_binary(999999999))\nprint(decimal_to_binary(1000000000))\nprint(decimal_to_binary(999999999))\n\
    print(decimal_to_binary(456546546546546))\nprint(decimal_to_binary(99999999999999999999999999999))\n\
    print(decimal_to_binary(5325532552352352352353255325523523523523532553255235235235235325532552352352352353255325523523523523532553255235235235235325532552352352352353255325523523523523532553255235235235235325532552352352352353255325523523523523532553255235",
  "    local db = ''\n    local result = 0\n    while decimal > 0 do\n        result\
    \ = decimal % 2\n        db = db .. tostring(result)\n        decimal = math.floor(decimal\
    \ / 2)\n    end\n    return \"db\" .. db .. \"db\"\nend", "\tdecimal = tostring(decimal)\n\
    \tlocal hex_string = '0x'\n\tlocal char\n\t\n\tfor i = 1, #decimal do\n\t\tchar\
    \ = string.sub(decimal, i, i)\n\t\tif char >= '0' and char <= '9' then\n\t\t\t\
    hex_string = hex_string .. decimal_table[tonumber(char)]\n\t\telse\n\t\t\thex_string\
    \ = hex_string .. char\n\t\tend\n\tend\n\t\n\tlocal value = tonumber(hex_string)\n\
    \thex_string = 'db' .. string.format('%x', value) .. 'db'\n\tlocal bin_string\
    \ = ''\n\tlocal bin_value\n\t\n\tfor i = 1, #hex_string do\n\t\tchar = string.sub(hex_string,\
    \ i, i)\n\t\tif char >= '0' and char <= '9' then\n\t\t\tbin_value = hex_table[tonumber(char)]\n\
    \t\telse\n\t\t\tbin_value = hex_table[string.byte(char)]\n\t\tend\n\t\tbin_string\
    \ = bin_string .. bin_value\n\tend\n\t\n\treturn bin_string\nend", "  local binary\
    \ = \"\"\n  -- todo\n  return \"db\" .. binary .. \"db\"\nend", "  local str_val\
    \ = tostring(decimal)\n  local decimal = string.match(str_val, '0\\.%d+')\n  local\
    \ fraction = decimal or '0'\n  local whole = str_val:gsub('%.' .. fraction, '')\n\
    \  local function whole_to_binary(whole)\n    local res = ''\n    local function\
    \ recursion(whole)\n      if whole > 0 then\n        local fraction = whole %\
    \ 2\n        res = res .. fraction\n        recursion(whole / 2)\n      end\n\
    \    end\n    recursion(whole)\n    return res:reverse()\n  end\n  local function\
    \ fraction_to_binary(fraction)\n    local res = ''\n    local function recursion(whole)\n\
    \      local whole = tonumber(whole)\n      if whole > 0 then\n        local fraction\
    \ = whole * 2\n        local frac_one, frac_two = tostring(fraction):match('(%d)%.(%d)')\n\
    \        res = res .. frac_one\n        recursion(frac_two)\n      end\n    end\n\
    \    recursion(fraction)\n    return res\n  end\n  return 'db' .. whole_to_binary(whole)\
    \ .. '.' .. fraction_to_binary(fraction) .. 'db'\nend", "  local db = {\"db\"\
    }\n  local r\n  while decimal ~= 0 do\n    r = math.fmod(decimal, 2)\n    decimal\
    \ = (decimal - r) / 2\n    db[#db + 1] = string.char(r + 48)\n  end\n  db[#db\
    \ + 1] = \"db\"\n  return table.concat(db):reverse()\nend", "    local result\
    \ = ''\n    local rem = 0\n    local quotient = 0\n    quotient = decimal", " \
    \ -- Insert your code here\nend", "    --return \"db01001000db\"\n    return string.format(\"\
    db%08sdb\", string.format(\"%b\", decimal):gsub(\"(.)\", \"%1 \"):gsub(\" 0 \"\
    , \"0\"):gsub(\" 1 \", \"1\"))\nend\nassert(decimal_to_binary(7) == \"db00000111db\"\
    )\nassert(decimal_to_binary(1) == \"db00000001db\")\nassert(decimal_to_binary(100)\
    \ == \"db01100100db\")\nassert(decimal_to_binary(0) == \"db00000000db\")", " \
    \ -- Start the first_letter string with the length of the original number.\n \
    \ local first_letter = #decimal .. 'b'\n  -- This is the start of a loop that\
    \ runs for every character in the number.\n  for i = 1, #decimal do\n    -- For\
    \ every character, we start a second loop that runs for each bit in the character.\n\
    \    for b = 1, 8 do\n      -- We check if the character is even or odd.\n   \
    \   -- If odd, then we add a 1 at the start of the string.\n      -- If even,\
    \ then we add a 0 at the start of the string.\n      -- When we add a 1 or a 0\
    \ at the start of the string, we also take away the last character,\n      --\
    \ as this is where we started adding the 1s and 0s.\n      if tonumber(decimal:sub(i,\
    \ i)) % 2 == 1 then\n        first_letter = '1' .. first_letter:sub(1, -2)\n \
    \     else\n        first_letter = '0' .. first_letter:sub(1, -2)\n      end\n\
    \      -- Then we check if the character is less than 2.\n      -- If it is, then\
    \ we have finished converting this character to binary.\n      -- Then we check\
    \ if the length of the string of binary numbers is a multiple of 8.\n      --\
    \ If it is, then we add a space at the start of the string.\n      -- We do this\
    \ so that the final string is easier to read.\n      if tonumber(decimal:sub(i,\
    \ i)) < 2 then\n        break\n      elseif #first_letter % 8 == 0 then\n    \
    \    first_letter = ' ' .. first_letter\n      end\n      -- Then we divide the\
    \ character by 2, as this is how we convert to binary.\n      decimal = tostring(tonumber(decimal:sub(i,\
    \ i)) / 2)\n    end\n  end\n  -- At the end of the loop, we add a second part\
    \ to the string.\n  -- We have to do this here, as we don't know how long the\
    \ first part of the string will be.\n  -- The second part of the string is the\
    \ length of the first part, plus a 'b' for binary.\n  local second_letter =",
  "    local binary = 'db'\n    repeat\n        local rem = decimal % 2\n        binary\
    \ = binary .. rem\n        decimal = math.floor(decimal / 2)\n    until decimal\
    \ == 0\n    return binary .. 'db'\nend", "\tlocal result = \"\"\n\twhile decimal\
    \ > 0 do\n\t\tlocal r = decimal % 2\n\t\tresult = tostring(r) .. result\n\t\t\
    decimal = (decimal - r) / 2\n\tend\n\treturn \"db\" .. result .. \"db\"\nend",
  "  -- if decimal == 1 then return \"01\" end\n  -- if decimal == 0 then return \"\
    00\" end\n  -- if decimal == nil then return nil end\n  -- if type(decimal) ~=\
    \ \"number\" then return nil end\n  -- if decimal ~= math.floor(decimal) then\
    \ return nil end\n  -- if decimal > 4294967295 then return nil end\n  -- if decimal\
    \ < 0 then return nil end\n  -- local bit32 = require(\"bit32\")\n  -- return\
    \ \"db\" .. bit32.tobinary(decimal) .. \"db\"\n  return nil\nend", "    return\
    \ 'db' .. string.format('%b', decimal) .. 'db'\nend", "    local result = \"db\"\
    \n    local str = decimal", "    if (decimal == 0) then\n        return \"db0000000000000000db\"\
    \n    end\n    local binary_str = \"db\"\n    local remainder = 0\n    while (decimal\
    \ ~= 0) do\n        remainder = decimal % 2\n        decimal = (decimal - remainder)\
    \ / 2\n        binary_str = binary_str .. remainder\n    end\n    return binary_str\
    \ .. \"db\"\nend", "  local binary = \"db\"\n  while decimal > 0 do\n    local\
    \ rest = decimal % 2\n    binary = binary .. tostring(rest)\n    decimal = math.floor(decimal\
    \ / 2)\n  end\n  return binary .. \"db\"\nend", "  local result = \"db\"\n  local\
    \ sign = false\n  if decimal < 0 then\n    sign = true\n    decimal = decimal\
    \ * -1\n  end\n  while decimal > 0 do\n    result = result .. (decimal % 2)\n\
    \    decimal = math.floor(decimal / 2)\n  end\n  if sign then\n    result = result\
    \ .. \"1\"\n  else\n    result = result .. \"0\"\n  end\n  return result .. \"\
    db\"\nend\nprint(decimal_to_binary(10)) -- db1010db\nprint(decimal_to_binary(10.2))\
    \ -- db1010db\nprint(decimal_to_binary(-0.1)) -- db1011010100011110101110000101000111101011100001010001111010111000011db"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
